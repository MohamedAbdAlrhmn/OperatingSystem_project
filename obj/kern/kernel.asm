
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 f0 18 00 	lgdtl  0x18f018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ef 18 f0       	mov    $0xf018efbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b8 74 6e f0 01 	movl   $0x1,0xf06e74b8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 8c 74 6e f0 01 	movl   $0x1,0xf06e748c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 1c 76 6e f0       	mov    $0xf06e761c,%edx
f010006a:	b8 cc 74 65 f0       	mov    $0xf06574cc,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 cc 74 65 f0       	push   $0xf06574cc
f010007e:	e8 d0 01 03 00       	call   f0130253 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 f5 5f 00 00       	call   f010608a <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 8e 5b 00 00       	call   f0105c28 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 3c 63 00 00       	call   f01063db <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 4b ce 00 00       	call   f010ceef <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 62 6e 00 00       	call   f0106f1a <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 bd cf 00 00       	call   f010d082 <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 d6 8d 00 00       	call   f0108ea3 <env_init>
	idt_init();
f01000cd:	e8 87 a3 00 00       	call   f010a459 <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 20 cf 00 00       	call   f010cffc <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 fb ce 00 00       	call   f010cfe4 <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 1b cf 00 00       	call   f010d014 <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a1 59 00 00       	call   f0105aa2 <pic_init>
	sched_init() ;
f0100101:	e8 45 46 00 00       	call   f010474b <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 e0 22 13 f0       	push   $0xf01322e0
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 0c 23 13 f0       	push   $0xf013230c
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 31 23 13 f0       	push   $0xf0132331
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 38 23 13 f0       	push   $0xf0132338
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 80 23 13 f0       	push   $0xf0132380
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 c8 23 13 f0       	push   $0xf01323c8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 80 23 13 f0       	push   $0xf0132380
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 38 23 13 f0       	push   $0xf0132338
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 0d 24 13 f0       	push   $0xf013240d
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 12 24 13 f0       	push   $0xf0132412
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 2b 24 13 f0       	push   $0xf013242b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 78 8b 00 00       	call   f0108d88 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 d6 43 00 00       	call   f01045eb <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 12 24 13 f0       	push   $0xf0132412
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 2b 24 13 f0       	push   $0xf013242b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 ec 50 00 00       	call   f0105355 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 92 4e 00 00       	call   f0105115 <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 60 43 00 00       	call   f01045eb <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 e0 74 65 f0       	mov    %eax,0xf06574e0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 12 24 13 f0       	push   $0xf0132412
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 2b 24 13 f0       	push   $0xf013242b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 c7 46 00 00       	call   f01049c5 <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 2d 24 13 f0       	push   $0xf013242d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 2b 24 13 f0       	push   $0xf013242b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 00 75 65 f0       	mov    %eax,0xf0657500
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 04 75 65 f0 b4 	movl   $0x3b4,0xf0657504
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 04 75 65 f0 d4 	movl   $0x3d4,0xf0657504
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 08 75 65 f0       	mov    %eax,0xf0657508
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 08 75 65 f0    	mov    0xf0657508,%edx
f0100690:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d 0c 75 65 f0 	mov    0xf065750c,%cx
f01006c3:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d 08 75 65 f0    	mov    0xf0657508,%ecx
f010072d:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 0c 75 65 f0 	mov    %dx,0xf065750c
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 08 75 65 f0       	mov    0xf0657508,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 08 75 65 f0       	mov    0xf0657508,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 0a fb 02 00       	call   f0130283 <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 08 75 65 f0    	mov    0xf0657508,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 0c 75 65 f0    	mov    %ax,0xf065750c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 04 75 65 f0    	mov    0xf0657504,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 04 75 65 f0       	mov    0xf0657504,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 0c 75 65 f0    	mov    0xf065750c,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 04 75 65 f0    	mov    0xf0657504,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 28 77 65 f0       	mov    %eax,0xf0657728
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 28 77 65 f0       	mov    %eax,0xf0657728
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 28 77 65 f0       	mov    %eax,0xf0657728
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 28 77 65 f0       	mov    %eax,0xf0657728
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 f1 18 f0    	mov    -0xfe70ee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 28 77 65 f0       	mov    %eax,0xf0657728

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 f5 18 f0 	mov    -0xfe70ae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 28 77 65 f0       	mov    0xf0657728,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 48 24 13 f0       	push   $0xf0132448
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 20 77 65 f0    	mov    0xf0657720,%edx
f0100a22:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 20 77 65 f0    	mov    %edx,0xf0657720
f0100a39:	8a 80 20 75 65 f0    	mov    -0xf9a8ae0(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 20 77 65 f0 00 	movl   $0x0,0xf0657720
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 24 77 65 f0    	mov    %edx,0xf0657724
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 20 75 65 f0    	mov    %dl,-0xf9a8ae0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 24 77 65 f0 00 	movl   $0x0,0xf0657724
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 20 77 65 f0    	mov    0xf0657720,%edx
f0100b12:	a1 24 77 65 f0       	mov    0xf0657724,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 20 77 65 f0    	mov    %edx,0xf0657720
f0100b29:	8a 80 20 75 65 f0    	mov    -0xf9a8ae0(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 20 77 65 f0       	mov    0xf0657720,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 20 77 65 f0 00 	movl   $0x0,0xf0657720
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 00 75 65 f0       	mov    0xf0657500,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 54 24 13 f0       	push   $0xf0132454
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 92 ed 02 00       	call   f012f9b7 <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 71 24 13 f0       	push   $0xf0132471
f0100c6b:	e8 ef f1 02 00       	call   f012fe5f <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100c98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100c9b:	50                   	push   %eax
f0100c9c:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100c9f:	50                   	push   %eax
f0100ca0:	68 77 24 13 f0       	push   $0xf0132477
f0100ca5:	ff 75 08             	pushl  0x8(%ebp)
f0100ca8:	e8 ec f9 02 00       	call   f0130699 <strsplit>
f0100cad:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100cb3:	85 c0                	test   %eax,%eax
f0100cb5:	75 0a                	jne    f0100cc1 <execute_command+0x32>
		return 0;
f0100cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cbc:	e9 37 01 00 00       	jmp    f0100df8 <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100cc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ccf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100cd6:	e9 8c 00 00 00       	jmp    f0100d67 <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cde:	89 d0                	mov    %edx,%eax
f0100ce0:	01 c0                	add    %eax,%eax
f0100ce2:	01 d0                	add    %edx,%eax
f0100ce4:	c1 e0 02             	shl    $0x2,%eax
f0100ce7:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100cec:	8b 10                	mov    (%eax),%edx
f0100cee:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100cf1:	83 ec 08             	sub    $0x8,%esp
f0100cf4:	52                   	push   %edx
f0100cf5:	50                   	push   %eax
f0100cf6:	e8 76 f4 02 00       	call   f0130171 <strcmp>
f0100cfb:	83 c4 10             	add    $0x10,%esp
f0100cfe:	85 c0                	test   %eax,%eax
f0100d00:	75 09                	jne    f0100d0b <execute_command+0x7c>
		{
			command_found = 1;
f0100d02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d09:	eb 6c                	jmp    f0100d77 <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d0e:	83 ec 0c             	sub    $0xc,%esp
f0100d11:	50                   	push   %eax
f0100d12:	e8 4e f3 02 00       	call   f0130065 <strlen>
f0100d17:	83 c4 10             	add    $0x10,%esp
f0100d1a:	89 c1                	mov    %eax,%ecx
f0100d1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d1f:	89 d0                	mov    %edx,%eax
f0100d21:	01 c0                	add    %eax,%eax
f0100d23:	01 d0                	add    %edx,%eax
f0100d25:	c1 e0 02             	shl    $0x2,%eax
f0100d28:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100d2d:	8b 10                	mov    (%eax),%edx
f0100d2f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d32:	83 ec 04             	sub    $0x4,%esp
f0100d35:	51                   	push   %ecx
f0100d36:	52                   	push   %edx
f0100d37:	50                   	push   %eax
f0100d38:	e8 6c f4 02 00       	call   f01301a9 <strncmp>
f0100d3d:	83 c4 10             	add    $0x10,%esp
f0100d40:	85 c0                	test   %eax,%eax
f0100d42:	75 20                	jne    f0100d64 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d44:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d47:	89 d0                	mov    %edx,%eax
f0100d49:	01 c0                	add    %eax,%eax
f0100d4b:	01 d0                	add    %edx,%eax
f0100d4d:	c1 e0 02             	shl    $0x2,%eax
f0100d50:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100d55:	8b 10                	mov    (%eax),%edx
f0100d57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d5a:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100d61:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d64:	ff 45 f0             	incl   -0x10(%ebp)
f0100d67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d6a:	a1 ac f8 18 f0       	mov    0xf018f8ac,%eax
f0100d6f:	39 c2                	cmp    %eax,%edx
f0100d71:	0f 82 64 ff ff ff    	jb     f0100cdb <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100d77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d7b:	74 2b                	je     f0100da8 <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d80:	89 d0                	mov    %edx,%eax
f0100d82:	01 c0                	add    %eax,%eax
f0100d84:	01 d0                	add    %edx,%eax
f0100d86:	c1 e0 02             	shl    $0x2,%eax
f0100d89:	05 48 f5 18 f0       	add    $0xf018f548,%eax
f0100d8e:	8b 00                	mov    (%eax),%eax
f0100d90:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100d93:	83 ec 08             	sub    $0x8,%esp
f0100d96:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100d99:	51                   	push   %ecx
f0100d9a:	52                   	push   %edx
f0100d9b:	ff d0                	call   *%eax
f0100d9d:	83 c4 10             	add    $0x10,%esp
f0100da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100da3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100da6:	eb 50                	jmp    f0100df8 <execute_command+0x169>
	}
	else if (count == 0)
f0100da8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100dac:	75 16                	jne    f0100dc4 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100dae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100db1:	83 ec 08             	sub    $0x8,%esp
f0100db4:	50                   	push   %eax
f0100db5:	68 7c 24 13 f0       	push   $0xf013247c
f0100dba:	e8 6e fe ff ff       	call   f0100c2d <cprintf>
f0100dbf:	83 c4 10             	add    $0x10,%esp
f0100dc2:	eb 2f                	jmp    f0100df3 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100dc4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100dcb:	eb 1e                	jmp    f0100deb <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100dcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dd0:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100dd7:	83 ec 08             	sub    $0x8,%esp
f0100dda:	50                   	push   %eax
f0100ddb:	68 92 24 13 f0       	push   $0xf0132492
f0100de0:	e8 48 fe ff ff       	call   f0100c2d <cprintf>
f0100de5:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100de8:	ff 45 e8             	incl   -0x18(%ebp)
f0100deb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100dee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100df1:	7c da                	jl     f0100dcd <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100df3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df8:	c9                   	leave  
f0100df9:	c3                   	ret    

f0100dfa <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100dfa:	55                   	push   %ebp
f0100dfb:	89 e5                	mov    %esp,%ebp
f0100dfd:	c7 05 b8 74 6e f0 00 	movl   $0x0,0xf06e74b8
f0100e04:	00 00 00 
f0100e07:	90                   	nop
f0100e08:	5d                   	pop    %ebp
f0100e09:	c3                   	ret    

f0100e0a <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e0a:	55                   	push   %ebp
f0100e0b:	89 e5                	mov    %esp,%ebp
f0100e0d:	c7 05 b8 74 6e f0 01 	movl   $0x1,0xf06e74b8
f0100e14:	00 00 00 
f0100e17:	90                   	nop
f0100e18:	5d                   	pop    %ebp
f0100e19:	c3                   	ret    

f0100e1a <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e1a:	55                   	push   %ebp
f0100e1b:	89 e5                	mov    %esp,%ebp
f0100e1d:	c7 05 b8 74 6e f0 02 	movl   $0x2,0xf06e74b8
f0100e24:	00 00 00 
f0100e27:	90                   	nop
f0100e28:	5d                   	pop    %ebp
f0100e29:	c3                   	ret    

f0100e2a <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e2a:	55                   	push   %ebp
f0100e2b:	89 e5                	mov    %esp,%ebp
f0100e2d:	c7 05 b8 74 6e f0 03 	movl   $0x3,0xf06e74b8
f0100e34:	00 00 00 
f0100e37:	90                   	nop
f0100e38:	5d                   	pop    %ebp
f0100e39:	c3                   	ret    

f0100e3a <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e3a:	55                   	push   %ebp
f0100e3b:	89 e5                	mov    %esp,%ebp
f0100e3d:	c7 05 b8 74 6e f0 04 	movl   $0x4,0xf06e74b8
f0100e44:	00 00 00 
f0100e47:	90                   	nop
f0100e48:	5d                   	pop    %ebp
f0100e49:	c3                   	ret    

f0100e4a <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e4a:	55                   	push   %ebp
f0100e4b:	89 e5                	mov    %esp,%ebp
f0100e4d:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e52:	85 c0                	test   %eax,%eax
f0100e54:	75 04                	jne    f0100e5a <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e56:	b0 01                	mov    $0x1,%al
f0100e58:	eb 02                	jmp    f0100e5c <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e5a:	b0 00                	mov    $0x0,%al
f0100e5c:	5d                   	pop    %ebp
f0100e5d:	c3                   	ret    

f0100e5e <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e5e:	55                   	push   %ebp
f0100e5f:	89 e5                	mov    %esp,%ebp
f0100e61:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e66:	83 f8 01             	cmp    $0x1,%eax
f0100e69:	75 04                	jne    f0100e6f <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e6b:	b0 01                	mov    $0x1,%al
f0100e6d:	eb 02                	jmp    f0100e71 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e6f:	b0 00                	mov    $0x0,%al
f0100e71:	5d                   	pop    %ebp
f0100e72:	c3                   	ret    

f0100e73 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e73:	55                   	push   %ebp
f0100e74:	89 e5                	mov    %esp,%ebp
f0100e76:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e7b:	83 f8 02             	cmp    $0x2,%eax
f0100e7e:	75 04                	jne    f0100e84 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e80:	b0 01                	mov    $0x1,%al
f0100e82:	eb 02                	jmp    f0100e86 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e84:	b0 00                	mov    $0x0,%al
f0100e86:	5d                   	pop    %ebp
f0100e87:	c3                   	ret    

f0100e88 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e88:	55                   	push   %ebp
f0100e89:	89 e5                	mov    %esp,%ebp
f0100e8b:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100e90:	83 f8 03             	cmp    $0x3,%eax
f0100e93:	75 04                	jne    f0100e99 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e95:	b0 01                	mov    $0x1,%al
f0100e97:	eb 02                	jmp    f0100e9b <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100e99:	b0 00                	mov    $0x0,%al
f0100e9b:	5d                   	pop    %ebp
f0100e9c:	c3                   	ret    

f0100e9d <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100e9d:	55                   	push   %ebp
f0100e9e:	89 e5                	mov    %esp,%ebp
f0100ea0:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0100ea5:	83 f8 04             	cmp    $0x4,%eax
f0100ea8:	75 04                	jne    f0100eae <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eaa:	b0 01                	mov    $0x1,%al
f0100eac:	eb 02                	jmp    f0100eb0 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eae:	b0 00                	mov    $0x0,%al
f0100eb0:	5d                   	pop    %ebp
f0100eb1:	c3                   	ret    

f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eb2:	55                   	push   %ebp
f0100eb3:	89 e5                	mov    %esp,%ebp
f0100eb5:	c7 05 8c 74 6e f0 01 	movl   $0x1,0xf06e748c
f0100ebc:	00 00 00 
f0100ebf:	90                   	nop
f0100ec0:	5d                   	pop    %ebp
f0100ec1:	c3                   	ret    

f0100ec2 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 8c 74 6e f0 02 	movl   $0x2,0xf06e748c
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 8c 74 6e f0 03 	movl   $0x3,0xf06e748c
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 8c 74 6e f0 04 	movl   $0x4,0xf06e748c
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100efa:	83 f8 01             	cmp    $0x1,%eax
f0100efd:	75 04                	jne    f0100f03 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f0f:	83 f8 02             	cmp    $0x2,%eax
f0100f12:	75 04                	jne    f0100f18 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f14:	b0 01                	mov    $0x1,%al
f0100f16:	eb 02                	jmp    f0100f1a <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f18:	b0 00                	mov    $0x0,%al
f0100f1a:	5d                   	pop    %ebp
f0100f1b:	c3                   	ret    

f0100f1c <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f1c:	55                   	push   %ebp
f0100f1d:	89 e5                	mov    %esp,%ebp
f0100f1f:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f24:	83 f8 03             	cmp    $0x3,%eax
f0100f27:	75 04                	jne    f0100f2d <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f29:	b0 01                	mov    $0x1,%al
f0100f2b:	eb 02                	jmp    f0100f2f <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f2d:	b0 00                	mov    $0x0,%al
f0100f2f:	5d                   	pop    %ebp
f0100f30:	c3                   	ret    

f0100f31 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f31:	55                   	push   %ebp
f0100f32:	89 e5                	mov    %esp,%ebp
f0100f34:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
f0100f39:	83 f8 04             	cmp    $0x4,%eax
f0100f3c:	75 04                	jne    f0100f42 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f3e:	b0 01                	mov    $0x1,%al
f0100f40:	eb 02                	jmp    f0100f44 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f42:	b0 00                	mov    $0x0,%al
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f4f:	c1 e8 0c             	shr    $0xc,%eax
f0100f52:	89 c2                	mov    %eax,%edx
f0100f54:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0100f59:	39 c2                	cmp    %eax,%edx
f0100f5b:	72 14                	jb     f0100f71 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f5d:	83 ec 04             	sub    $0x4,%esp
f0100f60:	68 98 24 13 f0       	push   $0xf0132498
f0100f65:	6a 55                	push   $0x55
f0100f67:	68 c0 24 13 f0       	push   $0xf01324c0
f0100f6c:	e8 35 f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f71:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0100f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f7a:	c1 e8 0c             	shr    $0xc,%eax
f0100f7d:	89 c1                	mov    %eax,%ecx
f0100f7f:	89 c8                	mov    %ecx,%eax
f0100f81:	01 c0                	add    %eax,%eax
f0100f83:	01 c8                	add    %ecx,%eax
f0100f85:	c1 e0 03             	shl    $0x3,%eax
f0100f88:	01 d0                	add    %edx,%eax
}
f0100f8a:	c9                   	leave  
f0100f8b:	c3                   	ret    

f0100f8c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f8c:	55                   	push   %ebp
f0100f8d:	89 e5                	mov    %esp,%ebp
f0100f8f:	53                   	push   %ebx
f0100f90:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f9a:	eb 3b                	jmp    f0100fd7 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f9f:	89 d0                	mov    %edx,%eax
f0100fa1:	01 c0                	add    %eax,%eax
f0100fa3:	01 d0                	add    %edx,%eax
f0100fa5:	c1 e0 02             	shl    $0x2,%eax
f0100fa8:	05 44 f5 18 f0       	add    $0xf018f544,%eax
f0100fad:	8b 10                	mov    (%eax),%edx
f0100faf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fb2:	89 c8                	mov    %ecx,%eax
f0100fb4:	01 c0                	add    %eax,%eax
f0100fb6:	01 c8                	add    %ecx,%eax
f0100fb8:	c1 e0 02             	shl    $0x2,%eax
f0100fbb:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0100fc0:	8b 00                	mov    (%eax),%eax
f0100fc2:	83 ec 04             	sub    $0x4,%esp
f0100fc5:	52                   	push   %edx
f0100fc6:	50                   	push   %eax
f0100fc7:	68 3a 33 13 f0       	push   $0xf013333a
f0100fcc:	e8 5c fc ff ff       	call   f0100c2d <cprintf>
f0100fd1:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fd4:	ff 45 f4             	incl   -0xc(%ebp)
f0100fd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fda:	a1 ac f8 18 f0       	mov    0xf018f8ac,%eax
f0100fdf:	39 c2                	cmp    %eax,%edx
f0100fe1:	72 b9                	jb     f0100f9c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100fe3:	83 ec 0c             	sub    $0xc,%esp
f0100fe6:	68 43 33 13 f0       	push   $0xf0133343
f0100feb:	e8 3d fc ff ff       	call   f0100c2d <cprintf>
f0100ff0:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100ffa:	eb 42                	jmp    f010103e <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0100ffc:	8b 0d c0 fc 18 f0    	mov    0xf018fcc0,%ecx
f0101002:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101005:	89 d0                	mov    %edx,%eax
f0101007:	01 c0                	add    %eax,%eax
f0101009:	01 d0                	add    %edx,%eax
f010100b:	c1 e0 02             	shl    $0x2,%eax
f010100e:	01 c8                	add    %ecx,%eax
f0101010:	8b 50 04             	mov    0x4(%eax),%edx
f0101013:	8b 1d c0 fc 18 f0    	mov    0xf018fcc0,%ebx
f0101019:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010101c:	89 c8                	mov    %ecx,%eax
f010101e:	01 c0                	add    %eax,%eax
f0101020:	01 c8                	add    %ecx,%eax
f0101022:	c1 e0 02             	shl    $0x2,%eax
f0101025:	01 d8                	add    %ebx,%eax
f0101027:	8b 00                	mov    (%eax),%eax
f0101029:	83 ec 04             	sub    $0x4,%esp
f010102c:	52                   	push   %edx
f010102d:	50                   	push   %eax
f010102e:	68 58 33 13 f0       	push   $0xf0133358
f0101033:	e8 f5 fb ff ff       	call   f0100c2d <cprintf>
f0101038:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010103b:	ff 45 f4             	incl   -0xc(%ebp)
f010103e:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f0101043:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101046:	7c b4                	jl     f0100ffc <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101048:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010104d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101050:	c9                   	leave  
f0101051:	c3                   	ret    

f0101052 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101052:	55                   	push   %ebp
f0101053:	89 e5                	mov    %esp,%ebp
f0101055:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101058:	83 ec 0c             	sub    $0xc,%esp
f010105b:	68 74 33 13 f0       	push   $0xf0133374
f0101060:	e8 c8 fb ff ff       	call   f0100c2d <cprintf>
f0101065:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101068:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f010106d:	83 ec 04             	sub    $0x4,%esp
f0101070:	50                   	push   %eax
f0101071:	68 0c 00 10 f0       	push   $0xf010000c
f0101076:	68 90 33 13 f0       	push   $0xf0133390
f010107b:	e8 ad fb ff ff       	call   f0100c2d <cprintf>
f0101080:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101083:	b8 c1 22 13 00       	mov    $0x1322c1,%eax
f0101088:	83 ec 04             	sub    $0x4,%esp
f010108b:	50                   	push   %eax
f010108c:	68 c1 22 13 f0       	push   $0xf01322c1
f0101091:	68 cc 33 13 f0       	push   $0xf01333cc
f0101096:	e8 92 fb ff ff       	call   f0100c2d <cprintf>
f010109b:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010109e:	b8 cc 74 65 00       	mov    $0x6574cc,%eax
f01010a3:	83 ec 04             	sub    $0x4,%esp
f01010a6:	50                   	push   %eax
f01010a7:	68 cc 74 65 f0       	push   $0xf06574cc
f01010ac:	68 08 34 13 f0       	push   $0xf0133408
f01010b1:	e8 77 fb ff ff       	call   f0100c2d <cprintf>
f01010b6:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010b9:	b8 1c 76 6e 00       	mov    $0x6e761c,%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	50                   	push   %eax
f01010c2:	68 1c 76 6e f0       	push   $0xf06e761c
f01010c7:	68 50 34 13 f0       	push   $0xf0133450
f01010cc:	e8 5c fb ff ff       	call   f0100c2d <cprintf>
f01010d1:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010d4:	b8 1c 76 6e f0       	mov    $0xf06e761c,%eax
f01010d9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010df:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010e4:	29 c2                	sub    %eax,%edx
f01010e6:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010e8:	85 c0                	test   %eax,%eax
f01010ea:	79 05                	jns    f01010f1 <command_kernel_info+0x9f>
f01010ec:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f1:	c1 f8 0a             	sar    $0xa,%eax
f01010f4:	83 ec 08             	sub    $0x8,%esp
f01010f7:	50                   	push   %eax
f01010f8:	68 8c 34 13 f0       	push   $0xf013348c
f01010fd:	e8 2b fb ff ff       	call   f0100c2d <cprintf>
f0101102:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010110a:	c9                   	leave  
f010110b:	c3                   	ret    

f010110c <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f010110c:	55                   	push   %ebp
f010110d:	89 e5                	mov    %esp,%ebp
f010110f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101112:	83 ec 04             	sub    $0x4,%esp
f0101115:	68 b8 34 13 f0       	push   $0xf01334b8
f010111a:	68 b0 00 00 00       	push   $0xb0
f010111f:	68 d9 34 13 f0       	push   $0xf01334d9
f0101124:	e8 7d f0 ff ff       	call   f01001a6 <_panic>

f0101129 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101129:	55                   	push   %ebp
f010112a:	89 e5                	mov    %esp,%ebp
f010112c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010112f:	83 ec 04             	sub    $0x4,%esp
f0101132:	68 b8 34 13 f0       	push   $0xf01334b8
f0101137:	68 ba 00 00 00       	push   $0xba
f010113c:	68 d9 34 13 f0       	push   $0xf01334d9
f0101141:	e8 60 f0 ff ff       	call   f01001a6 <_panic>

f0101146 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101146:	55                   	push   %ebp
f0101147:	89 e5                	mov    %esp,%ebp
f0101149:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010114c:	83 ec 04             	sub    $0x4,%esp
f010114f:	68 b8 34 13 f0       	push   $0xf01334b8
f0101154:	68 c3 00 00 00       	push   $0xc3
f0101159:	68 d9 34 13 f0       	push   $0xf01334d9
f010115e:	e8 43 f0 ff ff       	call   f01001a6 <_panic>

f0101163 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f0101163:	55                   	push   %ebp
f0101164:	89 e5                	mov    %esp,%ebp
f0101166:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	68 b8 34 13 f0       	push   $0xf01334b8
f0101171:	68 cf 00 00 00       	push   $0xcf
f0101176:	68 d9 34 13 f0       	push   $0xf01334d9
f010117b:	e8 26 f0 ff ff       	call   f01001a6 <_panic>

f0101180 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101180:	55                   	push   %ebp
f0101181:	89 e5                	mov    %esp,%ebp
f0101183:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	68 b8 34 13 f0       	push   $0xf01334b8
f010118e:	68 d8 00 00 00       	push   $0xd8
f0101193:	68 d9 34 13 f0       	push   $0xf01334d9
f0101198:	e8 09 f0 ff ff       	call   f01001a6 <_panic>

f010119d <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f010119d:	55                   	push   %ebp
f010119e:	89 e5                	mov    %esp,%ebp
f01011a0:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a3:	83 ec 04             	sub    $0x4,%esp
f01011a6:	68 b8 34 13 f0       	push   $0xf01334b8
f01011ab:	68 e1 00 00 00       	push   $0xe1
f01011b0:	68 d9 34 13 f0       	push   $0xf01334d9
f01011b5:	e8 ec ef ff ff       	call   f01001a6 <_panic>

f01011ba <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011ba:	55                   	push   %ebp
f01011bb:	89 e5                	mov    %esp,%ebp
f01011bd:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c0:	83 ec 04             	sub    $0x4,%esp
f01011c3:	68 b8 34 13 f0       	push   $0xf01334b8
f01011c8:	68 ee 00 00 00       	push   $0xee
f01011cd:	68 d9 34 13 f0       	push   $0xf01334d9
f01011d2:	e8 cf ef ff ff       	call   f01001a6 <_panic>

f01011d7 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011d7:	55                   	push   %ebp
f01011d8:	89 e5                	mov    %esp,%ebp
f01011da:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e0:	83 c0 04             	add    $0x4,%eax
f01011e3:	8b 00                	mov    (%eax),%eax
f01011e5:	83 ec 04             	sub    $0x4,%esp
f01011e8:	6a 10                	push   $0x10
f01011ea:	6a 00                	push   $0x0
f01011ec:	50                   	push   %eax
f01011ed:	e8 d3 f1 02 00       	call   f01303c5 <strtol>
f01011f2:	83 c4 10             	add    $0x10,%esp
f01011f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01011f8:	83 ec 0c             	sub    $0xc,%esp
f01011fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01011fe:	50                   	push   %eax
f01011ff:	e8 a6 55 00 00       	call   f01067aa <allocate_frame>
f0101204:	83 c4 10             	add    $0x10,%esp
f0101207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010120a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010120d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0101212:	6a 06                	push   $0x6
f0101214:	ff 75 f4             	pushl  -0xc(%ebp)
f0101217:	52                   	push   %edx
f0101218:	50                   	push   %eax
f0101219:	e8 24 59 00 00       	call   f0106b42 <map_frame>
f010121e:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101226:	c9                   	leave  
f0101227:	c3                   	ret    

f0101228 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101228:	55                   	push   %ebp
f0101229:	89 e5                	mov    %esp,%ebp
f010122b:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010122e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101231:	83 c0 04             	add    $0x4,%eax
f0101234:	8b 00                	mov    (%eax),%eax
f0101236:	83 ec 04             	sub    $0x4,%esp
f0101239:	6a 10                	push   $0x10
f010123b:	6a 00                	push   $0x0
f010123d:	50                   	push   %eax
f010123e:	e8 82 f1 02 00       	call   f01303c5 <strtol>
f0101243:	83 c4 10             	add    $0x10,%esp
f0101246:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101249:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010124e:	83 ec 08             	sub    $0x8,%esp
f0101251:	ff 75 f4             	pushl  -0xc(%ebp)
f0101254:	50                   	push   %eax
f0101255:	e8 17 5a 00 00       	call   f0106c71 <unmap_frame>
f010125a:	83 c4 10             	add    $0x10,%esp

	return 0;
f010125d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101262:	c9                   	leave  
f0101263:	c3                   	ret    

f0101264 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101264:	55                   	push   %ebp
f0101265:	89 e5                	mov    %esp,%ebp
f0101267:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126a:	83 ec 04             	sub    $0x4,%esp
f010126d:	68 b8 34 13 f0       	push   $0xf01334b8
f0101272:	68 18 01 00 00       	push   $0x118
f0101277:	68 d9 34 13 f0       	push   $0xf01334d9
f010127c:	e8 25 ef ff ff       	call   f01001a6 <_panic>

f0101281 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101281:	55                   	push   %ebp
f0101282:	89 e5                	mov    %esp,%ebp
f0101284:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101287:	83 ec 04             	sub    $0x4,%esp
f010128a:	68 b8 34 13 f0       	push   $0xf01334b8
f010128f:	68 23 01 00 00       	push   $0x123
f0101294:	68 d9 34 13 f0       	push   $0xf01334d9
f0101299:	e8 08 ef ff ff       	call   f01001a6 <_panic>

f010129e <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010129e:	55                   	push   %ebp
f010129f:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012a6:	5d                   	pop    %ebp
f01012a7:	c3                   	ret    

f01012a8 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012a8:	55                   	push   %ebp
f01012a9:	89 e5                	mov    %esp,%ebp
f01012ab:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012ae:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012b2:	75 37                	jne    f01012eb <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012b7:	83 c0 04             	add    $0x4,%eax
f01012ba:	8b 00                	mov    (%eax),%eax
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	6a 10                	push   $0x10
f01012c1:	6a 00                	push   $0x0
f01012c3:	50                   	push   %eax
f01012c4:	e8 fc f0 02 00       	call   f01303c5 <strtol>
f01012c9:	83 c4 10             	add    $0x10,%esp
f01012cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012d2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012d8:	83 c0 08             	add    $0x8,%eax
f01012db:	8b 00                	mov    (%eax),%eax
f01012dd:	8a 00                	mov    (%eax),%al
f01012df:	88 c2                	mov    %al,%dl
f01012e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012e4:	88 10                	mov    %dl,(%eax)
f01012e6:	e9 b9 00 00 00       	jmp    f01013a4 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012eb:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012ef:	0f 85 9f 00 00 00    	jne    f0101394 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f8:	83 c0 04             	add    $0x4,%eax
f01012fb:	8b 00                	mov    (%eax),%eax
f01012fd:	83 ec 04             	sub    $0x4,%esp
f0101300:	6a 0a                	push   $0xa
f0101302:	6a 00                	push   $0x0
f0101304:	50                   	push   %eax
f0101305:	e8 bb f0 02 00       	call   f01303c5 <strtol>
f010130a:	83 c4 10             	add    $0x10,%esp
f010130d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101310:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101317:	83 ec 04             	sub    $0x4,%esp
f010131a:	6a 00                	push   $0x0
f010131c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	ff 75 f4             	pushl  -0xc(%ebp)
f0101323:	e8 7f 7a 00 00       	call   f0108da7 <envid2env>
f0101328:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f010132b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132e:	83 c0 08             	add    $0x8,%eax
f0101331:	8b 00                	mov    (%eax),%eax
f0101333:	83 ec 04             	sub    $0x4,%esp
f0101336:	6a 10                	push   $0x10
f0101338:	6a 00                	push   $0x0
f010133a:	50                   	push   %eax
f010133b:	e8 85 f0 02 00       	call   f01303c5 <strtol>
f0101340:	83 c4 10             	add    $0x10,%esp
f0101343:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101346:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101349:	85 c0                	test   %eax,%eax
f010134b:	75 07                	jne    f0101354 <command_writeusermem+0xac>
f010134d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101352:	eb 55                	jmp    f01013a9 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101354:	0f 20 d8             	mov    %cr3,%eax
f0101357:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010135a:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010135d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101360:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101363:	8b 40 60             	mov    0x60(%eax),%eax
f0101366:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101369:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010136c:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010136f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101372:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101375:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101378:	83 c0 0c             	add    $0xc,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	8a 00                	mov    (%eax),%al
f010137f:	88 c2                	mov    %al,%dl
f0101381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101384:	88 10                	mov    %dl,(%eax)
f0101386:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101389:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010138c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010138f:	0f 22 d8             	mov    %eax,%cr3
f0101392:	eb 10                	jmp    f01013a4 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101394:	83 ec 0c             	sub    $0xc,%esp
f0101397:	68 f0 34 13 f0       	push   $0xf01334f0
f010139c:	e8 8c f8 ff ff       	call   f0100c2d <cprintf>
f01013a1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a9:	c9                   	leave  
f01013aa:	c3                   	ret    

f01013ab <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013ab:	55                   	push   %ebp
f01013ac:	89 e5                	mov    %esp,%ebp
f01013ae:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b4:	83 c0 04             	add    $0x4,%eax
f01013b7:	8b 00                	mov    (%eax),%eax
f01013b9:	83 ec 04             	sub    $0x4,%esp
f01013bc:	6a 10                	push   $0x10
f01013be:	6a 00                	push   $0x0
f01013c0:	50                   	push   %eax
f01013c1:	e8 ff ef 02 00       	call   f01303c5 <strtol>
f01013c6:	83 c4 10             	add    $0x10,%esp
f01013c9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	83 ec 04             	sub    $0x4,%esp
f01013dc:	6a 0a                	push   $0xa
f01013de:	6a 00                	push   $0x0
f01013e0:	50                   	push   %eax
f01013e1:	e8 df ef 02 00       	call   f01303c5 <strtol>
f01013e6:	83 c4 10             	add    $0x10,%esp
f01013e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 0c             	add    $0xc,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 0c             	sub    $0xc,%esp
f01013fe:	50                   	push   %eax
f01013ff:	e8 61 ec 02 00       	call   f0130065 <strlen>
f0101404:	83 c4 10             	add    $0x10,%esp
f0101407:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010140a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101411:	eb 30                	jmp    f0101443 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101413:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010141a:	eb 1c                	jmp    f0101438 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f010141c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010141f:	83 c0 0c             	add    $0xc,%eax
f0101422:	8b 10                	mov    (%eax),%edx
f0101424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101427:	01 d0                	add    %edx,%eax
f0101429:	8a 00                	mov    (%eax),%al
f010142b:	88 c2                	mov    %al,%dl
f010142d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101430:	88 10                	mov    %dl,(%eax)
			address++;
f0101432:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101435:	ff 45 ec             	incl   -0x14(%ebp)
f0101438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010143b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010143e:	7c dc                	jl     f010141c <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101440:	ff 45 f0             	incl   -0x10(%ebp)
f0101443:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101446:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101449:	7c c8                	jl     f0101413 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f010144b:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101450:	c9                   	leave  
f0101451:	c3                   	ret    

f0101452 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101452:	55                   	push   %ebp
f0101453:	89 e5                	mov    %esp,%ebp
f0101455:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101458:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010145c:	75 42                	jne    f01014a0 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010145e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101461:	83 c0 04             	add    $0x4,%eax
f0101464:	8b 00                	mov    (%eax),%eax
f0101466:	83 ec 04             	sub    $0x4,%esp
f0101469:	6a 10                	push   $0x10
f010146b:	6a 00                	push   $0x0
f010146d:	50                   	push   %eax
f010146e:	e8 52 ef 02 00       	call   f01303c5 <strtol>
f0101473:	83 c4 10             	add    $0x10,%esp
f0101476:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101479:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010147c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010147f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101482:	8a 00                	mov    (%eax),%al
f0101484:	0f b6 c0             	movzbl %al,%eax
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	ff 75 d8             	pushl  -0x28(%ebp)
f010148e:	68 1a 35 13 f0       	push   $0xf013351a
f0101493:	e8 95 f7 ff ff       	call   f0100c2d <cprintf>
f0101498:	83 c4 10             	add    $0x10,%esp
f010149b:	e9 c4 00 00 00       	jmp    f0101564 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014a4:	0f 85 aa 00 00 00    	jne    f0101554 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014ad:	83 c0 04             	add    $0x4,%eax
f01014b0:	8b 00                	mov    (%eax),%eax
f01014b2:	83 ec 04             	sub    $0x4,%esp
f01014b5:	6a 0a                	push   $0xa
f01014b7:	6a 00                	push   $0x0
f01014b9:	50                   	push   %eax
f01014ba:	e8 06 ef 02 00       	call   f01303c5 <strtol>
f01014bf:	83 c4 10             	add    $0x10,%esp
f01014c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014c5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014cc:	83 ec 04             	sub    $0x4,%esp
f01014cf:	6a 00                	push   $0x0
f01014d1:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014d4:	50                   	push   %eax
f01014d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01014d8:	e8 ca 78 00 00       	call   f0108da7 <envid2env>
f01014dd:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	83 c0 08             	add    $0x8,%eax
f01014e6:	8b 00                	mov    (%eax),%eax
f01014e8:	83 ec 04             	sub    $0x4,%esp
f01014eb:	6a 10                	push   $0x10
f01014ed:	6a 00                	push   $0x0
f01014ef:	50                   	push   %eax
f01014f0:	e8 d0 ee 02 00       	call   f01303c5 <strtol>
f01014f5:	83 c4 10             	add    $0x10,%esp
f01014f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01014fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01014fe:	85 c0                	test   %eax,%eax
f0101500:	75 07                	jne    f0101509 <command_readusermem+0xb7>
f0101502:	b8 00 00 00 00       	mov    $0x0,%eax
f0101507:	eb 60                	jmp    f0101569 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101509:	0f 20 d8             	mov    %cr3,%eax
f010150c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010150f:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101512:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101515:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101518:	8b 40 60             	mov    0x60(%eax),%eax
f010151b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010151e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101521:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101524:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101527:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010152a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010152d:	8a 00                	mov    (%eax),%al
f010152f:	0f b6 c0             	movzbl %al,%eax
f0101532:	83 ec 04             	sub    $0x4,%esp
f0101535:	50                   	push   %eax
f0101536:	ff 75 f0             	pushl  -0x10(%ebp)
f0101539:	68 1a 35 13 f0       	push   $0xf013351a
f010153e:	e8 ea f6 ff ff       	call   f0100c2d <cprintf>
f0101543:	83 c4 10             	add    $0x10,%esp
f0101546:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010154f:	0f 22 d8             	mov    %eax,%cr3
f0101552:	eb 10                	jmp    f0101564 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101554:	83 ec 0c             	sub    $0xc,%esp
f0101557:	68 34 35 13 f0       	push   $0xf0133534
f010155c:	e8 cc f6 ff ff       	call   f0100c2d <cprintf>
f0101561:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101564:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101569:	c9                   	leave  
f010156a:	c3                   	ret    

f010156b <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f010156b:	55                   	push   %ebp
f010156c:	89 e5                	mov    %esp,%ebp
f010156e:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101571:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101574:	83 c0 04             	add    $0x4,%eax
f0101577:	8b 00                	mov    (%eax),%eax
f0101579:	83 ec 04             	sub    $0x4,%esp
f010157c:	6a 10                	push   $0x10
f010157e:	6a 00                	push   $0x0
f0101580:	50                   	push   %eax
f0101581:	e8 3f ee 02 00       	call   f01303c5 <strtol>
f0101586:	83 c4 10             	add    $0x10,%esp
f0101589:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010158e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101591:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101594:	83 c0 08             	add    $0x8,%eax
f0101597:	8b 00                	mov    (%eax),%eax
f0101599:	83 ec 04             	sub    $0x4,%esp
f010159c:	6a 0a                	push   $0xa
f010159e:	6a 00                	push   $0x0
f01015a0:	50                   	push   %eax
f01015a1:	e8 1f ee 02 00       	call   f01303c5 <strtol>
f01015a6:	83 c4 10             	add    $0x10,%esp
f01015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015b3:	eb 22                	jmp    f01015d7 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015b8:	8d 50 01             	lea    0x1(%eax),%edx
f01015bb:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015be:	8a 00                	mov    (%eax),%al
f01015c0:	0f b6 c0             	movzbl %al,%eax
f01015c3:	83 ec 08             	sub    $0x8,%esp
f01015c6:	50                   	push   %eax
f01015c7:	68 5e 35 13 f0       	push   $0xf013355e
f01015cc:	e8 5c f6 ff ff       	call   f0100c2d <cprintf>
f01015d1:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015d4:	ff 45 f0             	incl   -0x10(%ebp)
f01015d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015dd:	7c d6                	jl     f01015b5 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015df:	83 ec 0c             	sub    $0xc,%esp
f01015e2:	68 61 35 13 f0       	push   $0xf0133561
f01015e7:	e8 41 f6 ff ff       	call   f0100c2d <cprintf>
f01015ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015f4:	c9                   	leave  
f01015f5:	c3                   	ret    

f01015f6 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015f6:	55                   	push   %ebp
f01015f7:	89 e5                	mov    %esp,%ebp
f01015f9:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01015fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ff:	83 c0 04             	add    $0x4,%eax
f0101602:	8b 00                	mov    (%eax),%eax
f0101604:	83 ec 04             	sub    $0x4,%esp
f0101607:	6a 0a                	push   $0xa
f0101609:	6a 00                	push   $0x0
f010160b:	50                   	push   %eax
f010160c:	e8 b4 ed 02 00       	call   f01303c5 <strtol>
f0101611:	83 c4 10             	add    $0x10,%esp
f0101614:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101617:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010161e:	83 ec 04             	sub    $0x4,%esp
f0101621:	6a 00                	push   $0x0
f0101623:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101626:	50                   	push   %eax
f0101627:	ff 75 ec             	pushl  -0x14(%ebp)
f010162a:	e8 78 77 00 00       	call   f0108da7 <envid2env>
f010162f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101632:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101635:	83 c0 08             	add    $0x8,%eax
f0101638:	8b 00                	mov    (%eax),%eax
f010163a:	83 ec 04             	sub    $0x4,%esp
f010163d:	6a 10                	push   $0x10
f010163f:	6a 00                	push   $0x0
f0101641:	50                   	push   %eax
f0101642:	e8 7e ed 02 00       	call   f01303c5 <strtol>
f0101647:	83 c4 10             	add    $0x10,%esp
f010164a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f010164d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101650:	83 c0 0c             	add    $0xc,%eax
f0101653:	8b 00                	mov    (%eax),%eax
f0101655:	83 ec 04             	sub    $0x4,%esp
f0101658:	6a 0a                	push   $0xa
f010165a:	6a 00                	push   $0x0
f010165c:	50                   	push   %eax
f010165d:	e8 63 ed 02 00       	call   f01303c5 <strtol>
f0101662:	83 c4 10             	add    $0x10,%esp
f0101665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101668:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010166b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010166e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101671:	85 c0                	test   %eax,%eax
f0101673:	75 07                	jne    f010167c <command_readuserblock+0x86>
f0101675:	b8 00 00 00 00       	mov    $0x0,%eax
f010167a:	eb 65                	jmp    f01016e1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010167c:	0f 20 d8             	mov    %cr3,%eax
f010167f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101682:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101685:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101688:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010168b:	8b 40 60             	mov    0x60(%eax),%eax
f010168e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101691:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101694:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101697:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010169e:	eb 28                	jmp    f01016c8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016a3:	8a 00                	mov    (%eax),%al
f01016a5:	0f b6 d0             	movzbl %al,%edx
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 c0             	movzbl %al,%eax
f01016b0:	52                   	push   %edx
f01016b1:	50                   	push   %eax
f01016b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01016b5:	68 63 35 13 f0       	push   $0xf0133563
f01016ba:	e8 6e f5 ff ff       	call   f0100c2d <cprintf>
f01016bf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016c2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016c5:	ff 45 f0             	incl   -0x10(%ebp)
f01016c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016cb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016ce:	7c d0                	jl     f01016a0 <command_readuserblock+0xaa>
f01016d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016d9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e1:	c9                   	leave  
f01016e2:	c3                   	ret    

f01016e3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016e3:	55                   	push   %ebp
f01016e4:	89 e5                	mov    %esp,%ebp
f01016e6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016ec:	83 c0 04             	add    $0x4,%eax
f01016ef:	8b 00                	mov    (%eax),%eax
f01016f1:	83 ec 04             	sub    $0x4,%esp
f01016f4:	6a 0a                	push   $0xa
f01016f6:	6a 00                	push   $0x0
f01016f8:	50                   	push   %eax
f01016f9:	e8 c7 ec 02 00       	call   f01303c5 <strtol>
f01016fe:	83 c4 10             	add    $0x10,%esp
f0101701:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101704:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f010170b:	83 ec 04             	sub    $0x4,%esp
f010170e:	6a 00                	push   $0x0
f0101710:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101713:	50                   	push   %eax
f0101714:	ff 75 f4             	pushl  -0xc(%ebp)
f0101717:	e8 8b 76 00 00       	call   f0108da7 <envid2env>
f010171c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010171f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101722:	85 c0                	test   %eax,%eax
f0101724:	75 0a                	jne    f0101730 <command_remove_table+0x4d>
f0101726:	b8 00 00 00 00       	mov    $0x0,%eax
f010172b:	e9 a1 00 00 00       	jmp    f01017d1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101730:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101733:	83 c0 08             	add    $0x8,%eax
f0101736:	8b 00                	mov    (%eax),%eax
f0101738:	83 ec 04             	sub    $0x4,%esp
f010173b:	6a 10                	push   $0x10
f010173d:	6a 00                	push   $0x0
f010173f:	50                   	push   %eax
f0101740:	e8 80 ec 02 00       	call   f01303c5 <strtol>
f0101745:	83 c4 10             	add    $0x10,%esp
f0101748:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f010174b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010174e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101751:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101754:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101757:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010175a:	c1 ea 16             	shr    $0x16,%edx
f010175d:	c1 e2 02             	shl    $0x2,%edx
f0101760:	01 d0                	add    %edx,%eax
f0101762:	8b 00                	mov    (%eax),%eax
f0101764:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101769:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010176c:	83 ec 0c             	sub    $0xc,%esp
f010176f:	ff 75 e8             	pushl  -0x18(%ebp)
f0101772:	e8 cf f7 ff ff       	call   f0100f46 <to_frame_info>
f0101777:	83 c4 10             	add    $0x10,%esp
f010177a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010177d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101780:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101786:	83 ec 0c             	sub    $0xc,%esp
f0101789:	ff 75 e4             	pushl  -0x1c(%ebp)
f010178c:	e8 2e 51 00 00       	call   f01068bf <free_frame>
f0101791:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101794:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101797:	c1 e8 16             	shr    $0x16,%eax
f010179a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010179d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017a3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017a6:	c1 e2 02             	shl    $0x2,%edx
f01017a9:	01 c2                	add    %eax,%edx
f01017ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ae:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017b4:	c1 e1 02             	shl    $0x2,%ecx
f01017b7:	01 c8                	add    %ecx,%eax
f01017b9:	8b 00                	mov    (%eax),%eax
f01017bb:	83 e0 fe             	and    $0xfffffffe,%eax
f01017be:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c0:	0f 20 d8             	mov    %cr3,%eax
f01017c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017c9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d1:	c9                   	leave  
f01017d2:	c3                   	ret    

f01017d3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017d3:	55                   	push   %ebp
f01017d4:	89 e5                	mov    %esp,%ebp
f01017d6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017d9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017dd:	7e 06                	jle    f01017e5 <command_allocuserpage+0x12>
f01017df:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017e3:	7e 1a                	jle    f01017ff <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017e5:	83 ec 0c             	sub    $0xc,%esp
f01017e8:	68 74 35 13 f0       	push   $0xf0133574
f01017ed:	e8 3b f4 ff ff       	call   f0100c2d <cprintf>
f01017f2:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01017fa:	e9 46 01 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	83 c0 04             	add    $0x4,%eax
f0101805:	8b 00                	mov    (%eax),%eax
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 0a                	push   $0xa
f010180c:	6a 00                	push   $0x0
f010180e:	50                   	push   %eax
f010180f:	e8 b1 eb 02 00       	call   f01303c5 <strtol>
f0101814:	83 c4 10             	add    $0x10,%esp
f0101817:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010181a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101821:	83 ec 04             	sub    $0x4,%esp
f0101824:	6a 00                	push   $0x0
f0101826:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101829:	50                   	push   %eax
f010182a:	ff 75 f0             	pushl  -0x10(%ebp)
f010182d:	e8 75 75 00 00       	call   f0108da7 <envid2env>
f0101832:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101838:	85 c0                	test   %eax,%eax
f010183a:	75 0a                	jne    f0101846 <command_allocuserpage+0x73>
f010183c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101841:	e9 ff 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101846:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101849:	83 c0 08             	add    $0x8,%eax
f010184c:	8b 00                	mov    (%eax),%eax
f010184e:	83 ec 04             	sub    $0x4,%esp
f0101851:	6a 10                	push   $0x10
f0101853:	6a 00                	push   $0x0
f0101855:	50                   	push   %eax
f0101856:	e8 6a eb 02 00       	call   f01303c5 <strtol>
f010185b:	83 c4 10             	add    $0x10,%esp
f010185e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101861:	83 ec 0c             	sub    $0xc,%esp
f0101864:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101867:	50                   	push   %eax
f0101868:	e8 3d 4f 00 00       	call   f01067aa <allocate_frame>
f010186d:	83 c4 10             	add    $0x10,%esp
f0101870:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101873:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101877:	75 1a                	jne    f0101893 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101879:	83 ec 0c             	sub    $0xc,%esp
f010187c:	68 9e 35 13 f0       	push   $0xf013359e
f0101881:	e8 a7 f3 ff ff       	call   f0100c2d <cprintf>
f0101886:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101889:	b8 00 00 00 00       	mov    $0x0,%eax
f010188e:	e9 b2 00 00 00       	jmp    f0101945 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101893:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101897:	75 1d                	jne    f01018b6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010189f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018a2:	6a 06                	push   $0x6
f01018a4:	ff 75 ec             	pushl  -0x14(%ebp)
f01018a7:	52                   	push   %edx
f01018a8:	50                   	push   %eax
f01018a9:	e8 94 52 00 00       	call   f0106b42 <map_frame>
f01018ae:	83 c4 10             	add    $0x10,%esp
f01018b1:	e9 8a 00 00 00       	jmp    f0101940 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018b6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018ba:	0f 85 80 00 00 00    	jne    f0101940 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c3:	83 c0 0c             	add    $0xc,%eax
f01018c6:	8b 00                	mov    (%eax),%eax
f01018c8:	8a 00                	mov    (%eax),%al
f01018ca:	3c 72                	cmp    $0x72,%al
f01018cc:	74 0e                	je     f01018dc <command_allocuserpage+0x109>
f01018ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d1:	83 c0 0c             	add    $0xc,%eax
f01018d4:	8b 00                	mov    (%eax),%eax
f01018d6:	8a 00                	mov    (%eax),%al
f01018d8:	3c 52                	cmp    $0x52,%al
f01018da:	75 09                	jne    f01018e5 <command_allocuserpage+0x112>
			rw = 0 ;
f01018dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018e3:	eb 3c                	jmp    f0101921 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018e8:	83 c0 0c             	add    $0xc,%eax
f01018eb:	8b 00                	mov    (%eax),%eax
f01018ed:	8a 00                	mov    (%eax),%al
f01018ef:	3c 77                	cmp    $0x77,%al
f01018f1:	74 0e                	je     f0101901 <command_allocuserpage+0x12e>
f01018f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f6:	83 c0 0c             	add    $0xc,%eax
f01018f9:	8b 00                	mov    (%eax),%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	3c 57                	cmp    $0x57,%al
f01018ff:	75 09                	jne    f010190a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101901:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101908:	eb 17                	jmp    f0101921 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f010190a:	83 ec 0c             	sub    $0xc,%esp
f010190d:	68 b8 35 13 f0       	push   $0xf01335b8
f0101912:	e8 16 f3 ff ff       	call   f0100c2d <cprintf>
f0101917:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f010191a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101924:	83 c8 04             	or     $0x4,%eax
f0101927:	89 c1                	mov    %eax,%ecx
f0101929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010192f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101932:	51                   	push   %ecx
f0101933:	ff 75 ec             	pushl  -0x14(%ebp)
f0101936:	52                   	push   %edx
f0101937:	50                   	push   %eax
f0101938:	e8 05 52 00 00       	call   f0106b42 <map_frame>
f010193d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101940:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101945:	c9                   	leave  
f0101946:	c3                   	ret    

f0101947 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101947:	55                   	push   %ebp
f0101948:	89 e5                	mov    %esp,%ebp
f010194a:	56                   	push   %esi
f010194b:	53                   	push   %ebx
f010194c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f010194f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101952:	83 ec 0c             	sub    $0xc,%esp
f0101955:	50                   	push   %eax
f0101956:	e8 57 54 00 00       	call   f0106db2 <calculate_available_frames>
f010195b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010195e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101961:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101964:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101967:	8b 75 ec             	mov    -0x14(%ebp),%esi
f010196a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010196d:	01 de                	add    %ebx,%esi
f010196f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101972:	01 f3                	add    %esi,%ebx
f0101974:	83 ec 0c             	sub    $0xc,%esp
f0101977:	51                   	push   %ecx
f0101978:	52                   	push   %edx
f0101979:	50                   	push   %eax
f010197a:	53                   	push   %ebx
f010197b:	68 fc 35 13 f0       	push   $0xf01335fc
f0101980:	e8 a8 f2 ff ff       	call   f0100c2d <cprintf>
f0101985:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101988:	a1 d0 74 6e f0       	mov    0xf06e74d0,%eax
f010198d:	83 ec 08             	sub    $0x8,%esp
f0101990:	50                   	push   %eax
f0101991:	68 54 36 13 f0       	push   $0xf0133654
f0101996:	e8 92 f2 ff ff       	call   f0100c2d <cprintf>
f010199b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010199e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019a6:	5b                   	pop    %ebx
f01019a7:	5e                   	pop    %esi
f01019a8:	5d                   	pop    %ebp
f01019a9:	c3                   	ret    

f01019aa <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019aa:	55                   	push   %ebp
f01019ab:	89 e5                	mov    %esp,%ebp
f01019ad:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01019c8:	83 f8 02             	cmp    $0x2,%eax
f01019cb:	74 39                	je     f0101a06 <CreateEnv+0x5c>
f01019cd:	83 f8 03             	cmp    $0x3,%eax
f01019d0:	75 1d                	jne    f01019ef <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d5:	83 c0 08             	add    $0x8,%eax
f01019d8:	8b 00                	mov    (%eax),%eax
f01019da:	83 ec 04             	sub    $0x4,%esp
f01019dd:	6a 0a                	push   $0xa
f01019df:	6a 00                	push   $0x0
f01019e1:	50                   	push   %eax
f01019e2:	e8 de e9 02 00       	call   f01303c5 <strtol>
f01019e7:	83 c4 10             	add    $0x10,%esp
f01019ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019ed:	eb 17                	jmp    f0101a06 <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	68 90 36 13 f0       	push   $0xf0133690
f01019f7:	e8 31 f2 ff ff       	call   f0100c2d <cprintf>
f01019fc:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01019ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a04:	eb 58                	jmp    f0101a5e <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a06:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a07:	83 ec 0c             	sub    $0xc,%esp
f0101a0a:	6a 02                	push   $0x2
f0101a0c:	e8 36 b5 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0101a11:	83 c4 10             	add    $0x10,%esp
f0101a14:	85 c0                	test   %eax,%eax
f0101a16:	74 07                	je     f0101a1f <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a18:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a1f:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a23:	76 19                	jbe    f0101a3e <CreateEnv+0x94>
f0101a25:	68 00 37 13 f0       	push   $0xf0133700
f0101a2a:	68 45 37 13 f0       	push   $0xf0133745
f0101a2f:	68 71 02 00 00       	push   $0x271
f0101a34:	68 d9 34 13 f0       	push   $0xf01334d9
f0101a39:	e8 68 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a41:	83 c0 04             	add    $0x4,%eax
f0101a44:	8b 00                	mov    (%eax),%eax
f0101a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a4f:	50                   	push   %eax
f0101a50:	e8 f7 65 00 00       	call   f010804c <env_create>
f0101a55:	83 c4 10             	add    $0x10,%esp
f0101a58:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a5e:	c9                   	leave  
f0101a5f:	c3                   	ret    

f0101a60 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a60:	55                   	push   %ebp
f0101a61:	89 e5                	mov    %esp,%ebp
f0101a63:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a66:	83 ec 08             	sub    $0x8,%esp
f0101a69:	ff 75 0c             	pushl  0xc(%ebp)
f0101a6c:	ff 75 08             	pushl  0x8(%ebp)
f0101a6f:	e8 36 ff ff ff       	call   f01019aa <CreateEnv>
f0101a74:	83 c4 10             	add    $0x10,%esp
f0101a77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a7e:	75 07                	jne    f0101a87 <command_run_program+0x27>
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	eb 46                	jmp    f0101acd <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a8d:	83 ec 08             	sub    $0x8,%esp
f0101a90:	50                   	push   %eax
f0101a91:	68 5a 37 13 f0       	push   $0xf013375a
f0101a96:	e8 92 f1 ff ff       	call   f0100c2d <cprintf>
f0101a9b:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101a9e:	c7 05 d0 74 6e f0 00 	movl   $0x0,0xf06e74d0
f0101aa5:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101aa8:	83 ec 0c             	sub    $0xc,%esp
f0101aab:	ff 75 f4             	pushl  -0xc(%ebp)
f0101aae:	e8 c4 35 00 00       	call   f0105077 <sched_new_env>
f0101ab3:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ab9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101abc:	83 ec 0c             	sub    $0xc,%esp
f0101abf:	50                   	push   %eax
f0101ac0:	e8 cf 35 00 00       	call   f0105094 <sched_run_env>
f0101ac5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101acd:	c9                   	leave  
f0101ace:	c3                   	ret    

f0101acf <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101acf:	55                   	push   %ebp
f0101ad0:	89 e5                	mov    %esp,%ebp
f0101ad2:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ad8:	83 c0 04             	add    $0x4,%eax
f0101adb:	8b 00                	mov    (%eax),%eax
f0101add:	83 ec 04             	sub    $0x4,%esp
f0101ae0:	6a 0a                	push   $0xa
f0101ae2:	6a 00                	push   $0x0
f0101ae4:	50                   	push   %eax
f0101ae5:	e8 db e8 02 00       	call   f01303c5 <strtol>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101af3:	83 ec 0c             	sub    $0xc,%esp
f0101af6:	50                   	push   %eax
f0101af7:	e8 c4 39 00 00       	call   f01054c0 <sched_kill_env>
f0101afc:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b04:	c9                   	leave  
f0101b05:	c3                   	ret    

f0101b06 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b06:	55                   	push   %ebp
f0101b07:	89 e5                	mov    %esp,%ebp
f0101b09:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b0c:	83 ec 08             	sub    $0x8,%esp
f0101b0f:	ff 75 0c             	pushl  0xc(%ebp)
f0101b12:	ff 75 08             	pushl  0x8(%ebp)
f0101b15:	e8 90 fe ff ff       	call   f01019aa <CreateEnv>
f0101b1a:	83 c4 10             	add    $0x10,%esp
f0101b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b24:	75 07                	jne    f0101b2d <commnad_load_env+0x27>
		return 0 ;
f0101b26:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2b:	eb 2a                	jmp    f0101b57 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b2d:	83 ec 0c             	sub    $0xc,%esp
f0101b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b33:	e8 3f 35 00 00       	call   f0105077 <sched_new_env>
f0101b38:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b3e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b41:	83 ec 08             	sub    $0x8,%esp
f0101b44:	50                   	push   %eax
f0101b45:	68 5a 37 13 f0       	push   $0xf013375a
f0101b4a:	e8 de f0 ff ff       	call   f0100c2d <cprintf>
f0101b4f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b52:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b57:	c9                   	leave  
f0101b58:	c3                   	ret    

f0101b59 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b59:	55                   	push   %ebp
f0101b5a:	89 e5                	mov    %esp,%ebp
f0101b5c:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b5f:	c7 05 d0 74 6e f0 00 	movl   $0x0,0xf06e74d0
f0101b66:	00 00 00 
	sched_run_all();
f0101b69:	e8 4a 31 00 00       	call   f0104cb8 <sched_run_all>

	return 0 ;
f0101b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b73:	c9                   	leave  
f0101b74:	c3                   	ret    

f0101b75 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b75:	55                   	push   %ebp
f0101b76:	89 e5                	mov    %esp,%ebp
f0101b78:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b7b:	e8 2d 2f 00 00       	call   f0104aad <sched_print_all>

	return 0 ;
f0101b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b85:	c9                   	leave  
f0101b86:	c3                   	ret    

f0101b87 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b87:	55                   	push   %ebp
f0101b88:	89 e5                	mov    %esp,%ebp
f0101b8a:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b8d:	e8 99 31 00 00       	call   f0104d2b <sched_kill_all>

	return 0 ;
f0101b92:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b97:	c9                   	leave  
f0101b98:	c3                   	ret    

f0101b99 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101b99:	55                   	push   %ebp
f0101b9a:	89 e5                	mov    %esp,%ebp
f0101b9c:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101b9f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101ba3:	7f 1a                	jg     f0101bbf <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ba5:	83 ec 0c             	sub    $0xc,%esp
f0101ba8:	68 70 37 13 f0       	push   $0xf0133770
f0101bad:	e8 7b f0 ff ff       	call   f0100c2d <cprintf>
f0101bb2:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bba:	e9 83 00 00 00       	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc2:	83 c0 04             	add    $0x4,%eax
f0101bc5:	8b 00                	mov    (%eax),%eax
f0101bc7:	83 ec 04             	sub    $0x4,%esp
f0101bca:	6a 0a                	push   $0xa
f0101bcc:	6a 00                	push   $0x0
f0101bce:	50                   	push   %eax
f0101bcf:	e8 f1 e7 02 00       	call   f01303c5 <strtol>
f0101bd4:	83 c4 10             	add    $0x10,%esp
f0101bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101bda:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101bde:	75 20                	jne    f0101c00 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be0:	83 ec 0c             	sub    $0xc,%esp
f0101be3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101be6:	e8 d1 b2 00 00       	call   f010cebc <setPageReplacmentAlgorithmLRU>
f0101beb:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bee:	83 ec 0c             	sub    $0xc,%esp
f0101bf1:	68 d0 37 13 f0       	push   $0xf01337d0
f0101bf6:	e8 32 f0 ff ff       	call   f0100c2d <cprintf>
f0101bfb:	83 c4 10             	add    $0x10,%esp
f0101bfe:	eb 3d                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c00:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c04:	75 20                	jne    f0101c26 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c06:	83 ec 0c             	sub    $0xc,%esp
f0101c09:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c0c:	e8 ab b2 00 00       	call   f010cebc <setPageReplacmentAlgorithmLRU>
f0101c11:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c14:	83 ec 0c             	sub    $0xc,%esp
f0101c17:	68 14 38 13 f0       	push   $0xf0133814
f0101c1c:	e8 0c f0 ff ff       	call   f0100c2d <cprintf>
f0101c21:	83 c4 10             	add    $0x10,%esp
f0101c24:	eb 17                	jmp    f0101c3d <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c26:	83 ec 0c             	sub    $0xc,%esp
f0101c29:	68 54 38 13 f0       	push   $0xf0133854
f0101c2e:	e8 fa ef ff ff       	call   f0100c2d <cprintf>
f0101c33:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3b:	eb 05                	jmp    f0101c42 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c42:	c9                   	leave  
f0101c43:	c3                   	ret    

f0101c44 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c44:	55                   	push   %ebp
f0101c45:	89 e5                	mov    %esp,%ebp
f0101c47:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c4d:	83 c0 04             	add    $0x4,%eax
f0101c50:	8b 00                	mov    (%eax),%eax
f0101c52:	83 ec 04             	sub    $0x4,%esp
f0101c55:	6a 0a                	push   $0xa
f0101c57:	6a 00                	push   $0x0
f0101c59:	50                   	push   %eax
f0101c5a:	e8 66 e7 02 00       	call   f01303c5 <strtol>
f0101c5f:	83 c4 10             	add    $0x10,%esp
f0101c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c65:	83 ec 0c             	sub    $0xc,%esp
f0101c68:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c6b:	e8 bf b2 00 00       	call   f010cf2f <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c70:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c73:	83 ec 0c             	sub    $0xc,%esp
f0101c76:	68 a8 38 13 f0       	push   $0xf01338a8
f0101c7b:	e8 ad ef ff ff       	call   f0100c2d <cprintf>
f0101c80:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c83:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c88:	c9                   	leave  
f0101c89:	c3                   	ret    

f0101c8a <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c8a:	55                   	push   %ebp
f0101c8b:	89 e5                	mov    %esp,%ebp
f0101c8d:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c90:	e8 5a b2 00 00       	call   f010ceef <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c95:	83 ec 0c             	sub    $0xc,%esp
f0101c98:	68 dc 38 13 f0       	push   $0xf01338dc
f0101c9d:	e8 8b ef ff ff       	call   f0100c2d <cprintf>
f0101ca2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101caa:	c9                   	leave  
f0101cab:	c3                   	ret    

f0101cac <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cac:	55                   	push   %ebp
f0101cad:	89 e5                	mov    %esp,%ebp
f0101caf:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cb2:	e8 48 b2 00 00       	call   f010ceff <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cb7:	83 ec 0c             	sub    $0xc,%esp
f0101cba:	68 08 39 13 f0       	push   $0xf0133908
f0101cbf:	e8 69 ef ff ff       	call   f0100c2d <cprintf>
f0101cc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ccc:	c9                   	leave  
f0101ccd:	c3                   	ret    

f0101cce <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cce:	55                   	push   %ebp
f0101ccf:	89 e5                	mov    %esp,%ebp
f0101cd1:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cd4:	e8 36 b2 00 00       	call   f010cf0f <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101cd9:	83 ec 0c             	sub    $0xc,%esp
f0101cdc:	68 30 39 13 f0       	push   $0xf0133930
f0101ce1:	e8 47 ef ff ff       	call   f0100c2d <cprintf>
f0101ce6:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ce9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cee:	c9                   	leave  
f0101cef:	c3                   	ret    

f0101cf0 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf0:	55                   	push   %ebp
f0101cf1:	89 e5                	mov    %esp,%ebp
f0101cf3:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf9:	83 c0 04             	add    $0x4,%eax
f0101cfc:	8b 00                	mov    (%eax),%eax
f0101cfe:	83 ec 04             	sub    $0x4,%esp
f0101d01:	6a 0a                	push   $0xa
f0101d03:	6a 00                	push   $0x0
f0101d05:	50                   	push   %eax
f0101d06:	e8 ba e6 02 00       	call   f01303c5 <strtol>
f0101d0b:	83 c4 10             	add    $0x10,%esp
f0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d15:	83 ec 0c             	sub    $0xc,%esp
f0101d18:	50                   	push   %eax
f0101d19:	e8 b4 29 00 00       	call   f01046d2 <sched_init_RR>
f0101d1e:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d21:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0101d26:	0f b6 c0             	movzbl %al,%eax
f0101d29:	83 ec 08             	sub    $0x8,%esp
f0101d2c:	50                   	push   %eax
f0101d2d:	68 64 39 13 f0       	push   $0xf0133964
f0101d32:	e8 f6 ee ff ff       	call   f0100c2d <cprintf>
f0101d37:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d3f:	c9                   	leave  
f0101d40:	c3                   	ret    

f0101d41 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d41:	55                   	push   %ebp
f0101d42:	89 e5                	mov    %esp,%ebp
f0101d44:	53                   	push   %ebx
f0101d45:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4b:	83 c0 04             	add    $0x4,%eax
f0101d4e:	8b 00                	mov    (%eax),%eax
f0101d50:	83 ec 04             	sub    $0x4,%esp
f0101d53:	6a 0a                	push   $0xa
f0101d55:	6a 00                	push   $0x0
f0101d57:	50                   	push   %eax
f0101d58:	e8 68 e6 02 00       	call   f01303c5 <strtol>
f0101d5d:	83 c4 10             	add    $0x10,%esp
f0101d60:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d63:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d6a:	eb 2e                	jmp    f0101d9a <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d6f:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d7f:	01 d0                	add    %edx,%eax
f0101d81:	8b 00                	mov    (%eax),%eax
f0101d83:	83 ec 04             	sub    $0x4,%esp
f0101d86:	6a 0a                	push   $0xa
f0101d88:	6a 00                	push   $0x0
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 35 e6 02 00       	call   f01303c5 <strtol>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d97:	ff 45 f4             	incl   -0xc(%ebp)
f0101d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da0:	7c ca                	jl     f0101d6c <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101da2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101da6:	83 ec 08             	sub    $0x8,%esp
f0101da9:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101dac:	52                   	push   %edx
f0101dad:	50                   	push   %eax
f0101dae:	e8 75 29 00 00       	call   f0104728 <sched_init_MLFQ>
f0101db3:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101db6:	83 ec 0c             	sub    $0xc,%esp
f0101db9:	68 9c 39 13 f0       	push   $0xf013399c
f0101dbe:	e8 6a ee ff ff       	call   f0100c2d <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dcd:	eb 21                	jmp    f0101df0 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd2:	05 88 74 6e f0       	add    $0xf06e7488,%eax
f0101dd7:	8a 00                	mov    (%eax),%al
f0101dd9:	0f b6 c0             	movzbl %al,%eax
f0101ddc:	83 ec 08             	sub    $0x8,%esp
f0101ddf:	50                   	push   %eax
f0101de0:	68 c9 39 13 f0       	push   $0xf01339c9
f0101de5:	e8 43 ee ff ff       	call   f0100c2d <cprintf>
f0101dea:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ded:	ff 45 f0             	incl   -0x10(%ebp)
f0101df0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0101df5:	0f b6 c0             	movzbl %al,%eax
f0101df8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101dfb:	7f d2                	jg     f0101dcf <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101dfd:	83 ec 0c             	sub    $0xc,%esp
f0101e00:	68 61 35 13 f0       	push   $0xf0133561
f0101e05:	e8 23 ee ff ff       	call   f0100c2d <cprintf>
f0101e0a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e15:	c9                   	leave  
f0101e16:	c3                   	ret    

f0101e17 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e17:	55                   	push   %ebp
f0101e18:	89 e5                	mov    %esp,%ebp
f0101e1a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e1d:	e8 39 25 00 00       	call   f010435b <isSchedMethodMLFQ>
f0101e22:	85 c0                	test   %eax,%eax
f0101e24:	74 59                	je     f0101e7f <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e26:	83 ec 0c             	sub    $0xc,%esp
f0101e29:	68 d0 39 13 f0       	push   $0xf01339d0
f0101e2e:	e8 fa ed ff ff       	call   f0100c2d <cprintf>
f0101e33:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e3d:	eb 21                	jmp    f0101e60 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e42:	05 88 74 6e f0       	add    $0xf06e7488,%eax
f0101e47:	8a 00                	mov    (%eax),%al
f0101e49:	0f b6 c0             	movzbl %al,%eax
f0101e4c:	83 ec 08             	sub    $0x8,%esp
f0101e4f:	50                   	push   %eax
f0101e50:	68 c9 39 13 f0       	push   $0xf01339c9
f0101e55:	e8 d3 ed ff ff       	call   f0100c2d <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e5d:	ff 45 f4             	incl   -0xc(%ebp)
f0101e60:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0101e65:	0f b6 c0             	movzbl %al,%eax
f0101e68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e6b:	7f d2                	jg     f0101e3f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e6d:	83 ec 0c             	sub    $0xc,%esp
f0101e70:	68 61 35 13 f0       	push   $0xf0133561
f0101e75:	e8 b3 ed ff ff       	call   f0100c2d <cprintf>
f0101e7a:	83 c4 10             	add    $0x10,%esp
f0101e7d:	eb 34                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e7f:	e8 bd 24 00 00       	call   f0104341 <isSchedMethodRR>
f0101e84:	85 c0                	test   %eax,%eax
f0101e86:	74 1b                	je     f0101ea3 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e88:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0101e8d:	0f b6 c0             	movzbl %al,%eax
f0101e90:	83 ec 08             	sub    $0x8,%esp
f0101e93:	50                   	push   %eax
f0101e94:	68 04 3a 13 f0       	push   $0xf0133a04
f0101e99:	e8 8f ed ff ff       	call   f0100c2d <cprintf>
f0101e9e:	83 c4 10             	add    $0x10,%esp
f0101ea1:	eb 10                	jmp    f0101eb3 <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101ea3:	83 ec 0c             	sub    $0xc,%esp
f0101ea6:	68 40 3a 13 f0       	push   $0xf0133a40
f0101eab:	e8 7d ed ff ff       	call   f0100c2d <cprintf>
f0101eb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101eb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb8:	c9                   	leave  
f0101eb9:	c3                   	ret    

f0101eba <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101eba:	55                   	push   %ebp
f0101ebb:	89 e5                	mov    %esp,%ebp
f0101ebd:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec3:	83 c0 04             	add    $0x4,%eax
f0101ec6:	8b 00                	mov    (%eax),%eax
f0101ec8:	83 ec 04             	sub    $0x4,%esp
f0101ecb:	6a 0a                	push   $0xa
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	50                   	push   %eax
f0101ed0:	e8 f0 e4 02 00       	call   f01303c5 <strtol>
f0101ed5:	83 c4 10             	add    $0x10,%esp
f0101ed8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ede:	0f b6 c0             	movzbl %al,%eax
f0101ee1:	83 ec 0c             	sub    $0xc,%esp
f0101ee4:	50                   	push   %eax
f0101ee5:	e8 18 d4 02 00       	call   f012f302 <chksch>
f0101eea:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101eed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef1:	75 12                	jne    f0101f05 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101ef3:	83 ec 0c             	sub    $0xc,%esp
f0101ef6:	68 68 3a 13 f0       	push   $0xf0133a68
f0101efb:	e8 2d ed ff ff       	call   f0100c2d <cprintf>
f0101f00:	83 c4 10             	add    $0x10,%esp
f0101f03:	eb 16                	jmp    f0101f1b <command_sch_test+0x61>
	else if (status == 1)
f0101f05:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f09:	75 10                	jne    f0101f1b <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	68 90 3a 13 f0       	push   $0xf0133a90
f0101f13:	e8 15 ed ff ff       	call   f0100c2d <cprintf>
f0101f18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f20:	c9                   	leave  
f0101f21:	c3                   	ret    

f0101f22 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f22:	55                   	push   %ebp
f0101f23:	89 e5                	mov    %esp,%ebp
f0101f25:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f28:	e8 30 b0 00 00       	call   f010cf5d <isPageReplacmentAlgorithmCLOCK>
f0101f2d:	85 c0                	test   %eax,%eax
f0101f2f:	74 15                	je     f0101f46 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f31:	83 ec 0c             	sub    $0xc,%esp
f0101f34:	68 b4 3a 13 f0       	push   $0xf0133ab4
f0101f39:	e8 ef ec ff ff       	call   f0100c2d <cprintf>
f0101f3e:	83 c4 10             	add    $0x10,%esp
f0101f41:	e9 8c 00 00 00       	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f46:	83 ec 0c             	sub    $0xc,%esp
f0101f49:	6a 01                	push   $0x1
f0101f4b:	e8 f7 af 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0101f50:	83 c4 10             	add    $0x10,%esp
f0101f53:	85 c0                	test   %eax,%eax
f0101f55:	74 12                	je     f0101f69 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f57:	83 ec 0c             	sub    $0xc,%esp
f0101f5a:	68 dc 3a 13 f0       	push   $0xf0133adc
f0101f5f:	e8 c9 ec ff ff       	call   f0100c2d <cprintf>
f0101f64:	83 c4 10             	add    $0x10,%esp
f0101f67:	eb 69                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f69:	83 ec 0c             	sub    $0xc,%esp
f0101f6c:	6a 02                	push   $0x2
f0101f6e:	e8 d4 af 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	85 c0                	test   %eax,%eax
f0101f78:	74 12                	je     f0101f8c <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f7a:	83 ec 0c             	sub    $0xc,%esp
f0101f7d:	68 1c 3b 13 f0       	push   $0xf0133b1c
f0101f82:	e8 a6 ec ff ff       	call   f0100c2d <cprintf>
f0101f87:	83 c4 10             	add    $0x10,%esp
f0101f8a:	eb 46                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f8c:	e8 e7 af 00 00       	call   f010cf78 <isPageReplacmentAlgorithmFIFO>
f0101f91:	85 c0                	test   %eax,%eax
f0101f93:	74 12                	je     f0101fa7 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f95:	83 ec 0c             	sub    $0xc,%esp
f0101f98:	68 58 3b 13 f0       	push   $0xf0133b58
f0101f9d:	e8 8b ec ff ff       	call   f0100c2d <cprintf>
f0101fa2:	83 c4 10             	add    $0x10,%esp
f0101fa5:	eb 2b                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101fa7:	e8 e7 af 00 00       	call   f010cf93 <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fac:	85 c0                	test   %eax,%eax
f0101fae:	74 12                	je     f0101fc2 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb0:	83 ec 0c             	sub    $0xc,%esp
f0101fb3:	68 7c 3b 13 f0       	push   $0xf0133b7c
f0101fb8:	e8 70 ec ff ff       	call   f0100c2d <cprintf>
f0101fbd:	83 c4 10             	add    $0x10,%esp
f0101fc0:	eb 10                	jmp    f0101fd2 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fc2:	83 ec 0c             	sub    $0xc,%esp
f0101fc5:	68 ac 3b 13 f0       	push   $0xf0133bac
f0101fca:	e8 5e ec ff ff       	call   f0100c2d <cprintf>
f0101fcf:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fd7:	c9                   	leave  
f0101fd8:	c3                   	ret    

f0101fd9 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fd9:	55                   	push   %ebp
f0101fda:	89 e5                	mov    %esp,%ebp
f0101fdc:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fdf:	e8 ce ee ff ff       	call   f0100eb2 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fe4:	83 ec 0c             	sub    $0xc,%esp
f0101fe7:	68 d8 3b 13 f0       	push   $0xf0133bd8
f0101fec:	e8 3c ec ff ff       	call   f0100c2d <cprintf>
f0101ff1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ff4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ff9:	c9                   	leave  
f0101ffa:	c3                   	ret    

f0101ffb <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0101ffb:	55                   	push   %ebp
f0101ffc:	89 e5                	mov    %esp,%ebp
f0101ffe:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102001:	e8 bc ee ff ff       	call   f0100ec2 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102006:	83 ec 0c             	sub    $0xc,%esp
f0102009:	68 08 3c 13 f0       	push   $0xf0133c08
f010200e:	e8 1a ec ff ff       	call   f0100c2d <cprintf>
f0102013:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102016:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0102023:	e8 aa ee ff ff       	call   f0100ed2 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102028:	83 ec 0c             	sub    $0xc,%esp
f010202b:	68 38 3c 13 f0       	push   $0xf0133c38
f0102030:	e8 f8 eb ff ff       	call   f0100c2d <cprintf>
f0102035:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102038:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010203d:	c9                   	leave  
f010203e:	c3                   	ret    

f010203f <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010203f:	55                   	push   %ebp
f0102040:	89 e5                	mov    %esp,%ebp
f0102042:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102045:	e8 98 ee ff ff       	call   f0100ee2 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	68 68 3c 13 f0       	push   $0xf0133c68
f0102052:	e8 d6 eb ff ff       	call   f0100c2d <cprintf>
f0102057:	83 c4 10             	add    $0x10,%esp
	return 0;
f010205a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010205f:	c9                   	leave  
f0102060:	c3                   	ret    

f0102061 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102061:	55                   	push   %ebp
f0102062:	89 e5                	mov    %esp,%ebp
f0102064:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102067:	e8 86 ee ff ff       	call   f0100ef2 <isUHeapPlacementStrategyFIRSTFIT>
f010206c:	84 c0                	test   %al,%al
f010206e:	74 12                	je     f0102082 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102070:	83 ec 0c             	sub    $0xc,%esp
f0102073:	68 98 3c 13 f0       	push   $0xf0133c98
f0102078:	e8 b0 eb ff ff       	call   f0100c2d <cprintf>
f010207d:	83 c4 10             	add    $0x10,%esp
f0102080:	eb 61                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102082:	e8 80 ee ff ff       	call   f0100f07 <isUHeapPlacementStrategyBESTFIT>
f0102087:	84 c0                	test   %al,%al
f0102089:	74 12                	je     f010209d <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010208b:	83 ec 0c             	sub    $0xc,%esp
f010208e:	68 c4 3c 13 f0       	push   $0xf0133cc4
f0102093:	e8 95 eb ff ff       	call   f0100c2d <cprintf>
f0102098:	83 c4 10             	add    $0x10,%esp
f010209b:	eb 46                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010209d:	e8 7a ee ff ff       	call   f0100f1c <isUHeapPlacementStrategyNEXTFIT>
f01020a2:	84 c0                	test   %al,%al
f01020a4:	74 12                	je     f01020b8 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020a6:	83 ec 0c             	sub    $0xc,%esp
f01020a9:	68 f0 3c 13 f0       	push   $0xf0133cf0
f01020ae:	e8 7a eb ff ff       	call   f0100c2d <cprintf>
f01020b3:	83 c4 10             	add    $0x10,%esp
f01020b6:	eb 2b                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020b8:	e8 74 ee ff ff       	call   f0100f31 <isUHeapPlacementStrategyWORSTFIT>
f01020bd:	84 c0                	test   %al,%al
f01020bf:	74 12                	je     f01020d3 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c1:	83 ec 0c             	sub    $0xc,%esp
f01020c4:	68 1c 3d 13 f0       	push   $0xf0133d1c
f01020c9:	e8 5f eb ff ff       	call   f0100c2d <cprintf>
f01020ce:	83 c4 10             	add    $0x10,%esp
f01020d1:	eb 10                	jmp    f01020e3 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 48 3d 13 f0       	push   $0xf0133d48
f01020db:	e8 4d eb ff ff       	call   f0100c2d <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020e8:	c9                   	leave  
f01020e9:	c3                   	ret    

f01020ea <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020ea:	55                   	push   %ebp
f01020eb:	89 e5                	mov    %esp,%ebp
f01020ed:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f0:	e8 05 ed ff ff       	call   f0100dfa <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020f5:	83 ec 0c             	sub    $0xc,%esp
f01020f8:	68 74 3d 13 f0       	push   $0xf0133d74
f01020fd:	e8 2b eb ff ff       	call   f0100c2d <cprintf>
f0102102:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102105:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010210a:	c9                   	leave  
f010210b:	c3                   	ret    

f010210c <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010210c:	55                   	push   %ebp
f010210d:	89 e5                	mov    %esp,%ebp
f010210f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102112:	e8 f3 ec ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102117:	83 ec 0c             	sub    $0xc,%esp
f010211a:	68 74 3d 13 f0       	push   $0xf0133d74
f010211f:	e8 09 eb ff ff       	call   f0100c2d <cprintf>
f0102124:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102127:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212c:	c9                   	leave  
f010212d:	c3                   	ret    

f010212e <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010212e:	55                   	push   %ebp
f010212f:	89 e5                	mov    %esp,%ebp
f0102131:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0102134:	e8 e1 ec ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102139:	83 ec 0c             	sub    $0xc,%esp
f010213c:	68 a8 3d 13 f0       	push   $0xf0133da8
f0102141:	e8 e7 ea ff ff       	call   f0100c2d <cprintf>
f0102146:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102149:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214e:	c9                   	leave  
f010214f:	c3                   	ret    

f0102150 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102150:	55                   	push   %ebp
f0102151:	89 e5                	mov    %esp,%ebp
f0102153:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102156:	e8 cf ec ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010215b:	83 ec 0c             	sub    $0xc,%esp
f010215e:	68 d8 3d 13 f0       	push   $0xf0133dd8
f0102163:	e8 c5 ea ff ff       	call   f0100c2d <cprintf>
f0102168:	83 c4 10             	add    $0x10,%esp
	return 0;
f010216b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102170:	c9                   	leave  
f0102171:	c3                   	ret    

f0102172 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102172:	55                   	push   %ebp
f0102173:	89 e5                	mov    %esp,%ebp
f0102175:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102178:	e8 bd ec ff ff       	call   f0100e3a <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010217d:	83 ec 0c             	sub    $0xc,%esp
f0102180:	68 08 3e 13 f0       	push   $0xf0133e08
f0102185:	e8 a3 ea ff ff       	call   f0100c2d <cprintf>
f010218a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010218d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102192:	c9                   	leave  
f0102193:	c3                   	ret    

f0102194 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102194:	55                   	push   %ebp
f0102195:	89 e5                	mov    %esp,%ebp
f0102197:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010219a:	e8 ab ec ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f010219f:	84 c0                	test   %al,%al
f01021a1:	74 12                	je     f01021b5 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021a3:	83 ec 0c             	sub    $0xc,%esp
f01021a6:	68 3c 3e 13 f0       	push   $0xf0133e3c
f01021ab:	e8 7d ea ff ff       	call   f0100c2d <cprintf>
f01021b0:	83 c4 10             	add    $0x10,%esp
f01021b3:	eb 7c                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021b5:	e8 a4 ec ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01021ba:	84 c0                	test   %al,%al
f01021bc:	74 12                	je     f01021d0 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021be:	83 ec 0c             	sub    $0xc,%esp
f01021c1:	68 78 3e 13 f0       	push   $0xf0133e78
f01021c6:	e8 62 ea ff ff       	call   f0100c2d <cprintf>
f01021cb:	83 c4 10             	add    $0x10,%esp
f01021ce:	eb 61                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d0:	e8 9e ec ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01021d5:	84 c0                	test   %al,%al
f01021d7:	74 12                	je     f01021eb <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021d9:	83 ec 0c             	sub    $0xc,%esp
f01021dc:	68 a8 3e 13 f0       	push   $0xf0133ea8
f01021e1:	e8 47 ea ff ff       	call   f0100c2d <cprintf>
f01021e6:	83 c4 10             	add    $0x10,%esp
f01021e9:	eb 46                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021eb:	e8 98 ec ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f01021f0:	84 c0                	test   %al,%al
f01021f2:	74 12                	je     f0102206 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021f4:	83 ec 0c             	sub    $0xc,%esp
f01021f7:	68 d4 3e 13 f0       	push   $0xf0133ed4
f01021fc:	e8 2c ea ff ff       	call   f0100c2d <cprintf>
f0102201:	83 c4 10             	add    $0x10,%esp
f0102204:	eb 2b                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102206:	e8 92 ec ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f010220b:	84 c0                	test   %al,%al
f010220d:	74 12                	je     f0102221 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010220f:	83 ec 0c             	sub    $0xc,%esp
f0102212:	68 00 3f 13 f0       	push   $0xf0133f00
f0102217:	e8 11 ea ff ff       	call   f0100c2d <cprintf>
f010221c:	83 c4 10             	add    $0x10,%esp
f010221f:	eb 10                	jmp    f0102231 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102221:	83 ec 0c             	sub    $0xc,%esp
f0102224:	68 30 3f 13 f0       	push   $0xf0133f30
f0102229:	e8 ff e9 ff ff       	call   f0100c2d <cprintf>
f010222e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102231:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102236:	c9                   	leave  
f0102237:	c3                   	ret    

f0102238 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102238:	55                   	push   %ebp
f0102239:	89 e5                	mov    %esp,%ebp
f010223b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010223e:	e8 c7 ad 00 00       	call   f010d00a <isBufferingEnabled>
f0102243:	84 c0                	test   %al,%al
f0102245:	75 12                	jne    f0102259 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 60 3f 13 f0       	push   $0xf0133f60
f010224f:	e8 d9 e9 ff ff       	call   f0100c2d <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 1d                	jmp    f0102276 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102259:	83 ec 0c             	sub    $0xc,%esp
f010225c:	6a 00                	push   $0x0
f010225e:	e8 81 ad 00 00       	call   f010cfe4 <enableModifiedBuffer>
f0102263:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102266:	83 ec 0c             	sub    $0xc,%esp
f0102269:	68 9c 3f 13 f0       	push   $0xf0133f9c
f010226e:	e8 ba e9 ff ff       	call   f0100c2d <cprintf>
f0102273:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010227b:	c9                   	leave  
f010227c:	c3                   	ret    

f010227d <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010227d:	55                   	push   %ebp
f010227e:	89 e5                	mov    %esp,%ebp
f0102280:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102283:	e8 82 ad 00 00       	call   f010d00a <isBufferingEnabled>
f0102288:	84 c0                	test   %al,%al
f010228a:	75 12                	jne    f010229e <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010228c:	83 ec 0c             	sub    $0xc,%esp
f010228f:	68 60 3f 13 f0       	push   $0xf0133f60
f0102294:	e8 94 e9 ff ff       	call   f0100c2d <cprintf>
f0102299:	83 c4 10             	add    $0x10,%esp
f010229c:	eb 1d                	jmp    f01022bb <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010229e:	83 ec 0c             	sub    $0xc,%esp
f01022a1:	6a 01                	push   $0x1
f01022a3:	e8 3c ad 00 00       	call   f010cfe4 <enableModifiedBuffer>
f01022a8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022ab:	83 ec 0c             	sub    $0xc,%esp
f01022ae:	68 c0 3f 13 f0       	push   $0xf0133fc0
f01022b3:	e8 75 e9 ff ff       	call   f0100c2d <cprintf>
f01022b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c0:	c9                   	leave  
f01022c1:	c3                   	ret    

f01022c2 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022c2:	55                   	push   %ebp
f01022c3:	89 e5                	mov    %esp,%ebp
f01022c5:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	6a 00                	push   $0x0
f01022cd:	e8 2a ad 00 00       	call   f010cffc <enableBuffering>
f01022d2:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022d5:	83 ec 0c             	sub    $0xc,%esp
f01022d8:	6a 00                	push   $0x0
f01022da:	e8 05 ad 00 00       	call   f010cfe4 <enableModifiedBuffer>
f01022df:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022e2:	83 ec 0c             	sub    $0xc,%esp
f01022e5:	68 e0 3f 13 f0       	push   $0xf0133fe0
f01022ea:	e8 3e e9 ff ff       	call   f0100c2d <cprintf>
f01022ef:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f7:	c9                   	leave  
f01022f8:	c3                   	ret    

f01022f9 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01022ff:	83 ec 0c             	sub    $0xc,%esp
f0102302:	6a 01                	push   $0x1
f0102304:	e8 f3 ac 00 00       	call   f010cffc <enableBuffering>
f0102309:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010230c:	83 ec 0c             	sub    $0xc,%esp
f010230f:	6a 01                	push   $0x1
f0102311:	e8 ce ac 00 00       	call   f010cfe4 <enableModifiedBuffer>
f0102316:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102319:	e8 04 ad 00 00       	call   f010d022 <getModifiedBufferLength>
f010231e:	85 c0                	test   %eax,%eax
f0102320:	75 59                	jne    f010237b <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 fc 3f 13 f0       	push   $0xf0133ffc
f010232a:	e8 fe e8 ff ff       	call   f0100c2d <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102332:	83 ec 08             	sub    $0x8,%esp
f0102335:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102338:	50                   	push   %eax
f0102339:	68 2c 40 13 f0       	push   $0xf013402c
f010233e:	e8 1c db 02 00       	call   f012fe5f <readline>
f0102343:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102346:	83 ec 04             	sub    $0x4,%esp
f0102349:	6a 0a                	push   $0xa
f010234b:	6a 00                	push   $0x0
f010234d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102350:	50                   	push   %eax
f0102351:	e8 6f e0 02 00       	call   f01303c5 <strtol>
f0102356:	83 c4 10             	add    $0x10,%esp
f0102359:	83 ec 0c             	sub    $0xc,%esp
f010235c:	50                   	push   %eax
f010235d:	e8 b2 ac 00 00       	call   f010d014 <setModifiedBufferLength>
f0102362:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102365:	e8 b8 ac 00 00       	call   f010d022 <getModifiedBufferLength>
f010236a:	83 ec 08             	sub    $0x8,%esp
f010236d:	50                   	push   %eax
f010236e:	68 58 40 13 f0       	push   $0xf0134058
f0102373:	e8 b5 e8 ff ff       	call   f0100c2d <cprintf>
f0102378:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010237b:	83 ec 0c             	sub    $0xc,%esp
f010237e:	68 7d 40 13 f0       	push   $0xf013407d
f0102383:	e8 a5 e8 ff ff       	call   f0100c2d <cprintf>
f0102388:	83 c4 10             	add    $0x10,%esp
	return 0;
f010238b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102390:	c9                   	leave  
f0102391:	c3                   	ret    

f0102392 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102392:	55                   	push   %ebp
f0102393:	89 e5                	mov    %esp,%ebp
f0102395:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102398:	e8 6d ac 00 00       	call   f010d00a <isBufferingEnabled>
f010239d:	84 c0                	test   %al,%al
f010239f:	75 12                	jne    f01023b3 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a1:	83 ec 0c             	sub    $0xc,%esp
f01023a4:	68 98 40 13 f0       	push   $0xf0134098
f01023a9:	e8 7f e8 ff ff       	call   f0100c2d <cprintf>
f01023ae:	83 c4 10             	add    $0x10,%esp
f01023b1:	eb 19                	jmp    f01023cc <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023b3:	e8 3a ac 00 00       	call   f010cff2 <isModifiedBufferEnabled>
f01023b8:	84 c0                	test   %al,%al
f01023ba:	75 10                	jne    f01023cc <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023bc:	83 ec 0c             	sub    $0xc,%esp
f01023bf:	68 e8 40 13 f0       	push   $0xf01340e8
f01023c4:	e8 64 e8 ff ff       	call   f0100c2d <cprintf>
f01023c9:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023cf:	83 c0 04             	add    $0x4,%eax
f01023d2:	8b 00                	mov    (%eax),%eax
f01023d4:	83 ec 04             	sub    $0x4,%esp
f01023d7:	6a 0a                	push   $0xa
f01023d9:	6a 00                	push   $0x0
f01023db:	50                   	push   %eax
f01023dc:	e8 e4 df 02 00       	call   f01303c5 <strtol>
f01023e1:	83 c4 10             	add    $0x10,%esp
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	50                   	push   %eax
f01023e8:	e8 27 ac 00 00       	call   f010d014 <setModifiedBufferLength>
f01023ed:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f0:	e8 2d ac 00 00       	call   f010d022 <getModifiedBufferLength>
f01023f5:	83 ec 08             	sub    $0x8,%esp
f01023f8:	50                   	push   %eax
f01023f9:	68 58 40 13 f0       	push   $0xf0134058
f01023fe:	e8 2a e8 ff ff       	call   f0100c2d <cprintf>
f0102403:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102406:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010240b:	c9                   	leave  
f010240c:	c3                   	ret    

f010240d <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010240d:	55                   	push   %ebp
f010240e:	89 e5                	mov    %esp,%ebp
f0102410:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102413:	e8 f2 ab 00 00       	call   f010d00a <isBufferingEnabled>
f0102418:	84 c0                	test   %al,%al
f010241a:	75 12                	jne    f010242e <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010241c:	83 ec 0c             	sub    $0xc,%esp
f010241f:	68 98 40 13 f0       	push   $0xf0134098
f0102424:	e8 04 e8 ff ff       	call   f0100c2d <cprintf>
f0102429:	83 c4 10             	add    $0x10,%esp
f010242c:	eb 19                	jmp    f0102447 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010242e:	e8 bf ab 00 00       	call   f010cff2 <isModifiedBufferEnabled>
f0102433:	84 c0                	test   %al,%al
f0102435:	75 10                	jne    f0102447 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102437:	83 ec 0c             	sub    $0xc,%esp
f010243a:	68 e8 40 13 f0       	push   $0xf01340e8
f010243f:	e8 e9 e7 ff ff       	call   f0100c2d <cprintf>
f0102444:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102447:	e8 d6 ab 00 00       	call   f010d022 <getModifiedBufferLength>
f010244c:	83 ec 08             	sub    $0x8,%esp
f010244f:	50                   	push   %eax
f0102450:	68 2e 41 13 f0       	push   $0xf013412e
f0102455:	e8 d3 e7 ff ff       	call   f0100c2d <cprintf>
f010245a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010245d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102462:	c9                   	leave  
f0102463:	c3                   	ret    

f0102464 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102464:	55                   	push   %ebp
f0102465:	89 e5                	mov    %esp,%ebp
f0102467:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010246a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102471:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102475:	75 1b                	jne    f0102492 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102477:	8b 45 0c             	mov    0xc(%ebp),%eax
f010247a:	83 c0 04             	add    $0x4,%eax
f010247d:	8b 00                	mov    (%eax),%eax
f010247f:	83 ec 04             	sub    $0x4,%esp
f0102482:	6a 0a                	push   $0xa
f0102484:	6a 00                	push   $0x0
f0102486:	50                   	push   %eax
f0102487:	e8 39 df 02 00       	call   f01303c5 <strtol>
f010248c:	83 c4 10             	add    $0x10,%esp
f010248f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102492:	e8 b3 e9 ff ff       	call   f0100e4a <isKHeapPlacementStrategyCONTALLOC>
f0102497:	84 c0                	test   %al,%al
f0102499:	74 0a                	je     f01024a5 <command_test_kmalloc+0x41>
		test_kmalloc();
f010249b:	e8 d1 42 01 00       	call   f0116771 <test_kmalloc>
f01024a0:	e9 e8 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024a5:	e8 b4 e9 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01024aa:	84 c0                	test   %al,%al
f01024ac:	74 44                	je     f01024f2 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024b2:	75 1a                	jne    f01024ce <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024b4:	83 ec 0c             	sub    $0xc,%esp
f01024b7:	68 4c 41 13 f0       	push   $0xf013414c
f01024bc:	e8 6c e7 ff ff       	call   f0100c2d <cprintf>
f01024c1:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01024c9:	e9 c4 00 00 00       	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024ce:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024d2:	75 0a                	jne    f01024de <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024d4:	e8 21 91 01 00       	call   f011b5fa <test_kmalloc_firstfit1>
f01024d9:	e9 af 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024de:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024e2:	0f 85 a5 00 00 00    	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024e8:	e8 af a4 01 00       	call   f011c99c <test_kmalloc_firstfit2>
f01024ed:	e9 9b 00 00 00       	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024f2:	e8 7c e9 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f01024f7:	84 c0                	test   %al,%al
f01024f9:	74 44                	je     f010253f <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01024fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ff:	75 17                	jne    f0102518 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102501:	83 ec 0c             	sub    $0xc,%esp
f0102504:	68 9c 41 13 f0       	push   $0xf013419c
f0102509:	e8 1f e7 ff ff       	call   f0100c2d <cprintf>
f010250e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102511:	b8 00 00 00 00       	mov    $0x0,%eax
f0102516:	eb 7a                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102518:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010251c:	75 07                	jne    f0102525 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010251e:	e8 4e 42 01 00       	call   f0116771 <test_kmalloc>
f0102523:	eb 68                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102525:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102529:	75 07                	jne    f0102532 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f010252b:	e8 94 6b 01 00       	call   f01190c4 <test_kmalloc_bestfit1>
f0102530:	eb 5b                	jmp    f010258d <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102532:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102536:	75 55                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102538:	e8 dd 7d 01 00       	call   f011a31a <test_kmalloc_bestfit2>
f010253d:	eb 4e                	jmp    f010258d <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010253f:	e8 44 e9 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102544:	84 c0                	test   %al,%al
f0102546:	74 37                	je     f010257f <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010254c:	75 17                	jne    f0102565 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010254e:	83 ec 0c             	sub    $0xc,%esp
f0102551:	68 ec 41 13 f0       	push   $0xf01341ec
f0102556:	e8 d2 e6 ff ff       	call   f0100c2d <cprintf>
f010255b:	83 c4 10             	add    $0x10,%esp
			return 0;
f010255e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102563:	eb 2d                	jmp    f0102592 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102565:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102569:	75 07                	jne    f0102572 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010256b:	e8 01 42 01 00       	call   f0116771 <test_kmalloc>
f0102570:	eb 1b                	jmp    f010258d <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102572:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102576:	75 15                	jne    f010258d <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102578:	e8 52 54 01 00       	call   f01179cf <test_kmalloc_nextfit>
f010257d:	eb 0e                	jmp    f010258d <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010257f:	e8 19 e9 ff ff       	call   f0100e9d <isKHeapPlacementStrategyWORSTFIT>
f0102584:	84 c0                	test   %al,%al
f0102586:	74 05                	je     f010258d <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102588:	e8 a4 b2 01 00       	call   f011d831 <test_kmalloc_worstfit>
	return 0;
f010258d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102592:	c9                   	leave  
f0102593:	c3                   	ret    

f0102594 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102594:	55                   	push   %ebp
f0102595:	89 e5                	mov    %esp,%ebp
f0102597:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010259a:	e8 d4 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f010259f:	84 c0                	test   %al,%al
f01025a1:	75 09                	jne    f01025ac <command_test_kfree+0x18>
f01025a3:	e8 b6 e8 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	74 07                	je     f01025b3 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025ac:	e8 22 ea 01 00       	call   f0120fd3 <test_kfree_bestfirstfit>
f01025b1:	eb 05                	jmp    f01025b8 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025b3:	e8 c9 c8 01 00       	call   f011ee81 <test_kfree>
	}
	return 0;
f01025b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025c5:	e8 05 04 02 00       	call   f01229cf <test_kheap_phys_addr>
	return 0;
f01025ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025cf:	c9                   	leave  
f01025d0:	c3                   	ret    

f01025d1 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d1:	55                   	push   %ebp
f01025d2:	89 e5                	mov    %esp,%ebp
f01025d4:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025d7:	e8 c3 18 02 00       	call   f0123e9f <test_kheap_virt_addr>
	return 0;
f01025dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e1:	c9                   	leave  
f01025e2:	c3                   	ret    

f01025e3 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025e3:	55                   	push   %ebp
f01025e4:	89 e5                	mov    %esp,%ebp
f01025e6:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025e9:	e8 8e 2d 02 00       	call   f012537c <test_three_creation_functions>
	return 0;
f01025ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f3:	c9                   	leave  
f01025f4:	c3                   	ret    

f01025f5 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025f5:	55                   	push   %ebp
f01025f6:	89 e5                	mov    %esp,%ebp
f01025f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01025fb:	e8 88 e8 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102600:	84 c0                	test   %al,%al
f0102602:	74 07                	je     f010260b <command_test_krealloc+0x16>
		test_krealloc();
f0102604:	e8 8a 87 02 00       	call   f012ad93 <test_krealloc>
f0102609:	eb 0e                	jmp    f0102619 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f010260b:	e8 63 e8 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102610:	84 c0                	test   %al,%al
f0102612:	74 05                	je     f0102619 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102614:	e8 2a a7 02 00       	call   f012cd43 <test_krealloc_BF>
	return 0;
f0102619:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010261e:	c9                   	leave  
f010261f:	c3                   	ret    

f0102620 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102620:	55                   	push   %ebp
f0102621:	89 e5                	mov    %esp,%ebp
f0102623:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102626:	e8 79 2d 01 00       	call   f01153a4 <test_priority_normal_and_higher>
	return 0;
f010262b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102630:	c9                   	leave  
f0102631:	c3                   	ret    

f0102632 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102632:	55                   	push   %ebp
f0102633:	89 e5                	mov    %esp,%ebp
f0102635:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102638:	e8 41 37 01 00       	call   f0115d7e <test_priority_normal_and_lower>
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010264a:	e8 67 2f 02 00       	call   f01255b6 <test_kfreeall>
	return 0;
f010264f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102654:	c9                   	leave  
f0102655:	c3                   	ret    

f0102656 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102656:	55                   	push   %ebp
f0102657:	89 e5                	mov    %esp,%ebp
f0102659:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010265c:	e8 41 46 02 00       	call   f0126ca2 <test_kexpand>
	return 0;
f0102661:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102666:	c9                   	leave  
f0102667:	c3                   	ret    

f0102668 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102668:	55                   	push   %ebp
f0102669:	89 e5                	mov    %esp,%ebp
f010266b:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010266e:	e8 b0 53 02 00       	call   f0127a23 <test_kshrink>
	return 0;
f0102673:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102678:	c9                   	leave  
f0102679:	c3                   	ret    

f010267a <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010267a:	55                   	push   %ebp
f010267b:	89 e5                	mov    %esp,%ebp
f010267d:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102680:	e8 8b 62 02 00       	call   f0128910 <test_kfreelast>
	return 0;
f0102685:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010268a:	c9                   	leave  
f010268b:	c3                   	ret    

f010268c <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010268c:	55                   	push   %ebp
f010268d:	89 e5                	mov    %esp,%ebp
f010268f:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102692:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102695:	83 c0 04             	add    $0x4,%eax
f0102698:	8b 00                	mov    (%eax),%eax
f010269a:	83 ec 04             	sub    $0x4,%esp
f010269d:	6a 0a                	push   $0xa
f010269f:	6a 00                	push   $0x0
f01026a1:	50                   	push   %eax
f01026a2:	e8 1e dd 02 00       	call   f01303c5 <strtol>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026b4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026bb:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f01026c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026c3:	eb 3d                	jmp    f0102702 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026c8:	05 18 da 01 00       	add    $0x1da18,%eax
f01026cd:	83 ec 08             	sub    $0x8,%esp
f01026d0:	68 3a 42 13 f0       	push   $0xf013423a
f01026d5:	50                   	push   %eax
f01026d6:	e8 96 da 02 00       	call   f0130171 <strcmp>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	85 c0                	test   %eax,%eax
f01026e0:	75 12                	jne    f01026f4 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026e6:	74 07                	je     f01026ef <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026ef:	ff 45 f4             	incl   -0xc(%ebp)
f01026f2:	eb 06                	jmp    f01026fa <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026f8:	74 31                	je     f010272b <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026fa:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01026ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102702:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102706:	74 08                	je     f0102710 <command_test_sc_MLFQ+0x84>
f0102708:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010270b:	8b 40 44             	mov    0x44(%eax),%eax
f010270e:	eb 05                	jmp    f0102715 <command_test_sc_MLFQ+0x89>
f0102710:	b8 00 00 00 00       	mov    $0x0,%eax
f0102715:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f010271a:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010271f:	85 c0                	test   %eax,%eax
f0102721:	75 a2                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102727:	75 9c                	jne    f01026c5 <command_test_sc_MLFQ+0x39>
f0102729:	eb 01                	jmp    f010272c <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010272b:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010272c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010272f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102732:	75 12                	jne    f0102746 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102734:	83 ec 0c             	sub    $0xc,%esp
f0102737:	68 44 42 13 f0       	push   $0xf0134244
f010273c:	e8 ec e4 ff ff       	call   f0100c2d <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
f0102744:	eb 17                	jmp    f010275d <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102746:	83 ec 04             	sub    $0x4,%esp
f0102749:	68 7d 42 13 f0       	push   $0xf013427d
f010274e:	68 8b 04 00 00       	push   $0x48b
f0102753:	68 d9 34 13 f0       	push   $0xf01334d9
f0102758:	e8 49 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f010275d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102762:	c9                   	leave  
f0102763:	c3                   	ret    

f0102764 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102764:	55                   	push   %ebp
f0102765:	89 e5                	mov    %esp,%ebp
f0102767:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010276a:	e8 86 d6 00 00       	call   f010fdf5 <TestAutoCompleteCommand>
f010276f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102777:	c9                   	leave  
f0102778:	c3                   	ret    

f0102779 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102779:	55                   	push   %ebp
f010277a:	89 e5                	mov    %esp,%ebp
f010277c:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010277f:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102783:	74 1a                	je     f010279f <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102785:	83 ec 0c             	sub    $0xc,%esp
f0102788:	68 94 42 13 f0       	push   $0xf0134294
f010278d:	e8 9b e4 ff ff       	call   f0100c2d <cprintf>
f0102792:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102795:	b8 00 00 00 00       	mov    $0x0,%eax
f010279a:	e9 82 01 00 00       	jmp    f0102921 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f010279f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027a2:	83 c0 04             	add    $0x4,%eax
f01027a5:	8b 00                	mov    (%eax),%eax
f01027a7:	83 ec 08             	sub    $0x8,%esp
f01027aa:	68 cc 42 13 f0       	push   $0xf01342cc
f01027af:	50                   	push   %eax
f01027b0:	e8 bc d9 02 00       	call   f0130171 <strcmp>
f01027b5:	83 c4 10             	add    $0x10,%esp
f01027b8:	85 c0                	test   %eax,%eax
f01027ba:	75 0a                	jne    f01027c6 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027bc:	e8 de ab 00 00       	call   f010d39f <test_initialize_MemBlocksList>
f01027c1:	e9 56 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027c9:	83 c0 04             	add    $0x4,%eax
f01027cc:	8b 00                	mov    (%eax),%eax
f01027ce:	83 ec 08             	sub    $0x8,%esp
f01027d1:	68 d1 42 13 f0       	push   $0xf01342d1
f01027d6:	50                   	push   %eax
f01027d7:	e8 95 d9 02 00       	call   f0130171 <strcmp>
f01027dc:	83 c4 10             	add    $0x10,%esp
f01027df:	85 c0                	test   %eax,%eax
f01027e1:	75 0a                	jne    f01027ed <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027e3:	e8 cb ac 00 00       	call   f010d4b3 <test_insert_sorted_allocList>
f01027e8:	e9 2f 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f0:	83 c0 04             	add    $0x4,%eax
f01027f3:	8b 00                	mov    (%eax),%eax
f01027f5:	83 ec 08             	sub    $0x8,%esp
f01027f8:	68 d7 42 13 f0       	push   $0xf01342d7
f01027fd:	50                   	push   %eax
f01027fe:	e8 6e d9 02 00       	call   f0130171 <strcmp>
f0102803:	83 c4 10             	add    $0x10,%esp
f0102806:	85 c0                	test   %eax,%eax
f0102808:	75 0a                	jne    f0102814 <command_test_lists+0x9b>
	{
		test_find_block();
f010280a:	e8 62 b1 00 00       	call   f010d971 <test_find_block>
f010280f:	e9 08 01 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102817:	83 c0 04             	add    $0x4,%eax
f010281a:	8b 00                	mov    (%eax),%eax
f010281c:	83 ec 08             	sub    $0x8,%esp
f010281f:	68 dc 42 13 f0       	push   $0xf01342dc
f0102824:	50                   	push   %eax
f0102825:	e8 47 d9 02 00       	call   f0130171 <strcmp>
f010282a:	83 c4 10             	add    $0x10,%esp
f010282d:	85 c0                	test   %eax,%eax
f010282f:	74 1d                	je     f010284e <command_test_lists+0xd5>
f0102831:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102834:	83 c0 04             	add    $0x4,%eax
f0102837:	8b 00                	mov    (%eax),%eax
f0102839:	83 ec 08             	sub    $0x8,%esp
f010283c:	68 df 42 13 f0       	push   $0xf01342df
f0102841:	50                   	push   %eax
f0102842:	e8 2a d9 02 00       	call   f0130171 <strcmp>
f0102847:	83 c4 10             	add    $0x10,%esp
f010284a:	85 c0                	test   %eax,%eax
f010284c:	75 0a                	jne    f0102858 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f010284e:	e8 79 b4 00 00       	call   f010dccc <test_alloc_block_FF>
f0102853:	e9 c4 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102858:	8b 45 0c             	mov    0xc(%ebp),%eax
f010285b:	83 c0 04             	add    $0x4,%eax
f010285e:	8b 00                	mov    (%eax),%eax
f0102860:	83 ec 08             	sub    $0x8,%esp
f0102863:	68 e2 42 13 f0       	push   $0xf01342e2
f0102868:	50                   	push   %eax
f0102869:	e8 03 d9 02 00       	call   f0130171 <strcmp>
f010286e:	83 c4 10             	add    $0x10,%esp
f0102871:	85 c0                	test   %eax,%eax
f0102873:	74 1d                	je     f0102892 <command_test_lists+0x119>
f0102875:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102878:	83 c0 04             	add    $0x4,%eax
f010287b:	8b 00                	mov    (%eax),%eax
f010287d:	83 ec 08             	sub    $0x8,%esp
f0102880:	68 e5 42 13 f0       	push   $0xf01342e5
f0102885:	50                   	push   %eax
f0102886:	e8 e6 d8 02 00       	call   f0130171 <strcmp>
f010288b:	83 c4 10             	add    $0x10,%esp
f010288e:	85 c0                	test   %eax,%eax
f0102890:	75 0a                	jne    f010289c <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102892:	e8 b3 b8 00 00       	call   f010e14a <test_alloc_block_BF>
f0102897:	e9 80 00 00 00       	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 08             	sub    $0x8,%esp
f01028a7:	68 e8 42 13 f0       	push   $0xf01342e8
f01028ac:	50                   	push   %eax
f01028ad:	e8 bf d8 02 00       	call   f0130171 <strcmp>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	85 c0                	test   %eax,%eax
f01028b7:	74 1d                	je     f01028d6 <command_test_lists+0x15d>
f01028b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028bc:	83 c0 04             	add    $0x4,%eax
f01028bf:	8b 00                	mov    (%eax),%eax
f01028c1:	83 ec 08             	sub    $0x8,%esp
f01028c4:	68 eb 42 13 f0       	push   $0xf01342eb
f01028c9:	50                   	push   %eax
f01028ca:	e8 a2 d8 02 00       	call   f0130171 <strcmp>
f01028cf:	83 c4 10             	add    $0x10,%esp
f01028d2:	85 c0                	test   %eax,%eax
f01028d4:	75 07                	jne    f01028dd <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028d6:	e8 f6 be 00 00       	call   f010e7d1 <test_alloc_block_NF>
f01028db:	eb 3f                	jmp    f010291c <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e0:	83 c0 04             	add    $0x4,%eax
f01028e3:	8b 00                	mov    (%eax),%eax
f01028e5:	83 ec 08             	sub    $0x8,%esp
f01028e8:	68 ee 42 13 f0       	push   $0xf01342ee
f01028ed:	50                   	push   %eax
f01028ee:	e8 7e d8 02 00       	call   f0130171 <strcmp>
f01028f3:	83 c4 10             	add    $0x10,%esp
f01028f6:	85 c0                	test   %eax,%eax
f01028f8:	74 1d                	je     f0102917 <command_test_lists+0x19e>
f01028fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028fd:	83 c0 04             	add    $0x4,%eax
f0102900:	8b 00                	mov    (%eax),%eax
f0102902:	83 ec 08             	sub    $0x8,%esp
f0102905:	68 f4 42 13 f0       	push   $0xf01342f4
f010290a:	50                   	push   %eax
f010290b:	e8 61 d8 02 00       	call   f0130171 <strcmp>
f0102910:	83 c4 10             	add    $0x10,%esp
f0102913:	85 c0                	test   %eax,%eax
f0102915:	75 05                	jne    f010291c <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102917:	e8 43 c7 00 00       	call   f010f05f <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f010291c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102921:	c9                   	leave  
f0102922:	c3                   	ret    

f0102923 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102923:	55                   	push   %ebp
f0102924:	89 e5                	mov    %esp,%ebp
f0102926:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102929:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010292d:	74 1a                	je     f0102949 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010292f:	83 ec 0c             	sub    $0xc,%esp
f0102932:	68 fc 42 13 f0       	push   $0xf01342fc
f0102937:	e8 f1 e2 ff ff       	call   f0100c2d <cprintf>
f010293c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010293f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102944:	e9 e1 00 00 00       	jmp    f0102a2a <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010294c:	83 c0 04             	add    $0x4,%eax
f010294f:	8b 00                	mov    (%eax),%eax
f0102951:	83 ec 08             	sub    $0x8,%esp
f0102954:	68 35 43 13 f0       	push   $0xf0134335
f0102959:	50                   	push   %eax
f010295a:	e8 12 d8 02 00       	call   f0130171 <strcmp>
f010295f:	83 c4 10             	add    $0x10,%esp
f0102962:	85 c0                	test   %eax,%eax
f0102964:	75 0a                	jne    f0102970 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102966:	e8 22 df 00 00       	call   f011088d <test_cut_paste_pages>
f010296b:	e9 b5 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102973:	83 c0 04             	add    $0x4,%eax
f0102976:	8b 00                	mov    (%eax),%eax
f0102978:	83 ec 08             	sub    $0x8,%esp
f010297b:	68 3e 43 13 f0       	push   $0xf013433e
f0102980:	50                   	push   %eax
f0102981:	e8 eb d7 02 00       	call   f0130171 <strcmp>
f0102986:	83 c4 10             	add    $0x10,%esp
f0102989:	85 c0                	test   %eax,%eax
f010298b:	75 0a                	jne    f0102997 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f010298d:	e8 46 e9 00 00       	call   f01112d8 <test_copy_paste_chunk>
f0102992:	e9 8e 00 00 00       	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102997:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299a:	83 c0 04             	add    $0x4,%eax
f010299d:	8b 00                	mov    (%eax),%eax
f010299f:	83 ec 08             	sub    $0x8,%esp
f01029a2:	68 48 43 13 f0       	push   $0xf0134348
f01029a7:	50                   	push   %eax
f01029a8:	e8 c4 d7 02 00       	call   f0130171 <strcmp>
f01029ad:	83 c4 10             	add    $0x10,%esp
f01029b0:	85 c0                	test   %eax,%eax
f01029b2:	75 07                	jne    f01029bb <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029b4:	e8 1d fa 00 00       	call   f01123d6 <test_share_chunk>
f01029b9:	eb 6a                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029be:	83 c0 04             	add    $0x4,%eax
f01029c1:	8b 00                	mov    (%eax),%eax
f01029c3:	83 ec 08             	sub    $0x8,%esp
f01029c6:	68 4e 43 13 f0       	push   $0xf013434e
f01029cb:	50                   	push   %eax
f01029cc:	e8 a0 d7 02 00       	call   f0130171 <strcmp>
f01029d1:	83 c4 10             	add    $0x10,%esp
f01029d4:	85 c0                	test   %eax,%eax
f01029d6:	75 07                	jne    f01029df <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029d8:	e8 21 04 01 00       	call   f0112dfe <test_allocate_chunk>
f01029dd:	eb 46                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029e2:	83 c0 04             	add    $0x4,%eax
f01029e5:	8b 00                	mov    (%eax),%eax
f01029e7:	83 ec 08             	sub    $0x8,%esp
f01029ea:	68 57 43 13 f0       	push   $0xf0134357
f01029ef:	50                   	push   %eax
f01029f0:	e8 7c d7 02 00       	call   f0130171 <strcmp>
f01029f5:	83 c4 10             	add    $0x10,%esp
f01029f8:	85 c0                	test   %eax,%eax
f01029fa:	75 07                	jne    f0102a03 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f01029fc:	e8 ac 0c 01 00       	call   f01136ad <test_calculate_required_frames>
f0102a01:	eb 22                	jmp    f0102a25 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a06:	83 c0 04             	add    $0x4,%eax
f0102a09:	8b 00                	mov    (%eax),%eax
f0102a0b:	83 ec 08             	sub    $0x8,%esp
f0102a0e:	68 66 43 13 f0       	push   $0xf0134366
f0102a13:	50                   	push   %eax
f0102a14:	e8 58 d7 02 00       	call   f0130171 <strcmp>
f0102a19:	83 c4 10             	add    $0x10,%esp
f0102a1c:	85 c0                	test   %eax,%eax
f0102a1e:	75 05                	jne    f0102a25 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a20:	e8 fc 14 01 00       	call   f0113f21 <test_calculate_allocated_space>
	}
	return 0;
f0102a25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a2a:	c9                   	leave  
f0102a2b:	c3                   	ret    

f0102a2c <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a2c:	55                   	push   %ebp
f0102a2d:	89 e5                	mov    %esp,%ebp
f0102a2f:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a32:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a36:	74 1a                	je     f0102a52 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a38:	83 ec 0c             	sub    $0xc,%esp
f0102a3b:	68 78 43 13 f0       	push   $0xf0134378
f0102a40:	e8 e8 e1 ff ff       	call   f0100c2d <cprintf>
f0102a45:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a48:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4d:	e9 e1 00 00 00       	jmp    f0102b33 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a55:	83 c0 04             	add    $0x4,%eax
f0102a58:	8b 00                	mov    (%eax),%eax
f0102a5a:	83 ec 08             	sub    $0x8,%esp
f0102a5d:	68 ae 43 13 f0       	push   $0xf01343ae
f0102a62:	50                   	push   %eax
f0102a63:	e8 09 d7 02 00       	call   f0130171 <strcmp>
f0102a68:	83 c4 10             	add    $0x10,%esp
f0102a6b:	85 c0                	test   %eax,%eax
f0102a6d:	75 0a                	jne    f0102a79 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a6f:	e8 06 d5 00 00       	call   f010ff7a <test_pt_set_page_permissions>
f0102a74:	e9 b5 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7c:	83 c0 04             	add    $0x4,%eax
f0102a7f:	8b 00                	mov    (%eax),%eax
f0102a81:	83 ec 08             	sub    $0x8,%esp
f0102a84:	68 b6 43 13 f0       	push   $0xf01343b6
f0102a89:	50                   	push   %eax
f0102a8a:	e8 e2 d6 02 00       	call   f0130171 <strcmp>
f0102a8f:	83 c4 10             	add    $0x10,%esp
f0102a92:	85 c0                	test   %eax,%eax
f0102a94:	75 0a                	jne    f0102aa0 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a96:	e8 42 d7 00 00       	call   f01101dd <test_pt_set_page_permissions_invalid_va>
f0102a9b:	e9 8e 00 00 00       	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa3:	83 c0 04             	add    $0x4,%eax
f0102aa6:	8b 00                	mov    (%eax),%eax
f0102aa8:	83 ec 08             	sub    $0x8,%esp
f0102aab:	68 be 43 13 f0       	push   $0xf01343be
f0102ab0:	50                   	push   %eax
f0102ab1:	e8 bb d6 02 00       	call   f0130171 <strcmp>
f0102ab6:	83 c4 10             	add    $0x10,%esp
f0102ab9:	85 c0                	test   %eax,%eax
f0102abb:	75 07                	jne    f0102ac4 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102abd:	e8 64 d7 00 00       	call   f0110226 <test_pt_get_page_permissions>
f0102ac2:	eb 6a                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 c6 43 13 f0       	push   $0xf01343c6
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 97 d6 02 00       	call   f0130171 <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae1:	e8 84 d8 00 00       	call   f011036a <test_pt_clear_page_table_entry>
f0102ae6:	eb 46                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 cd 43 13 f0       	push   $0xf01343cd
f0102af8:	50                   	push   %eax
f0102af9:	e8 73 d6 02 00       	call   f0130171 <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	75 07                	jne    f0102b0c <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b05:	e8 bd d9 00 00       	call   f01104c7 <test_pt_clear_page_table_entry_invalid_va>
f0102b0a:	eb 22                	jmp    f0102b2e <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 08             	sub    $0x8,%esp
f0102b17:	68 d4 43 13 f0       	push   $0xf01343d4
f0102b1c:	50                   	push   %eax
f0102b1d:	e8 4f d6 02 00       	call   f0130171 <strcmp>
f0102b22:	83 c4 10             	add    $0x10,%esp
f0102b25:	85 c0                	test   %eax,%eax
f0102b27:	75 05                	jne    f0102b2e <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b29:	e8 d1 d9 00 00       	call   f01104ff <test_virtual_to_physical>
	}
	return 0;
f0102b2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b33:	c9                   	leave  
f0102b34:	c3                   	ret    

f0102b35 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b35:	55                   	push   %ebp
f0102b36:	89 e5                	mov    %esp,%ebp
f0102b38:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3e:	83 c0 08             	add    $0x8,%eax
f0102b41:	8b 00                	mov    (%eax),%eax
f0102b43:	83 ec 08             	sub    $0x8,%esp
f0102b46:	68 d8 43 13 f0       	push   $0xf01343d8
f0102b4b:	50                   	push   %eax
f0102b4c:	e8 20 d6 02 00       	call   f0130171 <strcmp>
f0102b51:	83 c4 10             	add    $0x10,%esp
f0102b54:	85 c0                	test   %eax,%eax
f0102b56:	75 20                	jne    f0102b78 <command_test_kheap+0x43>
f0102b58:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b5c:	74 1a                	je     f0102b78 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b5e:	83 ec 0c             	sub    $0xc,%esp
f0102b61:	68 e0 43 13 f0       	push   $0xf01343e0
f0102b66:	e8 c2 e0 ff ff       	call   f0100c2d <cprintf>
f0102b6b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b73:	e9 33 03 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 08             	add    $0x8,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 d8 43 13 f0       	push   $0xf01343d8
f0102b88:	50                   	push   %eax
f0102b89:	e8 e3 d5 02 00       	call   f0130171 <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	74 20                	je     f0102bb5 <command_test_kheap+0x80>
f0102b95:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b99:	74 1a                	je     f0102bb5 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102b9b:	83 ec 0c             	sub    $0xc,%esp
f0102b9e:	68 30 44 13 f0       	push   $0xf0134430
f0102ba3:	e8 85 e0 ff ff       	call   f0100c2d <cprintf>
f0102ba8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bab:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb0:	e9 f6 02 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bb8:	83 c0 04             	add    $0x4,%eax
f0102bbb:	8b 00                	mov    (%eax),%eax
f0102bbd:	83 ec 08             	sub    $0x8,%esp
f0102bc0:	68 dc 42 13 f0       	push   $0xf01342dc
f0102bc5:	50                   	push   %eax
f0102bc6:	e8 a6 d5 02 00       	call   f0130171 <strcmp>
f0102bcb:	83 c4 10             	add    $0x10,%esp
f0102bce:	85 c0                	test   %eax,%eax
f0102bd0:	74 1d                	je     f0102bef <command_test_kheap+0xba>
f0102bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bd5:	83 c0 04             	add    $0x4,%eax
f0102bd8:	8b 00                	mov    (%eax),%eax
f0102bda:	83 ec 08             	sub    $0x8,%esp
f0102bdd:	68 df 42 13 f0       	push   $0xf01342df
f0102be2:	50                   	push   %eax
f0102be3:	e8 89 d5 02 00       	call   f0130171 <strcmp>
f0102be8:	83 c4 10             	add    $0x10,%esp
f0102beb:	85 c0                	test   %eax,%eax
f0102bed:	75 1a                	jne    f0102c09 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bef:	e8 16 e2 ff ff       	call   f0100e0a <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bf4:	83 ec 0c             	sub    $0xc,%esp
f0102bf7:	68 78 3e 13 f0       	push   $0xf0133e78
f0102bfc:	e8 2c e0 ff ff       	call   f0100c2d <cprintf>
f0102c01:	83 c4 10             	add    $0x10,%esp
f0102c04:	e9 a0 00 00 00       	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0c:	83 c0 04             	add    $0x4,%eax
f0102c0f:	8b 00                	mov    (%eax),%eax
f0102c11:	83 ec 08             	sub    $0x8,%esp
f0102c14:	68 e2 42 13 f0       	push   $0xf01342e2
f0102c19:	50                   	push   %eax
f0102c1a:	e8 52 d5 02 00       	call   f0130171 <strcmp>
f0102c1f:	83 c4 10             	add    $0x10,%esp
f0102c22:	85 c0                	test   %eax,%eax
f0102c24:	74 1d                	je     f0102c43 <command_test_kheap+0x10e>
f0102c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c29:	83 c0 04             	add    $0x4,%eax
f0102c2c:	8b 00                	mov    (%eax),%eax
f0102c2e:	83 ec 08             	sub    $0x8,%esp
f0102c31:	68 e5 42 13 f0       	push   $0xf01342e5
f0102c36:	50                   	push   %eax
f0102c37:	e8 35 d5 02 00       	call   f0130171 <strcmp>
f0102c3c:	83 c4 10             	add    $0x10,%esp
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	75 17                	jne    f0102c5a <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c43:	e8 d2 e1 ff ff       	call   f0100e1a <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c48:	83 ec 0c             	sub    $0xc,%esp
f0102c4b:	68 a8 3e 13 f0       	push   $0xf0133ea8
f0102c50:	e8 d8 df ff ff       	call   f0100c2d <cprintf>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	eb 4f                	jmp    f0102ca9 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c5d:	83 c0 04             	add    $0x4,%eax
f0102c60:	8b 00                	mov    (%eax),%eax
f0102c62:	83 ec 08             	sub    $0x8,%esp
f0102c65:	68 e8 42 13 f0       	push   $0xf01342e8
f0102c6a:	50                   	push   %eax
f0102c6b:	e8 01 d5 02 00       	call   f0130171 <strcmp>
f0102c70:	83 c4 10             	add    $0x10,%esp
f0102c73:	85 c0                	test   %eax,%eax
f0102c75:	74 1d                	je     f0102c94 <command_test_kheap+0x15f>
f0102c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c7a:	83 c0 04             	add    $0x4,%eax
f0102c7d:	8b 00                	mov    (%eax),%eax
f0102c7f:	83 ec 08             	sub    $0x8,%esp
f0102c82:	68 eb 42 13 f0       	push   $0xf01342eb
f0102c87:	50                   	push   %eax
f0102c88:	e8 e4 d4 02 00       	call   f0130171 <strcmp>
f0102c8d:	83 c4 10             	add    $0x10,%esp
f0102c90:	85 c0                	test   %eax,%eax
f0102c92:	75 15                	jne    f0102ca9 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c94:	e8 91 e1 ff ff       	call   f0100e2a <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102c99:	83 ec 0c             	sub    $0xc,%esp
f0102c9c:	68 d4 3e 13 f0       	push   $0xf0133ed4
f0102ca1:	e8 87 df ff ff       	call   f0100c2d <cprintf>
f0102ca6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102ca9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cac:	83 c0 08             	add    $0x8,%eax
f0102caf:	8b 00                	mov    (%eax),%eax
f0102cb1:	83 ec 08             	sub    $0x8,%esp
f0102cb4:	68 d8 43 13 f0       	push   $0xf01343d8
f0102cb9:	50                   	push   %eax
f0102cba:	e8 b2 d4 02 00       	call   f0130171 <strcmp>
f0102cbf:	83 c4 10             	add    $0x10,%esp
f0102cc2:	85 c0                	test   %eax,%eax
f0102cc4:	0f 85 13 01 00 00    	jne    f0102ddd <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ccd:	83 c0 0c             	add    $0xc,%eax
f0102cd0:	8b 00                	mov    (%eax),%eax
f0102cd2:	83 ec 04             	sub    $0x4,%esp
f0102cd5:	6a 0a                	push   $0xa
f0102cd7:	6a 00                	push   $0x0
f0102cd9:	50                   	push   %eax
f0102cda:	e8 e6 d6 02 00       	call   f01303c5 <strtol>
f0102cdf:	83 c4 10             	add    $0x10,%esp
f0102ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ce5:	e8 74 e1 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102cea:	84 c0                	test   %al,%al
f0102cec:	74 54                	je     f0102d42 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cf2:	75 1a                	jne    f0102d0e <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cf4:	83 ec 0c             	sub    $0xc,%esp
f0102cf7:	68 4c 41 13 f0       	push   $0xf013414c
f0102cfc:	e8 2c df ff ff       	call   f0100c2d <cprintf>
f0102d01:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d04:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d09:	e9 9d 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d0e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d12:	75 0a                	jne    f0102d1e <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d14:	e8 58 3a 01 00       	call   f0116771 <test_kmalloc>
f0102d19:	e9 b5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d1e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d22:	75 0a                	jne    f0102d2e <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d24:	e8 d1 88 01 00       	call   f011b5fa <test_kmalloc_firstfit1>
f0102d29:	e9 a5 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d2e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d32:	0f 85 9b 00 00 00    	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d38:	e8 5f 9c 01 00       	call   f011c99c <test_kmalloc_firstfit2>
f0102d3d:	e9 91 00 00 00       	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d42:	e8 2c e1 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102d47:	84 c0                	test   %al,%al
f0102d49:	74 47                	je     f0102d92 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d4f:	75 1a                	jne    f0102d6b <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d51:	83 ec 0c             	sub    $0xc,%esp
f0102d54:	68 9c 41 13 f0       	push   $0xf013419c
f0102d59:	e8 cf de ff ff       	call   f0100c2d <cprintf>
f0102d5e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d61:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d66:	e9 40 01 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d6b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d6f:	75 07                	jne    f0102d78 <command_test_kheap+0x243>
				test_kmalloc();
f0102d71:	e8 fb 39 01 00       	call   f0116771 <test_kmalloc>
f0102d76:	eb 5b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d78:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d7c:	75 07                	jne    f0102d85 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d7e:	e8 41 63 01 00       	call   f01190c4 <test_kmalloc_bestfit1>
f0102d83:	eb 4e                	jmp    f0102dd3 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d85:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d89:	75 48                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d8b:	e8 8a 75 01 00       	call   f011a31a <test_kmalloc_bestfit2>
f0102d90:	eb 41                	jmp    f0102dd3 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d92:	e8 f1 e0 ff ff       	call   f0100e88 <isKHeapPlacementStrategyNEXTFIT>
f0102d97:	84 c0                	test   %al,%al
f0102d99:	74 38                	je     f0102dd3 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102d9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d9f:	75 1a                	jne    f0102dbb <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da1:	83 ec 0c             	sub    $0xc,%esp
f0102da4:	68 ec 41 13 f0       	push   $0xf01341ec
f0102da9:	e8 7f de ff ff       	call   f0100c2d <cprintf>
f0102dae:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102db6:	e9 f0 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dbb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dbf:	75 07                	jne    f0102dc8 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc1:	e8 ab 39 01 00       	call   f0116771 <test_kmalloc>
f0102dc6:	eb 0b                	jmp    f0102dd3 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dc8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dcc:	75 05                	jne    f0102dd3 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dce:	e8 fc 4b 01 00       	call   f01179cf <test_kmalloc_nextfit>
		}
		return 0;
f0102dd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dd8:	e9 ce 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 08             	add    $0x8,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 74 44 13 f0       	push   $0xf0134474
f0102ded:	50                   	push   %eax
f0102dee:	e8 7e d3 02 00       	call   f0130171 <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 28                	jne    f0102e22 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102dfa:	e8 74 e0 ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102dff:	84 c0                	test   %al,%al
f0102e01:	75 09                	jne    f0102e0c <command_test_kheap+0x2d7>
f0102e03:	e8 56 e0 ff ff       	call   f0100e5e <isKHeapPlacementStrategyFIRSTFIT>
f0102e08:	84 c0                	test   %al,%al
f0102e0a:	74 07                	je     f0102e13 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e0c:	e8 c2 e1 01 00       	call   f0120fd3 <test_kfree_bestfirstfit>
f0102e11:	eb 05                	jmp    f0102e18 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e13:	e8 69 c0 01 00       	call   f011ee81 <test_kfree>
		}
		return 0;
f0102e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e1d:	e9 89 00 00 00       	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e25:	83 c0 08             	add    $0x8,%eax
f0102e28:	8b 00                	mov    (%eax),%eax
f0102e2a:	83 ec 08             	sub    $0x8,%esp
f0102e2d:	68 7a 44 13 f0       	push   $0xf013447a
f0102e32:	50                   	push   %eax
f0102e33:	e8 39 d3 02 00       	call   f0130171 <strcmp>
f0102e38:	83 c4 10             	add    $0x10,%esp
f0102e3b:	85 c0                	test   %eax,%eax
f0102e3d:	75 0c                	jne    f0102e4b <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e3f:	e8 8b fb 01 00       	call   f01229cf <test_kheap_phys_addr>
		return 0;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e49:	eb 60                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e4e:	83 c0 08             	add    $0x8,%eax
f0102e51:	8b 00                	mov    (%eax),%eax
f0102e53:	83 ec 08             	sub    $0x8,%esp
f0102e56:	68 84 44 13 f0       	push   $0xf0134484
f0102e5b:	50                   	push   %eax
f0102e5c:	e8 10 d3 02 00       	call   f0130171 <strcmp>
f0102e61:	83 c4 10             	add    $0x10,%esp
f0102e64:	85 c0                	test   %eax,%eax
f0102e66:	75 0c                	jne    f0102e74 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e68:	e8 32 10 02 00       	call   f0123e9f <test_kheap_virt_addr>
		return 0;
f0102e6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e72:	eb 37                	jmp    f0102eab <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e77:	83 c0 08             	add    $0x8,%eax
f0102e7a:	8b 00                	mov    (%eax),%eax
f0102e7c:	83 ec 08             	sub    $0x8,%esp
f0102e7f:	68 8e 44 13 f0       	push   $0xf013448e
f0102e84:	50                   	push   %eax
f0102e85:	e8 e7 d2 02 00       	call   f0130171 <strcmp>
f0102e8a:	83 c4 10             	add    $0x10,%esp
f0102e8d:	85 c0                	test   %eax,%eax
f0102e8f:	75 15                	jne    f0102ea6 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e91:	e8 dd df ff ff       	call   f0100e73 <isKHeapPlacementStrategyBESTFIT>
f0102e96:	84 c0                	test   %al,%al
f0102e98:	74 05                	je     f0102e9f <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102e9a:	e8 a4 9e 02 00       	call   f012cd43 <test_krealloc_BF>
		}
		return 0;
f0102e9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ea4:	eb 05                	jmp    f0102eab <command_test_kheap+0x376>
	}
	return 0;
f0102ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eab:	c9                   	leave  
f0102eac:	c3                   	ret    

f0102ead <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102ead:	55                   	push   %ebp
f0102eae:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eb3:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0102eb9:	29 d0                	sub    %edx,%eax
f0102ebb:	c1 f8 03             	sar    $0x3,%eax
f0102ebe:	89 c2                	mov    %eax,%edx
f0102ec0:	89 d0                	mov    %edx,%eax
f0102ec2:	c1 e0 02             	shl    $0x2,%eax
f0102ec5:	01 d0                	add    %edx,%eax
f0102ec7:	c1 e0 02             	shl    $0x2,%eax
f0102eca:	01 d0                	add    %edx,%eax
f0102ecc:	c1 e0 02             	shl    $0x2,%eax
f0102ecf:	01 d0                	add    %edx,%eax
f0102ed1:	89 c1                	mov    %eax,%ecx
f0102ed3:	c1 e1 08             	shl    $0x8,%ecx
f0102ed6:	01 c8                	add    %ecx,%eax
f0102ed8:	89 c1                	mov    %eax,%ecx
f0102eda:	c1 e1 10             	shl    $0x10,%ecx
f0102edd:	01 c8                	add    %ecx,%eax
f0102edf:	01 c0                	add    %eax,%eax
f0102ee1:	01 d0                	add    %edx,%eax
}
f0102ee3:	5d                   	pop    %ebp
f0102ee4:	c3                   	ret    

f0102ee5 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102ee5:	55                   	push   %ebp
f0102ee6:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ee8:	ff 75 08             	pushl  0x8(%ebp)
f0102eeb:	e8 bd ff ff ff       	call   f0102ead <to_frame_number>
f0102ef0:	83 c4 04             	add    $0x4,%esp
f0102ef3:	c1 e0 0c             	shl    $0xc,%eax
}
f0102ef6:	c9                   	leave  
f0102ef7:	c3                   	ret    

f0102ef8 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102ef8:	55                   	push   %ebp
f0102ef9:	89 e5                	mov    %esp,%ebp
f0102efb:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102efe:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f01:	c1 e8 0c             	shr    $0xc,%eax
f0102f04:	89 c2                	mov    %eax,%edx
f0102f06:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0102f0b:	39 c2                	cmp    %eax,%edx
f0102f0d:	72 14                	jb     f0102f23 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f0f:	83 ec 04             	sub    $0x4,%esp
f0102f12:	68 98 44 13 f0       	push   $0xf0134498
f0102f17:	6a 55                	push   $0x55
f0102f19:	68 c0 44 13 f0       	push   $0xf01344c0
f0102f1e:	e8 83 d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f23:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0102f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f2c:	c1 e8 0c             	shr    $0xc,%eax
f0102f2f:	89 c1                	mov    %eax,%ecx
f0102f31:	89 c8                	mov    %ecx,%eax
f0102f33:	01 c0                	add    %eax,%eax
f0102f35:	01 c8                	add    %ecx,%eax
f0102f37:	c1 e0 03             	shl    $0x3,%eax
f0102f3a:	01 d0                	add    %edx,%eax
}
f0102f3c:	c9                   	leave  
f0102f3d:	c3                   	ret    

f0102f3e <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f3e:	55                   	push   %ebp
f0102f3f:	89 e5                	mov    %esp,%ebp
f0102f41:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f47:	05 00 14 00 00       	add    $0x1400,%eax
f0102f4c:	c1 e0 03             	shl    $0x3,%eax
f0102f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f52:	83 ec 04             	sub    $0x4,%esp
f0102f55:	6a 08                	push   $0x8
f0102f57:	ff 75 0c             	pushl  0xc(%ebp)
f0102f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f5d:	e8 56 d8 02 00       	call   f01307b8 <ide_read>
f0102f62:	83 c4 10             	add    $0x10,%esp
f0102f65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f6b:	c9                   	leave  
f0102f6c:	c3                   	ret    

f0102f6d <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f6d:	55                   	push   %ebp
f0102f6e:	89 e5                	mov    %esp,%ebp
f0102f70:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f76:	05 00 14 00 00       	add    $0x1400,%eax
f0102f7b:	c1 e0 03             	shl    $0x3,%eax
f0102f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f81:	83 ec 04             	sub    $0x4,%esp
f0102f84:	6a 08                	push   $0x8
f0102f86:	ff 75 0c             	pushl  0xc(%ebp)
f0102f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f8c:	e8 67 d9 02 00       	call   f01308f8 <ide_write>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f9b:	74 14                	je     f0102fb1 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102f9d:	83 ec 04             	sub    $0x4,%esp
f0102fa0:	68 e2 44 13 f0       	push   $0xf01344e2
f0102fa5:	6a 2e                	push   $0x2e
f0102fa7:	68 f9 44 13 f0       	push   $0xf01344f9
f0102fac:	e8 f5 d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fb4:	c9                   	leave  
f0102fb5:	c3                   	ret    

f0102fb6 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fb6:	55                   	push   %ebp
f0102fb7:	89 e5                	mov    %esp,%ebp
f0102fb9:	53                   	push   %ebx
f0102fba:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fbd:	c7 05 14 75 6e f0 00 	movl   $0x0,0xf06e7514
f0102fc4:	00 00 00 
f0102fc7:	c7 05 18 75 6e f0 00 	movl   $0x0,0xf06e7518
f0102fce:	00 00 00 
f0102fd1:	c7 05 20 75 6e f0 00 	movl   $0x0,0xf06e7520
f0102fd8:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fdb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fe2:	e9 e8 00 00 00       	jmp    f01030cf <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fe7:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0102fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff0:	89 d0                	mov    %edx,%eax
f0102ff2:	01 c0                	add    %eax,%eax
f0102ff4:	01 d0                	add    %edx,%eax
f0102ff6:	c1 e0 03             	shl    $0x3,%eax
f0102ff9:	01 c8                	add    %ecx,%eax
f0102ffb:	83 ec 0c             	sub    $0xc,%esp
f0102ffe:	50                   	push   %eax
f0102fff:	e8 8b 37 00 00       	call   f010678f <initialize_frame_info>
f0103004:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103007:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010300d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103010:	89 d0                	mov    %edx,%eax
f0103012:	01 c0                	add    %eax,%eax
f0103014:	01 d0                	add    %edx,%eax
f0103016:	c1 e0 03             	shl    $0x3,%eax
f0103019:	01 c8                	add    %ecx,%eax
f010301b:	85 c0                	test   %eax,%eax
f010301d:	75 14                	jne    f0103033 <initialize_disk_page_file+0x7d>
f010301f:	83 ec 04             	sub    $0x4,%esp
f0103022:	68 18 45 13 f0       	push   $0xf0134518
f0103027:	6a 59                	push   $0x59
f0103029:	68 f9 44 13 f0       	push   $0xf01344f9
f010302e:	e8 73 d1 ff ff       	call   f01001a6 <_panic>
f0103033:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103039:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010303c:	89 d0                	mov    %edx,%eax
f010303e:	01 c0                	add    %eax,%eax
f0103040:	01 d0                	add    %edx,%eax
f0103042:	c1 e0 03             	shl    $0x3,%eax
f0103045:	01 c8                	add    %ecx,%eax
f0103047:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010304d:	89 10                	mov    %edx,(%eax)
f010304f:	8b 00                	mov    (%eax),%eax
f0103051:	85 c0                	test   %eax,%eax
f0103053:	74 1f                	je     f0103074 <initialize_disk_page_file+0xbe>
f0103055:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010305b:	8b 1d 00 f1 67 f0    	mov    0xf067f100,%ebx
f0103061:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103064:	89 c8                	mov    %ecx,%eax
f0103066:	01 c0                	add    %eax,%eax
f0103068:	01 c8                	add    %ecx,%eax
f010306a:	c1 e0 03             	shl    $0x3,%eax
f010306d:	01 d8                	add    %ebx,%eax
f010306f:	89 42 04             	mov    %eax,0x4(%edx)
f0103072:	eb 19                	jmp    f010308d <initialize_disk_page_file+0xd7>
f0103074:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010307a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010307d:	89 d0                	mov    %edx,%eax
f010307f:	01 c0                	add    %eax,%eax
f0103081:	01 d0                	add    %edx,%eax
f0103083:	c1 e0 03             	shl    $0x3,%eax
f0103086:	01 c8                	add    %ecx,%eax
f0103088:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f010308d:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103093:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103096:	89 d0                	mov    %edx,%eax
f0103098:	01 c0                	add    %eax,%eax
f010309a:	01 d0                	add    %edx,%eax
f010309c:	c1 e0 03             	shl    $0x3,%eax
f010309f:	01 c8                	add    %ecx,%eax
f01030a1:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f01030a6:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f01030ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030af:	89 d0                	mov    %edx,%eax
f01030b1:	01 c0                	add    %eax,%eax
f01030b3:	01 d0                	add    %edx,%eax
f01030b5:	c1 e0 03             	shl    $0x3,%eax
f01030b8:	01 c8                	add    %ecx,%eax
f01030ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c1:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01030c6:	40                   	inc    %eax
f01030c7:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030cc:	ff 45 f4             	incl   -0xc(%ebp)
f01030cf:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030d6:	0f 8e 0b ff ff ff    	jle    f0102fe7 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030dc:	90                   	nop
f01030dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e0:	c9                   	leave  
f01030e1:	c3                   	ret    

f01030e2 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030e2:	55                   	push   %ebp
f01030e3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01030e8:	8b 15 00 f1 67 f0    	mov    0xf067f100,%edx
f01030ee:	29 d0                	sub    %edx,%eax
f01030f0:	c1 f8 03             	sar    $0x3,%eax
f01030f3:	89 c2                	mov    %eax,%edx
f01030f5:	89 d0                	mov    %edx,%eax
f01030f7:	c1 e0 02             	shl    $0x2,%eax
f01030fa:	01 d0                	add    %edx,%eax
f01030fc:	c1 e0 02             	shl    $0x2,%eax
f01030ff:	01 d0                	add    %edx,%eax
f0103101:	c1 e0 02             	shl    $0x2,%eax
f0103104:	01 d0                	add    %edx,%eax
f0103106:	89 c1                	mov    %eax,%ecx
f0103108:	c1 e1 08             	shl    $0x8,%ecx
f010310b:	01 c8                	add    %ecx,%eax
f010310d:	89 c1                	mov    %eax,%ecx
f010310f:	c1 e1 10             	shl    $0x10,%ecx
f0103112:	01 c8                	add    %ecx,%eax
f0103114:	01 c0                	add    %eax,%eax
f0103116:	01 d0                	add    %edx,%eax
}
f0103118:	5d                   	pop    %ebp
f0103119:	c3                   	ret    

f010311a <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010311a:	55                   	push   %ebp
f010311b:	89 e5                	mov    %esp,%ebp
f010311d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103120:	a1 14 75 6e f0       	mov    0xf06e7514,%eax
f0103125:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103128:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010312c:	75 0a                	jne    f0103138 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010312e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103133:	e9 a7 00 00 00       	jmp    f01031df <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103138:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010313c:	75 14                	jne    f0103152 <allocate_disk_frame+0x38>
f010313e:	83 ec 04             	sub    $0x4,%esp
f0103141:	68 3b 45 13 f0       	push   $0xf013453b
f0103146:	6a 78                	push   $0x78
f0103148:	68 f9 44 13 f0       	push   $0xf01344f9
f010314d:	e8 54 d0 ff ff       	call   f01001a6 <_panic>
f0103152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103155:	8b 00                	mov    (%eax),%eax
f0103157:	85 c0                	test   %eax,%eax
f0103159:	74 10                	je     f010316b <allocate_disk_frame+0x51>
f010315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315e:	8b 00                	mov    (%eax),%eax
f0103160:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103163:	8b 52 04             	mov    0x4(%edx),%edx
f0103166:	89 50 04             	mov    %edx,0x4(%eax)
f0103169:	eb 0b                	jmp    f0103176 <allocate_disk_frame+0x5c>
f010316b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010316e:	8b 40 04             	mov    0x4(%eax),%eax
f0103171:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f0103176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103179:	8b 40 04             	mov    0x4(%eax),%eax
f010317c:	85 c0                	test   %eax,%eax
f010317e:	74 0f                	je     f010318f <allocate_disk_frame+0x75>
f0103180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103183:	8b 40 04             	mov    0x4(%eax),%eax
f0103186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103189:	8b 12                	mov    (%edx),%edx
f010318b:	89 10                	mov    %edx,(%eax)
f010318d:	eb 0a                	jmp    f0103199 <allocate_disk_frame+0x7f>
f010318f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103192:	8b 00                	mov    (%eax),%eax
f0103194:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f0103199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031ac:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01031b1:	48                   	dec    %eax
f01031b2:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
	initialize_frame_info(ptr_frame_info);
f01031b7:	83 ec 0c             	sub    $0xc,%esp
f01031ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01031bd:	e8 cd 35 00 00       	call   f010678f <initialize_frame_info>
f01031c2:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031c5:	83 ec 0c             	sub    $0xc,%esp
f01031c8:	ff 75 f4             	pushl  -0xc(%ebp)
f01031cb:	e8 12 ff ff ff       	call   f01030e2 <to_disk_frame_number>
f01031d0:	83 c4 10             	add    $0x10,%esp
f01031d3:	89 c2                	mov    %eax,%edx
f01031d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01031d8:	89 10                	mov    %edx,(%eax)
	return 0;
f01031da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031df:	c9                   	leave  
f01031e0:	c3                   	ret    

f01031e1 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e1:	55                   	push   %ebp
f01031e2:	89 e5                	mov    %esp,%ebp
f01031e4:	53                   	push   %ebx
f01031e5:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031ec:	0f 84 ca 00 00 00    	je     f01032bc <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031f2:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f01031f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01031fb:	89 d0                	mov    %edx,%eax
f01031fd:	01 c0                	add    %eax,%eax
f01031ff:	01 d0                	add    %edx,%eax
f0103201:	c1 e0 03             	shl    $0x3,%eax
f0103204:	01 c8                	add    %ecx,%eax
f0103206:	85 c0                	test   %eax,%eax
f0103208:	75 17                	jne    f0103221 <free_disk_frame+0x40>
f010320a:	83 ec 04             	sub    $0x4,%esp
f010320d:	68 18 45 13 f0       	push   $0xf0134518
f0103212:	68 85 00 00 00       	push   $0x85
f0103217:	68 f9 44 13 f0       	push   $0xf01344f9
f010321c:	e8 85 cf ff ff       	call   f01001a6 <_panic>
f0103221:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103227:	8b 55 08             	mov    0x8(%ebp),%edx
f010322a:	89 d0                	mov    %edx,%eax
f010322c:	01 c0                	add    %eax,%eax
f010322e:	01 d0                	add    %edx,%eax
f0103230:	c1 e0 03             	shl    $0x3,%eax
f0103233:	01 c8                	add    %ecx,%eax
f0103235:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f010323b:	89 10                	mov    %edx,(%eax)
f010323d:	8b 00                	mov    (%eax),%eax
f010323f:	85 c0                	test   %eax,%eax
f0103241:	74 1f                	je     f0103262 <free_disk_frame+0x81>
f0103243:	8b 15 14 75 6e f0    	mov    0xf06e7514,%edx
f0103249:	8b 1d 00 f1 67 f0    	mov    0xf067f100,%ebx
f010324f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103252:	89 c8                	mov    %ecx,%eax
f0103254:	01 c0                	add    %eax,%eax
f0103256:	01 c8                	add    %ecx,%eax
f0103258:	c1 e0 03             	shl    $0x3,%eax
f010325b:	01 d8                	add    %ebx,%eax
f010325d:	89 42 04             	mov    %eax,0x4(%edx)
f0103260:	eb 19                	jmp    f010327b <free_disk_frame+0x9a>
f0103262:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103268:	8b 55 08             	mov    0x8(%ebp),%edx
f010326b:	89 d0                	mov    %edx,%eax
f010326d:	01 c0                	add    %eax,%eax
f010326f:	01 d0                	add    %edx,%eax
f0103271:	c1 e0 03             	shl    $0x3,%eax
f0103274:	01 c8                	add    %ecx,%eax
f0103276:	a3 18 75 6e f0       	mov    %eax,0xf06e7518
f010327b:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f0103281:	8b 55 08             	mov    0x8(%ebp),%edx
f0103284:	89 d0                	mov    %edx,%eax
f0103286:	01 c0                	add    %eax,%eax
f0103288:	01 d0                	add    %edx,%eax
f010328a:	c1 e0 03             	shl    $0x3,%eax
f010328d:	01 c8                	add    %ecx,%eax
f010328f:	a3 14 75 6e f0       	mov    %eax,0xf06e7514
f0103294:	8b 0d 00 f1 67 f0    	mov    0xf067f100,%ecx
f010329a:	8b 55 08             	mov    0x8(%ebp),%edx
f010329d:	89 d0                	mov    %edx,%eax
f010329f:	01 c0                	add    %eax,%eax
f01032a1:	01 d0                	add    %edx,%eax
f01032a3:	c1 e0 03             	shl    $0x3,%eax
f01032a6:	01 c8                	add    %ecx,%eax
f01032a8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032af:	a1 20 75 6e f0       	mov    0xf06e7520,%eax
f01032b4:	40                   	inc    %eax
f01032b5:	a3 20 75 6e f0       	mov    %eax,0xf06e7520
f01032ba:	eb 01                	jmp    f01032bd <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032bc:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c0:	c9                   	leave  
f01032c1:	c3                   	ret    

f01032c2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032c2:	55                   	push   %ebp
f01032c3:	89 e5                	mov    %esp,%ebp
f01032c5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032cb:	c1 e8 16             	shr    $0x16,%eax
f01032ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d8:	01 d0                	add    %edx,%eax
f01032da:	8b 00                	mov    (%eax),%eax
f01032dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032ed:	c1 e8 0c             	shr    $0xc,%eax
f01032f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032f3:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01032f8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01032fb:	72 17                	jb     f0103314 <get_disk_page_table+0x52>
f01032fd:	ff 75 f0             	pushl  -0x10(%ebp)
f0103300:	68 5c 45 13 f0       	push   $0xf013455c
f0103305:	68 92 00 00 00       	push   $0x92
f010330a:	68 f9 44 13 f0       	push   $0xf01344f9
f010330f:	e8 92 ce ff ff       	call   f01001a6 <_panic>
f0103314:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103317:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010331c:	89 c2                	mov    %eax,%edx
f010331e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103321:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103323:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103327:	0f 85 b7 00 00 00    	jne    f01033e4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010332d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103331:	0f 84 9d 00 00 00    	je     f01033d4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103337:	83 ec 0c             	sub    $0xc,%esp
f010333a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010333d:	50                   	push   %eax
f010333e:	e8 67 34 00 00       	call   f01067aa <allocate_frame>
f0103343:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103349:	83 ec 0c             	sub    $0xc,%esp
f010334c:	50                   	push   %eax
f010334d:	e8 93 fb ff ff       	call   f0102ee5 <to_physical_address>
f0103352:	83 c4 10             	add    $0x10,%esp
f0103355:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103358:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010335b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010335e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103361:	c1 e8 0c             	shr    $0xc,%eax
f0103364:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103367:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010336c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010336f:	72 17                	jb     f0103388 <get_disk_page_table+0xc6>
f0103371:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103374:	68 5c 45 13 f0       	push   $0xf013455c
f0103379:	68 ae 00 00 00       	push   $0xae
f010337e:	68 f9 44 13 f0       	push   $0xf01344f9
f0103383:	e8 1e ce ff ff       	call   f01001a6 <_panic>
f0103388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010338b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103390:	89 c2                	mov    %eax,%edx
f0103392:	8b 45 14             	mov    0x14(%ebp),%eax
f0103395:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010339a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a3:	c1 e8 16             	shr    $0x16,%eax
f01033a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b0:	01 d0                	add    %edx,%eax
f01033b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033b5:	83 ca 01             	or     $0x1,%edx
f01033b8:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033ba:	8b 45 14             	mov    0x14(%ebp),%eax
f01033bd:	8b 00                	mov    (%eax),%eax
f01033bf:	83 ec 04             	sub    $0x4,%esp
f01033c2:	68 00 10 00 00       	push   $0x1000
f01033c7:	6a 00                	push   $0x0
f01033c9:	50                   	push   %eax
f01033ca:	e8 84 ce 02 00       	call   f0130253 <memset>
f01033cf:	83 c4 10             	add    $0x10,%esp
f01033d2:	eb 10                	jmp    f01033e4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01033d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033dd:	b8 00 00 00 00       	mov    $0x0,%eax
f01033e2:	eb 05                	jmp    f01033e9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033e9:	c9                   	leave  
f01033ea:	c3                   	ret    

f01033eb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033eb:	55                   	push   %ebp
f01033ec:	89 e5                	mov    %esp,%ebp
f01033ee:	83 ec 28             	sub    $0x28,%esp
f01033f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01033f4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033f7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01033fb:	74 75                	je     f0103472 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01033fd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103407:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010340f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103412:	ba 00 00 00 00       	mov    $0x0,%edx
f0103417:	f7 75 f4             	divl   -0xc(%ebp)
f010341a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341d:	29 d0                	sub    %edx,%eax
f010341f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103422:	73 32                	jae    f0103456 <pf_add_empty_env_page+0x6b>
f0103424:	8b 45 08             	mov    0x8(%ebp),%eax
f0103427:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f010342d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103432:	29 d0                	sub    %edx,%eax
f0103434:	c1 e0 0c             	shl    $0xc,%eax
f0103437:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010343c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010343f:	76 15                	jbe    f0103456 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103441:	8b 45 08             	mov    0x8(%ebp),%eax
f0103444:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010344a:	8d 50 01             	lea    0x1(%eax),%edx
f010344d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103450:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103456:	a1 bc 74 6e f0       	mov    0xf06e74bc,%eax
f010345b:	83 ec 04             	sub    $0x4,%esp
f010345e:	50                   	push   %eax
f010345f:	ff 75 0c             	pushl  0xc(%ebp)
f0103462:	ff 75 08             	pushl  0x8(%ebp)
f0103465:	e8 b2 00 00 00       	call   f010351c <pf_add_env_page>
f010346a:	83 c4 10             	add    $0x10,%esp
f010346d:	e9 a8 00 00 00       	jmp    f010351a <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103472:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103479:	76 19                	jbe    f0103494 <pf_add_empty_env_page+0xa9>
f010347b:	68 8c 45 13 f0       	push   $0xf013458c
f0103480:	68 b2 45 13 f0       	push   $0xf01345b2
f0103485:	68 d1 00 00 00       	push   $0xd1
f010348a:	68 f9 44 13 f0       	push   $0xf01344f9
f010348f:	e8 12 cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103494:	8b 45 08             	mov    0x8(%ebp),%eax
f0103497:	83 c0 64             	add    $0x64,%eax
f010349a:	83 ec 08             	sub    $0x8,%esp
f010349d:	50                   	push   %eax
f010349e:	ff 75 08             	pushl  0x8(%ebp)
f01034a1:	e8 46 06 00 00       	call   f0103aec <get_disk_page_directory>
f01034a6:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ac:	8b 40 64             	mov    0x64(%eax),%eax
f01034af:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034b2:	52                   	push   %edx
f01034b3:	6a 01                	push   $0x1
f01034b5:	ff 75 0c             	pushl  0xc(%ebp)
f01034b8:	50                   	push   %eax
f01034b9:	e8 04 fe ff ff       	call   f01032c2 <get_disk_page_table>
f01034be:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034c7:	c1 ea 0c             	shr    $0xc,%edx
f01034ca:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d0:	c1 e2 02             	shl    $0x2,%edx
f01034d3:	01 d0                	add    %edx,%eax
f01034d5:	8b 00                	mov    (%eax),%eax
f01034d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034dd:	85 c0                	test   %eax,%eax
f01034df:	75 34                	jne    f0103515 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e1:	83 ec 0c             	sub    $0xc,%esp
f01034e4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034e7:	50                   	push   %eax
f01034e8:	e8 2d fc ff ff       	call   f010311a <allocate_disk_frame>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034f3:	75 07                	jne    f01034fc <pf_add_empty_env_page+0x111>
f01034f5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01034fa:	eb 1e                	jmp    f010351a <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01034fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103502:	c1 ea 0c             	shr    $0xc,%edx
f0103505:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010350b:	c1 e2 02             	shl    $0x2,%edx
f010350e:	01 c2                	add    %eax,%edx
f0103510:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103513:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103515:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010351a:	c9                   	leave  
f010351b:	c3                   	ret    

f010351c <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010351c:	55                   	push   %ebp
f010351d:	89 e5                	mov    %esp,%ebp
f010351f:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103522:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103529:	76 19                	jbe    f0103544 <pf_add_env_page+0x28>
f010352b:	68 8c 45 13 f0       	push   $0xf013458c
f0103530:	68 b2 45 13 f0       	push   $0xf01345b2
f0103535:	68 e6 00 00 00       	push   $0xe6
f010353a:	68 f9 44 13 f0       	push   $0xf01344f9
f010353f:	e8 62 cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103544:	8b 45 08             	mov    0x8(%ebp),%eax
f0103547:	83 c0 64             	add    $0x64,%eax
f010354a:	83 ec 08             	sub    $0x8,%esp
f010354d:	50                   	push   %eax
f010354e:	ff 75 08             	pushl  0x8(%ebp)
f0103551:	e8 96 05 00 00       	call   f0103aec <get_disk_page_directory>
f0103556:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103559:	8b 45 08             	mov    0x8(%ebp),%eax
f010355c:	8b 40 64             	mov    0x64(%eax),%eax
f010355f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103562:	52                   	push   %edx
f0103563:	6a 01                	push   $0x1
f0103565:	ff 75 0c             	pushl  0xc(%ebp)
f0103568:	50                   	push   %eax
f0103569:	e8 54 fd ff ff       	call   f01032c2 <get_disk_page_table>
f010356e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103574:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103577:	c1 ea 0c             	shr    $0xc,%edx
f010357a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103580:	c1 e2 02             	shl    $0x2,%edx
f0103583:	01 d0                	add    %edx,%eax
f0103585:	8b 00                	mov    (%eax),%eax
f0103587:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010358a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010358d:	85 c0                	test   %eax,%eax
f010358f:	75 34                	jne    f01035c5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103591:	83 ec 0c             	sub    $0xc,%esp
f0103594:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103597:	50                   	push   %eax
f0103598:	e8 7d fb ff ff       	call   f010311a <allocate_disk_frame>
f010359d:	83 c4 10             	add    $0x10,%esp
f01035a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035a3:	75 07                	jne    f01035ac <pf_add_env_page+0x90>
f01035a5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035aa:	eb 31                	jmp    f01035dd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035af:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035b2:	c1 ea 0c             	shr    $0xc,%edx
f01035b5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035bb:	c1 e2 02             	shl    $0x2,%edx
f01035be:	01 c2                	add    %eax,%edx
f01035c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c8:	83 ec 08             	sub    $0x8,%esp
f01035cb:	ff 75 10             	pushl  0x10(%ebp)
f01035ce:	50                   	push   %eax
f01035cf:	e8 99 f9 ff ff       	call   f0102f6d <write_disk_page>
f01035d4:	83 c4 10             	add    $0x10,%esp
f01035d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035dd:	c9                   	leave  
f01035de:	c3                   	ret    

f01035df <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035df:	55                   	push   %ebp
f01035e0:	89 e5                	mov    %esp,%ebp
f01035e2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035e5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035ec:	76 19                	jbe    f0103607 <pf_update_env_page+0x28>
f01035ee:	68 8c 45 13 f0       	push   $0xf013458c
f01035f3:	68 b2 45 13 f0       	push   $0xf01345b2
f01035f8:	68 08 01 00 00       	push   $0x108
f01035fd:	68 f9 44 13 f0       	push   $0xf01344f9
f0103602:	e8 9f cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103607:	8b 45 08             	mov    0x8(%ebp),%eax
f010360a:	83 c0 64             	add    $0x64,%eax
f010360d:	83 ec 08             	sub    $0x8,%esp
f0103610:	50                   	push   %eax
f0103611:	ff 75 08             	pushl  0x8(%ebp)
f0103614:	e8 d3 04 00 00       	call   f0103aec <get_disk_page_directory>
f0103619:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010361c:	8b 45 08             	mov    0x8(%ebp),%eax
f010361f:	8b 40 64             	mov    0x64(%eax),%eax
f0103622:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103625:	52                   	push   %edx
f0103626:	6a 00                	push   $0x0
f0103628:	ff 75 0c             	pushl  0xc(%ebp)
f010362b:	50                   	push   %eax
f010362c:	e8 91 fc ff ff       	call   f01032c2 <get_disk_page_table>
f0103631:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103637:	85 c0                	test   %eax,%eax
f0103639:	74 29                	je     f0103664 <pf_update_env_page+0x85>
f010363b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363e:	85 c0                	test   %eax,%eax
f0103640:	0f 84 43 01 00 00    	je     f0103789 <pf_update_env_page+0x1aa>
f0103646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103649:	8b 55 0c             	mov    0xc(%ebp),%edx
f010364c:	c1 ea 0c             	shr    $0xc,%edx
f010364f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103655:	c1 e2 02             	shl    $0x2,%edx
f0103658:	01 d0                	add    %edx,%eax
f010365a:	8b 00                	mov    (%eax),%eax
f010365c:	85 c0                	test   %eax,%eax
f010365e:	0f 85 25 01 00 00    	jne    f0103789 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103664:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103667:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010366d:	85 c0                	test   %eax,%eax
f010366f:	79 09                	jns    f010367a <pf_update_env_page+0x9b>
f0103671:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103678:	76 38                	jbe    f01036b2 <pf_update_env_page+0xd3>
f010367a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103684:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103689:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010368c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010368f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103694:	f7 75 f0             	divl   -0x10(%ebp)
f0103697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010369a:	29 d0                	sub    %edx,%eax
f010369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010369f:	0f 87 cd 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
f01036a5:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036ac:	0f 87 c0 00 00 00    	ja     f0103772 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036b8:	83 ec 04             	sub    $0x4,%esp
f01036bb:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036be:	52                   	push   %edx
f01036bf:	ff 75 0c             	pushl  0xc(%ebp)
f01036c2:	50                   	push   %eax
f01036c3:	e8 39 35 00 00       	call   f0106c01 <get_frame_info>
f01036c8:	83 c4 10             	add    $0x10,%esp
f01036cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036d4:	75 52                	jne    f0103728 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036d9:	83 ec 04             	sub    $0x4,%esp
f01036dc:	50                   	push   %eax
f01036dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e0:	ff 75 08             	pushl  0x8(%ebp)
f01036e3:	e8 34 fe ff ff       	call   f010351c <pf_add_env_page>
f01036e8:	83 c4 10             	add    $0x10,%esp
f01036eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036ee:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036f2:	75 17                	jne    f010370b <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036f4:	83 ec 04             	sub    $0x4,%esp
f01036f7:	68 c8 45 13 f0       	push   $0xf01345c8
f01036fc:	68 1d 01 00 00       	push   $0x11d
f0103701:	68 f9 44 13 f0       	push   $0xf01344f9
f0103706:	e8 9b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010370b:	8b 45 08             	mov    0x8(%ebp),%eax
f010370e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103714:	8d 50 01             	lea    0x1(%eax),%edx
f0103717:	8b 45 08             	mov    0x8(%ebp),%eax
f010371a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103723:	e9 ff 00 00 00       	jmp    f0103827 <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103728:	83 ec 04             	sub    $0x4,%esp
f010372b:	6a 00                	push   $0x0
f010372d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103730:	ff 75 08             	pushl  0x8(%ebp)
f0103733:	e8 b3 fc ff ff       	call   f01033eb <pf_add_empty_env_page>
f0103738:	83 c4 10             	add    $0x10,%esp
f010373b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010373e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103742:	75 17                	jne    f010375b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103744:	83 ec 04             	sub    $0x4,%esp
f0103747:	68 f4 45 13 f0       	push   $0xf01345f4
f010374c:	68 28 01 00 00       	push   $0x128
f0103751:	68 f9 44 13 f0       	push   $0xf01344f9
f0103756:	e8 4b ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010375b:	8b 45 08             	mov    0x8(%ebp),%eax
f010375e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103764:	8d 50 01             	lea    0x1(%eax),%edx
f0103767:	8b 45 08             	mov    0x8(%ebp),%eax
f010376a:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103770:	eb 17                	jmp    f0103789 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103772:	83 ec 04             	sub    $0x4,%esp
f0103775:	68 40 46 13 f0       	push   $0xf0134640
f010377a:	68 2f 01 00 00       	push   $0x12f
f010377f:	68 f9 44 13 f0       	push   $0xf01344f9
f0103784:	e8 1d ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 24 fb ff ff       	call   f01032c2 <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037a7:	c1 ea 0c             	shr    $0xc,%edx
f01037aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b0:	c1 e2 02             	shl    $0x2,%edx
f01037b3:	01 d0                	add    %edx,%eax
f01037b5:	8b 00                	mov    (%eax),%eax
f01037b7:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037ba:	83 ec 0c             	sub    $0xc,%esp
f01037bd:	ff 75 10             	pushl  0x10(%ebp)
f01037c0:	e8 20 f7 ff ff       	call   f0102ee5 <to_physical_address>
f01037c5:	83 c4 10             	add    $0x10,%esp
f01037c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037ce:	c1 e8 0c             	shr    $0xc,%eax
f01037d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037d4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01037d9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037dc:	72 17                	jb     f01037f5 <pf_update_env_page+0x216>
f01037de:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e1:	68 5c 45 13 f0       	push   $0xf013455c
f01037e6:	68 47 01 00 00       	push   $0x147
f01037eb:	68 f9 44 13 f0       	push   $0xf01344f9
f01037f0:	e8 b1 c9 ff ff       	call   f01001a6 <_panic>
f01037f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037f8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01037fd:	83 ec 08             	sub    $0x8,%esp
f0103800:	50                   	push   %eax
f0103801:	ff 75 e0             	pushl  -0x20(%ebp)
f0103804:	e8 64 f7 ff ff       	call   f0102f6d <write_disk_page>
f0103809:	83 c4 10             	add    $0x10,%esp
f010380c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010380f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103812:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103818:	8d 50 01             	lea    0x1(%eax),%edx
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f0103824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103827:	c9                   	leave  
f0103828:	c3                   	ret    

f0103829 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103829:	55                   	push   %ebp
f010382a:	89 e5                	mov    %esp,%ebp
f010382c:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010382f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103838:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010383d:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103840:	8b 45 08             	mov    0x8(%ebp),%eax
f0103843:	8b 40 64             	mov    0x64(%eax),%eax
f0103846:	85 c0                	test   %eax,%eax
f0103848:	75 0a                	jne    f0103854 <pf_read_env_page+0x2b>
f010384a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010384f:	e9 90 00 00 00       	jmp    f01038e4 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103854:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103857:	8b 45 08             	mov    0x8(%ebp),%eax
f010385a:	8b 40 64             	mov    0x64(%eax),%eax
f010385d:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103860:	51                   	push   %ecx
f0103861:	6a 00                	push   $0x0
f0103863:	52                   	push   %edx
f0103864:	50                   	push   %eax
f0103865:	e8 58 fa ff ff       	call   f01032c2 <get_disk_page_table>
f010386a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010386d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	75 07                	jne    f010387b <pf_read_env_page+0x52>
f0103874:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103879:	eb 69                	jmp    f01038e4 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010387b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010387e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103881:	c1 ea 0c             	shr    $0xc,%edx
f0103884:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010388a:	c1 e2 02             	shl    $0x2,%edx
f010388d:	01 d0                	add    %edx,%eax
f010388f:	8b 00                	mov    (%eax),%eax
f0103891:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103898:	75 07                	jne    f01038a1 <pf_read_env_page+0x78>
f010389a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010389f:	eb 43                	jmp    f01038e4 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a1:	83 ec 08             	sub    $0x8,%esp
f01038a4:	ff 75 0c             	pushl  0xc(%ebp)
f01038a7:	ff 75 f0             	pushl  -0x10(%ebp)
f01038aa:	e8 8f f6 ff ff       	call   f0102f3e <read_disk_page>
f01038af:	83 c4 10             	add    $0x10,%esp
f01038b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038be:	6a 40                	push   $0x40
f01038c0:	6a 00                	push   $0x0
f01038c2:	52                   	push   %edx
f01038c3:	50                   	push   %eax
f01038c4:	e8 e3 3b 00 00       	call   f01074ac <pt_set_page_permissions>
f01038c9:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cf:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038d5:	8d 50 01             	lea    0x1(%eax),%edx
f01038d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038db:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038e4:	c9                   	leave  
f01038e5:	c3                   	ret    

f01038e6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038e6:	55                   	push   %ebp
f01038e7:	89 e5                	mov    %esp,%ebp
f01038e9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ef:	8b 40 64             	mov    0x64(%eax),%eax
f01038f2:	85 c0                	test   %eax,%eax
f01038f4:	74 62                	je     f0103958 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 b7 f9 ff ff       	call   f01032c2 <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103911:	85 c0                	test   %eax,%eax
f0103913:	74 46                	je     f010395b <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103915:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103918:	8b 55 0c             	mov    0xc(%ebp),%edx
f010391b:	c1 ea 0c             	shr    $0xc,%edx
f010391e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103924:	c1 e2 02             	shl    $0x2,%edx
f0103927:	01 d0                	add    %edx,%eax
f0103929:	8b 00                	mov    (%eax),%eax
f010392b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103931:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103934:	c1 ea 0c             	shr    $0xc,%edx
f0103937:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010393d:	c1 e2 02             	shl    $0x2,%edx
f0103940:	01 d0                	add    %edx,%eax
f0103942:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103948:	83 ec 0c             	sub    $0xc,%esp
f010394b:	ff 75 f4             	pushl  -0xc(%ebp)
f010394e:	e8 8e f8 ff ff       	call   f01031e1 <free_disk_frame>
f0103953:	83 c4 10             	add    $0x10,%esp
f0103956:	eb 04                	jmp    f010395c <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103958:	90                   	nop
f0103959:	eb 01                	jmp    f010395c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010395b:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010395c:	c9                   	leave  
f010395d:	c3                   	ret    

f010395e <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010395e:	55                   	push   %ebp
f010395f:	89 e5                	mov    %esp,%ebp
f0103961:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103964:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010396b:	e9 ee 00 00 00       	jmp    f0103a5e <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103970:	8b 45 08             	mov    0x8(%ebp),%eax
f0103973:	8b 40 64             	mov    0x64(%eax),%eax
f0103976:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103979:	c1 e2 02             	shl    $0x2,%edx
f010397c:	01 d0                	add    %edx,%eax
f010397e:	8b 00                	mov    (%eax),%eax
f0103980:	83 e0 01             	and    $0x1,%eax
f0103983:	85 c0                	test   %eax,%eax
f0103985:	0f 84 cf 00 00 00    	je     f0103a5a <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010398b:	8b 45 08             	mov    0x8(%ebp),%eax
f010398e:	8b 40 64             	mov    0x64(%eax),%eax
f0103991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103994:	c1 e2 02             	shl    $0x2,%edx
f0103997:	01 d0                	add    %edx,%eax
f0103999:	8b 00                	mov    (%eax),%eax
f010399b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039ac:	c1 e8 0c             	shr    $0xc,%eax
f01039af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039b2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01039b7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039ba:	72 17                	jb     f01039d3 <pf_free_env+0x75>
f01039bc:	ff 75 e8             	pushl  -0x18(%ebp)
f01039bf:	68 5c 45 13 f0       	push   $0xf013455c
f01039c4:	68 96 01 00 00       	push   $0x196
f01039c9:	68 f9 44 13 f0       	push   $0xf01344f9
f01039ce:	e8 d3 c7 ff ff       	call   f01001a6 <_panic>
f01039d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039db:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039e5:	eb 3a                	jmp    f0103a21 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039f4:	01 d0                	add    %edx,%eax
f01039f6:	8b 00                	mov    (%eax),%eax
f01039f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01039fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a08:	01 d0                	add    %edx,%eax
f0103a0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a10:	83 ec 0c             	sub    $0xc,%esp
f0103a13:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a16:	e8 c6 f7 ff ff       	call   f01031e1 <free_disk_frame>
f0103a1b:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a1e:	ff 45 f0             	incl   -0x10(%ebp)
f0103a21:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a28:	76 bd                	jbe    f01039e7 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a2d:	8b 40 64             	mov    0x64(%eax),%eax
f0103a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a33:	c1 e2 02             	shl    $0x2,%edx
f0103a36:	01 d0                	add    %edx,%eax
f0103a38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a3e:	83 ec 0c             	sub    $0xc,%esp
f0103a41:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a44:	e8 af f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a49:	83 c4 10             	add    $0x10,%esp
f0103a4c:	83 ec 0c             	sub    $0xc,%esp
f0103a4f:	50                   	push   %eax
f0103a50:	e8 e4 2e 00 00       	call   f0106939 <decrement_references>
f0103a55:	83 c4 10             	add    $0x10,%esp
f0103a58:	eb 01                	jmp    f0103a5b <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a5a:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a5b:	ff 45 f4             	incl   -0xc(%ebp)
f0103a5e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a65:	0f 86 05 ff ff ff    	jbe    f0103970 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6e:	8b 40 68             	mov    0x68(%eax),%eax
f0103a71:	83 ec 0c             	sub    $0xc,%esp
f0103a74:	50                   	push   %eax
f0103a75:	e8 7e f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103a7a:	83 c4 10             	add    $0x10,%esp
f0103a7d:	83 ec 0c             	sub    $0xc,%esp
f0103a80:	50                   	push   %eax
f0103a81:	e8 b3 2e 00 00       	call   f0106939 <decrement_references>
f0103a86:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a8c:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a96:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aa3:	85 c0                	test   %eax,%eax
f0103aa5:	74 42                	je     f0103ae9 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aa7:	83 ec 0c             	sub    $0xc,%esp
f0103aaa:	ff 75 08             	pushl  0x8(%ebp)
f0103aad:	e8 ee 03 00 00       	call   f0103ea0 <__pf_remove_env_all_tables>
f0103ab2:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103ab5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab8:	8b 40 70             	mov    0x70(%eax),%eax
f0103abb:	83 ec 0c             	sub    $0xc,%esp
f0103abe:	50                   	push   %eax
f0103abf:	e8 34 f4 ff ff       	call   f0102ef8 <to_frame_info>
f0103ac4:	83 c4 10             	add    $0x10,%esp
f0103ac7:	83 ec 0c             	sub    $0xc,%esp
f0103aca:	50                   	push   %eax
f0103acb:	e8 69 2e 00 00       	call   f0106939 <decrement_references>
f0103ad0:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103add:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103ae7:	eb 01                	jmp    f0103aea <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103ae9:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103aea:	c9                   	leave  
f0103aeb:	c3                   	ret    

f0103aec <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103aec:	55                   	push   %ebp
f0103aed:	89 e5                	mov    %esp,%ebp
f0103aef:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af5:	8b 50 64             	mov    0x64(%eax),%edx
f0103af8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103afb:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b00:	8b 00                	mov    (%eax),%eax
f0103b02:	85 c0                	test   %eax,%eax
f0103b04:	0f 85 aa 00 00 00    	jne    f0103bb4 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b0a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b11:	83 ec 0c             	sub    $0xc,%esp
f0103b14:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b17:	50                   	push   %eax
f0103b18:	e8 8d 2c 00 00       	call   f01067aa <allocate_frame>
f0103b1d:	83 c4 10             	add    $0x10,%esp
f0103b20:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b27:	79 08                	jns    f0103b31 <get_disk_page_directory+0x45>
				return r;
f0103b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b2c:	e9 88 00 00 00       	jmp    f0103bb9 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b34:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3d:	83 ec 0c             	sub    $0xc,%esp
f0103b40:	50                   	push   %eax
f0103b41:	e8 9f f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b46:	83 c4 10             	add    $0x10,%esp
f0103b49:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b4f:	c1 e8 0c             	shr    $0xc,%eax
f0103b52:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b55:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103b5a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b5d:	72 17                	jb     f0103b76 <get_disk_page_directory+0x8a>
f0103b5f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b62:	68 5c 45 13 f0       	push   $0xf013455c
f0103b67:	68 ee 01 00 00       	push   $0x1ee
f0103b6c:	68 f9 44 13 f0       	push   $0xf01344f9
f0103b71:	e8 30 c6 ff ff       	call   f01001a6 <_panic>
f0103b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b79:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b7e:	89 c2                	mov    %eax,%edx
f0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b83:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b88:	83 ec 0c             	sub    $0xc,%esp
f0103b8b:	50                   	push   %eax
f0103b8c:	e8 54 f3 ff ff       	call   f0102ee5 <to_physical_address>
f0103b91:	83 c4 10             	add    $0x10,%esp
f0103b94:	89 c2                	mov    %eax,%edx
f0103b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b99:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b9f:	8b 00                	mov    (%eax),%eax
f0103ba1:	83 ec 04             	sub    $0x4,%esp
f0103ba4:	68 00 10 00 00       	push   $0x1000
f0103ba9:	6a 00                	push   $0x0
f0103bab:	50                   	push   %eax
f0103bac:	e8 a2 c6 02 00       	call   f0130253 <memset>
f0103bb1:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bb9:	c9                   	leave  
f0103bba:	c3                   	ret    

f0103bbb <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bbb:	55                   	push   %ebp
f0103bbc:	89 e5                	mov    %esp,%ebp
f0103bbe:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bcf:	e9 a6 00 00 00       	jmp    f0103c7a <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd7:	8b 40 64             	mov    0x64(%eax),%eax
f0103bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bdd:	c1 e2 02             	shl    $0x2,%edx
f0103be0:	01 d0                	add    %edx,%eax
f0103be2:	8b 00                	mov    (%eax),%eax
f0103be4:	83 e0 01             	and    $0x1,%eax
f0103be7:	85 c0                	test   %eax,%eax
f0103be9:	0f 84 87 00 00 00    	je     f0103c76 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf2:	8b 40 64             	mov    0x64(%eax),%eax
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	c1 e2 02             	shl    $0x2,%edx
f0103bfb:	01 d0                	add    %edx,%eax
f0103bfd:	8b 00                	mov    (%eax),%eax
f0103bff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c10:	c1 e8 0c             	shr    $0xc,%eax
f0103c13:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c16:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103c1b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c1e:	72 17                	jb     f0103c37 <pf_calculate_allocated_pages+0x7c>
f0103c20:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c23:	68 5c 45 13 f0       	push   $0xf013455c
f0103c28:	68 0e 02 00 00       	push   $0x20e
f0103c2d:	68 f9 44 13 f0       	push   $0xf01344f9
f0103c32:	e8 6f c5 ff ff       	call   f01001a6 <_panic>
f0103c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c3a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c49:	eb 20                	jmp    f0103c6b <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c4e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c58:	01 d0                	add    %edx,%eax
f0103c5a:	8b 00                	mov    (%eax),%eax
f0103c5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c5f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c63:	74 03                	je     f0103c68 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c65:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c68:	ff 45 ec             	incl   -0x14(%ebp)
f0103c6b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c72:	76 d7                	jbe    f0103c4b <pf_calculate_allocated_pages+0x90>
f0103c74:	eb 01                	jmp    f0103c77 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c76:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c77:	ff 45 f4             	incl   -0xc(%ebp)
f0103c7a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c81:	0f 86 4d ff ff ff    	jbe    f0103bd4 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c87:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c8a:	c9                   	leave  
f0103c8b:	c3                   	ret    

f0103c8c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c8c:	55                   	push   %ebp
f0103c8d:	89 e5                	mov    %esp,%ebp
f0103c8f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c92:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103c99:	a1 14 75 6e f0       	mov    0xf06e7514,%eax
f0103c9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca1:	eb 0b                	jmp    f0103cae <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103ca3:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca6:	a1 1c 75 6e f0       	mov    0xf06e751c,%eax
f0103cab:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cae:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cb2:	74 07                	je     f0103cbb <pf_calculate_free_frames+0x2f>
f0103cb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cb7:	8b 00                	mov    (%eax),%eax
f0103cb9:	eb 05                	jmp    f0103cc0 <pf_calculate_free_frames+0x34>
f0103cbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc0:	a3 1c 75 6e f0       	mov    %eax,0xf06e751c
f0103cc5:	a1 1c 75 6e f0       	mov    0xf06e751c,%eax
f0103cca:	85 c0                	test   %eax,%eax
f0103ccc:	75 d5                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
f0103cce:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cd2:	75 cf                	jne    f0103ca3 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cd4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cd7:	c9                   	leave  
f0103cd8:	c3                   	ret    

f0103cd9 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103cd9:	55                   	push   %ebp
f0103cda:	89 e5                	mov    %esp,%ebp
f0103cdc:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103cdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ce2:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ce8:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ced:	8b 00                	mov    (%eax),%eax
f0103cef:	85 c0                	test   %eax,%eax
f0103cf1:	0f 85 aa 00 00 00    	jne    f0103da1 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cf7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103cfe:	83 ec 0c             	sub    $0xc,%esp
f0103d01:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d04:	50                   	push   %eax
f0103d05:	e8 a0 2a 00 00       	call   f01067aa <allocate_frame>
f0103d0a:	83 c4 10             	add    $0x10,%esp
f0103d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d14:	79 08                	jns    f0103d1e <get_disk_table_directory+0x45>
				return r;
f0103d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d19:	e9 88 00 00 00       	jmp    f0103da6 <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d21:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d2a:	83 ec 0c             	sub    $0xc,%esp
f0103d2d:	50                   	push   %eax
f0103d2e:	e8 b2 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d33:	83 c4 10             	add    $0x10,%esp
f0103d36:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d3c:	c1 e8 0c             	shr    $0xc,%eax
f0103d3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d42:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0103d47:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d4a:	72 17                	jb     f0103d63 <get_disk_table_directory+0x8a>
f0103d4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d4f:	68 5c 45 13 f0       	push   $0xf013455c
f0103d54:	68 4c 02 00 00       	push   $0x24c
f0103d59:	68 f9 44 13 f0       	push   $0xf01344f9
f0103d5e:	e8 43 c4 ff ff       	call   f01001a6 <_panic>
f0103d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d6b:	89 c2                	mov    %eax,%edx
f0103d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d70:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d75:	83 ec 0c             	sub    $0xc,%esp
f0103d78:	50                   	push   %eax
f0103d79:	e8 67 f1 ff ff       	call   f0102ee5 <to_physical_address>
f0103d7e:	83 c4 10             	add    $0x10,%esp
f0103d81:	89 c2                	mov    %eax,%edx
f0103d83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d86:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	83 ec 04             	sub    $0x4,%esp
f0103d91:	68 00 10 00 00       	push   $0x1000
f0103d96:	6a 00                	push   $0x0
f0103d98:	50                   	push   %eax
f0103d99:	e8 b5 c4 02 00       	call   f0130253 <memset>
f0103d9e:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103da6:	c9                   	leave  
f0103da7:	c3                   	ret    

f0103da8 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103da8:	55                   	push   %ebp
f0103da9:	89 e5                	mov    %esp,%ebp
f0103dab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103dae:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103db5:	76 19                	jbe    f0103dd0 <__pf_write_env_table+0x28>
f0103db7:	68 8c 45 13 f0       	push   $0xf013458c
f0103dbc:	68 b2 45 13 f0       	push   $0xf01345b2
f0103dc1:	68 5a 02 00 00       	push   $0x25a
f0103dc6:	68 f9 44 13 f0       	push   $0xf01344f9
f0103dcb:	e8 d6 c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd3:	83 c0 6c             	add    $0x6c,%eax
f0103dd6:	83 ec 08             	sub    $0x8,%esp
f0103dd9:	50                   	push   %eax
f0103dda:	ff 75 08             	pushl  0x8(%ebp)
f0103ddd:	e8 f7 fe ff ff       	call   f0103cd9 <get_disk_table_directory>
f0103de2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103deb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103dee:	c1 ea 16             	shr    $0x16,%edx
f0103df1:	c1 e2 02             	shl    $0x2,%edx
f0103df4:	01 d0                	add    %edx,%eax
f0103df6:	8b 00                	mov    (%eax),%eax
f0103df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dfe:	85 c0                	test   %eax,%eax
f0103e00:	75 31                	jne    f0103e33 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e02:	83 ec 0c             	sub    $0xc,%esp
f0103e05:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e08:	50                   	push   %eax
f0103e09:	e8 0c f3 ff ff       	call   f010311a <allocate_disk_frame>
f0103e0e:	83 c4 10             	add    $0x10,%esp
f0103e11:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e14:	75 07                	jne    f0103e1d <__pf_write_env_table+0x75>
f0103e16:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e1b:	eb 2e                	jmp    f0103e4b <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e20:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e23:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e26:	c1 ea 16             	shr    $0x16,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 c2                	add    %eax,%edx
f0103e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e31:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 ec 08             	sub    $0x8,%esp
f0103e39:	ff 75 10             	pushl  0x10(%ebp)
f0103e3c:	50                   	push   %eax
f0103e3d:	e8 2b f1 ff ff       	call   f0102f6d <write_disk_page>
f0103e42:	83 c4 10             	add    $0x10,%esp
f0103e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e4b:	c9                   	leave  
f0103e4c:	c3                   	ret    

f0103e4d <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e4d:	55                   	push   %ebp
f0103e4e:	89 e5                	mov    %esp,%ebp
f0103e50:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e59:	85 c0                	test   %eax,%eax
f0103e5b:	75 07                	jne    f0103e64 <__pf_read_env_table+0x17>
f0103e5d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e62:	eb 3a                	jmp    f0103e9e <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e67:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6d:	c1 ea 16             	shr    $0x16,%edx
f0103e70:	c1 e2 02             	shl    $0x2,%edx
f0103e73:	01 d0                	add    %edx,%eax
f0103e75:	8b 00                	mov    (%eax),%eax
f0103e77:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e7e:	75 07                	jne    f0103e87 <__pf_read_env_table+0x3a>
f0103e80:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e85:	eb 17                	jmp    f0103e9e <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e87:	83 ec 08             	sub    $0x8,%esp
f0103e8a:	ff 75 10             	pushl  0x10(%ebp)
f0103e8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e90:	e8 a9 f0 ff ff       	call   f0102f3e <read_disk_page>
f0103e95:	83 c4 10             	add    $0x10,%esp
f0103e98:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103e9e:	c9                   	leave  
f0103e9f:	c3                   	ret    

f0103ea0 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea0:	55                   	push   %ebp
f0103ea1:	89 e5                	mov    %esp,%ebp
f0103ea3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eac:	85 c0                	test   %eax,%eax
f0103eae:	74 4c                	je     f0103efc <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103eb7:	eb 38                	jmp    f0103ef1 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103eb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ebc:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ebf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ec2:	c1 e2 02             	shl    $0x2,%edx
f0103ec5:	01 d0                	add    %edx,%eax
f0103ec7:	8b 00                	mov    (%eax),%eax
f0103ec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ecc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ecf:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ed2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ed5:	c1 e2 02             	shl    $0x2,%edx
f0103ed8:	01 d0                	add    %edx,%eax
f0103eda:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee0:	83 ec 0c             	sub    $0xc,%esp
f0103ee3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ee6:	e8 f6 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103eeb:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eee:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ef8:	76 bf                	jbe    f0103eb9 <__pf_remove_env_all_tables+0x19>
f0103efa:	eb 01                	jmp    f0103efd <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103efc:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103efd:	c9                   	leave  
f0103efe:	c3                   	ret    

f0103eff <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103eff:	55                   	push   %ebp
f0103f00:	89 e5                	mov    %esp,%ebp
f0103f02:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f09:	75 10                	jne    f0103f1b <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f0b:	83 ec 0c             	sub    $0xc,%esp
f0103f0e:	68 bc 46 13 f0       	push   $0xf01346bc
f0103f13:	e8 15 cd ff ff       	call   f0100c2d <cprintf>
f0103f18:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f1e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f21:	85 c0                	test   %eax,%eax
f0103f23:	74 3d                	je     f0103f62 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2e:	c1 ea 16             	shr    $0x16,%edx
f0103f31:	c1 e2 02             	shl    $0x2,%edx
f0103f34:	01 d0                	add    %edx,%eax
f0103f36:	8b 00                	mov    (%eax),%eax
f0103f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f41:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f44:	c1 ea 16             	shr    $0x16,%edx
f0103f47:	c1 e2 02             	shl    $0x2,%edx
f0103f4a:	01 d0                	add    %edx,%eax
f0103f4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f52:	83 ec 0c             	sub    $0xc,%esp
f0103f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f58:	e8 84 f2 ff ff       	call   f01031e1 <free_disk_frame>
f0103f5d:	83 c4 10             	add    $0x10,%esp
f0103f60:	eb 01                	jmp    f0103f63 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f62:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f63:	c9                   	leave  
f0103f64:	c3                   	ret    

f0103f65 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f65:	55                   	push   %ebp
f0103f66:	89 e5                	mov    %esp,%ebp
f0103f68:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f6b:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f72:	eb 1f                	jmp    f0103f93 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	6a 08                	push   $0x8
f0103f7c:	ff 75 08             	pushl  0x8(%ebp)
f0103f7f:	50                   	push   %eax
f0103f80:	e8 73 c9 02 00       	call   f01308f8 <ide_write>
f0103f85:	83 c4 10             	add    $0x10,%esp
f0103f88:	85 c0                	test   %eax,%eax
f0103f8a:	75 12                	jne    f0103f9e <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f8c:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f93:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103f9a:	7e d8                	jle    f0103f74 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9c:	eb 01                	jmp    f0103f9f <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103f9e:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103f9f:	90                   	nop
f0103fa0:	c9                   	leave  
f0103fa1:	c3                   	ret    

f0103fa2 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103fa2:	55                   	push   %ebp
f0103fa3:	89 e5                	mov    %esp,%ebp
f0103fa5:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fab:	0f b6 c0             	movzbl %al,%eax
f0103fae:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fb5:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fb8:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fbb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fbe:	ee                   	out    %al,(%dx)
f0103fbf:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fc6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fc9:	89 c2                	mov    %eax,%edx
f0103fcb:	ec                   	in     (%dx),%al
f0103fcc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fcf:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fd2:	0f b6 c0             	movzbl %al,%eax
}
f0103fd5:	c9                   	leave  
f0103fd6:	c3                   	ret    

f0103fd7 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fd7:	55                   	push   %ebp
f0103fd8:	89 e5                	mov    %esp,%ebp
f0103fda:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe0:	0f b6 c0             	movzbl %al,%eax
f0103fe3:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fea:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fed:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ff3:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ff7:	0f b6 c0             	movzbl %al,%eax
f0103ffa:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104001:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104004:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104007:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010400a:	ee                   	out    %al,(%dx)
}
f010400b:	90                   	nop
f010400c:	c9                   	leave  
f010400d:	c3                   	ret    

f010400e <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010400e:	55                   	push   %ebp
f010400f:	89 e5                	mov    %esp,%ebp
f0104011:	53                   	push   %ebx
f0104012:	83 ec 24             	sub    $0x24,%esp
f0104015:	8b 45 08             	mov    0x8(%ebp),%eax
f0104018:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010401b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104022:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104026:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010402c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010402d:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104031:	77 48                	ja     f010407b <kclock_start+0x6d>
f0104033:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010403a:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010403e:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104044:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104045:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104049:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010404e:	99                   	cltd   
f010404f:	f7 fb                	idiv   %ebx
f0104051:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104057:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010405b:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104060:	99                   	cltd   
f0104061:	f7 fb                	idiv   %ebx
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	89 c8                	mov    %ecx,%eax
f0104067:	99                   	cltd   
f0104068:	f7 fb                	idiv   %ebx
f010406a:	0f b7 c0             	movzwl %ax,%eax
f010406d:	83 ec 0c             	sub    $0xc,%esp
f0104070:	50                   	push   %eax
f0104071:	e8 b8 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104076:	83 c4 10             	add    $0x10,%esp
f0104079:	eb 13                	jmp    f010408e <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010407b:	6a 35                	push   $0x35
f010407d:	68 e0 46 13 f0       	push   $0xf01346e0
f0104082:	6a 33                	push   $0x33
f0104084:	68 3c 47 13 f0       	push   $0xf013473c
f0104089:	e8 18 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010408e:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0104094:	0f b7 c0             	movzwl %ax,%eax
f0104097:	25 fe ff 00 00       	and    $0xfffe,%eax
f010409c:	83 ec 0c             	sub    $0xc,%esp
f010409f:	50                   	push   %eax
f01040a0:	e8 2d 1b 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040a5:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040a8:	90                   	nop
f01040a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040ac:	c9                   	leave  
f01040ad:	c3                   	ret    

f01040ae <kclock_stop>:

void
kclock_stop(void)
{
f01040ae:	55                   	push   %ebp
f01040af:	89 e5                	mov    %esp,%ebp
f01040b1:	83 ec 18             	sub    $0x18,%esp
f01040b4:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040bb:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040bf:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040c5:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040c6:	83 ec 0c             	sub    $0xc,%esp
f01040c9:	68 ff ff 00 00       	push   $0xffff
f01040ce:	e8 ff 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f01040d3:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040d6:	90                   	nop
f01040d7:	c9                   	leave  
f01040d8:	c3                   	ret    

f01040d9 <kclock_resume>:

void
kclock_resume(void)
{
f01040d9:	55                   	push   %ebp
f01040da:	89 e5                	mov    %esp,%ebp
f01040dc:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040df:	e8 8c 01 00 00       	call   f0104270 <kclock_read_cnt0>
f01040e4:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040e8:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040ed:	77 06                	ja     f01040f5 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040ef:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040f5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01040f9:	83 e0 01             	and    $0x1,%eax
f01040fc:	66 85 c0             	test   %ax,%ax
f01040ff:	74 09                	je     f010410a <kclock_resume+0x31>
		cnt0++;
f0104101:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104105:	40                   	inc    %eax
f0104106:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010410a:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104111:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104115:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104118:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010411b:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010411c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	50                   	push   %eax
f0104124:	e8 05 01 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104129:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010412c:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0104132:	0f b7 c0             	movzwl %ax,%eax
f0104135:	25 fe ff 00 00       	and    $0xfffe,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 8f 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0104143:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104146:	90                   	nop
f0104147:	c9                   	leave  
f0104148:	c3                   	ret    

f0104149 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104149:	55                   	push   %ebp
f010414a:	89 e5                	mov    %esp,%ebp
f010414c:	83 ec 28             	sub    $0x28,%esp
f010414f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104152:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104155:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010415c:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104160:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104163:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104166:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104167:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010416b:	83 ec 0c             	sub    $0xc,%esp
f010416e:	50                   	push   %eax
f010416f:	e8 ba 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104174:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104177:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f010417d:	0f b7 c0             	movzwl %ax,%eax
f0104180:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104185:	83 ec 0c             	sub    $0xc,%esp
f0104188:	50                   	push   %eax
f0104189:	e8 44 1a 00 00       	call   f0105bd2 <irq_setmask_8259A>
f010418e:	83 c4 10             	add    $0x10,%esp

}
f0104191:	90                   	nop
f0104192:	c9                   	leave  
f0104193:	c3                   	ret    

f0104194 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104194:	55                   	push   %ebp
f0104195:	89 e5                	mov    %esp,%ebp
f0104197:	53                   	push   %ebx
f0104198:	83 ec 24             	sub    $0x24,%esp
f010419b:	8b 45 08             	mov    0x8(%ebp),%eax
f010419e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a1:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041a5:	77 6c                	ja     f0104213 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041a7:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041ab:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b0:	99                   	cltd   
f01041b1:	f7 fb                	idiv   %ebx
f01041b3:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041b9:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041bd:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041c2:	99                   	cltd   
f01041c3:	f7 fb                	idiv   %ebx
f01041c5:	89 c3                	mov    %eax,%ebx
f01041c7:	89 c8                	mov    %ecx,%eax
f01041c9:	99                   	cltd   
f01041ca:	f7 fb                	idiv   %ebx
f01041cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041d2:	25 01 00 00 80       	and    $0x80000001,%eax
f01041d7:	85 c0                	test   %eax,%eax
f01041d9:	79 05                	jns    f01041e0 <kclock_set_quantum+0x4c>
f01041db:	48                   	dec    %eax
f01041dc:	83 c8 fe             	or     $0xfffffffe,%eax
f01041df:	40                   	inc    %eax
f01041e0:	83 f8 01             	cmp    $0x1,%eax
f01041e3:	75 03                	jne    f01041e8 <kclock_set_quantum+0x54>
			cnt++;
f01041e5:	ff 45 f4             	incl   -0xc(%ebp)
f01041e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041f9:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01041fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041fd:	0f b7 c0             	movzwl %ax,%eax
f0104200:	83 ec 0c             	sub    $0xc,%esp
f0104203:	50                   	push   %eax
f0104204:	e8 25 00 00 00       	call   f010422e <kclock_write_cnt0_LSB_first>
f0104209:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010420c:	e8 9d fe ff ff       	call   f01040ae <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104211:	eb 16                	jmp    f0104229 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104213:	6a 35                	push   $0x35
f0104215:	68 e0 46 13 f0       	push   $0xf01346e0
f010421a:	68 c9 00 00 00       	push   $0xc9
f010421f:	68 3c 47 13 f0       	push   $0xf013473c
f0104224:	e8 7d bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104229:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010422c:	c9                   	leave  
f010422d:	c3                   	ret    

f010422e <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010422e:	55                   	push   %ebp
f010422f:	89 e5                	mov    %esp,%ebp
f0104231:	83 ec 14             	sub    $0x14,%esp
f0104234:	8b 45 08             	mov    0x8(%ebp),%eax
f0104237:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010423b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010423e:	0f b6 c0             	movzbl %al,%eax
f0104241:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104248:	88 45 f6             	mov    %al,-0xa(%ebp)
f010424b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010424e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104251:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104252:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104255:	66 c1 e8 08          	shr    $0x8,%ax
f0104259:	0f b6 c0             	movzbl %al,%eax
f010425c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104263:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104266:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104269:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010426c:	ee                   	out    %al,(%dx)
}
f010426d:	90                   	nop
f010426e:	c9                   	leave  
f010426f:	c3                   	ret    

f0104270 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104270:	55                   	push   %ebp
f0104271:	89 e5                	mov    %esp,%ebp
f0104273:	83 ec 20             	sub    $0x20,%esp
f0104276:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010427d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104280:	89 c2                	mov    %eax,%edx
f0104282:	ec                   	in     (%dx),%al
f0104283:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104286:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104289:	88 45 ff             	mov    %al,-0x1(%ebp)
f010428c:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104296:	89 c2                	mov    %eax,%edx
f0104298:	ec                   	in     (%dx),%al
f0104299:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010429c:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010429f:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042a2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042a6:	c1 e0 08             	shl    $0x8,%eax
f01042a9:	89 c2                	mov    %eax,%edx
f01042ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042af:	09 d0                	or     %edx,%eax
f01042b1:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042b8:	c9                   	leave  
f01042b9:	c3                   	ret    

f01042ba <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042ba:	55                   	push   %ebp
f01042bb:	89 e5                	mov    %esp,%ebp
f01042bd:	83 ec 30             	sub    $0x30,%esp
f01042c0:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042ca:	89 c2                	mov    %eax,%edx
f01042cc:	ec                   	in     (%dx),%al
f01042cd:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d0:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042d3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042d6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042dd:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e1:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042e7:	ee                   	out    %al,(%dx)
f01042e8:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042f2:	89 c2                	mov    %eax,%edx
f01042f4:	ec                   	in     (%dx),%al
f01042f5:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01042f8:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042fb:	88 45 f3             	mov    %al,-0xd(%ebp)
f01042fe:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104305:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104308:	89 c2                	mov    %eax,%edx
f010430a:	ec                   	in     (%dx),%al
f010430b:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010430e:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104311:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104314:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104318:	c1 e0 08             	shl    $0x8,%eax
f010431b:	89 c2                	mov    %eax,%edx
f010431d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104321:	09 d0                	or     %edx,%eax
f0104323:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104327:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010432b:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104332:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104335:	8a 45 df             	mov    -0x21(%ebp),%al
f0104338:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010433b:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010433c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010433f:	c9                   	leave  
f0104340:	c3                   	ret    

f0104341 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104341:	55                   	push   %ebp
f0104342:	89 e5                	mov    %esp,%ebp
f0104344:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f0104349:	85 c0                	test   %eax,%eax
f010434b:	75 07                	jne    f0104354 <isSchedMethodRR+0x13>
f010434d:	b8 01 00 00 00       	mov    $0x1,%eax
f0104352:	eb 05                	jmp    f0104359 <isSchedMethodRR+0x18>
f0104354:	b8 00 00 00 00       	mov    $0x0,%eax
f0104359:	5d                   	pop    %ebp
f010435a:	c3                   	ret    

f010435b <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010435b:	55                   	push   %ebp
f010435c:	89 e5                	mov    %esp,%ebp
f010435e:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f0104363:	83 f8 01             	cmp    $0x1,%eax
f0104366:	75 07                	jne    f010436f <isSchedMethodMLFQ+0x14>
f0104368:	b8 01 00 00 00       	mov    $0x1,%eax
f010436d:	eb 05                	jmp    f0104374 <isSchedMethodMLFQ+0x19>
f010436f:	b8 00 00 00 00       	mov    $0x0,%eax
f0104374:	5d                   	pop    %ebp
f0104375:	c3                   	ret    

f0104376 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104376:	55                   	push   %ebp
f0104377:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104379:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010437d:	74 1d                	je     f010439c <init_queue+0x26>
	{
		LIST_INIT(queue);
f010437f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104382:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104388:	8b 45 08             	mov    0x8(%ebp),%eax
f010438b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104392:	8b 45 08             	mov    0x8(%ebp),%eax
f0104395:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010439c:	90                   	nop
f010439d:	5d                   	pop    %ebp
f010439e:	c3                   	ret    

f010439f <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010439f:	55                   	push   %ebp
f01043a0:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043a6:	74 08                	je     f01043b0 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01043ae:	eb 05                	jmp    f01043b5 <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b0:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043b5:	5d                   	pop    %ebp
f01043b6:	c3                   	ret    

f01043b7 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043b7:	55                   	push   %ebp
f01043b8:	89 e5                	mov    %esp,%ebp
f01043ba:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c1:	74 66                	je     f0104429 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c7:	75 14                	jne    f01043dd <enqueue+0x26>
f01043c9:	83 ec 04             	sub    $0x4,%esp
f01043cc:	68 50 47 13 f0       	push   $0xf0134750
f01043d1:	6a 2f                	push   $0x2f
f01043d3:	68 73 47 13 f0       	push   $0xf0134773
f01043d8:	e8 c9 bd ff ff       	call   f01001a6 <_panic>
f01043dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e0:	8b 10                	mov    (%eax),%edx
f01043e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e5:	89 50 44             	mov    %edx,0x44(%eax)
f01043e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043eb:	8b 40 44             	mov    0x44(%eax),%eax
f01043ee:	85 c0                	test   %eax,%eax
f01043f0:	74 0d                	je     f01043ff <enqueue+0x48>
f01043f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f5:	8b 00                	mov    (%eax),%eax
f01043f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043fa:	89 50 48             	mov    %edx,0x48(%eax)
f01043fd:	eb 09                	jmp    f0104408 <enqueue+0x51>
f01043ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	89 50 04             	mov    %edx,0x4(%eax)
f0104408:	8b 45 08             	mov    0x8(%ebp),%eax
f010440b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440e:	89 10                	mov    %edx,(%eax)
f0104410:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104413:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010441a:	8b 45 08             	mov    0x8(%ebp),%eax
f010441d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104420:	8d 50 01             	lea    0x1(%eax),%edx
f0104423:	8b 45 08             	mov    0x8(%ebp),%eax
f0104426:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104429:	90                   	nop
f010442a:	c9                   	leave  
f010442b:	c3                   	ret    

f010442c <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f010442c:	55                   	push   %ebp
f010442d:	89 e5                	mov    %esp,%ebp
f010442f:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f0104432:	8b 45 08             	mov    0x8(%ebp),%eax
f0104435:	8b 40 04             	mov    0x4(%eax),%eax
f0104438:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f010443b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010443f:	0f 84 8a 00 00 00    	je     f01044cf <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f0104445:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104449:	75 14                	jne    f010445f <dequeue+0x33>
f010444b:	83 ec 04             	sub    $0x4,%esp
f010444e:	68 84 47 13 f0       	push   $0xf0134784
f0104453:	6a 38                	push   $0x38
f0104455:	68 73 47 13 f0       	push   $0xf0134773
f010445a:	e8 47 bd ff ff       	call   f01001a6 <_panic>
f010445f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104462:	8b 40 44             	mov    0x44(%eax),%eax
f0104465:	85 c0                	test   %eax,%eax
f0104467:	74 11                	je     f010447a <dequeue+0x4e>
f0104469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446c:	8b 40 44             	mov    0x44(%eax),%eax
f010446f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104472:	8b 52 48             	mov    0x48(%edx),%edx
f0104475:	89 50 48             	mov    %edx,0x48(%eax)
f0104478:	eb 0c                	jmp    f0104486 <dequeue+0x5a>
f010447a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447d:	8b 50 48             	mov    0x48(%eax),%edx
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	89 50 04             	mov    %edx,0x4(%eax)
f0104486:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104489:	8b 40 48             	mov    0x48(%eax),%eax
f010448c:	85 c0                	test   %eax,%eax
f010448e:	74 11                	je     f01044a1 <dequeue+0x75>
f0104490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104493:	8b 40 48             	mov    0x48(%eax),%eax
f0104496:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104499:	8b 52 44             	mov    0x44(%edx),%edx
f010449c:	89 50 44             	mov    %edx,0x44(%eax)
f010449f:	eb 0b                	jmp    f01044ac <dequeue+0x80>
f01044a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044a4:	8b 50 44             	mov    0x44(%eax),%edx
f01044a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01044aa:	89 10                	mov    %edx,(%eax)
f01044ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044af:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c3:	8b 40 0c             	mov    0xc(%eax),%eax
f01044c6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cc:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044d2:	c9                   	leave  
f01044d3:	c3                   	ret    

f01044d4 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044d4:	55                   	push   %ebp
f01044d5:	89 e5                	mov    %esp,%ebp
f01044d7:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	0f 84 8a 00 00 00    	je     f010456e <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e8:	75 14                	jne    f01044fe <remove_from_queue+0x2a>
f01044ea:	83 ec 04             	sub    $0x4,%esp
f01044ed:	68 84 47 13 f0       	push   $0xf0134784
f01044f2:	6a 41                	push   $0x41
f01044f4:	68 73 47 13 f0       	push   $0xf0134773
f01044f9:	e8 a8 bc ff ff       	call   f01001a6 <_panic>
f01044fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104501:	8b 40 44             	mov    0x44(%eax),%eax
f0104504:	85 c0                	test   %eax,%eax
f0104506:	74 11                	je     f0104519 <remove_from_queue+0x45>
f0104508:	8b 45 0c             	mov    0xc(%ebp),%eax
f010450b:	8b 40 44             	mov    0x44(%eax),%eax
f010450e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104511:	8b 52 48             	mov    0x48(%edx),%edx
f0104514:	89 50 48             	mov    %edx,0x48(%eax)
f0104517:	eb 0c                	jmp    f0104525 <remove_from_queue+0x51>
f0104519:	8b 45 0c             	mov    0xc(%ebp),%eax
f010451c:	8b 50 48             	mov    0x48(%eax),%edx
f010451f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104528:	8b 40 48             	mov    0x48(%eax),%eax
f010452b:	85 c0                	test   %eax,%eax
f010452d:	74 11                	je     f0104540 <remove_from_queue+0x6c>
f010452f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104532:	8b 40 48             	mov    0x48(%eax),%eax
f0104535:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104538:	8b 52 44             	mov    0x44(%edx),%edx
f010453b:	89 50 44             	mov    %edx,0x44(%eax)
f010453e:	eb 0b                	jmp    f010454b <remove_from_queue+0x77>
f0104540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104543:	8b 50 44             	mov    0x44(%eax),%edx
f0104546:	8b 45 08             	mov    0x8(%ebp),%eax
f0104549:	89 10                	mov    %edx,(%eax)
f010454b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104558:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 0c             	mov    0xc(%eax),%eax
f0104565:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104568:	8b 45 08             	mov    0x8(%ebp),%eax
f010456b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010456e:	90                   	nop
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0104577:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010457e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104581:	8b 00                	mov    (%eax),%eax
f0104583:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104586:	eb 19                	jmp    f01045a1 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104588:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010458b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010458e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104591:	75 05                	jne    f0104598 <find_env_in_queue+0x27>
		{
			return ptr_env;
f0104593:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104596:	eb 37                	jmp    f01045cf <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104598:	8b 45 08             	mov    0x8(%ebp),%eax
f010459b:	8b 40 08             	mov    0x8(%eax),%eax
f010459e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045a5:	74 08                	je     f01045af <find_env_in_queue+0x3e>
f01045a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045aa:	8b 40 44             	mov    0x44(%eax),%eax
f01045ad:	eb 05                	jmp    f01045b4 <find_env_in_queue+0x43>
f01045af:	b8 00 00 00 00       	mov    $0x0,%eax
f01045b4:	8b 55 08             	mov    0x8(%ebp),%edx
f01045b7:	89 42 08             	mov    %eax,0x8(%edx)
f01045ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bd:	8b 40 08             	mov    0x8(%eax),%eax
f01045c0:	85 c0                	test   %eax,%eax
f01045c2:	75 c4                	jne    f0104588 <find_env_in_queue+0x17>
f01045c4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045c8:	75 be                	jne    f0104588 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045cf:	c9                   	leave  
f01045d0:	c3                   	ret    

f01045d1 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d1:	55                   	push   %ebp
f01045d2:	89 e5                	mov    %esp,%ebp
f01045d4:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045d7:	83 ec 04             	sub    $0x4,%esp
f01045da:	68 a4 47 13 f0       	push   $0xf01347a4
f01045df:	6a 58                	push   $0x58
f01045e1:	68 73 47 13 f0       	push   $0xf0134773
f01045e6:	e8 bb bb ff ff       	call   f01001a6 <_panic>

f01045eb <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045eb:	55                   	push   %ebp
f01045ec:	89 e5                	mov    %esp,%ebp
f01045ee:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f1:	e8 45 ad 02 00       	call   f012f33b <chk1>
	scheduler_status = SCH_STARTED;
f01045f6:	c7 05 b4 74 6e f0 01 	movl   $0x1,0xf06e74b4
f01045fd:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104600:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104607:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f010460c:	85 c0                	test   %eax,%eax
f010460e:	75 48                	jne    f0104658 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104610:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0104615:	85 c0                	test   %eax,%eax
f0104617:	74 16                	je     f010462f <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104619:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010461e:	83 ec 08             	sub    $0x8,%esp
f0104621:	50                   	push   %eax
f0104622:	68 0c f1 67 f0       	push   $0xf067f10c
f0104627:	e8 8b fd ff ff       	call   f01043b7 <enqueue>
f010462c:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010462f:	83 ec 0c             	sub    $0xc,%esp
f0104632:	68 0c f1 67 f0       	push   $0xf067f10c
f0104637:	e8 f0 fd ff ff       	call   f010442c <dequeue>
f010463c:	83 c4 10             	add    $0x10,%esp
f010463f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104642:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0104647:	0f b6 c0             	movzbl %al,%eax
f010464a:	83 ec 0c             	sub    $0xc,%esp
f010464d:	50                   	push   %eax
f010464e:	e8 41 fb ff ff       	call   f0104194 <kclock_set_quantum>
f0104653:	83 c4 10             	add    $0x10,%esp
f0104656:	eb 12                	jmp    f010466a <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104658:	a1 a8 74 6e f0       	mov    0xf06e74a8,%eax
f010465d:	83 f8 01             	cmp    $0x1,%eax
f0104660:	75 08                	jne    f010466a <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f0104662:	e8 6a ff ff ff       	call   f01045d1 <fos_scheduler_MLFQ>
f0104667:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010466a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010466f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104675:	a3 34 77 65 f0       	mov    %eax,0xf0657734
	chk2(next_env) ;
f010467a:	83 ec 0c             	sub    $0xc,%esp
f010467d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104680:	e8 f3 ac 02 00       	call   f012f378 <chk2>
f0104685:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104688:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010468b:	a3 34 77 65 f0       	mov    %eax,0xf0657734

	//sched_print_all();

	if(next_env != NULL)
f0104690:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104694:	74 0b                	je     f01046a1 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f0104696:	83 ec 0c             	sub    $0xc,%esp
f0104699:	ff 75 f4             	pushl  -0xc(%ebp)
f010469c:	e8 76 46 00 00       	call   f0108d17 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a1:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f01046a8:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046ab:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01046b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046b6:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046b9:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f01046c0:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	6a 00                	push   $0x0
f01046c8:	e8 86 c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046cd:	83 c4 10             	add    $0x10,%esp
f01046d0:	eb f1                	jmp    f01046c3 <fos_scheduler+0xd8>

f01046d2 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046d2:	55                   	push   %ebp
f01046d3:	89 e5                	mov    %esp,%ebp
f01046d5:	83 ec 18             	sub    $0x18,%esp
f01046d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046db:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046de:	c7 05 b4 74 6e f0 00 	movl   $0x0,0xf06e74b4
f01046e5:	00 00 00 
	scheduler_method = SCH_RR;
f01046e8:	c7 05 a8 74 6e f0 00 	movl   $0x0,0xf06e74a8
f01046ef:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046f2:	c6 05 dc 74 6e f0 01 	movb   $0x1,0xf06e74dc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01046f9:	8a 45 f4             	mov    -0xc(%ebp),%al
f01046fc:	a2 88 74 6e f0       	mov    %al,0xf06e7488
	kclock_set_quantum(quantums[0]);
f0104701:	a0 88 74 6e f0       	mov    0xf06e7488,%al
f0104706:	0f b6 c0             	movzbl %al,%eax
f0104709:	83 ec 0c             	sub    $0xc,%esp
f010470c:	50                   	push   %eax
f010470d:	e8 82 fa ff ff       	call   f0104194 <kclock_set_quantum>
f0104712:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104715:	83 ec 0c             	sub    $0xc,%esp
f0104718:	68 0c f1 67 f0       	push   $0xf067f10c
f010471d:	e8 54 fc ff ff       	call   f0104376 <init_queue>
f0104722:	83 c4 10             	add    $0x10,%esp
}
f0104725:	90                   	nop
f0104726:	c9                   	leave  
f0104727:	c3                   	ret    

f0104728 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104728:	55                   	push   %ebp
f0104729:	89 e5                	mov    %esp,%ebp
f010472b:	83 ec 18             	sub    $0x18,%esp
f010472e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104731:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f0104734:	83 ec 04             	sub    $0x4,%esp
f0104737:	68 d8 47 13 f0       	push   $0xf01347d8
f010473c:	68 cc 00 00 00       	push   $0xcc
f0104741:	68 73 47 13 f0       	push   $0xf0134773
f0104746:	e8 5b ba ff ff       	call   f01001a6 <_panic>

f010474b <sched_init>:
#endif
}


void sched_init()
{
f010474b:	55                   	push   %ebp
f010474c:	89 e5                	mov    %esp,%ebp
f010474e:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104751:	c7 05 74 50 6e f0 00 	movl   $0x0,0xf06e5074
f0104758:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010475b:	83 ec 0c             	sub    $0xc,%esp
f010475e:	6a 0a                	push   $0xa
f0104760:	e8 6d ff ff ff       	call   f01046d2 <sched_init_RR>
f0104765:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104768:	83 ec 0c             	sub    $0xc,%esp
f010476b:	68 98 74 6e f0       	push   $0xf06e7498
f0104770:	e8 01 fc ff ff       	call   f0104376 <init_queue>
f0104775:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104778:	83 ec 0c             	sub    $0xc,%esp
f010477b:	68 64 50 6e f0       	push   $0xf06e5064
f0104780:	e8 f1 fb ff ff       	call   f0104376 <init_queue>
f0104785:	83 c4 10             	add    $0x10,%esp
}
f0104788:	90                   	nop
f0104789:	c9                   	leave  
f010478a:	c3                   	ret    

f010478b <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010478b:	55                   	push   %ebp
f010478c:	89 e5                	mov    %esp,%ebp
f010478e:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104791:	83 ec 0c             	sub    $0xc,%esp
f0104794:	68 0c f1 67 f0       	push   $0xf067f10c
f0104799:	e8 58 2c 00 00       	call   f01073f6 <kfree>
f010479e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	68 88 74 6e f0       	push   $0xf06e7488
f01047a9:	e8 48 2c 00 00       	call   f01073f6 <kfree>
f01047ae:	83 c4 10             	add    $0x10,%esp
}
f01047b1:	90                   	nop
f01047b2:	c9                   	leave  
f01047b3:	c3                   	ret    

f01047b4 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047b4:	55                   	push   %ebp
f01047b5:	89 e5                	mov    %esp,%ebp
f01047b7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047be:	74 1d                	je     f01047dd <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c3:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047ca:	83 ec 08             	sub    $0x8,%esp
f01047cd:	ff 75 08             	pushl  0x8(%ebp)
f01047d0:	68 0c f1 67 f0       	push   $0xf067f10c
f01047d5:	e8 dd fb ff ff       	call   f01043b7 <enqueue>
f01047da:	83 c4 10             	add    $0x10,%esp
	}
}
f01047dd:	90                   	nop
f01047de:	c9                   	leave  
f01047df:	c3                   	ret    

f01047e0 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e0:	55                   	push   %ebp
f01047e1:	89 e5                	mov    %esp,%ebp
f01047e3:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047ea:	0f 84 02 01 00 00    	je     f01048f2 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047f7:	e9 e5 00 00 00       	jmp    f01048e1 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01047fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104802:	89 c2                	mov    %eax,%edx
f0104804:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104807:	c1 e0 04             	shl    $0x4,%eax
f010480a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f010480f:	52                   	push   %edx
f0104810:	50                   	push   %eax
f0104811:	e8 5b fd ff ff       	call   f0104571 <find_env_in_queue>
f0104816:	83 c4 08             	add    $0x8,%esp
f0104819:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010481c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104820:	0f 84 b8 00 00 00    	je     f01048de <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f0104826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010482a:	75 17                	jne    f0104843 <sched_remove_ready+0x63>
f010482c:	83 ec 04             	sub    $0x4,%esp
f010482f:	68 84 47 13 f0       	push   $0xf0134784
f0104834:	68 f5 00 00 00       	push   $0xf5
f0104839:	68 73 47 13 f0       	push   $0xf0134773
f010483e:	e8 63 b9 ff ff       	call   f01001a6 <_panic>
f0104843:	8b 45 08             	mov    0x8(%ebp),%eax
f0104846:	8b 40 44             	mov    0x44(%eax),%eax
f0104849:	85 c0                	test   %eax,%eax
f010484b:	74 11                	je     f010485e <sched_remove_ready+0x7e>
f010484d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104850:	8b 40 44             	mov    0x44(%eax),%eax
f0104853:	8b 55 08             	mov    0x8(%ebp),%edx
f0104856:	8b 52 48             	mov    0x48(%edx),%edx
f0104859:	89 50 48             	mov    %edx,0x48(%eax)
f010485c:	eb 14                	jmp    f0104872 <sched_remove_ready+0x92>
f010485e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104861:	8b 40 48             	mov    0x48(%eax),%eax
f0104864:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104867:	c1 e2 04             	shl    $0x4,%edx
f010486a:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0104870:	89 02                	mov    %eax,(%edx)
f0104872:	8b 45 08             	mov    0x8(%ebp),%eax
f0104875:	8b 40 48             	mov    0x48(%eax),%eax
f0104878:	85 c0                	test   %eax,%eax
f010487a:	74 11                	je     f010488d <sched_remove_ready+0xad>
f010487c:	8b 45 08             	mov    0x8(%ebp),%eax
f010487f:	8b 40 48             	mov    0x48(%eax),%eax
f0104882:	8b 55 08             	mov    0x8(%ebp),%edx
f0104885:	8b 52 44             	mov    0x44(%edx),%edx
f0104888:	89 50 44             	mov    %edx,0x44(%eax)
f010488b:	eb 14                	jmp    f01048a1 <sched_remove_ready+0xc1>
f010488d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104890:	8b 40 44             	mov    0x44(%eax),%eax
f0104893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104896:	c1 e2 04             	shl    $0x4,%edx
f0104899:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f010489f:	89 02                	mov    %eax,(%edx)
f01048a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b8:	c1 e0 04             	shl    $0x4,%eax
f01048bb:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f01048c0:	8b 00                	mov    (%eax),%eax
f01048c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c8:	c1 e0 04             	shl    $0x4,%eax
f01048cb:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f01048d0:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048d5:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048dc:	eb 14                	jmp    f01048f2 <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048de:	ff 45 f4             	incl   -0xc(%ebp)
f01048e1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01048e6:	0f b6 c0             	movzbl %al,%eax
f01048e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048ec:	0f 8f 0a ff ff ff    	jg     f01047fc <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048f2:	c9                   	leave  
f01048f3:	c3                   	ret    

f01048f4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048f4:	55                   	push   %ebp
f01048f5:	89 e5                	mov    %esp,%ebp
f01048f7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01048fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048fe:	74 1d                	je     f010491d <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104900:	8b 45 08             	mov    0x8(%ebp),%eax
f0104903:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010490a:	83 ec 08             	sub    $0x8,%esp
f010490d:	ff 75 08             	pushl  0x8(%ebp)
f0104910:	68 98 74 6e f0       	push   $0xf06e7498
f0104915:	e8 9d fa ff ff       	call   f01043b7 <enqueue>
f010491a:	83 c4 10             	add    $0x10,%esp
	}
}
f010491d:	90                   	nop
f010491e:	c9                   	leave  
f010491f:	c3                   	ret    

f0104920 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104920:	55                   	push   %ebp
f0104921:	89 e5                	mov    %esp,%ebp
f0104923:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104926:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010492a:	0f 84 92 00 00 00    	je     f01049c2 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104930:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104934:	75 17                	jne    f010494d <sched_remove_new+0x2d>
f0104936:	83 ec 04             	sub    $0x4,%esp
f0104939:	68 84 47 13 f0       	push   $0xf0134784
f010493e:	68 09 01 00 00       	push   $0x109
f0104943:	68 73 47 13 f0       	push   $0xf0134773
f0104948:	e8 59 b8 ff ff       	call   f01001a6 <_panic>
f010494d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104950:	8b 40 44             	mov    0x44(%eax),%eax
f0104953:	85 c0                	test   %eax,%eax
f0104955:	74 11                	je     f0104968 <sched_remove_new+0x48>
f0104957:	8b 45 08             	mov    0x8(%ebp),%eax
f010495a:	8b 40 44             	mov    0x44(%eax),%eax
f010495d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104960:	8b 52 48             	mov    0x48(%edx),%edx
f0104963:	89 50 48             	mov    %edx,0x48(%eax)
f0104966:	eb 0b                	jmp    f0104973 <sched_remove_new+0x53>
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	8b 40 48             	mov    0x48(%eax),%eax
f010496e:	a3 9c 74 6e f0       	mov    %eax,0xf06e749c
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	8b 40 48             	mov    0x48(%eax),%eax
f0104979:	85 c0                	test   %eax,%eax
f010497b:	74 11                	je     f010498e <sched_remove_new+0x6e>
f010497d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104980:	8b 40 48             	mov    0x48(%eax),%eax
f0104983:	8b 55 08             	mov    0x8(%ebp),%edx
f0104986:	8b 52 44             	mov    0x44(%edx),%edx
f0104989:	89 50 44             	mov    %edx,0x44(%eax)
f010498c:	eb 0b                	jmp    f0104999 <sched_remove_new+0x79>
f010498e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104991:	8b 40 44             	mov    0x44(%eax),%eax
f0104994:	a3 98 74 6e f0       	mov    %eax,0xf06e7498
f0104999:	8b 45 08             	mov    0x8(%ebp),%eax
f010499c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049ad:	a1 a4 74 6e f0       	mov    0xf06e74a4,%eax
f01049b2:	48                   	dec    %eax
f01049b3:	a3 a4 74 6e f0       	mov    %eax,0xf06e74a4
		env->env_status = ENV_UNKNOWN;
f01049b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bb:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049c2:	90                   	nop
f01049c3:	c9                   	leave  
f01049c4:	c3                   	ret    

f01049c5 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049c5:	55                   	push   %ebp
f01049c6:	89 e5                	mov    %esp,%ebp
f01049c8:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049cf:	74 34                	je     f0104a05 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d1:	e8 34 86 00 00       	call   f010d00a <isBufferingEnabled>
f01049d6:	84 c0                	test   %al,%al
f01049d8:	74 0e                	je     f01049e8 <sched_insert_exit+0x23>
f01049da:	83 ec 0c             	sub    $0xc,%esp
f01049dd:	ff 75 08             	pushl  0x8(%ebp)
f01049e0:	e8 9b 57 00 00       	call   f010a180 <cleanup_buffers>
f01049e5:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01049eb:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049f2:	83 ec 08             	sub    $0x8,%esp
f01049f5:	ff 75 08             	pushl  0x8(%ebp)
f01049f8:	68 64 50 6e f0       	push   $0xf06e5064
f01049fd:	e8 b5 f9 ff ff       	call   f01043b7 <enqueue>
f0104a02:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a05:	90                   	nop
f0104a06:	c9                   	leave  
f0104a07:	c3                   	ret    

f0104a08 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a08:	55                   	push   %ebp
f0104a09:	89 e5                	mov    %esp,%ebp
f0104a0b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a0e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a12:	0f 84 92 00 00 00    	je     f0104aaa <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1c:	75 17                	jne    f0104a35 <sched_remove_exit+0x2d>
f0104a1e:	83 ec 04             	sub    $0x4,%esp
f0104a21:	68 84 47 13 f0       	push   $0xf0134784
f0104a26:	68 1b 01 00 00       	push   $0x11b
f0104a2b:	68 73 47 13 f0       	push   $0xf0134773
f0104a30:	e8 71 b7 ff ff       	call   f01001a6 <_panic>
f0104a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a38:	8b 40 44             	mov    0x44(%eax),%eax
f0104a3b:	85 c0                	test   %eax,%eax
f0104a3d:	74 11                	je     f0104a50 <sched_remove_exit+0x48>
f0104a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a42:	8b 40 44             	mov    0x44(%eax),%eax
f0104a45:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a48:	8b 52 48             	mov    0x48(%edx),%edx
f0104a4b:	89 50 48             	mov    %edx,0x48(%eax)
f0104a4e:	eb 0b                	jmp    f0104a5b <sched_remove_exit+0x53>
f0104a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a53:	8b 40 48             	mov    0x48(%eax),%eax
f0104a56:	a3 68 50 6e f0       	mov    %eax,0xf06e5068
f0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a61:	85 c0                	test   %eax,%eax
f0104a63:	74 11                	je     f0104a76 <sched_remove_exit+0x6e>
f0104a65:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a68:	8b 40 48             	mov    0x48(%eax),%eax
f0104a6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a6e:	8b 52 44             	mov    0x44(%edx),%edx
f0104a71:	89 50 44             	mov    %edx,0x44(%eax)
f0104a74:	eb 0b                	jmp    f0104a81 <sched_remove_exit+0x79>
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	8b 40 44             	mov    0x44(%eax),%eax
f0104a7c:	a3 64 50 6e f0       	mov    %eax,0xf06e5064
f0104a81:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a84:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a95:	a1 70 50 6e f0       	mov    0xf06e5070,%eax
f0104a9a:	48                   	dec    %eax
f0104a9b:	a3 70 50 6e f0       	mov    %eax,0xf06e5070
		env->env_status = ENV_UNKNOWN;
f0104aa0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104aaa:	90                   	nop
f0104aab:	c9                   	leave  
f0104aac:	c3                   	ret    

f0104aad <sched_print_all>:

void sched_print_all()
{
f0104aad:	55                   	push   %ebp
f0104aae:	89 e5                	mov    %esp,%ebp
f0104ab0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ab3:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104ab8:	85 c0                	test   %eax,%eax
f0104aba:	74 6c                	je     f0104b28 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104abc:	83 ec 0c             	sub    $0xc,%esp
f0104abf:	68 04 48 13 f0       	push   $0xf0134804
f0104ac4:	e8 64 c1 ff ff       	call   f0100c2d <cprintf>
f0104ac9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104acc:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104ad1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ad4:	eb 29                	jmp    f0104aff <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ad9:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ae5:	83 ec 04             	sub    $0x4,%esp
f0104ae8:	52                   	push   %edx
f0104ae9:	50                   	push   %eax
f0104aea:	68 26 48 13 f0       	push   $0xf0134826
f0104aef:	e8 39 c1 ff ff       	call   f0100c2d <cprintf>
f0104af4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104af7:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104afc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104aff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b03:	74 08                	je     f0104b0d <sched_print_all+0x60>
f0104b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b08:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0b:	eb 05                	jmp    f0104b12 <sched_print_all+0x65>
f0104b0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b12:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104b17:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104b1c:	85 c0                	test   %eax,%eax
f0104b1e:	75 b6                	jne    f0104ad6 <sched_print_all+0x29>
f0104b20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b24:	75 b0                	jne    f0104ad6 <sched_print_all+0x29>
f0104b26:	eb 10                	jmp    f0104b38 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b28:	83 ec 0c             	sub    $0xc,%esp
f0104b2b:	68 30 48 13 f0       	push   $0xf0134830
f0104b30:	e8 f8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b35:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b38:	83 ec 0c             	sub    $0xc,%esp
f0104b3b:	68 4c 48 13 f0       	push   $0xf013484c
f0104b40:	e8 e8 c0 ff ff       	call   f0100c2d <cprintf>
f0104b45:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b4f:	e9 cb 00 00 00       	jmp    f0104c1f <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b57:	c1 e0 04             	shl    $0x4,%eax
f0104b5a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104b5f:	8b 00                	mov    (%eax),%eax
f0104b61:	85 c0                	test   %eax,%eax
f0104b63:	0f 84 90 00 00 00    	je     f0104bf9 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b69:	83 ec 08             	sub    $0x8,%esp
f0104b6c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b6f:	68 80 48 13 f0       	push   $0xf0134880
f0104b74:	e8 b4 c0 ff ff       	call   f0100c2d <cprintf>
f0104b79:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b7f:	c1 e0 04             	shl    $0x4,%eax
f0104b82:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104b87:	8b 00                	mov    (%eax),%eax
f0104b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b8c:	eb 31                	jmp    f0104bbf <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b91:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104b9d:	83 ec 04             	sub    $0x4,%esp
f0104ba0:	52                   	push   %edx
f0104ba1:	50                   	push   %eax
f0104ba2:	68 26 48 13 f0       	push   $0xf0134826
f0104ba7:	e8 81 c0 ff ff       	call   f0100c2d <cprintf>
f0104bac:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104baf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bb2:	c1 e0 04             	shl    $0x4,%eax
f0104bb5:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104bba:	8b 00                	mov    (%eax),%eax
f0104bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc3:	74 08                	je     f0104bcd <sched_print_all+0x120>
f0104bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc8:	8b 40 44             	mov    0x44(%eax),%eax
f0104bcb:	eb 05                	jmp    f0104bd2 <sched_print_all+0x125>
f0104bcd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bd5:	c1 e2 04             	shl    $0x4,%edx
f0104bd8:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0104bde:	89 02                	mov    %eax,(%edx)
f0104be0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104be3:	c1 e0 04             	shl    $0x4,%eax
f0104be6:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104beb:	8b 00                	mov    (%eax),%eax
f0104bed:	85 c0                	test   %eax,%eax
f0104bef:	75 9d                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bf5:	75 97                	jne    f0104b8e <sched_print_all+0xe1>
f0104bf7:	eb 13                	jmp    f0104c0c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104bf9:	83 ec 08             	sub    $0x8,%esp
f0104bfc:	ff 75 f0             	pushl  -0x10(%ebp)
f0104bff:	68 a8 48 13 f0       	push   $0xf01348a8
f0104c04:	e8 24 c0 ff ff       	call   f0100c2d <cprintf>
f0104c09:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c0c:	83 ec 0c             	sub    $0xc,%esp
f0104c0f:	68 4c 48 13 f0       	push   $0xf013484c
f0104c14:	e8 14 c0 ff ff       	call   f0100c2d <cprintf>
f0104c19:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c1c:	ff 45 f0             	incl   -0x10(%ebp)
f0104c1f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0104c24:	0f b6 c0             	movzbl %al,%eax
f0104c27:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c2a:	0f 8f 24 ff ff ff    	jg     f0104b54 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c30:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104c35:	85 c0                	test   %eax,%eax
f0104c37:	74 6c                	je     f0104ca5 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c39:	83 ec 0c             	sub    $0xc,%esp
f0104c3c:	68 cc 48 13 f0       	push   $0xf01348cc
f0104c41:	e8 e7 bf ff ff       	call   f0100c2d <cprintf>
f0104c46:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c49:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c51:	eb 29                	jmp    f0104c7c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c56:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c62:	83 ec 04             	sub    $0x4,%esp
f0104c65:	52                   	push   %edx
f0104c66:	50                   	push   %eax
f0104c67:	68 26 48 13 f0       	push   $0xf0134826
f0104c6c:	e8 bc bf ff ff       	call   f0100c2d <cprintf>
f0104c71:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c74:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0104c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c80:	74 08                	je     f0104c8a <sched_print_all+0x1dd>
f0104c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c85:	8b 40 44             	mov    0x44(%eax),%eax
f0104c88:	eb 05                	jmp    f0104c8f <sched_print_all+0x1e2>
f0104c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8f:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0104c94:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0104c99:	85 c0                	test   %eax,%eax
f0104c9b:	75 b6                	jne    f0104c53 <sched_print_all+0x1a6>
f0104c9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca1:	75 b0                	jne    f0104c53 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104ca3:	eb 10                	jmp    f0104cb5 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104ca5:	83 ec 0c             	sub    $0xc,%esp
f0104ca8:	68 ee 48 13 f0       	push   $0xf01348ee
f0104cad:	e8 7b bf ff ff       	call   f0100c2d <cprintf>
f0104cb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cb5:	90                   	nop
f0104cb6:	c9                   	leave  
f0104cb7:	c3                   	ret    

f0104cb8 <sched_run_all>:

void sched_run_all()
{
f0104cb8:	55                   	push   %ebp
f0104cb9:	89 e5                	mov    %esp,%ebp
f0104cbb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cc5:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ccd:	eb 24                	jmp    f0104cf3 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104ccf:	83 ec 0c             	sub    $0xc,%esp
f0104cd2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cd5:	e8 46 fc ff ff       	call   f0104920 <sched_remove_new>
f0104cda:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104cdd:	83 ec 0c             	sub    $0xc,%esp
f0104ce0:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ce3:	e8 cc fa ff ff       	call   f01047b4 <sched_insert_ready>
f0104ce8:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ceb:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cf3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cf7:	74 08                	je     f0104d01 <sched_run_all+0x49>
f0104cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cfc:	8b 40 44             	mov    0x44(%eax),%eax
f0104cff:	eb 05                	jmp    f0104d06 <sched_run_all+0x4e>
f0104d01:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d06:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104d0b:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104d10:	85 c0                	test   %eax,%eax
f0104d12:	75 bb                	jne    f0104ccf <sched_run_all+0x17>
f0104d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d18:	75 b5                	jne    f0104ccf <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d1a:	a1 b4 74 6e f0       	mov    0xf06e74b4,%eax
f0104d1f:	85 c0                	test   %eax,%eax
f0104d21:	75 05                	jne    f0104d28 <sched_run_all+0x70>
		fos_scheduler();
f0104d23:	e8 c3 f8 ff ff       	call   f01045eb <fos_scheduler>
}
f0104d28:	90                   	nop
f0104d29:	c9                   	leave  
f0104d2a:	c3                   	ret    

f0104d2b <sched_kill_all>:

void sched_kill_all()
{
f0104d2b:	55                   	push   %ebp
f0104d2c:	89 e5                	mov    %esp,%ebp
f0104d2e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d31:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104d36:	85 c0                	test   %eax,%eax
f0104d38:	0f 84 98 00 00 00    	je     f0104dd6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d3e:	83 ec 0c             	sub    $0xc,%esp
f0104d41:	68 0c 49 13 f0       	push   $0xf013490c
f0104d46:	e8 e2 be ff ff       	call   f0100c2d <cprintf>
f0104d4b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d4e:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0104d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d56:	eb 55                	jmp    f0104dad <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5b:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d67:	83 ec 04             	sub    $0x4,%esp
f0104d6a:	52                   	push   %edx
f0104d6b:	50                   	push   %eax
f0104d6c:	68 38 49 13 f0       	push   $0xf0134938
f0104d71:	e8 b7 be ff ff       	call   f0100c2d <cprintf>
f0104d76:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d79:	83 ec 0c             	sub    $0xc,%esp
f0104d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d7f:	e8 9c fb ff ff       	call   f0104920 <sched_remove_new>
f0104d84:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d8d:	e8 d9 3f 00 00       	call   f0108d6b <env_free>
f0104d92:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d95:	83 ec 0c             	sub    $0xc,%esp
f0104d98:	68 4b 49 13 f0       	push   $0xf013494b
f0104d9d:	e8 8b be ff ff       	call   f0100c2d <cprintf>
f0104da2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104da5:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db1:	74 08                	je     f0104dbb <sched_kill_all+0x90>
f0104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db6:	8b 40 44             	mov    0x44(%eax),%eax
f0104db9:	eb 05                	jmp    f0104dc0 <sched_kill_all+0x95>
f0104dbb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc0:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0104dc5:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0104dca:	85 c0                	test   %eax,%eax
f0104dcc:	75 8a                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd2:	75 84                	jne    f0104d58 <sched_kill_all+0x2d>
f0104dd4:	eb 10                	jmp    f0104de6 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dd6:	83 ec 0c             	sub    $0xc,%esp
f0104dd9:	68 51 49 13 f0       	push   $0xf0134951
f0104dde:	e8 4a be ff ff       	call   f0100c2d <cprintf>
f0104de3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104de6:	83 ec 0c             	sub    $0xc,%esp
f0104de9:	68 4c 48 13 f0       	push   $0xf013484c
f0104dee:	e8 3a be ff ff       	call   f0100c2d <cprintf>
f0104df3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104dfd:	e9 a0 01 00 00       	jmp    f0104fa2 <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e05:	c1 e0 04             	shl    $0x4,%eax
f0104e08:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104e0d:	8b 00                	mov    (%eax),%eax
f0104e0f:	85 c0                	test   %eax,%eax
f0104e11:	0f 84 65 01 00 00    	je     f0104f7c <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e17:	83 ec 08             	sub    $0x8,%esp
f0104e1a:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e1d:	68 6c 49 13 f0       	push   $0xf013496c
f0104e22:	e8 06 be ff ff       	call   f0100c2d <cprintf>
f0104e27:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e2d:	c1 e0 04             	shl    $0x4,%eax
f0104e30:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0104e35:	8b 00                	mov    (%eax),%eax
f0104e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e3a:	e9 fb 00 00 00       	jmp    f0104f3a <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e42:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e4e:	83 ec 04             	sub    $0x4,%esp
f0104e51:	52                   	push   %edx
f0104e52:	50                   	push   %eax
f0104e53:	68 38 49 13 f0       	push   $0xf0134938
f0104e58:	e8 d0 bd ff ff       	call   f0100c2d <cprintf>
f0104e5d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e64:	75 17                	jne    f0104e7d <sched_kill_all+0x152>
f0104e66:	83 ec 04             	sub    $0x4,%esp
f0104e69:	68 84 47 13 f0       	push   $0xf0134784
f0104e6e:	68 76 01 00 00       	push   $0x176
f0104e73:	68 73 47 13 f0       	push   $0xf0134773
f0104e78:	e8 29 b3 ff ff       	call   f01001a6 <_panic>
f0104e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e80:	8b 40 44             	mov    0x44(%eax),%eax
f0104e83:	85 c0                	test   %eax,%eax
f0104e85:	74 11                	je     f0104e98 <sched_kill_all+0x16d>
f0104e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e8a:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e90:	8b 52 48             	mov    0x48(%edx),%edx
f0104e93:	89 50 48             	mov    %edx,0x48(%eax)
f0104e96:	eb 14                	jmp    f0104eac <sched_kill_all+0x181>
f0104e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9b:	8b 40 48             	mov    0x48(%eax),%eax
f0104e9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea1:	c1 e2 04             	shl    $0x4,%edx
f0104ea4:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0104eaa:	89 02                	mov    %eax,(%edx)
f0104eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eaf:	8b 40 48             	mov    0x48(%eax),%eax
f0104eb2:	85 c0                	test   %eax,%eax
f0104eb4:	74 11                	je     f0104ec7 <sched_kill_all+0x19c>
f0104eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb9:	8b 40 48             	mov    0x48(%eax),%eax
f0104ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ebf:	8b 52 44             	mov    0x44(%edx),%edx
f0104ec2:	89 50 44             	mov    %edx,0x44(%eax)
f0104ec5:	eb 14                	jmp    f0104edb <sched_kill_all+0x1b0>
f0104ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eca:	8b 40 44             	mov    0x44(%eax),%eax
f0104ecd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed0:	c1 e2 04             	shl    $0x4,%edx
f0104ed3:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0104ed9:	89 02                	mov    %eax,(%edx)
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104ef2:	c1 e0 04             	shl    $0x4,%eax
f0104ef5:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0104efa:	8b 00                	mov    (%eax),%eax
f0104efc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104eff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f02:	c1 e0 04             	shl    $0x4,%eax
f0104f05:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0104f0a:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f0c:	83 ec 0c             	sub    $0xc,%esp
f0104f0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f12:	e8 54 3e 00 00       	call   f0108d6b <env_free>
f0104f17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f1a:	83 ec 0c             	sub    $0xc,%esp
f0104f1d:	68 4b 49 13 f0       	push   $0xf013494b
f0104f22:	e8 06 bd ff ff       	call   f0100c2d <cprintf>
f0104f27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f2d:	c1 e0 04             	shl    $0x4,%eax
f0104f30:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104f35:	8b 00                	mov    (%eax),%eax
f0104f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f3e:	74 08                	je     f0104f48 <sched_kill_all+0x21d>
f0104f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f43:	8b 40 44             	mov    0x44(%eax),%eax
f0104f46:	eb 05                	jmp    f0104f4d <sched_kill_all+0x222>
f0104f48:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f50:	c1 e2 04             	shl    $0x4,%edx
f0104f53:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0104f59:	89 02                	mov    %eax,(%edx)
f0104f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f5e:	c1 e0 04             	shl    $0x4,%eax
f0104f61:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0104f66:	8b 00                	mov    (%eax),%eax
f0104f68:	85 c0                	test   %eax,%eax
f0104f6a:	0f 85 cf fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f74:	0f 85 c5 fe ff ff    	jne    f0104e3f <sched_kill_all+0x114>
f0104f7a:	eb 13                	jmp    f0104f8f <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f7c:	83 ec 08             	sub    $0x8,%esp
f0104f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f82:	68 a8 48 13 f0       	push   $0xf01348a8
f0104f87:	e8 a1 bc ff ff       	call   f0100c2d <cprintf>
f0104f8c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f8f:	83 ec 0c             	sub    $0xc,%esp
f0104f92:	68 4c 48 13 f0       	push   $0xf013484c
f0104f97:	e8 91 bc ff ff       	call   f0100c2d <cprintf>
f0104f9c:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f9f:	ff 45 f0             	incl   -0x10(%ebp)
f0104fa2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0104fa7:	0f b6 c0             	movzbl %al,%eax
f0104faa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fad:	0f 8f 4f fe ff ff    	jg     f0104e02 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fb3:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	0f 84 98 00 00 00    	je     f0105058 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc0:	83 ec 0c             	sub    $0xc,%esp
f0104fc3:	68 a0 49 13 f0       	push   $0xf01349a0
f0104fc8:	e8 60 bc ff ff       	call   f0100c2d <cprintf>
f0104fcd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd0:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fd8:	eb 55                	jmp    f010502f <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fdd:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fe9:	83 ec 04             	sub    $0x4,%esp
f0104fec:	52                   	push   %edx
f0104fed:	50                   	push   %eax
f0104fee:	68 38 49 13 f0       	push   $0xf0134938
f0104ff3:	e8 35 bc ff ff       	call   f0100c2d <cprintf>
f0104ff8:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0104ffb:	83 ec 0c             	sub    $0xc,%esp
f0104ffe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105001:	e8 02 fa ff ff       	call   f0104a08 <sched_remove_exit>
f0105006:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105009:	83 ec 0c             	sub    $0xc,%esp
f010500c:	ff 75 f4             	pushl  -0xc(%ebp)
f010500f:	e8 57 3d 00 00       	call   f0108d6b <env_free>
f0105014:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105017:	83 ec 0c             	sub    $0xc,%esp
f010501a:	68 4b 49 13 f0       	push   $0xf013494b
f010501f:	e8 09 bc ff ff       	call   f0100c2d <cprintf>
f0105024:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105027:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010502c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010502f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105033:	74 08                	je     f010503d <sched_kill_all+0x312>
f0105035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105038:	8b 40 44             	mov    0x44(%eax),%eax
f010503b:	eb 05                	jmp    f0105042 <sched_kill_all+0x317>
f010503d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105042:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0105047:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f010504c:	85 c0                	test   %eax,%eax
f010504e:	75 8a                	jne    f0104fda <sched_kill_all+0x2af>
f0105050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105054:	75 84                	jne    f0104fda <sched_kill_all+0x2af>
f0105056:	eb 10                	jmp    f0105068 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105058:	83 ec 0c             	sub    $0xc,%esp
f010505b:	68 ee 48 13 f0       	push   $0xf01348ee
f0105060:	e8 c8 bb ff ff       	call   f0100c2d <cprintf>
f0105065:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105068:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f010506f:	00 00 00 
	fos_scheduler();
f0105072:	e8 74 f5 ff ff       	call   f01045eb <fos_scheduler>

f0105077 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0105077:	55                   	push   %ebp
f0105078:	89 e5                	mov    %esp,%ebp
f010507a:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010507d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105081:	74 0e                	je     f0105091 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105083:	83 ec 0c             	sub    $0xc,%esp
f0105086:	ff 75 08             	pushl  0x8(%ebp)
f0105089:	e8 66 f8 ff ff       	call   f01048f4 <sched_insert_new>
f010508e:	83 c4 10             	add    $0x10,%esp
	}
}
f0105091:	90                   	nop
f0105092:	c9                   	leave  
f0105093:	c3                   	ret    

f0105094 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105094:	55                   	push   %ebp
f0105095:	89 e5                	mov    %esp,%ebp
f0105097:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010509a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a1:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f01050a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050a9:	eb 3d                	jmp    f01050e8 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ae:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050b4:	75 2a                	jne    f01050e0 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050b6:	83 ec 0c             	sub    $0xc,%esp
f01050b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bc:	e8 5f f8 ff ff       	call   f0104920 <sched_remove_new>
f01050c1:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050c4:	83 ec 0c             	sub    $0xc,%esp
f01050c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01050ca:	e8 e5 f6 ff ff       	call   f01047b4 <sched_insert_ready>
f01050cf:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050d2:	a1 b4 74 6e f0       	mov    0xf06e74b4,%eax
f01050d7:	85 c0                	test   %eax,%eax
f01050d9:	75 36                	jne    f0105111 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050db:	e8 0b f5 ff ff       	call   f01045eb <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e0:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050ec:	74 08                	je     f01050f6 <sched_run_env+0x62>
f01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f1:	8b 40 44             	mov    0x44(%eax),%eax
f01050f4:	eb 05                	jmp    f01050fb <sched_run_env+0x67>
f01050f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01050fb:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105100:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	75 a2                	jne    f01050ab <sched_run_env+0x17>
f0105109:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510d:	75 9c                	jne    f01050ab <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010510f:	eb 01                	jmp    f0105112 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105111:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105112:	90                   	nop
f0105113:	c9                   	leave  
f0105114:	c3                   	ret    

f0105115 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105115:	55                   	push   %ebp
f0105116:	89 e5                	mov    %esp,%ebp
f0105118:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010511b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105122:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105129:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010512d:	75 59                	jne    f0105188 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010512f:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f0105134:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105137:	eb 28                	jmp    f0105161 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010513f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105142:	75 15                	jne    f0105159 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105144:	83 ec 0c             	sub    $0xc,%esp
f0105147:	ff 75 f4             	pushl  -0xc(%ebp)
f010514a:	e8 d1 f7 ff ff       	call   f0104920 <sched_remove_new>
f010514f:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105152:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105159:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010515e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105161:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105165:	74 08                	je     f010516f <sched_exit_env+0x5a>
f0105167:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010516a:	8b 40 44             	mov    0x44(%eax),%eax
f010516d:	eb 05                	jmp    f0105174 <sched_exit_env+0x5f>
f010516f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105174:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105179:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010517e:	85 c0                	test   %eax,%eax
f0105180:	75 b7                	jne    f0105139 <sched_exit_env+0x24>
f0105182:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105186:	75 b1                	jne    f0105139 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105188:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010518c:	0f 85 6e 01 00 00    	jne    f0105300 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105192:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105199:	e9 4e 01 00 00       	jmp    f01052ec <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010519e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a1:	c1 e0 04             	shl    $0x4,%eax
f01051a4:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01051a9:	8b 00                	mov    (%eax),%eax
f01051ab:	85 c0                	test   %eax,%eax
f01051ad:	0f 84 30 01 00 00    	je     f01052e3 <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051bd:	c1 e0 04             	shl    $0x4,%eax
f01051c0:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01051c5:	8b 00                	mov    (%eax),%eax
f01051c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ca:	e9 d4 00 00 00       	jmp    f01052a3 <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051d5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051d8:	0f 85 b5 00 00 00    	jne    f0105293 <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051e2:	75 17                	jne    f01051fb <sched_exit_env+0xe6>
f01051e4:	83 ec 04             	sub    $0x4,%esp
f01051e7:	68 84 47 13 f0       	push   $0xf0134784
f01051ec:	68 e1 01 00 00       	push   $0x1e1
f01051f1:	68 73 47 13 f0       	push   $0xf0134773
f01051f6:	e8 ab af ff ff       	call   f01001a6 <_panic>
f01051fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051fe:	8b 40 44             	mov    0x44(%eax),%eax
f0105201:	85 c0                	test   %eax,%eax
f0105203:	74 11                	je     f0105216 <sched_exit_env+0x101>
f0105205:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105208:	8b 40 44             	mov    0x44(%eax),%eax
f010520b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010520e:	8b 52 48             	mov    0x48(%edx),%edx
f0105211:	89 50 48             	mov    %edx,0x48(%eax)
f0105214:	eb 14                	jmp    f010522a <sched_exit_env+0x115>
f0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105219:	8b 40 48             	mov    0x48(%eax),%eax
f010521c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010521f:	c1 e2 04             	shl    $0x4,%edx
f0105222:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f0105228:	89 02                	mov    %eax,(%edx)
f010522a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010522d:	8b 40 48             	mov    0x48(%eax),%eax
f0105230:	85 c0                	test   %eax,%eax
f0105232:	74 11                	je     f0105245 <sched_exit_env+0x130>
f0105234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105237:	8b 40 48             	mov    0x48(%eax),%eax
f010523a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523d:	8b 52 44             	mov    0x44(%edx),%edx
f0105240:	89 50 44             	mov    %edx,0x44(%eax)
f0105243:	eb 14                	jmp    f0105259 <sched_exit_env+0x144>
f0105245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105248:	8b 40 44             	mov    0x44(%eax),%eax
f010524b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010524e:	c1 e2 04             	shl    $0x4,%edx
f0105251:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0105257:	89 02                	mov    %eax,(%edx)
f0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010525c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105266:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010526d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105270:	c1 e0 04             	shl    $0x4,%eax
f0105273:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105278:	8b 00                	mov    (%eax),%eax
f010527a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010527d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105280:	c1 e0 04             	shl    $0x4,%eax
f0105283:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105288:	89 10                	mov    %edx,(%eax)
						found = 1;
f010528a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105291:	eb 50                	jmp    f01052e3 <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105296:	c1 e0 04             	shl    $0x4,%eax
f0105299:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f010529e:	8b 00                	mov    (%eax),%eax
f01052a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052a7:	74 08                	je     f01052b1 <sched_exit_env+0x19c>
f01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052ac:	8b 40 44             	mov    0x44(%eax),%eax
f01052af:	eb 05                	jmp    f01052b6 <sched_exit_env+0x1a1>
f01052b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01052b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052b9:	c1 e2 04             	shl    $0x4,%edx
f01052bc:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f01052c2:	89 02                	mov    %eax,(%edx)
f01052c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052c7:	c1 e0 04             	shl    $0x4,%eax
f01052ca:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f01052cf:	8b 00                	mov    (%eax),%eax
f01052d1:	85 c0                	test   %eax,%eax
f01052d3:	0f 85 f6 fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
f01052d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052dd:	0f 85 ec fe ff ff    	jne    f01051cf <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052e7:	75 16                	jne    f01052ff <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052e9:	ff 45 ec             	incl   -0x14(%ebp)
f01052ec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01052f1:	0f b6 c0             	movzbl %al,%eax
f01052f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052f7:	0f 8f a1 fe ff ff    	jg     f010519e <sched_exit_env+0x89>
f01052fd:	eb 01                	jmp    f0105300 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01052ff:	90                   	nop
		}
	}
	if (!found)
f0105300:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105304:	75 1c                	jne    f0105322 <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f0105306:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010530b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010530e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105311:	75 0f                	jne    f0105322 <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f0105313:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0105318:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010531b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105322:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105326:	74 2a                	je     f0105352 <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105328:	83 ec 0c             	sub    $0xc,%esp
f010532b:	ff 75 f4             	pushl  -0xc(%ebp)
f010532e:	e8 92 f6 ff ff       	call   f01049c5 <sched_insert_exit>
f0105333:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0105336:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010533b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010533e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105341:	75 0f                	jne    f0105352 <sched_exit_env+0x23d>
		{
			curenv = NULL;
f0105343:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f010534a:	00 00 00 
			fos_scheduler();
f010534d:	e8 99 f2 ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105352:	90                   	nop
f0105353:	c9                   	leave  
f0105354:	c3                   	ret    

f0105355 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105355:	55                   	push   %ebp
f0105356:	89 e5                	mov    %esp,%ebp
f0105358:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010535b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105362:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105369:	e9 3e 01 00 00       	jmp    f01054ac <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010536e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105371:	c1 e0 04             	shl    $0x4,%eax
f0105374:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0105379:	8b 00                	mov    (%eax),%eax
f010537b:	85 c0                	test   %eax,%eax
f010537d:	0f 84 26 01 00 00    	je     f01054a9 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010538d:	c1 e0 04             	shl    $0x4,%eax
f0105390:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f0105395:	8b 00                	mov    (%eax),%eax
f0105397:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010539a:	e9 ca 00 00 00       	jmp    f0105469 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010539f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a3:	75 17                	jne    f01053bc <sched_exit_all_ready_envs+0x67>
f01053a5:	83 ec 04             	sub    $0x4,%esp
f01053a8:	68 84 47 13 f0       	push   $0xf0134784
f01053ad:	68 0c 02 00 00       	push   $0x20c
f01053b2:	68 73 47 13 f0       	push   $0xf0134773
f01053b7:	e8 ea ad ff ff       	call   f01001a6 <_panic>
f01053bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053bf:	8b 40 44             	mov    0x44(%eax),%eax
f01053c2:	85 c0                	test   %eax,%eax
f01053c4:	74 11                	je     f01053d7 <sched_exit_all_ready_envs+0x82>
f01053c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c9:	8b 40 44             	mov    0x44(%eax),%eax
f01053cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053cf:	8b 52 48             	mov    0x48(%edx),%edx
f01053d2:	89 50 48             	mov    %edx,0x48(%eax)
f01053d5:	eb 14                	jmp    f01053eb <sched_exit_all_ready_envs+0x96>
f01053d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053da:	8b 40 48             	mov    0x48(%eax),%eax
f01053dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e0:	c1 e2 04             	shl    $0x4,%edx
f01053e3:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f01053e9:	89 02                	mov    %eax,(%edx)
f01053eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ee:	8b 40 48             	mov    0x48(%eax),%eax
f01053f1:	85 c0                	test   %eax,%eax
f01053f3:	74 11                	je     f0105406 <sched_exit_all_ready_envs+0xb1>
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 48             	mov    0x48(%eax),%eax
f01053fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053fe:	8b 52 44             	mov    0x44(%edx),%edx
f0105401:	89 50 44             	mov    %edx,0x44(%eax)
f0105404:	eb 14                	jmp    f010541a <sched_exit_all_ready_envs+0xc5>
f0105406:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105409:	8b 40 44             	mov    0x44(%eax),%eax
f010540c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010540f:	c1 e2 04             	shl    $0x4,%edx
f0105412:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f0105418:	89 02                	mov    %eax,(%edx)
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105424:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105427:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010542e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105431:	c1 e0 04             	shl    $0x4,%eax
f0105434:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105439:	8b 00                	mov    (%eax),%eax
f010543b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010543e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105441:	c1 e0 04             	shl    $0x4,%eax
f0105444:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f0105449:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010544b:	83 ec 0c             	sub    $0xc,%esp
f010544e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105451:	e8 6f f5 ff ff       	call   f01049c5 <sched_insert_exit>
f0105456:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105459:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010545c:	c1 e0 04             	shl    $0x4,%eax
f010545f:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105464:	8b 00                	mov    (%eax),%eax
f0105466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010546d:	74 08                	je     f0105477 <sched_exit_all_ready_envs+0x122>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	eb 05                	jmp    f010547c <sched_exit_all_ready_envs+0x127>
f0105477:	b8 00 00 00 00       	mov    $0x0,%eax
f010547c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010547f:	c1 e2 04             	shl    $0x4,%edx
f0105482:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f0105488:	89 02                	mov    %eax,(%edx)
f010548a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010548d:	c1 e0 04             	shl    $0x4,%eax
f0105490:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105495:	8b 00                	mov    (%eax),%eax
f0105497:	85 c0                	test   %eax,%eax
f0105499:	0f 85 00 ff ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>
f010549f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054a3:	0f 85 f6 fe ff ff    	jne    f010539f <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054a9:	ff 45 f0             	incl   -0x10(%ebp)
f01054ac:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01054b1:	0f b6 c0             	movzbl %al,%eax
f01054b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054b7:	0f 8f b1 fe ff ff    	jg     f010536e <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054bd:	90                   	nop
f01054be:	c9                   	leave  
f01054bf:	c3                   	ret    

f01054c0 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c0:	55                   	push   %ebp
f01054c1:	89 e5                	mov    %esp,%ebp
f01054c3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054d8:	0f 85 a0 00 00 00    	jne    f010557e <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054de:	a1 98 74 6e f0       	mov    0xf06e7498,%eax
f01054e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054e6:	eb 67                	jmp    f010554f <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054eb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ee:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f1:	75 54                	jne    f0105547 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f6:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01054fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105502:	83 ec 04             	sub    $0x4,%esp
f0105505:	52                   	push   %edx
f0105506:	50                   	push   %eax
f0105507:	68 cc 49 13 f0       	push   $0xf01349cc
f010550c:	e8 1c b7 ff ff       	call   f0100c2d <cprintf>
f0105511:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105514:	83 ec 0c             	sub    $0xc,%esp
f0105517:	ff 75 f4             	pushl  -0xc(%ebp)
f010551a:	e8 01 f4 ff ff       	call   f0104920 <sched_remove_new>
f010551f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105522:	83 ec 0c             	sub    $0xc,%esp
f0105525:	ff 75 f4             	pushl  -0xc(%ebp)
f0105528:	e8 3e 38 00 00       	call   f0108d6b <env_free>
f010552d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105530:	83 ec 0c             	sub    $0xc,%esp
f0105533:	68 4b 49 13 f0       	push   $0xf013494b
f0105538:	e8 f0 b6 ff ff       	call   f0100c2d <cprintf>
f010553d:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105540:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105547:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010554c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010554f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105553:	74 08                	je     f010555d <sched_kill_env+0x9d>
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 44             	mov    0x44(%eax),%eax
f010555b:	eb 05                	jmp    f0105562 <sched_kill_env+0xa2>
f010555d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105562:	a3 a0 74 6e f0       	mov    %eax,0xf06e74a0
f0105567:	a1 a0 74 6e f0       	mov    0xf06e74a0,%eax
f010556c:	85 c0                	test   %eax,%eax
f010556e:	0f 85 74 ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
f0105574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105578:	0f 85 6a ff ff ff    	jne    f01054e8 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010557e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105582:	0f 85 ad 01 00 00    	jne    f0105735 <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105588:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010558f:	e9 8d 01 00 00       	jmp    f0105721 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105597:	c1 e0 04             	shl    $0x4,%eax
f010559a:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f010559f:	8b 00                	mov    (%eax),%eax
f01055a1:	85 c0                	test   %eax,%eax
f01055a3:	0f 84 6f 01 00 00    	je     f0105718 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055b3:	c1 e0 04             	shl    $0x4,%eax
f01055b6:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f01055bb:	8b 00                	mov    (%eax),%eax
f01055bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c0:	e9 13 01 00 00       	jmp    f01056d8 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055ce:	0f 85 f4 00 00 00    	jne    f01056c8 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d7:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01055e6:	52                   	push   %edx
f01055e7:	50                   	push   %eax
f01055e8:	68 f4 49 13 f0       	push   $0xf01349f4
f01055ed:	e8 3b b6 ff ff       	call   f0100c2d <cprintf>
f01055f2:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055f9:	75 17                	jne    f0105612 <sched_kill_env+0x152>
f01055fb:	83 ec 04             	sub    $0x4,%esp
f01055fe:	68 84 47 13 f0       	push   $0xf0134784
f0105603:	68 33 02 00 00       	push   $0x233
f0105608:	68 73 47 13 f0       	push   $0xf0134773
f010560d:	e8 94 ab ff ff       	call   f01001a6 <_panic>
f0105612:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105615:	8b 40 44             	mov    0x44(%eax),%eax
f0105618:	85 c0                	test   %eax,%eax
f010561a:	74 11                	je     f010562d <sched_kill_env+0x16d>
f010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561f:	8b 40 44             	mov    0x44(%eax),%eax
f0105622:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105625:	8b 52 48             	mov    0x48(%edx),%edx
f0105628:	89 50 48             	mov    %edx,0x48(%eax)
f010562b:	eb 14                	jmp    f0105641 <sched_kill_env+0x181>
f010562d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105630:	8b 40 48             	mov    0x48(%eax),%eax
f0105633:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105636:	c1 e2 04             	shl    $0x4,%edx
f0105639:	81 c2 10 f1 67 f0    	add    $0xf067f110,%edx
f010563f:	89 02                	mov    %eax,(%edx)
f0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105644:	8b 40 48             	mov    0x48(%eax),%eax
f0105647:	85 c0                	test   %eax,%eax
f0105649:	74 11                	je     f010565c <sched_kill_env+0x19c>
f010564b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564e:	8b 40 48             	mov    0x48(%eax),%eax
f0105651:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105654:	8b 52 44             	mov    0x44(%edx),%edx
f0105657:	89 50 44             	mov    %edx,0x44(%eax)
f010565a:	eb 14                	jmp    f0105670 <sched_kill_env+0x1b0>
f010565c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565f:	8b 40 44             	mov    0x44(%eax),%eax
f0105662:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105665:	c1 e2 04             	shl    $0x4,%edx
f0105668:	81 c2 0c f1 67 f0    	add    $0xf067f10c,%edx
f010566e:	89 02                	mov    %eax,(%edx)
f0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105673:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105687:	c1 e0 04             	shl    $0x4,%eax
f010568a:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f010568f:	8b 00                	mov    (%eax),%eax
f0105691:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105697:	c1 e0 04             	shl    $0x4,%eax
f010569a:	05 18 f1 67 f0       	add    $0xf067f118,%eax
f010569f:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a1:	83 ec 0c             	sub    $0xc,%esp
f01056a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01056a7:	e8 bf 36 00 00       	call   f0108d6b <env_free>
f01056ac:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056af:	83 ec 0c             	sub    $0xc,%esp
f01056b2:	68 4b 49 13 f0       	push   $0xf013494b
f01056b7:	e8 71 b5 ff ff       	call   f0100c2d <cprintf>
f01056bc:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056c6:	eb 50                	jmp    f0105718 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056cb:	c1 e0 04             	shl    $0x4,%eax
f01056ce:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f01056d3:	8b 00                	mov    (%eax),%eax
f01056d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056dc:	74 08                	je     f01056e6 <sched_kill_env+0x226>
f01056de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e1:	8b 40 44             	mov    0x44(%eax),%eax
f01056e4:	eb 05                	jmp    f01056eb <sched_kill_env+0x22b>
f01056e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056ee:	c1 e2 04             	shl    $0x4,%edx
f01056f1:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f01056f7:	89 02                	mov    %eax,(%edx)
f01056f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056fc:	c1 e0 04             	shl    $0x4,%eax
f01056ff:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f0105704:	8b 00                	mov    (%eax),%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 b7 fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 ad fe ff ff    	jne    f01055c5 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	75 16                	jne    f0105734 <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010571e:	ff 45 ec             	incl   -0x14(%ebp)
f0105721:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0105726:	0f b6 c0             	movzbl %al,%eax
f0105729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010572c:	0f 8f 62 fe ff ff    	jg     f0105594 <sched_kill_env+0xd4>
f0105732:	eb 01                	jmp    f0105735 <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f0105734:	90                   	nop
		}
	}
	if (!found)
f0105735:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105739:	0f 85 a7 00 00 00    	jne    f01057e6 <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f010573f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105746:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f010574b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010574e:	eb 67                	jmp    f01057b7 <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105750:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105753:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105756:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105759:	75 54                	jne    f01057af <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010575b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105767:	8b 40 4c             	mov    0x4c(%eax),%eax
f010576a:	83 ec 04             	sub    $0x4,%esp
f010576d:	52                   	push   %edx
f010576e:	50                   	push   %eax
f010576f:	68 20 4a 13 f0       	push   $0xf0134a20
f0105774:	e8 b4 b4 ff ff       	call   f0100c2d <cprintf>
f0105779:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010577c:	83 ec 0c             	sub    $0xc,%esp
f010577f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105782:	e8 81 f2 ff ff       	call   f0104a08 <sched_remove_exit>
f0105787:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010578a:	83 ec 0c             	sub    $0xc,%esp
f010578d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105790:	e8 d6 35 00 00       	call   f0108d6b <env_free>
f0105795:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105798:	83 ec 0c             	sub    $0xc,%esp
f010579b:	68 4b 49 13 f0       	push   $0xf013494b
f01057a0:	e8 88 b4 ff ff       	call   f0100c2d <cprintf>
f01057a5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057a8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057af:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01057b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057bb:	74 08                	je     f01057c5 <sched_kill_env+0x305>
f01057bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c0:	8b 40 44             	mov    0x44(%eax),%eax
f01057c3:	eb 05                	jmp    f01057ca <sched_kill_env+0x30a>
f01057c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01057ca:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f01057cf:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f01057d4:	85 c0                	test   %eax,%eax
f01057d6:	0f 85 74 ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
f01057dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e0:	0f 85 6a ff ff ff    	jne    f0105750 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057ea:	0f 85 a0 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01057f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fb:	0f 85 8f 00 00 00    	jne    f0105890 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105801:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580f:	83 f8 02             	cmp    $0x2,%eax
f0105812:	74 19                	je     f010582d <sched_kill_env+0x36d>
f0105814:	68 48 4a 13 f0       	push   $0xf0134a48
f0105819:	68 68 4a 13 f0       	push   $0xf0134a68
f010581e:	68 56 02 00 00       	push   $0x256
f0105823:	68 73 47 13 f0       	push   $0xf0134773
f0105828:	e8 79 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105836:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105839:	8b 40 4c             	mov    0x4c(%eax),%eax
f010583c:	83 ec 04             	sub    $0x4,%esp
f010583f:	52                   	push   %edx
f0105840:	50                   	push   %eax
f0105841:	68 80 4a 13 f0       	push   $0xf0134a80
f0105846:	e8 e2 b3 ff ff       	call   f0100c2d <cprintf>
f010584b:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010584e:	83 ec 0c             	sub    $0xc,%esp
f0105851:	ff 75 f4             	pushl  -0xc(%ebp)
f0105854:	e8 12 35 00 00       	call   f0108d6b <env_free>
f0105859:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010585c:	83 ec 0c             	sub    $0xc,%esp
f010585f:	68 4b 49 13 f0       	push   $0xf013494b
f0105864:	e8 c4 b3 ff ff       	call   f0100c2d <cprintf>
f0105869:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010586c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105873:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0105878:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010587b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010587e:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105881:	c7 05 34 77 65 f0 00 	movl   $0x0,0xf0657734
f0105888:	00 00 00 
			fos_scheduler();
f010588b:	e8 5b ed ff ff       	call   f01045eb <fos_scheduler>
		}
	}
}
f0105890:	90                   	nop
f0105891:	c9                   	leave  
f0105892:	c3                   	ret    

f0105893 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105893:	55                   	push   %ebp
f0105894:	89 e5                	mov    %esp,%ebp
f0105896:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105899:	83 ec 0c             	sub    $0xc,%esp
f010589c:	6a 01                	push   $0x1
f010589e:	e8 a4 76 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f01058a3:	83 c4 10             	add    $0x10,%esp
f01058a6:	85 c0                	test   %eax,%eax
f01058a8:	74 05                	je     f01058af <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058aa:	e8 05 00 00 00       	call   f01058b4 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058af:	e8 37 ed ff ff       	call   f01045eb <fos_scheduler>

f01058b4 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058b4:	55                   	push   %ebp
f01058b5:	89 e5                	mov    %esp,%ebp
f01058b7:	53                   	push   %ebx
f01058b8:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058bb:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01058c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058c7:	0f 84 cf 01 00 00    	je     f0105a9c <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	e9 ce 00 00 00       	jmp    f01059a7 <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058d9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	89 d0                	mov    %edx,%eax
f01058e1:	01 c0                	add    %eax,%eax
f01058e3:	01 d0                	add    %edx,%eax
f01058e5:	c1 e0 03             	shl    $0x3,%eax
f01058e8:	01 c8                	add    %ecx,%eax
f01058ea:	83 c0 7c             	add    $0x7c,%eax
f01058ed:	8a 00                	mov    (%eax),%al
f01058ef:	3c 01                	cmp    $0x1,%al
f01058f1:	0f 84 ad 00 00 00    	je     f01059a4 <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058f7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058fd:	89 d0                	mov    %edx,%eax
f01058ff:	01 c0                	add    %eax,%eax
f0105901:	01 d0                	add    %edx,%eax
f0105903:	c1 e0 03             	shl    $0x3,%eax
f0105906:	01 c8                	add    %ecx,%eax
f0105908:	83 c0 78             	add    $0x78,%eax
f010590b:	8b 00                	mov    (%eax),%eax
f010590d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105910:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105913:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105916:	83 ec 08             	sub    $0x8,%esp
f0105919:	ff 75 e8             	pushl  -0x18(%ebp)
f010591c:	50                   	push   %eax
f010591d:	e8 a4 1b 00 00       	call   f01074c6 <pt_get_page_permissions>
f0105922:	83 c4 10             	add    $0x10,%esp
f0105925:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105928:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010592e:	89 d0                	mov    %edx,%eax
f0105930:	01 c0                	add    %eax,%eax
f0105932:	01 d0                	add    %edx,%eax
f0105934:	c1 e0 03             	shl    $0x3,%eax
f0105937:	01 c8                	add    %ecx,%eax
f0105939:	83 e8 80             	sub    $0xffffff80,%eax
f010593c:	8b 00                	mov    (%eax),%eax
f010593e:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105941:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105944:	83 e0 20             	and    $0x20,%eax
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 3b                	je     f0105986 <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010594b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010594e:	c1 e8 02             	shr    $0x2,%eax
f0105951:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105956:	89 c1                	mov    %eax,%ecx
f0105958:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010595b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010595e:	89 d0                	mov    %edx,%eax
f0105960:	01 c0                	add    %eax,%eax
f0105962:	01 d0                	add    %edx,%eax
f0105964:	c1 e0 03             	shl    $0x3,%eax
f0105967:	01 d8                	add    %ebx,%eax
f0105969:	83 e8 80             	sub    $0xffffff80,%eax
f010596c:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010596e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105971:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105974:	6a 20                	push   $0x20
f0105976:	6a 00                	push   $0x0
f0105978:	ff 75 e8             	pushl  -0x18(%ebp)
f010597b:	50                   	push   %eax
f010597c:	e8 2b 1b 00 00       	call   f01074ac <pt_set_page_permissions>
f0105981:	83 c4 10             	add    $0x10,%esp
f0105984:	eb 1e                	jmp    f01059a4 <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105986:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105989:	c1 e8 02             	shr    $0x2,%eax
f010598c:	89 c1                	mov    %eax,%ecx
f010598e:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105994:	89 d0                	mov    %edx,%eax
f0105996:	01 c0                	add    %eax,%eax
f0105998:	01 d0                	add    %edx,%eax
f010599a:	c1 e0 03             	shl    $0x3,%eax
f010599d:	01 d8                	add    %ebx,%eax
f010599f:	83 e8 80             	sub    $0xffffff80,%eax
f01059a2:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059a4:	ff 45 f4             	incl   -0xc(%ebp)
f01059a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059aa:	8b 50 74             	mov    0x74(%eax),%edx
f01059ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b0:	39 c2                	cmp    %eax,%edx
f01059b2:	0f 87 21 ff ff ff    	ja     f01058d9 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059bf:	e9 ce 00 00 00       	jmp    f0105a92 <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059c4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ca:	89 d0                	mov    %edx,%eax
f01059cc:	01 c0                	add    %eax,%eax
f01059ce:	01 d0                	add    %edx,%eax
f01059d0:	c1 e0 03             	shl    $0x3,%eax
f01059d3:	01 c8                	add    %ecx,%eax
f01059d5:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059da:	8a 00                	mov    (%eax),%al
f01059dc:	3c 01                	cmp    $0x1,%al
f01059de:	0f 84 ab 00 00 00    	je     f0105a8f <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059e4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059e7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059ea:	89 d0                	mov    %edx,%eax
f01059ec:	01 c0                	add    %eax,%eax
f01059ee:	01 d0                	add    %edx,%eax
f01059f0:	c1 e0 03             	shl    $0x3,%eax
f01059f3:	01 c8                	add    %ecx,%eax
f01059f5:	05 38 d5 01 00       	add    $0x1d538,%eax
f01059fa:	8b 00                	mov    (%eax),%eax
f01059fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f01059ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a02:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a05:	89 d0                	mov    %edx,%eax
f0105a07:	01 c0                	add    %eax,%eax
f0105a09:	01 d0                	add    %edx,%eax
f0105a0b:	c1 e0 03             	shl    $0x3,%eax
f0105a0e:	01 c8                	add    %ecx,%eax
f0105a10:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a15:	8b 00                	mov    (%eax),%eax
f0105a17:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a20:	83 ec 08             	sub    $0x8,%esp
f0105a23:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a26:	50                   	push   %eax
f0105a27:	e8 e8 1a 00 00       	call   f0107514 <pd_is_table_used>
f0105a2c:	83 c4 10             	add    $0x10,%esp
f0105a2f:	85 c0                	test   %eax,%eax
f0105a31:	74 3c                	je     f0105a6f <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a33:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a36:	c1 e8 02             	shr    $0x2,%eax
f0105a39:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a3e:	89 c1                	mov    %eax,%ecx
f0105a40:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a43:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a46:	89 d0                	mov    %edx,%eax
f0105a48:	01 c0                	add    %eax,%eax
f0105a4a:	01 d0                	add    %edx,%eax
f0105a4c:	c1 e0 03             	shl    $0x3,%eax
f0105a4f:	01 d8                	add    %ebx,%eax
f0105a51:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a56:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a5e:	83 ec 08             	sub    $0x8,%esp
f0105a61:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a64:	50                   	push   %eax
f0105a65:	e8 ce 1a 00 00       	call   f0107538 <pd_set_table_unused>
f0105a6a:	83 c4 10             	add    $0x10,%esp
f0105a6d:	eb 20                	jmp    f0105a8f <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a6f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a72:	c1 e8 02             	shr    $0x2,%eax
f0105a75:	89 c1                	mov    %eax,%ecx
f0105a77:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a7d:	89 d0                	mov    %edx,%eax
f0105a7f:	01 c0                	add    %eax,%eax
f0105a81:	01 d0                	add    %edx,%eax
f0105a83:	c1 e0 03             	shl    $0x3,%eax
f0105a86:	01 d8                	add    %ebx,%eax
f0105a88:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a8d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a8f:	ff 45 f0             	incl   -0x10(%ebp)
f0105a92:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a96:	0f 8e 28 ff ff ff    	jle    f01059c4 <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105a9c:	90                   	nop
f0105a9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa0:	c9                   	leave  
f0105aa1:	c3                   	ret    

f0105aa2 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aa2:	55                   	push   %ebp
f0105aa3:	89 e5                	mov    %esp,%ebp
f0105aa5:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105aa8:	c7 05 2c 77 65 f0 01 	movl   $0x1,0xf065772c
f0105aaf:	00 00 00 
f0105ab2:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ab9:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105abd:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac3:	ee                   	out    %al,(%dx)
f0105ac4:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105acb:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105acf:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ad2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ad5:	ee                   	out    %al,(%dx)
f0105ad6:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105add:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae1:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105ae4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105ae7:	ee                   	out    %al,(%dx)
f0105ae8:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105aef:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105af3:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105af6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105af9:	ee                   	out    %al,(%dx)
f0105afa:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b01:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b05:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b0b:	ee                   	out    %al,(%dx)
f0105b0c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b13:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b17:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b1a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b1d:	ee                   	out    %al,(%dx)
f0105b1e:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b25:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b29:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b2f:	ee                   	out    %al,(%dx)
f0105b30:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b37:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b3b:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b41:	ee                   	out    %al,(%dx)
f0105b42:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b49:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b4d:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b53:	ee                   	out    %al,(%dx)
f0105b54:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b5b:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b5f:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b62:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b65:	ee                   	out    %al,(%dx)
f0105b66:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b6d:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b71:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b74:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b77:	ee                   	out    %al,(%dx)
f0105b78:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b7f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b83:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b89:	ee                   	out    %al,(%dx)
f0105b8a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b91:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b95:	8a 45 be             	mov    -0x42(%ebp),%al
f0105b98:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105b9b:	ee                   	out    %al,(%dx)
f0105b9c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105ba3:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105ba7:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105baa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bad:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bae:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0105bb4:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bb8:	74 15                	je     f0105bcf <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bba:	66 a1 b0 f8 18 f0    	mov    0xf018f8b0,%ax
f0105bc0:	0f b7 c0             	movzwl %ax,%eax
f0105bc3:	83 ec 0c             	sub    $0xc,%esp
f0105bc6:	50                   	push   %eax
f0105bc7:	e8 06 00 00 00       	call   f0105bd2 <irq_setmask_8259A>
f0105bcc:	83 c4 10             	add    $0x10,%esp
}
f0105bcf:	90                   	nop
f0105bd0:	c9                   	leave  
f0105bd1:	c3                   	ret    

f0105bd2 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bd2:	55                   	push   %ebp
f0105bd3:	89 e5                	mov    %esp,%ebp
f0105bd5:	83 ec 14             	sub    $0x14,%esp
f0105bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bdb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105be2:	66 a3 b0 f8 18 f0    	mov    %ax,0xf018f8b0
	if (!didinit)
f0105be8:	a1 2c 77 65 f0       	mov    0xf065772c,%eax
f0105bed:	85 c0                	test   %eax,%eax
f0105bef:	74 34                	je     f0105c25 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bf4:	0f b6 c0             	movzbl %al,%eax
f0105bf7:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105bfe:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c01:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c04:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c07:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c0b:	66 c1 e8 08          	shr    $0x8,%ax
f0105c0f:	0f b6 c0             	movzbl %al,%eax
f0105c12:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c19:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c1c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c1f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c22:	ee                   	out    %al,(%dx)
f0105c23:	eb 01                	jmp    f0105c26 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c25:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c26:	c9                   	leave  
f0105c27:	c3                   	ret    

f0105c28 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c28:	55                   	push   %ebp
f0105c29:	89 e5                	mov    %esp,%ebp
f0105c2b:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c2e:	83 ec 08             	sub    $0x8,%esp
f0105c31:	68 00 10 00 00       	push   $0x1000
f0105c36:	68 00 10 00 00       	push   $0x1000
f0105c3b:	e8 5d 02 00 00       	call   f0105e9d <boot_allocate_space>
f0105c40:	83 c4 10             	add    $0x10,%esp
f0105c43:	a3 d8 74 6e f0       	mov    %eax,0xf06e74d8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c48:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105c4d:	83 ec 04             	sub    $0x4,%esp
f0105c50:	68 00 10 00 00       	push   $0x1000
f0105c55:	6a 00                	push   $0x0
f0105c57:	50                   	push   %eax
f0105c58:	e8 f6 a5 02 00       	call   f0130253 <memset>
f0105c5d:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c60:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105c65:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c68:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c6f:	77 14                	ja     f0105c85 <initialize_kernel_VM+0x5d>
f0105c71:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c74:	68 ac 4a 13 f0       	push   $0xf0134aac
f0105c79:	6a 45                	push   $0x45
f0105c7b:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0105c80:	e8 21 a5 ff ff       	call   f01001a6 <_panic>
f0105c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c88:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c8d:	a3 08 75 6e f0       	mov    %eax,0xf06e7508
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c92:	c7 45 e4 00 70 18 f0 	movl   $0xf0187000,-0x1c(%ebp)
f0105c99:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca0:	77 14                	ja     f0105cb6 <initialize_kernel_VM+0x8e>
f0105ca2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ca5:	68 ac 4a 13 f0       	push   $0xf0134aac
f0105caa:	6a 4d                	push   $0x4d
f0105cac:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0105cb1:	e8 f0 a4 ff ff       	call   f01001a6 <_panic>
f0105cb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cb9:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cbf:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105cc4:	83 ec 0c             	sub    $0xc,%esp
f0105cc7:	6a 02                	push   $0x2
f0105cc9:	52                   	push   %edx
f0105cca:	68 00 80 00 00       	push   $0x8000
f0105ccf:	68 00 80 bf ef       	push   $0xefbf8000
f0105cd4:	50                   	push   %eax
f0105cd5:	e8 24 02 00 00       	call   f0105efe <boot_map_range>
f0105cda:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105cdd:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105ce4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105ceb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cf2:	eb 25                	jmp    f0105d19 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cf4:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cf7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105cfa:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105cff:	83 ec 04             	sub    $0x4,%esp
f0105d02:	6a 01                	push   $0x1
f0105d04:	52                   	push   %edx
f0105d05:	50                   	push   %eax
f0105d06:	e8 67 02 00 00       	call   f0105f72 <boot_get_page_table>
f0105d0b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d0e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d15:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1d:	72 d5                	jb     f0105cf4 <initialize_kernel_VM+0xcc>
f0105d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d23:	77 06                	ja     f0105d2b <initialize_kernel_VM+0x103>
f0105d25:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d29:	76 c9                	jbe    f0105cf4 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d2b:	8b 15 70 74 6e f0    	mov    0xf06e7470,%edx
f0105d31:	89 d0                	mov    %edx,%eax
f0105d33:	01 c0                	add    %eax,%eax
f0105d35:	01 d0                	add    %edx,%eax
f0105d37:	c1 e0 03             	shl    $0x3,%eax
f0105d3a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d3d:	83 ec 08             	sub    $0x8,%esp
f0105d40:	68 00 10 00 00       	push   $0x1000
f0105d45:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d48:	e8 50 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d4d:	83 c4 10             	add    $0x10,%esp
f0105d50:	a3 b0 74 6e f0       	mov    %eax,0xf06e74b0
	memset(frames_info, 0, array_size);
f0105d55:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f0105d5a:	83 ec 04             	sub    $0x4,%esp
f0105d5d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d60:	6a 00                	push   $0x0
f0105d62:	50                   	push   %eax
f0105d63:	e8 eb a4 02 00       	call   f0130253 <memset>
f0105d68:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d6b:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d72:	83 ec 08             	sub    $0x8,%esp
f0105d75:	68 00 10 00 00       	push   $0x1000
f0105d7a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d7d:	e8 1b 01 00 00       	call   f0105e9d <boot_allocate_space>
f0105d82:	83 c4 10             	add    $0x10,%esp
f0105d85:	a3 00 f1 67 f0       	mov    %eax,0xf067f100
	memset(disk_frames_info , 0, disk_array_size);
f0105d8a:	a1 00 f1 67 f0       	mov    0xf067f100,%eax
f0105d8f:	83 ec 04             	sub    $0x4,%esp
f0105d92:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d95:	6a 00                	push   $0x0
f0105d97:	50                   	push   %eax
f0105d98:	e8 b6 a4 02 00       	call   f0130253 <memset>
f0105d9d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da0:	e8 02 05 00 00       	call   f01062a7 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105da5:	83 ec 0c             	sub    $0xc,%esp
f0105da8:	6a 08                	push   $0x8
f0105daa:	e8 41 90 02 00       	call   f012edf0 <nearest_pow2_ceil>
f0105daf:	83 c4 10             	add    $0x10,%esp
f0105db2:	83 ec 04             	sub    $0x4,%esp
f0105db5:	50                   	push   %eax
f0105db6:	6a 08                	push   $0x8
f0105db8:	68 00 4b 13 f0       	push   $0xf0134b00
f0105dbd:	e8 6b ae ff ff       	call   f0100c2d <cprintf>
f0105dc2:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dc5:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dcf:	83 ec 08             	sub    $0x8,%esp
f0105dd2:	68 00 10 00 00       	push   $0x1000
f0105dd7:	50                   	push   %eax
f0105dd8:	e8 c0 00 00 00       	call   f0105e9d <boot_allocate_space>
f0105ddd:	83 c4 10             	add    $0x10,%esp
f0105de0:	a3 30 77 65 f0       	mov    %eax,0xf0657730
	memset(envs , 0, envs_size);
f0105de5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105de8:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f0105ded:	83 ec 04             	sub    $0x4,%esp
f0105df0:	52                   	push   %edx
f0105df1:	6a 00                	push   $0x0
f0105df3:	50                   	push   %eax
f0105df4:	e8 5a a4 02 00       	call   f0130253 <memset>
f0105df9:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105dfc:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f0105e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e04:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e0b:	77 17                	ja     f0105e24 <initialize_kernel_VM+0x1fc>
f0105e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e10:	68 ac 4a 13 f0       	push   $0xf0134aac
f0105e15:	68 96 00 00 00       	push   $0x96
f0105e1a:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0105e1f:	e8 82 a3 ff ff       	call   f01001a6 <_panic>
f0105e24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e27:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e2d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e30:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e35:	83 ec 0c             	sub    $0xc,%esp
f0105e38:	6a 04                	push   $0x4
f0105e3a:	51                   	push   %ecx
f0105e3b:	52                   	push   %edx
f0105e3c:	68 00 00 c0 ee       	push   $0xeec00000
f0105e41:	50                   	push   %eax
f0105e42:	e8 b7 00 00 00       	call   f0105efe <boot_map_range>
f0105e47:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e4a:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e4f:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e54:	8b 15 d8 74 6e f0    	mov    0xf06e74d8,%edx
f0105e5a:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e60:	8b 12                	mov    (%edx),%edx
f0105e62:	83 ca 05             	or     $0x5,%edx
f0105e65:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e67:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0105e6c:	83 ec 0c             	sub    $0xc,%esp
f0105e6f:	6a 02                	push   $0x2
f0105e71:	6a 00                	push   $0x0
f0105e73:	68 ff ff ff 0f       	push   $0xfffffff
f0105e78:	68 00 00 00 f0       	push   $0xf0000000
f0105e7d:	50                   	push   %eax
f0105e7e:	e8 7b 00 00 00       	call   f0105efe <boot_map_range>
f0105e83:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e86:	e8 3c 97 02 00       	call   f012f5c7 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e8b:	c7 05 60 50 6e f0 19 	movl   $0x19,0xf06e5060
f0105e92:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e95:	e8 0d 03 00 00       	call   f01061a7 <turn_on_paging>
}
f0105e9a:	90                   	nop
f0105e9b:	c9                   	leave  
f0105e9c:	c3                   	ret    

f0105e9d <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105e9d:	55                   	push   %ebp
f0105e9e:	89 e5                	mov    %esp,%ebp
f0105ea0:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105ea3:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ea8:	85 c0                	test   %eax,%eax
f0105eaa:	75 0a                	jne    f0105eb6 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eac:	c7 05 d4 74 6e f0 1c 	movl   $0xf06e761c,0xf06e74d4
f0105eb3:	76 6e f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ebc:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ec1:	89 c2                	mov    %eax,%edx
f0105ec3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ec6:	01 d0                	add    %edx,%eax
f0105ec8:	48                   	dec    %eax
f0105ec9:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ecc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105ed4:	f7 75 fc             	divl   -0x4(%ebp)
f0105ed7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105eda:	29 d0                	sub    %edx,%eax
f0105edc:	a3 d4 74 6e f0       	mov    %eax,0xf06e74d4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f0105ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ee9:	8b 15 d4 74 6e f0    	mov    0xf06e74d4,%edx
f0105eef:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ef2:	01 d0                	add    %edx,%eax
f0105ef4:	a3 d4 74 6e f0       	mov    %eax,0xf06e74d4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105efc:	c9                   	leave  
f0105efd:	c3                   	ret    

f0105efe <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105efe:	55                   	push   %ebp
f0105eff:	89 e5                	mov    %esp,%ebp
f0105f01:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f12:	eb 53                	jmp    f0105f67 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f14:	83 ec 04             	sub    $0x4,%esp
f0105f17:	6a 01                	push   $0x1
f0105f19:	ff 75 0c             	pushl  0xc(%ebp)
f0105f1c:	ff 75 08             	pushl  0x8(%ebp)
f0105f1f:	e8 4e 00 00 00       	call   f0105f72 <boot_get_page_table>
f0105f24:	83 c4 10             	add    $0x10,%esp
f0105f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f2d:	c1 e8 0c             	shr    $0xc,%eax
f0105f30:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f45:	01 c2                	add    %eax,%edx
f0105f47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f4a:	0b 45 14             	or     0x14(%ebp),%eax
f0105f4d:	83 c8 01             	or     $0x1,%eax
f0105f50:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f52:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f60:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f6a:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f6d:	72 a5                	jb     f0105f14 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f6f:	90                   	nop
f0105f70:	c9                   	leave  
f0105f71:	c3                   	ret    

f0105f72 <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f72:	55                   	push   %ebp
f0105f73:	89 e5                	mov    %esp,%ebp
f0105f75:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f7b:	c1 e8 16             	shr    $0x16,%eax
f0105f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f8e:	01 d0                	add    %edx,%eax
f0105f90:	8b 00                	mov    (%eax),%eax
f0105f92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f98:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fa3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fa6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fa9:	c1 e8 0c             	shr    $0xc,%eax
f0105fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105faf:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0105fb4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fb7:	72 17                	jb     f0105fd0 <boot_get_page_table+0x5e>
f0105fb9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fbc:	68 28 4b 13 f0       	push   $0xf0134b28
f0105fc1:	68 15 01 00 00       	push   $0x115
f0105fc6:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0105fcb:	e8 d6 a1 ff ff       	call   f01001a6 <_panic>
f0105fd0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fd3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fdb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fdf:	75 72                	jne    f0106053 <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fe5:	74 65                	je     f010604c <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fe7:	83 ec 08             	sub    $0x8,%esp
f0105fea:	68 00 10 00 00       	push   $0x1000
f0105fef:	68 00 10 00 00       	push   $0x1000
f0105ff4:	e8 a4 fe ff ff       	call   f0105e9d <boot_allocate_space>
f0105ff9:	83 c4 10             	add    $0x10,%esp
f0105ffc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0105fff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106002:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106005:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010600c:	77 17                	ja     f0106025 <boot_get_page_table+0xb3>
f010600e:	ff 75 dc             	pushl  -0x24(%ebp)
f0106011:	68 ac 4a 13 f0       	push   $0xf0134aac
f0106016:	68 1b 01 00 00       	push   $0x11b
f010601b:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0106020:	e8 81 a1 ff ff       	call   f01001a6 <_panic>
f0106025:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106028:	05 00 00 00 10       	add    $0x10000000,%eax
f010602d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010603a:	8b 45 08             	mov    0x8(%ebp),%eax
f010603d:	01 d0                	add    %edx,%eax
f010603f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106042:	83 ca 03             	or     $0x3,%edx
f0106045:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010604a:	eb 0a                	jmp    f0106056 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f010604c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106051:	eb 03                	jmp    f0106056 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106053:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106056:	c9                   	leave  
f0106057:	c3                   	ret    

f0106058 <nvram_read>:


int nvram_read(int r)
{
f0106058:	55                   	push   %ebp
f0106059:	89 e5                	mov    %esp,%ebp
f010605b:	53                   	push   %ebx
f010605c:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010605f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106062:	83 ec 0c             	sub    $0xc,%esp
f0106065:	50                   	push   %eax
f0106066:	e8 37 df ff ff       	call   f0103fa2 <mc146818_read>
f010606b:	83 c4 10             	add    $0x10,%esp
f010606e:	89 c3                	mov    %eax,%ebx
f0106070:	8b 45 08             	mov    0x8(%ebp),%eax
f0106073:	40                   	inc    %eax
f0106074:	83 ec 0c             	sub    $0xc,%esp
f0106077:	50                   	push   %eax
f0106078:	e8 25 df ff ff       	call   f0103fa2 <mc146818_read>
f010607d:	83 c4 10             	add    $0x10,%esp
f0106080:	c1 e0 08             	shl    $0x8,%eax
f0106083:	09 d8                	or     %ebx,%eax
}
f0106085:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106088:	c9                   	leave  
f0106089:	c3                   	ret    

f010608a <detect_memory>:

void detect_memory()
{
f010608a:	55                   	push   %ebp
f010608b:	89 e5                	mov    %esp,%ebp
f010608d:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106090:	83 ec 0c             	sub    $0xc,%esp
f0106093:	6a 15                	push   $0x15
f0106095:	e8 be ff ff ff       	call   f0106058 <nvram_read>
f010609a:	83 c4 10             	add    $0x10,%esp
f010609d:	c1 e0 0a             	shl    $0xa,%eax
f01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060ae:	83 ec 0c             	sub    $0xc,%esp
f01060b1:	6a 17                	push   $0x17
f01060b3:	e8 a0 ff ff ff       	call   f0106058 <nvram_read>
f01060b8:	83 c4 10             	add    $0x10,%esp
f01060bb:	c1 e0 0a             	shl    $0xa,%eax
f01060be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060cc:	83 ec 0c             	sub    $0xc,%esp
f01060cf:	6a 34                	push   $0x34
f01060d1:	e8 82 ff ff ff       	call   f0106058 <nvram_read>
f01060d6:	83 c4 10             	add    $0x10,%esp
f01060d9:	c1 e0 10             	shl    $0x10,%eax
f01060dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060ea:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060ee:	74 18                	je     f0106108 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060f3:	05 00 00 00 01       	add    $0x1000000,%eax
f01060f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01060fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060fe:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106103:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106106:	eb 19                	jmp    f0106121 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106108:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010610c:	74 0d                	je     f010611b <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f010610e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106111:	05 00 00 10 00       	add    $0x100000,%eax
f0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106119:	eb 06                	jmp    f0106121 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f010611b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106121:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010612e:	76 32                	jbe    f0106162 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106130:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106133:	c1 e8 0a             	shr    $0xa,%eax
f0106136:	89 c2                	mov    %eax,%edx
f0106138:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	83 ec 04             	sub    $0x4,%esp
f0106141:	52                   	push   %edx
f0106142:	50                   	push   %eax
f0106143:	68 58 4b 13 f0       	push   $0xf0134b58
f0106148:	e8 e0 aa ff ff       	call   f0100c2d <cprintf>
f010614d:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	68 a0 4b 13 f0       	push   $0xf0134ba0
f0106158:	e8 d0 aa ff ff       	call   f0100c2d <cprintf>
f010615d:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106160:	eb fe                	jmp    f0106160 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106162:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106165:	c1 e8 0c             	shr    $0xc,%eax
f0106168:	a3 70 74 6e f0       	mov    %eax,0xf06e7470

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010616d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106170:	c1 e8 0a             	shr    $0xa,%eax
f0106173:	83 ec 08             	sub    $0x8,%esp
f0106176:	50                   	push   %eax
f0106177:	68 34 4c 13 f0       	push   $0xf0134c34
f010617c:	e8 ac aa ff ff       	call   f0100c2d <cprintf>
f0106181:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106184:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106187:	c1 e8 0a             	shr    $0xa,%eax
f010618a:	89 c2                	mov    %eax,%edx
f010618c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	83 ec 04             	sub    $0x4,%esp
f0106195:	52                   	push   %edx
f0106196:	50                   	push   %eax
f0106197:	68 55 4c 13 f0       	push   $0xf0134c55
f010619c:	e8 8c aa ff ff       	call   f0100c2d <cprintf>
f01061a1:	83 c4 10             	add    $0x10,%esp
}
f01061a4:	90                   	nop
f01061a5:	c9                   	leave  
f01061a6:	c3                   	ret    

f01061a7 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061a7:	55                   	push   %ebp
f01061a8:	89 e5                	mov    %esp,%ebp
f01061aa:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061ad:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061bb:	eb 24                	jmp    f01061e1 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061bd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01061c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061c5:	c1 e2 02             	shl    $0x2,%edx
f01061c8:	01 c2                	add    %eax,%edx
f01061ca:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01061cf:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061d2:	c1 e1 02             	shl    $0x2,%ecx
f01061d5:	01 c8                	add    %ecx,%eax
f01061d7:	8b 00                	mov    (%eax),%eax
f01061d9:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061db:	ff 45 fc             	incl   -0x4(%ebp)
f01061de:	ff 45 f8             	incl   -0x8(%ebp)
f01061e1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f01061e6:	c1 e8 16             	shr    $0x16,%eax
f01061e9:	89 c2                	mov    %eax,%edx
f01061eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061ee:	39 c2                	cmp    %eax,%edx
f01061f0:	77 cb                	ja     f01061bd <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061f2:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01061f7:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01061fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01061fd:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106200:	0f 20 c0             	mov    %cr0,%eax
f0106203:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106206:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010620c:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106213:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010621a:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010621d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106220:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106223:	0f 01 15 f0 f8 18 f0 	lgdtl  0xf018f8f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010622a:	b8 23 00 00 00       	mov    $0x23,%eax
f010622f:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106231:	b8 23 00 00 00       	mov    $0x23,%eax
f0106236:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106238:	b8 10 00 00 00       	mov    $0x10,%eax
f010623d:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010623f:	b8 10 00 00 00       	mov    $0x10,%eax
f0106244:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106246:	b8 10 00 00 00       	mov    $0x10,%eax
f010624b:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010624d:	ea 54 62 10 f0 08 00 	ljmp   $0x8,$0xf0106254
	asm volatile("lldt %%ax" :: "a" (0));
f0106254:	b8 00 00 00 00       	mov    $0x0,%eax
f0106259:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010625c:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106263:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010626a:	eb 19                	jmp    f0106285 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010626c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0106271:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106274:	c1 e2 02             	shl    $0x2,%edx
f0106277:	01 d0                	add    %edx,%eax
f0106279:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010627f:	ff 45 f4             	incl   -0xc(%ebp)
f0106282:	ff 45 f0             	incl   -0x10(%ebp)
f0106285:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f010628a:	c1 e8 16             	shr    $0x16,%eax
f010628d:	89 c2                	mov    %eax,%edx
f010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106292:	39 c2                	cmp    %eax,%edx
f0106294:	77 d6                	ja     f010626c <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106296:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f010629b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010629e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a1:	0f 22 d8             	mov    %eax,%cr3
}
f01062a4:	90                   	nop
f01062a5:	c9                   	leave  
f01062a6:	c3                   	ret    

f01062a7 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062a7:	55                   	push   %ebp
f01062a8:	89 e5                	mov    %esp,%ebp
f01062aa:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062ad:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b5:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062bc:	77 17                	ja     f01062d5 <setup_listing_to_all_page_tables_entries+0x2e>
f01062be:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c1:	68 ac 4a 13 f0       	push   $0xf0134aac
f01062c6:	68 ab 01 00 00       	push   $0x1ab
f01062cb:	68 e0 4a 13 f0       	push   $0xf0134ae0
f01062d0:	e8 d1 9e ff ff       	call   f01001a6 <_panic>
f01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d8:	05 00 00 00 10       	add    $0x10000000,%eax
f01062dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e0:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062e5:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062ed:	83 ca 03             	or     $0x3,%edx
f01062f0:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062f2:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01062f7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01062fd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0106302:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106305:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010630c:	77 17                	ja     f0106325 <setup_listing_to_all_page_tables_entries+0x7e>
f010630e:	ff 75 ec             	pushl  -0x14(%ebp)
f0106311:	68 ac 4a 13 f0       	push   $0xf0134aac
f0106316:	68 b0 01 00 00       	push   $0x1b0
f010631b:	68 e0 4a 13 f0       	push   $0xf0134ae0
f0106320:	e8 81 9e ff ff       	call   f01001a6 <_panic>
f0106325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106328:	05 00 00 00 10       	add    $0x10000000,%eax
f010632d:	83 c8 05             	or     $0x5,%eax
f0106330:	89 02                	mov    %eax,(%edx)

}
f0106332:	90                   	nop
f0106333:	c9                   	leave  
f0106334:	c3                   	ret    

f0106335 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106335:	55                   	push   %ebp
f0106336:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106338:	8b 45 08             	mov    0x8(%ebp),%eax
f010633b:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106341:	29 d0                	sub    %edx,%eax
f0106343:	c1 f8 03             	sar    $0x3,%eax
f0106346:	89 c2                	mov    %eax,%edx
f0106348:	89 d0                	mov    %edx,%eax
f010634a:	c1 e0 02             	shl    $0x2,%eax
f010634d:	01 d0                	add    %edx,%eax
f010634f:	c1 e0 02             	shl    $0x2,%eax
f0106352:	01 d0                	add    %edx,%eax
f0106354:	c1 e0 02             	shl    $0x2,%eax
f0106357:	01 d0                	add    %edx,%eax
f0106359:	89 c1                	mov    %eax,%ecx
f010635b:	c1 e1 08             	shl    $0x8,%ecx
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	89 c1                	mov    %eax,%ecx
f0106362:	c1 e1 10             	shl    $0x10,%ecx
f0106365:	01 c8                	add    %ecx,%eax
f0106367:	01 c0                	add    %eax,%eax
f0106369:	01 d0                	add    %edx,%eax
}
f010636b:	5d                   	pop    %ebp
f010636c:	c3                   	ret    

f010636d <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010636d:	55                   	push   %ebp
f010636e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106370:	ff 75 08             	pushl  0x8(%ebp)
f0106373:	e8 bd ff ff ff       	call   f0106335 <to_frame_number>
f0106378:	83 c4 04             	add    $0x4,%esp
f010637b:	c1 e0 0c             	shl    $0xc,%eax
}
f010637e:	c9                   	leave  
f010637f:	c3                   	ret    

f0106380 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106380:	55                   	push   %ebp
f0106381:	89 e5                	mov    %esp,%ebp
f0106383:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106386:	8b 45 08             	mov    0x8(%ebp),%eax
f0106389:	c1 e8 0c             	shr    $0xc,%eax
f010638c:	89 c2                	mov    %eax,%edx
f010638e:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106393:	39 c2                	cmp    %eax,%edx
f0106395:	72 14                	jb     f01063ab <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106397:	83 ec 04             	sub    $0x4,%esp
f010639a:	68 74 4c 13 f0       	push   $0xf0134c74
f010639f:	6a 55                	push   $0x55
f01063a1:	68 99 4c 13 f0       	push   $0xf0134c99
f01063a6:	e8 fb 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063ab:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f01063b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01063b4:	c1 e8 0c             	shr    $0xc,%eax
f01063b7:	89 c1                	mov    %eax,%ecx
f01063b9:	89 c8                	mov    %ecx,%eax
f01063bb:	01 c0                	add    %eax,%eax
f01063bd:	01 c8                	add    %ecx,%eax
f01063bf:	c1 e0 03             	shl    $0x3,%eax
f01063c2:	01 d0                	add    %edx,%eax
}
f01063c4:	c9                   	leave  
f01063c5:	c3                   	ret    

f01063c6 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063c6:	55                   	push   %ebp
f01063c7:	89 e5                	mov    %esp,%ebp
f01063c9:	83 ec 10             	sub    $0x10,%esp
f01063cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063d5:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063d8:	90                   	nop
f01063d9:	c9                   	leave  
f01063da:	c3                   	ret    

f01063db <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063db:	55                   	push   %ebp
f01063dc:	89 e5                	mov    %esp,%ebp
f01063de:	53                   	push   %ebx
f01063df:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063e2:	c7 05 78 74 6e f0 00 	movl   $0x0,0xf06e7478
f01063e9:	00 00 00 
f01063ec:	c7 05 7c 74 6e f0 00 	movl   $0x0,0xf06e747c
f01063f3:	00 00 00 
f01063f6:	c7 05 84 74 6e f0 00 	movl   $0x0,0xf06e7484
f01063fd:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106400:	c7 05 e0 7f 65 f0 00 	movl   $0x0,0xf0657fe0
f0106407:	00 00 00 
f010640a:	c7 05 e4 7f 65 f0 00 	movl   $0x0,0xf0657fe4
f0106411:	00 00 00 
f0106414:	c7 05 ec 7f 65 f0 00 	movl   $0x0,0xf0657fec
f010641b:	00 00 00 

	frames_info[0].references = 1;
f010641e:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f0106423:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106429:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f010642e:	83 c0 18             	add    $0x18,%eax
f0106431:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106437:	a1 b0 74 6e f0       	mov    0xf06e74b0,%eax
f010643c:	83 c0 30             	add    $0x30,%eax
f010643f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106445:	c7 05 bc 74 6e f0 00 	movl   $0xf0001000,0xf06e74bc
f010644c:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010644f:	c7 05 e0 74 6e f0 00 	movl   $0xf0002000,0xf06e74e0
f0106456:	20 00 f0 
	i =0;
f0106459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106460:	eb 1f                	jmp    f0106481 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106462:	8b 15 bc 74 6e f0    	mov    0xf06e74bc,%edx
f0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010646b:	01 d0                	add    %edx,%eax
f010646d:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106470:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f0106476:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106479:	01 d0                	add    %edx,%eax
f010647b:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f010647e:	ff 45 f4             	incl   -0xc(%ebp)
f0106481:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106488:	7e d8                	jle    f0106462 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f010648a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106494:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106499:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649f:	ba 00 00 00 00       	mov    $0x0,%edx
f01064a4:	f7 75 f0             	divl   -0x10(%ebp)
f01064a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064aa:	29 d0                	sub    %edx,%eax
f01064ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064af:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064b6:	e9 e8 00 00 00       	jmp    f01065a3 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064bb:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01064c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064c4:	89 d0                	mov    %edx,%eax
f01064c6:	01 c0                	add    %eax,%eax
f01064c8:	01 d0                	add    %edx,%eax
f01064ca:	c1 e0 03             	shl    $0x3,%eax
f01064cd:	01 c8                	add    %ecx,%eax
f01064cf:	83 ec 0c             	sub    $0xc,%esp
f01064d2:	50                   	push   %eax
f01064d3:	e8 b7 02 00 00       	call   f010678f <initialize_frame_info>
f01064d8:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064db:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01064e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064e4:	89 d0                	mov    %edx,%eax
f01064e6:	01 c0                	add    %eax,%eax
f01064e8:	01 d0                	add    %edx,%eax
f01064ea:	c1 e0 03             	shl    $0x3,%eax
f01064ed:	01 c8                	add    %ecx,%eax
f01064ef:	85 c0                	test   %eax,%eax
f01064f1:	75 14                	jne    f0106507 <initialize_paging+0x12c>
f01064f3:	83 ec 04             	sub    $0x4,%esp
f01064f6:	68 b4 4c 13 f0       	push   $0xf0134cb4
f01064fb:	6a 5c                	push   $0x5c
f01064fd:	68 d7 4c 13 f0       	push   $0xf0134cd7
f0106502:	e8 9f 9c ff ff       	call   f01001a6 <_panic>
f0106507:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010650d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106510:	89 d0                	mov    %edx,%eax
f0106512:	01 c0                	add    %eax,%eax
f0106514:	01 d0                	add    %edx,%eax
f0106516:	c1 e0 03             	shl    $0x3,%eax
f0106519:	01 c8                	add    %ecx,%eax
f010651b:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f0106521:	89 10                	mov    %edx,(%eax)
f0106523:	8b 00                	mov    (%eax),%eax
f0106525:	85 c0                	test   %eax,%eax
f0106527:	74 1f                	je     f0106548 <initialize_paging+0x16d>
f0106529:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f010652f:	8b 1d b0 74 6e f0    	mov    0xf06e74b0,%ebx
f0106535:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106538:	89 c8                	mov    %ecx,%eax
f010653a:	01 c0                	add    %eax,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 03             	shl    $0x3,%eax
f0106541:	01 d8                	add    %ebx,%eax
f0106543:	89 42 04             	mov    %eax,0x4(%edx)
f0106546:	eb 19                	jmp    f0106561 <initialize_paging+0x186>
f0106548:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010654e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106551:	89 d0                	mov    %edx,%eax
f0106553:	01 c0                	add    %eax,%eax
f0106555:	01 d0                	add    %edx,%eax
f0106557:	c1 e0 03             	shl    $0x3,%eax
f010655a:	01 c8                	add    %ecx,%eax
f010655c:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106561:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010656a:	89 d0                	mov    %edx,%eax
f010656c:	01 c0                	add    %eax,%eax
f010656e:	01 d0                	add    %edx,%eax
f0106570:	c1 e0 03             	shl    $0x3,%eax
f0106573:	01 c8                	add    %ecx,%eax
f0106575:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f010657a:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106580:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106583:	89 d0                	mov    %edx,%eax
f0106585:	01 c0                	add    %eax,%eax
f0106587:	01 d0                	add    %edx,%eax
f0106589:	c1 e0 03             	shl    $0x3,%eax
f010658c:	01 c8                	add    %ecx,%eax
f010658e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106595:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010659a:	40                   	inc    %eax
f010659b:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a0:	ff 45 f4             	incl   -0xc(%ebp)
f01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065a6:	85 c0                	test   %eax,%eax
f01065a8:	79 05                	jns    f01065af <initialize_paging+0x1d4>
f01065aa:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065af:	c1 f8 0c             	sar    $0xc,%eax
f01065b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065b5:	0f 8f 00 ff ff ff    	jg     f01064bb <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065bb:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065c2:	eb 1d                	jmp    f01065e1 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065c4:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01065ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065cd:	89 d0                	mov    %edx,%eax
f01065cf:	01 c0                	add    %eax,%eax
f01065d1:	01 d0                	add    %edx,%eax
f01065d3:	c1 e0 03             	shl    $0x3,%eax
f01065d6:	01 c8                	add    %ecx,%eax
f01065d8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065de:	ff 45 f4             	incl   -0xc(%ebp)
f01065e1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065e8:	7e da                	jle    f01065c4 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065ea:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f1:	a1 d4 74 6e f0       	mov    0xf06e74d4,%eax
f01065f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01065f9:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106600:	77 14                	ja     f0106616 <initialize_paging+0x23b>
f0106602:	ff 75 e0             	pushl  -0x20(%ebp)
f0106605:	68 f4 4c 13 f0       	push   $0xf0134cf4
f010660a:	6a 64                	push   $0x64
f010660c:	68 d7 4c 13 f0       	push   $0xf0134cd7
f0106611:	e8 90 9b ff ff       	call   f01001a6 <_panic>
f0106616:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106619:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010661f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106622:	01 d0                	add    %edx,%eax
f0106624:	48                   	dec    %eax
f0106625:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106628:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010662b:	ba 00 00 00 00       	mov    $0x0,%edx
f0106630:	f7 75 e4             	divl   -0x1c(%ebp)
f0106633:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106636:	29 d0                	sub    %edx,%eax
f0106638:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010663b:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106642:	eb 1d                	jmp    f0106661 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106644:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010664a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010664d:	89 d0                	mov    %edx,%eax
f010664f:	01 c0                	add    %eax,%eax
f0106651:	01 d0                	add    %edx,%eax
f0106653:	c1 e0 03             	shl    $0x3,%eax
f0106656:	01 c8                	add    %ecx,%eax
f0106658:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010665e:	ff 45 f4             	incl   -0xc(%ebp)
f0106661:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106664:	85 c0                	test   %eax,%eax
f0106666:	79 05                	jns    f010666d <initialize_paging+0x292>
f0106668:	05 ff 0f 00 00       	add    $0xfff,%eax
f010666d:	c1 f8 0c             	sar    $0xc,%eax
f0106670:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106673:	7f cf                	jg     f0106644 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106675:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106678:	85 c0                	test   %eax,%eax
f010667a:	79 05                	jns    f0106681 <initialize_paging+0x2a6>
f010667c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106681:	c1 f8 0c             	sar    $0xc,%eax
f0106684:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106687:	e9 e8 00 00 00       	jmp    f0106774 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f010668c:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106692:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106695:	89 d0                	mov    %edx,%eax
f0106697:	01 c0                	add    %eax,%eax
f0106699:	01 d0                	add    %edx,%eax
f010669b:	c1 e0 03             	shl    $0x3,%eax
f010669e:	01 c8                	add    %ecx,%eax
f01066a0:	83 ec 0c             	sub    $0xc,%esp
f01066a3:	50                   	push   %eax
f01066a4:	e8 e6 00 00 00       	call   f010678f <initialize_frame_info>
f01066a9:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066ac:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01066b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b5:	89 d0                	mov    %edx,%eax
f01066b7:	01 c0                	add    %eax,%eax
f01066b9:	01 d0                	add    %edx,%eax
f01066bb:	c1 e0 03             	shl    $0x3,%eax
f01066be:	01 c8                	add    %ecx,%eax
f01066c0:	85 c0                	test   %eax,%eax
f01066c2:	75 14                	jne    f01066d8 <initialize_paging+0x2fd>
f01066c4:	83 ec 04             	sub    $0x4,%esp
f01066c7:	68 b4 4c 13 f0       	push   $0xf0134cb4
f01066cc:	6a 70                	push   $0x70
f01066ce:	68 d7 4c 13 f0       	push   $0xf0134cd7
f01066d3:	e8 ce 9a ff ff       	call   f01001a6 <_panic>
f01066d8:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f01066de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e1:	89 d0                	mov    %edx,%eax
f01066e3:	01 c0                	add    %eax,%eax
f01066e5:	01 d0                	add    %edx,%eax
f01066e7:	c1 e0 03             	shl    $0x3,%eax
f01066ea:	01 c8                	add    %ecx,%eax
f01066ec:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01066f2:	89 10                	mov    %edx,(%eax)
f01066f4:	8b 00                	mov    (%eax),%eax
f01066f6:	85 c0                	test   %eax,%eax
f01066f8:	74 1f                	je     f0106719 <initialize_paging+0x33e>
f01066fa:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f0106700:	8b 1d b0 74 6e f0    	mov    0xf06e74b0,%ebx
f0106706:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106709:	89 c8                	mov    %ecx,%eax
f010670b:	01 c0                	add    %eax,%eax
f010670d:	01 c8                	add    %ecx,%eax
f010670f:	c1 e0 03             	shl    $0x3,%eax
f0106712:	01 d8                	add    %ebx,%eax
f0106714:	89 42 04             	mov    %eax,0x4(%edx)
f0106717:	eb 19                	jmp    f0106732 <initialize_paging+0x357>
f0106719:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f010671f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106722:	89 d0                	mov    %edx,%eax
f0106724:	01 c0                	add    %eax,%eax
f0106726:	01 d0                	add    %edx,%eax
f0106728:	c1 e0 03             	shl    $0x3,%eax
f010672b:	01 c8                	add    %ecx,%eax
f010672d:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106732:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106738:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010673b:	89 d0                	mov    %edx,%eax
f010673d:	01 c0                	add    %eax,%eax
f010673f:	01 d0                	add    %edx,%eax
f0106741:	c1 e0 03             	shl    $0x3,%eax
f0106744:	01 c8                	add    %ecx,%eax
f0106746:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f010674b:	8b 0d b0 74 6e f0    	mov    0xf06e74b0,%ecx
f0106751:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106754:	89 d0                	mov    %edx,%eax
f0106756:	01 c0                	add    %eax,%eax
f0106758:	01 d0                	add    %edx,%eax
f010675a:	c1 e0 03             	shl    $0x3,%eax
f010675d:	01 c8                	add    %ecx,%eax
f010675f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106766:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010676b:	40                   	inc    %eax
f010676c:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106771:	ff 45 f4             	incl   -0xc(%ebp)
f0106774:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106777:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010677c:	39 c2                	cmp    %eax,%edx
f010677e:	0f 82 08 ff ff ff    	jb     f010668c <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0106784:	e8 2d c8 ff ff       	call   f0102fb6 <initialize_disk_page_file>
}
f0106789:	90                   	nop
f010678a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010678d:	c9                   	leave  
f010678e:	c3                   	ret    

f010678f <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010678f:	55                   	push   %ebp
f0106790:	89 e5                	mov    %esp,%ebp
f0106792:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106795:	83 ec 04             	sub    $0x4,%esp
f0106798:	6a 18                	push   $0x18
f010679a:	6a 00                	push   $0x0
f010679c:	ff 75 08             	pushl  0x8(%ebp)
f010679f:	e8 af 9a 02 00       	call   f0130253 <memset>
f01067a4:	83 c4 10             	add    $0x10,%esp
}
f01067a7:	90                   	nop
f01067a8:	c9                   	leave  
f01067a9:	c3                   	ret    

f01067aa <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067aa:	55                   	push   %ebp
f01067ab:	89 e5                	mov    %esp,%ebp
f01067ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b0:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01067b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b9:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c5:	8b 00                	mov    (%eax),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	75 17                	jne    f01067e2 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067cb:	83 ec 04             	sub    $0x4,%esp
f01067ce:	68 28 4d 13 f0       	push   $0xf0134d28
f01067d3:	68 99 00 00 00       	push   $0x99
f01067d8:	68 d7 4c 13 f0       	push   $0xf0134cd7
f01067dd:	e8 c4 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e5:	8b 00                	mov    (%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	75 17                	jne    f0106802 <allocate_frame+0x58>
f01067eb:	83 ec 04             	sub    $0x4,%esp
f01067ee:	68 75 4d 13 f0       	push   $0xf0134d75
f01067f3:	68 9c 00 00 00       	push   $0x9c
f01067f8:	68 d7 4c 13 f0       	push   $0xf0134cd7
f01067fd:	e8 a4 99 ff ff       	call   f01001a6 <_panic>
f0106802:	8b 45 08             	mov    0x8(%ebp),%eax
f0106805:	8b 00                	mov    (%eax),%eax
f0106807:	8b 00                	mov    (%eax),%eax
f0106809:	85 c0                	test   %eax,%eax
f010680b:	74 14                	je     f0106821 <allocate_frame+0x77>
f010680d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106810:	8b 00                	mov    (%eax),%eax
f0106812:	8b 00                	mov    (%eax),%eax
f0106814:	8b 55 08             	mov    0x8(%ebp),%edx
f0106817:	8b 12                	mov    (%edx),%edx
f0106819:	8b 52 04             	mov    0x4(%edx),%edx
f010681c:	89 50 04             	mov    %edx,0x4(%eax)
f010681f:	eb 0d                	jmp    f010682e <allocate_frame+0x84>
f0106821:	8b 45 08             	mov    0x8(%ebp),%eax
f0106824:	8b 00                	mov    (%eax),%eax
f0106826:	8b 40 04             	mov    0x4(%eax),%eax
f0106829:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f010682e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106831:	8b 00                	mov    (%eax),%eax
f0106833:	8b 40 04             	mov    0x4(%eax),%eax
f0106836:	85 c0                	test   %eax,%eax
f0106838:	74 13                	je     f010684d <allocate_frame+0xa3>
f010683a:	8b 45 08             	mov    0x8(%ebp),%eax
f010683d:	8b 00                	mov    (%eax),%eax
f010683f:	8b 40 04             	mov    0x4(%eax),%eax
f0106842:	8b 55 08             	mov    0x8(%ebp),%edx
f0106845:	8b 12                	mov    (%edx),%edx
f0106847:	8b 12                	mov    (%edx),%edx
f0106849:	89 10                	mov    %edx,(%eax)
f010684b:	eb 0c                	jmp    f0106859 <allocate_frame+0xaf>
f010684d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106850:	8b 00                	mov    (%eax),%eax
f0106852:	8b 00                	mov    (%eax),%eax
f0106854:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f0106859:	8b 45 08             	mov    0x8(%ebp),%eax
f010685c:	8b 00                	mov    (%eax),%eax
f010685e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106864:	8b 45 08             	mov    0x8(%ebp),%eax
f0106867:	8b 00                	mov    (%eax),%eax
f0106869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106870:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f0106875:	48                   	dec    %eax
f0106876:	a3 84 74 6e f0       	mov    %eax,0xf06e7484

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f010687b:	8b 45 08             	mov    0x8(%ebp),%eax
f010687e:	8b 00                	mov    (%eax),%eax
f0106880:	8a 40 14             	mov    0x14(%eax),%al
f0106883:	84 c0                	test   %al,%al
f0106885:	74 20                	je     f01068a7 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0106887:	8b 45 08             	mov    0x8(%ebp),%eax
f010688a:	8b 00                	mov    (%eax),%eax
f010688c:	8b 50 0c             	mov    0xc(%eax),%edx
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 40 10             	mov    0x10(%eax),%eax
f0106897:	8b 40 5c             	mov    0x5c(%eax),%eax
f010689a:	83 ec 08             	sub    $0x8,%esp
f010689d:	52                   	push   %edx
f010689e:	50                   	push   %eax
f010689f:	e8 3c 0c 00 00       	call   f01074e0 <pt_clear_page_table_entry>
f01068a4:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01068aa:	8b 00                	mov    (%eax),%eax
f01068ac:	83 ec 0c             	sub    $0xc,%esp
f01068af:	50                   	push   %eax
f01068b0:	e8 da fe ff ff       	call   f010678f <initialize_frame_info>
f01068b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068bd:	c9                   	leave  
f01068be:	c3                   	ret    

f01068bf <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068bf:	55                   	push   %ebp
f01068c0:	89 e5                	mov    %esp,%ebp
f01068c2:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068c5:	83 ec 0c             	sub    $0xc,%esp
f01068c8:	ff 75 08             	pushl  0x8(%ebp)
f01068cb:	e8 bf fe ff ff       	call   f010678f <initialize_frame_info>
f01068d0:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068d7:	75 17                	jne    f01068f0 <free_frame+0x31>
f01068d9:	83 ec 04             	sub    $0x4,%esp
f01068dc:	68 b4 4c 13 f0       	push   $0xf0134cb4
f01068e1:	68 b9 00 00 00       	push   $0xb9
f01068e6:	68 d7 4c 13 f0       	push   $0xf0134cd7
f01068eb:	e8 b6 98 ff ff       	call   f01001a6 <_panic>
f01068f0:	8b 15 78 74 6e f0    	mov    0xf06e7478,%edx
f01068f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f9:	89 10                	mov    %edx,(%eax)
f01068fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fe:	8b 00                	mov    (%eax),%eax
f0106900:	85 c0                	test   %eax,%eax
f0106902:	74 0d                	je     f0106911 <free_frame+0x52>
f0106904:	a1 78 74 6e f0       	mov    0xf06e7478,%eax
f0106909:	8b 55 08             	mov    0x8(%ebp),%edx
f010690c:	89 50 04             	mov    %edx,0x4(%eax)
f010690f:	eb 08                	jmp    f0106919 <free_frame+0x5a>
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	a3 7c 74 6e f0       	mov    %eax,0xf06e747c
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 78 74 6e f0       	mov    %eax,0xf06e7478
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010692b:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f0106930:	40                   	inc    %eax
f0106931:	a3 84 74 6e f0       	mov    %eax,0xf06e7484
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106936:	90                   	nop
f0106937:	c9                   	leave  
f0106938:	c3                   	ret    

f0106939 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106939:	55                   	push   %ebp
f010693a:	89 e5                	mov    %esp,%ebp
f010693c:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f010693f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106942:	8b 40 08             	mov    0x8(%eax),%eax
f0106945:	48                   	dec    %eax
f0106946:	8b 55 08             	mov    0x8(%ebp),%edx
f0106949:	66 89 42 08          	mov    %ax,0x8(%edx)
f010694d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106950:	8b 40 08             	mov    0x8(%eax),%eax
f0106953:	66 85 c0             	test   %ax,%ax
f0106956:	75 0e                	jne    f0106966 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106958:	83 ec 0c             	sub    $0xc,%esp
f010695b:	ff 75 08             	pushl  0x8(%ebp)
f010695e:	e8 5c ff ff ff       	call   f01068bf <free_frame>
f0106963:	83 c4 10             	add    $0x10,%esp
}
f0106966:	90                   	nop
f0106967:	c9                   	leave  
f0106968:	c3                   	ret    

f0106969 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106969:	55                   	push   %ebp
f010696a:	89 e5                	mov    %esp,%ebp
f010696c:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010696f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106972:	c1 e8 16             	shr    $0x16,%eax
f0106975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	01 d0                	add    %edx,%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106986:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106989:	83 e0 01             	and    $0x1,%eax
f010698c:	85 c0                	test   %eax,%eax
f010698e:	74 4e                	je     f01069de <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106993:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010699b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010699e:	c1 e8 0c             	shr    $0xc,%eax
f01069a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069a4:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f01069a9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069ac:	72 17                	jb     f01069c5 <get_page_table+0x5c>
f01069ae:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b1:	68 94 4d 13 f0       	push   $0xf0134d94
f01069b6:	68 e2 00 00 00       	push   $0xe2
f01069bb:	68 d7 4c 13 f0       	push   $0xf0134cd7
f01069c0:	e8 e1 97 ff ff       	call   f01001a6 <_panic>
f01069c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069c8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069cd:	89 c2                	mov    %eax,%edx
f01069cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01069d2:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01069d9:	e9 8f 00 00 00       	jmp    f0106a6d <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069e2:	74 7b                	je     f0106a5f <get_page_table+0xf6>
f01069e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e7:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069ed:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f0:	83 ec 0c             	sub    $0xc,%esp
f01069f3:	6a 00                	push   $0x0
f01069f5:	e8 45 4f 00 00       	call   f010b93f <fault_handler>
f01069fa:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a00:	c1 e8 16             	shr    $0x16,%eax
f0106a03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	01 d0                	add    %edx,%eax
f0106a0f:	8b 00                	mov    (%eax),%eax
f0106a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a22:	c1 e8 0c             	shr    $0xc,%eax
f0106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a28:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106a2d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a30:	72 17                	jb     f0106a49 <get_page_table+0xe0>
f0106a32:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a35:	68 94 4d 13 f0       	push   $0xf0134d94
f0106a3a:	68 fa 00 00 00       	push   $0xfa
f0106a3f:	68 d7 4c 13 f0       	push   $0xf0134cd7
f0106a44:	e8 5d 97 ff ff       	call   f01001a6 <_panic>
f0106a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a4c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a51:	89 c2                	mov    %eax,%edx
f0106a53:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a56:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a58:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a5d:	eb 0e                	jmp    f0106a6d <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a5f:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a68:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a6d:	c9                   	leave  
f0106a6e:	c3                   	ret    

f0106a6f <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a6f:	55                   	push   %ebp
f0106a70:	89 e5                	mov    %esp,%ebp
f0106a72:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a75:	83 ec 04             	sub    $0x4,%esp
f0106a78:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a7b:	50                   	push   %eax
f0106a7c:	ff 75 0c             	pushl  0xc(%ebp)
f0106a7f:	ff 75 08             	pushl  0x8(%ebp)
f0106a82:	e8 08 00 00 00       	call   f0106a8f <__static_cpt>
f0106a87:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a8d:	c9                   	leave  
f0106a8e:	c3                   	ret    

f0106a8f <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a8f:	55                   	push   %ebp
f0106a90:	89 e5                	mov    %esp,%ebp
f0106a92:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a95:	83 ec 0c             	sub    $0xc,%esp
f0106a98:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106a9b:	50                   	push   %eax
f0106a9c:	e8 09 fd ff ff       	call   f01067aa <allocate_frame>
f0106aa1:	83 c4 10             	add    $0x10,%esp
f0106aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aa7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aaa:	83 ec 0c             	sub    $0xc,%esp
f0106aad:	50                   	push   %eax
f0106aae:	e8 ba f8 ff ff       	call   f010636d <to_physical_address>
f0106ab3:	83 c4 10             	add    $0x10,%esp
f0106ab6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106abc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ac2:	c1 e8 0c             	shr    $0xc,%eax
f0106ac5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ac8:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106acd:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad0:	72 17                	jb     f0106ae9 <__static_cpt+0x5a>
f0106ad2:	ff 75 ec             	pushl  -0x14(%ebp)
f0106ad5:	68 94 4d 13 f0       	push   $0xf0134d94
f0106ada:	68 30 01 00 00       	push   $0x130
f0106adf:	68 d7 4c 13 f0       	push   $0xf0134cd7
f0106ae4:	e8 bd 96 ff ff       	call   f01001a6 <_panic>
f0106ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af1:	89 c2                	mov    %eax,%edx
f0106af3:	8b 45 10             	mov    0x10(%ebp),%eax
f0106af6:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106af8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106afb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b04:	c1 e8 16             	shr    $0x16,%eax
f0106b07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b11:	01 d0                	add    %edx,%eax
f0106b13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b16:	83 ca 07             	or     $0x7,%edx
f0106b19:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b1e:	8b 00                	mov    (%eax),%eax
f0106b20:	83 ec 04             	sub    $0x4,%esp
f0106b23:	68 00 10 00 00       	push   $0x1000
f0106b28:	6a 00                	push   $0x0
f0106b2a:	50                   	push   %eax
f0106b2b:	e8 23 97 02 00       	call   f0130253 <memset>
f0106b30:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b33:	0f 20 d8             	mov    %cr3,%eax
f0106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b3c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b3f:	90                   	nop
f0106b40:	c9                   	leave  
f0106b41:	c3                   	ret    

f0106b42 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b42:	55                   	push   %ebp
f0106b43:	89 e5                	mov    %esp,%ebp
f0106b45:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b48:	ff 75 0c             	pushl  0xc(%ebp)
f0106b4b:	e8 1d f8 ff ff       	call   f010636d <to_physical_address>
f0106b50:	83 c4 04             	add    $0x4,%esp
f0106b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b56:	83 ec 04             	sub    $0x4,%esp
f0106b59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b5c:	50                   	push   %eax
f0106b5d:	ff 75 10             	pushl  0x10(%ebp)
f0106b60:	ff 75 08             	pushl  0x8(%ebp)
f0106b63:	e8 01 fe ff ff       	call   f0106969 <get_page_table>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	83 f8 01             	cmp    $0x1,%eax
f0106b6e:	75 15                	jne    f0106b85 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b70:	83 ec 04             	sub    $0x4,%esp
f0106b73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b76:	50                   	push   %eax
f0106b77:	ff 75 10             	pushl  0x10(%ebp)
f0106b7a:	ff 75 08             	pushl  0x8(%ebp)
f0106b7d:	e8 0d ff ff ff       	call   f0106a8f <__static_cpt>
f0106b82:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b88:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b8b:	c1 ea 0c             	shr    $0xc,%edx
f0106b8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b94:	c1 e2 02             	shl    $0x2,%edx
f0106b97:	01 d0                	add    %edx,%eax
f0106b99:	8b 00                	mov    (%eax),%eax
f0106b9b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba1:	83 e0 01             	and    $0x1,%eax
f0106ba4:	85 c0                	test   %eax,%eax
f0106ba6:	74 25                	je     f0106bcd <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bb3:	75 07                	jne    f0106bbc <map_frame+0x7a>
			return 0;
f0106bb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bba:	eb 43                	jmp    f0106bff <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bbc:	83 ec 08             	sub    $0x8,%esp
f0106bbf:	ff 75 10             	pushl  0x10(%ebp)
f0106bc2:	ff 75 08             	pushl  0x8(%ebp)
f0106bc5:	e8 a7 00 00 00       	call   f0106c71 <unmap_frame>
f0106bca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd0:	8b 40 08             	mov    0x8(%eax),%eax
f0106bd3:	40                   	inc    %eax
f0106bd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bd7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106bdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bde:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be1:	c1 ea 0c             	shr    $0xc,%edx
f0106be4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bea:	c1 e2 02             	shl    $0x2,%edx
f0106bed:	01 c2                	add    %eax,%edx
f0106bef:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bf2:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bf5:	83 c8 01             	or     $0x1,%eax
f0106bf8:	89 02                	mov    %eax,(%edx)

	return 0;
f0106bfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106bff:	c9                   	leave  
f0106c00:	c3                   	ret    

f0106c01 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c01:	55                   	push   %ebp
f0106c02:	89 e5                	mov    %esp,%ebp
f0106c04:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c07:	83 ec 04             	sub    $0x4,%esp
f0106c0a:	ff 75 10             	pushl  0x10(%ebp)
f0106c0d:	ff 75 0c             	pushl  0xc(%ebp)
f0106c10:	ff 75 08             	pushl  0x8(%ebp)
f0106c13:	e8 51 fd ff ff       	call   f0106969 <get_page_table>
f0106c18:	83 c4 10             	add    $0x10,%esp
f0106c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c1e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c21:	8b 00                	mov    (%eax),%eax
f0106c23:	85 c0                	test   %eax,%eax
f0106c25:	74 43                	je     f0106c6a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2a:	c1 e8 0c             	shr    $0xc,%eax
f0106c2d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c38:	8b 00                	mov    (%eax),%eax
f0106c3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3d:	c1 e2 02             	shl    $0x2,%edx
f0106c40:	01 d0                	add    %edx,%eax
f0106c42:	8b 00                	mov    (%eax),%eax
f0106c44:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4b:	74 16                	je     f0106c63 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c55:	83 ec 0c             	sub    $0xc,%esp
f0106c58:	50                   	push   %eax
f0106c59:	e8 22 f7 ff ff       	call   f0106380 <to_frame_info>
f0106c5e:	83 c4 10             	add    $0x10,%esp
f0106c61:	eb 0c                	jmp    f0106c6f <get_frame_info+0x6e>
		}
		return 0;
f0106c63:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c68:	eb 05                	jmp    f0106c6f <get_frame_info+0x6e>
	}
	return 0;
f0106c6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c6f:	c9                   	leave  
f0106c70:	c3                   	ret    

f0106c71 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c71:	55                   	push   %ebp
f0106c72:	89 e5                	mov    %esp,%ebp
f0106c74:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c77:	83 ec 04             	sub    $0x4,%esp
f0106c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 0c             	pushl  0xc(%ebp)
f0106c81:	ff 75 08             	pushl  0x8(%ebp)
f0106c84:	e8 78 ff ff ff       	call   f0106c01 <get_frame_info>
f0106c89:	83 c4 10             	add    $0x10,%esp
f0106c8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c93:	74 60                	je     f0106cf5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c98:	8a 40 14             	mov    0x14(%eax),%al
f0106c9b:	84 c0                	test   %al,%al
f0106c9d:	74 1c                	je     f0106cbb <unmap_frame+0x4a>
f0106c9f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ca6:	77 13                	ja     f0106cbb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ca8:	83 ec 08             	sub    $0x8,%esp
f0106cab:	ff 75 0c             	pushl  0xc(%ebp)
f0106cae:	68 c4 4d 13 f0       	push   $0xf0134dc4
f0106cb3:	e8 75 9f ff ff       	call   f0100c2d <cprintf>
f0106cb8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cbb:	83 ec 0c             	sub    $0xc,%esp
f0106cbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc1:	e8 73 fc ff ff       	call   f0106939 <decrement_references>
f0106cc6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ccc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ccf:	c1 ea 0c             	shr    $0xc,%edx
f0106cd2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cd8:	c1 e2 02             	shl    $0x2,%edx
f0106cdb:	01 d0                	add    %edx,%eax
f0106cdd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ce3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ce6:	83 ec 08             	sub    $0x8,%esp
f0106ce9:	50                   	push   %eax
f0106cea:	ff 75 08             	pushl  0x8(%ebp)
f0106ced:	e8 d4 f6 ff ff       	call   f01063c6 <tlb_invalidate>
f0106cf2:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cf5:	90                   	nop
f0106cf6:	c9                   	leave  
f0106cf7:	c3                   	ret    

f0106cf8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106cf8:	55                   	push   %ebp
f0106cf9:	89 e5                	mov    %esp,%ebp
f0106cfb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106cfe:	ff 75 0c             	pushl  0xc(%ebp)
f0106d01:	e8 67 f6 ff ff       	call   f010636d <to_physical_address>
f0106d06:	83 c4 04             	add    $0x4,%esp
f0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d0c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d0f:	c1 e8 16             	shr    $0x16,%eax
f0106d12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d1c:	01 d0                	add    %edx,%eax
f0106d1e:	8b 00                	mov    (%eax),%eax
f0106d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d31:	c1 e8 0c             	shr    $0xc,%eax
f0106d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d37:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106d3c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d3f:	72 17                	jb     f0106d58 <loadtime_map_frame+0x60>
f0106d41:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d44:	68 94 4d 13 f0       	push   $0xf0134d94
f0106d49:	68 e6 01 00 00       	push   $0x1e6
f0106d4e:	68 d7 4c 13 f0       	push   $0xf0134cd7
f0106d53:	e8 4e 94 ff ff       	call   f01001a6 <_panic>
f0106d58:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d67:	75 15                	jne    f0106d7e <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d69:	83 ec 04             	sub    $0x4,%esp
f0106d6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d6f:	50                   	push   %eax
f0106d70:	ff 75 10             	pushl  0x10(%ebp)
f0106d73:	ff 75 08             	pushl  0x8(%ebp)
f0106d76:	e8 14 fd ff ff       	call   f0106a8f <__static_cpt>
f0106d7b:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d81:	8b 40 08             	mov    0x8(%eax),%eax
f0106d84:	40                   	inc    %eax
f0106d85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d88:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d8f:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d92:	c1 ea 0c             	shr    $0xc,%edx
f0106d95:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d9b:	c1 e2 02             	shl    $0x2,%edx
f0106d9e:	01 c2                	add    %eax,%edx
f0106da0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106da3:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106da6:	83 c8 01             	or     $0x1,%eax
f0106da9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db0:	c9                   	leave  
f0106db1:	c3                   	ret    

f0106db2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106db2:	55                   	push   %ebp
f0106db3:	89 e5                	mov    %esp,%ebp
f0106db5:	57                   	push   %edi
f0106db6:	56                   	push   %esi
f0106db7:	53                   	push   %ebx
f0106db8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dbb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dc2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dc9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd0:	a1 78 74 6e f0       	mov    0xf06e7478,%eax
f0106dd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dd8:	eb 1a                	jmp    f0106df4 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ddd:	8a 40 14             	mov    0x14(%eax),%al
f0106de0:	84 c0                	test   %al,%al
f0106de2:	74 05                	je     f0106de9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106de4:	ff 45 e8             	incl   -0x18(%ebp)
f0106de7:	eb 03                	jmp    f0106dec <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106de9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106dec:	a1 80 74 6e f0       	mov    0xf06e7480,%eax
f0106df1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106df4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106df8:	74 07                	je     f0106e01 <calculate_available_frames+0x4f>
f0106dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfd:	8b 00                	mov    (%eax),%eax
f0106dff:	eb 05                	jmp    f0106e06 <calculate_available_frames+0x54>
f0106e01:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e06:	a3 80 74 6e f0       	mov    %eax,0xf06e7480
f0106e0b:	a1 80 74 6e f0       	mov    0xf06e7480,%eax
f0106e10:	85 c0                	test   %eax,%eax
f0106e12:	75 c6                	jne    f0106dda <calculate_available_frames+0x28>
f0106e14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e18:	75 c0                	jne    f0106dda <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e1a:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f0106e1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e22:	eb 0b                	jmp    f0106e2f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e24:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e27:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f0106e2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e33:	74 07                	je     f0106e3c <calculate_available_frames+0x8a>
f0106e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e38:	8b 00                	mov    (%eax),%eax
f0106e3a:	eb 05                	jmp    f0106e41 <calculate_available_frames+0x8f>
f0106e3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e41:	a3 e8 7f 65 f0       	mov    %eax,0xf0657fe8
f0106e46:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f0106e4b:	85 c0                	test   %eax,%eax
f0106e4d:	75 d5                	jne    f0106e24 <calculate_available_frames+0x72>
f0106e4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e53:	75 cf                	jne    f0106e24 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e58:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e64:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e6a:	89 c3                	mov    %eax,%ebx
f0106e6c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e6f:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e74:	89 df                	mov    %ebx,%edi
f0106e76:	89 c6                	mov    %eax,%esi
f0106e78:	89 d1                	mov    %edx,%ecx
f0106e7a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e7f:	83 c4 20             	add    $0x20,%esp
f0106e82:	5b                   	pop    %ebx
f0106e83:	5e                   	pop    %esi
f0106e84:	5f                   	pop    %edi
f0106e85:	5d                   	pop    %ebp
f0106e86:	c2 04 00             	ret    $0x4

f0106e89 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e89:	55                   	push   %ebp
f0106e8a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e8f:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106e95:	29 d0                	sub    %edx,%eax
f0106e97:	c1 f8 03             	sar    $0x3,%eax
f0106e9a:	89 c2                	mov    %eax,%edx
f0106e9c:	89 d0                	mov    %edx,%eax
f0106e9e:	c1 e0 02             	shl    $0x2,%eax
f0106ea1:	01 d0                	add    %edx,%eax
f0106ea3:	c1 e0 02             	shl    $0x2,%eax
f0106ea6:	01 d0                	add    %edx,%eax
f0106ea8:	c1 e0 02             	shl    $0x2,%eax
f0106eab:	01 d0                	add    %edx,%eax
f0106ead:	89 c1                	mov    %eax,%ecx
f0106eaf:	c1 e1 08             	shl    $0x8,%ecx
f0106eb2:	01 c8                	add    %ecx,%eax
f0106eb4:	89 c1                	mov    %eax,%ecx
f0106eb6:	c1 e1 10             	shl    $0x10,%ecx
f0106eb9:	01 c8                	add    %ecx,%eax
f0106ebb:	01 c0                	add    %eax,%eax
f0106ebd:	01 d0                	add    %edx,%eax
}
f0106ebf:	5d                   	pop    %ebp
f0106ec0:	c3                   	ret    

f0106ec1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ec4:	ff 75 08             	pushl  0x8(%ebp)
f0106ec7:	e8 bd ff ff ff       	call   f0106e89 <to_frame_number>
f0106ecc:	83 c4 04             	add    $0x4,%esp
f0106ecf:	c1 e0 0c             	shl    $0xc,%eax
}
f0106ed2:	c9                   	leave  
f0106ed3:	c3                   	ret    

f0106ed4 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106ed4:	55                   	push   %ebp
f0106ed5:	89 e5                	mov    %esp,%ebp
f0106ed7:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0106edd:	c1 e8 0c             	shr    $0xc,%eax
f0106ee0:	89 c2                	mov    %eax,%edx
f0106ee2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0106ee7:	39 c2                	cmp    %eax,%edx
f0106ee9:	72 14                	jb     f0106eff <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106eeb:	83 ec 04             	sub    $0x4,%esp
f0106eee:	68 e8 4d 13 f0       	push   $0xf0134de8
f0106ef3:	6a 55                	push   $0x55
f0106ef5:	68 0d 4e 13 f0       	push   $0xf0134e0d
f0106efa:	e8 a7 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106eff:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	c1 e8 0c             	shr    $0xc,%eax
f0106f0b:	89 c1                	mov    %eax,%ecx
f0106f0d:	89 c8                	mov    %ecx,%eax
f0106f0f:	01 c0                	add    %eax,%eax
f0106f11:	01 c8                	add    %ecx,%eax
f0106f13:	c1 e0 03             	shl    $0x3,%eax
f0106f16:	01 d0                	add    %edx,%eax
}
f0106f18:	c9                   	leave  
f0106f19:	c3                   	ret    

f0106f1a <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f1a:	55                   	push   %ebp
f0106f1b:	89 e5                	mov    %esp,%ebp
f0106f1d:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f27:	eb 5f                	jmp    f0106f88 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f2c:	89 d0                	mov    %edx,%eax
f0106f2e:	01 c0                	add    %eax,%eax
f0106f30:	01 d0                	add    %edx,%eax
f0106f32:	01 c0                	add    %eax,%eax
f0106f34:	01 d0                	add    %edx,%eax
f0106f36:	c1 e0 02             	shl    $0x2,%eax
f0106f39:	01 d0                	add    %edx,%eax
f0106f3b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f42:	01 d0                	add    %edx,%eax
f0106f44:	c1 e0 04             	shl    $0x4,%eax
f0106f47:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0106f4c:	83 ec 04             	sub    $0x4,%esp
f0106f4f:	68 50 10 00 00       	push   $0x1050
f0106f54:	6a 00                	push   $0x0
f0106f56:	50                   	push   %eax
f0106f57:	e8 f7 92 02 00       	call   f0130253 <memset>
f0106f5c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f62:	89 d0                	mov    %edx,%eax
f0106f64:	01 c0                	add    %eax,%eax
f0106f66:	01 d0                	add    %edx,%eax
f0106f68:	01 c0                	add    %eax,%eax
f0106f6a:	01 d0                	add    %edx,%eax
f0106f6c:	c1 e0 02             	shl    $0x2,%eax
f0106f6f:	01 d0                	add    %edx,%eax
f0106f71:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f78:	01 d0                	add    %edx,%eax
f0106f7a:	c1 e0 04             	shl    $0x4,%eax
f0106f7d:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0106f82:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f85:	ff 45 f4             	incl   -0xc(%ebp)
f0106f88:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f8c:	7e 9b                	jle    f0106f29 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f8e:	90                   	nop
f0106f8f:	c9                   	leave  
f0106f90:	c3                   	ret    

f0106f91 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f91:	55                   	push   %ebp
f0106f92:	89 e5                	mov    %esp,%ebp
f0106f94:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f97:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fa5:	eb 34                	jmp    f0106fdb <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106fa7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106faa:	89 d0                	mov    %edx,%eax
f0106fac:	01 c0                	add    %eax,%eax
f0106fae:	01 d0                	add    %edx,%eax
f0106fb0:	01 c0                	add    %eax,%eax
f0106fb2:	01 d0                	add    %edx,%eax
f0106fb4:	c1 e0 02             	shl    $0x2,%eax
f0106fb7:	01 d0                	add    %edx,%eax
f0106fb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc0:	01 d0                	add    %edx,%eax
f0106fc2:	c1 e0 04             	shl    $0x4,%eax
f0106fc5:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0106fca:	8a 00                	mov    (%eax),%al
f0106fcc:	84 c0                	test   %al,%al
f0106fce:	74 08                	je     f0106fd8 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fd6:	eb 09                	jmp    f0106fe1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fd8:	ff 45 f0             	incl   -0x10(%ebp)
f0106fdb:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fdf:	7e c6                	jle    f0106fa7 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fe5:	75 14                	jne    f0106ffb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fe7:	83 ec 04             	sub    $0x4,%esp
f0106fea:	68 28 4e 13 f0       	push   $0xf0134e28
f0106fef:	6a 54                	push   $0x54
f0106ff1:	68 78 4e 13 f0       	push   $0xf0134e78
f0106ff6:	e8 ab 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0106ffb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ffe:	89 d0                	mov    %edx,%eax
f0107000:	01 c0                	add    %eax,%eax
f0107002:	01 d0                	add    %edx,%eax
f0107004:	01 c0                	add    %eax,%eax
f0107006:	01 d0                	add    %edx,%eax
f0107008:	c1 e0 02             	shl    $0x2,%eax
f010700b:	01 d0                	add    %edx,%eax
f010700d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107014:	01 d0                	add    %edx,%eax
f0107016:	c1 e0 04             	shl    $0x4,%eax
f0107019:	8d 90 20 f1 67 f0    	lea    -0xf980ee0(%eax),%edx
f010701f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107022:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107024:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107027:	89 d0                	mov    %edx,%eax
f0107029:	01 c0                	add    %eax,%eax
f010702b:	01 d0                	add    %edx,%eax
f010702d:	01 c0                	add    %eax,%eax
f010702f:	01 d0                	add    %edx,%eax
f0107031:	c1 e0 02             	shl    $0x2,%eax
f0107034:	01 d0                	add    %edx,%eax
f0107036:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010703d:	01 d0                	add    %edx,%eax
f010703f:	c1 e0 04             	shl    $0x4,%eax
f0107042:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f0107047:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010704a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010704d:	89 d0                	mov    %edx,%eax
f010704f:	01 c0                	add    %eax,%eax
f0107051:	01 d0                	add    %edx,%eax
f0107053:	01 c0                	add    %eax,%eax
f0107055:	01 d0                	add    %edx,%eax
f0107057:	c1 e0 02             	shl    $0x2,%eax
f010705a:	01 d0                	add    %edx,%eax
f010705c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107063:	01 d0                	add    %edx,%eax
f0107065:	c1 e0 04             	shl    $0x4,%eax
f0107068:	83 c0 50             	add    $0x50,%eax
f010706b:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0107070:	83 ec 04             	sub    $0x4,%esp
f0107073:	68 00 10 00 00       	push   $0x1000
f0107078:	6a 00                	push   $0x0
f010707a:	50                   	push   %eax
f010707b:	e8 d3 91 02 00       	call   f0130253 <memset>
f0107080:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107083:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107086:	c9                   	leave  
f0107087:	c3                   	ret    

f0107088 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107088:	55                   	push   %ebp
f0107089:	89 e5                	mov    %esp,%ebp
f010708b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010708e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107095:	e9 95 00 00 00       	jmp    f010712f <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010709a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010709d:	89 d0                	mov    %edx,%eax
f010709f:	01 c0                	add    %eax,%eax
f01070a1:	01 d0                	add    %edx,%eax
f01070a3:	01 c0                	add    %eax,%eax
f01070a5:	01 d0                	add    %edx,%eax
f01070a7:	c1 e0 02             	shl    $0x2,%eax
f01070aa:	01 d0                	add    %edx,%eax
f01070ac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070b3:	01 d0                	add    %edx,%eax
f01070b5:	c1 e0 04             	shl    $0x4,%eax
f01070b8:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f01070bd:	8a 00                	mov    (%eax),%al
f01070bf:	84 c0                	test   %al,%al
f01070c1:	75 68                	jne    f010712b <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070c6:	89 d0                	mov    %edx,%eax
f01070c8:	01 c0                	add    %eax,%eax
f01070ca:	01 d0                	add    %edx,%eax
f01070cc:	01 c0                	add    %eax,%eax
f01070ce:	01 d0                	add    %edx,%eax
f01070d0:	c1 e0 02             	shl    $0x2,%eax
f01070d3:	01 d0                	add    %edx,%eax
f01070d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070dc:	01 d0                	add    %edx,%eax
f01070de:	c1 e0 04             	shl    $0x4,%eax
f01070e1:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f01070e6:	8b 00                	mov    (%eax),%eax
f01070e8:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070eb:	75 3f                	jne    f010712c <get_share_object_ID+0xa4>
f01070ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f0:	89 d0                	mov    %edx,%eax
f01070f2:	01 c0                	add    %eax,%eax
f01070f4:	01 d0                	add    %edx,%eax
f01070f6:	01 c0                	add    %eax,%eax
f01070f8:	01 d0                	add    %edx,%eax
f01070fa:	c1 e0 02             	shl    $0x2,%eax
f01070fd:	01 d0                	add    %edx,%eax
f01070ff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107106:	01 d0                	add    %edx,%eax
f0107108:	c1 e0 04             	shl    $0x4,%eax
f010710b:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f0107110:	83 c0 04             	add    $0x4,%eax
f0107113:	83 ec 08             	sub    $0x8,%esp
f0107116:	50                   	push   %eax
f0107117:	ff 75 0c             	pushl  0xc(%ebp)
f010711a:	e8 52 90 02 00       	call   f0130171 <strcmp>
f010711f:	83 c4 10             	add    $0x10,%esp
f0107122:	85 c0                	test   %eax,%eax
f0107124:	75 06                	jne    f010712c <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107126:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107129:	eb 13                	jmp    f010713e <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010712b:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010712c:	ff 45 f4             	incl   -0xc(%ebp)
f010712f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107133:	0f 8e 61 ff ff ff    	jle    f010709a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107139:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010713e:	c9                   	leave  
f010713f:	c3                   	ret    

f0107140 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107140:	55                   	push   %ebp
f0107141:	89 e5                	mov    %esp,%ebp
f0107143:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107146:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010714a:	76 0a                	jbe    f0107156 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010714c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107151:	e9 93 00 00 00       	jmp    f01071e9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107156:	8b 55 08             	mov    0x8(%ebp),%edx
f0107159:	89 d0                	mov    %edx,%eax
f010715b:	01 c0                	add    %eax,%eax
f010715d:	01 d0                	add    %edx,%eax
f010715f:	01 c0                	add    %eax,%eax
f0107161:	01 d0                	add    %edx,%eax
f0107163:	c1 e0 02             	shl    $0x2,%eax
f0107166:	01 d0                	add    %edx,%eax
f0107168:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010716f:	01 d0                	add    %edx,%eax
f0107171:	c1 e0 04             	shl    $0x4,%eax
f0107174:	83 c0 50             	add    $0x50,%eax
f0107177:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f010717c:	83 ec 0c             	sub    $0xc,%esp
f010717f:	50                   	push   %eax
f0107180:	e8 3e 01 00 00       	call   f01072c3 <clear_frames_storage>
f0107185:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107188:	8b 55 08             	mov    0x8(%ebp),%edx
f010718b:	89 d0                	mov    %edx,%eax
f010718d:	01 c0                	add    %eax,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	01 c0                	add    %eax,%eax
f0107193:	01 d0                	add    %edx,%eax
f0107195:	c1 e0 02             	shl    $0x2,%eax
f0107198:	01 d0                	add    %edx,%eax
f010719a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a1:	01 d0                	add    %edx,%eax
f01071a3:	c1 e0 04             	shl    $0x4,%eax
f01071a6:	05 20 f1 67 f0       	add    $0xf067f120,%eax
f01071ab:	83 ec 04             	sub    $0x4,%esp
f01071ae:	68 50 10 00 00       	push   $0x1050
f01071b3:	6a 00                	push   $0x0
f01071b5:	50                   	push   %eax
f01071b6:	e8 98 90 02 00       	call   f0130253 <memset>
f01071bb:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071be:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c1:	89 d0                	mov    %edx,%eax
f01071c3:	01 c0                	add    %eax,%eax
f01071c5:	01 d0                	add    %edx,%eax
f01071c7:	01 c0                	add    %eax,%eax
f01071c9:	01 d0                	add    %edx,%eax
f01071cb:	c1 e0 02             	shl    $0x2,%eax
f01071ce:	01 d0                	add    %edx,%eax
f01071d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071d7:	01 d0                	add    %edx,%eax
f01071d9:	c1 e0 04             	shl    $0x4,%eax
f01071dc:	05 6d f1 67 f0       	add    $0xf067f16d,%eax
f01071e1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071e9:	c9                   	leave  
f01071ea:	c3                   	ret    

f01071eb <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071eb:	55                   	push   %ebp
f01071ec:	89 e5                	mov    %esp,%ebp
f01071ee:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f1:	83 ec 0c             	sub    $0xc,%esp
f01071f4:	68 00 10 00 00       	push   $0x1000
f01071f9:	e8 de 01 00 00       	call   f01073dc <kmalloc>
f01071fe:	83 c4 10             	add    $0x10,%esp
f0107201:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107204:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107208:	75 17                	jne    f0107221 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010720a:	83 ec 04             	sub    $0x4,%esp
f010720d:	68 99 4e 13 f0       	push   $0xf0134e99
f0107212:	68 a9 00 00 00       	push   $0xa9
f0107217:	68 78 4e 13 f0       	push   $0xf0134e78
f010721c:	e8 85 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107221:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107224:	c9                   	leave  
f0107225:	c3                   	ret    

f0107226 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107226:	55                   	push   %ebp
f0107227:	89 e5                	mov    %esp,%ebp
f0107229:	53                   	push   %ebx
f010722a:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010722d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107230:	c1 e0 0c             	shl    $0xc,%eax
f0107233:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107236:	83 ec 04             	sub    $0x4,%esp
f0107239:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010723c:	50                   	push   %eax
f010723d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107240:	ff 75 08             	pushl  0x8(%ebp)
f0107243:	e8 21 f7 ff ff       	call   f0106969 <get_page_table>
f0107248:	83 c4 10             	add    $0x10,%esp
f010724b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010724e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107252:	75 15                	jne    f0107269 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107254:	83 ec 04             	sub    $0x4,%esp
f0107257:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010725a:	50                   	push   %eax
f010725b:	ff 75 f4             	pushl  -0xc(%ebp)
f010725e:	ff 75 08             	pushl  0x8(%ebp)
f0107261:	e8 29 f8 ff ff       	call   f0106a8f <__static_cpt>
f0107266:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107269:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	c1 ea 0c             	shr    $0xc,%edx
f0107272:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107278:	c1 e2 02             	shl    $0x2,%edx
f010727b:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010727e:	83 ec 0c             	sub    $0xc,%esp
f0107281:	ff 75 0c             	pushl  0xc(%ebp)
f0107284:	e8 38 fc ff ff       	call   f0106ec1 <to_physical_address>
f0107289:	83 c4 10             	add    $0x10,%esp
f010728c:	83 c8 01             	or     $0x1,%eax
f010728f:	89 03                	mov    %eax,(%ebx)
}
f0107291:	90                   	nop
f0107292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107295:	c9                   	leave  
f0107296:	c3                   	ret    

f0107297 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107297:	55                   	push   %ebp
f0107298:	89 e5                	mov    %esp,%ebp
f010729a:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010729d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a0:	c1 e0 0c             	shl    $0xc,%eax
f01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072ac:	50                   	push   %eax
f01072ad:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b0:	ff 75 08             	pushl  0x8(%ebp)
f01072b3:	e8 49 f9 ff ff       	call   f0106c01 <get_frame_info>
f01072b8:	83 c4 10             	add    $0x10,%esp
f01072bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072be:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c1:	c9                   	leave  
f01072c2:	c3                   	ret    

f01072c3 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072c3:	55                   	push   %ebp
f01072c4:	89 e5                	mov    %esp,%ebp
f01072c6:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072c9:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072d7:	eb 5b                	jmp    f0107334 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01072e6:	01 d0                	add    %edx,%eax
f01072e8:	8b 00                	mov    (%eax),%eax
f01072ea:	85 c0                	test   %eax,%eax
f01072ec:	74 43                	je     f0107331 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01072fb:	01 d0                	add    %edx,%eax
f01072fd:	8b 00                	mov    (%eax),%eax
f01072ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107304:	83 ec 0c             	sub    $0xc,%esp
f0107307:	50                   	push   %eax
f0107308:	e8 c7 fb ff ff       	call   f0106ed4 <to_frame_info>
f010730d:	83 c4 10             	add    $0x10,%esp
f0107310:	83 ec 0c             	sub    $0xc,%esp
f0107313:	50                   	push   %eax
f0107314:	e8 a6 f5 ff ff       	call   f01068bf <free_frame>
f0107319:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f010731c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010731f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107326:	8b 45 08             	mov    0x8(%ebp),%eax
f0107329:	01 d0                	add    %edx,%eax
f010732b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107331:	ff 45 f4             	incl   -0xc(%ebp)
f0107334:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010733b:	7e 9c                	jle    f01072d9 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010733d:	90                   	nop
f010733e:	c9                   	leave  
f010733f:	c3                   	ret    

f0107340 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107340:	55                   	push   %ebp
f0107341:	89 e5                	mov    %esp,%ebp
f0107343:	83 ec 18             	sub    $0x18,%esp
f0107346:	8b 45 14             	mov    0x14(%ebp),%eax
f0107349:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010734c:	83 ec 04             	sub    $0x4,%esp
f010734f:	68 b8 4e 13 f0       	push   $0xf0134eb8
f0107354:	68 fa 00 00 00       	push   $0xfa
f0107359:	68 78 4e 13 f0       	push   $0xf0134e78
f010735e:	e8 43 8e ff ff       	call   f01001a6 <_panic>

f0107363 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107363:	55                   	push   %ebp
f0107364:	89 e5                	mov    %esp,%ebp
f0107366:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107369:	83 ec 04             	sub    $0x4,%esp
f010736c:	68 ec 4e 13 f0       	push   $0xf0134eec
f0107371:	68 0c 01 00 00       	push   $0x10c
f0107376:	68 78 4e 13 f0       	push   $0xf0134e78
f010737b:	e8 26 8e ff ff       	call   f01001a6 <_panic>

f0107380 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107380:	55                   	push   %ebp
f0107381:	89 e5                	mov    %esp,%ebp
f0107383:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f0107386:	83 ec 04             	sub    $0x4,%esp
f0107389:	68 20 4f 13 f0       	push   $0xf0134f20
f010738e:	68 1b 01 00 00       	push   $0x11b
f0107393:	68 78 4e 13 f0       	push   $0xf0134e78
f0107398:	e8 09 8e ff ff       	call   f01001a6 <_panic>

f010739d <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010739d:	55                   	push   %ebp
f010739e:	89 e5                	mov    %esp,%ebp
f01073a0:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073a3:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f01073a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073ab:	83 ec 04             	sub    $0x4,%esp
f01073ae:	68 50 4f 13 f0       	push   $0xf0134f50
f01073b3:	68 33 01 00 00       	push   $0x133
f01073b8:	68 78 4e 13 f0       	push   $0xf0134e78
f01073bd:	e8 e4 8d ff ff       	call   f01001a6 <_panic>

f01073c2 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01073c2:	55                   	push   %ebp
f01073c3:	89 e5                	mov    %esp,%ebp
f01073c5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");
f01073c8:	83 ec 04             	sub    $0x4,%esp
f01073cb:	68 80 4f 13 f0       	push   $0xf0134f80
f01073d0:	6a 11                	push   $0x11
f01073d2:	68 ba 4f 13 f0       	push   $0xf0134fba
f01073d7:	e8 af 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073dc <kmalloc>:
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}

void* kmalloc(unsigned int size)
{
f01073dc:	55                   	push   %ebp
f01073dd:	89 e5                	mov    %esp,%ebp
f01073df:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f01073e2:	83 ec 04             	sub    $0x4,%esp
f01073e5:	68 cc 4f 13 f0       	push   $0xf0134fcc
f01073ea:	6a 26                	push   $0x26
f01073ec:	68 ba 4f 13 f0       	push   $0xf0134fba
f01073f1:	e8 95 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073f6 <kfree>:

	//change this "return" according to your answer
}

void kfree(void* virtual_address)
{
f01073f6:	55                   	push   %ebp
f01073f7:	89 e5                	mov    %esp,%ebp
f01073f9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	68 f4 4f 13 f0       	push   $0xf0134ff4
f0107404:	6a 33                	push   $0x33
f0107406:	68 ba 4f 13 f0       	push   $0xf0134fba
f010740b:	e8 96 8d ff ff       	call   f01001a6 <_panic>

f0107410 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107410:	55                   	push   %ebp
f0107411:	89 e5                	mov    %esp,%ebp
f0107413:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107416:	83 ec 04             	sub    $0x4,%esp
f0107419:	68 18 50 13 f0       	push   $0xf0135018
f010741e:	6a 3b                	push   $0x3b
f0107420:	68 ba 4f 13 f0       	push   $0xf0134fba
f0107425:	e8 7c 8d ff ff       	call   f01001a6 <_panic>

f010742a <kheap_physical_address>:
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010742a:	55                   	push   %ebp
f010742b:	89 e5                	mov    %esp,%ebp
f010742d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107430:	83 ec 04             	sub    $0x4,%esp
f0107433:	68 4c 50 13 f0       	push   $0xf013504c
f0107438:	6a 46                	push   $0x46
f010743a:	68 ba 4f 13 f0       	push   $0xf0134fba
f010743f:	e8 62 8d ff ff       	call   f01001a6 <_panic>

f0107444 <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f0107444:	55                   	push   %ebp
f0107445:	89 e5                	mov    %esp,%ebp
f0107447:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010744a:	83 ec 04             	sub    $0x4,%esp
f010744d:	68 81 50 13 f0       	push   $0xf0135081
f0107452:	6a 4f                	push   $0x4f
f0107454:	68 ba 4f 13 f0       	push   $0xf0134fba
f0107459:	e8 48 8d ff ff       	call   f01001a6 <_panic>

f010745e <kshrink>:

}

void kshrink(uint32 newSize)
{
f010745e:	55                   	push   %ebp
f010745f:	89 e5                	mov    %esp,%ebp
f0107461:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107464:	83 ec 04             	sub    $0x4,%esp
f0107467:	68 81 50 13 f0       	push   $0xf0135081
f010746c:	6a 55                	push   $0x55
f010746e:	68 ba 4f 13 f0       	push   $0xf0134fba
f0107473:	e8 2e 8d ff ff       	call   f01001a6 <_panic>

f0107478 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107478:	55                   	push   %ebp
f0107479:	89 e5                	mov    %esp,%ebp
f010747b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010747e:	83 ec 04             	sub    $0x4,%esp
f0107481:	68 81 50 13 f0       	push   $0xf0135081
f0107486:	6a 5a                	push   $0x5a
f0107488:	68 ba 4f 13 f0       	push   $0xf0134fba
f010748d:	e8 14 8d ff ff       	call   f01001a6 <_panic>

f0107492 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107492:	55                   	push   %ebp
f0107493:	89 e5                	mov    %esp,%ebp
f0107495:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107498:	83 ec 04             	sub    $0x4,%esp
f010749b:	68 94 50 13 f0       	push   $0xf0135094
f01074a0:	6a 71                	push   $0x71
f01074a2:	68 ba 4f 13 f0       	push   $0xf0134fba
f01074a7:	e8 fa 8c ff ff       	call   f01001a6 <_panic>

f01074ac <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01074ac:	55                   	push   %ebp
f01074ad:	89 e5                	mov    %esp,%ebp
f01074af:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	panic("pt_set_page_permissions() is not implemented yet...!!");
f01074b2:	83 ec 04             	sub    $0x4,%esp
f01074b5:	68 bc 50 13 f0       	push   $0xf01350bc
f01074ba:	6a 0e                	push   $0xe
f01074bc:	68 f2 50 13 f0       	push   $0xf01350f2
f01074c1:	e8 e0 8c ff ff       	call   f01001a6 <_panic>

f01074c6 <pt_get_page_permissions>:
}

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01074c6:	55                   	push   %ebp
f01074c7:	89 e5                	mov    %esp,%ebp
f01074c9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	panic("pt_get_page_permissions() is not implemented yet...!!");
f01074cc:	83 ec 04             	sub    $0x4,%esp
f01074cf:	68 0c 51 13 f0       	push   $0xf013510c
f01074d4:	6a 15                	push   $0x15
f01074d6:	68 f2 50 13 f0       	push   $0xf01350f2
f01074db:	e8 c6 8c ff ff       	call   f01001a6 <_panic>

f01074e0 <pt_clear_page_table_entry>:
}

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01074e0:	55                   	push   %ebp
f01074e1:	89 e5                	mov    %esp,%ebp
f01074e3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	panic("pt_clear_page_table_entry() is not implemented yet...!!");
f01074e6:	83 ec 04             	sub    $0x4,%esp
f01074e9:	68 44 51 13 f0       	push   $0xf0135144
f01074ee:	6a 1c                	push   $0x1c
f01074f0:	68 f2 50 13 f0       	push   $0xf01350f2
f01074f5:	e8 ac 8c ff ff       	call   f01001a6 <_panic>

f01074fa <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f01074fa:	55                   	push   %ebp
f01074fb:	89 e5                	mov    %esp,%ebp
f01074fd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	panic("virtual_to_physical() is not implemented yet...!!");
f0107500:	83 ec 04             	sub    $0x4,%esp
f0107503:	68 7c 51 13 f0       	push   $0xf013517c
f0107508:	6a 26                	push   $0x26
f010750a:	68 f2 50 13 f0       	push   $0xf01350f2
f010750f:	e8 92 8c ff ff       	call   f01001a6 <_panic>

f0107514 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107514:	55                   	push   %ebp
f0107515:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107517:	8b 45 0c             	mov    0xc(%ebp),%eax
f010751a:	c1 e8 16             	shr    $0x16,%eax
f010751d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107524:	8b 45 08             	mov    0x8(%ebp),%eax
f0107527:	01 d0                	add    %edx,%eax
f0107529:	8b 00                	mov    (%eax),%eax
f010752b:	83 e0 20             	and    $0x20,%eax
f010752e:	85 c0                	test   %eax,%eax
f0107530:	0f 95 c0             	setne  %al
f0107533:	0f b6 c0             	movzbl %al,%eax
}
f0107536:	5d                   	pop    %ebp
f0107537:	c3                   	ret    

f0107538 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107538:	55                   	push   %ebp
f0107539:	89 e5                	mov    %esp,%ebp
f010753b:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f010753e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107541:	c1 e8 16             	shr    $0x16,%eax
f0107544:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010754b:	8b 45 08             	mov    0x8(%ebp),%eax
f010754e:	01 d0                	add    %edx,%eax
f0107550:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107553:	c1 ea 16             	shr    $0x16,%edx
f0107556:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f010755d:	8b 55 08             	mov    0x8(%ebp),%edx
f0107560:	01 ca                	add    %ecx,%edx
f0107562:	8b 12                	mov    (%edx),%edx
f0107564:	83 e2 df             	and    $0xffffffdf,%edx
f0107567:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107569:	8b 45 0c             	mov    0xc(%ebp),%eax
f010756c:	83 ec 08             	sub    $0x8,%esp
f010756f:	50                   	push   %eax
f0107570:	6a 00                	push   $0x0
f0107572:	e8 4f ee ff ff       	call   f01063c6 <tlb_invalidate>
f0107577:	83 c4 10             	add    $0x10,%esp
}
f010757a:	90                   	nop
f010757b:	c9                   	leave  
f010757c:	c3                   	ret    

f010757d <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f010757d:	55                   	push   %ebp
f010757e:	89 e5                	mov    %esp,%ebp
f0107580:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107583:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107586:	c1 e8 16             	shr    $0x16,%eax
f0107589:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107590:	8b 45 08             	mov    0x8(%ebp),%eax
f0107593:	01 d0                	add    %edx,%eax
f0107595:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010759b:	0f 20 d8             	mov    %cr3,%eax
f010759e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01075a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01075a4:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01075a7:	90                   	nop
f01075a8:	c9                   	leave  
f01075a9:	c3                   	ret    

f01075aa <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f01075aa:	55                   	push   %ebp
f01075ab:	89 e5                	mov    %esp,%ebp
f01075ad:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01075b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01075b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01075be:	eb 20                	jmp    f01075e0 <env_page_ws_get_size+0x36>
f01075c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01075c3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01075c6:	89 d0                	mov    %edx,%eax
f01075c8:	01 c0                	add    %eax,%eax
f01075ca:	01 d0                	add    %edx,%eax
f01075cc:	c1 e0 03             	shl    $0x3,%eax
f01075cf:	01 c8                	add    %ecx,%eax
f01075d1:	83 c0 7c             	add    $0x7c,%eax
f01075d4:	8a 00                	mov    (%eax),%al
f01075d6:	84 c0                	test   %al,%al
f01075d8:	75 03                	jne    f01075dd <env_page_ws_get_size+0x33>
f01075da:	ff 45 f8             	incl   -0x8(%ebp)
f01075dd:	ff 45 fc             	incl   -0x4(%ebp)
f01075e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01075e3:	8b 50 74             	mov    0x74(%eax),%edx
f01075e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01075e9:	39 c2                	cmp    %eax,%edx
f01075eb:	77 d3                	ja     f01075c0 <env_page_ws_get_size+0x16>
	return counter;
f01075ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01075f0:	c9                   	leave  
f01075f1:	c3                   	ret    

f01075f2 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01075f2:	55                   	push   %ebp
f01075f3:	89 e5                	mov    %esp,%ebp
f01075f5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01075f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01075ff:	eb 4c                	jmp    f010764d <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107601:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107604:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107607:	89 d0                	mov    %edx,%eax
f0107609:	01 c0                	add    %eax,%eax
f010760b:	01 d0                	add    %edx,%eax
f010760d:	c1 e0 03             	shl    $0x3,%eax
f0107610:	01 c8                	add    %ecx,%eax
f0107612:	83 c0 78             	add    $0x78,%eax
f0107615:	8b 00                	mov    (%eax),%eax
f0107617:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010761a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010761d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107622:	89 c2                	mov    %eax,%edx
f0107624:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107627:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010762a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010762d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107632:	39 c2                	cmp    %eax,%edx
f0107634:	75 14                	jne    f010764a <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107636:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107639:	83 ec 08             	sub    $0x8,%esp
f010763c:	50                   	push   %eax
f010763d:	ff 75 08             	pushl  0x8(%ebp)
f0107640:	e8 bc 00 00 00       	call   f0107701 <env_page_ws_clear_entry>
f0107645:	83 c4 10             	add    $0x10,%esp
			break;
f0107648:	eb 10                	jmp    f010765a <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f010764a:	ff 45 f4             	incl   -0xc(%ebp)
f010764d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107650:	8b 50 74             	mov    0x74(%eax),%edx
f0107653:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107656:	39 c2                	cmp    %eax,%edx
f0107658:	77 a7                	ja     f0107601 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f010765a:	90                   	nop
f010765b:	c9                   	leave  
f010765c:	c3                   	ret    

f010765d <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f010765d:	55                   	push   %ebp
f010765e:	89 e5                	mov    %esp,%ebp
f0107660:	53                   	push   %ebx
f0107661:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107664:	8b 45 08             	mov    0x8(%ebp),%eax
f0107667:	8b 40 74             	mov    0x74(%eax),%eax
f010766a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010766d:	77 16                	ja     f0107685 <env_page_ws_set_entry+0x28>
f010766f:	68 b0 51 13 f0       	push   $0xf01351b0
f0107674:	68 e6 51 13 f0       	push   $0xf01351e6
f0107679:	6a 26                	push   $0x26
f010767b:	68 fc 51 13 f0       	push   $0xf01351fc
f0107680:	e8 21 8b ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107685:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f010768c:	76 16                	jbe    f01076a4 <env_page_ws_set_entry+0x47>
f010768e:	68 1c 52 13 f0       	push   $0xf013521c
f0107693:	68 e6 51 13 f0       	push   $0xf01351e6
f0107698:	6a 27                	push   $0x27
f010769a:	68 fc 51 13 f0       	push   $0xf01351fc
f010769f:	e8 02 8b ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01076a4:	8b 45 10             	mov    0x10(%ebp),%eax
f01076a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01076aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01076b2:	89 c1                	mov    %eax,%ecx
f01076b4:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01076b7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076ba:	89 d0                	mov    %edx,%eax
f01076bc:	01 c0                	add    %eax,%eax
f01076be:	01 d0                	add    %edx,%eax
f01076c0:	c1 e0 03             	shl    $0x3,%eax
f01076c3:	01 d8                	add    %ebx,%eax
f01076c5:	83 c0 78             	add    $0x78,%eax
f01076c8:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01076ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01076cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076d0:	89 d0                	mov    %edx,%eax
f01076d2:	01 c0                	add    %eax,%eax
f01076d4:	01 d0                	add    %edx,%eax
f01076d6:	c1 e0 03             	shl    $0x3,%eax
f01076d9:	01 c8                	add    %ecx,%eax
f01076db:	83 c0 7c             	add    $0x7c,%eax
f01076de:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01076e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01076e4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076e7:	89 d0                	mov    %edx,%eax
f01076e9:	01 c0                	add    %eax,%eax
f01076eb:	01 d0                	add    %edx,%eax
f01076ed:	c1 e0 03             	shl    $0x3,%eax
f01076f0:	01 c8                	add    %ecx,%eax
f01076f2:	83 e8 80             	sub    $0xffffff80,%eax
f01076f5:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01076fb:	90                   	nop
}
f01076fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01076ff:	c9                   	leave  
f0107700:	c3                   	ret    

f0107701 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107701:	55                   	push   %ebp
f0107702:	89 e5                	mov    %esp,%ebp
f0107704:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107707:	8b 45 08             	mov    0x8(%ebp),%eax
f010770a:	8b 40 74             	mov    0x74(%eax),%eax
f010770d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107710:	77 16                	ja     f0107728 <env_page_ws_clear_entry+0x27>
f0107712:	68 50 52 13 f0       	push   $0xf0135250
f0107717:	68 e6 51 13 f0       	push   $0xf01351e6
f010771c:	6a 32                	push   $0x32
f010771e:	68 fc 51 13 f0       	push   $0xf01351fc
f0107723:	e8 7e 8a ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107728:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010772b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010772e:	89 d0                	mov    %edx,%eax
f0107730:	01 c0                	add    %eax,%eax
f0107732:	01 d0                	add    %edx,%eax
f0107734:	c1 e0 03             	shl    $0x3,%eax
f0107737:	01 c8                	add    %ecx,%eax
f0107739:	83 c0 78             	add    $0x78,%eax
f010773c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107742:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107745:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107748:	89 d0                	mov    %edx,%eax
f010774a:	01 c0                	add    %eax,%eax
f010774c:	01 d0                	add    %edx,%eax
f010774e:	c1 e0 03             	shl    $0x3,%eax
f0107751:	01 c8                	add    %ecx,%eax
f0107753:	83 c0 7c             	add    $0x7c,%eax
f0107756:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107759:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010775c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010775f:	89 d0                	mov    %edx,%eax
f0107761:	01 c0                	add    %eax,%eax
f0107763:	01 d0                	add    %edx,%eax
f0107765:	c1 e0 03             	shl    $0x3,%eax
f0107768:	01 c8                	add    %ecx,%eax
f010776a:	83 e8 80             	sub    $0xffffff80,%eax
f010776d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107773:	90                   	nop
f0107774:	c9                   	leave  
f0107775:	c3                   	ret    

f0107776 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107776:	55                   	push   %ebp
f0107777:	89 e5                	mov    %esp,%ebp
f0107779:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010777c:	8b 45 08             	mov    0x8(%ebp),%eax
f010777f:	8b 40 74             	mov    0x74(%eax),%eax
f0107782:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107785:	77 16                	ja     f010779d <env_page_ws_get_virtual_address+0x27>
f0107787:	68 50 52 13 f0       	push   $0xf0135250
f010778c:	68 e6 51 13 f0       	push   $0xf01351e6
f0107791:	6a 3a                	push   $0x3a
f0107793:	68 fc 51 13 f0       	push   $0xf01351fc
f0107798:	e8 09 8a ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010779d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01077a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077a3:	89 d0                	mov    %edx,%eax
f01077a5:	01 c0                	add    %eax,%eax
f01077a7:	01 d0                	add    %edx,%eax
f01077a9:	c1 e0 03             	shl    $0x3,%eax
f01077ac:	01 c8                	add    %ecx,%eax
f01077ae:	83 c0 78             	add    $0x78,%eax
f01077b1:	8b 00                	mov    (%eax),%eax
f01077b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01077b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01077be:	c9                   	leave  
f01077bf:	c3                   	ret    

f01077c0 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01077c0:	55                   	push   %ebp
f01077c1:	89 e5                	mov    %esp,%ebp
f01077c3:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01077c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01077c9:	8b 40 74             	mov    0x74(%eax),%eax
f01077cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01077cf:	77 16                	ja     f01077e7 <env_page_ws_get_time_stamp+0x27>
f01077d1:	68 50 52 13 f0       	push   $0xf0135250
f01077d6:	68 e6 51 13 f0       	push   $0xf01351e6
f01077db:	6a 40                	push   $0x40
f01077dd:	68 fc 51 13 f0       	push   $0xf01351fc
f01077e2:	e8 bf 89 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01077e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01077ea:	8b 55 0c             	mov    0xc(%ebp),%edx
f01077ed:	89 d0                	mov    %edx,%eax
f01077ef:	01 c0                	add    %eax,%eax
f01077f1:	01 d0                	add    %edx,%eax
f01077f3:	c1 e0 03             	shl    $0x3,%eax
f01077f6:	01 c8                	add    %ecx,%eax
f01077f8:	83 e8 80             	sub    $0xffffff80,%eax
f01077fb:	8b 00                	mov    (%eax),%eax
}
f01077fd:	c9                   	leave  
f01077fe:	c3                   	ret    

f01077ff <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01077ff:	55                   	push   %ebp
f0107800:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107802:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107805:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107808:	89 d0                	mov    %edx,%eax
f010780a:	01 c0                	add    %eax,%eax
f010780c:	01 d0                	add    %edx,%eax
f010780e:	c1 e0 03             	shl    $0x3,%eax
f0107811:	01 c8                	add    %ecx,%eax
f0107813:	83 c0 7c             	add    $0x7c,%eax
f0107816:	8a 00                	mov    (%eax),%al
f0107818:	0f b6 c0             	movzbl %al,%eax
}
f010781b:	5d                   	pop    %ebp
f010781c:	c3                   	ret    

f010781d <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f010781d:	55                   	push   %ebp
f010781e:	89 e5                	mov    %esp,%ebp
f0107820:	53                   	push   %ebx
f0107821:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0107824:	83 ec 0c             	sub    $0xc,%esp
f0107827:	6a 02                	push   $0x2
f0107829:	e8 19 57 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f010782e:	83 c4 10             	add    $0x10,%esp
f0107831:	85 c0                	test   %eax,%eax
f0107833:	0f 84 fe 00 00 00    	je     f0107937 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0107839:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0107840:	83 ec 0c             	sub    $0xc,%esp
f0107843:	68 88 52 13 f0       	push   $0xf0135288
f0107848:	e8 e0 93 ff ff       	call   f0100c2d <cprintf>
f010784d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0107850:	8b 45 08             	mov    0x8(%ebp),%eax
f0107853:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f0107859:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010785c:	eb 2c                	jmp    f010788a <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010785e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107861:	8b 10                	mov    (%eax),%edx
f0107863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107866:	8d 48 01             	lea    0x1(%eax),%ecx
f0107869:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010786c:	83 ec 04             	sub    $0x4,%esp
f010786f:	52                   	push   %edx
f0107870:	50                   	push   %eax
f0107871:	68 a2 52 13 f0       	push   $0xf01352a2
f0107876:	e8 b2 93 ff ff       	call   f0100c2d <cprintf>
f010787b:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010787e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107881:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107887:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010788a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010788e:	74 08                	je     f0107898 <env_page_ws_print+0x7b>
f0107890:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107893:	8b 40 10             	mov    0x10(%eax),%eax
f0107896:	eb 05                	jmp    f010789d <env_page_ws_print+0x80>
f0107898:	b8 00 00 00 00       	mov    $0x0,%eax
f010789d:	8b 55 08             	mov    0x8(%ebp),%edx
f01078a0:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f01078a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01078a9:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f01078af:	85 c0                	test   %eax,%eax
f01078b1:	75 ab                	jne    f010785e <env_page_ws_print+0x41>
f01078b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078b7:	75 a5                	jne    f010785e <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01078b9:	83 ec 0c             	sub    $0xc,%esp
f01078bc:	68 aa 52 13 f0       	push   $0xf01352aa
f01078c1:	e8 67 93 ff ff       	call   f0100c2d <cprintf>
f01078c6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01078c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078cc:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f01078d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01078d5:	eb 2c                	jmp    f0107903 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01078d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078da:	8b 10                	mov    (%eax),%edx
f01078dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078df:	8d 48 01             	lea    0x1(%eax),%ecx
f01078e2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01078e5:	83 ec 04             	sub    $0x4,%esp
f01078e8:	52                   	push   %edx
f01078e9:	50                   	push   %eax
f01078ea:	68 a2 52 13 f0       	push   $0xf01352a2
f01078ef:	e8 39 93 ff ff       	call   f0100c2d <cprintf>
f01078f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01078f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01078fa:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107900:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107903:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107907:	74 08                	je     f0107911 <env_page_ws_print+0xf4>
f0107909:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010790c:	8b 40 10             	mov    0x10(%eax),%eax
f010790f:	eb 05                	jmp    f0107916 <env_page_ws_print+0xf9>
f0107911:	b8 00 00 00 00       	mov    $0x0,%eax
f0107916:	8b 55 08             	mov    0x8(%ebp),%edx
f0107919:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010791f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107922:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107928:	85 c0                	test   %eax,%eax
f010792a:	75 ab                	jne    f01078d7 <env_page_ws_print+0xba>
f010792c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107930:	75 a5                	jne    f01078d7 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107932:	e9 94 01 00 00       	jmp    f0107acb <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107937:	83 ec 0c             	sub    $0xc,%esp
f010793a:	68 c5 52 13 f0       	push   $0xf01352c5
f010793f:	e8 e9 92 ff ff       	call   f0100c2d <cprintf>
f0107944:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107947:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010794e:	e9 69 01 00 00       	jmp    f0107abc <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107953:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107956:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107959:	89 d0                	mov    %edx,%eax
f010795b:	01 c0                	add    %eax,%eax
f010795d:	01 d0                	add    %edx,%eax
f010795f:	c1 e0 03             	shl    $0x3,%eax
f0107962:	01 c8                	add    %ecx,%eax
f0107964:	83 c0 7c             	add    $0x7c,%eax
f0107967:	8a 00                	mov    (%eax),%al
f0107969:	84 c0                	test   %al,%al
f010796b:	74 43                	je     f01079b0 <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f010796d:	83 ec 0c             	sub    $0xc,%esp
f0107970:	68 cf 52 13 f0       	push   $0xf01352cf
f0107975:	e8 b3 92 ff ff       	call   f0100c2d <cprintf>
f010797a:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010797d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107980:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107986:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107989:	75 10                	jne    f010799b <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f010798b:	83 ec 0c             	sub    $0xc,%esp
f010798e:	68 de 52 13 f0       	push   $0xf01352de
f0107993:	e8 95 92 ff ff       	call   f0100c2d <cprintf>
f0107998:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010799b:	83 ec 0c             	sub    $0xc,%esp
f010799e:	68 e4 52 13 f0       	push   $0xf01352e4
f01079a3:	e8 85 92 ff ff       	call   f0100c2d <cprintf>
f01079a8:	83 c4 10             	add    $0x10,%esp
				continue;
f01079ab:	e9 09 01 00 00       	jmp    f0107ab9 <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01079b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01079b6:	89 d0                	mov    %edx,%eax
f01079b8:	01 c0                	add    %eax,%eax
f01079ba:	01 d0                	add    %edx,%eax
f01079bc:	c1 e0 03             	shl    $0x3,%eax
f01079bf:	01 c8                	add    %ecx,%eax
f01079c1:	83 c0 78             	add    $0x78,%eax
f01079c4:	8b 00                	mov    (%eax),%eax
f01079c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01079c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01079cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01079cf:	89 d0                	mov    %edx,%eax
f01079d1:	01 c0                	add    %eax,%eax
f01079d3:	01 d0                	add    %edx,%eax
f01079d5:	c1 e0 03             	shl    $0x3,%eax
f01079d8:	01 c8                	add    %ecx,%eax
f01079da:	83 e8 80             	sub    $0xffffff80,%eax
f01079dd:	8b 00                	mov    (%eax),%eax
f01079df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01079e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01079e8:	83 ec 08             	sub    $0x8,%esp
f01079eb:	ff 75 e8             	pushl  -0x18(%ebp)
f01079ee:	50                   	push   %eax
f01079ef:	e8 d2 fa ff ff       	call   f01074c6 <pt_get_page_permissions>
f01079f4:	83 c4 10             	add    $0x10,%esp
f01079f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01079fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079fd:	83 e0 40             	and    $0x40,%eax
f0107a00:	85 c0                	test   %eax,%eax
f0107a02:	0f 95 c0             	setne  %al
f0107a05:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107a08:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a0b:	83 e0 20             	and    $0x20,%eax
f0107a0e:	85 c0                	test   %eax,%eax
f0107a10:	0f 95 c0             	setne  %al
f0107a13:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107a16:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a19:	25 00 02 00 00       	and    $0x200,%eax
f0107a1e:	85 c0                	test   %eax,%eax
f0107a20:	0f 95 c0             	setne  %al
f0107a23:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107a26:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a29:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a2c:	89 d0                	mov    %edx,%eax
f0107a2e:	01 c0                	add    %eax,%eax
f0107a30:	01 d0                	add    %edx,%eax
f0107a32:	c1 e0 03             	shl    $0x3,%eax
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	83 c0 78             	add    $0x78,%eax
f0107a3a:	8b 00                	mov    (%eax),%eax
f0107a3c:	83 ec 04             	sub    $0x4,%esp
f0107a3f:	50                   	push   %eax
f0107a40:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a43:	68 e6 52 13 f0       	push   $0xf01352e6
f0107a48:	e8 e0 91 ff ff       	call   f0100c2d <cprintf>
f0107a4d:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107a50:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107a53:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a56:	89 d0                	mov    %edx,%eax
f0107a58:	01 c0                	add    %eax,%eax
f0107a5a:	01 d0                	add    %edx,%eax
f0107a5c:	c1 e0 03             	shl    $0x3,%eax
f0107a5f:	01 c8                	add    %ecx,%eax
f0107a61:	05 84 00 00 00       	add    $0x84,%eax
f0107a66:	8b 18                	mov    (%eax),%ebx
f0107a68:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107a6c:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107a70:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107a74:	83 ec 08             	sub    $0x8,%esp
f0107a77:	53                   	push   %ebx
f0107a78:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107a7b:	51                   	push   %ecx
f0107a7c:	52                   	push   %edx
f0107a7d:	50                   	push   %eax
f0107a7e:	68 f8 52 13 f0       	push   $0xf01352f8
f0107a83:	e8 a5 91 ff ff       	call   f0100c2d <cprintf>
f0107a88:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107a8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a8e:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107a94:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107a97:	75 10                	jne    f0107aa9 <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107a99:	83 ec 0c             	sub    $0xc,%esp
f0107a9c:	68 3f 53 13 f0       	push   $0xf013533f
f0107aa1:	e8 87 91 ff ff       	call   f0100c2d <cprintf>
f0107aa6:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107aa9:	83 ec 0c             	sub    $0xc,%esp
f0107aac:	68 e4 52 13 f0       	push   $0xf01352e4
f0107ab1:	e8 77 91 ff ff       	call   f0100c2d <cprintf>
f0107ab6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107ab9:	ff 45 ec             	incl   -0x14(%ebp)
f0107abc:	8b 45 08             	mov    0x8(%ebp),%eax
f0107abf:	8b 40 74             	mov    0x74(%eax),%eax
f0107ac2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107ac5:	0f 87 88 fe ff ff    	ja     f0107953 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107acb:	90                   	nop
f0107acc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107acf:	c9                   	leave  
f0107ad0:	c3                   	ret    

f0107ad1 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107ad1:	55                   	push   %ebp
f0107ad2:	89 e5                	mov    %esp,%ebp
f0107ad4:	53                   	push   %ebx
f0107ad5:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107ad8:	83 ec 0c             	sub    $0xc,%esp
f0107adb:	68 44 53 13 f0       	push   $0xf0135344
f0107ae0:	e8 48 91 ff ff       	call   f0100c2d <cprintf>
f0107ae5:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107ae8:	83 ec 0c             	sub    $0xc,%esp
f0107aeb:	68 79 53 13 f0       	push   $0xf0135379
f0107af0:	e8 38 91 ff ff       	call   f0100c2d <cprintf>
f0107af5:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107af8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107aff:	e9 16 01 00 00       	jmp    f0107c1a <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107b04:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b0a:	89 d0                	mov    %edx,%eax
f0107b0c:	01 c0                	add    %eax,%eax
f0107b0e:	01 d0                	add    %edx,%eax
f0107b10:	c1 e0 03             	shl    $0x3,%eax
f0107b13:	01 c8                	add    %ecx,%eax
f0107b15:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107b1a:	8a 00                	mov    (%eax),%al
f0107b1c:	84 c0                	test   %al,%al
f0107b1e:	74 43                	je     f0107b63 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107b20:	83 ec 0c             	sub    $0xc,%esp
f0107b23:	68 cf 52 13 f0       	push   $0xf01352cf
f0107b28:	e8 00 91 ff ff       	call   f0100c2d <cprintf>
f0107b2d:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107b30:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b33:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107b39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107b3c:	75 10                	jne    f0107b4e <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107b3e:	83 ec 0c             	sub    $0xc,%esp
f0107b41:	68 de 52 13 f0       	push   $0xf01352de
f0107b46:	e8 e2 90 ff ff       	call   f0100c2d <cprintf>
f0107b4b:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107b4e:	83 ec 0c             	sub    $0xc,%esp
f0107b51:	68 e4 52 13 f0       	push   $0xf01352e4
f0107b56:	e8 d2 90 ff ff       	call   f0100c2d <cprintf>
f0107b5b:	83 c4 10             	add    $0x10,%esp
			continue;
f0107b5e:	e9 b4 00 00 00       	jmp    f0107c17 <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107b63:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b69:	89 d0                	mov    %edx,%eax
f0107b6b:	01 c0                	add    %eax,%eax
f0107b6d:	01 d0                	add    %edx,%eax
f0107b6f:	c1 e0 03             	shl    $0x3,%eax
f0107b72:	01 c8                	add    %ecx,%eax
f0107b74:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107b79:	8b 00                	mov    (%eax),%eax
f0107b7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107b7e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b84:	89 d0                	mov    %edx,%eax
f0107b86:	01 c0                	add    %eax,%eax
f0107b88:	01 d0                	add    %edx,%eax
f0107b8a:	c1 e0 03             	shl    $0x3,%eax
f0107b8d:	01 c8                	add    %ecx,%eax
f0107b8f:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107b94:	8b 00                	mov    (%eax),%eax
f0107b96:	83 ec 04             	sub    $0x4,%esp
f0107b99:	50                   	push   %eax
f0107b9a:	ff 75 f4             	pushl  -0xc(%ebp)
f0107b9d:	68 84 53 13 f0       	push   $0xf0135384
f0107ba2:	e8 86 90 ff ff       	call   f0100c2d <cprintf>
f0107ba7:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107baa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bb0:	89 d0                	mov    %edx,%eax
f0107bb2:	01 c0                	add    %eax,%eax
f0107bb4:	01 d0                	add    %edx,%eax
f0107bb6:	c1 e0 03             	shl    $0x3,%eax
f0107bb9:	01 c8                	add    %ecx,%eax
f0107bbb:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107bc0:	8b 18                	mov    (%eax),%ebx
f0107bc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bc5:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107bc8:	83 ec 08             	sub    $0x8,%esp
f0107bcb:	ff 75 f0             	pushl  -0x10(%ebp)
f0107bce:	50                   	push   %eax
f0107bcf:	e8 40 f9 ff ff       	call   f0107514 <pd_is_table_used>
f0107bd4:	83 c4 10             	add    $0x10,%esp
f0107bd7:	83 ec 04             	sub    $0x4,%esp
f0107bda:	53                   	push   %ebx
f0107bdb:	50                   	push   %eax
f0107bdc:	68 9c 53 13 f0       	push   $0xf013539c
f0107be1:	e8 47 90 ff ff       	call   f0100c2d <cprintf>
f0107be6:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0107bec:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107bf2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107bf5:	75 10                	jne    f0107c07 <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107bf7:	83 ec 0c             	sub    $0xc,%esp
f0107bfa:	68 3f 53 13 f0       	push   $0xf013533f
f0107bff:	e8 29 90 ff ff       	call   f0100c2d <cprintf>
f0107c04:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107c07:	83 ec 0c             	sub    $0xc,%esp
f0107c0a:	68 e4 52 13 f0       	push   $0xf01352e4
f0107c0f:	e8 19 90 ff ff       	call   f0100c2d <cprintf>
f0107c14:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107c17:	ff 45 f4             	incl   -0xc(%ebp)
f0107c1a:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107c1e:	0f 86 e0 fe ff ff    	jbe    f0107b04 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107c24:	90                   	nop
f0107c25:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107c28:	c9                   	leave  
f0107c29:	c3                   	ret    

f0107c2a <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107c2a:	55                   	push   %ebp
f0107c2b:	89 e5                	mov    %esp,%ebp
f0107c2d:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107c30:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107c37:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107c3e:	eb 22                	jmp    f0107c62 <env_table_ws_get_size+0x38>
f0107c40:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c43:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107c46:	89 d0                	mov    %edx,%eax
f0107c48:	01 c0                	add    %eax,%eax
f0107c4a:	01 d0                	add    %edx,%eax
f0107c4c:	c1 e0 03             	shl    $0x3,%eax
f0107c4f:	01 c8                	add    %ecx,%eax
f0107c51:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107c56:	8a 00                	mov    (%eax),%al
f0107c58:	84 c0                	test   %al,%al
f0107c5a:	75 03                	jne    f0107c5f <env_table_ws_get_size+0x35>
f0107c5c:	ff 45 f8             	incl   -0x8(%ebp)
f0107c5f:	ff 45 fc             	incl   -0x4(%ebp)
f0107c62:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0107c66:	7e d8                	jle    f0107c40 <env_table_ws_get_size+0x16>
	return counter;
f0107c68:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107c6b:	c9                   	leave  
f0107c6c:	c3                   	ret    

f0107c6d <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107c6d:	55                   	push   %ebp
f0107c6e:	89 e5                	mov    %esp,%ebp
f0107c70:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0107c7a:	eb 4e                	jmp    f0107cca <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0107c7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c82:	89 d0                	mov    %edx,%eax
f0107c84:	01 c0                	add    %eax,%eax
f0107c86:	01 d0                	add    %edx,%eax
f0107c88:	c1 e0 03             	shl    $0x3,%eax
f0107c8b:	01 c8                	add    %ecx,%eax
f0107c8d:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107c92:	8b 00                	mov    (%eax),%eax
f0107c94:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c9a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107c9f:	89 c2                	mov    %eax,%edx
f0107ca1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ca4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107caa:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107caf:	39 c2                	cmp    %eax,%edx
f0107cb1:	75 14                	jne    f0107cc7 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0107cb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107cb6:	83 ec 08             	sub    $0x8,%esp
f0107cb9:	50                   	push   %eax
f0107cba:	ff 75 08             	pushl  0x8(%ebp)
f0107cbd:	e8 bc 00 00 00       	call   f0107d7e <env_table_ws_clear_entry>
f0107cc2:	83 c4 10             	add    $0x10,%esp
			break;
f0107cc5:	eb 09                	jmp    f0107cd0 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0107cc7:	ff 45 f4             	incl   -0xc(%ebp)
f0107cca:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107cce:	7e ac                	jle    f0107c7c <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107cd0:	90                   	nop
f0107cd1:	c9                   	leave  
f0107cd2:	c3                   	ret    

f0107cd3 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107cd3:	55                   	push   %ebp
f0107cd4:	89 e5                	mov    %esp,%ebp
f0107cd6:	53                   	push   %ebx
f0107cd7:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107cda:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107cde:	76 19                	jbe    f0107cf9 <env_table_ws_set_entry+0x26>
f0107ce0:	68 c0 53 13 f0       	push   $0xf01353c0
f0107ce5:	68 e6 51 13 f0       	push   $0xf01351e6
f0107cea:	68 b6 00 00 00       	push   $0xb6
f0107cef:	68 fc 51 13 f0       	push   $0xf01351fc
f0107cf4:	e8 ad 84 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107cf9:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107d00:	76 19                	jbe    f0107d1b <env_table_ws_set_entry+0x48>
f0107d02:	68 1c 52 13 f0       	push   $0xf013521c
f0107d07:	68 e6 51 13 f0       	push   $0xf01351e6
f0107d0c:	68 b7 00 00 00       	push   $0xb7
f0107d11:	68 fc 51 13 f0       	push   $0xf01351fc
f0107d16:	e8 8b 84 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0107d1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0107d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d24:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107d29:	89 c1                	mov    %eax,%ecx
f0107d2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107d2e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d31:	89 d0                	mov    %edx,%eax
f0107d33:	01 c0                	add    %eax,%eax
f0107d35:	01 d0                	add    %edx,%eax
f0107d37:	c1 e0 03             	shl    $0x3,%eax
f0107d3a:	01 d8                	add    %ebx,%eax
f0107d3c:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107d41:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0107d43:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d46:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d49:	89 d0                	mov    %edx,%eax
f0107d4b:	01 c0                	add    %eax,%eax
f0107d4d:	01 d0                	add    %edx,%eax
f0107d4f:	c1 e0 03             	shl    $0x3,%eax
f0107d52:	01 c8                	add    %ecx,%eax
f0107d54:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107d59:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0107d5c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d5f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d62:	89 d0                	mov    %edx,%eax
f0107d64:	01 c0                	add    %eax,%eax
f0107d66:	01 d0                	add    %edx,%eax
f0107d68:	c1 e0 03             	shl    $0x3,%eax
f0107d6b:	01 c8                	add    %ecx,%eax
f0107d6d:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107d72:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0107d78:	90                   	nop
}
f0107d79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107d7c:	c9                   	leave  
f0107d7d:	c3                   	ret    

f0107d7e <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
f0107d81:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107d84:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107d88:	76 19                	jbe    f0107da3 <env_table_ws_clear_entry+0x25>
f0107d8a:	68 c0 53 13 f0       	push   $0xf01353c0
f0107d8f:	68 e6 51 13 f0       	push   $0xf01351e6
f0107d94:	68 c2 00 00 00       	push   $0xc2
f0107d99:	68 fc 51 13 f0       	push   $0xf01351fc
f0107d9e:	e8 03 84 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0107da3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107da6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107da9:	89 d0                	mov    %edx,%eax
f0107dab:	01 c0                	add    %eax,%eax
f0107dad:	01 d0                	add    %edx,%eax
f0107daf:	c1 e0 03             	shl    $0x3,%eax
f0107db2:	01 c8                	add    %ecx,%eax
f0107db4:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107db9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0107dbf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107dc2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dc5:	89 d0                	mov    %edx,%eax
f0107dc7:	01 c0                	add    %eax,%eax
f0107dc9:	01 d0                	add    %edx,%eax
f0107dcb:	c1 e0 03             	shl    $0x3,%eax
f0107dce:	01 c8                	add    %ecx,%eax
f0107dd0:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107dd5:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0107dd8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ddb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107dde:	89 d0                	mov    %edx,%eax
f0107de0:	01 c0                	add    %eax,%eax
f0107de2:	01 d0                	add    %edx,%eax
f0107de4:	c1 e0 03             	shl    $0x3,%eax
f0107de7:	01 c8                	add    %ecx,%eax
f0107de9:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107dee:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107df4:	90                   	nop
f0107df5:	c9                   	leave  
f0107df6:	c3                   	ret    

f0107df7 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107df7:	55                   	push   %ebp
f0107df8:	89 e5                	mov    %esp,%ebp
f0107dfa:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107dfd:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107e01:	76 19                	jbe    f0107e1c <env_table_ws_get_virtual_address+0x25>
f0107e03:	68 c0 53 13 f0       	push   $0xf01353c0
f0107e08:	68 e6 51 13 f0       	push   $0xf01351e6
f0107e0d:	68 ca 00 00 00       	push   $0xca
f0107e12:	68 fc 51 13 f0       	push   $0xf01351fc
f0107e17:	e8 8a 83 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0107e1c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e1f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e22:	89 d0                	mov    %edx,%eax
f0107e24:	01 c0                	add    %eax,%eax
f0107e26:	01 d0                	add    %edx,%eax
f0107e28:	c1 e0 03             	shl    $0x3,%eax
f0107e2b:	01 c8                	add    %ecx,%eax
f0107e2d:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107e32:	8b 00                	mov    (%eax),%eax
f0107e34:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e3a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0107e3f:	c9                   	leave  
f0107e40:	c3                   	ret    

f0107e41 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107e41:	55                   	push   %ebp
f0107e42:	89 e5                	mov    %esp,%ebp
f0107e44:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107e47:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107e4b:	76 19                	jbe    f0107e66 <env_table_ws_get_time_stamp+0x25>
f0107e4d:	68 c0 53 13 f0       	push   $0xf01353c0
f0107e52:	68 e6 51 13 f0       	push   $0xf01351e6
f0107e57:	68 d1 00 00 00       	push   $0xd1
f0107e5c:	68 fc 51 13 f0       	push   $0xf01351fc
f0107e61:	e8 40 83 ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0107e66:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e6c:	89 d0                	mov    %edx,%eax
f0107e6e:	01 c0                	add    %eax,%eax
f0107e70:	01 d0                	add    %edx,%eax
f0107e72:	c1 e0 03             	shl    $0x3,%eax
f0107e75:	01 c8                	add    %ecx,%eax
f0107e77:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107e7c:	8b 00                	mov    (%eax),%eax
}
f0107e7e:	c9                   	leave  
f0107e7f:	c3                   	ret    

f0107e80 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107e80:	55                   	push   %ebp
f0107e81:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0107e83:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107e86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e89:	89 d0                	mov    %edx,%eax
f0107e8b:	01 c0                	add    %eax,%eax
f0107e8d:	01 d0                	add    %edx,%eax
f0107e8f:	c1 e0 03             	shl    $0x3,%eax
f0107e92:	01 c8                	add    %ecx,%eax
f0107e94:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107e99:	8a 00                	mov    (%eax),%al
f0107e9b:	0f b6 c0             	movzbl %al,%eax
}
f0107e9e:	5d                   	pop    %ebp
f0107e9f:	c3                   	ret    

f0107ea0 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0107ea0:	55                   	push   %ebp
f0107ea1:	89 e5                	mov    %esp,%ebp
f0107ea3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0107ea6:	83 ec 04             	sub    $0x4,%esp
f0107ea9:	68 f4 53 13 f0       	push   $0xf01353f4
f0107eae:	68 e5 00 00 00       	push   $0xe5
f0107eb3:	68 fc 51 13 f0       	push   $0xf01351fc
f0107eb8:	e8 e9 82 ff ff       	call   f01001a6 <_panic>

f0107ebd <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0107ebd:	55                   	push   %ebp
f0107ebe:	89 e5                	mov    %esp,%ebp
f0107ec0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0107ec3:	83 ec 04             	sub    $0x4,%esp
f0107ec6:	68 20 54 13 f0       	push   $0xf0135420
f0107ecb:	68 ec 00 00 00       	push   $0xec
f0107ed0:	68 fc 51 13 f0       	push   $0xf01351fc
f0107ed5:	e8 cc 82 ff ff       	call   f01001a6 <_panic>

f0107eda <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0107eda:	55                   	push   %ebp
f0107edb:	89 e5                	mov    %esp,%ebp
f0107edd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0107ee0:	83 ec 04             	sub    $0x4,%esp
f0107ee3:	68 50 54 13 f0       	push   $0xf0135450
f0107ee8:	68 f3 00 00 00       	push   $0xf3
f0107eed:	68 fc 51 13 f0       	push   $0xf01351fc
f0107ef2:	e8 af 82 ff ff       	call   f01001a6 <_panic>

f0107ef7 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0107ef7:	55                   	push   %ebp
f0107ef8:	89 e5                	mov    %esp,%ebp
f0107efa:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f0107efd:	83 ec 04             	sub    $0x4,%esp
f0107f00:	68 7c 54 13 f0       	push   $0xf013547c
f0107f05:	6a 1c                	push   $0x1c
f0107f07:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f0c:	e8 95 82 ff ff       	call   f01001a6 <_panic>

f0107f11 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0107f11:	55                   	push   %ebp
f0107f12:	89 e5                	mov    %esp,%ebp
f0107f14:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f0107f17:	83 ec 04             	sub    $0x4,%esp
f0107f1a:	68 c8 54 13 f0       	push   $0xf01354c8
f0107f1f:	6a 29                	push   $0x29
f0107f21:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f26:	e8 7b 82 ff ff       	call   f01001a6 <_panic>

f0107f2b <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0107f2b:	55                   	push   %ebp
f0107f2c:	89 e5                	mov    %esp,%ebp
f0107f2e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f0107f31:	83 ec 04             	sub    $0x4,%esp
f0107f34:	68 f8 54 13 f0       	push   $0xf01354f8
f0107f39:	6a 35                	push   $0x35
f0107f3b:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f40:	e8 61 82 ff ff       	call   f01001a6 <_panic>

f0107f45 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0107f45:	55                   	push   %ebp
f0107f46:	89 e5                	mov    %esp,%ebp
f0107f48:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0107f4b:	83 ec 04             	sub    $0x4,%esp
f0107f4e:	68 24 55 13 f0       	push   $0xf0135524
f0107f53:	6a 41                	push   $0x41
f0107f55:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f5a:	e8 47 82 ff ff       	call   f01001a6 <_panic>

f0107f5f <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0107f5f:	55                   	push   %ebp
f0107f60:	89 e5                	mov    %esp,%ebp
f0107f62:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0107f65:	83 ec 04             	sub    $0x4,%esp
f0107f68:	68 54 55 13 f0       	push   $0xf0135554
f0107f6d:	6a 4c                	push   $0x4c
f0107f6f:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f74:	e8 2d 82 ff ff       	call   f01001a6 <_panic>

f0107f79 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0107f79:	55                   	push   %ebp
f0107f7a:	89 e5                	mov    %esp,%ebp
f0107f7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0107f7f:	83 ec 04             	sub    $0x4,%esp
f0107f82:	68 8c 55 13 f0       	push   $0xf013558c
f0107f87:	6a 5b                	push   $0x5b
f0107f89:	68 aa 54 13 f0       	push   $0xf01354aa
f0107f8e:	e8 13 82 ff ff       	call   f01001a6 <_panic>

f0107f93 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107f93:	55                   	push   %ebp
f0107f94:	89 e5                	mov    %esp,%ebp
f0107f96:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0107f99:	83 ec 04             	sub    $0x4,%esp
f0107f9c:	68 c4 55 13 f0       	push   $0xf01355c4
f0107fa1:	6a 70                	push   $0x70
f0107fa3:	68 aa 54 13 f0       	push   $0xf01354aa
f0107fa8:	e8 f9 81 ff ff       	call   f01001a6 <_panic>

f0107fad <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107fad:	55                   	push   %ebp
f0107fae:	89 e5                	mov    %esp,%ebp
f0107fb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0107fb3:	83 ec 04             	sub    $0x4,%esp
f0107fb6:	68 f4 55 13 f0       	push   $0xf01355f4
f0107fbb:	6a 7a                	push   $0x7a
f0107fbd:	68 aa 54 13 f0       	push   $0xf01354aa
f0107fc2:	e8 df 81 ff ff       	call   f01001a6 <_panic>

f0107fc7 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0107fc7:	55                   	push   %ebp
f0107fc8:	89 e5                	mov    %esp,%ebp
f0107fca:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0107fcd:	83 ec 04             	sub    $0x4,%esp
f0107fd0:	68 20 56 13 f0       	push   $0xf0135620
f0107fd5:	68 88 00 00 00       	push   $0x88
f0107fda:	68 aa 54 13 f0       	push   $0xf01354aa
f0107fdf:	e8 c2 81 ff ff       	call   f01001a6 <_panic>

f0107fe4 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0107fe4:	55                   	push   %ebp
f0107fe5:	89 e5                	mov    %esp,%ebp
f0107fe7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0107fea:	83 ec 04             	sub    $0x4,%esp
f0107fed:	68 60 56 13 f0       	push   $0xf0135660
f0107ff2:	68 98 00 00 00       	push   $0x98
f0107ff7:	68 aa 54 13 f0       	push   $0xf01354aa
f0107ffc:	e8 a5 81 ff ff       	call   f01001a6 <_panic>

f0108001 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108001:	55                   	push   %ebp
f0108002:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108004:	8b 45 08             	mov    0x8(%ebp),%eax
f0108007:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f010800d:	29 d0                	sub    %edx,%eax
f010800f:	c1 f8 03             	sar    $0x3,%eax
f0108012:	89 c2                	mov    %eax,%edx
f0108014:	89 d0                	mov    %edx,%eax
f0108016:	c1 e0 02             	shl    $0x2,%eax
f0108019:	01 d0                	add    %edx,%eax
f010801b:	c1 e0 02             	shl    $0x2,%eax
f010801e:	01 d0                	add    %edx,%eax
f0108020:	c1 e0 02             	shl    $0x2,%eax
f0108023:	01 d0                	add    %edx,%eax
f0108025:	89 c1                	mov    %eax,%ecx
f0108027:	c1 e1 08             	shl    $0x8,%ecx
f010802a:	01 c8                	add    %ecx,%eax
f010802c:	89 c1                	mov    %eax,%ecx
f010802e:	c1 e1 10             	shl    $0x10,%ecx
f0108031:	01 c8                	add    %ecx,%eax
f0108033:	01 c0                	add    %eax,%eax
f0108035:	01 d0                	add    %edx,%eax
}
f0108037:	5d                   	pop    %ebp
f0108038:	c3                   	ret    

f0108039 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108039:	55                   	push   %ebp
f010803a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010803c:	ff 75 08             	pushl  0x8(%ebp)
f010803f:	e8 bd ff ff ff       	call   f0108001 <to_frame_number>
f0108044:	83 c4 04             	add    $0x4,%esp
f0108047:	c1 e0 0c             	shl    $0xc,%eax
}
f010804a:	c9                   	leave  
f010804b:	c3                   	ret    

f010804c <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010804c:	55                   	push   %ebp
f010804d:	89 e5                	mov    %esp,%ebp
f010804f:	57                   	push   %edi
f0108050:	56                   	push   %esi
f0108051:	53                   	push   %ebx
f0108052:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108058:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f010805f:	83 ec 0c             	sub    $0xc,%esp
f0108062:	ff 75 08             	pushl  0x8(%ebp)
f0108065:	e8 c8 22 00 00       	call   f010a332 <get_user_program_info>
f010806a:	83 c4 10             	add    $0x10,%esp
f010806d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108070:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108074:	75 0a                	jne    f0108080 <env_create+0x34>
f0108076:	b8 00 00 00 00       	mov    $0x0,%eax
f010807b:	e9 8f 0c 00 00       	jmp    f0108d0f <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108080:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108083:	8b 40 08             	mov    0x8(%eax),%eax
f0108086:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108089:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f0108090:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108093:	83 ec 0c             	sub    $0xc,%esp
f0108096:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010809c:	50                   	push   %eax
f010809d:	e8 32 10 00 00       	call   f01090d4 <allocate_environment>
f01080a2:	83 c4 10             	add    $0x10,%esp
f01080a5:	85 c0                	test   %eax,%eax
f01080a7:	79 0a                	jns    f01080b3 <env_create+0x67>
	{
		return 0;
f01080a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01080ae:	e9 5c 0c 00 00       	jmp    f0108d0f <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01080b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080b6:	8b 00                	mov    (%eax),%eax
f01080b8:	83 ec 0c             	sub    $0xc,%esp
f01080bb:	50                   	push   %eax
f01080bc:	e8 a4 7f 02 00       	call   f0130065 <strlen>
f01080c1:	83 c4 10             	add    $0x10,%esp
f01080c4:	83 f8 3f             	cmp    $0x3f,%eax
f01080c7:	7f 20                	jg     f01080e9 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01080c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080cc:	8b 00                	mov    (%eax),%eax
f01080ce:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01080d4:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f01080da:	83 ec 08             	sub    $0x8,%esp
f01080dd:	50                   	push   %eax
f01080de:	52                   	push   %edx
f01080df:	e8 d0 7f 02 00       	call   f01300b4 <strcpy>
f01080e4:	83 c4 10             	add    $0x10,%esp
f01080e7:	eb 20                	jmp    f0108109 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01080e9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01080ec:	8b 00                	mov    (%eax),%eax
f01080ee:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01080f4:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f01080fa:	83 ec 04             	sub    $0x4,%esp
f01080fd:	6a 3f                	push   $0x3f
f01080ff:	50                   	push   %eax
f0108100:	52                   	push   %edx
f0108101:	e8 dc 7f 02 00       	call   f01300e2 <strncpy>
f0108106:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108109:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0108110:	00 00 00 

		allocate_frame(&p) ;
f0108113:	83 ec 0c             	sub    $0xc,%esp
f0108116:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010811c:	50                   	push   %eax
f010811d:	e8 88 e6 ff ff       	call   f01067aa <allocate_frame>
f0108122:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108125:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010812b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108131:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108137:	83 ec 0c             	sub    $0xc,%esp
f010813a:	50                   	push   %eax
f010813b:	e8 f9 fe ff ff       	call   f0108039 <to_physical_address>
f0108140:	83 c4 10             	add    $0x10,%esp
f0108143:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108146:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108149:	c1 e8 0c             	shr    $0xc,%eax
f010814c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010814f:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0108154:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108157:	72 17                	jb     f0108170 <env_create+0x124>
f0108159:	ff 75 b0             	pushl  -0x50(%ebp)
f010815c:	68 8c 56 13 f0       	push   $0xf013568c
f0108161:	68 8d 00 00 00       	push   $0x8d
f0108166:	68 bb 56 13 f0       	push   $0xf01356bb
f010816b:	e8 36 80 ff ff       	call   f01001a6 <_panic>
f0108170:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108173:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108178:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f010817b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108181:	83 ec 0c             	sub    $0xc,%esp
f0108184:	50                   	push   %eax
f0108185:	e8 af fe ff ff       	call   f0108039 <to_physical_address>
f010818a:	83 c4 10             	add    $0x10,%esp
f010818d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108190:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108196:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108199:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010819c:	83 ec 0c             	sub    $0xc,%esp
f010819f:	6a 02                	push   $0x2
f01081a1:	e8 a1 4d 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f01081a6:	83 c4 10             	add    $0x10,%esp
f01081a9:	85 c0                	test   %eax,%eax
f01081ab:	74 21                	je     f01081ce <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01081ad:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081b3:	8b 55 10             	mov    0x10(%ebp),%edx
f01081b6:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01081bc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081c5:	2b 55 10             	sub    0x10(%ebp),%edx
f01081c8:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01081ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01081d2:	75 12                	jne    f01081e6 <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01081d4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081da:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f01081e1:	00 00 00 
f01081e4:	eb 0f                	jmp    f01081f5 <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01081e6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081ec:	8b 55 14             	mov    0x14(%ebp),%edx
f01081ef:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01081f5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01081fb:	83 ec 04             	sub    $0x4,%esp
f01081fe:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108201:	ff 75 a8             	pushl  -0x58(%ebp)
f0108204:	50                   	push   %eax
f0108205:	e8 ed 16 00 00       	call   f01098f7 <initialize_environment>
f010820a:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010820d:	0f 20 d8             	mov    %cr3,%eax
f0108210:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108213:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108216:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108219:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010821f:	8b 40 60             	mov    0x60(%eax),%eax
f0108222:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108228:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010822e:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108231:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108238:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f010823f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108245:	8b 40 74             	mov    0x74(%eax),%eax
f0108248:	48                   	dec    %eax
f0108249:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010824c:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f0108253:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108256:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f010825c:	83 ec 08             	sub    $0x8,%esp
f010825f:	ff 75 b8             	pushl  -0x48(%ebp)
f0108262:	50                   	push   %eax
f0108263:	e8 ff 1d 00 00       	call   f010a067 <PROGRAM_SEGMENT_FIRST>
f0108268:	83 c4 0c             	add    $0xc,%esp
f010826b:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f0108271:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108277:	b9 05 00 00 00       	mov    $0x5,%ecx
f010827c:	89 c7                	mov    %eax,%edi
f010827e:	89 d6                	mov    %edx,%esi
f0108280:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108282:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f0108288:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010828b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010828e:	8b 40 10             	mov    0x10(%eax),%eax
f0108291:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108294:	75 07                	jne    f010829d <env_create+0x251>
f0108296:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010829d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01082a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01082a3:	e9 24 03 00 00       	jmp    f01085cc <env_create+0x580>
	{
		segment_counter++;
f01082a8:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01082ab:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01082b2:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01082b5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01082bb:	83 ec 0c             	sub    $0xc,%esp
f01082be:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f01082c4:	52                   	push   %edx
f01082c5:	ff 75 dc             	pushl  -0x24(%ebp)
f01082c8:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f01082ce:	52                   	push   %edx
f01082cf:	ff 75 e4             	pushl  -0x1c(%ebp)
f01082d2:	50                   	push   %eax
f01082d3:	e8 f4 0e 00 00       	call   f01091cc <program_segment_alloc_map_copy_workingset>
f01082d8:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f01082db:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01082e1:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01082e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01082e7:	8b 00                	mov    (%eax),%eax
f01082e9:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01082ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01082ef:	8b 40 0c             	mov    0xc(%eax),%eax
f01082f2:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01082f5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01082f8:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01082fb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01082fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108303:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108306:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010830d:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108310:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108313:	01 d0                	add    %edx,%eax
f0108315:	48                   	dec    %eax
f0108316:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108319:	8b 45 80             	mov    -0x80(%ebp),%eax
f010831c:	ba 00 00 00 00       	mov    $0x0,%edx
f0108321:	f7 75 84             	divl   -0x7c(%ebp)
f0108324:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108327:	29 d0                	sub    %edx,%eax
f0108329:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f010832f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108332:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108335:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f010833b:	a1 e0 74 6e f0       	mov    0xf06e74e0,%eax
f0108340:	83 ec 04             	sub    $0x4,%esp
f0108343:	68 00 10 00 00       	push   $0x1000
f0108348:	6a 00                	push   $0x0
f010834a:	50                   	push   %eax
f010834b:	e8 03 7f 02 00       	call   f0130253 <memset>
f0108350:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108353:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108356:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108359:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f010835f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108365:	01 d0                	add    %edx,%eax
f0108367:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010836a:	8b 45 90             	mov    -0x70(%ebp),%eax
f010836d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108370:	eb 13                	jmp    f0108385 <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f0108372:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108375:	8a 10                	mov    (%eax),%dl
f0108377:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010837a:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010837c:	ff 45 cc             	incl   -0x34(%ebp)
f010837f:	ff 45 d4             	incl   -0x2c(%ebp)
f0108382:	ff 45 d0             	incl   -0x30(%ebp)
f0108385:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108388:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f010838e:	72 e2                	jb     f0108372 <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108390:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f0108396:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010839c:	83 ec 04             	sub    $0x4,%esp
f010839f:	52                   	push   %edx
f01083a0:	ff 75 88             	pushl  -0x78(%ebp)
f01083a3:	50                   	push   %eax
f01083a4:	e8 73 b1 ff ff       	call   f010351c <pf_add_env_page>
f01083a9:	83 c4 10             	add    $0x10,%esp
f01083ac:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01083af:	75 17                	jne    f01083c8 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01083b1:	83 ec 04             	sub    $0x4,%esp
f01083b4:	68 d8 56 13 f0       	push   $0xf01356d8
f01083b9:	68 e1 00 00 00       	push   $0xe1
f01083be:	68 bb 56 13 f0       	push   $0xf01356bb
f01083c3:	e8 de 7d ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01083c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01083cb:	8b 50 04             	mov    0x4(%eax),%edx
f01083ce:	8b 45 90             	mov    -0x70(%ebp),%eax
f01083d1:	01 d0                	add    %edx,%eax
f01083d3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01083d9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01083df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01083e4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f01083ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01083ed:	8b 50 04             	mov    0x4(%eax),%edx
f01083f0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01083fb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108401:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108404:	eb 43                	jmp    f0108449 <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108406:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108409:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010840f:	83 ec 04             	sub    $0x4,%esp
f0108412:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108415:	52                   	push   %edx
f0108416:	50                   	push   %eax
f0108417:	e8 00 b1 ff ff       	call   f010351c <pf_add_env_page>
f010841c:	83 c4 10             	add    $0x10,%esp
f010841f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108422:	75 17                	jne    f010843b <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108424:	83 ec 04             	sub    $0x4,%esp
f0108427:	68 d8 56 13 f0       	push   $0xf01356d8
f010842c:	68 ee 00 00 00       	push   $0xee
f0108431:	68 bb 56 13 f0       	push   $0xf01356bb
f0108436:	e8 6b 7d ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010843b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108442:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108449:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010844c:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0108452:	72 b2                	jb     f0108406 <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108454:	a1 e0 74 6e f0       	mov    0xf06e74e0,%eax
f0108459:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010845c:	83 ec 04             	sub    $0x4,%esp
f010845f:	68 00 10 00 00       	push   $0x1000
f0108464:	6a 00                	push   $0x0
f0108466:	ff 75 d0             	pushl  -0x30(%ebp)
f0108469:	e8 e5 7d 02 00       	call   f0130253 <memset>
f010846e:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108471:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0108477:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010847a:	eb 13                	jmp    f010848f <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f010847c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010847f:	8a 10                	mov    (%eax),%dl
f0108481:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108484:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0108486:	ff 45 cc             	incl   -0x34(%ebp)
f0108489:	ff 45 d4             	incl   -0x2c(%ebp)
f010848c:	ff 45 d0             	incl   -0x30(%ebp)
f010848f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108492:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0108498:	72 e2                	jb     f010847c <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010849a:	8b 15 e0 74 6e f0    	mov    0xf06e74e0,%edx
f01084a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084a6:	83 ec 04             	sub    $0x4,%esp
f01084a9:	52                   	push   %edx
f01084aa:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01084b0:	50                   	push   %eax
f01084b1:	e8 66 b0 ff ff       	call   f010351c <pf_add_env_page>
f01084b6:	83 c4 10             	add    $0x10,%esp
f01084b9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01084bc:	75 17                	jne    f01084d5 <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01084be:	83 ec 04             	sub    $0x4,%esp
f01084c1:	68 d8 56 13 f0       	push   $0xf01356d8
f01084c6:	68 fd 00 00 00       	push   $0xfd
f01084cb:	68 bb 56 13 f0       	push   $0xf01356bb
f01084d0:	e8 d1 7c ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01084d5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01084dc:	10 00 00 
f01084df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01084e2:	8b 50 04             	mov    0x4(%eax),%edx
f01084e5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01084e8:	01 c2                	add    %eax,%edx
f01084ea:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01084f0:	01 d0                	add    %edx,%eax
f01084f2:	48                   	dec    %eax
f01084f3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01084f9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01084ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0108504:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010850a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108510:	29 d0                	sub    %edx,%eax
f0108512:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0108515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108518:	8b 50 08             	mov    0x8(%eax),%edx
f010851b:	8b 45 90             	mov    -0x70(%ebp),%eax
f010851e:	01 d0                	add    %edx,%eax
f0108520:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0108523:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108529:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108530:	eb 41                	jmp    f0108573 <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0108532:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108538:	83 ec 04             	sub    $0x4,%esp
f010853b:	6a 01                	push   $0x1
f010853d:	ff 75 c8             	pushl  -0x38(%ebp)
f0108540:	50                   	push   %eax
f0108541:	e8 a5 ae ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108546:	83 c4 10             	add    $0x10,%esp
f0108549:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010854c:	75 17                	jne    f0108565 <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010854e:	83 ec 04             	sub    $0x4,%esp
f0108551:	68 d8 56 13 f0       	push   $0xf01356d8
f0108556:	68 0a 01 00 00       	push   $0x10a
f010855b:	68 bb 56 13 f0       	push   $0xf01356bb
f0108560:	e8 41 7c ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108565:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010856c:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0108573:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010857a:	10 00 00 
f010857d:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0108583:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0108589:	01 d0                	add    %edx,%eax
f010858b:	48                   	dec    %eax
f010858c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0108592:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0108598:	ba 00 00 00 00       	mov    $0x0,%edx
f010859d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01085a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01085a9:	29 d0                	sub    %edx,%eax
f01085ab:	89 c2                	mov    %eax,%edx
f01085ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01085b0:	39 c2                	cmp    %eax,%edx
f01085b2:	0f 87 7a ff ff ff    	ja     f0108532 <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01085b8:	83 ec 08             	sub    $0x8,%esp
f01085bb:	ff 75 b8             	pushl  -0x48(%ebp)
f01085be:	ff 75 e4             	pushl  -0x1c(%ebp)
f01085c1:	e8 96 19 00 00       	call   f0109f5c <PROGRAM_SEGMENT_NEXT>
f01085c6:	83 c4 10             	add    $0x10,%esp
f01085c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01085cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01085d0:	0f 85 d2 fc ff ff    	jne    f01082a8 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f01085d6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01085dd:	e9 9c 00 00 00       	jmp    f010867e <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f01085e2:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01085e8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01085eb:	89 d0                	mov    %edx,%eax
f01085ed:	01 c0                	add    %eax,%eax
f01085ef:	01 d0                	add    %edx,%eax
f01085f1:	c1 e0 03             	shl    $0x3,%eax
f01085f4:	01 c8                	add    %ecx,%eax
f01085f6:	83 c0 7c             	add    $0x7c,%eax
f01085f9:	8a 00                	mov    (%eax),%al
f01085fb:	84 c0                	test   %al,%al
f01085fd:	75 7c                	jne    f010867b <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01085ff:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108605:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108608:	89 d0                	mov    %edx,%eax
f010860a:	01 c0                	add    %eax,%eax
f010860c:	01 d0                	add    %edx,%eax
f010860e:	c1 e0 03             	shl    $0x3,%eax
f0108611:	01 c8                	add    %ecx,%eax
f0108613:	83 c0 78             	add    $0x78,%eax
f0108616:	8b 00                	mov    (%eax),%eax
f0108618:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010861e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108624:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108627:	83 ec 04             	sub    $0x4,%esp
f010862a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108630:	52                   	push   %edx
f0108631:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f0108637:	50                   	push   %eax
f0108638:	e8 2c e3 ff ff       	call   f0106969 <get_page_table>
f010863d:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108640:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108646:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010864c:	c1 ea 0c             	shr    $0xc,%edx
f010864f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108655:	c1 e2 02             	shl    $0x2,%edx
f0108658:	01 d0                	add    %edx,%eax
f010865a:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0108660:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0108666:	c1 e9 0c             	shr    $0xc,%ecx
f0108669:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010866f:	c1 e1 02             	shl    $0x2,%ecx
f0108672:	01 ca                	add    %ecx,%edx
f0108674:	8b 12                	mov    (%edx),%edx
f0108676:	83 e2 bf             	and    $0xffffffbf,%edx
f0108679:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010867b:	ff 45 c4             	incl   -0x3c(%ebp)
f010867e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108684:	8b 50 74             	mov    0x74(%eax),%edx
f0108687:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010868a:	39 c2                	cmp    %eax,%edx
f010868c:	0f 87 50 ff ff ff    	ja     f01085e2 <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0108692:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108695:	8b 50 08             	mov    0x8(%eax),%edx
f0108698:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010869e:	83 ec 08             	sub    $0x8,%esp
f01086a1:	52                   	push   %edx
f01086a2:	50                   	push   %eax
f01086a3:	e8 3a 18 00 00       	call   f0109ee2 <set_environment_entry_point>
f01086a8:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01086ab:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086b1:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f01086b8:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01086bb:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01086c2:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01086c5:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01086cc:	e9 9a 05 00 00       	jmp    f0108c6b <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f01086d1:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f01086d8:	00 00 00 
		allocate_frame(&pp);
f01086db:	83 ec 0c             	sub    $0xc,%esp
f01086de:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01086e4:	50                   	push   %eax
f01086e5:	e8 c0 e0 ff ff       	call   f01067aa <allocate_frame>
f01086ea:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f01086ed:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f01086f3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086f9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01086fc:	6a 06                	push   $0x6
f01086fe:	ff 75 c0             	pushl  -0x40(%ebp)
f0108701:	52                   	push   %edx
f0108702:	50                   	push   %eax
f0108703:	e8 f0 e5 ff ff       	call   f0106cf8 <loadtime_map_frame>
f0108708:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010870b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010870e:	83 ec 04             	sub    $0x4,%esp
f0108711:	68 00 10 00 00       	push   $0x1000
f0108716:	6a 00                	push   $0x0
f0108718:	50                   	push   %eax
f0108719:	e8 35 7b 02 00       	call   f0130253 <memset>
f010871e:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108721:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108727:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010872d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108733:	83 ec 04             	sub    $0x4,%esp
f0108736:	ff 75 c0             	pushl  -0x40(%ebp)
f0108739:	52                   	push   %edx
f010873a:	50                   	push   %eax
f010873b:	e8 1d ef ff ff       	call   f010765d <env_page_ws_set_entry>
f0108740:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108743:	83 ec 0c             	sub    $0xc,%esp
f0108746:	6a 02                	push   $0x2
f0108748:	e8 fa 47 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f010874d:	83 c4 10             	add    $0x10,%esp
f0108750:	85 c0                	test   %eax,%eax
f0108752:	0f 84 b2 04 00 00    	je     f0108c0a <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108758:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010875e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108764:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010876a:	89 d0                	mov    %edx,%eax
f010876c:	01 c0                	add    %eax,%eax
f010876e:	01 d0                	add    %edx,%eax
f0108770:	c1 e0 03             	shl    $0x3,%eax
f0108773:	83 c0 70             	add    $0x70,%eax
f0108776:	01 c8                	add    %ecx,%eax
f0108778:	83 c0 08             	add    $0x8,%eax
f010877b:	85 c0                	test   %eax,%eax
f010877d:	75 17                	jne    f0108796 <env_create+0x74a>
f010877f:	83 ec 04             	sub    $0x4,%esp
f0108782:	68 1d 57 13 f0       	push   $0xf013571d
f0108787:	68 41 01 00 00       	push   $0x141
f010878c:	68 bb 56 13 f0       	push   $0xf01356bb
f0108791:	e8 10 7a ff ff       	call   f01001a6 <_panic>
f0108796:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010879c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087a2:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01087a8:	89 d0                	mov    %edx,%eax
f01087aa:	01 c0                	add    %eax,%eax
f01087ac:	01 d0                	add    %edx,%eax
f01087ae:	c1 e0 03             	shl    $0x3,%eax
f01087b1:	01 c8                	add    %ecx,%eax
f01087b3:	05 88 00 00 00       	add    $0x88,%eax
f01087b8:	8b 00                	mov    (%eax),%eax
f01087ba:	85 c0                	test   %eax,%eax
f01087bc:	74 4d                	je     f010880b <env_create+0x7bf>
f01087be:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01087c4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087ca:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01087d0:	89 d0                	mov    %edx,%eax
f01087d2:	01 c0                	add    %eax,%eax
f01087d4:	01 d0                	add    %edx,%eax
f01087d6:	c1 e0 03             	shl    $0x3,%eax
f01087d9:	01 c8                	add    %ecx,%eax
f01087db:	05 88 00 00 00       	add    $0x88,%eax
f01087e0:	8b 10                	mov    (%eax),%edx
f01087e2:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01087e8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087ee:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01087f4:	89 c8                	mov    %ecx,%eax
f01087f6:	01 c0                	add    %eax,%eax
f01087f8:	01 c8                	add    %ecx,%eax
f01087fa:	c1 e0 03             	shl    $0x3,%eax
f01087fd:	01 d8                	add    %ebx,%eax
f01087ff:	05 8c 00 00 00       	add    $0x8c,%eax
f0108804:	8b 00                	mov    (%eax),%eax
f0108806:	89 42 14             	mov    %eax,0x14(%edx)
f0108809:	eb 30                	jmp    f010883b <env_create+0x7ef>
f010880b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108811:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108817:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010881d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108823:	89 c8                	mov    %ecx,%eax
f0108825:	01 c0                	add    %eax,%eax
f0108827:	01 c8                	add    %ecx,%eax
f0108829:	c1 e0 03             	shl    $0x3,%eax
f010882c:	01 d8                	add    %ebx,%eax
f010882e:	05 8c 00 00 00       	add    $0x8c,%eax
f0108833:	8b 00                	mov    (%eax),%eax
f0108835:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f010883b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108841:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108847:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010884d:	89 d0                	mov    %edx,%eax
f010884f:	01 c0                	add    %eax,%eax
f0108851:	01 d0                	add    %edx,%eax
f0108853:	c1 e0 03             	shl    $0x3,%eax
f0108856:	01 c8                	add    %ecx,%eax
f0108858:	05 8c 00 00 00       	add    $0x8c,%eax
f010885d:	8b 00                	mov    (%eax),%eax
f010885f:	85 c0                	test   %eax,%eax
f0108861:	74 4d                	je     f01088b0 <env_create+0x864>
f0108863:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108869:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010886f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108875:	89 d0                	mov    %edx,%eax
f0108877:	01 c0                	add    %eax,%eax
f0108879:	01 d0                	add    %edx,%eax
f010887b:	c1 e0 03             	shl    $0x3,%eax
f010887e:	01 c8                	add    %ecx,%eax
f0108880:	05 8c 00 00 00       	add    $0x8c,%eax
f0108885:	8b 10                	mov    (%eax),%edx
f0108887:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f010888d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108893:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108899:	89 c8                	mov    %ecx,%eax
f010889b:	01 c0                	add    %eax,%eax
f010889d:	01 c8                	add    %ecx,%eax
f010889f:	c1 e0 03             	shl    $0x3,%eax
f01088a2:	01 d8                	add    %ebx,%eax
f01088a4:	05 88 00 00 00       	add    $0x88,%eax
f01088a9:	8b 00                	mov    (%eax),%eax
f01088ab:	89 42 10             	mov    %eax,0x10(%edx)
f01088ae:	eb 30                	jmp    f01088e0 <env_create+0x894>
f01088b0:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f01088b6:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01088bc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088c2:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01088c8:	89 c8                	mov    %ecx,%eax
f01088ca:	01 c0                	add    %eax,%eax
f01088cc:	01 c8                	add    %ecx,%eax
f01088ce:	c1 e0 03             	shl    $0x3,%eax
f01088d1:	01 d8                	add    %ebx,%eax
f01088d3:	05 88 00 00 00       	add    $0x88,%eax
f01088d8:	8b 00                	mov    (%eax),%eax
f01088da:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f01088e0:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01088e6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01088ec:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01088f2:	89 d0                	mov    %edx,%eax
f01088f4:	01 c0                	add    %eax,%eax
f01088f6:	01 d0                	add    %edx,%eax
f01088f8:	c1 e0 03             	shl    $0x3,%eax
f01088fb:	01 c8                	add    %ecx,%eax
f01088fd:	05 88 00 00 00       	add    $0x88,%eax
f0108902:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108908:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010890e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108914:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010891a:	89 d0                	mov    %edx,%eax
f010891c:	01 c0                	add    %eax,%eax
f010891e:	01 d0                	add    %edx,%eax
f0108920:	c1 e0 03             	shl    $0x3,%eax
f0108923:	01 c8                	add    %ecx,%eax
f0108925:	05 8c 00 00 00       	add    $0x8c,%eax
f010892a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108930:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108936:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f010893c:	4a                   	dec    %edx
f010893d:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0108943:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108949:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010894f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108955:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f010895b:	39 c2                	cmp    %eax,%edx
f010895d:	0f 83 56 01 00 00    	jae    f0108ab9 <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108963:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108969:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010896f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108975:	89 d0                	mov    %edx,%eax
f0108977:	01 c0                	add    %eax,%eax
f0108979:	01 d0                	add    %edx,%eax
f010897b:	c1 e0 03             	shl    $0x3,%eax
f010897e:	83 c0 70             	add    $0x70,%eax
f0108981:	01 c8                	add    %ecx,%eax
f0108983:	83 c0 08             	add    $0x8,%eax
f0108986:	85 c0                	test   %eax,%eax
f0108988:	75 17                	jne    f01089a1 <env_create+0x955>
f010898a:	83 ec 04             	sub    $0x4,%esp
f010898d:	68 3c 57 13 f0       	push   $0xf013573c
f0108992:	68 46 01 00 00       	push   $0x146
f0108997:	68 bb 56 13 f0       	push   $0xf01356bb
f010899c:	e8 05 78 ff ff       	call   f01001a6 <_panic>
f01089a1:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f01089a7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089ad:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01089b3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089b9:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f01089bf:	89 d0                	mov    %edx,%eax
f01089c1:	01 c0                	add    %eax,%eax
f01089c3:	01 d0                	add    %edx,%eax
f01089c5:	c1 e0 03             	shl    $0x3,%eax
f01089c8:	01 c8                	add    %ecx,%eax
f01089ca:	05 88 00 00 00       	add    $0x88,%eax
f01089cf:	89 18                	mov    %ebx,(%eax)
f01089d1:	89 d0                	mov    %edx,%eax
f01089d3:	01 c0                	add    %eax,%eax
f01089d5:	01 d0                	add    %edx,%eax
f01089d7:	c1 e0 03             	shl    $0x3,%eax
f01089da:	01 c8                	add    %ecx,%eax
f01089dc:	05 88 00 00 00       	add    $0x88,%eax
f01089e1:	8b 00                	mov    (%eax),%eax
f01089e3:	85 c0                	test   %eax,%eax
f01089e5:	74 34                	je     f0108a1b <env_create+0x9cf>
f01089e7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089ed:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f01089f3:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f01089f9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089ff:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a05:	89 c8                	mov    %ecx,%eax
f0108a07:	01 c0                	add    %eax,%eax
f0108a09:	01 c8                	add    %ecx,%eax
f0108a0b:	c1 e0 03             	shl    $0x3,%eax
f0108a0e:	83 c0 70             	add    $0x70,%eax
f0108a11:	01 d8                	add    %ebx,%eax
f0108a13:	83 c0 08             	add    $0x8,%eax
f0108a16:	89 42 14             	mov    %eax,0x14(%edx)
f0108a19:	eb 2f                	jmp    f0108a4a <env_create+0x9fe>
f0108a1b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108a21:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108a27:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a2d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a33:	89 c8                	mov    %ecx,%eax
f0108a35:	01 c0                	add    %eax,%eax
f0108a37:	01 c8                	add    %ecx,%eax
f0108a39:	c1 e0 03             	shl    $0x3,%eax
f0108a3c:	83 c0 70             	add    $0x70,%eax
f0108a3f:	01 d8                	add    %ebx,%eax
f0108a41:	83 c0 08             	add    $0x8,%eax
f0108a44:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0108a4a:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108a50:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108a56:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a5c:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108a62:	89 c8                	mov    %ecx,%eax
f0108a64:	01 c0                	add    %eax,%eax
f0108a66:	01 c8                	add    %ecx,%eax
f0108a68:	c1 e0 03             	shl    $0x3,%eax
f0108a6b:	83 c0 70             	add    $0x70,%eax
f0108a6e:	01 d8                	add    %ebx,%eax
f0108a70:	83 c0 08             	add    $0x8,%eax
f0108a73:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f0108a79:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108a7f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a85:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108a8b:	89 d0                	mov    %edx,%eax
f0108a8d:	01 c0                	add    %eax,%eax
f0108a8f:	01 d0                	add    %edx,%eax
f0108a91:	c1 e0 03             	shl    $0x3,%eax
f0108a94:	01 c8                	add    %ecx,%eax
f0108a96:	05 8c 00 00 00       	add    $0x8c,%eax
f0108a9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108aa1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108aa7:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108aad:	42                   	inc    %edx
f0108aae:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0108ab4:	e9 51 01 00 00       	jmp    f0108c0a <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108ab9:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108abf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ac5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108acb:	89 d0                	mov    %edx,%eax
f0108acd:	01 c0                	add    %eax,%eax
f0108acf:	01 d0                	add    %edx,%eax
f0108ad1:	c1 e0 03             	shl    $0x3,%eax
f0108ad4:	83 c0 70             	add    $0x70,%eax
f0108ad7:	01 c8                	add    %ecx,%eax
f0108ad9:	83 c0 08             	add    $0x8,%eax
f0108adc:	85 c0                	test   %eax,%eax
f0108ade:	75 17                	jne    f0108af7 <env_create+0xaab>
f0108ae0:	83 ec 04             	sub    $0x4,%esp
f0108ae3:	68 3c 57 13 f0       	push   $0xf013573c
f0108ae8:	68 4a 01 00 00       	push   $0x14a
f0108aed:	68 bb 56 13 f0       	push   $0xf01356bb
f0108af2:	e8 af 76 ff ff       	call   f01001a6 <_panic>
f0108af7:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108afd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b03:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b0f:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f0108b15:	89 d0                	mov    %edx,%eax
f0108b17:	01 c0                	add    %eax,%eax
f0108b19:	01 d0                	add    %edx,%eax
f0108b1b:	c1 e0 03             	shl    $0x3,%eax
f0108b1e:	01 c8                	add    %ecx,%eax
f0108b20:	05 88 00 00 00       	add    $0x88,%eax
f0108b25:	89 18                	mov    %ebx,(%eax)
f0108b27:	89 d0                	mov    %edx,%eax
f0108b29:	01 c0                	add    %eax,%eax
f0108b2b:	01 d0                	add    %edx,%eax
f0108b2d:	c1 e0 03             	shl    $0x3,%eax
f0108b30:	01 c8                	add    %ecx,%eax
f0108b32:	05 88 00 00 00       	add    $0x88,%eax
f0108b37:	8b 00                	mov    (%eax),%eax
f0108b39:	85 c0                	test   %eax,%eax
f0108b3b:	74 34                	je     f0108b71 <env_create+0xb25>
f0108b3d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b43:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108b49:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b4f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b55:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b5b:	89 c8                	mov    %ecx,%eax
f0108b5d:	01 c0                	add    %eax,%eax
f0108b5f:	01 c8                	add    %ecx,%eax
f0108b61:	c1 e0 03             	shl    $0x3,%eax
f0108b64:	83 c0 70             	add    $0x70,%eax
f0108b67:	01 d8                	add    %ebx,%eax
f0108b69:	83 c0 08             	add    $0x8,%eax
f0108b6c:	89 42 14             	mov    %eax,0x14(%edx)
f0108b6f:	eb 2f                	jmp    f0108ba0 <env_create+0xb54>
f0108b71:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108b77:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b7d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b83:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b89:	89 c8                	mov    %ecx,%eax
f0108b8b:	01 c0                	add    %eax,%eax
f0108b8d:	01 c8                	add    %ecx,%eax
f0108b8f:	c1 e0 03             	shl    $0x3,%eax
f0108b92:	83 c0 70             	add    $0x70,%eax
f0108b95:	01 d8                	add    %ebx,%eax
f0108b97:	83 c0 08             	add    $0x8,%eax
f0108b9a:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f0108ba0:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108ba6:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bb2:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108bb8:	89 c8                	mov    %ecx,%eax
f0108bba:	01 c0                	add    %eax,%eax
f0108bbc:	01 c8                	add    %ecx,%eax
f0108bbe:	c1 e0 03             	shl    $0x3,%eax
f0108bc1:	83 c0 70             	add    $0x70,%eax
f0108bc4:	01 d8                	add    %ebx,%eax
f0108bc6:	83 c0 08             	add    $0x8,%eax
f0108bc9:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f0108bcf:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108bd5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bdb:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108be1:	89 d0                	mov    %edx,%eax
f0108be3:	01 c0                	add    %eax,%eax
f0108be5:	01 d0                	add    %edx,%eax
f0108be7:	c1 e0 03             	shl    $0x3,%eax
f0108bea:	01 c8                	add    %ecx,%eax
f0108bec:	05 8c 00 00 00       	add    $0x8c,%eax
f0108bf1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108bf7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bfd:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0108c03:	42                   	inc    %edx
f0108c04:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0108c0a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c10:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c16:	42                   	inc    %edx
f0108c17:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0108c1d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c23:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c29:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108c2f:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108c35:	8b 5a 74             	mov    0x74(%edx),%ebx
f0108c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c3d:	f7 f3                	div    %ebx
f0108c3f:	89 d0                	mov    %edx,%eax
f0108c41:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0108c47:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c4d:	83 ec 04             	sub    $0x4,%esp
f0108c50:	6a 01                	push   $0x1
f0108c52:	ff 75 c0             	pushl  -0x40(%ebp)
f0108c55:	50                   	push   %eax
f0108c56:	e8 90 a7 ff ff       	call   f01033eb <pf_add_empty_env_page>
f0108c5b:	83 c4 10             	add    $0x10,%esp
f0108c5e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108c64:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0108c6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108c6e:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0108c74:	0f 83 57 fa ff ff    	jae    f01086d1 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108c7a:	83 ec 0c             	sub    $0xc,%esp
f0108c7d:	6a 02                	push   $0x2
f0108c7f:	e8 c3 42 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0108c84:	83 c4 10             	add    $0x10,%esp
f0108c87:	85 c0                	test   %eax,%eax
f0108c89:	74 72                	je     f0108cfd <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f0108c8b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0108c92:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c98:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0108c9e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108ca1:	eb 2b                	jmp    f0108cce <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0108ca3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108ca6:	8b 10                	mov    (%eax),%edx
f0108ca8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cae:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108cb1:	6a 01                	push   $0x1
f0108cb3:	6a 00                	push   $0x0
f0108cb5:	52                   	push   %edx
f0108cb6:	50                   	push   %eax
f0108cb7:	e8 f0 e7 ff ff       	call   f01074ac <pt_set_page_permissions>
f0108cbc:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0108cbf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cc5:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0108ccb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108cce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cd4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108cd8:	74 08                	je     f0108ce2 <env_create+0xc96>
f0108cda:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0108cdd:	8b 52 10             	mov    0x10(%edx),%edx
f0108ce0:	eb 05                	jmp    f0108ce7 <env_create+0xc9b>
f0108ce2:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ce7:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0108ced:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0108cf3:	85 c0                	test   %eax,%eax
f0108cf5:	75 ac                	jne    f0108ca3 <env_create+0xc57>
f0108cf7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108cfb:	75 a6                	jne    f0108ca3 <env_create+0xc57>
f0108cfd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108d00:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0108d03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0108d06:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0108d09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0108d0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0108d12:	5b                   	pop    %ebx
f0108d13:	5e                   	pop    %esi
f0108d14:	5f                   	pop    %edi
f0108d15:	5d                   	pop    %ebp
f0108d16:	c3                   	ret    

f0108d17 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0108d17:	55                   	push   %ebp
f0108d18:	89 e5                	mov    %esp,%ebp
f0108d1a:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0108d1d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d22:	3b 45 08             	cmp    0x8(%ebp),%eax
f0108d25:	74 25                	je     f0108d4c <env_run+0x35>
	{
		curenv = e ;
f0108d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d2a:	a3 34 77 65 f0       	mov    %eax,0xf0657734
		curenv->env_runs++ ;
f0108d2f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d34:	8b 50 58             	mov    0x58(%eax),%edx
f0108d37:	42                   	inc    %edx
f0108d38:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0108d3b:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d40:	8b 40 60             	mov    0x60(%eax),%eax
f0108d43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108d46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d49:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0108d4c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d51:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0108d58:	e8 7c b3 ff ff       	call   f01040d9 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0108d5d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d62:	83 ec 0c             	sub    $0xc,%esp
f0108d65:	50                   	push   %eax
f0108d66:	e8 11 01 00 00       	call   f0108e7c <env_pop_tf>

f0108d6b <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0108d6b:	55                   	push   %ebp
f0108d6c:	89 e5                	mov    %esp,%ebp
f0108d6e:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0108d71:	83 ec 04             	sub    $0x4,%esp
f0108d74:	68 60 57 13 f0       	push   $0xf0135760
f0108d79:	68 9d 01 00 00       	push   $0x19d
f0108d7e:	68 bb 56 13 f0       	push   $0xf01356bb
f0108d83:	e8 1e 74 ff ff       	call   f01001a6 <_panic>

f0108d88 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0108d88:	55                   	push   %ebp
f0108d89:	89 e5                	mov    %esp,%ebp
f0108d8b:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0108d8e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108d93:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108d96:	83 ec 0c             	sub    $0xc,%esp
f0108d99:	50                   	push   %eax
f0108d9a:	e8 76 c3 ff ff       	call   f0105115 <sched_exit_env>
f0108d9f:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0108da2:	e8 44 b8 ff ff       	call   f01045eb <fos_scheduler>

f0108da7 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0108da7:	55                   	push   %ebp
f0108da8:	89 e5                	mov    %esp,%ebp
f0108daa:	53                   	push   %ebx
f0108dab:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0108dae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108db2:	75 15                	jne    f0108dc9 <envid2env+0x22>
		*env_store = curenv;
f0108db4:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f0108dba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108dbd:	89 10                	mov    %edx,(%eax)
		return 0;
f0108dbf:	b8 00 00 00 00       	mov    $0x0,%eax
f0108dc4:	e9 ae 00 00 00       	jmp    f0108e77 <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0108dc9:	8b 1d 30 77 65 f0    	mov    0xf0657730,%ebx
f0108dcf:	83 ec 0c             	sub    $0xc,%esp
f0108dd2:	6a 08                	push   $0x8
f0108dd4:	e8 17 60 02 00       	call   f012edf0 <nearest_pow2_ceil>
f0108dd9:	83 c4 10             	add    $0x10,%esp
f0108ddc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0108ddf:	8b 45 08             	mov    0x8(%ebp),%eax
f0108de2:	21 c2                	and    %eax,%edx
f0108de4:	89 d0                	mov    %edx,%eax
f0108de6:	01 c0                	add    %eax,%eax
f0108de8:	01 d0                	add    %edx,%eax
f0108dea:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108df1:	01 c8                	add    %ecx,%eax
f0108df3:	c1 e0 02             	shl    $0x2,%eax
f0108df6:	01 d0                	add    %edx,%eax
f0108df8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0108dff:	01 c8                	add    %ecx,%eax
f0108e01:	c1 e0 02             	shl    $0x2,%eax
f0108e04:	01 d0                	add    %edx,%eax
f0108e06:	c1 e0 02             	shl    $0x2,%eax
f0108e09:	01 d0                	add    %edx,%eax
f0108e0b:	c1 e0 03             	shl    $0x3,%eax
f0108e0e:	01 d8                	add    %ebx,%eax
f0108e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0108e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e16:	8b 40 54             	mov    0x54(%eax),%eax
f0108e19:	85 c0                	test   %eax,%eax
f0108e1b:	74 0b                	je     f0108e28 <envid2env+0x81>
f0108e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e20:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108e23:	3b 45 08             	cmp    0x8(%ebp),%eax
f0108e26:	74 10                	je     f0108e38 <envid2env+0x91>
		*env_store = 0;
f0108e28:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0108e31:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0108e36:	eb 3f                	jmp    f0108e77 <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0108e38:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0108e3c:	74 2c                	je     f0108e6a <envid2env+0xc3>
f0108e3e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108e43:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0108e46:	74 22                	je     f0108e6a <envid2env+0xc3>
f0108e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e4b:	8b 50 50             	mov    0x50(%eax),%edx
f0108e4e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0108e53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0108e56:	39 c2                	cmp    %eax,%edx
f0108e58:	74 10                	je     f0108e6a <envid2env+0xc3>
		*env_store = 0;
f0108e5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0108e63:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0108e68:	eb 0d                	jmp    f0108e77 <envid2env+0xd0>
	}

	*env_store = e;
f0108e6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108e70:	89 10                	mov    %edx,(%eax)
	return 0;
f0108e72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e77:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108e7a:	c9                   	leave  
f0108e7b:	c3                   	ret    

f0108e7c <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0108e7c:	55                   	push   %ebp
f0108e7d:	89 e5                	mov    %esp,%ebp
f0108e7f:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0108e82:	8b 65 08             	mov    0x8(%ebp),%esp
f0108e85:	61                   	popa   
f0108e86:	07                   	pop    %es
f0108e87:	1f                   	pop    %ds
f0108e88:	83 c4 08             	add    $0x8,%esp
f0108e8b:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0108e8c:	83 ec 04             	sub    $0x4,%esp
f0108e8f:	68 87 57 13 f0       	push   $0xf0135787
f0108e94:	68 fc 01 00 00       	push   $0x1fc
f0108e99:	68 bb 56 13 f0       	push   $0xf01356bb
f0108e9e:	e8 03 73 ff ff       	call   f01001a6 <_panic>

f0108ea3 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0108ea3:	55                   	push   %ebp
f0108ea4:	89 e5                	mov    %esp,%ebp
f0108ea6:	56                   	push   %esi
f0108ea7:	53                   	push   %ebx
f0108ea8:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0108eab:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0108eb2:	e9 0b 02 00 00       	jmp    f01090c2 <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f0108eb7:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108ebd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ec0:	89 d0                	mov    %edx,%eax
f0108ec2:	01 c0                	add    %eax,%eax
f0108ec4:	01 d0                	add    %edx,%eax
f0108ec6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108ecd:	01 d8                	add    %ebx,%eax
f0108ecf:	c1 e0 02             	shl    $0x2,%eax
f0108ed2:	01 d0                	add    %edx,%eax
f0108ed4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108edb:	01 d8                	add    %ebx,%eax
f0108edd:	c1 e0 02             	shl    $0x2,%eax
f0108ee0:	01 d0                	add    %edx,%eax
f0108ee2:	c1 e0 02             	shl    $0x2,%eax
f0108ee5:	01 d0                	add    %edx,%eax
f0108ee7:	c1 e0 03             	shl    $0x3,%eax
f0108eea:	01 c8                	add    %ecx,%eax
f0108eec:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0108ef3:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108ef9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108efc:	89 d0                	mov    %edx,%eax
f0108efe:	01 c0                	add    %eax,%eax
f0108f00:	01 d0                	add    %edx,%eax
f0108f02:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f09:	01 d8                	add    %ebx,%eax
f0108f0b:	c1 e0 02             	shl    $0x2,%eax
f0108f0e:	01 d0                	add    %edx,%eax
f0108f10:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f17:	01 d8                	add    %ebx,%eax
f0108f19:	c1 e0 02             	shl    $0x2,%eax
f0108f1c:	01 d0                	add    %edx,%eax
f0108f1e:	c1 e0 02             	shl    $0x2,%eax
f0108f21:	01 d0                	add    %edx,%eax
f0108f23:	c1 e0 03             	shl    $0x3,%eax
f0108f26:	01 c8                	add    %ecx,%eax
f0108f28:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0108f2f:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108f35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f38:	89 d0                	mov    %edx,%eax
f0108f3a:	01 c0                	add    %eax,%eax
f0108f3c:	01 d0                	add    %edx,%eax
f0108f3e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f45:	01 d8                	add    %ebx,%eax
f0108f47:	c1 e0 02             	shl    $0x2,%eax
f0108f4a:	01 d0                	add    %edx,%eax
f0108f4c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f53:	01 d8                	add    %ebx,%eax
f0108f55:	c1 e0 02             	shl    $0x2,%eax
f0108f58:	01 d0                	add    %edx,%eax
f0108f5a:	c1 e0 02             	shl    $0x2,%eax
f0108f5d:	01 d0                	add    %edx,%eax
f0108f5f:	c1 e0 03             	shl    $0x3,%eax
f0108f62:	01 c8                	add    %ecx,%eax
f0108f64:	85 c0                	test   %eax,%eax
f0108f66:	75 17                	jne    f0108f7f <env_init+0xdc>
f0108f68:	83 ec 04             	sub    $0x4,%esp
f0108f6b:	68 3c 57 13 f0       	push   $0xf013573c
f0108f70:	68 18 02 00 00       	push   $0x218
f0108f75:	68 bb 56 13 f0       	push   $0xf01356bb
f0108f7a:	e8 27 72 ff ff       	call   f01001a6 <_panic>
f0108f7f:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0108f85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108f88:	89 d0                	mov    %edx,%eax
f0108f8a:	01 c0                	add    %eax,%eax
f0108f8c:	01 d0                	add    %edx,%eax
f0108f8e:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108f95:	01 d8                	add    %ebx,%eax
f0108f97:	c1 e0 02             	shl    $0x2,%eax
f0108f9a:	01 d0                	add    %edx,%eax
f0108f9c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0108fa3:	01 d8                	add    %ebx,%eax
f0108fa5:	c1 e0 02             	shl    $0x2,%eax
f0108fa8:	01 d0                	add    %edx,%eax
f0108faa:	c1 e0 02             	shl    $0x2,%eax
f0108fad:	01 d0                	add    %edx,%eax
f0108faf:	c1 e0 03             	shl    $0x3,%eax
f0108fb2:	01 c8                	add    %ecx,%eax
f0108fb4:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f0108fba:	89 50 44             	mov    %edx,0x44(%eax)
f0108fbd:	8b 40 44             	mov    0x44(%eax),%eax
f0108fc0:	85 c0                	test   %eax,%eax
f0108fc2:	74 40                	je     f0109004 <env_init+0x161>
f0108fc4:	8b 0d 38 77 65 f0    	mov    0xf0657738,%ecx
f0108fca:	8b 1d 30 77 65 f0    	mov    0xf0657730,%ebx
f0108fd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108fd3:	89 d0                	mov    %edx,%eax
f0108fd5:	01 c0                	add    %eax,%eax
f0108fd7:	01 d0                	add    %edx,%eax
f0108fd9:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0108fe0:	01 f0                	add    %esi,%eax
f0108fe2:	c1 e0 02             	shl    $0x2,%eax
f0108fe5:	01 d0                	add    %edx,%eax
f0108fe7:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0108fee:	01 f0                	add    %esi,%eax
f0108ff0:	c1 e0 02             	shl    $0x2,%eax
f0108ff3:	01 d0                	add    %edx,%eax
f0108ff5:	c1 e0 02             	shl    $0x2,%eax
f0108ff8:	01 d0                	add    %edx,%eax
f0108ffa:	c1 e0 03             	shl    $0x3,%eax
f0108ffd:	01 d8                	add    %ebx,%eax
f0108fff:	89 41 48             	mov    %eax,0x48(%ecx)
f0109002:	eb 3a                	jmp    f010903e <env_init+0x19b>
f0109004:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f010900a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010900d:	89 d0                	mov    %edx,%eax
f010900f:	01 c0                	add    %eax,%eax
f0109011:	01 d0                	add    %edx,%eax
f0109013:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010901a:	01 d8                	add    %ebx,%eax
f010901c:	c1 e0 02             	shl    $0x2,%eax
f010901f:	01 d0                	add    %edx,%eax
f0109021:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109028:	01 d8                	add    %ebx,%eax
f010902a:	c1 e0 02             	shl    $0x2,%eax
f010902d:	01 d0                	add    %edx,%eax
f010902f:	c1 e0 02             	shl    $0x2,%eax
f0109032:	01 d0                	add    %edx,%eax
f0109034:	c1 e0 03             	shl    $0x3,%eax
f0109037:	01 c8                	add    %ecx,%eax
f0109039:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f010903e:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f0109044:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109047:	89 d0                	mov    %edx,%eax
f0109049:	01 c0                	add    %eax,%eax
f010904b:	01 d0                	add    %edx,%eax
f010904d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109054:	01 d8                	add    %ebx,%eax
f0109056:	c1 e0 02             	shl    $0x2,%eax
f0109059:	01 d0                	add    %edx,%eax
f010905b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109062:	01 d8                	add    %ebx,%eax
f0109064:	c1 e0 02             	shl    $0x2,%eax
f0109067:	01 d0                	add    %edx,%eax
f0109069:	c1 e0 02             	shl    $0x2,%eax
f010906c:	01 d0                	add    %edx,%eax
f010906e:	c1 e0 03             	shl    $0x3,%eax
f0109071:	01 c8                	add    %ecx,%eax
f0109073:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f0109078:	8b 0d 30 77 65 f0    	mov    0xf0657730,%ecx
f010907e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109081:	89 d0                	mov    %edx,%eax
f0109083:	01 c0                	add    %eax,%eax
f0109085:	01 d0                	add    %edx,%eax
f0109087:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010908e:	01 d8                	add    %ebx,%eax
f0109090:	c1 e0 02             	shl    $0x2,%eax
f0109093:	01 d0                	add    %edx,%eax
f0109095:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010909c:	01 d8                	add    %ebx,%eax
f010909e:	c1 e0 02             	shl    $0x2,%eax
f01090a1:	01 d0                	add    %edx,%eax
f01090a3:	c1 e0 02             	shl    $0x2,%eax
f01090a6:	01 d0                	add    %edx,%eax
f01090a8:	c1 e0 03             	shl    $0x3,%eax
f01090ab:	01 c8                	add    %ecx,%eax
f01090ad:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01090b4:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f01090b9:	40                   	inc    %eax
f01090ba:	a3 44 77 65 f0       	mov    %eax,0xf0657744
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01090bf:	ff 4d f4             	decl   -0xc(%ebp)
f01090c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01090c6:	0f 89 eb fd ff ff    	jns    f0108eb7 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01090cc:	90                   	nop
f01090cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01090d0:	5b                   	pop    %ebx
f01090d1:	5e                   	pop    %esi
f01090d2:	5d                   	pop    %ebp
f01090d3:	c3                   	ret    

f01090d4 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01090d4:	55                   	push   %ebp
f01090d5:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01090d7:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f01090dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e0:	89 10                	mov    %edx,(%eax)
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	8b 00                	mov    (%eax),%eax
f01090e7:	85 c0                	test   %eax,%eax
f01090e9:	75 07                	jne    f01090f2 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f01090eb:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f01090f0:	eb 11                	jmp    f0109103 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f01090f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090f5:	8b 00                	mov    (%eax),%eax
f01090f7:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f01090fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109103:	5d                   	pop    %ebp
f0109104:	c3                   	ret    

f0109105 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109105:	55                   	push   %ebp
f0109106:	89 e5                	mov    %esp,%ebp
f0109108:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010910b:	83 ec 04             	sub    $0x4,%esp
f010910e:	68 a8 ea 01 00       	push   $0x1eaa8
f0109113:	6a 00                	push   $0x0
f0109115:	ff 75 08             	pushl  0x8(%ebp)
f0109118:	e8 36 71 02 00       	call   f0130253 <memset>
f010911d:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109120:	8b 45 08             	mov    0x8(%ebp),%eax
f0109123:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010912a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010912e:	75 17                	jne    f0109147 <free_environment+0x42>
f0109130:	83 ec 04             	sub    $0x4,%esp
f0109133:	68 3c 57 13 f0       	push   $0xf013573c
f0109138:	68 35 02 00 00       	push   $0x235
f010913d:	68 bb 56 13 f0       	push   $0xf01356bb
f0109142:	e8 5f 70 ff ff       	call   f01001a6 <_panic>
f0109147:	8b 15 38 77 65 f0    	mov    0xf0657738,%edx
f010914d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109150:	89 50 44             	mov    %edx,0x44(%eax)
f0109153:	8b 45 08             	mov    0x8(%ebp),%eax
f0109156:	8b 40 44             	mov    0x44(%eax),%eax
f0109159:	85 c0                	test   %eax,%eax
f010915b:	74 0d                	je     f010916a <free_environment+0x65>
f010915d:	a1 38 77 65 f0       	mov    0xf0657738,%eax
f0109162:	8b 55 08             	mov    0x8(%ebp),%edx
f0109165:	89 50 48             	mov    %edx,0x48(%eax)
f0109168:	eb 08                	jmp    f0109172 <free_environment+0x6d>
f010916a:	8b 45 08             	mov    0x8(%ebp),%eax
f010916d:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f0109172:	8b 45 08             	mov    0x8(%ebp),%eax
f0109175:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f010917a:	8b 45 08             	mov    0x8(%ebp),%eax
f010917d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109184:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f0109189:	40                   	inc    %eax
f010918a:	a3 44 77 65 f0       	mov    %eax,0xf0657744
}
f010918f:	90                   	nop
f0109190:	c9                   	leave  
f0109191:	c3                   	ret    

f0109192 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109192:	55                   	push   %ebp
f0109193:	89 e5                	mov    %esp,%ebp
f0109195:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f0109198:	83 ec 04             	sub    $0x4,%esp
f010919b:	68 94 57 13 f0       	push   $0xf0135794
f01091a0:	68 3f 02 00 00       	push   $0x23f
f01091a5:	68 bb 56 13 f0       	push   $0xf01356bb
f01091aa:	e8 f7 6f ff ff       	call   f01001a6 <_panic>

f01091af <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01091af:	55                   	push   %ebp
f01091b0:	89 e5                	mov    %esp,%ebp
f01091b2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01091b5:	83 ec 04             	sub    $0x4,%esp
f01091b8:	68 c8 57 13 f0       	push   $0xf01357c8
f01091bd:	68 4b 02 00 00       	push   $0x24b
f01091c2:	68 bb 56 13 f0       	push   $0xf01356bb
f01091c7:	e8 da 6f ff ff       	call   f01001a6 <_panic>

f01091cc <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f01091cc:	55                   	push   %ebp
f01091cd:	89 e5                	mov    %esp,%ebp
f01091cf:	53                   	push   %ebx
f01091d0:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f01091d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01091d6:	8b 40 0c             	mov    0xc(%eax),%eax
f01091d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f01091dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01091df:	8b 40 08             	mov    0x8(%eax),%eax
f01091e2:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f01091e5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01091ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01091ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091f2:	01 c2                	add    %eax,%edx
f01091f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01091f7:	01 d0                	add    %edx,%eax
f01091f9:	48                   	dec    %eax
f01091fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01091fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109200:	ba 00 00 00 00       	mov    $0x0,%edx
f0109205:	f7 75 dc             	divl   -0x24(%ebp)
f0109208:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010920b:	29 d0                	sub    %edx,%eax
f010920d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109210:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109213:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109216:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109219:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010921e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109221:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109228:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010922f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109232:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109238:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010923f:	0f 85 12 06 00 00    	jne    f0109857 <program_segment_alloc_map_copy_workingset+0x68b>
f0109245:	8b 45 08             	mov    0x8(%ebp),%eax
f0109248:	05 18 da 01 00       	add    $0x1da18,%eax
f010924d:	83 ec 08             	sub    $0x8,%esp
f0109250:	68 fc 57 13 f0       	push   $0xf01357fc
f0109255:	50                   	push   %eax
f0109256:	e8 16 6f 02 00       	call   f0130171 <strcmp>
f010925b:	83 c4 10             	add    $0x10,%esp
f010925e:	85 c0                	test   %eax,%eax
f0109260:	0f 84 f1 05 00 00    	je     f0109857 <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109266:	8b 45 14             	mov    0x14(%ebp),%eax
f0109269:	83 f8 06             	cmp    $0x6,%eax
f010926c:	76 05                	jbe    f0109273 <program_segment_alloc_map_copy_workingset+0xa7>
f010926e:	b8 06 00 00 00       	mov    $0x6,%eax
f0109273:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109276:	e9 dc 05 00 00       	jmp    f0109857 <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010927b:	83 ec 0c             	sub    $0xc,%esp
f010927e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109281:	50                   	push   %eax
f0109282:	e8 23 d5 ff ff       	call   f01067aa <allocate_frame>
f0109287:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010928a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010928d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109290:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109293:	6a 06                	push   $0x6
f0109295:	ff 75 f4             	pushl  -0xc(%ebp)
f0109298:	52                   	push   %edx
f0109299:	50                   	push   %eax
f010929a:	e8 59 da ff ff       	call   f0106cf8 <loadtime_map_frame>
f010929f:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01092a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01092a5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01092ab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092ae:	89 d0                	mov    %edx,%eax
f01092b0:	01 c0                	add    %eax,%eax
f01092b2:	01 d0                	add    %edx,%eax
f01092b4:	c1 e0 03             	shl    $0x3,%eax
f01092b7:	01 c8                	add    %ecx,%eax
f01092b9:	8d 50 78             	lea    0x78(%eax),%edx
f01092bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092bf:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01092c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01092c4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01092ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092cd:	89 d0                	mov    %edx,%eax
f01092cf:	01 c0                	add    %eax,%eax
f01092d1:	01 d0                	add    %edx,%eax
f01092d3:	c1 e0 03             	shl    $0x3,%eax
f01092d6:	01 c8                	add    %ecx,%eax
f01092d8:	83 c0 7c             	add    $0x7c,%eax
f01092db:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f01092de:	8b 45 08             	mov    0x8(%ebp),%eax
f01092e1:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01092e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092ea:	89 d0                	mov    %edx,%eax
f01092ec:	01 c0                	add    %eax,%eax
f01092ee:	01 d0                	add    %edx,%eax
f01092f0:	c1 e0 03             	shl    $0x3,%eax
f01092f3:	01 c8                	add    %ecx,%eax
f01092f5:	83 e8 80             	sub    $0xffffff80,%eax
f01092f8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01092fe:	83 ec 0c             	sub    $0xc,%esp
f0109301:	6a 02                	push   $0x2
f0109303:	e8 3f 3c 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0109308:	83 c4 10             	add    $0x10,%esp
f010930b:	85 c0                	test   %eax,%eax
f010930d:	0f 84 11 04 00 00    	je     f0109724 <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109313:	8b 45 08             	mov    0x8(%ebp),%eax
f0109316:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010931c:	89 d0                	mov    %edx,%eax
f010931e:	01 c0                	add    %eax,%eax
f0109320:	01 d0                	add    %edx,%eax
f0109322:	c1 e0 03             	shl    $0x3,%eax
f0109325:	8d 50 70             	lea    0x70(%eax),%edx
f0109328:	8b 45 08             	mov    0x8(%ebp),%eax
f010932b:	01 d0                	add    %edx,%eax
f010932d:	83 c0 08             	add    $0x8,%eax
f0109330:	85 c0                	test   %eax,%eax
f0109332:	75 17                	jne    f010934b <program_segment_alloc_map_copy_workingset+0x17f>
f0109334:	83 ec 04             	sub    $0x4,%esp
f0109337:	68 1d 57 13 f0       	push   $0xf013571d
f010933c:	68 7d 02 00 00       	push   $0x27d
f0109341:	68 bb 56 13 f0       	push   $0xf01356bb
f0109346:	e8 5b 6e ff ff       	call   f01001a6 <_panic>
f010934b:	8b 45 08             	mov    0x8(%ebp),%eax
f010934e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109354:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109357:	89 d0                	mov    %edx,%eax
f0109359:	01 c0                	add    %eax,%eax
f010935b:	01 d0                	add    %edx,%eax
f010935d:	c1 e0 03             	shl    $0x3,%eax
f0109360:	01 c8                	add    %ecx,%eax
f0109362:	05 88 00 00 00       	add    $0x88,%eax
f0109367:	8b 00                	mov    (%eax),%eax
f0109369:	85 c0                	test   %eax,%eax
f010936b:	74 41                	je     f01093ae <program_segment_alloc_map_copy_workingset+0x1e2>
f010936d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109370:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109376:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109379:	89 d0                	mov    %edx,%eax
f010937b:	01 c0                	add    %eax,%eax
f010937d:	01 d0                	add    %edx,%eax
f010937f:	c1 e0 03             	shl    $0x3,%eax
f0109382:	01 c8                	add    %ecx,%eax
f0109384:	05 88 00 00 00       	add    $0x88,%eax
f0109389:	8b 10                	mov    (%eax),%edx
f010938b:	8b 45 08             	mov    0x8(%ebp),%eax
f010938e:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109394:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109397:	89 c8                	mov    %ecx,%eax
f0109399:	01 c0                	add    %eax,%eax
f010939b:	01 c8                	add    %ecx,%eax
f010939d:	c1 e0 03             	shl    $0x3,%eax
f01093a0:	01 d8                	add    %ebx,%eax
f01093a2:	05 8c 00 00 00       	add    $0x8c,%eax
f01093a7:	8b 00                	mov    (%eax),%eax
f01093a9:	89 42 14             	mov    %eax,0x14(%edx)
f01093ac:	eb 27                	jmp    f01093d5 <program_segment_alloc_map_copy_workingset+0x209>
f01093ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01093b1:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01093b7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093ba:	89 d0                	mov    %edx,%eax
f01093bc:	01 c0                	add    %eax,%eax
f01093be:	01 d0                	add    %edx,%eax
f01093c0:	c1 e0 03             	shl    $0x3,%eax
f01093c3:	01 c8                	add    %ecx,%eax
f01093c5:	05 8c 00 00 00       	add    $0x8c,%eax
f01093ca:	8b 10                	mov    (%eax),%edx
f01093cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01093cf:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f01093d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01093d8:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01093de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093e1:	89 d0                	mov    %edx,%eax
f01093e3:	01 c0                	add    %eax,%eax
f01093e5:	01 d0                	add    %edx,%eax
f01093e7:	c1 e0 03             	shl    $0x3,%eax
f01093ea:	01 c8                	add    %ecx,%eax
f01093ec:	05 8c 00 00 00       	add    $0x8c,%eax
f01093f1:	8b 00                	mov    (%eax),%eax
f01093f3:	85 c0                	test   %eax,%eax
f01093f5:	74 41                	je     f0109438 <program_segment_alloc_map_copy_workingset+0x26c>
f01093f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01093fa:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109400:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109403:	89 d0                	mov    %edx,%eax
f0109405:	01 c0                	add    %eax,%eax
f0109407:	01 d0                	add    %edx,%eax
f0109409:	c1 e0 03             	shl    $0x3,%eax
f010940c:	01 c8                	add    %ecx,%eax
f010940e:	05 8c 00 00 00       	add    $0x8c,%eax
f0109413:	8b 10                	mov    (%eax),%edx
f0109415:	8b 45 08             	mov    0x8(%ebp),%eax
f0109418:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010941e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109421:	89 c8                	mov    %ecx,%eax
f0109423:	01 c0                	add    %eax,%eax
f0109425:	01 c8                	add    %ecx,%eax
f0109427:	c1 e0 03             	shl    $0x3,%eax
f010942a:	01 d8                	add    %ebx,%eax
f010942c:	05 88 00 00 00       	add    $0x88,%eax
f0109431:	8b 00                	mov    (%eax),%eax
f0109433:	89 42 10             	mov    %eax,0x10(%edx)
f0109436:	eb 27                	jmp    f010945f <program_segment_alloc_map_copy_workingset+0x293>
f0109438:	8b 45 08             	mov    0x8(%ebp),%eax
f010943b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109441:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109444:	89 d0                	mov    %edx,%eax
f0109446:	01 c0                	add    %eax,%eax
f0109448:	01 d0                	add    %edx,%eax
f010944a:	c1 e0 03             	shl    $0x3,%eax
f010944d:	01 c8                	add    %ecx,%eax
f010944f:	05 88 00 00 00       	add    $0x88,%eax
f0109454:	8b 10                	mov    (%eax),%edx
f0109456:	8b 45 08             	mov    0x8(%ebp),%eax
f0109459:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f010945f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109462:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109468:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010946b:	89 d0                	mov    %edx,%eax
f010946d:	01 c0                	add    %eax,%eax
f010946f:	01 d0                	add    %edx,%eax
f0109471:	c1 e0 03             	shl    $0x3,%eax
f0109474:	01 c8                	add    %ecx,%eax
f0109476:	05 88 00 00 00       	add    $0x88,%eax
f010947b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109481:	8b 45 08             	mov    0x8(%ebp),%eax
f0109484:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010948a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010948d:	89 d0                	mov    %edx,%eax
f010948f:	01 c0                	add    %eax,%eax
f0109491:	01 d0                	add    %edx,%eax
f0109493:	c1 e0 03             	shl    $0x3,%eax
f0109496:	01 c8                	add    %ecx,%eax
f0109498:	05 8c 00 00 00       	add    $0x8c,%eax
f010949d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01094a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a6:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f01094ac:	8d 50 ff             	lea    -0x1(%eax),%edx
f01094af:	8b 45 08             	mov    0x8(%ebp),%eax
f01094b2:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f01094b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01094bb:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01094c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01094c4:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f01094ca:	48                   	dec    %eax
f01094cb:	39 c2                	cmp    %eax,%edx
f01094cd:	0f 83 2b 01 00 00    	jae    f01095fe <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01094d6:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01094dc:	89 d0                	mov    %edx,%eax
f01094de:	01 c0                	add    %eax,%eax
f01094e0:	01 d0                	add    %edx,%eax
f01094e2:	c1 e0 03             	shl    $0x3,%eax
f01094e5:	8d 50 70             	lea    0x70(%eax),%edx
f01094e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01094eb:	01 d0                	add    %edx,%eax
f01094ed:	83 c0 08             	add    $0x8,%eax
f01094f0:	85 c0                	test   %eax,%eax
f01094f2:	75 17                	jne    f010950b <program_segment_alloc_map_copy_workingset+0x33f>
f01094f4:	83 ec 04             	sub    $0x4,%esp
f01094f7:	68 3c 57 13 f0       	push   $0xf013573c
f01094fc:	68 81 02 00 00       	push   $0x281
f0109501:	68 bb 56 13 f0       	push   $0xf01356bb
f0109506:	e8 9b 6c ff ff       	call   f01001a6 <_panic>
f010950b:	8b 45 08             	mov    0x8(%ebp),%eax
f010950e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109514:	8b 45 08             	mov    0x8(%ebp),%eax
f0109517:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f010951d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109520:	89 d0                	mov    %edx,%eax
f0109522:	01 c0                	add    %eax,%eax
f0109524:	01 d0                	add    %edx,%eax
f0109526:	c1 e0 03             	shl    $0x3,%eax
f0109529:	01 d8                	add    %ebx,%eax
f010952b:	05 88 00 00 00       	add    $0x88,%eax
f0109530:	89 08                	mov    %ecx,(%eax)
f0109532:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109535:	89 d0                	mov    %edx,%eax
f0109537:	01 c0                	add    %eax,%eax
f0109539:	01 d0                	add    %edx,%eax
f010953b:	c1 e0 03             	shl    $0x3,%eax
f010953e:	01 c8                	add    %ecx,%eax
f0109540:	05 88 00 00 00       	add    $0x88,%eax
f0109545:	8b 00                	mov    (%eax),%eax
f0109547:	85 c0                	test   %eax,%eax
f0109549:	74 2b                	je     f0109576 <program_segment_alloc_map_copy_workingset+0x3aa>
f010954b:	8b 45 08             	mov    0x8(%ebp),%eax
f010954e:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0109554:	8b 45 08             	mov    0x8(%ebp),%eax
f0109557:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f010955d:	89 c8                	mov    %ecx,%eax
f010955f:	01 c0                	add    %eax,%eax
f0109561:	01 c8                	add    %ecx,%eax
f0109563:	c1 e0 03             	shl    $0x3,%eax
f0109566:	8d 48 70             	lea    0x70(%eax),%ecx
f0109569:	8b 45 08             	mov    0x8(%ebp),%eax
f010956c:	01 c8                	add    %ecx,%eax
f010956e:	83 c0 08             	add    $0x8,%eax
f0109571:	89 42 14             	mov    %eax,0x14(%edx)
f0109574:	eb 26                	jmp    f010959c <program_segment_alloc_map_copy_workingset+0x3d0>
f0109576:	8b 45 08             	mov    0x8(%ebp),%eax
f0109579:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010957f:	89 d0                	mov    %edx,%eax
f0109581:	01 c0                	add    %eax,%eax
f0109583:	01 d0                	add    %edx,%eax
f0109585:	c1 e0 03             	shl    $0x3,%eax
f0109588:	8d 50 70             	lea    0x70(%eax),%edx
f010958b:	8b 45 08             	mov    0x8(%ebp),%eax
f010958e:	01 d0                	add    %edx,%eax
f0109590:	8d 50 08             	lea    0x8(%eax),%edx
f0109593:	8b 45 08             	mov    0x8(%ebp),%eax
f0109596:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f010959c:	8b 45 08             	mov    0x8(%ebp),%eax
f010959f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095a5:	89 d0                	mov    %edx,%eax
f01095a7:	01 c0                	add    %eax,%eax
f01095a9:	01 d0                	add    %edx,%eax
f01095ab:	c1 e0 03             	shl    $0x3,%eax
f01095ae:	8d 50 70             	lea    0x70(%eax),%edx
f01095b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01095b4:	01 d0                	add    %edx,%eax
f01095b6:	8d 50 08             	lea    0x8(%eax),%edx
f01095b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01095bc:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f01095c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01095c5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095cb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095ce:	89 d0                	mov    %edx,%eax
f01095d0:	01 c0                	add    %eax,%eax
f01095d2:	01 d0                	add    %edx,%eax
f01095d4:	c1 e0 03             	shl    $0x3,%eax
f01095d7:	01 c8                	add    %ecx,%eax
f01095d9:	05 8c 00 00 00       	add    $0x8c,%eax
f01095de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e7:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f01095ed:	8d 50 01             	lea    0x1(%eax),%edx
f01095f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01095f3:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f01095f9:	e9 26 01 00 00       	jmp    f0109724 <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01095fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109601:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109607:	89 d0                	mov    %edx,%eax
f0109609:	01 c0                	add    %eax,%eax
f010960b:	01 d0                	add    %edx,%eax
f010960d:	c1 e0 03             	shl    $0x3,%eax
f0109610:	8d 50 70             	lea    0x70(%eax),%edx
f0109613:	8b 45 08             	mov    0x8(%ebp),%eax
f0109616:	01 d0                	add    %edx,%eax
f0109618:	83 c0 08             	add    $0x8,%eax
f010961b:	85 c0                	test   %eax,%eax
f010961d:	75 17                	jne    f0109636 <program_segment_alloc_map_copy_workingset+0x46a>
f010961f:	83 ec 04             	sub    $0x4,%esp
f0109622:	68 3c 57 13 f0       	push   $0xf013573c
f0109627:	68 86 02 00 00       	push   $0x286
f010962c:	68 bb 56 13 f0       	push   $0xf01356bb
f0109631:	e8 70 6b ff ff       	call   f01001a6 <_panic>
f0109636:	8b 45 08             	mov    0x8(%ebp),%eax
f0109639:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010963f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109642:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109648:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010964b:	89 d0                	mov    %edx,%eax
f010964d:	01 c0                	add    %eax,%eax
f010964f:	01 d0                	add    %edx,%eax
f0109651:	c1 e0 03             	shl    $0x3,%eax
f0109654:	01 d8                	add    %ebx,%eax
f0109656:	05 88 00 00 00       	add    $0x88,%eax
f010965b:	89 08                	mov    %ecx,(%eax)
f010965d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109660:	89 d0                	mov    %edx,%eax
f0109662:	01 c0                	add    %eax,%eax
f0109664:	01 d0                	add    %edx,%eax
f0109666:	c1 e0 03             	shl    $0x3,%eax
f0109669:	01 c8                	add    %ecx,%eax
f010966b:	05 88 00 00 00       	add    $0x88,%eax
f0109670:	8b 00                	mov    (%eax),%eax
f0109672:	85 c0                	test   %eax,%eax
f0109674:	74 2b                	je     f01096a1 <program_segment_alloc_map_copy_workingset+0x4d5>
f0109676:	8b 45 08             	mov    0x8(%ebp),%eax
f0109679:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f010967f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109682:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109688:	89 c8                	mov    %ecx,%eax
f010968a:	01 c0                	add    %eax,%eax
f010968c:	01 c8                	add    %ecx,%eax
f010968e:	c1 e0 03             	shl    $0x3,%eax
f0109691:	8d 48 70             	lea    0x70(%eax),%ecx
f0109694:	8b 45 08             	mov    0x8(%ebp),%eax
f0109697:	01 c8                	add    %ecx,%eax
f0109699:	83 c0 08             	add    $0x8,%eax
f010969c:	89 42 14             	mov    %eax,0x14(%edx)
f010969f:	eb 26                	jmp    f01096c7 <program_segment_alloc_map_copy_workingset+0x4fb>
f01096a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a4:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096aa:	89 d0                	mov    %edx,%eax
f01096ac:	01 c0                	add    %eax,%eax
f01096ae:	01 d0                	add    %edx,%eax
f01096b0:	c1 e0 03             	shl    $0x3,%eax
f01096b3:	8d 50 70             	lea    0x70(%eax),%edx
f01096b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01096b9:	01 d0                	add    %edx,%eax
f01096bb:	8d 50 08             	lea    0x8(%eax),%edx
f01096be:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c1:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f01096c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ca:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096d0:	89 d0                	mov    %edx,%eax
f01096d2:	01 c0                	add    %eax,%eax
f01096d4:	01 d0                	add    %edx,%eax
f01096d6:	c1 e0 03             	shl    $0x3,%eax
f01096d9:	8d 50 70             	lea    0x70(%eax),%edx
f01096dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01096df:	01 d0                	add    %edx,%eax
f01096e1:	8d 50 08             	lea    0x8(%eax),%edx
f01096e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01096e7:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f01096ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01096f0:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096f9:	89 d0                	mov    %edx,%eax
f01096fb:	01 c0                	add    %eax,%eax
f01096fd:	01 d0                	add    %edx,%eax
f01096ff:	c1 e0 03             	shl    $0x3,%eax
f0109702:	01 c8                	add    %ecx,%eax
f0109704:	05 8c 00 00 00       	add    $0x8c,%eax
f0109709:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010970f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109712:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109718:	8d 50 01             	lea    0x1(%eax),%edx
f010971b:	8b 45 08             	mov    0x8(%ebp),%eax
f010971e:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109724:	8b 45 08             	mov    0x8(%ebp),%eax
f0109727:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f010972d:	8d 50 01             	lea    0x1(%eax),%edx
f0109730:	8b 45 08             	mov    0x8(%ebp),%eax
f0109733:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109739:	8b 45 08             	mov    0x8(%ebp),%eax
f010973c:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109742:	8b 55 08             	mov    0x8(%ebp),%edx
f0109745:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109748:	ba 00 00 00 00       	mov    $0x0,%edx
f010974d:	f7 f1                	div    %ecx
f010974f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109752:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109758:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010975b:	c1 e8 16             	shr    $0x16,%eax
f010975e:	89 c2                	mov    %eax,%edx
f0109760:	8b 45 18             	mov    0x18(%ebp),%eax
f0109763:	8b 00                	mov    (%eax),%eax
f0109765:	39 c2                	cmp    %eax,%edx
f0109767:	0f 84 d3 00 00 00    	je     f0109840 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010976d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109770:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109776:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109779:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010977c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010977f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109784:	89 c1                	mov    %eax,%ecx
f0109786:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109789:	89 d0                	mov    %edx,%eax
f010978b:	01 c0                	add    %eax,%eax
f010978d:	01 d0                	add    %edx,%eax
f010978f:	c1 e0 03             	shl    $0x3,%eax
f0109792:	01 d8                	add    %ebx,%eax
f0109794:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109799:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010979b:	8b 45 08             	mov    0x8(%ebp),%eax
f010979e:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f01097a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097a7:	89 d0                	mov    %edx,%eax
f01097a9:	01 c0                	add    %eax,%eax
f01097ab:	01 d0                	add    %edx,%eax
f01097ad:	c1 e0 03             	shl    $0x3,%eax
f01097b0:	01 c8                	add    %ecx,%eax
f01097b2:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01097b7:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f01097ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01097bd:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f01097c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097c6:	89 d0                	mov    %edx,%eax
f01097c8:	01 c0                	add    %eax,%eax
f01097ca:	01 d0                	add    %edx,%eax
f01097cc:	c1 e0 03             	shl    $0x3,%eax
f01097cf:	01 c8                	add    %ecx,%eax
f01097d1:	05 40 d5 01 00       	add    $0x1d540,%eax
f01097d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f01097dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01097df:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f01097e5:	8d 50 01             	lea    0x1(%eax),%edx
f01097e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01097eb:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f01097f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01097f4:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f01097fa:	b9 32 00 00 00       	mov    $0x32,%ecx
f01097ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0109804:	f7 f1                	div    %ecx
f0109806:	8b 45 08             	mov    0x8(%ebp),%eax
f0109809:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f010980f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109812:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109818:	85 c0                	test   %eax,%eax
f010981a:	75 17                	jne    f0109833 <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010981c:	83 ec 04             	sub    $0x4,%esp
f010981f:	68 00 58 13 f0       	push   $0xf0135800
f0109824:	68 96 02 00 00       	push   $0x296
f0109829:	68 bb 56 13 f0       	push   $0xf01356bb
f010982e:	e8 73 69 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109833:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109836:	c1 e8 16             	shr    $0x16,%eax
f0109839:	89 c2                	mov    %eax,%edx
f010983b:	8b 45 18             	mov    0x18(%ebp),%eax
f010983e:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109840:	8b 45 10             	mov    0x10(%ebp),%eax
f0109843:	8b 00                	mov    (%eax),%eax
f0109845:	8d 50 01             	lea    0x1(%eax),%edx
f0109848:	8b 45 10             	mov    0x10(%ebp),%eax
f010984b:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010984d:	ff 45 f0             	incl   -0x10(%ebp)
f0109850:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109857:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010985a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010985d:	73 0c                	jae    f010986b <program_segment_alloc_map_copy_workingset+0x69f>
f010985f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109862:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109865:	0f 82 10 fa ff ff    	jb     f010927b <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010986b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010986e:	8b 00                	mov    (%eax),%eax
f0109870:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0109873:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109876:	8b 40 0c             	mov    0xc(%eax),%eax
f0109879:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010987c:	eb 10                	jmp    f010988e <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010987e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109881:	8a 10                	mov    (%eax),%dl
f0109883:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109886:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0109888:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010988b:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010988e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109891:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0109894:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109897:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010989c:	89 c2                	mov    %eax,%edx
f010989e:	8b 45 10             	mov    0x10(%ebp),%eax
f01098a1:	8b 00                	mov    (%eax),%eax
f01098a3:	c1 e0 0c             	shl    $0xc,%eax
f01098a6:	01 c2                	add    %eax,%edx
f01098a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098ab:	39 c2                	cmp    %eax,%edx
f01098ad:	76 1d                	jbe    f01098cc <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01098af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01098b2:	8b 50 04             	mov    0x4(%eax),%edx
f01098b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098b8:	01 c2                	add    %eax,%edx
f01098ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01098bd:	39 c2                	cmp    %eax,%edx
f01098bf:	77 bd                	ja     f010987e <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01098c1:	eb 09                	jmp    f01098cc <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f01098c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098c6:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f01098c9:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01098cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098cf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01098d2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01098d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01098da:	89 c2                	mov    %eax,%edx
f01098dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01098df:	8b 00                	mov    (%eax),%eax
f01098e1:	c1 e0 0c             	shl    $0xc,%eax
f01098e4:	01 c2                	add    %eax,%edx
f01098e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01098e9:	39 c2                	cmp    %eax,%edx
f01098eb:	77 d6                	ja     f01098c3 <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f01098ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01098f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01098f5:	c9                   	leave  
f01098f6:	c3                   	ret    

f01098f7 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f01098f7:	55                   	push   %ebp
f01098f8:	89 e5                	mov    %esp,%ebp
f01098fa:	53                   	push   %ebx
f01098fb:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f01098fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109901:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109904:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0109907:	8b 45 08             	mov    0x8(%ebp),%eax
f010990a:	8b 55 10             	mov    0x10(%ebp),%edx
f010990d:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109910:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109917:	eb 17                	jmp    f0109930 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0109919:	8b 45 08             	mov    0x8(%ebp),%eax
f010991c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010991f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109922:	c1 e2 02             	shl    $0x2,%edx
f0109925:	01 d0                	add    %edx,%eax
f0109927:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010992d:	ff 45 f4             	incl   -0xc(%ebp)
f0109930:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109933:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109938:	76 df                	jbe    f0109919 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010993a:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109941:	eb 22                	jmp    f0109965 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0109943:	8b 45 08             	mov    0x8(%ebp),%eax
f0109946:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109949:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010994c:	c1 e2 02             	shl    $0x2,%edx
f010994f:	01 c2                	add    %eax,%edx
f0109951:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0109956:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0109959:	c1 e1 02             	shl    $0x2,%ecx
f010995c:	01 c8                	add    %ecx,%eax
f010995e:	8b 00                	mov    (%eax),%eax
f0109960:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109962:	ff 45 f4             	incl   -0xc(%ebp)
f0109965:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010996c:	7e d5                	jle    f0109943 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010996e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109971:	8b 15 30 77 65 f0    	mov    0xf0657730,%edx
f0109977:	29 d0                	sub    %edx,%eax
f0109979:	c1 f8 03             	sar    $0x3,%eax
f010997c:	89 c2                	mov    %eax,%edx
f010997e:	89 d0                	mov    %edx,%eax
f0109980:	c1 e0 03             	shl    $0x3,%eax
f0109983:	01 d0                	add    %edx,%eax
f0109985:	c1 e0 03             	shl    $0x3,%eax
f0109988:	01 d0                	add    %edx,%eax
f010998a:	01 c0                	add    %eax,%eax
f010998c:	01 d0                	add    %edx,%eax
f010998e:	01 c0                	add    %eax,%eax
f0109990:	01 d0                	add    %edx,%eax
f0109992:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109999:	01 c8                	add    %ecx,%eax
f010999b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01099a2:	01 c8                	add    %ecx,%eax
f01099a4:	c1 e0 02             	shl    $0x2,%eax
f01099a7:	01 d0                	add    %edx,%eax
f01099a9:	01 c0                	add    %eax,%eax
f01099ab:	01 d0                	add    %edx,%eax
f01099ad:	01 c0                	add    %eax,%eax
f01099af:	01 d0                	add    %edx,%eax
f01099b1:	c1 e0 02             	shl    $0x2,%eax
f01099b4:	01 d0                	add    %edx,%eax
f01099b6:	01 c0                	add    %eax,%eax
f01099b8:	01 d0                	add    %edx,%eax
f01099ba:	c1 e0 09             	shl    $0x9,%eax
f01099bd:	29 d0                	sub    %edx,%eax
f01099bf:	c1 e0 02             	shl    $0x2,%eax
f01099c2:	01 d0                	add    %edx,%eax
f01099c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f01099c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01099ca:	89 d0                	mov    %edx,%eax
f01099cc:	01 c0                	add    %eax,%eax
f01099ce:	01 d0                	add    %edx,%eax
f01099d0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01099d7:	01 c8                	add    %ecx,%eax
f01099d9:	c1 e0 02             	shl    $0x2,%eax
f01099dc:	01 d0                	add    %edx,%eax
f01099de:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01099e5:	01 c8                	add    %ecx,%eax
f01099e7:	c1 e0 02             	shl    $0x2,%eax
f01099ea:	01 d0                	add    %edx,%eax
f01099ec:	c1 e0 02             	shl    $0x2,%eax
f01099ef:	01 d0                	add    %edx,%eax
f01099f1:	c1 e0 03             	shl    $0x3,%eax
f01099f4:	2d 00 00 40 11       	sub    $0x11400000,%eax
f01099f9:	8d 50 78             	lea    0x78(%eax),%edx
f01099fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01099ff:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109a05:	83 ec 0c             	sub    $0xc,%esp
f0109a08:	6a 02                	push   $0x2
f0109a0a:	e8 38 35 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f0109a0f:	83 c4 10             	add    $0x10,%esp
f0109a12:	85 c0                	test   %eax,%eax
f0109a14:	0f 84 25 01 00 00    	je     f0109b3f <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109a1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109a21:	e9 08 01 00 00       	jmp    f0109b2e <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f0109a26:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a29:	89 d0                	mov    %edx,%eax
f0109a2b:	01 c0                	add    %eax,%eax
f0109a2d:	01 d0                	add    %edx,%eax
f0109a2f:	c1 e0 03             	shl    $0x3,%eax
f0109a32:	8d 50 70             	lea    0x70(%eax),%edx
f0109a35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a38:	01 d0                	add    %edx,%eax
f0109a3a:	83 c0 08             	add    $0x8,%eax
f0109a3d:	85 c0                	test   %eax,%eax
f0109a3f:	75 17                	jne    f0109a58 <initialize_environment+0x161>
f0109a41:	83 ec 04             	sub    $0x4,%esp
f0109a44:	68 3c 57 13 f0       	push   $0xf013573c
f0109a49:	68 f4 02 00 00       	push   $0x2f4
f0109a4e:	68 bb 56 13 f0       	push   $0xf01356bb
f0109a53:	e8 4e 67 ff ff       	call   f01001a6 <_panic>
f0109a58:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a5b:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109a61:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109a64:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109a67:	89 c8                	mov    %ecx,%eax
f0109a69:	01 c0                	add    %eax,%eax
f0109a6b:	01 c8                	add    %ecx,%eax
f0109a6d:	c1 e0 03             	shl    $0x3,%eax
f0109a70:	01 d8                	add    %ebx,%eax
f0109a72:	05 88 00 00 00       	add    $0x88,%eax
f0109a77:	89 10                	mov    %edx,(%eax)
f0109a79:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a7f:	89 d0                	mov    %edx,%eax
f0109a81:	01 c0                	add    %eax,%eax
f0109a83:	01 d0                	add    %edx,%eax
f0109a85:	c1 e0 03             	shl    $0x3,%eax
f0109a88:	01 c8                	add    %ecx,%eax
f0109a8a:	05 88 00 00 00       	add    $0x88,%eax
f0109a8f:	8b 00                	mov    (%eax),%eax
f0109a91:	85 c0                	test   %eax,%eax
f0109a93:	74 25                	je     f0109aba <initialize_environment+0x1c3>
f0109a95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a98:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109a9e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109aa1:	89 c8                	mov    %ecx,%eax
f0109aa3:	01 c0                	add    %eax,%eax
f0109aa5:	01 c8                	add    %ecx,%eax
f0109aa7:	c1 e0 03             	shl    $0x3,%eax
f0109aaa:	8d 48 70             	lea    0x70(%eax),%ecx
f0109aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ab0:	01 c8                	add    %ecx,%eax
f0109ab2:	83 c0 08             	add    $0x8,%eax
f0109ab5:	89 42 14             	mov    %eax,0x14(%edx)
f0109ab8:	eb 20                	jmp    f0109ada <initialize_environment+0x1e3>
f0109aba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109abd:	89 d0                	mov    %edx,%eax
f0109abf:	01 c0                	add    %eax,%eax
f0109ac1:	01 d0                	add    %edx,%eax
f0109ac3:	c1 e0 03             	shl    $0x3,%eax
f0109ac6:	8d 50 70             	lea    0x70(%eax),%edx
f0109ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109acc:	01 d0                	add    %edx,%eax
f0109ace:	8d 50 08             	lea    0x8(%eax),%edx
f0109ad1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad4:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109ada:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109add:	89 d0                	mov    %edx,%eax
f0109adf:	01 c0                	add    %eax,%eax
f0109ae1:	01 d0                	add    %edx,%eax
f0109ae3:	c1 e0 03             	shl    $0x3,%eax
f0109ae6:	8d 50 70             	lea    0x70(%eax),%edx
f0109ae9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aec:	01 d0                	add    %edx,%eax
f0109aee:	8d 50 08             	lea    0x8(%eax),%edx
f0109af1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109af4:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109afa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109afd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b00:	89 d0                	mov    %edx,%eax
f0109b02:	01 c0                	add    %eax,%eax
f0109b04:	01 d0                	add    %edx,%eax
f0109b06:	c1 e0 03             	shl    $0x3,%eax
f0109b09:	01 c8                	add    %ecx,%eax
f0109b0b:	05 8c 00 00 00       	add    $0x8c,%eax
f0109b10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109b16:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b19:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109b1f:	8d 50 01             	lea    0x1(%eax),%edx
f0109b22:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b25:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109b2b:	ff 45 f0             	incl   -0x10(%ebp)
f0109b2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b31:	8b 50 74             	mov    0x74(%eax),%edx
f0109b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109b37:	39 c2                	cmp    %eax,%edx
f0109b39:	0f 87 e7 fe ff ff    	ja     f0109a26 <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109b3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109b46:	eb 4e                	jmp    f0109b96 <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0109b48:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4e:	89 d0                	mov    %edx,%eax
f0109b50:	01 c0                	add    %eax,%eax
f0109b52:	01 d0                	add    %edx,%eax
f0109b54:	c1 e0 03             	shl    $0x3,%eax
f0109b57:	01 c8                	add    %ecx,%eax
f0109b59:	83 c0 78             	add    $0x78,%eax
f0109b5c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0109b62:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b68:	89 d0                	mov    %edx,%eax
f0109b6a:	01 c0                	add    %eax,%eax
f0109b6c:	01 d0                	add    %edx,%eax
f0109b6e:	c1 e0 03             	shl    $0x3,%eax
f0109b71:	01 c8                	add    %ecx,%eax
f0109b73:	83 c0 7c             	add    $0x7c,%eax
f0109b76:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0109b79:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b7f:	89 d0                	mov    %edx,%eax
f0109b81:	01 c0                	add    %eax,%eax
f0109b83:	01 d0                	add    %edx,%eax
f0109b85:	c1 e0 03             	shl    $0x3,%eax
f0109b88:	01 c8                	add    %ecx,%eax
f0109b8a:	83 e8 80             	sub    $0xffffff80,%eax
f0109b8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109b93:	ff 45 f4             	incl   -0xc(%ebp)
f0109b96:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b99:	8b 50 74             	mov    0x74(%eax),%edx
f0109b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b9f:	39 c2                	cmp    %eax,%edx
f0109ba1:	77 a5                	ja     f0109b48 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f0109ba3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ba6:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f0109bad:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109bb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109bb7:	eb 54                	jmp    f0109c0d <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0109bb9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bbf:	89 d0                	mov    %edx,%eax
f0109bc1:	01 c0                	add    %eax,%eax
f0109bc3:	01 d0                	add    %edx,%eax
f0109bc5:	c1 e0 03             	shl    $0x3,%eax
f0109bc8:	01 c8                	add    %ecx,%eax
f0109bca:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109bcf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0109bd5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bdb:	89 d0                	mov    %edx,%eax
f0109bdd:	01 c0                	add    %eax,%eax
f0109bdf:	01 d0                	add    %edx,%eax
f0109be1:	c1 e0 03             	shl    $0x3,%eax
f0109be4:	01 c8                	add    %ecx,%eax
f0109be6:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109beb:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0109bee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bf4:	89 d0                	mov    %edx,%eax
f0109bf6:	01 c0                	add    %eax,%eax
f0109bf8:	01 d0                	add    %edx,%eax
f0109bfa:	c1 e0 03             	shl    $0x3,%eax
f0109bfd:	01 c8                	add    %ecx,%eax
f0109bff:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109c04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109c0a:	ff 45 f4             	incl   -0xc(%ebp)
f0109c0d:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109c11:	7e a6                	jle    f0109bb9 <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0109c13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c16:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f0109c1d:	00 00 00 

	e->pageFaultsCounter=0;
f0109c20:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c23:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f0109c2a:	00 00 00 
	e->tableFaultsCounter=0;
f0109c2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c30:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f0109c37:	00 00 00 

	e->freeingFullWSCounter = 0;
f0109c3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c3d:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f0109c44:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0109c47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c4a:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f0109c51:	00 00 00 

	e->nModifiedPages=0;
f0109c54:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c57:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f0109c5e:	00 00 00 
	e->nNotModifiedPages=0;
f0109c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c64:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f0109c6b:	00 00 00 
	e->nClocks = 0;
f0109c6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c71:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f0109c78:	00 00 00 

	//2020
	e->nPageIn = 0;
f0109c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c7e:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f0109c85:	00 00 00 
	e->nPageOut = 0;
f0109c88:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c8b:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f0109c92:	00 00 00 
	e->nNewPageAdded = 0;
f0109c95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c98:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f0109c9f:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0109ca2:	83 ec 0c             	sub    $0xc,%esp
f0109ca5:	ff 75 08             	pushl  0x8(%ebp)
f0109ca8:	e8 09 00 00 00       	call   f0109cb6 <complete_environment_initialization>
f0109cad:	83 c4 10             	add    $0x10,%esp
}
f0109cb0:	90                   	nop
f0109cb1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109cb4:	c9                   	leave  
f0109cb5:	c3                   	ret    

f0109cb6 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f0109cb6:	55                   	push   %ebp
f0109cb7:	89 e5                	mov    %esp,%ebp
f0109cb9:	53                   	push   %ebx
f0109cba:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0109cbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cc0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109cc3:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f0109cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ccc:	8b 40 60             	mov    0x60(%eax),%eax
f0109ccf:	83 c8 03             	or     $0x3,%eax
f0109cd2:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0109cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109cda:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0109ce0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ce3:	8b 40 60             	mov    0x60(%eax),%eax
f0109ce6:	83 c8 05             	or     $0x5,%eax
f0109ce9:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0109ceb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cee:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f0109cf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cf8:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0109cff:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d02:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0109d09:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d0c:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f0109d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d16:	8b 58 4c             	mov    0x4c(%eax),%ebx
f0109d19:	83 ec 0c             	sub    $0xc,%esp
f0109d1c:	6a 08                	push   $0x8
f0109d1e:	e8 02 51 02 00       	call   f012ee25 <log2_ceil>
f0109d23:	83 c4 10             	add    $0x10,%esp
f0109d26:	ba 01 00 00 00       	mov    $0x1,%edx
f0109d2b:	88 c1                	mov    %al,%cl
f0109d2d:	d3 e2                	shl    %cl,%edx
f0109d2f:	89 d0                	mov    %edx,%eax
f0109d31:	01 d8                	add    %ebx,%eax
f0109d33:	89 c3                	mov    %eax,%ebx
f0109d35:	83 ec 0c             	sub    $0xc,%esp
f0109d38:	6a 08                	push   $0x8
f0109d3a:	e8 b1 50 02 00       	call   f012edf0 <nearest_pow2_ceil>
f0109d3f:	83 c4 10             	add    $0x10,%esp
f0109d42:	f7 d8                	neg    %eax
f0109d44:	21 d8                	and    %ebx,%eax
f0109d46:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f0109d49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d4d:	7f 1b                	jg     f0109d6a <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f0109d4f:	83 ec 0c             	sub    $0xc,%esp
f0109d52:	6a 08                	push   $0x8
f0109d54:	e8 cc 50 02 00       	call   f012ee25 <log2_ceil>
f0109d59:	83 c4 10             	add    $0x10,%esp
f0109d5c:	ba 01 00 00 00       	mov    $0x1,%edx
f0109d61:	88 c1                	mov    %al,%cl
f0109d63:	d3 e2                	shl    %cl,%edx
f0109d65:	89 d0                	mov    %edx,%eax
f0109d67:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f0109d6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6d:	8b 15 30 77 65 f0    	mov    0xf0657730,%edx
f0109d73:	29 d0                	sub    %edx,%eax
f0109d75:	c1 f8 03             	sar    $0x3,%eax
f0109d78:	89 c2                	mov    %eax,%edx
f0109d7a:	89 d0                	mov    %edx,%eax
f0109d7c:	c1 e0 03             	shl    $0x3,%eax
f0109d7f:	01 d0                	add    %edx,%eax
f0109d81:	c1 e0 03             	shl    $0x3,%eax
f0109d84:	01 d0                	add    %edx,%eax
f0109d86:	01 c0                	add    %eax,%eax
f0109d88:	01 d0                	add    %edx,%eax
f0109d8a:	01 c0                	add    %eax,%eax
f0109d8c:	01 d0                	add    %edx,%eax
f0109d8e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109d95:	01 c8                	add    %ecx,%eax
f0109d97:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109d9e:	01 c8                	add    %ecx,%eax
f0109da0:	c1 e0 02             	shl    $0x2,%eax
f0109da3:	01 d0                	add    %edx,%eax
f0109da5:	01 c0                	add    %eax,%eax
f0109da7:	01 d0                	add    %edx,%eax
f0109da9:	01 c0                	add    %eax,%eax
f0109dab:	01 d0                	add    %edx,%eax
f0109dad:	c1 e0 02             	shl    $0x2,%eax
f0109db0:	01 d0                	add    %edx,%eax
f0109db2:	01 c0                	add    %eax,%eax
f0109db4:	01 d0                	add    %edx,%eax
f0109db6:	c1 e0 09             	shl    $0x9,%eax
f0109db9:	29 d0                	sub    %edx,%eax
f0109dbb:	c1 e0 02             	shl    $0x2,%eax
f0109dbe:	01 d0                	add    %edx,%eax
f0109dc0:	0b 45 f4             	or     -0xc(%ebp),%eax
f0109dc3:	89 c2                	mov    %eax,%edx
f0109dc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dc8:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f0109dcb:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0109dd0:	85 c0                	test   %eax,%eax
f0109dd2:	75 0c                	jne    f0109de0 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f0109dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd7:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0109dde:	eb 0e                	jmp    f0109dee <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f0109de0:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f0109de5:	8b 50 4c             	mov    0x4c(%eax),%edx
f0109de8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109deb:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0109dee:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dfb:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	83 ec 04             	sub    $0x4,%esp
f0109e08:	6a 44                	push   $0x44
f0109e0a:	6a 00                	push   $0x0
f0109e0c:	50                   	push   %eax
f0109e0d:	e8 41 64 02 00       	call   f0130253 <memset>
f0109e12:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0109e15:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e18:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0109e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e21:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0109e27:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2a:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0109e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e33:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f0109e3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e3d:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f0109e43:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e46:	8b 40 38             	mov    0x38(%eax),%eax
f0109e49:	80 cc 02             	or     $0x2,%ah
f0109e4c:	89 c2                	mov    %eax,%edx
f0109e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e51:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f0109e54:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109e58:	75 17                	jne    f0109e71 <complete_environment_initialization+0x1bb>
f0109e5a:	83 ec 04             	sub    $0x4,%esp
f0109e5d:	68 1d 57 13 f0       	push   $0xf013571d
f0109e62:	68 58 03 00 00       	push   $0x358
f0109e67:	68 bb 56 13 f0       	push   $0xf01356bb
f0109e6c:	e8 35 63 ff ff       	call   f01001a6 <_panic>
f0109e71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e74:	8b 40 44             	mov    0x44(%eax),%eax
f0109e77:	85 c0                	test   %eax,%eax
f0109e79:	74 11                	je     f0109e8c <complete_environment_initialization+0x1d6>
f0109e7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e7e:	8b 40 44             	mov    0x44(%eax),%eax
f0109e81:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e84:	8b 52 48             	mov    0x48(%edx),%edx
f0109e87:	89 50 48             	mov    %edx,0x48(%eax)
f0109e8a:	eb 0b                	jmp    f0109e97 <complete_environment_initialization+0x1e1>
f0109e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8f:	8b 40 48             	mov    0x48(%eax),%eax
f0109e92:	a3 3c 77 65 f0       	mov    %eax,0xf065773c
f0109e97:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e9a:	8b 40 48             	mov    0x48(%eax),%eax
f0109e9d:	85 c0                	test   %eax,%eax
f0109e9f:	74 11                	je     f0109eb2 <complete_environment_initialization+0x1fc>
f0109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea4:	8b 40 48             	mov    0x48(%eax),%eax
f0109ea7:	8b 55 08             	mov    0x8(%ebp),%edx
f0109eaa:	8b 52 44             	mov    0x44(%edx),%edx
f0109ead:	89 50 44             	mov    %edx,0x44(%eax)
f0109eb0:	eb 0b                	jmp    f0109ebd <complete_environment_initialization+0x207>
f0109eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb5:	8b 40 44             	mov    0x44(%eax),%eax
f0109eb8:	a3 38 77 65 f0       	mov    %eax,0xf0657738
f0109ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109ec7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eca:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109ed1:	a1 44 77 65 f0       	mov    0xf0657744,%eax
f0109ed6:	48                   	dec    %eax
f0109ed7:	a3 44 77 65 f0       	mov    %eax,0xf0657744
	return ;
f0109edc:	90                   	nop
}
f0109edd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109ee0:	c9                   	leave  
f0109ee1:	c3                   	ret    

f0109ee2 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f0109ee2:	55                   	push   %ebp
f0109ee3:	89 e5                	mov    %esp,%ebp
f0109ee5:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0109ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109eeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ef1:	8b 00                	mov    (%eax),%eax
f0109ef3:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0109ef8:	74 17                	je     f0109f11 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0109efa:	83 ec 04             	sub    $0x4,%esp
f0109efd:	68 a3 58 13 f0       	push   $0xf01358a3
f0109f02:	68 64 03 00 00       	push   $0x364
f0109f07:	68 bb 56 13 f0       	push   $0xf01356bb
f0109f0c:	e8 95 62 ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0109f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f14:	8b 40 18             	mov    0x18(%eax),%eax
f0109f17:	89 c2                	mov    %eax,%edx
f0109f19:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f1c:	89 50 30             	mov    %edx,0x30(%eax)
}
f0109f1f:	90                   	nop
f0109f20:	c9                   	leave  
f0109f21:	c3                   	ret    

f0109f22 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f0109f22:	55                   	push   %ebp
f0109f23:	89 e5                	mov    %esp,%ebp
f0109f25:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f0109f28:	83 ec 04             	sub    $0x4,%esp
f0109f2b:	68 bc 58 13 f0       	push   $0xf01358bc
f0109f30:	68 81 03 00 00       	push   $0x381
f0109f35:	68 bb 56 13 f0       	push   $0xf01356bb
f0109f3a:	e8 67 62 ff ff       	call   f01001a6 <_panic>

f0109f3f <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f0109f3f:	55                   	push   %ebp
f0109f40:	89 e5                	mov    %esp,%ebp
f0109f42:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f0109f45:	83 ec 04             	sub    $0x4,%esp
f0109f48:	68 0c 59 13 f0       	push   $0xf013590c
f0109f4d:	68 a0 03 00 00       	push   $0x3a0
f0109f52:	68 bb 56 13 f0       	push   $0xf01356bb
f0109f57:	e8 4a 62 ff ff       	call   f01001a6 <_panic>

f0109f5c <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0109f5c:	55                   	push   %ebp
f0109f5d:	89 e5                	mov    %esp,%ebp
f0109f5f:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f0109f62:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f65:	8b 40 10             	mov    0x10(%eax),%eax
f0109f68:	8d 48 01             	lea    0x1(%eax),%ecx
f0109f6b:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f6e:	89 4a 10             	mov    %ecx,0x10(%edx)
f0109f71:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0109f74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0109f7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109f7d:	8b 00                	mov    (%eax),%eax
f0109f7f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0109f84:	74 17                	je     f0109f9d <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0109f86:	83 ec 04             	sub    $0x4,%esp
f0109f89:	68 a3 58 13 f0       	push   $0xf01358a3
f0109f8e:	68 ae 03 00 00       	push   $0x3ae
f0109f93:	68 bb 56 13 f0       	push   $0xf01356bb
f0109f98:	e8 09 62 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0109f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109fa0:	8b 50 1c             	mov    0x1c(%eax),%edx
f0109fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fa6:	01 d0                	add    %edx,%eax
f0109fa8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0109fab:	eb 0f                	jmp    f0109fbc <PROGRAM_SEGMENT_NEXT+0x60>
f0109fad:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb0:	8b 40 10             	mov    0x10(%eax),%eax
f0109fb3:	8d 50 01             	lea    0x1(%eax),%edx
f0109fb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb9:	89 50 10             	mov    %edx,0x10(%eax)
f0109fbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fbf:	8b 40 10             	mov    0x10(%eax),%eax
f0109fc2:	c1 e0 05             	shl    $0x5,%eax
f0109fc5:	89 c2                	mov    %eax,%edx
f0109fc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109fca:	01 d0                	add    %edx,%eax
f0109fcc:	8b 00                	mov    (%eax),%eax
f0109fce:	83 f8 01             	cmp    $0x1,%eax
f0109fd1:	74 13                	je     f0109fe6 <PROGRAM_SEGMENT_NEXT+0x8a>
f0109fd3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd6:	8b 50 10             	mov    0x10(%eax),%edx
f0109fd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109fdc:	8b 40 2c             	mov    0x2c(%eax),%eax
f0109fdf:	0f b7 c0             	movzwl %ax,%eax
f0109fe2:	39 c2                	cmp    %eax,%edx
f0109fe4:	72 c7                	jb     f0109fad <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f0109fe6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe9:	8b 40 10             	mov    0x10(%eax),%eax
f0109fec:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0109fef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109ff2:	8b 40 2c             	mov    0x2c(%eax),%eax
f0109ff5:	0f b7 c0             	movzwl %ax,%eax
f0109ff8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109ffb:	7e 63                	jle    f010a060 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0109ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a000:	c1 e0 05             	shl    $0x5,%eax
f010a003:	89 c2                	mov    %eax,%edx
f010a005:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a008:	01 d0                	add    %edx,%eax
f010a00a:	8b 50 04             	mov    0x4(%eax),%edx
f010a00d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a010:	01 c2                	add    %eax,%edx
f010a012:	8b 45 08             	mov    0x8(%ebp),%eax
f010a015:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a017:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a01a:	c1 e0 05             	shl    $0x5,%eax
f010a01d:	89 c2                	mov    %eax,%edx
f010a01f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a022:	01 d0                	add    %edx,%eax
f010a024:	8b 50 14             	mov    0x14(%eax),%edx
f010a027:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02a:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a02d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a030:	c1 e0 05             	shl    $0x5,%eax
f010a033:	89 c2                	mov    %eax,%edx
f010a035:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a038:	01 d0                	add    %edx,%eax
f010a03a:	8b 50 10             	mov    0x10(%eax),%edx
f010a03d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a040:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a043:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a046:	c1 e0 05             	shl    $0x5,%eax
f010a049:	89 c2                	mov    %eax,%edx
f010a04b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a04e:	01 d0                	add    %edx,%eax
f010a050:	8b 40 08             	mov    0x8(%eax),%eax
f010a053:	89 c2                	mov    %eax,%edx
f010a055:	8b 45 08             	mov    0x8(%ebp),%eax
f010a058:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a05e:	eb 05                	jmp    f010a065 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a060:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a065:	c9                   	leave  
f010a066:	c3                   	ret    

f010a067 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a067:	55                   	push   %ebp
f010a068:	89 e5                	mov    %esp,%ebp
f010a06a:	57                   	push   %edi
f010a06b:	56                   	push   %esi
f010a06c:	53                   	push   %ebx
f010a06d:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a070:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a077:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a07a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a07d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a080:	8b 00                	mov    (%eax),%eax
f010a082:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a087:	74 17                	je     f010a0a0 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a089:	83 ec 04             	sub    $0x4,%esp
f010a08c:	68 a3 58 13 f0       	push   $0xf01358a3
f010a091:	68 ca 03 00 00       	push   $0x3ca
f010a096:	68 bb 56 13 f0       	push   $0xf01356bb
f010a09b:	e8 06 61 ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a0a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0a3:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a0a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a0a9:	01 d0                	add    %edx,%eax
f010a0ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a0ae:	eb 07                	jmp    f010a0b7 <PROGRAM_SEGMENT_FIRST+0x50>
f010a0b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0b3:	40                   	inc    %eax
f010a0b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a0b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0ba:	c1 e0 05             	shl    $0x5,%eax
f010a0bd:	89 c2                	mov    %eax,%edx
f010a0bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a0c2:	01 d0                	add    %edx,%eax
f010a0c4:	8b 00                	mov    (%eax),%eax
f010a0c6:	83 f8 01             	cmp    $0x1,%eax
f010a0c9:	74 10                	je     f010a0db <PROGRAM_SEGMENT_FIRST+0x74>
f010a0cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a0ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0d1:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a0d4:	0f b7 c0             	movzwl %ax,%eax
f010a0d7:	39 c2                	cmp    %eax,%edx
f010a0d9:	72 d5                	jb     f010a0b0 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a0db:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a0de:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a0e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a0e4:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a0e7:	0f b7 c0             	movzwl %ax,%eax
f010a0ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a0ed:	7e 68                	jle    f010a157 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a0ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a0f2:	c1 e0 05             	shl    $0x5,%eax
f010a0f5:	89 c2                	mov    %eax,%edx
f010a0f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a0fa:	01 d0                	add    %edx,%eax
f010a0fc:	8b 50 04             	mov    0x4(%eax),%edx
f010a0ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a102:	01 d0                	add    %edx,%eax
f010a104:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a107:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a10a:	c1 e0 05             	shl    $0x5,%eax
f010a10d:	89 c2                	mov    %eax,%edx
f010a10f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a112:	01 d0                	add    %edx,%eax
f010a114:	8b 40 14             	mov    0x14(%eax),%eax
f010a117:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a11a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a11d:	c1 e0 05             	shl    $0x5,%eax
f010a120:	89 c2                	mov    %eax,%edx
f010a122:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a125:	01 d0                	add    %edx,%eax
f010a127:	8b 40 10             	mov    0x10(%eax),%eax
f010a12a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a12d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a130:	c1 e0 05             	shl    $0x5,%eax
f010a133:	89 c2                	mov    %eax,%edx
f010a135:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a138:	01 d0                	add    %edx,%eax
f010a13a:	8b 40 08             	mov    0x8(%eax),%eax
f010a13d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a140:	8b 45 08             	mov    0x8(%ebp),%eax
f010a143:	89 c3                	mov    %eax,%ebx
f010a145:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a148:	ba 05 00 00 00       	mov    $0x5,%edx
f010a14d:	89 df                	mov    %ebx,%edi
f010a14f:	89 c6                	mov    %eax,%esi
f010a151:	89 d1                	mov    %edx,%ecx
f010a153:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a155:	eb 1c                	jmp    f010a173 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a157:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a15e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a161:	89 c3                	mov    %eax,%ebx
f010a163:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a166:	ba 05 00 00 00       	mov    $0x5,%edx
f010a16b:	89 df                	mov    %ebx,%edi
f010a16d:	89 c6                	mov    %eax,%esi
f010a16f:	89 d1                	mov    %edx,%ecx
f010a171:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a173:	8b 45 08             	mov    0x8(%ebp),%eax
f010a176:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a179:	5b                   	pop    %ebx
f010a17a:	5e                   	pop    %esi
f010a17b:	5f                   	pop    %edi
f010a17c:	5d                   	pop    %ebp
f010a17d:	c2 04 00             	ret    $0x4

f010a180 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a180:	55                   	push   %ebp
f010a181:	89 e5                	mov    %esp,%ebp
f010a183:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a186:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a18d:	a1 e0 7f 65 f0       	mov    0xf0657fe0,%eax
f010a192:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a195:	e9 c3 00 00 00       	jmp    f010a25d <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a19a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a19d:	8b 40 10             	mov    0x10(%eax),%eax
f010a1a0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a1a3:	0f 85 ac 00 00 00    	jne    f010a255 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a1a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ac:	8b 50 0c             	mov    0xc(%eax),%edx
f010a1af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1b2:	8b 40 10             	mov    0x10(%eax),%eax
f010a1b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a1b8:	83 ec 08             	sub    $0x8,%esp
f010a1bb:	52                   	push   %edx
f010a1bc:	50                   	push   %eax
f010a1bd:	e8 1e d3 ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f010a1c2:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a1c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1c9:	75 17                	jne    f010a1e2 <cleanup_buffers+0x62>
f010a1cb:	83 ec 04             	sub    $0x4,%esp
f010a1ce:	68 1d 57 13 f0       	push   $0xf013571d
f010a1d3:	68 f1 03 00 00       	push   $0x3f1
f010a1d8:	68 bb 56 13 f0       	push   $0xf01356bb
f010a1dd:	e8 c4 5f ff ff       	call   f01001a6 <_panic>
f010a1e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1e5:	8b 00                	mov    (%eax),%eax
f010a1e7:	85 c0                	test   %eax,%eax
f010a1e9:	74 10                	je     f010a1fb <cleanup_buffers+0x7b>
f010a1eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ee:	8b 00                	mov    (%eax),%eax
f010a1f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1f3:	8b 52 04             	mov    0x4(%edx),%edx
f010a1f6:	89 50 04             	mov    %edx,0x4(%eax)
f010a1f9:	eb 0b                	jmp    f010a206 <cleanup_buffers+0x86>
f010a1fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1fe:	8b 40 04             	mov    0x4(%eax),%eax
f010a201:	a3 e4 7f 65 f0       	mov    %eax,0xf0657fe4
f010a206:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a209:	8b 40 04             	mov    0x4(%eax),%eax
f010a20c:	85 c0                	test   %eax,%eax
f010a20e:	74 0f                	je     f010a21f <cleanup_buffers+0x9f>
f010a210:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a213:	8b 40 04             	mov    0x4(%eax),%eax
f010a216:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a219:	8b 12                	mov    (%edx),%edx
f010a21b:	89 10                	mov    %edx,(%eax)
f010a21d:	eb 0a                	jmp    f010a229 <cleanup_buffers+0xa9>
f010a21f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a222:	8b 00                	mov    (%eax),%eax
f010a224:	a3 e0 7f 65 f0       	mov    %eax,0xf0657fe0
f010a229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a22c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a235:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a23c:	a1 ec 7f 65 f0       	mov    0xf0657fec,%eax
f010a241:	48                   	dec    %eax
f010a242:	a3 ec 7f 65 f0       	mov    %eax,0xf0657fec

			free_frame(ptr_fi);
f010a247:	83 ec 0c             	sub    $0xc,%esp
f010a24a:	ff 75 f4             	pushl  -0xc(%ebp)
f010a24d:	e8 6d c6 ff ff       	call   f01068bf <free_frame>
f010a252:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a255:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010a25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a25d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a261:	74 07                	je     f010a26a <cleanup_buffers+0xea>
f010a263:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a266:	8b 00                	mov    (%eax),%eax
f010a268:	eb 05                	jmp    f010a26f <cleanup_buffers+0xef>
f010a26a:	b8 00 00 00 00       	mov    $0x0,%eax
f010a26f:	a3 e8 7f 65 f0       	mov    %eax,0xf0657fe8
f010a274:	a1 e8 7f 65 f0       	mov    0xf0657fe8,%eax
f010a279:	85 c0                	test   %eax,%eax
f010a27b:	0f 85 19 ff ff ff    	jne    f010a19a <cleanup_buffers+0x1a>
f010a281:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a285:	0f 85 0f ff ff ff    	jne    f010a19a <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a28b:	90                   	nop
f010a28c:	c9                   	leave  
f010a28d:	c3                   	ret    

f010a28e <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a28e:	55                   	push   %ebp
f010a28f:	89 e5                	mov    %esp,%ebp
f010a291:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a294:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a298:	7e 06                	jle    f010a2a0 <set_program_priority+0x12>
f010a29a:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a29e:	7e 14                	jle    f010a2b4 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a2a0:	83 ec 04             	sub    $0x4,%esp
f010a2a3:	68 5c 59 13 f0       	push   $0xf013595c
f010a2a8:	6a 10                	push   $0x10
f010a2aa:	68 80 59 13 f0       	push   $0xf0135980
f010a2af:	e8 f2 5e ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010a2b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a2b8:	74 75                	je     f010a32f <set_program_priority+0xa1>
		return;
	switch(priority)
f010a2ba:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a2be:	77 56                	ja     f010a316 <set_program_priority+0x88>
f010a2c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2c3:	c1 e0 02             	shl    $0x2,%eax
f010a2c6:	05 bc 59 13 f0       	add    $0xf01359bc,%eax
f010a2cb:	8b 00                	mov    (%eax),%eax
f010a2cd:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010a2cf:	83 ec 08             	sub    $0x8,%esp
f010a2d2:	6a 01                	push   $0x1
f010a2d4:	ff 75 08             	pushl  0x8(%ebp)
f010a2d7:	e8 fe db ff ff       	call   f0107eda <half_WS_Size>
f010a2dc:	83 c4 10             	add    $0x10,%esp
			break;
f010a2df:	eb 35                	jmp    f010a316 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010a2e1:	83 ec 08             	sub    $0x8,%esp
f010a2e4:	6a 00                	push   $0x0
f010a2e6:	ff 75 08             	pushl  0x8(%ebp)
f010a2e9:	e8 ec db ff ff       	call   f0107eda <half_WS_Size>
f010a2ee:	83 c4 10             	add    $0x10,%esp
			break;
f010a2f1:	eb 23                	jmp    f010a316 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010a2f3:	83 ec 08             	sub    $0x8,%esp
f010a2f6:	6a 01                	push   $0x1
f010a2f8:	ff 75 08             	pushl  0x8(%ebp)
f010a2fb:	e8 bd db ff ff       	call   f0107ebd <double_WS_Size>
f010a300:	83 c4 10             	add    $0x10,%esp
			break;
f010a303:	eb 11                	jmp    f010a316 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010a305:	83 ec 08             	sub    $0x8,%esp
f010a308:	6a 00                	push   $0x0
f010a30a:	ff 75 08             	pushl  0x8(%ebp)
f010a30d:	e8 ab db ff ff       	call   f0107ebd <double_WS_Size>
f010a312:	83 c4 10             	add    $0x10,%esp
			break;
f010a315:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010a316:	8b 45 08             	mov    0x8(%ebp),%eax
f010a319:	8b 40 74             	mov    0x74(%eax),%eax
f010a31c:	83 ec 08             	sub    $0x8,%esp
f010a31f:	50                   	push   %eax
f010a320:	68 9d 59 13 f0       	push   $0xf013599d
f010a325:	e8 03 69 ff ff       	call   f0100c2d <cprintf>
f010a32a:	83 c4 10             	add    $0x10,%esp
f010a32d:	eb 01                	jmp    f010a330 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010a32f:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010a330:	c9                   	leave  
f010a331:	c3                   	ret    

f010a332 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010a332:	55                   	push   %ebp
f010a333:	89 e5                	mov    %esp,%ebp
f010a335:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a338:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a33f:	eb 29                	jmp    f010a36a <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010a341:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a344:	89 d0                	mov    %edx,%eax
f010a346:	01 c0                	add    %eax,%eax
f010a348:	01 d0                	add    %edx,%eax
f010a34a:	c1 e0 02             	shl    $0x2,%eax
f010a34d:	05 00 f9 18 f0       	add    $0xf018f900,%eax
f010a352:	8b 00                	mov    (%eax),%eax
f010a354:	83 ec 08             	sub    $0x8,%esp
f010a357:	50                   	push   %eax
f010a358:	ff 75 08             	pushl  0x8(%ebp)
f010a35b:	e8 11 5e 02 00       	call   f0130171 <strcmp>
f010a360:	83 c4 10             	add    $0x10,%esp
f010a363:	85 c0                	test   %eax,%eax
f010a365:	74 0f                	je     f010a376 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a367:	ff 45 f4             	incl   -0xc(%ebp)
f010a36a:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a36f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a372:	7c cd                	jl     f010a341 <get_user_program_info+0xf>
f010a374:	eb 01                	jmp    f010a377 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010a376:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a377:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a37c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a37f:	75 1a                	jne    f010a39b <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010a381:	83 ec 08             	sub    $0x8,%esp
f010a384:	ff 75 08             	pushl  0x8(%ebp)
f010a387:	68 e9 63 13 f0       	push   $0xf01363e9
f010a38c:	e8 9c 68 ff ff       	call   f0100c2d <cprintf>
f010a391:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a394:	b8 00 00 00 00       	mov    $0x0,%eax
f010a399:	eb 11                	jmp    f010a3ac <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010a39b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a39e:	89 d0                	mov    %edx,%eax
f010a3a0:	01 c0                	add    %eax,%eax
f010a3a2:	01 d0                	add    %edx,%eax
f010a3a4:	c1 e0 02             	shl    $0x2,%eax
f010a3a7:	05 00 f9 18 f0       	add    $0xf018f900,%eax
}
f010a3ac:	c9                   	leave  
f010a3ad:	c3                   	ret    

f010a3ae <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010a3ae:	55                   	push   %ebp
f010a3af:	89 e5                	mov    %esp,%ebp
f010a3b1:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a3b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a3bb:	eb 30                	jmp    f010a3ed <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010a3bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3c0:	89 d0                	mov    %edx,%eax
f010a3c2:	01 c0                	add    %eax,%eax
f010a3c4:	01 d0                	add    %edx,%eax
f010a3c6:	c1 e0 02             	shl    $0x2,%eax
f010a3c9:	05 00 f9 18 f0       	add    $0xf018f900,%eax
f010a3ce:	8b 00                	mov    (%eax),%eax
f010a3d0:	8b 55 08             	mov    0x8(%ebp),%edx
f010a3d3:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010a3d9:	83 ec 08             	sub    $0x8,%esp
f010a3dc:	50                   	push   %eax
f010a3dd:	52                   	push   %edx
f010a3de:	e8 8e 5d 02 00       	call   f0130171 <strcmp>
f010a3e3:	83 c4 10             	add    $0x10,%esp
f010a3e6:	85 c0                	test   %eax,%eax
f010a3e8:	74 0f                	je     f010a3f9 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a3ea:	ff 45 f4             	incl   -0xc(%ebp)
f010a3ed:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a3f2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a3f5:	7c c6                	jl     f010a3bd <get_user_program_info_by_env+0xf>
f010a3f7:	eb 01                	jmp    f010a3fa <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010a3f9:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a3fa:	a1 c4 fc 18 f0       	mov    0xf018fcc4,%eax
f010a3ff:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a402:	75 17                	jne    f010a41b <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010a404:	83 ec 0c             	sub    $0xc,%esp
f010a407:	68 04 64 13 f0       	push   $0xf0136404
f010a40c:	e8 1c 68 ff ff       	call   f0100c2d <cprintf>
f010a411:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a414:	b8 00 00 00 00       	mov    $0x0,%eax
f010a419:	eb 11                	jmp    f010a42c <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010a41b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a41e:	89 d0                	mov    %edx,%eax
f010a420:	01 c0                	add    %eax,%eax
f010a422:	01 d0                	add    %edx,%eax
f010a424:	c1 e0 02             	shl    $0x2,%eax
f010a427:	05 00 f9 18 f0       	add    $0xf018f900,%eax
}
f010a42c:	c9                   	leave  
f010a42d:	c3                   	ret    

f010a42e <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010a42e:	55                   	push   %ebp
f010a42f:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010a431:	8b 45 08             	mov    0x8(%ebp),%eax
f010a434:	83 f8 13             	cmp    $0x13,%eax
f010a437:	77 0c                	ja     f010a445 <trapname+0x17>
		return excnames[trapno];
f010a439:	8b 45 08             	mov    0x8(%ebp),%eax
f010a43c:	8b 04 85 80 67 13 f0 	mov    -0xfec9880(,%eax,4),%eax
f010a443:	eb 12                	jmp    f010a457 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010a445:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010a449:	75 07                	jne    f010a452 <trapname+0x24>
		return "System call";
f010a44b:	b8 20 64 13 f0       	mov    $0xf0136420,%eax
f010a450:	eb 05                	jmp    f010a457 <trapname+0x29>
	return "(unknown trap)";
f010a452:	b8 2c 64 13 f0       	mov    $0xf013642c,%eax
}
f010a457:	5d                   	pop    %ebp
f010a458:	c3                   	ret    

f010a459 <idt_init>:


void
idt_init(void)
{
f010a459:	55                   	push   %ebp
f010a45a:	89 e5                	mov    %esp,%ebp
f010a45c:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010a45f:	b8 5c ba 10 f0       	mov    $0xf010ba5c,%eax
f010a464:	66 a3 d0 77 65 f0    	mov    %ax,0xf06577d0
f010a46a:	66 c7 05 d2 77 65 f0 	movw   $0x8,0xf06577d2
f010a471:	08 00 
f010a473:	a0 d4 77 65 f0       	mov    0xf06577d4,%al
f010a478:	83 e0 e0             	and    $0xffffffe0,%eax
f010a47b:	a2 d4 77 65 f0       	mov    %al,0xf06577d4
f010a480:	a0 d4 77 65 f0       	mov    0xf06577d4,%al
f010a485:	83 e0 1f             	and    $0x1f,%eax
f010a488:	a2 d4 77 65 f0       	mov    %al,0xf06577d4
f010a48d:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a492:	83 e0 f0             	and    $0xfffffff0,%eax
f010a495:	83 c8 0e             	or     $0xe,%eax
f010a498:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a49d:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4a2:	83 e0 ef             	and    $0xffffffef,%eax
f010a4a5:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4aa:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4af:	83 e0 9f             	and    $0xffffff9f,%eax
f010a4b2:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4b7:	a0 d5 77 65 f0       	mov    0xf06577d5,%al
f010a4bc:	83 c8 80             	or     $0xffffff80,%eax
f010a4bf:	a2 d5 77 65 f0       	mov    %al,0xf06577d5
f010a4c4:	b8 5c ba 10 f0       	mov    $0xf010ba5c,%eax
f010a4c9:	c1 e8 10             	shr    $0x10,%eax
f010a4cc:	66 a3 d6 77 65 f0    	mov    %ax,0xf06577d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010a4d2:	b8 64 ba 10 f0       	mov    $0xf010ba64,%eax
f010a4d7:	66 a3 e0 78 65 f0    	mov    %ax,0xf06578e0
f010a4dd:	66 c7 05 e2 78 65 f0 	movw   $0x8,0xf06578e2
f010a4e4:	08 00 
f010a4e6:	a0 e4 78 65 f0       	mov    0xf06578e4,%al
f010a4eb:	83 e0 e0             	and    $0xffffffe0,%eax
f010a4ee:	a2 e4 78 65 f0       	mov    %al,0xf06578e4
f010a4f3:	a0 e4 78 65 f0       	mov    0xf06578e4,%al
f010a4f8:	83 e0 1f             	and    $0x1f,%eax
f010a4fb:	a2 e4 78 65 f0       	mov    %al,0xf06578e4
f010a500:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a505:	83 e0 f0             	and    $0xfffffff0,%eax
f010a508:	83 c8 0e             	or     $0xe,%eax
f010a50b:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a510:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a515:	83 e0 ef             	and    $0xffffffef,%eax
f010a518:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a51d:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a522:	83 c8 60             	or     $0x60,%eax
f010a525:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a52a:	a0 e5 78 65 f0       	mov    0xf06578e5,%al
f010a52f:	83 c8 80             	or     $0xffffff80,%eax
f010a532:	a2 e5 78 65 f0       	mov    %al,0xf06578e5
f010a537:	b8 64 ba 10 f0       	mov    $0xf010ba64,%eax
f010a53c:	c1 e8 10             	shr    $0x10,%eax
f010a53f:	66 a3 e6 78 65 f0    	mov    %ax,0xf06578e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010a545:	b8 6e ba 10 f0       	mov    $0xf010ba6e,%eax
f010a54a:	66 a3 a0 77 65 f0    	mov    %ax,0xf06577a0
f010a550:	66 c7 05 a2 77 65 f0 	movw   $0x8,0xf06577a2
f010a557:	08 00 
f010a559:	a0 a4 77 65 f0       	mov    0xf06577a4,%al
f010a55e:	83 e0 e0             	and    $0xffffffe0,%eax
f010a561:	a2 a4 77 65 f0       	mov    %al,0xf06577a4
f010a566:	a0 a4 77 65 f0       	mov    0xf06577a4,%al
f010a56b:	83 e0 1f             	and    $0x1f,%eax
f010a56e:	a2 a4 77 65 f0       	mov    %al,0xf06577a4
f010a573:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a578:	83 e0 f0             	and    $0xfffffff0,%eax
f010a57b:	83 c8 0e             	or     $0xe,%eax
f010a57e:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a583:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a588:	83 e0 ef             	and    $0xffffffef,%eax
f010a58b:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a590:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a595:	83 e0 9f             	and    $0xffffff9f,%eax
f010a598:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a59d:	a0 a5 77 65 f0       	mov    0xf06577a5,%al
f010a5a2:	83 c8 80             	or     $0xffffff80,%eax
f010a5a5:	a2 a5 77 65 f0       	mov    %al,0xf06577a5
f010a5aa:	b8 6e ba 10 f0       	mov    $0xf010ba6e,%eax
f010a5af:	c1 e8 10             	shr    $0x10,%eax
f010a5b2:	66 a3 a6 77 65 f0    	mov    %ax,0xf06577a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010a5b8:	b8 76 ba 10 f0       	mov    $0xf010ba76,%eax
f010a5bd:	66 a3 60 77 65 f0    	mov    %ax,0xf0657760
f010a5c3:	66 c7 05 62 77 65 f0 	movw   $0x8,0xf0657762
f010a5ca:	08 00 
f010a5cc:	a0 64 77 65 f0       	mov    0xf0657764,%al
f010a5d1:	83 e0 e0             	and    $0xffffffe0,%eax
f010a5d4:	a2 64 77 65 f0       	mov    %al,0xf0657764
f010a5d9:	a0 64 77 65 f0       	mov    0xf0657764,%al
f010a5de:	83 e0 1f             	and    $0x1f,%eax
f010a5e1:	a2 64 77 65 f0       	mov    %al,0xf0657764
f010a5e6:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a5eb:	83 e0 f0             	and    $0xfffffff0,%eax
f010a5ee:	83 c8 0e             	or     $0xe,%eax
f010a5f1:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a5f6:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a5fb:	83 e0 ef             	and    $0xffffffef,%eax
f010a5fe:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a603:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a608:	83 c8 60             	or     $0x60,%eax
f010a60b:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a610:	a0 65 77 65 f0       	mov    0xf0657765,%al
f010a615:	83 c8 80             	or     $0xffffff80,%eax
f010a618:	a2 65 77 65 f0       	mov    %al,0xf0657765
f010a61d:	b8 76 ba 10 f0       	mov    $0xf010ba76,%eax
f010a622:	c1 e8 10             	shr    $0x10,%eax
f010a625:	66 a3 66 77 65 f0    	mov    %ax,0xf0657766
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010a62b:	b8 80 ba 10 f0       	mov    $0xf010ba80,%eax
f010a630:	66 a3 68 77 65 f0    	mov    %ax,0xf0657768
f010a636:	66 c7 05 6a 77 65 f0 	movw   $0x8,0xf065776a
f010a63d:	08 00 
f010a63f:	a0 6c 77 65 f0       	mov    0xf065776c,%al
f010a644:	83 e0 e0             	and    $0xffffffe0,%eax
f010a647:	a2 6c 77 65 f0       	mov    %al,0xf065776c
f010a64c:	a0 6c 77 65 f0       	mov    0xf065776c,%al
f010a651:	83 e0 1f             	and    $0x1f,%eax
f010a654:	a2 6c 77 65 f0       	mov    %al,0xf065776c
f010a659:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a65e:	83 c8 0f             	or     $0xf,%eax
f010a661:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a666:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a66b:	83 e0 ef             	and    $0xffffffef,%eax
f010a66e:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a673:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a678:	83 c8 60             	or     $0x60,%eax
f010a67b:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a680:	a0 6d 77 65 f0       	mov    0xf065776d,%al
f010a685:	83 c8 80             	or     $0xffffff80,%eax
f010a688:	a2 6d 77 65 f0       	mov    %al,0xf065776d
f010a68d:	b8 80 ba 10 f0       	mov    $0xf010ba80,%eax
f010a692:	c1 e8 10             	shr    $0x10,%eax
f010a695:	66 a3 6e 77 65 f0    	mov    %ax,0xf065776e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010a69b:	b8 8a ba 10 f0       	mov    $0xf010ba8a,%eax
f010a6a0:	66 a3 70 77 65 f0    	mov    %ax,0xf0657770
f010a6a6:	66 c7 05 72 77 65 f0 	movw   $0x8,0xf0657772
f010a6ad:	08 00 
f010a6af:	a0 74 77 65 f0       	mov    0xf0657774,%al
f010a6b4:	83 e0 e0             	and    $0xffffffe0,%eax
f010a6b7:	a2 74 77 65 f0       	mov    %al,0xf0657774
f010a6bc:	a0 74 77 65 f0       	mov    0xf0657774,%al
f010a6c1:	83 e0 1f             	and    $0x1f,%eax
f010a6c4:	a2 74 77 65 f0       	mov    %al,0xf0657774
f010a6c9:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a6ce:	83 e0 f0             	and    $0xfffffff0,%eax
f010a6d1:	83 c8 0e             	or     $0xe,%eax
f010a6d4:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a6d9:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a6de:	83 e0 ef             	and    $0xffffffef,%eax
f010a6e1:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a6e6:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a6eb:	83 c8 60             	or     $0x60,%eax
f010a6ee:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a6f3:	a0 75 77 65 f0       	mov    0xf0657775,%al
f010a6f8:	83 c8 80             	or     $0xffffff80,%eax
f010a6fb:	a2 75 77 65 f0       	mov    %al,0xf0657775
f010a700:	b8 8a ba 10 f0       	mov    $0xf010ba8a,%eax
f010a705:	c1 e8 10             	shr    $0x10,%eax
f010a708:	66 a3 76 77 65 f0    	mov    %ax,0xf0657776
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010a70e:	b8 94 ba 10 f0       	mov    $0xf010ba94,%eax
f010a713:	66 a3 78 77 65 f0    	mov    %ax,0xf0657778
f010a719:	66 c7 05 7a 77 65 f0 	movw   $0x8,0xf065777a
f010a720:	08 00 
f010a722:	a0 7c 77 65 f0       	mov    0xf065777c,%al
f010a727:	83 e0 e0             	and    $0xffffffe0,%eax
f010a72a:	a2 7c 77 65 f0       	mov    %al,0xf065777c
f010a72f:	a0 7c 77 65 f0       	mov    0xf065777c,%al
f010a734:	83 e0 1f             	and    $0x1f,%eax
f010a737:	a2 7c 77 65 f0       	mov    %al,0xf065777c
f010a73c:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a741:	83 c8 0f             	or     $0xf,%eax
f010a744:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a749:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a74e:	83 e0 ef             	and    $0xffffffef,%eax
f010a751:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a756:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a75b:	83 c8 60             	or     $0x60,%eax
f010a75e:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a763:	a0 7d 77 65 f0       	mov    0xf065777d,%al
f010a768:	83 c8 80             	or     $0xffffff80,%eax
f010a76b:	a2 7d 77 65 f0       	mov    %al,0xf065777d
f010a770:	b8 94 ba 10 f0       	mov    $0xf010ba94,%eax
f010a775:	c1 e8 10             	shr    $0x10,%eax
f010a778:	66 a3 7e 77 65 f0    	mov    %ax,0xf065777e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010a77e:	b8 9e ba 10 f0       	mov    $0xf010ba9e,%eax
f010a783:	66 a3 80 77 65 f0    	mov    %ax,0xf0657780
f010a789:	66 c7 05 82 77 65 f0 	movw   $0x8,0xf0657782
f010a790:	08 00 
f010a792:	a0 84 77 65 f0       	mov    0xf0657784,%al
f010a797:	83 e0 e0             	and    $0xffffffe0,%eax
f010a79a:	a2 84 77 65 f0       	mov    %al,0xf0657784
f010a79f:	a0 84 77 65 f0       	mov    0xf0657784,%al
f010a7a4:	83 e0 1f             	and    $0x1f,%eax
f010a7a7:	a2 84 77 65 f0       	mov    %al,0xf0657784
f010a7ac:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7b1:	83 c8 0f             	or     $0xf,%eax
f010a7b4:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7b9:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7be:	83 e0 ef             	and    $0xffffffef,%eax
f010a7c1:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7c6:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7cb:	83 c8 60             	or     $0x60,%eax
f010a7ce:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7d3:	a0 85 77 65 f0       	mov    0xf0657785,%al
f010a7d8:	83 c8 80             	or     $0xffffff80,%eax
f010a7db:	a2 85 77 65 f0       	mov    %al,0xf0657785
f010a7e0:	b8 9e ba 10 f0       	mov    $0xf010ba9e,%eax
f010a7e5:	c1 e8 10             	shr    $0x10,%eax
f010a7e8:	66 a3 86 77 65 f0    	mov    %ax,0xf0657786
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010a7ee:	b8 a8 ba 10 f0       	mov    $0xf010baa8,%eax
f010a7f3:	66 a3 88 77 65 f0    	mov    %ax,0xf0657788
f010a7f9:	66 c7 05 8a 77 65 f0 	movw   $0x8,0xf065778a
f010a800:	08 00 
f010a802:	a0 8c 77 65 f0       	mov    0xf065778c,%al
f010a807:	83 e0 e0             	and    $0xffffffe0,%eax
f010a80a:	a2 8c 77 65 f0       	mov    %al,0xf065778c
f010a80f:	a0 8c 77 65 f0       	mov    0xf065778c,%al
f010a814:	83 e0 1f             	and    $0x1f,%eax
f010a817:	a2 8c 77 65 f0       	mov    %al,0xf065778c
f010a81c:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a821:	83 e0 f0             	and    $0xfffffff0,%eax
f010a824:	83 c8 0e             	or     $0xe,%eax
f010a827:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a82c:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a831:	83 e0 ef             	and    $0xffffffef,%eax
f010a834:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a839:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a83e:	83 c8 60             	or     $0x60,%eax
f010a841:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a846:	a0 8d 77 65 f0       	mov    0xf065778d,%al
f010a84b:	83 c8 80             	or     $0xffffff80,%eax
f010a84e:	a2 8d 77 65 f0       	mov    %al,0xf065778d
f010a853:	b8 a8 ba 10 f0       	mov    $0xf010baa8,%eax
f010a858:	c1 e8 10             	shr    $0x10,%eax
f010a85b:	66 a3 8e 77 65 f0    	mov    %ax,0xf065778e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010a861:	b8 b2 ba 10 f0       	mov    $0xf010bab2,%eax
f010a866:	66 a3 90 77 65 f0    	mov    %ax,0xf0657790
f010a86c:	66 c7 05 92 77 65 f0 	movw   $0x8,0xf0657792
f010a873:	08 00 
f010a875:	a0 94 77 65 f0       	mov    0xf0657794,%al
f010a87a:	83 e0 e0             	and    $0xffffffe0,%eax
f010a87d:	a2 94 77 65 f0       	mov    %al,0xf0657794
f010a882:	a0 94 77 65 f0       	mov    0xf0657794,%al
f010a887:	83 e0 1f             	and    $0x1f,%eax
f010a88a:	a2 94 77 65 f0       	mov    %al,0xf0657794
f010a88f:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a894:	83 e0 f0             	and    $0xfffffff0,%eax
f010a897:	83 c8 0e             	or     $0xe,%eax
f010a89a:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a89f:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8a4:	83 e0 ef             	and    $0xffffffef,%eax
f010a8a7:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8ac:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8b1:	83 c8 60             	or     $0x60,%eax
f010a8b4:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8b9:	a0 95 77 65 f0       	mov    0xf0657795,%al
f010a8be:	83 c8 80             	or     $0xffffff80,%eax
f010a8c1:	a2 95 77 65 f0       	mov    %al,0xf0657795
f010a8c6:	b8 b2 ba 10 f0       	mov    $0xf010bab2,%eax
f010a8cb:	c1 e8 10             	shr    $0x10,%eax
f010a8ce:	66 a3 96 77 65 f0    	mov    %ax,0xf0657796
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010a8d4:	b8 bc ba 10 f0       	mov    $0xf010babc,%eax
f010a8d9:	66 a3 98 77 65 f0    	mov    %ax,0xf0657798
f010a8df:	66 c7 05 9a 77 65 f0 	movw   $0x8,0xf065779a
f010a8e6:	08 00 
f010a8e8:	a0 9c 77 65 f0       	mov    0xf065779c,%al
f010a8ed:	83 e0 e0             	and    $0xffffffe0,%eax
f010a8f0:	a2 9c 77 65 f0       	mov    %al,0xf065779c
f010a8f5:	a0 9c 77 65 f0       	mov    0xf065779c,%al
f010a8fa:	83 e0 1f             	and    $0x1f,%eax
f010a8fd:	a2 9c 77 65 f0       	mov    %al,0xf065779c
f010a902:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a907:	83 e0 f0             	and    $0xfffffff0,%eax
f010a90a:	83 c8 0e             	or     $0xe,%eax
f010a90d:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a912:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a917:	83 e0 ef             	and    $0xffffffef,%eax
f010a91a:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a91f:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a924:	83 c8 60             	or     $0x60,%eax
f010a927:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a92c:	a0 9d 77 65 f0       	mov    0xf065779d,%al
f010a931:	83 c8 80             	or     $0xffffff80,%eax
f010a934:	a2 9d 77 65 f0       	mov    %al,0xf065779d
f010a939:	b8 bc ba 10 f0       	mov    $0xf010babc,%eax
f010a93e:	c1 e8 10             	shr    $0x10,%eax
f010a941:	66 a3 9e 77 65 f0    	mov    %ax,0xf065779e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010a947:	b8 c6 ba 10 f0       	mov    $0xf010bac6,%eax
f010a94c:	66 a3 b0 77 65 f0    	mov    %ax,0xf06577b0
f010a952:	66 c7 05 b2 77 65 f0 	movw   $0x8,0xf06577b2
f010a959:	08 00 
f010a95b:	a0 b4 77 65 f0       	mov    0xf06577b4,%al
f010a960:	83 e0 e0             	and    $0xffffffe0,%eax
f010a963:	a2 b4 77 65 f0       	mov    %al,0xf06577b4
f010a968:	a0 b4 77 65 f0       	mov    0xf06577b4,%al
f010a96d:	83 e0 1f             	and    $0x1f,%eax
f010a970:	a2 b4 77 65 f0       	mov    %al,0xf06577b4
f010a975:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a97a:	83 e0 f0             	and    $0xfffffff0,%eax
f010a97d:	83 c8 0e             	or     $0xe,%eax
f010a980:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a985:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a98a:	83 e0 ef             	and    $0xffffffef,%eax
f010a98d:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a992:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a997:	83 c8 60             	or     $0x60,%eax
f010a99a:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a99f:	a0 b5 77 65 f0       	mov    0xf06577b5,%al
f010a9a4:	83 c8 80             	or     $0xffffff80,%eax
f010a9a7:	a2 b5 77 65 f0       	mov    %al,0xf06577b5
f010a9ac:	b8 c6 ba 10 f0       	mov    $0xf010bac6,%eax
f010a9b1:	c1 e8 10             	shr    $0x10,%eax
f010a9b4:	66 a3 b6 77 65 f0    	mov    %ax,0xf06577b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010a9ba:	b8 ce ba 10 f0       	mov    $0xf010bace,%eax
f010a9bf:	66 a3 b8 77 65 f0    	mov    %ax,0xf06577b8
f010a9c5:	66 c7 05 ba 77 65 f0 	movw   $0x8,0xf06577ba
f010a9cc:	08 00 
f010a9ce:	a0 bc 77 65 f0       	mov    0xf06577bc,%al
f010a9d3:	83 e0 e0             	and    $0xffffffe0,%eax
f010a9d6:	a2 bc 77 65 f0       	mov    %al,0xf06577bc
f010a9db:	a0 bc 77 65 f0       	mov    0xf06577bc,%al
f010a9e0:	83 e0 1f             	and    $0x1f,%eax
f010a9e3:	a2 bc 77 65 f0       	mov    %al,0xf06577bc
f010a9e8:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010a9ed:	83 e0 f0             	and    $0xfffffff0,%eax
f010a9f0:	83 c8 0e             	or     $0xe,%eax
f010a9f3:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010a9f8:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010a9fd:	83 e0 ef             	and    $0xffffffef,%eax
f010aa00:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa05:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa0a:	83 c8 60             	or     $0x60,%eax
f010aa0d:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa12:	a0 bd 77 65 f0       	mov    0xf06577bd,%al
f010aa17:	83 c8 80             	or     $0xffffff80,%eax
f010aa1a:	a2 bd 77 65 f0       	mov    %al,0xf06577bd
f010aa1f:	b8 ce ba 10 f0       	mov    $0xf010bace,%eax
f010aa24:	c1 e8 10             	shr    $0x10,%eax
f010aa27:	66 a3 be 77 65 f0    	mov    %ax,0xf06577be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010aa2d:	b8 d2 ba 10 f0       	mov    $0xf010bad2,%eax
f010aa32:	66 a3 c0 77 65 f0    	mov    %ax,0xf06577c0
f010aa38:	66 c7 05 c2 77 65 f0 	movw   $0x8,0xf06577c2
f010aa3f:	08 00 
f010aa41:	a0 c4 77 65 f0       	mov    0xf06577c4,%al
f010aa46:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa49:	a2 c4 77 65 f0       	mov    %al,0xf06577c4
f010aa4e:	a0 c4 77 65 f0       	mov    0xf06577c4,%al
f010aa53:	83 e0 1f             	and    $0x1f,%eax
f010aa56:	a2 c4 77 65 f0       	mov    %al,0xf06577c4
f010aa5b:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aa60:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa63:	83 c8 0e             	or     $0xe,%eax
f010aa66:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aa6b:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aa70:	83 e0 ef             	and    $0xffffffef,%eax
f010aa73:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aa78:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aa7d:	83 c8 60             	or     $0x60,%eax
f010aa80:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aa85:	a0 c5 77 65 f0       	mov    0xf06577c5,%al
f010aa8a:	83 c8 80             	or     $0xffffff80,%eax
f010aa8d:	a2 c5 77 65 f0       	mov    %al,0xf06577c5
f010aa92:	b8 d2 ba 10 f0       	mov    $0xf010bad2,%eax
f010aa97:	c1 e8 10             	shr    $0x10,%eax
f010aa9a:	66 a3 c6 77 65 f0    	mov    %ax,0xf06577c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010aaa0:	b8 d6 ba 10 f0       	mov    $0xf010bad6,%eax
f010aaa5:	66 a3 c8 77 65 f0    	mov    %ax,0xf06577c8
f010aaab:	66 c7 05 ca 77 65 f0 	movw   $0x8,0xf06577ca
f010aab2:	08 00 
f010aab4:	a0 cc 77 65 f0       	mov    0xf06577cc,%al
f010aab9:	83 e0 e0             	and    $0xffffffe0,%eax
f010aabc:	a2 cc 77 65 f0       	mov    %al,0xf06577cc
f010aac1:	a0 cc 77 65 f0       	mov    0xf06577cc,%al
f010aac6:	83 e0 1f             	and    $0x1f,%eax
f010aac9:	a2 cc 77 65 f0       	mov    %al,0xf06577cc
f010aace:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010aad3:	83 e0 f0             	and    $0xfffffff0,%eax
f010aad6:	83 c8 0e             	or     $0xe,%eax
f010aad9:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010aade:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010aae3:	83 e0 ef             	and    $0xffffffef,%eax
f010aae6:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010aaeb:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010aaf0:	83 c8 60             	or     $0x60,%eax
f010aaf3:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010aaf8:	a0 cd 77 65 f0       	mov    0xf06577cd,%al
f010aafd:	83 c8 80             	or     $0xffffff80,%eax
f010ab00:	a2 cd 77 65 f0       	mov    %al,0xf06577cd
f010ab05:	b8 d6 ba 10 f0       	mov    $0xf010bad6,%eax
f010ab0a:	c1 e8 10             	shr    $0x10,%eax
f010ab0d:	66 a3 ce 77 65 f0    	mov    %ax,0xf06577ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010ab13:	b8 da ba 10 f0       	mov    $0xf010bada,%eax
f010ab18:	66 a3 e0 77 65 f0    	mov    %ax,0xf06577e0
f010ab1e:	66 c7 05 e2 77 65 f0 	movw   $0x8,0xf06577e2
f010ab25:	08 00 
f010ab27:	a0 e4 77 65 f0       	mov    0xf06577e4,%al
f010ab2c:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab2f:	a2 e4 77 65 f0       	mov    %al,0xf06577e4
f010ab34:	a0 e4 77 65 f0       	mov    0xf06577e4,%al
f010ab39:	83 e0 1f             	and    $0x1f,%eax
f010ab3c:	a2 e4 77 65 f0       	mov    %al,0xf06577e4
f010ab41:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab46:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab49:	83 c8 0e             	or     $0xe,%eax
f010ab4c:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab51:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab56:	83 e0 ef             	and    $0xffffffef,%eax
f010ab59:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab5e:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab63:	83 c8 60             	or     $0x60,%eax
f010ab66:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab6b:	a0 e5 77 65 f0       	mov    0xf06577e5,%al
f010ab70:	83 c8 80             	or     $0xffffff80,%eax
f010ab73:	a2 e5 77 65 f0       	mov    %al,0xf06577e5
f010ab78:	b8 da ba 10 f0       	mov    $0xf010bada,%eax
f010ab7d:	c1 e8 10             	shr    $0x10,%eax
f010ab80:	66 a3 e6 77 65 f0    	mov    %ax,0xf06577e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010ab86:	b8 e0 ba 10 f0       	mov    $0xf010bae0,%eax
f010ab8b:	66 a3 e8 77 65 f0    	mov    %ax,0xf06577e8
f010ab91:	66 c7 05 ea 77 65 f0 	movw   $0x8,0xf06577ea
f010ab98:	08 00 
f010ab9a:	a0 ec 77 65 f0       	mov    0xf06577ec,%al
f010ab9f:	83 e0 e0             	and    $0xffffffe0,%eax
f010aba2:	a2 ec 77 65 f0       	mov    %al,0xf06577ec
f010aba7:	a0 ec 77 65 f0       	mov    0xf06577ec,%al
f010abac:	83 e0 1f             	and    $0x1f,%eax
f010abaf:	a2 ec 77 65 f0       	mov    %al,0xf06577ec
f010abb4:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abb9:	83 e0 f0             	and    $0xfffffff0,%eax
f010abbc:	83 c8 0e             	or     $0xe,%eax
f010abbf:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010abc4:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abc9:	83 e0 ef             	and    $0xffffffef,%eax
f010abcc:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010abd1:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abd6:	83 c8 60             	or     $0x60,%eax
f010abd9:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010abde:	a0 ed 77 65 f0       	mov    0xf06577ed,%al
f010abe3:	83 c8 80             	or     $0xffffff80,%eax
f010abe6:	a2 ed 77 65 f0       	mov    %al,0xf06577ed
f010abeb:	b8 e0 ba 10 f0       	mov    $0xf010bae0,%eax
f010abf0:	c1 e8 10             	shr    $0x10,%eax
f010abf3:	66 a3 ee 77 65 f0    	mov    %ax,0xf06577ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010abf9:	b8 e4 ba 10 f0       	mov    $0xf010bae4,%eax
f010abfe:	66 a3 f0 77 65 f0    	mov    %ax,0xf06577f0
f010ac04:	66 c7 05 f2 77 65 f0 	movw   $0x8,0xf06577f2
f010ac0b:	08 00 
f010ac0d:	a0 f4 77 65 f0       	mov    0xf06577f4,%al
f010ac12:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac15:	a2 f4 77 65 f0       	mov    %al,0xf06577f4
f010ac1a:	a0 f4 77 65 f0       	mov    0xf06577f4,%al
f010ac1f:	83 e0 1f             	and    $0x1f,%eax
f010ac22:	a2 f4 77 65 f0       	mov    %al,0xf06577f4
f010ac27:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac2c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac2f:	83 c8 0e             	or     $0xe,%eax
f010ac32:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac37:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac3c:	83 e0 ef             	and    $0xffffffef,%eax
f010ac3f:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac44:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac49:	83 c8 60             	or     $0x60,%eax
f010ac4c:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac51:	a0 f5 77 65 f0       	mov    0xf06577f5,%al
f010ac56:	83 c8 80             	or     $0xffffff80,%eax
f010ac59:	a2 f5 77 65 f0       	mov    %al,0xf06577f5
f010ac5e:	b8 e4 ba 10 f0       	mov    $0xf010bae4,%eax
f010ac63:	c1 e8 10             	shr    $0x10,%eax
f010ac66:	66 a3 f6 77 65 f0    	mov    %ax,0xf06577f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010ac6c:	b8 ea ba 10 f0       	mov    $0xf010baea,%eax
f010ac71:	66 a3 f8 77 65 f0    	mov    %ax,0xf06577f8
f010ac77:	66 c7 05 fa 77 65 f0 	movw   $0x8,0xf06577fa
f010ac7e:	08 00 
f010ac80:	a0 fc 77 65 f0       	mov    0xf06577fc,%al
f010ac85:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac88:	a2 fc 77 65 f0       	mov    %al,0xf06577fc
f010ac8d:	a0 fc 77 65 f0       	mov    0xf06577fc,%al
f010ac92:	83 e0 1f             	and    $0x1f,%eax
f010ac95:	a2 fc 77 65 f0       	mov    %al,0xf06577fc
f010ac9a:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010ac9f:	83 e0 f0             	and    $0xfffffff0,%eax
f010aca2:	83 c8 0e             	or     $0xe,%eax
f010aca5:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acaa:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010acaf:	83 e0 ef             	and    $0xffffffef,%eax
f010acb2:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acb7:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010acbc:	83 c8 60             	or     $0x60,%eax
f010acbf:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acc4:	a0 fd 77 65 f0       	mov    0xf06577fd,%al
f010acc9:	83 c8 80             	or     $0xffffff80,%eax
f010accc:	a2 fd 77 65 f0       	mov    %al,0xf06577fd
f010acd1:	b8 ea ba 10 f0       	mov    $0xf010baea,%eax
f010acd6:	c1 e8 10             	shr    $0x10,%eax
f010acd9:	66 a3 fe 77 65 f0    	mov    %ax,0xf06577fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010acdf:	b8 f0 ba 10 f0       	mov    $0xf010baf0,%eax
f010ace4:	66 a3 60 78 65 f0    	mov    %ax,0xf0657860
f010acea:	66 c7 05 62 78 65 f0 	movw   $0x8,0xf0657862
f010acf1:	08 00 
f010acf3:	a0 64 78 65 f0       	mov    0xf0657864,%al
f010acf8:	83 e0 e0             	and    $0xffffffe0,%eax
f010acfb:	a2 64 78 65 f0       	mov    %al,0xf0657864
f010ad00:	a0 64 78 65 f0       	mov    0xf0657864,%al
f010ad05:	83 e0 1f             	and    $0x1f,%eax
f010ad08:	a2 64 78 65 f0       	mov    %al,0xf0657864
f010ad0d:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad12:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad15:	83 c8 0e             	or     $0xe,%eax
f010ad18:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad1d:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad22:	83 e0 ef             	and    $0xffffffef,%eax
f010ad25:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad2a:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad2f:	83 c8 60             	or     $0x60,%eax
f010ad32:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad37:	a0 65 78 65 f0       	mov    0xf0657865,%al
f010ad3c:	83 c8 80             	or     $0xffffff80,%eax
f010ad3f:	a2 65 78 65 f0       	mov    %al,0xf0657865
f010ad44:	b8 f0 ba 10 f0       	mov    $0xf010baf0,%eax
f010ad49:	c1 e8 10             	shr    $0x10,%eax
f010ad4c:	66 a3 66 78 65 f0    	mov    %ax,0xf0657866
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010ad52:	b8 f6 ba 10 f0       	mov    $0xf010baf6,%eax
f010ad57:	66 a3 68 78 65 f0    	mov    %ax,0xf0657868
f010ad5d:	66 c7 05 6a 78 65 f0 	movw   $0x8,0xf065786a
f010ad64:	08 00 
f010ad66:	a0 6c 78 65 f0       	mov    0xf065786c,%al
f010ad6b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad6e:	a2 6c 78 65 f0       	mov    %al,0xf065786c
f010ad73:	a0 6c 78 65 f0       	mov    0xf065786c,%al
f010ad78:	83 e0 1f             	and    $0x1f,%eax
f010ad7b:	a2 6c 78 65 f0       	mov    %al,0xf065786c
f010ad80:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010ad85:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad88:	83 c8 0e             	or     $0xe,%eax
f010ad8b:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010ad90:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010ad95:	83 e0 ef             	and    $0xffffffef,%eax
f010ad98:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010ad9d:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010ada2:	83 c8 60             	or     $0x60,%eax
f010ada5:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010adaa:	a0 6d 78 65 f0       	mov    0xf065786d,%al
f010adaf:	83 c8 80             	or     $0xffffff80,%eax
f010adb2:	a2 6d 78 65 f0       	mov    %al,0xf065786d
f010adb7:	b8 f6 ba 10 f0       	mov    $0xf010baf6,%eax
f010adbc:	c1 e8 10             	shr    $0x10,%eax
f010adbf:	66 a3 6e 78 65 f0    	mov    %ax,0xf065786e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010adc5:	b8 fc ba 10 f0       	mov    $0xf010bafc,%eax
f010adca:	66 a3 70 78 65 f0    	mov    %ax,0xf0657870
f010add0:	66 c7 05 72 78 65 f0 	movw   $0x8,0xf0657872
f010add7:	08 00 
f010add9:	a0 74 78 65 f0       	mov    0xf0657874,%al
f010adde:	83 e0 e0             	and    $0xffffffe0,%eax
f010ade1:	a2 74 78 65 f0       	mov    %al,0xf0657874
f010ade6:	a0 74 78 65 f0       	mov    0xf0657874,%al
f010adeb:	83 e0 1f             	and    $0x1f,%eax
f010adee:	a2 74 78 65 f0       	mov    %al,0xf0657874
f010adf3:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010adf8:	83 e0 f0             	and    $0xfffffff0,%eax
f010adfb:	83 c8 0e             	or     $0xe,%eax
f010adfe:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae03:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae08:	83 e0 ef             	and    $0xffffffef,%eax
f010ae0b:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae10:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae15:	83 c8 60             	or     $0x60,%eax
f010ae18:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae1d:	a0 75 78 65 f0       	mov    0xf0657875,%al
f010ae22:	83 c8 80             	or     $0xffffff80,%eax
f010ae25:	a2 75 78 65 f0       	mov    %al,0xf0657875
f010ae2a:	b8 fc ba 10 f0       	mov    $0xf010bafc,%eax
f010ae2f:	c1 e8 10             	shr    $0x10,%eax
f010ae32:	66 a3 76 78 65 f0    	mov    %ax,0xf0657876
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010ae38:	b8 02 bb 10 f0       	mov    $0xf010bb02,%eax
f010ae3d:	66 a3 78 78 65 f0    	mov    %ax,0xf0657878
f010ae43:	66 c7 05 7a 78 65 f0 	movw   $0x8,0xf065787a
f010ae4a:	08 00 
f010ae4c:	a0 7c 78 65 f0       	mov    0xf065787c,%al
f010ae51:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae54:	a2 7c 78 65 f0       	mov    %al,0xf065787c
f010ae59:	a0 7c 78 65 f0       	mov    0xf065787c,%al
f010ae5e:	83 e0 1f             	and    $0x1f,%eax
f010ae61:	a2 7c 78 65 f0       	mov    %al,0xf065787c
f010ae66:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010ae6b:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae6e:	83 c8 0e             	or     $0xe,%eax
f010ae71:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010ae76:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010ae7b:	83 e0 ef             	and    $0xffffffef,%eax
f010ae7e:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010ae83:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010ae88:	83 c8 60             	or     $0x60,%eax
f010ae8b:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010ae90:	a0 7d 78 65 f0       	mov    0xf065787d,%al
f010ae95:	83 c8 80             	or     $0xffffff80,%eax
f010ae98:	a2 7d 78 65 f0       	mov    %al,0xf065787d
f010ae9d:	b8 02 bb 10 f0       	mov    $0xf010bb02,%eax
f010aea2:	c1 e8 10             	shr    $0x10,%eax
f010aea5:	66 a3 7e 78 65 f0    	mov    %ax,0xf065787e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010aeab:	b8 08 bb 10 f0       	mov    $0xf010bb08,%eax
f010aeb0:	66 a3 80 78 65 f0    	mov    %ax,0xf0657880
f010aeb6:	66 c7 05 82 78 65 f0 	movw   $0x8,0xf0657882
f010aebd:	08 00 
f010aebf:	a0 84 78 65 f0       	mov    0xf0657884,%al
f010aec4:	83 e0 e0             	and    $0xffffffe0,%eax
f010aec7:	a2 84 78 65 f0       	mov    %al,0xf0657884
f010aecc:	a0 84 78 65 f0       	mov    0xf0657884,%al
f010aed1:	83 e0 1f             	and    $0x1f,%eax
f010aed4:	a2 84 78 65 f0       	mov    %al,0xf0657884
f010aed9:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010aede:	83 e0 f0             	and    $0xfffffff0,%eax
f010aee1:	83 c8 0e             	or     $0xe,%eax
f010aee4:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010aee9:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010aeee:	83 e0 ef             	and    $0xffffffef,%eax
f010aef1:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010aef6:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010aefb:	83 c8 60             	or     $0x60,%eax
f010aefe:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af03:	a0 85 78 65 f0       	mov    0xf0657885,%al
f010af08:	83 c8 80             	or     $0xffffff80,%eax
f010af0b:	a2 85 78 65 f0       	mov    %al,0xf0657885
f010af10:	b8 08 bb 10 f0       	mov    $0xf010bb08,%eax
f010af15:	c1 e8 10             	shr    $0x10,%eax
f010af18:	66 a3 86 78 65 f0    	mov    %ax,0xf0657886
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010af1e:	b8 0e bb 10 f0       	mov    $0xf010bb0e,%eax
f010af23:	66 a3 88 78 65 f0    	mov    %ax,0xf0657888
f010af29:	66 c7 05 8a 78 65 f0 	movw   $0x8,0xf065788a
f010af30:	08 00 
f010af32:	a0 8c 78 65 f0       	mov    0xf065788c,%al
f010af37:	83 e0 e0             	and    $0xffffffe0,%eax
f010af3a:	a2 8c 78 65 f0       	mov    %al,0xf065788c
f010af3f:	a0 8c 78 65 f0       	mov    0xf065788c,%al
f010af44:	83 e0 1f             	and    $0x1f,%eax
f010af47:	a2 8c 78 65 f0       	mov    %al,0xf065788c
f010af4c:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af51:	83 e0 f0             	and    $0xfffffff0,%eax
f010af54:	83 c8 0e             	or     $0xe,%eax
f010af57:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af5c:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af61:	83 e0 ef             	and    $0xffffffef,%eax
f010af64:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af69:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af6e:	83 c8 60             	or     $0x60,%eax
f010af71:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af76:	a0 8d 78 65 f0       	mov    0xf065788d,%al
f010af7b:	83 c8 80             	or     $0xffffff80,%eax
f010af7e:	a2 8d 78 65 f0       	mov    %al,0xf065788d
f010af83:	b8 0e bb 10 f0       	mov    $0xf010bb0e,%eax
f010af88:	c1 e8 10             	shr    $0x10,%eax
f010af8b:	66 a3 8e 78 65 f0    	mov    %ax,0xf065788e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010af91:	b8 14 bb 10 f0       	mov    $0xf010bb14,%eax
f010af96:	66 a3 90 78 65 f0    	mov    %ax,0xf0657890
f010af9c:	66 c7 05 92 78 65 f0 	movw   $0x8,0xf0657892
f010afa3:	08 00 
f010afa5:	a0 94 78 65 f0       	mov    0xf0657894,%al
f010afaa:	83 e0 e0             	and    $0xffffffe0,%eax
f010afad:	a2 94 78 65 f0       	mov    %al,0xf0657894
f010afb2:	a0 94 78 65 f0       	mov    0xf0657894,%al
f010afb7:	83 e0 1f             	and    $0x1f,%eax
f010afba:	a2 94 78 65 f0       	mov    %al,0xf0657894
f010afbf:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010afc4:	83 e0 f0             	and    $0xfffffff0,%eax
f010afc7:	83 c8 0e             	or     $0xe,%eax
f010afca:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010afcf:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010afd4:	83 e0 ef             	and    $0xffffffef,%eax
f010afd7:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010afdc:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010afe1:	83 c8 60             	or     $0x60,%eax
f010afe4:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010afe9:	a0 95 78 65 f0       	mov    0xf0657895,%al
f010afee:	83 c8 80             	or     $0xffffff80,%eax
f010aff1:	a2 95 78 65 f0       	mov    %al,0xf0657895
f010aff6:	b8 14 bb 10 f0       	mov    $0xf010bb14,%eax
f010affb:	c1 e8 10             	shr    $0x10,%eax
f010affe:	66 a3 96 78 65 f0    	mov    %ax,0xf0657896
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b004:	b8 1a bb 10 f0       	mov    $0xf010bb1a,%eax
f010b009:	66 a3 98 78 65 f0    	mov    %ax,0xf0657898
f010b00f:	66 c7 05 9a 78 65 f0 	movw   $0x8,0xf065789a
f010b016:	08 00 
f010b018:	a0 9c 78 65 f0       	mov    0xf065789c,%al
f010b01d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b020:	a2 9c 78 65 f0       	mov    %al,0xf065789c
f010b025:	a0 9c 78 65 f0       	mov    0xf065789c,%al
f010b02a:	83 e0 1f             	and    $0x1f,%eax
f010b02d:	a2 9c 78 65 f0       	mov    %al,0xf065789c
f010b032:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b037:	83 e0 f0             	and    $0xfffffff0,%eax
f010b03a:	83 c8 0e             	or     $0xe,%eax
f010b03d:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b042:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b047:	83 e0 ef             	and    $0xffffffef,%eax
f010b04a:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b04f:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b054:	83 c8 60             	or     $0x60,%eax
f010b057:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b05c:	a0 9d 78 65 f0       	mov    0xf065789d,%al
f010b061:	83 c8 80             	or     $0xffffff80,%eax
f010b064:	a2 9d 78 65 f0       	mov    %al,0xf065789d
f010b069:	b8 1a bb 10 f0       	mov    $0xf010bb1a,%eax
f010b06e:	c1 e8 10             	shr    $0x10,%eax
f010b071:	66 a3 9e 78 65 f0    	mov    %ax,0xf065789e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b077:	b8 20 bb 10 f0       	mov    $0xf010bb20,%eax
f010b07c:	66 a3 a0 78 65 f0    	mov    %ax,0xf06578a0
f010b082:	66 c7 05 a2 78 65 f0 	movw   $0x8,0xf06578a2
f010b089:	08 00 
f010b08b:	a0 a4 78 65 f0       	mov    0xf06578a4,%al
f010b090:	83 e0 e0             	and    $0xffffffe0,%eax
f010b093:	a2 a4 78 65 f0       	mov    %al,0xf06578a4
f010b098:	a0 a4 78 65 f0       	mov    0xf06578a4,%al
f010b09d:	83 e0 1f             	and    $0x1f,%eax
f010b0a0:	a2 a4 78 65 f0       	mov    %al,0xf06578a4
f010b0a5:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0aa:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0ad:	83 c8 0e             	or     $0xe,%eax
f010b0b0:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0b5:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0ba:	83 e0 ef             	and    $0xffffffef,%eax
f010b0bd:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0c2:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0c7:	83 c8 60             	or     $0x60,%eax
f010b0ca:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0cf:	a0 a5 78 65 f0       	mov    0xf06578a5,%al
f010b0d4:	83 c8 80             	or     $0xffffff80,%eax
f010b0d7:	a2 a5 78 65 f0       	mov    %al,0xf06578a5
f010b0dc:	b8 20 bb 10 f0       	mov    $0xf010bb20,%eax
f010b0e1:	c1 e8 10             	shr    $0x10,%eax
f010b0e4:	66 a3 a6 78 65 f0    	mov    %ax,0xf06578a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b0ea:	b8 26 bb 10 f0       	mov    $0xf010bb26,%eax
f010b0ef:	66 a3 a8 78 65 f0    	mov    %ax,0xf06578a8
f010b0f5:	66 c7 05 aa 78 65 f0 	movw   $0x8,0xf06578aa
f010b0fc:	08 00 
f010b0fe:	a0 ac 78 65 f0       	mov    0xf06578ac,%al
f010b103:	83 e0 e0             	and    $0xffffffe0,%eax
f010b106:	a2 ac 78 65 f0       	mov    %al,0xf06578ac
f010b10b:	a0 ac 78 65 f0       	mov    0xf06578ac,%al
f010b110:	83 e0 1f             	and    $0x1f,%eax
f010b113:	a2 ac 78 65 f0       	mov    %al,0xf06578ac
f010b118:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b11d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b120:	83 c8 0e             	or     $0xe,%eax
f010b123:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b128:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b12d:	83 e0 ef             	and    $0xffffffef,%eax
f010b130:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b135:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b13a:	83 c8 60             	or     $0x60,%eax
f010b13d:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b142:	a0 ad 78 65 f0       	mov    0xf06578ad,%al
f010b147:	83 c8 80             	or     $0xffffff80,%eax
f010b14a:	a2 ad 78 65 f0       	mov    %al,0xf06578ad
f010b14f:	b8 26 bb 10 f0       	mov    $0xf010bb26,%eax
f010b154:	c1 e8 10             	shr    $0x10,%eax
f010b157:	66 a3 ae 78 65 f0    	mov    %ax,0xf06578ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b15d:	b8 2c bb 10 f0       	mov    $0xf010bb2c,%eax
f010b162:	66 a3 b0 78 65 f0    	mov    %ax,0xf06578b0
f010b168:	66 c7 05 b2 78 65 f0 	movw   $0x8,0xf06578b2
f010b16f:	08 00 
f010b171:	a0 b4 78 65 f0       	mov    0xf06578b4,%al
f010b176:	83 e0 e0             	and    $0xffffffe0,%eax
f010b179:	a2 b4 78 65 f0       	mov    %al,0xf06578b4
f010b17e:	a0 b4 78 65 f0       	mov    0xf06578b4,%al
f010b183:	83 e0 1f             	and    $0x1f,%eax
f010b186:	a2 b4 78 65 f0       	mov    %al,0xf06578b4
f010b18b:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b190:	83 e0 f0             	and    $0xfffffff0,%eax
f010b193:	83 c8 0e             	or     $0xe,%eax
f010b196:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b19b:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1a0:	83 e0 ef             	and    $0xffffffef,%eax
f010b1a3:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1a8:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1ad:	83 c8 60             	or     $0x60,%eax
f010b1b0:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1b5:	a0 b5 78 65 f0       	mov    0xf06578b5,%al
f010b1ba:	83 c8 80             	or     $0xffffff80,%eax
f010b1bd:	a2 b5 78 65 f0       	mov    %al,0xf06578b5
f010b1c2:	b8 2c bb 10 f0       	mov    $0xf010bb2c,%eax
f010b1c7:	c1 e8 10             	shr    $0x10,%eax
f010b1ca:	66 a3 b6 78 65 f0    	mov    %ax,0xf06578b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b1d0:	b8 32 bb 10 f0       	mov    $0xf010bb32,%eax
f010b1d5:	66 a3 b8 78 65 f0    	mov    %ax,0xf06578b8
f010b1db:	66 c7 05 ba 78 65 f0 	movw   $0x8,0xf06578ba
f010b1e2:	08 00 
f010b1e4:	a0 bc 78 65 f0       	mov    0xf06578bc,%al
f010b1e9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1ec:	a2 bc 78 65 f0       	mov    %al,0xf06578bc
f010b1f1:	a0 bc 78 65 f0       	mov    0xf06578bc,%al
f010b1f6:	83 e0 1f             	and    $0x1f,%eax
f010b1f9:	a2 bc 78 65 f0       	mov    %al,0xf06578bc
f010b1fe:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b203:	83 e0 f0             	and    $0xfffffff0,%eax
f010b206:	83 c8 0e             	or     $0xe,%eax
f010b209:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b20e:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b213:	83 e0 ef             	and    $0xffffffef,%eax
f010b216:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b21b:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b220:	83 c8 60             	or     $0x60,%eax
f010b223:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b228:	a0 bd 78 65 f0       	mov    0xf06578bd,%al
f010b22d:	83 c8 80             	or     $0xffffff80,%eax
f010b230:	a2 bd 78 65 f0       	mov    %al,0xf06578bd
f010b235:	b8 32 bb 10 f0       	mov    $0xf010bb32,%eax
f010b23a:	c1 e8 10             	shr    $0x10,%eax
f010b23d:	66 a3 be 78 65 f0    	mov    %ax,0xf06578be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b243:	b8 38 bb 10 f0       	mov    $0xf010bb38,%eax
f010b248:	66 a3 c0 78 65 f0    	mov    %ax,0xf06578c0
f010b24e:	66 c7 05 c2 78 65 f0 	movw   $0x8,0xf06578c2
f010b255:	08 00 
f010b257:	a0 c4 78 65 f0       	mov    0xf06578c4,%al
f010b25c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b25f:	a2 c4 78 65 f0       	mov    %al,0xf06578c4
f010b264:	a0 c4 78 65 f0       	mov    0xf06578c4,%al
f010b269:	83 e0 1f             	and    $0x1f,%eax
f010b26c:	a2 c4 78 65 f0       	mov    %al,0xf06578c4
f010b271:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b276:	83 e0 f0             	and    $0xfffffff0,%eax
f010b279:	83 c8 0e             	or     $0xe,%eax
f010b27c:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b281:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b286:	83 e0 ef             	and    $0xffffffef,%eax
f010b289:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b28e:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b293:	83 c8 60             	or     $0x60,%eax
f010b296:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b29b:	a0 c5 78 65 f0       	mov    0xf06578c5,%al
f010b2a0:	83 c8 80             	or     $0xffffff80,%eax
f010b2a3:	a2 c5 78 65 f0       	mov    %al,0xf06578c5
f010b2a8:	b8 38 bb 10 f0       	mov    $0xf010bb38,%eax
f010b2ad:	c1 e8 10             	shr    $0x10,%eax
f010b2b0:	66 a3 c6 78 65 f0    	mov    %ax,0xf06578c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010b2b6:	b8 3e bb 10 f0       	mov    $0xf010bb3e,%eax
f010b2bb:	66 a3 c8 78 65 f0    	mov    %ax,0xf06578c8
f010b2c1:	66 c7 05 ca 78 65 f0 	movw   $0x8,0xf06578ca
f010b2c8:	08 00 
f010b2ca:	a0 cc 78 65 f0       	mov    0xf06578cc,%al
f010b2cf:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2d2:	a2 cc 78 65 f0       	mov    %al,0xf06578cc
f010b2d7:	a0 cc 78 65 f0       	mov    0xf06578cc,%al
f010b2dc:	83 e0 1f             	and    $0x1f,%eax
f010b2df:	a2 cc 78 65 f0       	mov    %al,0xf06578cc
f010b2e4:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b2e9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2ec:	83 c8 0e             	or     $0xe,%eax
f010b2ef:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b2f4:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b2f9:	83 e0 ef             	and    $0xffffffef,%eax
f010b2fc:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b301:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b306:	83 c8 60             	or     $0x60,%eax
f010b309:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b30e:	a0 cd 78 65 f0       	mov    0xf06578cd,%al
f010b313:	83 c8 80             	or     $0xffffff80,%eax
f010b316:	a2 cd 78 65 f0       	mov    %al,0xf06578cd
f010b31b:	b8 3e bb 10 f0       	mov    $0xf010bb3e,%eax
f010b320:	c1 e8 10             	shr    $0x10,%eax
f010b323:	66 a3 ce 78 65 f0    	mov    %ax,0xf06578ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010b329:	b8 44 bb 10 f0       	mov    $0xf010bb44,%eax
f010b32e:	66 a3 d0 78 65 f0    	mov    %ax,0xf06578d0
f010b334:	66 c7 05 d2 78 65 f0 	movw   $0x8,0xf06578d2
f010b33b:	08 00 
f010b33d:	a0 d4 78 65 f0       	mov    0xf06578d4,%al
f010b342:	83 e0 e0             	and    $0xffffffe0,%eax
f010b345:	a2 d4 78 65 f0       	mov    %al,0xf06578d4
f010b34a:	a0 d4 78 65 f0       	mov    0xf06578d4,%al
f010b34f:	83 e0 1f             	and    $0x1f,%eax
f010b352:	a2 d4 78 65 f0       	mov    %al,0xf06578d4
f010b357:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b35c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b35f:	83 c8 0e             	or     $0xe,%eax
f010b362:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b367:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b36c:	83 e0 ef             	and    $0xffffffef,%eax
f010b36f:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b374:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b379:	83 c8 60             	or     $0x60,%eax
f010b37c:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b381:	a0 d5 78 65 f0       	mov    0xf06578d5,%al
f010b386:	83 c8 80             	or     $0xffffff80,%eax
f010b389:	a2 d5 78 65 f0       	mov    %al,0xf06578d5
f010b38e:	b8 44 bb 10 f0       	mov    $0xf010bb44,%eax
f010b393:	c1 e8 10             	shr    $0x10,%eax
f010b396:	66 a3 d6 78 65 f0    	mov    %ax,0xf06578d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010b39c:	b8 4a bb 10 f0       	mov    $0xf010bb4a,%eax
f010b3a1:	66 a3 d8 78 65 f0    	mov    %ax,0xf06578d8
f010b3a7:	66 c7 05 da 78 65 f0 	movw   $0x8,0xf06578da
f010b3ae:	08 00 
f010b3b0:	a0 dc 78 65 f0       	mov    0xf06578dc,%al
f010b3b5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3b8:	a2 dc 78 65 f0       	mov    %al,0xf06578dc
f010b3bd:	a0 dc 78 65 f0       	mov    0xf06578dc,%al
f010b3c2:	83 e0 1f             	and    $0x1f,%eax
f010b3c5:	a2 dc 78 65 f0       	mov    %al,0xf06578dc
f010b3ca:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b3cf:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3d2:	83 c8 0e             	or     $0xe,%eax
f010b3d5:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b3da:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b3df:	83 e0 ef             	and    $0xffffffef,%eax
f010b3e2:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b3e7:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b3ec:	83 c8 60             	or     $0x60,%eax
f010b3ef:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b3f4:	a0 dd 78 65 f0       	mov    0xf06578dd,%al
f010b3f9:	83 c8 80             	or     $0xffffff80,%eax
f010b3fc:	a2 dd 78 65 f0       	mov    %al,0xf06578dd
f010b401:	b8 4a bb 10 f0       	mov    $0xf010bb4a,%eax
f010b406:	c1 e8 10             	shr    $0x10,%eax
f010b409:	66 a3 de 78 65 f0    	mov    %ax,0xf06578de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010b40f:	c7 05 64 7f 65 f0 00 	movl   $0xefc00000,0xf0657f64
f010b416:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010b419:	66 c7 05 68 7f 65 f0 	movw   $0x10,0xf0657f68
f010b420:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010b422:	66 c7 05 e8 f8 18 f0 	movw   $0x68,0xf018f8e8
f010b429:	68 00 
f010b42b:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b430:	66 a3 ea f8 18 f0    	mov    %ax,0xf018f8ea
f010b436:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b43b:	c1 e8 10             	shr    $0x10,%eax
f010b43e:	a2 ec f8 18 f0       	mov    %al,0xf018f8ec
f010b443:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b448:	83 e0 f0             	and    $0xfffffff0,%eax
f010b44b:	83 c8 09             	or     $0x9,%eax
f010b44e:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b453:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b458:	83 c8 10             	or     $0x10,%eax
f010b45b:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b460:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b465:	83 e0 9f             	and    $0xffffff9f,%eax
f010b468:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b46d:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b472:	83 c8 80             	or     $0xffffff80,%eax
f010b475:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b47a:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b47f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b482:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b487:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b48c:	83 e0 ef             	and    $0xffffffef,%eax
f010b48f:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b494:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b499:	83 e0 df             	and    $0xffffffdf,%eax
f010b49c:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4a1:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4a6:	83 c8 40             	or     $0x40,%eax
f010b4a9:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4ae:	a0 ee f8 18 f0       	mov    0xf018f8ee,%al
f010b4b3:	83 e0 7f             	and    $0x7f,%eax
f010b4b6:	a2 ee f8 18 f0       	mov    %al,0xf018f8ee
f010b4bb:	b8 60 7f 65 f0       	mov    $0xf0657f60,%eax
f010b4c0:	c1 e8 18             	shr    $0x18,%eax
f010b4c3:	a2 ef f8 18 f0       	mov    %al,0xf018f8ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010b4c8:	a0 ed f8 18 f0       	mov    0xf018f8ed,%al
f010b4cd:	83 e0 ef             	and    $0xffffffef,%eax
f010b4d0:	a2 ed f8 18 f0       	mov    %al,0xf018f8ed
f010b4d5:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010b4db:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010b4df:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010b4e2:	0f 01 1d c8 fc 18 f0 	lidtl  0xf018fcc8
}
f010b4e9:	90                   	nop
f010b4ea:	c9                   	leave  
f010b4eb:	c3                   	ret    

f010b4ec <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010b4ec:	55                   	push   %ebp
f010b4ed:	89 e5                	mov    %esp,%ebp
f010b4ef:	53                   	push   %ebx
f010b4f0:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010b4f3:	83 ec 08             	sub    $0x8,%esp
f010b4f6:	ff 75 08             	pushl  0x8(%ebp)
f010b4f9:	68 3b 64 13 f0       	push   $0xf013643b
f010b4fe:	e8 2a 57 ff ff       	call   f0100c2d <cprintf>
f010b503:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010b506:	8b 45 08             	mov    0x8(%ebp),%eax
f010b509:	83 ec 0c             	sub    $0xc,%esp
f010b50c:	50                   	push   %eax
f010b50d:	e8 fd 00 00 00       	call   f010b60f <print_regs>
f010b512:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010b515:	8b 45 08             	mov    0x8(%ebp),%eax
f010b518:	8b 40 20             	mov    0x20(%eax),%eax
f010b51b:	0f b7 c0             	movzwl %ax,%eax
f010b51e:	83 ec 08             	sub    $0x8,%esp
f010b521:	50                   	push   %eax
f010b522:	68 4d 64 13 f0       	push   $0xf013644d
f010b527:	e8 01 57 ff ff       	call   f0100c2d <cprintf>
f010b52c:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010b52f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b532:	8b 40 24             	mov    0x24(%eax),%eax
f010b535:	0f b7 c0             	movzwl %ax,%eax
f010b538:	83 ec 08             	sub    $0x8,%esp
f010b53b:	50                   	push   %eax
f010b53c:	68 60 64 13 f0       	push   $0xf0136460
f010b541:	e8 e7 56 ff ff       	call   f0100c2d <cprintf>
f010b546:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010b549:	8b 45 08             	mov    0x8(%ebp),%eax
f010b54c:	8b 58 28             	mov    0x28(%eax),%ebx
f010b54f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b552:	8b 40 28             	mov    0x28(%eax),%eax
f010b555:	83 ec 0c             	sub    $0xc,%esp
f010b558:	50                   	push   %eax
f010b559:	e8 d0 ee ff ff       	call   f010a42e <trapname>
f010b55e:	83 c4 10             	add    $0x10,%esp
f010b561:	89 c2                	mov    %eax,%edx
f010b563:	8b 45 08             	mov    0x8(%ebp),%eax
f010b566:	8b 40 28             	mov    0x28(%eax),%eax
f010b569:	53                   	push   %ebx
f010b56a:	52                   	push   %edx
f010b56b:	50                   	push   %eax
f010b56c:	68 73 64 13 f0       	push   $0xf0136473
f010b571:	e8 b7 56 ff ff       	call   f0100c2d <cprintf>
f010b576:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010b579:	8b 45 08             	mov    0x8(%ebp),%eax
f010b57c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b57f:	83 ec 08             	sub    $0x8,%esp
f010b582:	50                   	push   %eax
f010b583:	68 8a 64 13 f0       	push   $0xf013648a
f010b588:	e8 a0 56 ff ff       	call   f0100c2d <cprintf>
f010b58d:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010b590:	8b 45 08             	mov    0x8(%ebp),%eax
f010b593:	8b 40 30             	mov    0x30(%eax),%eax
f010b596:	83 ec 08             	sub    $0x8,%esp
f010b599:	50                   	push   %eax
f010b59a:	68 99 64 13 f0       	push   $0xf0136499
f010b59f:	e8 89 56 ff ff       	call   f0100c2d <cprintf>
f010b5a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010b5a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5aa:	8b 40 34             	mov    0x34(%eax),%eax
f010b5ad:	0f b7 c0             	movzwl %ax,%eax
f010b5b0:	83 ec 08             	sub    $0x8,%esp
f010b5b3:	50                   	push   %eax
f010b5b4:	68 a8 64 13 f0       	push   $0xf01364a8
f010b5b9:	e8 6f 56 ff ff       	call   f0100c2d <cprintf>
f010b5be:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010b5c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5c4:	8b 40 38             	mov    0x38(%eax),%eax
f010b5c7:	83 ec 08             	sub    $0x8,%esp
f010b5ca:	50                   	push   %eax
f010b5cb:	68 bb 64 13 f0       	push   $0xf01364bb
f010b5d0:	e8 58 56 ff ff       	call   f0100c2d <cprintf>
f010b5d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010b5d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5db:	8b 40 3c             	mov    0x3c(%eax),%eax
f010b5de:	83 ec 08             	sub    $0x8,%esp
f010b5e1:	50                   	push   %eax
f010b5e2:	68 ca 64 13 f0       	push   $0xf01364ca
f010b5e7:	e8 41 56 ff ff       	call   f0100c2d <cprintf>
f010b5ec:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010b5ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b5f2:	8b 40 40             	mov    0x40(%eax),%eax
f010b5f5:	0f b7 c0             	movzwl %ax,%eax
f010b5f8:	83 ec 08             	sub    $0x8,%esp
f010b5fb:	50                   	push   %eax
f010b5fc:	68 d9 64 13 f0       	push   $0xf01364d9
f010b601:	e8 27 56 ff ff       	call   f0100c2d <cprintf>
f010b606:	83 c4 10             	add    $0x10,%esp
}
f010b609:	90                   	nop
f010b60a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b60d:	c9                   	leave  
f010b60e:	c3                   	ret    

f010b60f <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010b60f:	55                   	push   %ebp
f010b610:	89 e5                	mov    %esp,%ebp
f010b612:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010b615:	8b 45 08             	mov    0x8(%ebp),%eax
f010b618:	8b 00                	mov    (%eax),%eax
f010b61a:	83 ec 08             	sub    $0x8,%esp
f010b61d:	50                   	push   %eax
f010b61e:	68 ec 64 13 f0       	push   $0xf01364ec
f010b623:	e8 05 56 ff ff       	call   f0100c2d <cprintf>
f010b628:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010b62b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b62e:	8b 40 04             	mov    0x4(%eax),%eax
f010b631:	83 ec 08             	sub    $0x8,%esp
f010b634:	50                   	push   %eax
f010b635:	68 fb 64 13 f0       	push   $0xf01364fb
f010b63a:	e8 ee 55 ff ff       	call   f0100c2d <cprintf>
f010b63f:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010b642:	8b 45 08             	mov    0x8(%ebp),%eax
f010b645:	8b 40 08             	mov    0x8(%eax),%eax
f010b648:	83 ec 08             	sub    $0x8,%esp
f010b64b:	50                   	push   %eax
f010b64c:	68 0a 65 13 f0       	push   $0xf013650a
f010b651:	e8 d7 55 ff ff       	call   f0100c2d <cprintf>
f010b656:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010b659:	8b 45 08             	mov    0x8(%ebp),%eax
f010b65c:	8b 40 0c             	mov    0xc(%eax),%eax
f010b65f:	83 ec 08             	sub    $0x8,%esp
f010b662:	50                   	push   %eax
f010b663:	68 19 65 13 f0       	push   $0xf0136519
f010b668:	e8 c0 55 ff ff       	call   f0100c2d <cprintf>
f010b66d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010b670:	8b 45 08             	mov    0x8(%ebp),%eax
f010b673:	8b 40 10             	mov    0x10(%eax),%eax
f010b676:	83 ec 08             	sub    $0x8,%esp
f010b679:	50                   	push   %eax
f010b67a:	68 28 65 13 f0       	push   $0xf0136528
f010b67f:	e8 a9 55 ff ff       	call   f0100c2d <cprintf>
f010b684:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010b687:	8b 45 08             	mov    0x8(%ebp),%eax
f010b68a:	8b 40 14             	mov    0x14(%eax),%eax
f010b68d:	83 ec 08             	sub    $0x8,%esp
f010b690:	50                   	push   %eax
f010b691:	68 37 65 13 f0       	push   $0xf0136537
f010b696:	e8 92 55 ff ff       	call   f0100c2d <cprintf>
f010b69b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010b69e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a1:	8b 40 18             	mov    0x18(%eax),%eax
f010b6a4:	83 ec 08             	sub    $0x8,%esp
f010b6a7:	50                   	push   %eax
f010b6a8:	68 46 65 13 f0       	push   $0xf0136546
f010b6ad:	e8 7b 55 ff ff       	call   f0100c2d <cprintf>
f010b6b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010b6b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6b8:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b6bb:	83 ec 08             	sub    $0x8,%esp
f010b6be:	50                   	push   %eax
f010b6bf:	68 55 65 13 f0       	push   $0xf0136555
f010b6c4:	e8 64 55 ff ff       	call   f0100c2d <cprintf>
f010b6c9:	83 c4 10             	add    $0x10,%esp
}
f010b6cc:	90                   	nop
f010b6cd:	c9                   	leave  
f010b6ce:	c3                   	ret    

f010b6cf <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010b6cf:	55                   	push   %ebp
f010b6d0:	89 e5                	mov    %esp,%ebp
f010b6d2:	57                   	push   %edi
f010b6d3:	56                   	push   %esi
f010b6d4:	53                   	push   %ebx
f010b6d5:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010b6d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6db:	8b 40 28             	mov    0x28(%eax),%eax
f010b6de:	83 f8 0e             	cmp    $0xe,%eax
f010b6e1:	75 29                	jne    f010b70c <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010b6e3:	83 ec 0c             	sub    $0xc,%esp
f010b6e6:	6a 01                	push   $0x1
f010b6e8:	e8 5a 18 00 00       	call   f010cf47 <isPageReplacmentAlgorithmLRU>
f010b6ed:	83 c4 10             	add    $0x10,%esp
f010b6f0:	85 c0                	test   %eax,%eax
f010b6f2:	74 05                	je     f010b6f9 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010b6f4:	e8 bb a1 ff ff       	call   f01058b4 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010b6f9:	83 ec 0c             	sub    $0xc,%esp
f010b6fc:	ff 75 08             	pushl  0x8(%ebp)
f010b6ff:	e8 3b 02 00 00       	call   f010b93f <fault_handler>
f010b704:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b707:	e9 a5 00 00 00       	jmp    f010b7b1 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010b70c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70f:	8b 40 28             	mov    0x28(%eax),%eax
f010b712:	83 f8 30             	cmp    $0x30,%eax
f010b715:	75 42                	jne    f010b759 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010b717:	8b 45 08             	mov    0x8(%ebp),%eax
f010b71a:	8b 78 04             	mov    0x4(%eax),%edi
f010b71d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b720:	8b 30                	mov    (%eax),%esi
f010b722:	8b 45 08             	mov    0x8(%ebp),%eax
f010b725:	8b 58 10             	mov    0x10(%eax),%ebx
f010b728:	8b 45 08             	mov    0x8(%ebp),%eax
f010b72b:	8b 48 18             	mov    0x18(%eax),%ecx
f010b72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b731:	8b 50 14             	mov    0x14(%eax),%edx
f010b734:	8b 45 08             	mov    0x8(%ebp),%eax
f010b737:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b73a:	83 ec 08             	sub    $0x8,%esp
f010b73d:	57                   	push   %edi
f010b73e:	56                   	push   %esi
f010b73f:	53                   	push   %ebx
f010b740:	51                   	push   %ecx
f010b741:	52                   	push   %edx
f010b742:	50                   	push   %eax
f010b743:	e8 4a 0f 00 00       	call   f010c692 <syscall>
f010b748:	83 c4 20             	add    $0x20,%esp
f010b74b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010b74e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b751:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b754:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b757:	eb 58                	jmp    f010b7b1 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010b759:	8b 45 08             	mov    0x8(%ebp),%eax
f010b75c:	8b 40 28             	mov    0x28(%eax),%eax
f010b75f:	83 f8 08             	cmp    $0x8,%eax
f010b762:	75 17                	jne    f010b77b <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010b764:	83 ec 04             	sub    $0x4,%esp
f010b767:	68 64 65 13 f0       	push   $0xf0136564
f010b76c:	68 e7 00 00 00       	push   $0xe7
f010b771:	68 73 65 13 f0       	push   $0xf0136573
f010b776:	e8 2b 4a ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010b77b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b77e:	8b 40 28             	mov    0x28(%eax),%eax
f010b781:	83 f8 20             	cmp    $0x20,%eax
f010b784:	75 07                	jne    f010b78d <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010b786:	e8 08 a1 ff ff       	call   f0105893 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010b78b:	eb 24                	jmp    f010b7b1 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010b78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b790:	8b 40 34             	mov    0x34(%eax),%eax
f010b793:	66 83 f8 08          	cmp    $0x8,%ax
f010b797:	75 17                	jne    f010b7b0 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010b799:	83 ec 04             	sub    $0x4,%esp
f010b79c:	68 84 65 13 f0       	push   $0xf0136584
f010b7a1:	68 f4 00 00 00       	push   $0xf4
f010b7a6:	68 73 65 13 f0       	push   $0xf0136573
f010b7ab:	e8 f6 49 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010b7b0:	90                   	nop
		}
	}
	return;
}
f010b7b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b7b4:	5b                   	pop    %ebx
f010b7b5:	5e                   	pop    %esi
f010b7b6:	5f                   	pop    %edi
f010b7b7:	5d                   	pop    %ebp
f010b7b8:	c3                   	ret    

f010b7b9 <trap>:

void trap(struct Trapframe *tf)
{
f010b7b9:	55                   	push   %ebp
f010b7ba:	89 e5                	mov    %esp,%ebp
f010b7bc:	57                   	push   %edi
f010b7bd:	56                   	push   %esi
f010b7be:	53                   	push   %ebx
f010b7bf:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010b7c2:	e8 e7 88 ff ff       	call   f01040ae <kclock_stop>

	int userTrap = 0;
f010b7c7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010b7ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7d1:	8b 40 34             	mov    0x34(%eax),%eax
f010b7d4:	0f b7 c0             	movzwl %ax,%eax
f010b7d7:	83 e0 03             	and    $0x3,%eax
f010b7da:	83 f8 03             	cmp    $0x3,%eax
f010b7dd:	75 49                	jne    f010b828 <trap+0x6f>
		assert(curenv);
f010b7df:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b7e4:	85 c0                	test   %eax,%eax
f010b7e6:	75 19                	jne    f010b801 <trap+0x48>
f010b7e8:	68 9d 65 13 f0       	push   $0xf013659d
f010b7ed:	68 a4 65 13 f0       	push   $0xf01365a4
f010b7f2:	68 04 01 00 00       	push   $0x104
f010b7f7:	68 73 65 13 f0       	push   $0xf0136573
f010b7fc:	e8 a5 49 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010b801:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010b807:	8b 45 08             	mov    0x8(%ebp),%eax
f010b80a:	89 c3                	mov    %eax,%ebx
f010b80c:	b8 11 00 00 00       	mov    $0x11,%eax
f010b811:	89 d7                	mov    %edx,%edi
f010b813:	89 de                	mov    %ebx,%esi
f010b815:	89 c1                	mov    %eax,%ecx
f010b817:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010b819:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b81e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010b821:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010b828:	8b 45 08             	mov    0x8(%ebp),%eax
f010b82b:	8b 40 28             	mov    0x28(%eax),%eax
f010b82e:	83 f8 20             	cmp    $0x20,%eax
f010b831:	75 40                	jne    f010b873 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010b833:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b837:	0f 84 a6 00 00 00    	je     f010b8e3 <trap+0x12a>
		{
			assert(curenv);
f010b83d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b842:	85 c0                	test   %eax,%eax
f010b844:	75 19                	jne    f010b85f <trap+0xa6>
f010b846:	68 9d 65 13 f0       	push   $0xf013659d
f010b84b:	68 a4 65 13 f0       	push   $0xf01365a4
f010b850:	68 10 01 00 00       	push   $0x110
f010b855:	68 73 65 13 f0       	push   $0xf0136573
f010b85a:	e8 47 49 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010b85f:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b864:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010b86a:	42                   	inc    %edx
f010b86b:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010b871:	eb 70                	jmp    f010b8e3 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010b873:	8b 45 08             	mov    0x8(%ebp),%eax
f010b876:	8b 40 28             	mov    0x28(%eax),%eax
f010b879:	83 f8 0e             	cmp    $0xe,%eax
f010b87c:	75 65                	jne    f010b8e3 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010b87e:	a0 c8 7f 65 f0       	mov    0xf0657fc8,%al
f010b883:	84 c0                	test   %al,%al
f010b885:	74 5c                	je     f010b8e3 <trap+0x12a>
			if (userTrap){
f010b887:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b88b:	74 2c                	je     f010b8b9 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010b88d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b892:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010b898:	8b 52 30             	mov    0x30(%edx),%edx
f010b89b:	89 d1                	mov    %edx,%ecx
f010b89d:	8a 15 c8 7f 65 f0    	mov    0xf0657fc8,%dl
f010b8a3:	0f b6 d2             	movzbl %dl,%edx
f010b8a6:	01 ca                	add    %ecx,%edx
f010b8a8:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010b8ab:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b8b0:	83 ec 0c             	sub    $0xc,%esp
f010b8b3:	50                   	push   %eax
f010b8b4:	e8 5e d4 ff ff       	call   f0108d17 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8bc:	8b 40 30             	mov    0x30(%eax),%eax
f010b8bf:	89 c2                	mov    %eax,%edx
f010b8c1:	a0 c8 7f 65 f0       	mov    0xf0657fc8,%al
f010b8c6:	0f b6 c0             	movzbl %al,%eax
f010b8c9:	01 d0                	add    %edx,%eax
f010b8cb:	89 c2                	mov    %eax,%edx
f010b8cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8d0:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010b8d3:	e8 01 88 ff ff       	call   f01040d9 <kclock_resume>
				env_pop_tf(tf);
f010b8d8:	83 ec 0c             	sub    $0xc,%esp
f010b8db:	ff 75 08             	pushl  0x8(%ebp)
f010b8de:	e8 99 d5 ff ff       	call   f0108e7c <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010b8e3:	83 ec 0c             	sub    $0xc,%esp
f010b8e6:	ff 75 08             	pushl  0x8(%ebp)
f010b8e9:	e8 e1 fd ff ff       	call   f010b6cf <trap_dispatch>
f010b8ee:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010b8f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010b8f5:	74 3d                	je     f010b934 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010b8f7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b8fc:	85 c0                	test   %eax,%eax
f010b8fe:	74 0d                	je     f010b90d <trap+0x154>
f010b900:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b905:	8b 40 54             	mov    0x54(%eax),%eax
f010b908:	83 f8 02             	cmp    $0x2,%eax
f010b90b:	74 19                	je     f010b926 <trap+0x16d>
f010b90d:	68 bc 65 13 f0       	push   $0xf01365bc
f010b912:	68 a4 65 13 f0       	push   $0xf01365a4
f010b917:	68 25 01 00 00       	push   $0x125
f010b91c:	68 73 65 13 f0       	push   $0xf0136573
f010b921:	e8 80 48 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010b926:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b92b:	83 ec 0c             	sub    $0xc,%esp
f010b92e:	50                   	push   %eax
f010b92f:	e8 e3 d3 ff ff       	call   f0108d17 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010b934:	83 ec 0c             	sub    $0xc,%esp
f010b937:	ff 75 08             	pushl  0x8(%ebp)
f010b93a:	e8 3d d5 ff ff       	call   f0108e7c <env_pop_tf>

f010b93f <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010b93f:	55                   	push   %ebp
f010b940:	89 e5                	mov    %esp,%ebp
f010b942:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010b945:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010b94c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b94f:	8b 40 34             	mov    0x34(%eax),%eax
f010b952:	0f b7 c0             	movzwl %ax,%eax
f010b955:	83 e0 03             	and    $0x3,%eax
f010b958:	83 f8 03             	cmp    $0x3,%eax
f010b95b:	75 07                	jne    f010b964 <fault_handler+0x25>
		userTrap = 1;
f010b95d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010b964:	0f 20 d0             	mov    %cr2,%eax
f010b967:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010b96a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010b96d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010b970:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b974:	75 29                	jne    f010b99f <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010b976:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010b97d:	77 40                	ja     f010b9bf <fault_handler+0x80>
f010b97f:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010b986:	76 37                	jbe    f010b9bf <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010b988:	83 ec 04             	sub    $0x4,%esp
f010b98b:	68 ec 65 13 f0       	push   $0xf01365ec
f010b990:	68 42 01 00 00       	push   $0x142
f010b995:	68 73 65 13 f0       	push   $0xf0136573
f010b99a:	e8 07 48 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010b99f:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010b9a6:	76 17                	jbe    f010b9bf <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010b9a8:	83 ec 04             	sub    $0x4,%esp
f010b9ab:	68 10 66 13 f0       	push   $0xf0136610
f010b9b0:	68 48 01 00 00       	push   $0x148
f010b9b5:	68 73 65 13 f0       	push   $0xf0136573
f010b9ba:	e8 e7 47 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010b9bf:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b9c4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010b9c7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010b9cc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b9cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b9d2:	c1 ea 16             	shr    $0x16,%edx
f010b9d5:	c1 e2 02             	shl    $0x2,%edx
f010b9d8:	01 d0                	add    %edx,%eax
f010b9da:	8b 00                	mov    (%eax),%eax
f010b9dc:	83 e0 01             	and    $0x1,%eax
f010b9df:	85 c0                	test   %eax,%eax
f010b9e1:	75 28                	jne    f010ba0b <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010b9e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b9e6:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010b9ec:	8d 50 01             	lea    0x1(%eax),%edx
f010b9ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b9f2:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010b9f8:	83 ec 08             	sub    $0x8,%esp
f010b9fb:	ff 75 ec             	pushl  -0x14(%ebp)
f010b9fe:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba01:	e8 26 16 00 00       	call   f010d02c <table_fault_handler>
f010ba06:	83 c4 10             	add    $0x10,%esp
f010ba09:	eb 42                	jmp    f010ba4d <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ba0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba0e:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010ba14:	8d 50 01             	lea    0x1(%eax),%edx
f010ba17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ba1a:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ba20:	e8 e5 15 00 00       	call   f010d00a <isBufferingEnabled>
f010ba25:	84 c0                	test   %al,%al
f010ba27:	74 13                	je     f010ba3c <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ba29:	83 ec 08             	sub    $0x8,%esp
f010ba2c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ba2f:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba32:	e8 31 16 00 00       	call   f010d068 <__page_fault_handler_with_buffering>
f010ba37:	83 c4 10             	add    $0x10,%esp
f010ba3a:	eb 11                	jmp    f010ba4d <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ba3c:	83 ec 08             	sub    $0x8,%esp
f010ba3f:	ff 75 ec             	pushl  -0x14(%ebp)
f010ba42:	ff 75 e8             	pushl  -0x18(%ebp)
f010ba45:	e8 04 16 00 00       	call   f010d04e <page_fault_handler>
f010ba4a:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ba4d:	0f 20 d8             	mov    %cr3,%eax
f010ba50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ba53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba56:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ba59:	90                   	nop
f010ba5a:	c9                   	leave  
f010ba5b:	c3                   	ret    

f010ba5c <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ba5c:	6a 0e                	push   $0xe
f010ba5e:	e9 ed 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba63:	90                   	nop

f010ba64 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ba64:	6a 00                	push   $0x0
f010ba66:	6a 30                	push   $0x30
f010ba68:	e9 e3 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba6d:	90                   	nop

f010ba6e <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010ba6e:	6a 08                	push   $0x8
f010ba70:	e9 db 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba75:	90                   	nop

f010ba76 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010ba76:	6a 00                	push   $0x0
f010ba78:	6a 00                	push   $0x0
f010ba7a:	e9 d1 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba7f:	90                   	nop

f010ba80 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010ba80:	6a 00                	push   $0x0
f010ba82:	6a 01                	push   $0x1
f010ba84:	e9 c7 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba89:	90                   	nop

f010ba8a <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010ba8a:	6a 00                	push   $0x0
f010ba8c:	6a 02                	push   $0x2
f010ba8e:	e9 bd 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba93:	90                   	nop

f010ba94 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010ba94:	6a 00                	push   $0x0
f010ba96:	6a 03                	push   $0x3
f010ba98:	e9 b3 00 00 00       	jmp    f010bb50 <_alltraps>
f010ba9d:	90                   	nop

f010ba9e <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010ba9e:	6a 00                	push   $0x0
f010baa0:	6a 04                	push   $0x4
f010baa2:	e9 a9 00 00 00       	jmp    f010bb50 <_alltraps>
f010baa7:	90                   	nop

f010baa8 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010baa8:	6a 00                	push   $0x0
f010baaa:	6a 05                	push   $0x5
f010baac:	e9 9f 00 00 00       	jmp    f010bb50 <_alltraps>
f010bab1:	90                   	nop

f010bab2 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010bab2:	6a 00                	push   $0x0
f010bab4:	6a 06                	push   $0x6
f010bab6:	e9 95 00 00 00       	jmp    f010bb50 <_alltraps>
f010babb:	90                   	nop

f010babc <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010babc:	6a 00                	push   $0x0
f010babe:	6a 07                	push   $0x7
f010bac0:	e9 8b 00 00 00       	jmp    f010bb50 <_alltraps>
f010bac5:	90                   	nop

f010bac6 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010bac6:	6a 0a                	push   $0xa
f010bac8:	e9 83 00 00 00       	jmp    f010bb50 <_alltraps>
f010bacd:	90                   	nop

f010bace <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010bace:	6a 0b                	push   $0xb
f010bad0:	eb 7e                	jmp    f010bb50 <_alltraps>

f010bad2 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010bad2:	6a 0c                	push   $0xc
f010bad4:	eb 7a                	jmp    f010bb50 <_alltraps>

f010bad6 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010bad6:	6a 0d                	push   $0xd
f010bad8:	eb 76                	jmp    f010bb50 <_alltraps>

f010bada <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010bada:	6a 00                	push   $0x0
f010badc:	6a 10                	push   $0x10
f010bade:	eb 70                	jmp    f010bb50 <_alltraps>

f010bae0 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010bae0:	6a 11                	push   $0x11
f010bae2:	eb 6c                	jmp    f010bb50 <_alltraps>

f010bae4 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010bae4:	6a 00                	push   $0x0
f010bae6:	6a 12                	push   $0x12
f010bae8:	eb 66                	jmp    f010bb50 <_alltraps>

f010baea <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010baea:	6a 00                	push   $0x0
f010baec:	6a 13                	push   $0x13
f010baee:	eb 60                	jmp    f010bb50 <_alltraps>

f010baf0 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010baf0:	6a 00                	push   $0x0
f010baf2:	6a 20                	push   $0x20
f010baf4:	eb 5a                	jmp    f010bb50 <_alltraps>

f010baf6 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010baf6:	6a 00                	push   $0x0
f010baf8:	6a 21                	push   $0x21
f010bafa:	eb 54                	jmp    f010bb50 <_alltraps>

f010bafc <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010bafc:	6a 00                	push   $0x0
f010bafe:	6a 22                	push   $0x22
f010bb00:	eb 4e                	jmp    f010bb50 <_alltraps>

f010bb02 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010bb02:	6a 00                	push   $0x0
f010bb04:	6a 23                	push   $0x23
f010bb06:	eb 48                	jmp    f010bb50 <_alltraps>

f010bb08 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010bb08:	6a 00                	push   $0x0
f010bb0a:	6a 24                	push   $0x24
f010bb0c:	eb 42                	jmp    f010bb50 <_alltraps>

f010bb0e <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010bb0e:	6a 00                	push   $0x0
f010bb10:	6a 25                	push   $0x25
f010bb12:	eb 3c                	jmp    f010bb50 <_alltraps>

f010bb14 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010bb14:	6a 00                	push   $0x0
f010bb16:	6a 26                	push   $0x26
f010bb18:	eb 36                	jmp    f010bb50 <_alltraps>

f010bb1a <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010bb1a:	6a 00                	push   $0x0
f010bb1c:	6a 27                	push   $0x27
f010bb1e:	eb 30                	jmp    f010bb50 <_alltraps>

f010bb20 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010bb20:	6a 00                	push   $0x0
f010bb22:	6a 28                	push   $0x28
f010bb24:	eb 2a                	jmp    f010bb50 <_alltraps>

f010bb26 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010bb26:	6a 00                	push   $0x0
f010bb28:	6a 29                	push   $0x29
f010bb2a:	eb 24                	jmp    f010bb50 <_alltraps>

f010bb2c <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010bb2c:	6a 00                	push   $0x0
f010bb2e:	6a 2a                	push   $0x2a
f010bb30:	eb 1e                	jmp    f010bb50 <_alltraps>

f010bb32 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010bb32:	6a 00                	push   $0x0
f010bb34:	6a 2b                	push   $0x2b
f010bb36:	eb 18                	jmp    f010bb50 <_alltraps>

f010bb38 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010bb38:	6a 00                	push   $0x0
f010bb3a:	6a 2c                	push   $0x2c
f010bb3c:	eb 12                	jmp    f010bb50 <_alltraps>

f010bb3e <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010bb3e:	6a 00                	push   $0x0
f010bb40:	6a 2d                	push   $0x2d
f010bb42:	eb 0c                	jmp    f010bb50 <_alltraps>

f010bb44 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010bb44:	6a 00                	push   $0x0
f010bb46:	6a 2e                	push   $0x2e
f010bb48:	eb 06                	jmp    f010bb50 <_alltraps>

f010bb4a <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010bb4a:	6a 00                	push   $0x0
f010bb4c:	6a 2f                	push   $0x2f
f010bb4e:	eb 00                	jmp    f010bb50 <_alltraps>

f010bb50 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010bb50:	1e                   	push   %ds
push %es
f010bb51:	06                   	push   %es
pushal
f010bb52:	60                   	pusha  

mov $(GD_KD), %ax
f010bb53:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010bb57:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010bb59:	8e c0                	mov    %eax,%es

push %esp
f010bb5b:	54                   	push   %esp

call trap
f010bb5c:	e8 58 fc ff ff       	call   f010b7b9 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010bb61:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010bb62:	61                   	popa   
pop %es
f010bb63:	07                   	pop    %es
pop %ds
f010bb64:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010bb65:	83 c4 08             	add    $0x8,%esp

iret
f010bb68:	cf                   	iret   

f010bb69 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010bb69:	55                   	push   %ebp
f010bb6a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010bb6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb6f:	8b 15 b0 74 6e f0    	mov    0xf06e74b0,%edx
f010bb75:	29 d0                	sub    %edx,%eax
f010bb77:	c1 f8 03             	sar    $0x3,%eax
f010bb7a:	89 c2                	mov    %eax,%edx
f010bb7c:	89 d0                	mov    %edx,%eax
f010bb7e:	c1 e0 02             	shl    $0x2,%eax
f010bb81:	01 d0                	add    %edx,%eax
f010bb83:	c1 e0 02             	shl    $0x2,%eax
f010bb86:	01 d0                	add    %edx,%eax
f010bb88:	c1 e0 02             	shl    $0x2,%eax
f010bb8b:	01 d0                	add    %edx,%eax
f010bb8d:	89 c1                	mov    %eax,%ecx
f010bb8f:	c1 e1 08             	shl    $0x8,%ecx
f010bb92:	01 c8                	add    %ecx,%eax
f010bb94:	89 c1                	mov    %eax,%ecx
f010bb96:	c1 e1 10             	shl    $0x10,%ecx
f010bb99:	01 c8                	add    %ecx,%eax
f010bb9b:	01 c0                	add    %eax,%eax
f010bb9d:	01 d0                	add    %edx,%eax
}
f010bb9f:	5d                   	pop    %ebp
f010bba0:	c3                   	ret    

f010bba1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010bba1:	55                   	push   %ebp
f010bba2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010bba4:	ff 75 08             	pushl  0x8(%ebp)
f010bba7:	e8 bd ff ff ff       	call   f010bb69 <to_frame_number>
f010bbac:	83 c4 04             	add    $0x4,%esp
f010bbaf:	c1 e0 0c             	shl    $0xc,%eax
}
f010bbb2:	c9                   	leave  
f010bbb3:	c3                   	ret    

f010bbb4 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010bbb4:	55                   	push   %ebp
f010bbb5:	89 e5                	mov    %esp,%ebp
f010bbb7:	83 ec 18             	sub    $0x18,%esp
f010bbba:	8b 45 10             	mov    0x10(%ebp),%eax
f010bbbd:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010bbc0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010bbc4:	74 26                	je     f010bbec <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010bbc6:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bbcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bbce:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bbd4:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010bbda:	83 ec 04             	sub    $0x4,%esp
f010bbdd:	50                   	push   %eax
f010bbde:	52                   	push   %edx
f010bbdf:	68 d0 67 13 f0       	push   $0xf01367d0
f010bbe4:	e8 44 50 ff ff       	call   f0100c2d <cprintf>
f010bbe9:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010bbec:	83 ec 04             	sub    $0x4,%esp
f010bbef:	ff 75 08             	pushl  0x8(%ebp)
f010bbf2:	ff 75 0c             	pushl  0xc(%ebp)
f010bbf5:	68 d9 67 13 f0       	push   $0xf01367d9
f010bbfa:	e8 2e 50 ff ff       	call   f0100c2d <cprintf>
f010bbff:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010bc02:	90                   	nop
f010bc03:	c9                   	leave  
f010bc04:	c3                   	ret    

f010bc05 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010bc05:	55                   	push   %ebp
f010bc06:	89 e5                	mov    %esp,%ebp
f010bc08:	83 ec 18             	sub    $0x18,%esp
f010bc0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc0e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010bc11:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010bc15:	83 ec 08             	sub    $0x8,%esp
f010bc18:	50                   	push   %eax
f010bc19:	68 de 67 13 f0       	push   $0xf01367de
f010bc1e:	e8 0a 50 ff ff       	call   f0100c2d <cprintf>
f010bc23:	83 c4 10             	add    $0x10,%esp
}
f010bc26:	90                   	nop
f010bc27:	c9                   	leave  
f010bc28:	c3                   	ret    

f010bc29 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010bc29:	55                   	push   %ebp
f010bc2a:	89 e5                	mov    %esp,%ebp
f010bc2c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010bc2f:	e8 33 4e ff ff       	call   f0100a67 <cons_getc2>
f010bc34:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010bc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bc3a:	c9                   	leave  
f010bc3b:	c3                   	ret    

f010bc3c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010bc3c:	55                   	push   %ebp
f010bc3d:	89 e5                	mov    %esp,%ebp
f010bc3f:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010bc42:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bc47:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010bc4a:	83 ec 0c             	sub    $0xc,%esp
f010bc4d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010bc50:	50                   	push   %eax
f010bc51:	e8 54 ab ff ff       	call   f01067aa <allocate_frame>
f010bc56:	83 c4 10             	add    $0x10,%esp
f010bc59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bc5c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bc60:	75 08                	jne    f010bc6a <__sys_allocate_page+0x2e>
		return r ;
f010bc62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc65:	e9 d0 00 00 00       	jmp    f010bd3a <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010bc6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc6d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010bc72:	77 0c                	ja     f010bc80 <__sys_allocate_page+0x44>
f010bc74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc77:	25 ff 0f 00 00       	and    $0xfff,%eax
f010bc7c:	85 c0                	test   %eax,%eax
f010bc7e:	74 0a                	je     f010bc8a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010bc80:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bc85:	e9 b0 00 00 00       	jmp    f010bd3a <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010bc8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc8d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010bc92:	83 f8 04             	cmp    $0x4,%eax
f010bc95:	74 0a                	je     f010bca1 <__sys_allocate_page+0x65>
		return E_INVAL;
f010bc97:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bc9c:	e9 99 00 00 00       	jmp    f010bd3a <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010bca1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bca4:	83 ec 0c             	sub    $0xc,%esp
f010bca7:	50                   	push   %eax
f010bca8:	e8 f4 fe ff ff       	call   f010bba1 <to_physical_address>
f010bcad:	83 c4 10             	add    $0x10,%esp
f010bcb0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010bcb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010bcb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bcbc:	c1 e8 0c             	shr    $0xc,%eax
f010bcbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010bcc2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f010bcc7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010bcca:	72 17                	jb     f010bce3 <__sys_allocate_page+0xa7>
f010bccc:	ff 75 e8             	pushl  -0x18(%ebp)
f010bccf:	68 e4 67 13 f0       	push   $0xf01367e4
f010bcd4:	68 8c 00 00 00       	push   $0x8c
f010bcd9:	68 13 68 13 f0       	push   $0xf0136813
f010bcde:	e8 c3 44 ff ff       	call   f01001a6 <_panic>
f010bce3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bce6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010bceb:	83 ec 04             	sub    $0x4,%esp
f010bcee:	68 00 10 00 00       	push   $0x1000
f010bcf3:	6a 00                	push   $0x0
f010bcf5:	50                   	push   %eax
f010bcf6:	e8 58 45 02 00       	call   f0130253 <memset>
f010bcfb:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010bcfe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010bd01:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010bd04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd07:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bd0a:	ff 75 0c             	pushl  0xc(%ebp)
f010bd0d:	51                   	push   %ecx
f010bd0e:	52                   	push   %edx
f010bd0f:	50                   	push   %eax
f010bd10:	e8 2d ae ff ff       	call   f0106b42 <map_frame>
f010bd15:	83 c4 10             	add    $0x10,%esp
f010bd18:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bd1b:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bd1f:	75 14                	jne    f010bd35 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010bd21:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd24:	83 ec 0c             	sub    $0xc,%esp
f010bd27:	50                   	push   %eax
f010bd28:	e8 0c ac ff ff       	call   f0106939 <decrement_references>
f010bd2d:	83 c4 10             	add    $0x10,%esp
		return r;
f010bd30:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bd33:	eb 05                	jmp    f010bd3a <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010bd35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bd3a:	c9                   	leave  
f010bd3b:	c3                   	ret    

f010bd3c <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010bd3c:	55                   	push   %ebp
f010bd3d:	89 e5                	mov    %esp,%ebp
f010bd3f:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010bd42:	83 ec 04             	sub    $0x4,%esp
f010bd45:	68 27 68 13 f0       	push   $0xf0136827
f010bd4a:	68 b3 00 00 00       	push   $0xb3
f010bd4f:	68 13 68 13 f0       	push   $0xf0136813
f010bd54:	e8 4d 44 ff ff       	call   f01001a6 <_panic>

f010bd59 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010bd59:	55                   	push   %ebp
f010bd5a:	89 e5                	mov    %esp,%ebp
f010bd5c:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010bd5f:	83 ec 04             	sub    $0x4,%esp
f010bd62:	68 48 68 13 f0       	push   $0xf0136848
f010bd67:	68 c3 00 00 00       	push   $0xc3
f010bd6c:	68 13 68 13 f0       	push   $0xf0136813
f010bd71:	e8 30 44 ff ff       	call   f01001a6 <_panic>

f010bd76 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010bd76:	55                   	push   %ebp
f010bd77:	89 e5                	mov    %esp,%ebp
f010bd79:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010bd7c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bd81:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bd84:	83 ec 04             	sub    $0x4,%esp
f010bd87:	ff 75 0c             	pushl  0xc(%ebp)
f010bd8a:	ff 75 08             	pushl  0x8(%ebp)
f010bd8d:	50                   	push   %eax
f010bd8e:	e8 e6 c1 ff ff       	call   f0107f79 <calculate_required_frames>
f010bd93:	83 c4 10             	add    $0x10,%esp
}
f010bd96:	c9                   	leave  
f010bd97:	c3                   	ret    

f010bd98 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010bd98:	55                   	push   %ebp
f010bd99:	89 e5                	mov    %esp,%ebp
f010bd9b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010bd9e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bda1:	83 ec 0c             	sub    $0xc,%esp
f010bda4:	50                   	push   %eax
f010bda5:	e8 08 b0 ff ff       	call   f0106db2 <calculate_available_frames>
f010bdaa:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010bdad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bdb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bdb3:	01 d0                	add    %edx,%eax
}
f010bdb5:	c9                   	leave  
f010bdb6:	c3                   	ret    

f010bdb7 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010bdb7:	55                   	push   %ebp
f010bdb8:	89 e5                	mov    %esp,%ebp
f010bdba:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010bdbd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bdc0:	83 ec 0c             	sub    $0xc,%esp
f010bdc3:	50                   	push   %eax
f010bdc4:	e8 e9 af ff ff       	call   f0106db2 <calculate_available_frames>
f010bdc9:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010bdcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bdcf:	c9                   	leave  
f010bdd0:	c3                   	ret    

f010bdd1 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010bdd1:	55                   	push   %ebp
f010bdd2:	89 e5                	mov    %esp,%ebp
f010bdd4:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010bdd7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bdda:	83 ec 0c             	sub    $0xc,%esp
f010bddd:	50                   	push   %eax
f010bdde:	e8 cf af ff ff       	call   f0106db2 <calculate_available_frames>
f010bde3:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010bde6:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010bde9:	c9                   	leave  
f010bdea:	c3                   	ret    

f010bdeb <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010bdeb:	55                   	push   %ebp
f010bdec:	89 e5                	mov    %esp,%ebp
f010bdee:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010bdf1:	83 ec 0c             	sub    $0xc,%esp
f010bdf4:	ff 75 08             	pushl  0x8(%ebp)
f010bdf7:	e8 8d 31 02 00       	call   f012ef89 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010bdfc:	83 c4 10             	add    $0x10,%esp
}
f010bdff:	c9                   	leave  
f010be00:	c3                   	ret    

f010be01 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010be01:	55                   	push   %ebp
f010be02:	89 e5                	mov    %esp,%ebp
f010be04:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010be07:	e8 d5 30 02 00       	call   f012eee1 <scarce_memory>
}
f010be0c:	90                   	nop
f010be0d:	c9                   	leave  
f010be0e:	c3                   	ret    

f010be0f <sys_clearFFL>:

void sys_clearFFL()
{
f010be0f:	55                   	push   %ebp
f010be10:	89 e5                	mov    %esp,%ebp
f010be12:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010be15:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f010be1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010be1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010be24:	eb 12                	jmp    f010be38 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010be26:	83 ec 0c             	sub    $0xc,%esp
f010be29:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010be2c:	50                   	push   %eax
f010be2d:	e8 78 a9 ff ff       	call   f01067aa <allocate_frame>
f010be32:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010be35:	ff 45 f4             	incl   -0xc(%ebp)
f010be38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010be3e:	7c e6                	jl     f010be26 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010be40:	90                   	nop
f010be41:	c9                   	leave  
f010be42:	c3                   	ret    

f010be43 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010be43:	55                   	push   %ebp
f010be44:	89 e5                	mov    %esp,%ebp
f010be46:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010be49:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010be4e:	83 ec 0c             	sub    $0xc,%esp
f010be51:	50                   	push   %eax
f010be52:	e8 64 7d ff ff       	call   f0103bbb <pf_calculate_allocated_pages>
f010be57:	83 c4 10             	add    $0x10,%esp
}
f010be5a:	c9                   	leave  
f010be5b:	c3                   	ret    

f010be5c <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010be5c:	55                   	push   %ebp
f010be5d:	89 e5                	mov    %esp,%ebp
f010be5f:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010be62:	e8 a3 11 00 00       	call   f010d00a <isBufferingEnabled>
f010be67:	84 c0                	test   %al,%al
f010be69:	74 19                	je     f010be84 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010be6b:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010be70:	83 ec 04             	sub    $0x4,%esp
f010be73:	ff 75 0c             	pushl  0xc(%ebp)
f010be76:	ff 75 08             	pushl  0x8(%ebp)
f010be79:	50                   	push   %eax
f010be7a:	e8 48 c1 ff ff       	call   f0107fc7 <__free_user_mem_with_buffering>
f010be7f:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010be82:	eb 18                	jmp    f010be9c <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010be84:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010be89:	83 ec 04             	sub    $0x4,%esp
f010be8c:	ff 75 0c             	pushl  0xc(%ebp)
f010be8f:	ff 75 08             	pushl  0x8(%ebp)
f010be92:	50                   	push   %eax
f010be93:	e8 15 c1 ff ff       	call   f0107fad <free_user_mem>
f010be98:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010be9b:	90                   	nop
}
f010be9c:	c9                   	leave  
f010be9d:	c3                   	ret    

f010be9e <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010be9e:	55                   	push   %ebp
f010be9f:	89 e5                	mov    %esp,%ebp
f010bea1:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010bea4:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bea9:	83 ec 04             	sub    $0x4,%esp
f010beac:	ff 75 0c             	pushl  0xc(%ebp)
f010beaf:	ff 75 08             	pushl  0x8(%ebp)
f010beb2:	50                   	push   %eax
f010beb3:	e8 db c0 ff ff       	call   f0107f93 <allocate_user_mem>
f010beb8:	83 c4 10             	add    $0x10,%esp
	return;
f010bebb:	90                   	nop
}
f010bebc:	c9                   	leave  
f010bebd:	c3                   	ret    

f010bebe <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010bebe:	55                   	push   %ebp
f010bebf:	89 e5                	mov    %esp,%ebp
f010bec1:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010bec4:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bec9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010becc:	ff 75 10             	pushl  0x10(%ebp)
f010becf:	ff 75 0c             	pushl  0xc(%ebp)
f010bed2:	ff 75 08             	pushl  0x8(%ebp)
f010bed5:	50                   	push   %eax
f010bed6:	e8 6a c0 ff ff       	call   f0107f45 <allocate_chunk>
f010bedb:	83 c4 10             	add    $0x10,%esp
	return;
f010bede:	90                   	nop
}
f010bedf:	c9                   	leave  
f010bee0:	c3                   	ret    

f010bee1 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010bee1:	55                   	push   %ebp
f010bee2:	89 e5                	mov    %esp,%ebp
f010bee4:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010bee7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010beec:	ff 75 10             	pushl  0x10(%ebp)
f010beef:	ff 75 0c             	pushl  0xc(%ebp)
f010bef2:	ff 75 08             	pushl  0x8(%ebp)
f010bef5:	50                   	push   %eax
f010bef6:	e8 e9 c0 ff ff       	call   f0107fe4 <move_user_mem>
f010befb:	83 c4 10             	add    $0x10,%esp
	return;
f010befe:	90                   	nop
}
f010beff:	c9                   	leave  
f010bf00:	c3                   	ret    

f010bf01 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010bf01:	55                   	push   %ebp
f010bf02:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010bf04:	a1 8c 74 6e f0       	mov    0xf06e748c,%eax
}
f010bf09:	5d                   	pop    %ebp
f010bf0a:	c3                   	ret    

f010bf0b <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010bf0b:	55                   	push   %ebp
f010bf0c:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010bf0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf11:	a3 8c 74 6e f0       	mov    %eax,0xf06e748c
}
f010bf16:	90                   	nop
f010bf17:	5d                   	pop    %ebp
f010bf18:	c3                   	ret    

f010bf19 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010bf19:	55                   	push   %ebp
f010bf1a:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010bf1c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf21:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bf27:	8b 52 38             	mov    0x38(%edx),%edx
f010bf2a:	80 e6 fd             	and    $0xfd,%dh
f010bf2d:	89 50 38             	mov    %edx,0x38(%eax)
}
f010bf30:	90                   	nop
f010bf31:	5d                   	pop    %ebp
f010bf32:	c3                   	ret    

f010bf33 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010bf33:	55                   	push   %ebp
f010bf34:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010bf36:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf3b:	8b 15 34 77 65 f0    	mov    0xf0657734,%edx
f010bf41:	8b 52 38             	mov    0x38(%edx),%edx
f010bf44:	80 ce 02             	or     $0x2,%dh
f010bf47:	89 50 38             	mov    %edx,0x38(%eax)
}
f010bf4a:	90                   	nop
f010bf4b:	5d                   	pop    %ebp
f010bf4c:	c3                   	ret    

f010bf4d <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010bf4d:	55                   	push   %ebp
f010bf4e:	89 e5                	mov    %esp,%ebp
f010bf50:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010bf53:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010bf58:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bf5b:	83 ec 04             	sub    $0x4,%esp
f010bf5e:	ff 75 0c             	pushl  0xc(%ebp)
f010bf61:	ff 75 08             	pushl  0x8(%ebp)
f010bf64:	50                   	push   %eax
f010bf65:	e8 de 13 00 00       	call   f010d348 <createSemaphore>
f010bf6a:	83 c4 10             	add    $0x10,%esp
}
f010bf6d:	c9                   	leave  
f010bf6e:	c3                   	ret    

f010bf6f <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010bf6f:	55                   	push   %ebp
f010bf70:	89 e5                	mov    %esp,%ebp
f010bf72:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010bf75:	83 ec 08             	sub    $0x8,%esp
f010bf78:	ff 75 0c             	pushl  0xc(%ebp)
f010bf7b:	ff 75 08             	pushl  0x8(%ebp)
f010bf7e:	e8 e2 13 00 00       	call   f010d365 <waitSemaphore>
f010bf83:	83 c4 10             	add    $0x10,%esp
}
f010bf86:	90                   	nop
f010bf87:	c9                   	leave  
f010bf88:	c3                   	ret    

f010bf89 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010bf89:	55                   	push   %ebp
f010bf8a:	89 e5                	mov    %esp,%ebp
f010bf8c:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010bf8f:	83 ec 08             	sub    $0x8,%esp
f010bf92:	ff 75 0c             	pushl  0xc(%ebp)
f010bf95:	ff 75 08             	pushl  0x8(%ebp)
f010bf98:	e8 e5 13 00 00       	call   f010d382 <signalSemaphore>
f010bf9d:	83 c4 10             	add    $0x10,%esp
}
f010bfa0:	90                   	nop
f010bfa1:	c9                   	leave  
f010bfa2:	c3                   	ret    

f010bfa3 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010bfa3:	55                   	push   %ebp
f010bfa4:	89 e5                	mov    %esp,%ebp
f010bfa6:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010bfa9:	83 ec 08             	sub    $0x8,%esp
f010bfac:	ff 75 0c             	pushl  0xc(%ebp)
f010bfaf:	ff 75 08             	pushl  0x8(%ebp)
f010bfb2:	e8 37 12 00 00       	call   f010d1ee <get_semaphore_object_ID>
f010bfb7:	83 c4 10             	add    $0x10,%esp
f010bfba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010bfbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bfc1:	78 06                	js     f010bfc9 <sys_getSemaphoreValue+0x26>
f010bfc3:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010bfc7:	7e 19                	jle    f010bfe2 <sys_getSemaphoreValue+0x3f>
f010bfc9:	68 68 68 13 f0       	push   $0xf0136868
f010bfce:	68 8d 68 13 f0       	push   $0xf013688d
f010bfd3:	68 4a 01 00 00       	push   $0x14a
f010bfd8:	68 13 68 13 f0       	push   $0xf0136813
f010bfdd:	e8 c4 41 ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010bfe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe5:	89 d0                	mov    %edx,%eax
f010bfe7:	c1 e0 02             	shl    $0x2,%eax
f010bfea:	01 d0                	add    %edx,%eax
f010bfec:	01 c0                	add    %eax,%eax
f010bfee:	01 d0                	add    %edx,%eax
f010bff0:	01 c0                	add    %eax,%eax
f010bff2:	01 d0                	add    %edx,%eax
f010bff4:	c1 e0 02             	shl    $0x2,%eax
f010bff7:	05 d4 50 6e f0       	add    $0xf06e50d4,%eax
f010bffc:	8b 00                	mov    (%eax),%eax
}
f010bffe:	c9                   	leave  
f010bfff:	c3                   	ret    

f010c000 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c000:	55                   	push   %ebp
f010c001:	89 e5                	mov    %esp,%ebp
f010c003:	83 ec 18             	sub    $0x18,%esp
f010c006:	8b 45 10             	mov    0x10(%ebp),%eax
f010c009:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c00c:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c010:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c015:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c018:	83 ec 0c             	sub    $0xc,%esp
f010c01b:	ff 75 14             	pushl  0x14(%ebp)
f010c01e:	52                   	push   %edx
f010c01f:	ff 75 0c             	pushl  0xc(%ebp)
f010c022:	ff 75 08             	pushl  0x8(%ebp)
f010c025:	50                   	push   %eax
f010c026:	e8 15 b3 ff ff       	call   f0107340 <createSharedObject>
f010c02b:	83 c4 20             	add    $0x20,%esp
}
f010c02e:	c9                   	leave  
f010c02f:	c3                   	ret    

f010c030 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c030:	55                   	push   %ebp
f010c031:	89 e5                	mov    %esp,%ebp
f010c033:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c036:	83 ec 08             	sub    $0x8,%esp
f010c039:	ff 75 0c             	pushl  0xc(%ebp)
f010c03c:	ff 75 08             	pushl  0x8(%ebp)
f010c03f:	e8 1f b3 ff ff       	call   f0107363 <getSizeOfSharedObject>
f010c044:	83 c4 10             	add    $0x10,%esp
}
f010c047:	c9                   	leave  
f010c048:	c3                   	ret    

f010c049 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c049:	55                   	push   %ebp
f010c04a:	89 e5                	mov    %esp,%ebp
f010c04c:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c04f:	83 ec 04             	sub    $0x4,%esp
f010c052:	ff 75 10             	pushl  0x10(%ebp)
f010c055:	ff 75 0c             	pushl  0xc(%ebp)
f010c058:	ff 75 08             	pushl  0x8(%ebp)
f010c05b:	e8 20 b3 ff ff       	call   f0107380 <getSharedObject>
f010c060:	83 c4 10             	add    $0x10,%esp
}
f010c063:	c9                   	leave  
f010c064:	c3                   	ret    

f010c065 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c065:	55                   	push   %ebp
f010c066:	89 e5                	mov    %esp,%ebp
f010c068:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c06b:	83 ec 08             	sub    $0x8,%esp
f010c06e:	ff 75 0c             	pushl  0xc(%ebp)
f010c071:	ff 75 08             	pushl  0x8(%ebp)
f010c074:	e8 24 b3 ff ff       	call   f010739d <freeSharedObject>
f010c079:	83 c4 10             	add    $0x10,%esp
}
f010c07c:	c9                   	leave  
f010c07d:	c3                   	ret    

f010c07e <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c07e:	55                   	push   %ebp
f010c07f:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c081:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c086:	5d                   	pop    %ebp
f010c087:	c3                   	ret    

f010c088 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c088:	55                   	push   %ebp
f010c089:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c08b:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c090:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c093:	5d                   	pop    %ebp
f010c094:	c3                   	ret    

f010c095 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c095:	55                   	push   %ebp
f010c096:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c098:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c09d:	89 c2                	mov    %eax,%edx
f010c09f:	a1 30 77 65 f0       	mov    0xf0657730,%eax
f010c0a4:	29 c2                	sub    %eax,%edx
f010c0a6:	89 d0                	mov    %edx,%eax
f010c0a8:	c1 f8 03             	sar    $0x3,%eax
f010c0ab:	89 c2                	mov    %eax,%edx
f010c0ad:	89 d0                	mov    %edx,%eax
f010c0af:	c1 e0 03             	shl    $0x3,%eax
f010c0b2:	01 d0                	add    %edx,%eax
f010c0b4:	c1 e0 03             	shl    $0x3,%eax
f010c0b7:	01 d0                	add    %edx,%eax
f010c0b9:	01 c0                	add    %eax,%eax
f010c0bb:	01 d0                	add    %edx,%eax
f010c0bd:	01 c0                	add    %eax,%eax
f010c0bf:	01 d0                	add    %edx,%eax
f010c0c1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c0c8:	01 c8                	add    %ecx,%eax
f010c0ca:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c0d1:	01 c8                	add    %ecx,%eax
f010c0d3:	c1 e0 02             	shl    $0x2,%eax
f010c0d6:	01 d0                	add    %edx,%eax
f010c0d8:	01 c0                	add    %eax,%eax
f010c0da:	01 d0                	add    %edx,%eax
f010c0dc:	01 c0                	add    %eax,%eax
f010c0de:	01 d0                	add    %edx,%eax
f010c0e0:	c1 e0 02             	shl    $0x2,%eax
f010c0e3:	01 d0                	add    %edx,%eax
f010c0e5:	01 c0                	add    %eax,%eax
f010c0e7:	01 d0                	add    %edx,%eax
f010c0e9:	c1 e0 09             	shl    $0x9,%eax
f010c0ec:	29 d0                	sub    %edx,%eax
f010c0ee:	c1 e0 02             	shl    $0x2,%eax
f010c0f1:	01 d0                	add    %edx,%eax
}
f010c0f3:	5d                   	pop    %ebp
f010c0f4:	c3                   	ret    

f010c0f5 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c0f5:	55                   	push   %ebp
f010c0f6:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c0f8:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c0fd:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c100:	5d                   	pop    %ebp
f010c101:	c3                   	ret    

f010c102 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c102:	55                   	push   %ebp
f010c103:	89 e5                	mov    %esp,%ebp
f010c105:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c108:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c10c:	75 0a                	jne    f010c118 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c10e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c113:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c116:	eb 22                	jmp    f010c13a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c118:	83 ec 04             	sub    $0x4,%esp
f010c11b:	6a 00                	push   $0x0
f010c11d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c120:	50                   	push   %eax
f010c121:	ff 75 08             	pushl  0x8(%ebp)
f010c124:	e8 7e cc ff ff       	call   f0108da7 <envid2env>
f010c129:	83 c4 10             	add    $0x10,%esp
f010c12c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c12f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c133:	79 05                	jns    f010c13a <sys_destroy_env+0x38>
	{
		return r;
f010c135:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c138:	eb 5e                	jmp    f010c198 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c13a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c13d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c142:	39 c2                	cmp    %eax,%edx
f010c144:	75 1b                	jne    f010c161 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c146:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c14b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c14e:	83 ec 08             	sub    $0x8,%esp
f010c151:	50                   	push   %eax
f010c152:	68 a2 68 13 f0       	push   $0xf01368a2
f010c157:	e8 d1 4a ff ff       	call   f0100c2d <cprintf>
f010c15c:	83 c4 10             	add    $0x10,%esp
f010c15f:	eb 20                	jmp    f010c181 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c161:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c164:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c167:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c16c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c16f:	83 ec 04             	sub    $0x4,%esp
f010c172:	52                   	push   %edx
f010c173:	50                   	push   %eax
f010c174:	68 bd 68 13 f0       	push   $0xf01368bd
f010c179:	e8 af 4a ff ff       	call   f0100c2d <cprintf>
f010c17e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c181:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c184:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c187:	83 ec 0c             	sub    $0xc,%esp
f010c18a:	50                   	push   %eax
f010c18b:	e8 30 93 ff ff       	call   f01054c0 <sched_kill_env>
f010c190:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c193:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c198:	c9                   	leave  
f010c199:	c3                   	ret    

f010c19a <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c19a:	55                   	push   %ebp
f010c19b:	89 e5                	mov    %esp,%ebp
f010c19d:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c1a0:	e8 e3 cb ff ff       	call   f0108d88 <env_exit>
	//env_run_cmd_prmpt();
}
f010c1a5:	90                   	nop
f010c1a6:	c9                   	leave  
f010c1a7:	c3                   	ret    

f010c1a8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c1a8:	55                   	push   %ebp
f010c1a9:	89 e5                	mov    %esp,%ebp
f010c1ab:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c1ae:	ff 75 14             	pushl  0x14(%ebp)
f010c1b1:	ff 75 10             	pushl  0x10(%ebp)
f010c1b4:	ff 75 0c             	pushl  0xc(%ebp)
f010c1b7:	ff 75 08             	pushl  0x8(%ebp)
f010c1ba:	e8 8d be ff ff       	call   f010804c <env_create>
f010c1bf:	83 c4 10             	add    $0x10,%esp
f010c1c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c1c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c1c9:	75 07                	jne    f010c1d2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c1cb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c1d0:	eb 14                	jmp    f010c1e6 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c1d2:	83 ec 0c             	sub    $0xc,%esp
f010c1d5:	ff 75 f4             	pushl  -0xc(%ebp)
f010c1d8:	e8 9a 8e ff ff       	call   f0105077 <sched_new_env>
f010c1dd:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c1e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1e3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c1e6:	c9                   	leave  
f010c1e7:	c3                   	ret    

f010c1e8 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c1e8:	55                   	push   %ebp
f010c1e9:	89 e5                	mov    %esp,%ebp
f010c1eb:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c1ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1f1:	83 ec 0c             	sub    $0xc,%esp
f010c1f4:	50                   	push   %eax
f010c1f5:	e8 9a 8e ff ff       	call   f0105094 <sched_run_env>
f010c1fa:	83 c4 10             	add    $0x10,%esp
}
f010c1fd:	90                   	nop
f010c1fe:	c9                   	leave  
f010c1ff:	c3                   	ret    

f010c200 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c200:	55                   	push   %ebp
f010c201:	89 e5                	mov    %esp,%ebp
f010c203:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c206:	0f 31                	rdtsc  
f010c208:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c20b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c20e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c211:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c214:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c217:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c21a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c21d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c220:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c223:	89 01                	mov    %eax,(%ecx)
f010c225:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c228:	8b 45 08             	mov    0x8(%ebp),%eax
f010c22b:	c9                   	leave  
f010c22c:	c2 04 00             	ret    $0x4

f010c22f <sys_rcr2>:

uint32 sys_rcr2()
{
f010c22f:	55                   	push   %ebp
f010c230:	89 e5                	mov    %esp,%ebp
f010c232:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c235:	0f 20 d0             	mov    %cr2,%eax
f010c238:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c23b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c23e:	90                   	nop
}
f010c23f:	c9                   	leave  
f010c240:	c3                   	ret    

f010c241 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c241:	55                   	push   %ebp
f010c242:	89 e5                	mov    %esp,%ebp
f010c244:	83 ec 04             	sub    $0x4,%esp
f010c247:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c24d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c250:	a2 c8 7f 65 f0       	mov    %al,0xf0657fc8
}
f010c255:	90                   	nop
f010c256:	c9                   	leave  
f010c257:	c3                   	ret    

f010c258 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c258:	55                   	push   %ebp
f010c259:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c25b:	c7 05 10 76 6e f0 00 	movl   $0x0,0xf06e7610
f010c262:	00 00 00 
}
f010c265:	90                   	nop
f010c266:	5d                   	pop    %ebp
f010c267:	c3                   	ret    

f010c268 <inctst>:
void inctst()
{
f010c268:	55                   	push   %ebp
f010c269:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c26b:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c270:	40                   	inc    %eax
f010c271:	a3 10 76 6e f0       	mov    %eax,0xf06e7610
}
f010c276:	90                   	nop
f010c277:	5d                   	pop    %ebp
f010c278:	c3                   	ret    

f010c279 <gettst>:
uint32 gettst()
{
f010c279:	55                   	push   %ebp
f010c27a:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c27c:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
}
f010c281:	5d                   	pop    %ebp
f010c282:	c3                   	ret    

f010c283 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c283:	55                   	push   %ebp
f010c284:	89 e5                	mov    %esp,%ebp
f010c286:	83 ec 28             	sub    $0x28,%esp
f010c289:	8b 45 14             	mov    0x14(%ebp),%eax
f010c28c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c28f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c296:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c29a:	83 f8 65             	cmp    $0x65,%eax
f010c29d:	74 5d                	je     f010c2fc <tst+0x79>
f010c29f:	83 f8 65             	cmp    $0x65,%eax
f010c2a2:	7f 0a                	jg     f010c2ae <tst+0x2b>
f010c2a4:	83 f8 62             	cmp    $0x62,%eax
f010c2a7:	74 73                	je     f010c31c <tst+0x99>
f010c2a9:	e9 91 00 00 00       	jmp    f010c33f <tst+0xbc>
f010c2ae:	83 f8 67             	cmp    $0x67,%eax
f010c2b1:	74 29                	je     f010c2dc <tst+0x59>
f010c2b3:	83 f8 6c             	cmp    $0x6c,%eax
f010c2b6:	0f 85 83 00 00 00    	jne    f010c33f <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2bf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c2c2:	73 09                	jae    f010c2cd <tst+0x4a>
			chk = 1;
f010c2c4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c2cb:	eb 68                	jmp    f010c335 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c2cd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c2d1:	74 62                	je     f010c335 <tst+0xb2>
			chk = 1;
f010c2d3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c2da:	eb 59                	jmp    f010c335 <tst+0xb2>
	case 'g':
		if (n > v1)
f010c2dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2df:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c2e2:	76 09                	jbe    f010c2ed <tst+0x6a>
			chk = 1;
f010c2e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c2eb:	eb 4b                	jmp    f010c338 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c2ed:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c2f1:	74 45                	je     f010c338 <tst+0xb5>
			chk = 1;
f010c2f3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c2fa:	eb 3c                	jmp    f010c338 <tst+0xb5>
	case 'e':
		if (n == v1)
f010c2fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ff:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c302:	75 09                	jne    f010c30d <tst+0x8a>
			chk = 1;
f010c304:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c30b:	eb 2e                	jmp    f010c33b <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c30d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c311:	74 28                	je     f010c33b <tst+0xb8>
			chk = 1;
f010c313:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c31a:	eb 1f                	jmp    f010c33b <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c31c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c31f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c322:	72 1a                	jb     f010c33e <tst+0xbb>
f010c324:	8b 45 08             	mov    0x8(%ebp),%eax
f010c327:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c32a:	77 12                	ja     f010c33e <tst+0xbb>
			chk = 1;
f010c32c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c333:	eb 09                	jmp    f010c33e <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c335:	90                   	nop
f010c336:	eb 07                	jmp    f010c33f <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c338:	90                   	nop
f010c339:	eb 04                	jmp    f010c33f <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c33b:	90                   	nop
f010c33c:	eb 01                	jmp    f010c33f <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c33e:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c33f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c343:	75 17                	jne    f010c35c <tst+0xd9>
f010c345:	83 ec 04             	sub    $0x4,%esp
f010c348:	68 d5 68 13 f0       	push   $0xf01368d5
f010c34d:	68 00 02 00 00       	push   $0x200
f010c352:	68 13 68 13 f0       	push   $0xf0136813
f010c357:	e8 4a 3e ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010c35c:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c361:	40                   	inc    %eax
f010c362:	a3 10 76 6e f0       	mov    %eax,0xf06e7610
	return;
f010c367:	90                   	nop
}
f010c368:	c9                   	leave  
f010c369:	c3                   	ret    

f010c36a <chktst>:

void chktst(uint32 n)
{
f010c36a:	55                   	push   %ebp
f010c36b:	89 e5                	mov    %esp,%ebp
f010c36d:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c370:	a1 10 76 6e f0       	mov    0xf06e7610,%eax
f010c375:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c378:	75 12                	jne    f010c38c <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c37a:	83 ec 0c             	sub    $0xc,%esp
f010c37d:	68 e8 68 13 f0       	push   $0xf01368e8
f010c382:	e8 a6 48 ff ff       	call   f0100c2d <cprintf>
f010c387:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c38a:	eb 17                	jmp    f010c3a3 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c38c:	83 ec 04             	sub    $0x4,%esp
f010c38f:	68 14 69 13 f0       	push   $0xf0136914
f010c394:	68 0a 02 00 00       	push   $0x20a
f010c399:	68 13 68 13 f0       	push   $0xf0136813
f010c39e:	e8 03 3e ff ff       	call   f01001a6 <_panic>
}
f010c3a3:	c9                   	leave  
f010c3a4:	c3                   	ret    

f010c3a5 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c3a5:	55                   	push   %ebp
f010c3a6:	89 e5                	mov    %esp,%ebp
f010c3a8:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c3ab:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c3b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c3b3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c3ba:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c3c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c3c5:	0f 84 a5 00 00 00    	je     f010c470 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c3cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c3d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c3d5:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c3db:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c3de:	eb 4a                	jmp    f010c42a <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010c3e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c3e3:	8b 00                	mov    (%eax),%eax
f010c3e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c3e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c3eb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c3f0:	89 c2                	mov    %eax,%edx
f010c3f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3f5:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c3fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ff:	01 c8                	add    %ecx,%eax
f010c401:	8b 00                	mov    (%eax),%eax
f010c403:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c406:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c409:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c40e:	39 c2                	cmp    %eax,%edx
f010c410:	74 09                	je     f010c41b <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010c412:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010c419:	eb 3e                	jmp    f010c459 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010c41b:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c41e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c421:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c427:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c42a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c42e:	74 08                	je     f010c438 <sys_check_LRU_lists+0x93>
f010c430:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c433:	8b 40 10             	mov    0x10(%eax),%eax
f010c436:	eb 05                	jmp    f010c43d <sys_check_LRU_lists+0x98>
f010c438:	b8 00 00 00 00       	mov    $0x0,%eax
f010c43d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c440:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c446:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c449:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c44f:	85 c0                	test   %eax,%eax
f010c451:	75 8d                	jne    f010c3e0 <sys_check_LRU_lists+0x3b>
f010c453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c457:	75 87                	jne    f010c3e0 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010c459:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c45c:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010c462:	8b 45 10             	mov    0x10(%ebp),%eax
f010c465:	39 c2                	cmp    %eax,%edx
f010c467:	74 07                	je     f010c470 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010c469:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010c470:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c474:	0f 84 a5 00 00 00    	je     f010c51f <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010c47a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c481:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c484:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c48a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c48d:	eb 4a                	jmp    f010c4d9 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010c48f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c492:	8b 00                	mov    (%eax),%eax
f010c494:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c497:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c49a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c49f:	89 c2                	mov    %eax,%edx
f010c4a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c4a4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c4ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c4ae:	01 c8                	add    %ecx,%eax
f010c4b0:	8b 00                	mov    (%eax),%eax
f010c4b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010c4b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c4b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c4bd:	39 c2                	cmp    %eax,%edx
f010c4bf:	74 09                	je     f010c4ca <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010c4c1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010c4c8:	eb 3e                	jmp    f010c508 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010c4ca:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c4cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4d0:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c4d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c4d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c4dd:	74 08                	je     f010c4e7 <sys_check_LRU_lists+0x142>
f010c4df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4e2:	8b 40 10             	mov    0x10(%eax),%eax
f010c4e5:	eb 05                	jmp    f010c4ec <sys_check_LRU_lists+0x147>
f010c4e7:	b8 00 00 00 00       	mov    $0x0,%eax
f010c4ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c4ef:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c4f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4f8:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c4fe:	85 c0                	test   %eax,%eax
f010c500:	75 8d                	jne    f010c48f <sys_check_LRU_lists+0xea>
f010c502:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c506:	75 87                	jne    f010c48f <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010c508:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c50b:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010c511:	8b 45 14             	mov    0x14(%ebp),%eax
f010c514:	39 c2                	cmp    %eax,%edx
f010c516:	74 07                	je     f010c51f <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010c518:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010c51f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c522:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010c525:	c9                   	leave  
f010c526:	c3                   	ret    

f010c527 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010c527:	55                   	push   %ebp
f010c528:	89 e5                	mov    %esp,%ebp
f010c52a:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c52d:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f010c532:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010c535:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c53c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c53f:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c545:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c548:	eb 65                	jmp    f010c5af <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010c54a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c551:	eb 3a                	jmp    f010c58d <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c553:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c556:	8b 00                	mov    (%eax),%eax
f010c558:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c55b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c55e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c563:	89 c2                	mov    %eax,%edx
f010c565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c568:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c56f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c572:	01 c8                	add    %ecx,%eax
f010c574:	8b 00                	mov    (%eax),%eax
f010c576:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c579:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c57c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c581:	39 c2                	cmp    %eax,%edx
f010c583:	75 05                	jne    f010c58a <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010c585:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c588:	eb 0b                	jmp    f010c595 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010c58a:	ff 45 f4             	incl   -0xc(%ebp)
f010c58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c590:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c593:	7c be                	jl     f010c553 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c595:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c599:	7e 08                	jle    f010c5a3 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010c59b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c59e:	e9 ed 00 00 00       	jmp    f010c690 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c5a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5a6:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c5ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c5af:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c5b3:	74 08                	je     f010c5bd <sys_check_LRU_lists_free+0x96>
f010c5b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c5b8:	8b 40 10             	mov    0x10(%eax),%eax
f010c5bb:	eb 05                	jmp    f010c5c2 <sys_check_LRU_lists_free+0x9b>
f010c5bd:	b8 00 00 00 00       	mov    $0x0,%eax
f010c5c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5c5:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c5cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5ce:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c5d4:	85 c0                	test   %eax,%eax
f010c5d6:	0f 85 6e ff ff ff    	jne    f010c54a <sys_check_LRU_lists_free+0x23>
f010c5dc:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c5e0:	0f 85 64 ff ff ff    	jne    f010c54a <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c5e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c5e9:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c5ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c5f2:	eb 62                	jmp    f010c656 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010c5f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c5fb:	eb 3a                	jmp    f010c637 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c5fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c600:	8b 00                	mov    (%eax),%eax
f010c602:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c605:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c608:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c60d:	89 c2                	mov    %eax,%edx
f010c60f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c612:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c619:	8b 45 08             	mov    0x8(%ebp),%eax
f010c61c:	01 c8                	add    %ecx,%eax
f010c61e:	8b 00                	mov    (%eax),%eax
f010c620:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c626:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c62b:	39 c2                	cmp    %eax,%edx
f010c62d:	75 05                	jne    f010c634 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010c62f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c632:	eb 0b                	jmp    f010c63f <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010c634:	ff 45 f0             	incl   -0x10(%ebp)
f010c637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c63a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c63d:	7c be                	jl     f010c5fd <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c63f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c643:	7e 05                	jle    f010c64a <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010c645:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c648:	eb 46                	jmp    f010c690 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c64a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c64d:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c653:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c656:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c65a:	74 08                	je     f010c664 <sys_check_LRU_lists_free+0x13d>
f010c65c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c65f:	8b 40 10             	mov    0x10(%eax),%eax
f010c662:	eb 05                	jmp    f010c669 <sys_check_LRU_lists_free+0x142>
f010c664:	b8 00 00 00 00       	mov    $0x0,%eax
f010c669:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c66c:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c672:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c675:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c67b:	85 c0                	test   %eax,%eax
f010c67d:	0f 85 71 ff ff ff    	jne    f010c5f4 <sys_check_LRU_lists_free+0xcd>
f010c683:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c687:	0f 85 67 ff ff ff    	jne    f010c5f4 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010c68d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010c690:	c9                   	leave  
f010c691:	c3                   	ret    

f010c692 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010c692:	55                   	push   %ebp
f010c693:	89 e5                	mov    %esp,%ebp
f010c695:	56                   	push   %esi
f010c696:	53                   	push   %ebx
f010c697:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010c69a:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c69e:	0f 87 0e 04 00 00    	ja     f010cab2 <syscall+0x420>
f010c6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6a7:	c1 e0 02             	shl    $0x2,%eax
f010c6aa:	05 30 69 13 f0       	add    $0xf0136930,%eax
f010c6af:	8b 00                	mov    (%eax),%eax
f010c6b1:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010c6b3:	8b 45 14             	mov    0x14(%ebp),%eax
f010c6b6:	0f b6 d0             	movzbl %al,%edx
f010c6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c6bc:	83 ec 04             	sub    $0x4,%esp
f010c6bf:	52                   	push   %edx
f010c6c0:	ff 75 10             	pushl  0x10(%ebp)
f010c6c3:	50                   	push   %eax
f010c6c4:	e8 eb f4 ff ff       	call   f010bbb4 <sys_cputs>
f010c6c9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c6cc:	b8 00 00 00 00       	mov    $0x0,%eax
f010c6d1:	e9 e1 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010c6d6:	e8 4e f5 ff ff       	call   f010bc29 <sys_cgetc>
f010c6db:	e9 d7 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010c6e0:	83 ec 08             	sub    $0x8,%esp
f010c6e3:	ff 75 10             	pushl  0x10(%ebp)
f010c6e6:	ff 75 0c             	pushl  0xc(%ebp)
f010c6e9:	e8 88 f6 ff ff       	call   f010bd76 <sys_calculate_required_frames>
f010c6ee:	83 c4 10             	add    $0x10,%esp
f010c6f1:	e9 c1 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010c6f6:	e8 9d f6 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f010c6fb:	e9 b7 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010c700:	e8 b2 f6 ff ff       	call   f010bdb7 <sys_calculate_modified_frames>
f010c705:	e9 ad 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010c70a:	e8 c2 f6 ff ff       	call   f010bdd1 <sys_calculate_notmod_frames>
f010c70f:	e9 a3 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010c714:	e8 2a f7 ff ff       	call   f010be43 <sys_pf_calculate_allocated_pages>
f010c719:	e9 99 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010c71e:	83 ec 0c             	sub    $0xc,%esp
f010c721:	ff 75 0c             	pushl  0xc(%ebp)
f010c724:	e8 c2 f6 ff ff       	call   f010bdeb <sys_calculate_pages_tobe_removed_ready_exit>
f010c729:	83 c4 10             	add    $0x10,%esp
f010c72c:	e9 86 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010c731:	e8 cb f6 ff ff       	call   f010be01 <sys_scarce_memory>
		return 0;
f010c736:	b8 00 00 00 00       	mov    $0x0,%eax
f010c73b:	e9 77 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010c740:	83 ec 08             	sub    $0x8,%esp
f010c743:	ff 75 10             	pushl  0x10(%ebp)
f010c746:	ff 75 0c             	pushl  0xc(%ebp)
f010c749:	e8 0e f7 ff ff       	call   f010be5c <sys_free_user_mem>
f010c74e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c751:	b8 00 00 00 00       	mov    $0x0,%eax
f010c756:	e9 5c 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010c75b:	8b 55 10             	mov    0x10(%ebp),%edx
f010c75e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c761:	83 ec 08             	sub    $0x8,%esp
f010c764:	52                   	push   %edx
f010c765:	50                   	push   %eax
f010c766:	e8 d1 f4 ff ff       	call   f010bc3c <__sys_allocate_page>
f010c76b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c76e:	b8 00 00 00 00       	mov    $0x0,%eax
f010c773:	e9 3f 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010c778:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010c77b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010c77e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c781:	8b 55 10             	mov    0x10(%ebp),%edx
f010c784:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c787:	83 ec 0c             	sub    $0xc,%esp
f010c78a:	56                   	push   %esi
f010c78b:	53                   	push   %ebx
f010c78c:	51                   	push   %ecx
f010c78d:	52                   	push   %edx
f010c78e:	50                   	push   %eax
f010c78f:	e8 a8 f5 ff ff       	call   f010bd3c <__sys_map_frame>
f010c794:	83 c4 20             	add    $0x20,%esp
		return 0;
f010c797:	b8 00 00 00 00       	mov    $0x0,%eax
f010c79c:	e9 16 03 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010c7a1:	8b 55 10             	mov    0x10(%ebp),%edx
f010c7a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7a7:	83 ec 08             	sub    $0x8,%esp
f010c7aa:	52                   	push   %edx
f010c7ab:	50                   	push   %eax
f010c7ac:	e8 a8 f5 ff ff       	call   f010bd59 <__sys_unmap_frame>
f010c7b1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c7b4:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7b9:	e9 f9 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010c7be:	83 ec 04             	sub    $0x4,%esp
f010c7c1:	ff 75 14             	pushl  0x14(%ebp)
f010c7c4:	ff 75 10             	pushl  0x10(%ebp)
f010c7c7:	ff 75 0c             	pushl  0xc(%ebp)
f010c7ca:	e8 ef f6 ff ff       	call   f010bebe <sys_allocate_chunk>
f010c7cf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c7d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7d7:	e9 db 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010c7dc:	e8 38 f7 ff ff       	call   f010bf19 <sys_disable_interrupt>
		return 0;
f010c7e1:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7e6:	e9 cc 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010c7eb:	e8 43 f7 ff ff       	call   f010bf33 <sys_enable_interrupt>
		return 0;
f010c7f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010c7f5:	e9 bd 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010c7fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7fd:	0f be c0             	movsbl %al,%eax
f010c800:	83 ec 0c             	sub    $0xc,%esp
f010c803:	50                   	push   %eax
f010c804:	e8 fc f3 ff ff       	call   f010bc05 <sys_cputc>
f010c809:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c80c:	b8 00 00 00 00       	mov    $0x0,%eax
f010c811:	e9 a1 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010c816:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c819:	0f be c0             	movsbl %al,%eax
f010c81c:	83 ec 0c             	sub    $0xc,%esp
f010c81f:	50                   	push   %eax
f010c820:	e8 ea f5 ff ff       	call   f010be0f <sys_clearFFL>
f010c825:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c828:	b8 00 00 00 00       	mov    $0x0,%eax
f010c82d:	e9 85 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010c832:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c835:	83 ec 08             	sub    $0x8,%esp
f010c838:	ff 75 10             	pushl  0x10(%ebp)
f010c83b:	50                   	push   %eax
f010c83c:	e8 0c f7 ff ff       	call   f010bf4d <sys_createSemaphore>
f010c841:	83 c4 10             	add    $0x10,%esp
f010c844:	e9 6e 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010c849:	8b 55 10             	mov    0x10(%ebp),%edx
f010c84c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c84f:	83 ec 08             	sub    $0x8,%esp
f010c852:	52                   	push   %edx
f010c853:	50                   	push   %eax
f010c854:	e8 16 f7 ff ff       	call   f010bf6f <sys_waitSemaphore>
f010c859:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c85c:	b8 00 00 00 00       	mov    $0x0,%eax
f010c861:	e9 51 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010c866:	8b 55 10             	mov    0x10(%ebp),%edx
f010c869:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c86c:	83 ec 08             	sub    $0x8,%esp
f010c86f:	52                   	push   %edx
f010c870:	50                   	push   %eax
f010c871:	e8 13 f7 ff ff       	call   f010bf89 <sys_signalSemaphore>
f010c876:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c879:	b8 00 00 00 00       	mov    $0x0,%eax
f010c87e:	e9 34 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010c883:	8b 55 10             	mov    0x10(%ebp),%edx
f010c886:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c889:	83 ec 08             	sub    $0x8,%esp
f010c88c:	52                   	push   %edx
f010c88d:	50                   	push   %eax
f010c88e:	e8 10 f7 ff ff       	call   f010bfa3 <sys_getSemaphoreValue>
f010c893:	83 c4 10             	add    $0x10,%esp
f010c896:	e9 1c 02 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010c89b:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010c89e:	8b 45 14             	mov    0x14(%ebp),%eax
f010c8a1:	0f b6 d0             	movzbl %al,%edx
f010c8a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8a7:	51                   	push   %ecx
f010c8a8:	52                   	push   %edx
f010c8a9:	ff 75 10             	pushl  0x10(%ebp)
f010c8ac:	50                   	push   %eax
f010c8ad:	e8 4e f7 ff ff       	call   f010c000 <sys_createSharedObject>
f010c8b2:	83 c4 10             	add    $0x10,%esp
f010c8b5:	e9 fd 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010c8ba:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010c8bd:	8b 55 10             	mov    0x10(%ebp),%edx
f010c8c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8c3:	83 ec 04             	sub    $0x4,%esp
f010c8c6:	51                   	push   %ecx
f010c8c7:	52                   	push   %edx
f010c8c8:	50                   	push   %eax
f010c8c9:	e8 7b f7 ff ff       	call   f010c049 <sys_getSharedObject>
f010c8ce:	83 c4 10             	add    $0x10,%esp
f010c8d1:	e9 e1 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010c8d6:	8b 55 10             	mov    0x10(%ebp),%edx
f010c8d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8dc:	83 ec 08             	sub    $0x8,%esp
f010c8df:	52                   	push   %edx
f010c8e0:	50                   	push   %eax
f010c8e1:	e8 7f f7 ff ff       	call   f010c065 <sys_freeSharedObject>
f010c8e6:	83 c4 10             	add    $0x10,%esp
f010c8e9:	e9 c9 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010c8ee:	8b 55 10             	mov    0x10(%ebp),%edx
f010c8f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8f4:	83 ec 08             	sub    $0x8,%esp
f010c8f7:	52                   	push   %edx
f010c8f8:	50                   	push   %eax
f010c8f9:	e8 32 f7 ff ff       	call   f010c030 <sys_getSizeOfSharedObject>
f010c8fe:	83 c4 10             	add    $0x10,%esp
f010c901:	e9 b1 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010c906:	e8 73 f7 ff ff       	call   f010c07e <sys_getMaxShares>
f010c90b:	e9 a7 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010c910:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c913:	ff 75 18             	pushl  0x18(%ebp)
f010c916:	ff 75 14             	pushl  0x14(%ebp)
f010c919:	ff 75 10             	pushl  0x10(%ebp)
f010c91c:	50                   	push   %eax
f010c91d:	e8 86 f8 ff ff       	call   f010c1a8 <sys_create_env>
f010c922:	83 c4 10             	add    $0x10,%esp
f010c925:	e9 8d 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010c92a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c92d:	83 ec 0c             	sub    $0xc,%esp
f010c930:	50                   	push   %eax
f010c931:	e8 b2 f8 ff ff       	call   f010c1e8 <sys_run_env>
f010c936:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c939:	b8 00 00 00 00       	mov    $0x0,%eax
f010c93e:	e9 74 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010c943:	e8 4d f7 ff ff       	call   f010c095 <sys_getenvindex>
f010c948:	e9 6a 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010c94d:	e8 36 f7 ff ff       	call   f010c088 <sys_getenvid>
f010c952:	e9 60 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010c957:	e8 99 f7 ff ff       	call   f010c0f5 <sys_getparentenvid>
f010c95c:	e9 56 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010c961:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c964:	83 ec 0c             	sub    $0xc,%esp
f010c967:	50                   	push   %eax
f010c968:	e8 95 f7 ff ff       	call   f010c102 <sys_destroy_env>
f010c96d:	83 c4 10             	add    $0x10,%esp
f010c970:	e9 42 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010c975:	e8 20 f8 ff ff       	call   f010c19a <sys_exit_env>
		return 0;
f010c97a:	b8 00 00 00 00       	mov    $0x0,%eax
f010c97f:	e9 33 01 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010c984:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c987:	83 ec 0c             	sub    $0xc,%esp
f010c98a:	50                   	push   %eax
f010c98b:	e8 70 f8 ff ff       	call   f010c200 <sys_get_virtual_time>
f010c990:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010c993:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c996:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010c999:	8b 45 10             	mov    0x10(%ebp),%eax
f010c99c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010c99f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9a5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010c9a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9ad:	89 10                	mov    %edx,(%eax)
		return 0;
f010c9af:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9b4:	e9 fe 00 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010c9b9:	83 ec 04             	sub    $0x4,%esp
f010c9bc:	ff 75 14             	pushl  0x14(%ebp)
f010c9bf:	ff 75 10             	pushl  0x10(%ebp)
f010c9c2:	ff 75 0c             	pushl  0xc(%ebp)
f010c9c5:	e8 17 f5 ff ff       	call   f010bee1 <sys_move_user_mem>
f010c9ca:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c9cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9d2:	e9 e0 00 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010c9d7:	e8 53 f8 ff ff       	call   f010c22f <sys_rcr2>
f010c9dc:	e9 d6 00 00 00       	jmp    f010cab7 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010c9e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c9e4:	0f b6 c0             	movzbl %al,%eax
f010c9e7:	83 ec 0c             	sub    $0xc,%esp
f010c9ea:	50                   	push   %eax
f010c9eb:	e8 51 f8 ff ff       	call   f010c241 <sys_bypassPageFault>
f010c9f0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c9f3:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9f8:	e9 ba 00 00 00       	jmp    f010cab7 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010c9fd:	e8 56 f8 ff ff       	call   f010c258 <rsttst>
		return 0;
f010ca02:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca07:	e9 ab 00 00 00       	jmp    f010cab7 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010ca0c:	e8 57 f8 ff ff       	call   f010c268 <inctst>
		return 0;
f010ca11:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca16:	e9 9c 00 00 00       	jmp    f010cab7 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010ca1b:	83 ec 0c             	sub    $0xc,%esp
f010ca1e:	ff 75 0c             	pushl  0xc(%ebp)
f010ca21:	e8 44 f9 ff ff       	call   f010c36a <chktst>
f010ca26:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca29:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca2e:	e9 84 00 00 00       	jmp    f010cab7 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010ca33:	e8 41 f8 ff ff       	call   f010c279 <gettst>
f010ca38:	eb 7d                	jmp    f010cab7 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010ca3a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010ca3d:	8b 45 18             	mov    0x18(%ebp),%eax
f010ca40:	0f be c0             	movsbl %al,%eax
f010ca43:	83 ec 0c             	sub    $0xc,%esp
f010ca46:	52                   	push   %edx
f010ca47:	50                   	push   %eax
f010ca48:	ff 75 14             	pushl  0x14(%ebp)
f010ca4b:	ff 75 10             	pushl  0x10(%ebp)
f010ca4e:	ff 75 0c             	pushl  0xc(%ebp)
f010ca51:	e8 2d f8 ff ff       	call   f010c283 <tst>
f010ca56:	83 c4 20             	add    $0x20,%esp
		return 0;
f010ca59:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca5e:	eb 57                	jmp    f010cab7 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010ca60:	e8 9c f4 ff ff       	call   f010bf01 <sys_get_heap_strategy>
f010ca65:	eb 50                	jmp    f010cab7 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010ca67:	83 ec 0c             	sub    $0xc,%esp
f010ca6a:	ff 75 0c             	pushl  0xc(%ebp)
f010ca6d:	e8 99 f4 ff ff       	call   f010bf0b <sys_set_uheap_strategy>
f010ca72:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca75:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca7a:	eb 3b                	jmp    f010cab7 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010ca7c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010ca7f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ca82:	8b 55 10             	mov    0x10(%ebp),%edx
f010ca85:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca88:	53                   	push   %ebx
f010ca89:	51                   	push   %ecx
f010ca8a:	52                   	push   %edx
f010ca8b:	50                   	push   %eax
f010ca8c:	e8 14 f9 ff ff       	call   f010c3a5 <sys_check_LRU_lists>
f010ca91:	83 c4 10             	add    $0x10,%esp
f010ca94:	eb 21                	jmp    f010cab7 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010ca96:	8b 55 10             	mov    0x10(%ebp),%edx
f010ca99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca9c:	83 ec 08             	sub    $0x8,%esp
f010ca9f:	52                   	push   %edx
f010caa0:	50                   	push   %eax
f010caa1:	e8 81 fa ff ff       	call   f010c527 <sys_check_LRU_lists_free>
f010caa6:	83 c4 10             	add    $0x10,%esp
f010caa9:	eb 0c                	jmp    f010cab7 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010caab:	b8 03 00 00 00       	mov    $0x3,%eax
f010cab0:	eb 05                	jmp    f010cab7 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010cab2:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cab7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010caba:	5b                   	pop    %ebx
f010cabb:	5e                   	pop    %esi
f010cabc:	5d                   	pop    %ebp
f010cabd:	c3                   	ret    

f010cabe <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010cabe:	55                   	push   %ebp
f010cabf:	89 e5                	mov    %esp,%ebp
f010cac1:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010cac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cac7:	8b 00                	mov    (%eax),%eax
f010cac9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cacc:	8b 45 10             	mov    0x10(%ebp),%eax
f010cacf:	8b 00                	mov    (%eax),%eax
f010cad1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cad4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010cadb:	e9 ca 00 00 00       	jmp    f010cbaa <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010cae0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cae3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cae6:	01 d0                	add    %edx,%eax
f010cae8:	89 c2                	mov    %eax,%edx
f010caea:	c1 ea 1f             	shr    $0x1f,%edx
f010caed:	01 d0                	add    %edx,%eax
f010caef:	d1 f8                	sar    %eax
f010caf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010caf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010caf7:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010cafa:	eb 03                	jmp    f010caff <stab_binsearch+0x41>
			m--;
f010cafc:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010caff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb02:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cb05:	7c 1e                	jl     f010cb25 <stab_binsearch+0x67>
f010cb07:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb0a:	89 d0                	mov    %edx,%eax
f010cb0c:	01 c0                	add    %eax,%eax
f010cb0e:	01 d0                	add    %edx,%eax
f010cb10:	c1 e0 02             	shl    $0x2,%eax
f010cb13:	89 c2                	mov    %eax,%edx
f010cb15:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb18:	01 d0                	add    %edx,%eax
f010cb1a:	8a 40 04             	mov    0x4(%eax),%al
f010cb1d:	0f b6 c0             	movzbl %al,%eax
f010cb20:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cb23:	75 d7                	jne    f010cafc <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010cb25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb28:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cb2b:	7d 09                	jge    f010cb36 <stab_binsearch+0x78>
			l = true_m + 1;
f010cb2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb30:	40                   	inc    %eax
f010cb31:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010cb34:	eb 74                	jmp    f010cbaa <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010cb36:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010cb3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb40:	89 d0                	mov    %edx,%eax
f010cb42:	01 c0                	add    %eax,%eax
f010cb44:	01 d0                	add    %edx,%eax
f010cb46:	c1 e0 02             	shl    $0x2,%eax
f010cb49:	89 c2                	mov    %eax,%edx
f010cb4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb4e:	01 d0                	add    %edx,%eax
f010cb50:	8b 40 08             	mov    0x8(%eax),%eax
f010cb53:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cb56:	73 11                	jae    f010cb69 <stab_binsearch+0xab>
			*region_left = m;
f010cb58:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb5e:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010cb60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb63:	40                   	inc    %eax
f010cb64:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cb67:	eb 41                	jmp    f010cbaa <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010cb69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb6c:	89 d0                	mov    %edx,%eax
f010cb6e:	01 c0                	add    %eax,%eax
f010cb70:	01 d0                	add    %edx,%eax
f010cb72:	c1 e0 02             	shl    $0x2,%eax
f010cb75:	89 c2                	mov    %eax,%edx
f010cb77:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb7a:	01 d0                	add    %edx,%eax
f010cb7c:	8b 40 08             	mov    0x8(%eax),%eax
f010cb7f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010cb82:	76 14                	jbe    f010cb98 <stab_binsearch+0xda>
			*region_right = m - 1;
f010cb84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb87:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cb8a:	8b 45 10             	mov    0x10(%ebp),%eax
f010cb8d:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010cb8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb92:	48                   	dec    %eax
f010cb93:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cb96:	eb 12                	jmp    f010cbaa <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010cb98:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cb9e:	89 10                	mov    %edx,(%eax)
			l = m;
f010cba0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cba3:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010cba6:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010cbaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cbad:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010cbb0:	0f 8e 2a ff ff ff    	jle    f010cae0 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010cbb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbba:	75 0f                	jne    f010cbcb <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010cbbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbbf:	8b 00                	mov    (%eax),%eax
f010cbc1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cbc4:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbc7:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010cbc9:	eb 3d                	jmp    f010cc08 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cbcb:	8b 45 10             	mov    0x10(%ebp),%eax
f010cbce:	8b 00                	mov    (%eax),%eax
f010cbd0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cbd3:	eb 03                	jmp    f010cbd8 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010cbd5:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010cbd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbdb:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cbdd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cbe0:	7d 1e                	jge    f010cc00 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010cbe2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cbe5:	89 d0                	mov    %edx,%eax
f010cbe7:	01 c0                	add    %eax,%eax
f010cbe9:	01 d0                	add    %edx,%eax
f010cbeb:	c1 e0 02             	shl    $0x2,%eax
f010cbee:	89 c2                	mov    %eax,%edx
f010cbf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbf3:	01 d0                	add    %edx,%eax
f010cbf5:	8a 40 04             	mov    0x4(%eax),%al
f010cbf8:	0f b6 c0             	movzbl %al,%eax
f010cbfb:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cbfe:	75 d5                	jne    f010cbd5 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010cc00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc03:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cc06:	89 10                	mov    %edx,(%eax)
	}
}
f010cc08:	90                   	nop
f010cc09:	c9                   	leave  
f010cc0a:	c3                   	ret    

f010cc0b <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010cc0b:	55                   	push   %ebp
f010cc0c:	89 e5                	mov    %esp,%ebp
f010cc0e:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010cc11:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc14:	c7 00 f4 69 13 f0    	movl   $0xf01369f4,(%eax)
	info->eip_line = 0;
f010cc1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc1d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010cc24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc27:	c7 40 08 f4 69 13 f0 	movl   $0xf01369f4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010cc2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc31:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010cc38:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc3b:	8b 55 08             	mov    0x8(%ebp),%edx
f010cc3e:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010cc41:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc44:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010cc4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc4e:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010cc53:	76 1e                	jbe    f010cc73 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010cc55:	c7 45 f4 70 c4 13 f0 	movl   $0xf013c470,-0xc(%ebp)
		stab_end = __STAB_END__;
f010cc5c:	c7 45 f0 60 a0 17 f0 	movl   $0xf017a060,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010cc63:	c7 45 ec 61 a0 17 f0 	movl   $0xf017a061,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010cc6a:	c7 45 e8 50 6b 18 f0 	movl   $0xf0186b50,-0x18(%ebp)
f010cc71:	eb 2a                	jmp    f010cc9d <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010cc73:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010cc7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cc7d:	8b 00                	mov    (%eax),%eax
f010cc7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010cc82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cc85:	8b 40 04             	mov    0x4(%eax),%eax
f010cc88:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010cc8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cc8e:	8b 40 08             	mov    0x8(%eax),%eax
f010cc91:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010cc94:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cc97:	8b 40 0c             	mov    0xc(%eax),%eax
f010cc9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010cc9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cca0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cca3:	76 0a                	jbe    f010ccaf <debuginfo_eip+0xa4>
f010cca5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cca8:	48                   	dec    %eax
f010cca9:	8a 00                	mov    (%eax),%al
f010ccab:	84 c0                	test   %al,%al
f010ccad:	74 0a                	je     f010ccb9 <debuginfo_eip+0xae>
		return -1;
f010ccaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010ccb4:	e9 01 02 00 00       	jmp    f010ceba <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010ccb9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010ccc0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ccc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccc6:	29 c2                	sub    %eax,%edx
f010ccc8:	89 d0                	mov    %edx,%eax
f010ccca:	c1 f8 02             	sar    $0x2,%eax
f010cccd:	89 c2                	mov    %eax,%edx
f010cccf:	89 d0                	mov    %edx,%eax
f010ccd1:	c1 e0 02             	shl    $0x2,%eax
f010ccd4:	01 d0                	add    %edx,%eax
f010ccd6:	c1 e0 02             	shl    $0x2,%eax
f010ccd9:	01 d0                	add    %edx,%eax
f010ccdb:	c1 e0 02             	shl    $0x2,%eax
f010ccde:	01 d0                	add    %edx,%eax
f010cce0:	89 c1                	mov    %eax,%ecx
f010cce2:	c1 e1 08             	shl    $0x8,%ecx
f010cce5:	01 c8                	add    %ecx,%eax
f010cce7:	89 c1                	mov    %eax,%ecx
f010cce9:	c1 e1 10             	shl    $0x10,%ecx
f010ccec:	01 c8                	add    %ecx,%eax
f010ccee:	01 c0                	add    %eax,%eax
f010ccf0:	01 d0                	add    %edx,%eax
f010ccf2:	48                   	dec    %eax
f010ccf3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010ccf6:	ff 75 08             	pushl  0x8(%ebp)
f010ccf9:	6a 64                	push   $0x64
f010ccfb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010ccfe:	50                   	push   %eax
f010ccff:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010cd02:	50                   	push   %eax
f010cd03:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd06:	e8 b3 fd ff ff       	call   f010cabe <stab_binsearch>
f010cd0b:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010cd0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cd11:	85 c0                	test   %eax,%eax
f010cd13:	75 0a                	jne    f010cd1f <debuginfo_eip+0x114>
		return -1;
f010cd15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010cd1a:	e9 9b 01 00 00       	jmp    f010ceba <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010cd1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cd22:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010cd25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cd28:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010cd2b:	ff 75 08             	pushl  0x8(%ebp)
f010cd2e:	6a 24                	push   $0x24
f010cd30:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010cd33:	50                   	push   %eax
f010cd34:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010cd37:	50                   	push   %eax
f010cd38:	ff 75 f4             	pushl  -0xc(%ebp)
f010cd3b:	e8 7e fd ff ff       	call   f010cabe <stab_binsearch>
f010cd40:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010cd43:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010cd46:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cd49:	39 c2                	cmp    %eax,%edx
f010cd4b:	0f 8f 86 00 00 00    	jg     f010cdd7 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010cd51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cd54:	89 c2                	mov    %eax,%edx
f010cd56:	89 d0                	mov    %edx,%eax
f010cd58:	01 c0                	add    %eax,%eax
f010cd5a:	01 d0                	add    %edx,%eax
f010cd5c:	c1 e0 02             	shl    $0x2,%eax
f010cd5f:	89 c2                	mov    %eax,%edx
f010cd61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd64:	01 d0                	add    %edx,%eax
f010cd66:	8b 00                	mov    (%eax),%eax
f010cd68:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010cd6b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cd6e:	29 d1                	sub    %edx,%ecx
f010cd70:	89 ca                	mov    %ecx,%edx
f010cd72:	39 d0                	cmp    %edx,%eax
f010cd74:	73 22                	jae    f010cd98 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010cd76:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cd79:	89 c2                	mov    %eax,%edx
f010cd7b:	89 d0                	mov    %edx,%eax
f010cd7d:	01 c0                	add    %eax,%eax
f010cd7f:	01 d0                	add    %edx,%eax
f010cd81:	c1 e0 02             	shl    $0x2,%eax
f010cd84:	89 c2                	mov    %eax,%edx
f010cd86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd89:	01 d0                	add    %edx,%eax
f010cd8b:	8b 10                	mov    (%eax),%edx
f010cd8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd90:	01 c2                	add    %eax,%edx
f010cd92:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd95:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010cd98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cd9b:	89 c2                	mov    %eax,%edx
f010cd9d:	89 d0                	mov    %edx,%eax
f010cd9f:	01 c0                	add    %eax,%eax
f010cda1:	01 d0                	add    %edx,%eax
f010cda3:	c1 e0 02             	shl    $0x2,%eax
f010cda6:	89 c2                	mov    %eax,%edx
f010cda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cdab:	01 d0                	add    %edx,%eax
f010cdad:	8b 50 08             	mov    0x8(%eax),%edx
f010cdb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdb3:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010cdb6:	8b 55 08             	mov    0x8(%ebp),%edx
f010cdb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdbc:	8b 40 10             	mov    0x10(%eax),%eax
f010cdbf:	29 c2                	sub    %eax,%edx
f010cdc1:	89 d0                	mov    %edx,%eax
f010cdc3:	c1 f8 02             	sar    $0x2,%eax
f010cdc6:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010cdc9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010cdcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010cdcf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010cdd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cdd5:	eb 15                	jmp    f010cdec <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010cdd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdda:	8b 55 08             	mov    0x8(%ebp),%edx
f010cddd:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010cde0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cde3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010cde6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010cde9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010cdec:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdef:	8b 40 08             	mov    0x8(%eax),%eax
f010cdf2:	83 ec 08             	sub    $0x8,%esp
f010cdf5:	6a 3a                	push   $0x3a
f010cdf7:	50                   	push   %eax
f010cdf8:	e8 2a 34 02 00       	call   f0130227 <strfind>
f010cdfd:	83 c4 10             	add    $0x10,%esp
f010ce00:	89 c2                	mov    %eax,%edx
f010ce02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce05:	8b 40 08             	mov    0x8(%eax),%eax
f010ce08:	29 c2                	sub    %eax,%edx
f010ce0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce0d:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ce10:	eb 03                	jmp    f010ce15 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010ce12:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010ce15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ce18:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ce1b:	7c 4e                	jl     f010ce6b <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010ce1d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce20:	89 d0                	mov    %edx,%eax
f010ce22:	01 c0                	add    %eax,%eax
f010ce24:	01 d0                	add    %edx,%eax
f010ce26:	c1 e0 02             	shl    $0x2,%eax
f010ce29:	89 c2                	mov    %eax,%edx
f010ce2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce2e:	01 d0                	add    %edx,%eax
f010ce30:	8a 40 04             	mov    0x4(%eax),%al
f010ce33:	3c 84                	cmp    $0x84,%al
f010ce35:	74 34                	je     f010ce6b <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010ce37:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce3a:	89 d0                	mov    %edx,%eax
f010ce3c:	01 c0                	add    %eax,%eax
f010ce3e:	01 d0                	add    %edx,%eax
f010ce40:	c1 e0 02             	shl    $0x2,%eax
f010ce43:	89 c2                	mov    %eax,%edx
f010ce45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce48:	01 d0                	add    %edx,%eax
f010ce4a:	8a 40 04             	mov    0x4(%eax),%al
f010ce4d:	3c 64                	cmp    $0x64,%al
f010ce4f:	75 c1                	jne    f010ce12 <debuginfo_eip+0x207>
f010ce51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce54:	89 d0                	mov    %edx,%eax
f010ce56:	01 c0                	add    %eax,%eax
f010ce58:	01 d0                	add    %edx,%eax
f010ce5a:	c1 e0 02             	shl    $0x2,%eax
f010ce5d:	89 c2                	mov    %eax,%edx
f010ce5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce62:	01 d0                	add    %edx,%eax
f010ce64:	8b 40 08             	mov    0x8(%eax),%eax
f010ce67:	85 c0                	test   %eax,%eax
f010ce69:	74 a7                	je     f010ce12 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010ce6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ce6e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ce71:	7c 42                	jl     f010ceb5 <debuginfo_eip+0x2aa>
f010ce73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce76:	89 d0                	mov    %edx,%eax
f010ce78:	01 c0                	add    %eax,%eax
f010ce7a:	01 d0                	add    %edx,%eax
f010ce7c:	c1 e0 02             	shl    $0x2,%eax
f010ce7f:	89 c2                	mov    %eax,%edx
f010ce81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce84:	01 d0                	add    %edx,%eax
f010ce86:	8b 00                	mov    (%eax),%eax
f010ce88:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010ce8b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ce8e:	29 d1                	sub    %edx,%ecx
f010ce90:	89 ca                	mov    %ecx,%edx
f010ce92:	39 d0                	cmp    %edx,%eax
f010ce94:	73 1f                	jae    f010ceb5 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010ce96:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce99:	89 d0                	mov    %edx,%eax
f010ce9b:	01 c0                	add    %eax,%eax
f010ce9d:	01 d0                	add    %edx,%eax
f010ce9f:	c1 e0 02             	shl    $0x2,%eax
f010cea2:	89 c2                	mov    %eax,%edx
f010cea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cea7:	01 d0                	add    %edx,%eax
f010cea9:	8b 10                	mov    (%eax),%edx
f010ceab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ceae:	01 c2                	add    %eax,%edx
f010ceb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ceb3:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010ceb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ceba:	c9                   	leave  
f010cebb:	c3                   	ret    

f010cebc <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010cebc:	55                   	push   %ebp
f010cebd:	89 e5                	mov    %esp,%ebp
f010cebf:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010cec2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010cec6:	74 1c                	je     f010cee4 <setPageReplacmentAlgorithmLRU+0x28>
f010cec8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010cecc:	74 16                	je     f010cee4 <setPageReplacmentAlgorithmLRU+0x28>
f010cece:	68 00 6a 13 f0       	push   $0xf0136a00
f010ced3:	68 4a 6a 13 f0       	push   $0xf0136a4a
f010ced8:	6a 18                	push   $0x18
f010ceda:	68 5f 6a 13 f0       	push   $0xf0136a5f
f010cedf:	e8 c2 32 ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010cee4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cee7:	a3 e4 74 6e f0       	mov    %eax,0xf06e74e4
}
f010ceec:	90                   	nop
f010ceed:	c9                   	leave  
f010ceee:	c3                   	ret    

f010ceef <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010ceef:	55                   	push   %ebp
f010cef0:	89 e5                	mov    %esp,%ebp
f010cef2:	c7 05 e4 74 6e f0 03 	movl   $0x3,0xf06e74e4
f010cef9:	00 00 00 
f010cefc:	90                   	nop
f010cefd:	5d                   	pop    %ebp
f010cefe:	c3                   	ret    

f010ceff <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010ceff:	55                   	push   %ebp
f010cf00:	89 e5                	mov    %esp,%ebp
f010cf02:	c7 05 e4 74 6e f0 04 	movl   $0x4,0xf06e74e4
f010cf09:	00 00 00 
f010cf0c:	90                   	nop
f010cf0d:	5d                   	pop    %ebp
f010cf0e:	c3                   	ret    

f010cf0f <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010cf0f:	55                   	push   %ebp
f010cf10:	89 e5                	mov    %esp,%ebp
f010cf12:	c7 05 e4 74 6e f0 05 	movl   $0x5,0xf06e74e4
f010cf19:	00 00 00 
f010cf1c:	90                   	nop
f010cf1d:	5d                   	pop    %ebp
f010cf1e:	c3                   	ret    

f010cf1f <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010cf1f:	55                   	push   %ebp
f010cf20:	89 e5                	mov    %esp,%ebp
f010cf22:	c7 05 e4 74 6e f0 07 	movl   $0x7,0xf06e74e4
f010cf29:	00 00 00 
f010cf2c:	90                   	nop
f010cf2d:	5d                   	pop    %ebp
f010cf2e:	c3                   	ret    

f010cf2f <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010cf2f:	55                   	push   %ebp
f010cf30:	89 e5                	mov    %esp,%ebp
f010cf32:	c7 05 e4 74 6e f0 06 	movl   $0x6,0xf06e74e4
f010cf39:	00 00 00 
f010cf3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf3f:	a3 08 f1 67 f0       	mov    %eax,0xf067f108
f010cf44:	90                   	nop
f010cf45:	5d                   	pop    %ebp
f010cf46:	c3                   	ret    

f010cf47 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010cf47:	55                   	push   %ebp
f010cf48:	89 e5                	mov    %esp,%ebp
f010cf4a:	8b 15 e4 74 6e f0    	mov    0xf06e74e4,%edx
f010cf50:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf53:	39 c2                	cmp    %eax,%edx
f010cf55:	0f 94 c0             	sete   %al
f010cf58:	0f b6 c0             	movzbl %al,%eax
f010cf5b:	5d                   	pop    %ebp
f010cf5c:	c3                   	ret    

f010cf5d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010cf5d:	55                   	push   %ebp
f010cf5e:	89 e5                	mov    %esp,%ebp
f010cf60:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cf65:	83 f8 03             	cmp    $0x3,%eax
f010cf68:	75 07                	jne    f010cf71 <isPageReplacmentAlgorithmCLOCK+0x14>
f010cf6a:	b8 01 00 00 00       	mov    $0x1,%eax
f010cf6f:	eb 05                	jmp    f010cf76 <isPageReplacmentAlgorithmCLOCK+0x19>
f010cf71:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf76:	5d                   	pop    %ebp
f010cf77:	c3                   	ret    

f010cf78 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010cf78:	55                   	push   %ebp
f010cf79:	89 e5                	mov    %esp,%ebp
f010cf7b:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cf80:	83 f8 04             	cmp    $0x4,%eax
f010cf83:	75 07                	jne    f010cf8c <isPageReplacmentAlgorithmFIFO+0x14>
f010cf85:	b8 01 00 00 00       	mov    $0x1,%eax
f010cf8a:	eb 05                	jmp    f010cf91 <isPageReplacmentAlgorithmFIFO+0x19>
f010cf8c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf91:	5d                   	pop    %ebp
f010cf92:	c3                   	ret    

f010cf93 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010cf93:	55                   	push   %ebp
f010cf94:	89 e5                	mov    %esp,%ebp
f010cf96:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cf9b:	83 f8 05             	cmp    $0x5,%eax
f010cf9e:	75 07                	jne    f010cfa7 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010cfa0:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfa5:	eb 05                	jmp    f010cfac <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010cfa7:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfac:	5d                   	pop    %ebp
f010cfad:	c3                   	ret    

f010cfae <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010cfae:	55                   	push   %ebp
f010cfaf:	89 e5                	mov    %esp,%ebp
f010cfb1:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cfb6:	83 f8 07             	cmp    $0x7,%eax
f010cfb9:	75 07                	jne    f010cfc2 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010cfbb:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfc0:	eb 05                	jmp    f010cfc7 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010cfc2:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfc7:	5d                   	pop    %ebp
f010cfc8:	c3                   	ret    

f010cfc9 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010cfc9:	55                   	push   %ebp
f010cfca:	89 e5                	mov    %esp,%ebp
f010cfcc:	a1 e4 74 6e f0       	mov    0xf06e74e4,%eax
f010cfd1:	83 f8 06             	cmp    $0x6,%eax
f010cfd4:	75 07                	jne    f010cfdd <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010cfd6:	b8 01 00 00 00       	mov    $0x1,%eax
f010cfdb:	eb 05                	jmp    f010cfe2 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010cfdd:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfe2:	5d                   	pop    %ebp
f010cfe3:	c3                   	ret    

f010cfe4 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010cfe4:	55                   	push   %ebp
f010cfe5:	89 e5                	mov    %esp,%ebp
f010cfe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfea:	a3 ac 74 6e f0       	mov    %eax,0xf06e74ac
f010cfef:	90                   	nop
f010cff0:	5d                   	pop    %ebp
f010cff1:	c3                   	ret    

f010cff2 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010cff2:	55                   	push   %ebp
f010cff3:	89 e5                	mov    %esp,%ebp
f010cff5:	a1 ac 74 6e f0       	mov    0xf06e74ac,%eax
f010cffa:	5d                   	pop    %ebp
f010cffb:	c3                   	ret    

f010cffc <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010cffc:	55                   	push   %ebp
f010cffd:	89 e5                	mov    %esp,%ebp
f010cfff:	8b 45 08             	mov    0x8(%ebp),%eax
f010d002:	a3 ec 74 6e f0       	mov    %eax,0xf06e74ec
f010d007:	90                   	nop
f010d008:	5d                   	pop    %ebp
f010d009:	c3                   	ret    

f010d00a <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d00a:	55                   	push   %ebp
f010d00b:	89 e5                	mov    %esp,%ebp
f010d00d:	a1 ec 74 6e f0       	mov    0xf06e74ec,%eax
f010d012:	5d                   	pop    %ebp
f010d013:	c3                   	ret    

f010d014 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d014:	55                   	push   %ebp
f010d015:	89 e5                	mov    %esp,%ebp
f010d017:	8b 45 08             	mov    0x8(%ebp),%eax
f010d01a:	a3 0c 75 6e f0       	mov    %eax,0xf06e750c
f010d01f:	90                   	nop
f010d020:	5d                   	pop    %ebp
f010d021:	c3                   	ret    

f010d022 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d022:	55                   	push   %ebp
f010d023:	89 e5                	mov    %esp,%ebp
f010d025:	a1 0c 75 6e f0       	mov    0xf06e750c,%eax
f010d02a:	5d                   	pop    %ebp
f010d02b:	c3                   	ret    

f010d02c <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d02c:	55                   	push   %ebp
f010d02d:	89 e5                	mov    %esp,%ebp
f010d02f:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d032:	8b 45 08             	mov    0x8(%ebp),%eax
f010d035:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d038:	83 ec 04             	sub    $0x4,%esp
f010d03b:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d03e:	52                   	push   %edx
f010d03f:	ff 75 0c             	pushl  0xc(%ebp)
f010d042:	50                   	push   %eax
f010d043:	e8 47 9a ff ff       	call   f0106a8f <__static_cpt>
f010d048:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d04b:	90                   	nop
f010d04c:	c9                   	leave  
f010d04d:	c3                   	ret    

f010d04e <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d04e:	55                   	push   %ebp
f010d04f:	89 e5                	mov    %esp,%ebp
f010d051:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d054:	83 ec 04             	sub    $0x4,%esp
f010d057:	68 7c 6a 13 f0       	push   $0xf0136a7c
f010d05c:	6a 50                	push   $0x50
f010d05e:	68 5f 6a 13 f0       	push   $0xf0136a5f
f010d063:	e8 3e 31 ff ff       	call   f01001a6 <_panic>

f010d068 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d068:	55                   	push   %ebp
f010d069:	89 e5                	mov    %esp,%ebp
f010d06b:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d06e:	83 ec 04             	sub    $0x4,%esp
f010d071:	68 b0 6a 13 f0       	push   $0xf0136ab0
f010d076:	6a 57                	push   $0x57
f010d078:	68 5f 6a 13 f0       	push   $0xf0136a5f
f010d07d:	e8 24 31 ff ff       	call   f01001a6 <_panic>

f010d082 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d082:	55                   	push   %ebp
f010d083:	89 e5                	mov    %esp,%ebp
f010d085:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d088:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d08f:	e9 aa 00 00 00       	jmp    f010d13e <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d094:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d097:	89 d0                	mov    %edx,%eax
f010d099:	c1 e0 02             	shl    $0x2,%eax
f010d09c:	01 d0                	add    %edx,%eax
f010d09e:	01 c0                	add    %eax,%eax
f010d0a0:	01 d0                	add    %edx,%eax
f010d0a2:	01 c0                	add    %eax,%eax
f010d0a4:	01 d0                	add    %edx,%eax
f010d0a6:	c1 e0 02             	shl    $0x2,%eax
f010d0a9:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d0ae:	83 ec 04             	sub    $0x4,%esp
f010d0b1:	6a 5c                	push   $0x5c
f010d0b3:	6a 00                	push   $0x0
f010d0b5:	50                   	push   %eax
f010d0b6:	e8 98 31 02 00       	call   f0130253 <memset>
f010d0bb:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d0be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0c1:	89 d0                	mov    %edx,%eax
f010d0c3:	c1 e0 02             	shl    $0x2,%eax
f010d0c6:	01 d0                	add    %edx,%eax
f010d0c8:	01 c0                	add    %eax,%eax
f010d0ca:	01 d0                	add    %edx,%eax
f010d0cc:	01 c0                	add    %eax,%eax
f010d0ce:	01 d0                	add    %edx,%eax
f010d0d0:	c1 e0 02             	shl    $0x2,%eax
f010d0d3:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d0d8:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d0db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0de:	89 d0                	mov    %edx,%eax
f010d0e0:	c1 e0 02             	shl    $0x2,%eax
f010d0e3:	01 d0                	add    %edx,%eax
f010d0e5:	01 c0                	add    %eax,%eax
f010d0e7:	01 d0                	add    %edx,%eax
f010d0e9:	01 c0                	add    %eax,%eax
f010d0eb:	01 d0                	add    %edx,%eax
f010d0ed:	c1 e0 02             	shl    $0x2,%eax
f010d0f0:	05 c4 50 6e f0       	add    $0xf06e50c4,%eax
f010d0f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d0fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d0fe:	89 d0                	mov    %edx,%eax
f010d100:	c1 e0 02             	shl    $0x2,%eax
f010d103:	01 d0                	add    %edx,%eax
f010d105:	01 c0                	add    %eax,%eax
f010d107:	01 d0                	add    %edx,%eax
f010d109:	01 c0                	add    %eax,%eax
f010d10b:	01 d0                	add    %edx,%eax
f010d10d:	c1 e0 02             	shl    $0x2,%eax
f010d110:	05 c8 50 6e f0       	add    $0xf06e50c8,%eax
f010d115:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d11b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d11e:	89 d0                	mov    %edx,%eax
f010d120:	c1 e0 02             	shl    $0x2,%eax
f010d123:	01 d0                	add    %edx,%eax
f010d125:	01 c0                	add    %eax,%eax
f010d127:	01 d0                	add    %edx,%eax
f010d129:	01 c0                	add    %eax,%eax
f010d12b:	01 d0                	add    %edx,%eax
f010d12d:	c1 e0 02             	shl    $0x2,%eax
f010d130:	05 d0 50 6e f0       	add    $0xf06e50d0,%eax
f010d135:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d13b:	ff 45 f4             	incl   -0xc(%ebp)
f010d13e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d142:	0f 8e 4c ff ff ff    	jle    f010d094 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d148:	90                   	nop
f010d149:	c9                   	leave  
f010d14a:	c3                   	ret    

f010d14b <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d14b:	55                   	push   %ebp
f010d14c:	89 e5                	mov    %esp,%ebp
f010d14e:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d151:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d158:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d15f:	eb 2b                	jmp    f010d18c <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d161:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d164:	89 d0                	mov    %edx,%eax
f010d166:	c1 e0 02             	shl    $0x2,%eax
f010d169:	01 d0                	add    %edx,%eax
f010d16b:	01 c0                	add    %eax,%eax
f010d16d:	01 d0                	add    %edx,%eax
f010d16f:	01 c0                	add    %eax,%eax
f010d171:	01 d0                	add    %edx,%eax
f010d173:	c1 e0 02             	shl    $0x2,%eax
f010d176:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d17b:	8a 00                	mov    (%eax),%al
f010d17d:	84 c0                	test   %al,%al
f010d17f:	74 08                	je     f010d189 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d181:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d184:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d187:	eb 09                	jmp    f010d192 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d189:	ff 45 f0             	incl   -0x10(%ebp)
f010d18c:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d190:	7e cf                	jle    f010d161 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d192:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d196:	75 14                	jne    f010d1ac <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d198:	83 ec 04             	sub    $0x4,%esp
f010d19b:	68 f4 6a 13 f0       	push   $0xf0136af4
f010d1a0:	6a 53                	push   $0x53
f010d1a2:	68 44 6b 13 f0       	push   $0xf0136b44
f010d1a7:	e8 fa 2f ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d1ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d1af:	89 d0                	mov    %edx,%eax
f010d1b1:	c1 e0 02             	shl    $0x2,%eax
f010d1b4:	01 d0                	add    %edx,%eax
f010d1b6:	01 c0                	add    %eax,%eax
f010d1b8:	01 d0                	add    %edx,%eax
f010d1ba:	01 c0                	add    %eax,%eax
f010d1bc:	01 d0                	add    %edx,%eax
f010d1be:	c1 e0 02             	shl    $0x2,%eax
f010d1c1:	8d 90 80 50 6e f0    	lea    -0xf91af80(%eax),%edx
f010d1c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1ca:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d1cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d1cf:	89 d0                	mov    %edx,%eax
f010d1d1:	c1 e0 02             	shl    $0x2,%eax
f010d1d4:	01 d0                	add    %edx,%eax
f010d1d6:	01 c0                	add    %eax,%eax
f010d1d8:	01 d0                	add    %edx,%eax
f010d1da:	01 c0                	add    %eax,%eax
f010d1dc:	01 d0                	add    %edx,%eax
f010d1de:	c1 e0 02             	shl    $0x2,%eax
f010d1e1:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d1e6:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d1e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d1ec:	c9                   	leave  
f010d1ed:	c3                   	ret    

f010d1ee <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d1ee:	55                   	push   %ebp
f010d1ef:	89 e5                	mov    %esp,%ebp
f010d1f1:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d1f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d1fb:	eb 7a                	jmp    f010d277 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d1fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d200:	89 d0                	mov    %edx,%eax
f010d202:	c1 e0 02             	shl    $0x2,%eax
f010d205:	01 d0                	add    %edx,%eax
f010d207:	01 c0                	add    %eax,%eax
f010d209:	01 d0                	add    %edx,%eax
f010d20b:	01 c0                	add    %eax,%eax
f010d20d:	01 d0                	add    %edx,%eax
f010d20f:	c1 e0 02             	shl    $0x2,%eax
f010d212:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d217:	8a 00                	mov    (%eax),%al
f010d219:	84 c0                	test   %al,%al
f010d21b:	75 56                	jne    f010d273 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d21d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d220:	89 d0                	mov    %edx,%eax
f010d222:	c1 e0 02             	shl    $0x2,%eax
f010d225:	01 d0                	add    %edx,%eax
f010d227:	01 c0                	add    %eax,%eax
f010d229:	01 d0                	add    %edx,%eax
f010d22b:	01 c0                	add    %eax,%eax
f010d22d:	01 d0                	add    %edx,%eax
f010d22f:	c1 e0 02             	shl    $0x2,%eax
f010d232:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d237:	8b 00                	mov    (%eax),%eax
f010d239:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d23c:	75 36                	jne    f010d274 <get_semaphore_object_ID+0x86>
f010d23e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d241:	89 d0                	mov    %edx,%eax
f010d243:	c1 e0 02             	shl    $0x2,%eax
f010d246:	01 d0                	add    %edx,%eax
f010d248:	01 c0                	add    %eax,%eax
f010d24a:	01 d0                	add    %edx,%eax
f010d24c:	01 c0                	add    %eax,%eax
f010d24e:	01 d0                	add    %edx,%eax
f010d250:	c1 e0 02             	shl    $0x2,%eax
f010d253:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d258:	83 c0 04             	add    $0x4,%eax
f010d25b:	83 ec 08             	sub    $0x8,%esp
f010d25e:	50                   	push   %eax
f010d25f:	ff 75 0c             	pushl  0xc(%ebp)
f010d262:	e8 0a 2f 02 00       	call   f0130171 <strcmp>
f010d267:	83 c4 10             	add    $0x10,%esp
f010d26a:	85 c0                	test   %eax,%eax
f010d26c:	75 06                	jne    f010d274 <get_semaphore_object_ID+0x86>
		{
			return i;
f010d26e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d271:	eb 0f                	jmp    f010d282 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d273:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d274:	ff 45 f4             	incl   -0xc(%ebp)
f010d277:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d27b:	7e 80                	jle    f010d1fd <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d27d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d282:	c9                   	leave  
f010d283:	c3                   	ret    

f010d284 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d284:	55                   	push   %ebp
f010d285:	89 e5                	mov    %esp,%ebp
f010d287:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d28a:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d28e:	76 0a                	jbe    f010d29a <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d290:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d295:	e9 ac 00 00 00       	jmp    f010d346 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d29a:	8b 55 08             	mov    0x8(%ebp),%edx
f010d29d:	89 d0                	mov    %edx,%eax
f010d29f:	c1 e0 02             	shl    $0x2,%eax
f010d2a2:	01 d0                	add    %edx,%eax
f010d2a4:	01 c0                	add    %eax,%eax
f010d2a6:	01 d0                	add    %edx,%eax
f010d2a8:	01 c0                	add    %eax,%eax
f010d2aa:	01 d0                	add    %edx,%eax
f010d2ac:	c1 e0 02             	shl    $0x2,%eax
f010d2af:	05 80 50 6e f0       	add    $0xf06e5080,%eax
f010d2b4:	83 ec 04             	sub    $0x4,%esp
f010d2b7:	6a 5c                	push   $0x5c
f010d2b9:	6a 00                	push   $0x0
f010d2bb:	50                   	push   %eax
f010d2bc:	e8 92 2f 02 00       	call   f0130253 <memset>
f010d2c1:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d2c4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d2c7:	89 d0                	mov    %edx,%eax
f010d2c9:	c1 e0 02             	shl    $0x2,%eax
f010d2cc:	01 d0                	add    %edx,%eax
f010d2ce:	01 c0                	add    %eax,%eax
f010d2d0:	01 d0                	add    %edx,%eax
f010d2d2:	01 c0                	add    %eax,%eax
f010d2d4:	01 d0                	add    %edx,%eax
f010d2d6:	c1 e0 02             	shl    $0x2,%eax
f010d2d9:	05 d8 50 6e f0       	add    $0xf06e50d8,%eax
f010d2de:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d2e1:	8b 55 08             	mov    0x8(%ebp),%edx
f010d2e4:	89 d0                	mov    %edx,%eax
f010d2e6:	c1 e0 02             	shl    $0x2,%eax
f010d2e9:	01 d0                	add    %edx,%eax
f010d2eb:	01 c0                	add    %eax,%eax
f010d2ed:	01 d0                	add    %edx,%eax
f010d2ef:	01 c0                	add    %eax,%eax
f010d2f1:	01 d0                	add    %edx,%eax
f010d2f3:	c1 e0 02             	shl    $0x2,%eax
f010d2f6:	05 c4 50 6e f0       	add    $0xf06e50c4,%eax
f010d2fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d301:	8b 55 08             	mov    0x8(%ebp),%edx
f010d304:	89 d0                	mov    %edx,%eax
f010d306:	c1 e0 02             	shl    $0x2,%eax
f010d309:	01 d0                	add    %edx,%eax
f010d30b:	01 c0                	add    %eax,%eax
f010d30d:	01 d0                	add    %edx,%eax
f010d30f:	01 c0                	add    %eax,%eax
f010d311:	01 d0                	add    %edx,%eax
f010d313:	c1 e0 02             	shl    $0x2,%eax
f010d316:	05 c8 50 6e f0       	add    $0xf06e50c8,%eax
f010d31b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d321:	8b 55 08             	mov    0x8(%ebp),%edx
f010d324:	89 d0                	mov    %edx,%eax
f010d326:	c1 e0 02             	shl    $0x2,%eax
f010d329:	01 d0                	add    %edx,%eax
f010d32b:	01 c0                	add    %eax,%eax
f010d32d:	01 d0                	add    %edx,%eax
f010d32f:	01 c0                	add    %eax,%eax
f010d331:	01 d0                	add    %edx,%eax
f010d333:	c1 e0 02             	shl    $0x2,%eax
f010d336:	05 d0 50 6e f0       	add    $0xf06e50d0,%eax
f010d33b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d341:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d346:	c9                   	leave  
f010d347:	c3                   	ret    

f010d348 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d348:	55                   	push   %ebp
f010d349:	89 e5                	mov    %esp,%ebp
f010d34b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010d34e:	83 ec 04             	sub    $0x4,%esp
f010d351:	68 64 6b 13 f0       	push   $0xf0136b64
f010d356:	68 94 00 00 00       	push   $0x94
f010d35b:	68 44 6b 13 f0       	push   $0xf0136b44
f010d360:	e8 41 2e ff ff       	call   f01001a6 <_panic>

f010d365 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d365:	55                   	push   %ebp
f010d366:	89 e5                	mov    %esp,%ebp
f010d368:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010d36b:	83 ec 04             	sub    $0x4,%esp
f010d36e:	68 94 6b 13 f0       	push   $0xf0136b94
f010d373:	68 a6 00 00 00       	push   $0xa6
f010d378:	68 44 6b 13 f0       	push   $0xf0136b44
f010d37d:	e8 24 2e ff ff       	call   f01001a6 <_panic>

f010d382 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d382:	55                   	push   %ebp
f010d383:	89 e5                	mov    %esp,%ebp
f010d385:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010d388:	83 ec 04             	sub    $0x4,%esp
f010d38b:	68 c0 6b 13 f0       	push   $0xf0136bc0
f010d390:	68 ba 00 00 00       	push   $0xba
f010d395:	68 44 6b 13 f0       	push   $0xf0136b44
f010d39a:	e8 07 2e ff ff       	call   f01001a6 <_panic>

f010d39f <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010d39f:	55                   	push   %ebp
f010d3a0:	89 e5                	mov    %esp,%ebp
f010d3a2:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010d3a5:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d3ac:	83 ec 0c             	sub    $0xc,%esp
f010d3af:	ff 75 ec             	pushl  -0x14(%ebp)
f010d3b2:	e8 18 38 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010d3b7:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010d3ba:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d3bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d3c2:	74 17                	je     f010d3db <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010d3c4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d3c9:	50                   	push   %eax
f010d3ca:	68 00 6c 13 f0       	push   $0xf0136c00
f010d3cf:	6a 1f                	push   $0x1f
f010d3d1:	68 54 6c 13 f0       	push   $0xf0136c54
f010d3d6:	e8 cb 2d ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d3db:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d3e0:	85 c0                	test   %eax,%eax
f010d3e2:	74 17                	je     f010d3fb <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010d3e4:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d3e9:	50                   	push   %eax
f010d3ea:	68 78 6c 13 f0       	push   $0xf0136c78
f010d3ef:	6a 26                	push   $0x26
f010d3f1:	68 54 6c 13 f0       	push   $0xf0136c54
f010d3f6:	e8 ab 2d ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010d3fb:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010d400:	85 c0                	test   %eax,%eax
f010d402:	74 17                	je     f010d41b <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010d404:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010d409:	50                   	push   %eax
f010d40a:	68 c8 6c 13 f0       	push   $0xf0136cc8
f010d40f:	6a 2c                	push   $0x2c
f010d411:	68 54 6c 13 f0       	push   $0xf0136c54
f010d416:	e8 8b 2d ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010d41b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010d422:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d429:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f010d42e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d431:	eb 29                	jmp    f010d45c <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010d433:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010d436:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d439:	8b 50 0c             	mov    0xc(%eax),%edx
f010d43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d43f:	8b 40 08             	mov    0x8(%eax),%eax
f010d442:	83 ec 04             	sub    $0x4,%esp
f010d445:	52                   	push   %edx
f010d446:	50                   	push   %eax
f010d447:	68 18 6d 13 f0       	push   $0xf0136d18
f010d44c:	e8 dc 37 ff ff       	call   f0100c2d <cprintf>
f010d451:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d454:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010d459:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d45c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d460:	74 07                	je     f010d469 <test_initialize_MemBlocksList+0xca>
f010d462:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d465:	8b 00                	mov    (%eax),%eax
f010d467:	eb 05                	jmp    f010d46e <test_initialize_MemBlocksList+0xcf>
f010d469:	b8 00 00 00 00       	mov    $0x0,%eax
f010d46e:	a3 fc 74 6e f0       	mov    %eax,0xf06e74fc
f010d473:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010d478:	85 c0                	test   %eax,%eax
f010d47a:	75 b7                	jne    f010d433 <test_initialize_MemBlocksList+0x94>
f010d47c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d480:	75 b1                	jne    f010d433 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010d482:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d487:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d48a:	74 14                	je     f010d4a0 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010d48c:	83 ec 04             	sub    $0x4,%esp
f010d48f:	68 38 6d 13 f0       	push   $0xf0136d38
f010d494:	6a 38                	push   $0x38
f010d496:	68 54 6c 13 f0       	push   $0xf0136c54
f010d49b:	e8 06 2d ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010d4a0:	83 ec 0c             	sub    $0xc,%esp
f010d4a3:	68 90 6d 13 f0       	push   $0xf0136d90
f010d4a8:	e8 80 37 ff ff       	call   f0100c2d <cprintf>
f010d4ad:	83 c4 10             	add    $0x10,%esp
}
f010d4b0:	90                   	nop
f010d4b1:	c9                   	leave  
f010d4b2:	c3                   	ret    

f010d4b3 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010d4b3:	55                   	push   %ebp
f010d4b4:	89 e5                	mov    %esp,%ebp
f010d4b6:	57                   	push   %edi
f010d4b7:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010d4bd:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d4c4:	83 ec 0c             	sub    $0xc,%esp
f010d4c7:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4ca:	e8 00 37 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010d4cf:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d4d2:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010d4d9:	00 00 00 
f010d4dc:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010d4e3:	00 00 00 
f010d4e6:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010d4ed:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010d4f0:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010d4f7:	00 00 00 
f010d4fa:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010d501:	00 00 00 
f010d504:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010d50b:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010d50e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010d511:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d516:	b8 00 00 00 00       	mov    $0x0,%eax
f010d51b:	89 d7                	mov    %edx,%edi
f010d51d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010d51f:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010d522:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d527:	b8 00 00 00 00       	mov    $0x0,%eax
f010d52c:	89 d7                	mov    %edx,%edi
f010d52e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010d530:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010d537:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010d53e:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010d545:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010d54c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d54f:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010d552:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d555:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010d558:	83 ec 0c             	sub    $0xc,%esp
f010d55b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010d55e:	50                   	push   %eax
f010d55f:	e8 78 37 02 00       	call   f0130cdc <insert_sorted_allocList>
f010d564:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010d567:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d56e:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d573:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d576:	74 14                	je     f010d58c <test_insert_sorted_allocList+0xd9>
f010d578:	83 ec 04             	sub    $0x4,%esp
f010d57b:	68 dc 6d 13 f0       	push   $0xf0136ddc
f010d580:	6a 56                	push   $0x56
f010d582:	68 54 6c 13 f0       	push   $0xf0136c54
f010d587:	e8 1a 2c ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d58c:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d591:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d594:	74 14                	je     f010d5aa <test_insert_sorted_allocList+0xf7>
f010d596:	83 ec 04             	sub    $0x4,%esp
f010d599:	68 28 6e 13 f0       	push   $0xf0136e28
f010d59e:	6a 59                	push   $0x59
f010d5a0:	68 54 6c 13 f0       	push   $0xf0136c54
f010d5a5:	e8 fc 2b ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d5aa:	83 ec 0c             	sub    $0xc,%esp
f010d5ad:	ff 75 f0             	pushl  -0x10(%ebp)
f010d5b0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d5b3:	50                   	push   %eax
f010d5b4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d5b7:	50                   	push   %eax
f010d5b8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d5bb:	50                   	push   %eax
f010d5bc:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d5c1:	e8 7d 26 00 00       	call   f010fc43 <check_list_data>
f010d5c6:	83 c4 20             	add    $0x20,%esp
f010d5c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d5cc:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d5d0:	74 14                	je     f010d5e6 <test_insert_sorted_allocList+0x133>
f010d5d2:	83 ec 04             	sub    $0x4,%esp
f010d5d5:	68 78 6e 13 f0       	push   $0xf0136e78
f010d5da:	6a 5d                	push   $0x5d
f010d5dc:	68 54 6c 13 f0       	push   $0xf0136c54
f010d5e1:	e8 c0 2b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d5e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d5e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d5ec:	74 14                	je     f010d602 <test_insert_sorted_allocList+0x14f>
f010d5ee:	83 ec 04             	sub    $0x4,%esp
f010d5f1:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010d5f6:	6a 5e                	push   $0x5e
f010d5f8:	68 54 6c 13 f0       	push   $0xf0136c54
f010d5fd:	e8 a4 2b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010d602:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010d609:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010d610:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d613:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010d616:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d619:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010d61c:	83 ec 0c             	sub    $0xc,%esp
f010d61f:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010d622:	50                   	push   %eax
f010d623:	e8 b4 36 02 00       	call   f0130cdc <insert_sorted_allocList>
f010d628:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010d62b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d632:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d637:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d63a:	74 14                	je     f010d650 <test_insert_sorted_allocList+0x19d>
f010d63c:	83 ec 04             	sub    $0x4,%esp
f010d63f:	68 dc 6d 13 f0       	push   $0xf0136ddc
f010d644:	6a 6d                	push   $0x6d
f010d646:	68 54 6c 13 f0       	push   $0xf0136c54
f010d64b:	e8 56 2b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d650:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d655:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d658:	74 14                	je     f010d66e <test_insert_sorted_allocList+0x1bb>
f010d65a:	83 ec 04             	sub    $0x4,%esp
f010d65d:	68 28 6e 13 f0       	push   $0xf0136e28
f010d662:	6a 70                	push   $0x70
f010d664:	68 54 6c 13 f0       	push   $0xf0136c54
f010d669:	e8 38 2b ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d66e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d675:	83 ec 0c             	sub    $0xc,%esp
f010d678:	ff 75 f0             	pushl  -0x10(%ebp)
f010d67b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d67e:	50                   	push   %eax
f010d67f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d682:	50                   	push   %eax
f010d683:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d686:	50                   	push   %eax
f010d687:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d68c:	e8 b2 25 00 00       	call   f010fc43 <check_list_data>
f010d691:	83 c4 20             	add    $0x20,%esp
f010d694:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d697:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d69b:	74 14                	je     f010d6b1 <test_insert_sorted_allocList+0x1fe>
f010d69d:	83 ec 04             	sub    $0x4,%esp
f010d6a0:	68 78 6e 13 f0       	push   $0xf0136e78
f010d6a5:	6a 75                	push   $0x75
f010d6a7:	68 54 6c 13 f0       	push   $0xf0136c54
f010d6ac:	e8 f5 2a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d6b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d6b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d6b7:	74 14                	je     f010d6cd <test_insert_sorted_allocList+0x21a>
f010d6b9:	83 ec 04             	sub    $0x4,%esp
f010d6bc:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010d6c1:	6a 76                	push   $0x76
f010d6c3:	68 54 6c 13 f0       	push   $0xf0136c54
f010d6c8:	e8 d9 2a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010d6cd:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010d6d4:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010d6db:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d6de:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010d6e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d6e4:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010d6e7:	83 ec 0c             	sub    $0xc,%esp
f010d6ea:	8d 45 90             	lea    -0x70(%ebp),%eax
f010d6ed:	50                   	push   %eax
f010d6ee:	e8 e9 35 02 00       	call   f0130cdc <insert_sorted_allocList>
f010d6f3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010d6f6:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d6fd:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d702:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d705:	74 17                	je     f010d71e <test_insert_sorted_allocList+0x26b>
f010d707:	83 ec 04             	sub    $0x4,%esp
f010d70a:	68 dc 6d 13 f0       	push   $0xf0136ddc
f010d70f:	68 85 00 00 00       	push   $0x85
f010d714:	68 54 6c 13 f0       	push   $0xf0136c54
f010d719:	e8 88 2a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010d71e:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d723:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d726:	74 17                	je     f010d73f <test_insert_sorted_allocList+0x28c>
f010d728:	83 ec 04             	sub    $0x4,%esp
f010d72b:	68 14 6f 13 f0       	push   $0xf0136f14
f010d730:	68 88 00 00 00       	push   $0x88
f010d735:	68 54 6c 13 f0       	push   $0xf0136c54
f010d73a:	e8 67 2a ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d73f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d746:	83 ec 0c             	sub    $0xc,%esp
f010d749:	ff 75 f0             	pushl  -0x10(%ebp)
f010d74c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d74f:	50                   	push   %eax
f010d750:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d753:	50                   	push   %eax
f010d754:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d757:	50                   	push   %eax
f010d758:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d75d:	e8 e1 24 00 00       	call   f010fc43 <check_list_data>
f010d762:	83 c4 20             	add    $0x20,%esp
f010d765:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d768:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d76c:	74 17                	je     f010d785 <test_insert_sorted_allocList+0x2d2>
f010d76e:	83 ec 04             	sub    $0x4,%esp
f010d771:	68 78 6e 13 f0       	push   $0xf0136e78
f010d776:	68 8d 00 00 00       	push   $0x8d
f010d77b:	68 54 6c 13 f0       	push   $0xf0136c54
f010d780:	e8 21 2a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d785:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d788:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d78b:	74 17                	je     f010d7a4 <test_insert_sorted_allocList+0x2f1>
f010d78d:	83 ec 04             	sub    $0x4,%esp
f010d790:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010d795:	68 8e 00 00 00       	push   $0x8e
f010d79a:	68 54 6c 13 f0       	push   $0xf0136c54
f010d79f:	e8 02 2a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010d7a4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010d7ab:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010d7b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d7b5:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010d7b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010d7bb:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010d7be:	83 ec 0c             	sub    $0xc,%esp
f010d7c1:	8d 45 80             	lea    -0x80(%ebp),%eax
f010d7c4:	50                   	push   %eax
f010d7c5:	e8 12 35 02 00       	call   f0130cdc <insert_sorted_allocList>
f010d7ca:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010d7cd:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d7d4:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d7d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d7dc:	74 17                	je     f010d7f5 <test_insert_sorted_allocList+0x342>
f010d7de:	83 ec 04             	sub    $0x4,%esp
f010d7e1:	68 dc 6d 13 f0       	push   $0xf0136ddc
f010d7e6:	68 9c 00 00 00       	push   $0x9c
f010d7eb:	68 54 6c 13 f0       	push   $0xf0136c54
f010d7f0:	e8 b1 29 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d7f5:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d7fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d7fd:	74 17                	je     f010d816 <test_insert_sorted_allocList+0x363>
f010d7ff:	83 ec 04             	sub    $0x4,%esp
f010d802:	68 28 6e 13 f0       	push   $0xf0136e28
f010d807:	68 9f 00 00 00       	push   $0x9f
f010d80c:	68 54 6c 13 f0       	push   $0xf0136c54
f010d811:	e8 90 29 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d816:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d81d:	83 ec 0c             	sub    $0xc,%esp
f010d820:	ff 75 f0             	pushl  -0x10(%ebp)
f010d823:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d826:	50                   	push   %eax
f010d827:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d82a:	50                   	push   %eax
f010d82b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d82e:	50                   	push   %eax
f010d82f:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d834:	e8 0a 24 00 00       	call   f010fc43 <check_list_data>
f010d839:	83 c4 20             	add    $0x20,%esp
f010d83c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d83f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d843:	74 17                	je     f010d85c <test_insert_sorted_allocList+0x3a9>
f010d845:	83 ec 04             	sub    $0x4,%esp
f010d848:	68 78 6e 13 f0       	push   $0xf0136e78
f010d84d:	68 a4 00 00 00       	push   $0xa4
f010d852:	68 54 6c 13 f0       	push   $0xf0136c54
f010d857:	e8 4a 29 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d85c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d85f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d862:	74 17                	je     f010d87b <test_insert_sorted_allocList+0x3c8>
f010d864:	83 ec 04             	sub    $0x4,%esp
f010d867:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010d86c:	68 a5 00 00 00       	push   $0xa5
f010d871:	68 54 6c 13 f0       	push   $0xf0136c54
f010d876:	e8 2b 29 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010d87b:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010d882:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010d889:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d88c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010d892:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d895:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010d89b:	83 ec 0c             	sub    $0xc,%esp
f010d89e:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010d8a4:	50                   	push   %eax
f010d8a5:	e8 32 34 02 00       	call   f0130cdc <insert_sorted_allocList>
f010d8aa:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010d8ad:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d8b4:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010d8b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d8bc:	74 17                	je     f010d8d5 <test_insert_sorted_allocList+0x422>
f010d8be:	83 ec 04             	sub    $0x4,%esp
f010d8c1:	68 dc 6d 13 f0       	push   $0xf0136ddc
f010d8c6:	68 b3 00 00 00       	push   $0xb3
f010d8cb:	68 54 6c 13 f0       	push   $0xf0136c54
f010d8d0:	e8 d1 28 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d8d5:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010d8da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d8dd:	74 17                	je     f010d8f6 <test_insert_sorted_allocList+0x443>
f010d8df:	83 ec 04             	sub    $0x4,%esp
f010d8e2:	68 28 6e 13 f0       	push   $0xf0136e28
f010d8e7:	68 b6 00 00 00       	push   $0xb6
f010d8ec:	68 54 6c 13 f0       	push   $0xf0136c54
f010d8f1:	e8 b0 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d8f6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d8fd:	83 ec 0c             	sub    $0xc,%esp
f010d900:	ff 75 f0             	pushl  -0x10(%ebp)
f010d903:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d906:	50                   	push   %eax
f010d907:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d90a:	50                   	push   %eax
f010d90b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d90e:	50                   	push   %eax
f010d90f:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010d914:	e8 2a 23 00 00       	call   f010fc43 <check_list_data>
f010d919:	83 c4 20             	add    $0x20,%esp
f010d91c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d91f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d923:	74 17                	je     f010d93c <test_insert_sorted_allocList+0x489>
f010d925:	83 ec 04             	sub    $0x4,%esp
f010d928:	68 78 6e 13 f0       	push   $0xf0136e78
f010d92d:	68 bb 00 00 00       	push   $0xbb
f010d932:	68 54 6c 13 f0       	push   $0xf0136c54
f010d937:	e8 6a 28 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d93c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d93f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d942:	74 17                	je     f010d95b <test_insert_sorted_allocList+0x4a8>
f010d944:	83 ec 04             	sub    $0x4,%esp
f010d947:	68 c8 6e 13 f0       	push   $0xf0136ec8
f010d94c:	68 bc 00 00 00       	push   $0xbc
f010d951:	68 54 6c 13 f0       	push   $0xf0136c54
f010d956:	e8 4b 28 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010d95b:	83 ec 0c             	sub    $0xc,%esp
f010d95e:	68 64 6f 13 f0       	push   $0xf0136f64
f010d963:	e8 c5 32 ff ff       	call   f0100c2d <cprintf>
f010d968:	83 c4 10             	add    $0x10,%esp
}
f010d96b:	90                   	nop
f010d96c:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010d96f:	c9                   	leave  
f010d970:	c3                   	ret    

f010d971 <test_find_block>:

void test_find_block()
{
f010d971:	55                   	push   %ebp
f010d972:	89 e5                	mov    %esp,%ebp
f010d974:	57                   	push   %edi
f010d975:	56                   	push   %esi
f010d976:	53                   	push   %ebx
f010d977:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010d97d:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d984:	83 ec 0c             	sub    $0xc,%esp
f010d987:	ff 75 e0             	pushl  -0x20(%ebp)
f010d98a:	e8 40 32 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010d98f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010d992:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010d999:	00 00 00 
f010d99c:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010d9a3:	00 00 00 
f010d9a6:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010d9ad:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010d9b0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d9b3:	bb dc 70 13 f0       	mov    $0xf01370dc,%ebx
f010d9b8:	ba 06 00 00 00       	mov    $0x6,%edx
f010d9bd:	89 c7                	mov    %eax,%edi
f010d9bf:	89 de                	mov    %ebx,%esi
f010d9c1:	89 d1                	mov    %edx,%ecx
f010d9c3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010d9c5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010d9c8:	bb f4 70 13 f0       	mov    $0xf01370f4,%ebx
f010d9cd:	ba 06 00 00 00       	mov    $0x6,%edx
f010d9d2:	89 c7                	mov    %eax,%edi
f010d9d4:	89 de                	mov    %ebx,%esi
f010d9d6:	89 d1                	mov    %edx,%ecx
f010d9d8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010d9da:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010d9e1:	00 00 00 
f010d9e4:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010d9eb:	00 00 00 
f010d9ee:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010d9f5:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010d9f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010d9ff:	e9 5f 01 00 00       	jmp    f010db63 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010da04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da07:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010da0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da0e:	c1 e2 04             	shl    $0x4,%edx
f010da11:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010da14:	01 da                	add    %ebx,%edx
f010da16:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010da1c:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010da1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da21:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010da25:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da28:	c1 e2 04             	shl    $0x4,%edx
f010da2b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010da2e:	01 f2                	add    %esi,%edx
f010da30:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010da36:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010da38:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010da3c:	0f 85 92 00 00 00    	jne    f010dad4 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010da42:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f010da47:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da4a:	c1 e2 04             	shl    $0x4,%edx
f010da4d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010da50:	01 fa                	add    %edi,%edx
f010da52:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010da58:	89 02                	mov    %eax,(%edx)
f010da5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da5d:	c1 e0 04             	shl    $0x4,%eax
f010da60:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010da63:	01 d8                	add    %ebx,%eax
f010da65:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010da6a:	8b 00                	mov    (%eax),%eax
f010da6c:	85 c0                	test   %eax,%eax
f010da6e:	74 18                	je     f010da88 <test_find_block+0x117>
f010da70:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f010da75:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010da7b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010da7e:	c1 e1 04             	shl    $0x4,%ecx
f010da81:	01 ca                	add    %ecx,%edx
f010da83:	89 50 04             	mov    %edx,0x4(%eax)
f010da86:	eb 13                	jmp    f010da9b <test_find_block+0x12a>
f010da88:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010da8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010da91:	c1 e2 04             	shl    $0x4,%edx
f010da94:	01 d0                	add    %edx,%eax
f010da96:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f010da9b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010daa1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010daa4:	c1 e2 04             	shl    $0x4,%edx
f010daa7:	01 d0                	add    %edx,%eax
f010daa9:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f010daae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dab1:	c1 e0 04             	shl    $0x4,%eax
f010dab4:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dab7:	01 f0                	add    %esi,%eax
f010dab9:	2d 98 00 00 00       	sub    $0x98,%eax
f010dabe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dac4:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010dac9:	40                   	inc    %eax
f010daca:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
f010dacf:	e9 8c 00 00 00       	jmp    f010db60 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010dad4:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f010dad9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dadc:	c1 e2 04             	shl    $0x4,%edx
f010dadf:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010dae2:	01 fa                	add    %edi,%edx
f010dae4:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010daea:	89 02                	mov    %eax,(%edx)
f010daec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010daef:	c1 e0 04             	shl    $0x4,%eax
f010daf2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010daf5:	01 d8                	add    %ebx,%eax
f010daf7:	2d 98 00 00 00       	sub    $0x98,%eax
f010dafc:	8b 00                	mov    (%eax),%eax
f010dafe:	85 c0                	test   %eax,%eax
f010db00:	74 17                	je     f010db19 <test_find_block+0x1a8>
f010db02:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f010db07:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010db0d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010db10:	c1 e1 04             	shl    $0x4,%ecx
f010db13:	01 ca                	add    %ecx,%edx
f010db15:	89 10                	mov    %edx,(%eax)
f010db17:	eb 13                	jmp    f010db2c <test_find_block+0x1bb>
f010db19:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010db1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db22:	c1 e2 04             	shl    $0x4,%edx
f010db25:	01 d0                	add    %edx,%eax
f010db27:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f010db2c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010db32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db35:	c1 e2 04             	shl    $0x4,%edx
f010db38:	01 d0                	add    %edx,%eax
f010db3a:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f010db3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db42:	c1 e0 04             	shl    $0x4,%eax
f010db45:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010db48:	01 f0                	add    %esi,%eax
f010db4a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010db4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db55:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010db5a:	40                   	inc    %eax
f010db5b:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010db60:	ff 45 e4             	incl   -0x1c(%ebp)
f010db63:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010db67:	0f 8e 97 fe ff ff    	jle    f010da04 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010db6d:	83 ec 08             	sub    $0x8,%esp
f010db70:	68 00 10 00 00       	push   $0x1000
f010db75:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010db7a:	e8 05 31 02 00       	call   f0130c84 <find_block>
f010db7f:	83 c4 10             	add    $0x10,%esp
f010db82:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010db85:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010db89:	74 17                	je     f010dba2 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010db8b:	83 ec 04             	sub    $0x4,%esp
f010db8e:	68 a4 6f 13 f0       	push   $0xf0136fa4
f010db93:	68 de 00 00 00       	push   $0xde
f010db98:	68 54 6c 13 f0       	push   $0xf0136c54
f010db9d:	e8 04 26 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010dba2:	83 ec 08             	sub    $0x8,%esp
f010dba5:	6a 00                	push   $0x0
f010dba7:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dbac:	e8 d3 30 02 00       	call   f0130c84 <find_block>
f010dbb1:	83 c4 10             	add    $0x10,%esp
f010dbb4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010dbb7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dbbb:	74 17                	je     f010dbd4 <test_find_block+0x263>
f010dbbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dbc0:	8b 40 0c             	mov    0xc(%eax),%eax
f010dbc3:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010dbc8:	75 0a                	jne    f010dbd4 <test_find_block+0x263>
f010dbca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dbcd:	8b 40 08             	mov    0x8(%eax),%eax
f010dbd0:	85 c0                	test   %eax,%eax
f010dbd2:	74 17                	je     f010dbeb <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dbd4:	83 ec 04             	sub    $0x4,%esp
f010dbd7:	68 08 70 13 f0       	push   $0xf0137008
f010dbdc:	68 e3 00 00 00       	push   $0xe3
f010dbe1:	68 54 6c 13 f0       	push   $0xf0136c54
f010dbe6:	e8 bb 25 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010dbeb:	83 ec 08             	sub    $0x8,%esp
f010dbee:	68 00 70 00 00       	push   $0x7000
f010dbf3:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dbf8:	e8 87 30 02 00       	call   f0130c84 <find_block>
f010dbfd:	83 c4 10             	add    $0x10,%esp
f010dc00:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010dc03:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dc07:	74 1a                	je     f010dc23 <test_find_block+0x2b2>
f010dc09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc0c:	8b 40 0c             	mov    0xc(%eax),%eax
f010dc0f:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010dc14:	75 0d                	jne    f010dc23 <test_find_block+0x2b2>
f010dc16:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc19:	8b 40 08             	mov    0x8(%eax),%eax
f010dc1c:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010dc21:	74 17                	je     f010dc3a <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dc23:	83 ec 04             	sub    $0x4,%esp
f010dc26:	68 08 70 13 f0       	push   $0xf0137008
f010dc2b:	68 e8 00 00 00       	push   $0xe8
f010dc30:	68 54 6c 13 f0       	push   $0xf0136c54
f010dc35:	e8 6c 25 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010dc3a:	83 ec 08             	sub    $0x8,%esp
f010dc3d:	68 00 a4 01 00       	push   $0x1a400
f010dc42:	68 f0 7f 65 f0       	push   $0xf0657ff0
f010dc47:	e8 38 30 02 00       	call   f0130c84 <find_block>
f010dc4c:	83 c4 10             	add    $0x10,%esp
f010dc4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010dc52:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dc56:	74 1a                	je     f010dc72 <test_find_block+0x301>
f010dc58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc5b:	8b 40 0c             	mov    0xc(%eax),%eax
f010dc5e:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010dc63:	75 0d                	jne    f010dc72 <test_find_block+0x301>
f010dc65:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dc68:	8b 40 08             	mov    0x8(%eax),%eax
f010dc6b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010dc70:	74 17                	je     f010dc89 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dc72:	83 ec 04             	sub    $0x4,%esp
f010dc75:	68 08 70 13 f0       	push   $0xf0137008
f010dc7a:	68 ed 00 00 00       	push   $0xed
f010dc7f:	68 54 6c 13 f0       	push   $0xf0136c54
f010dc84:	e8 1d 25 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010dc89:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010dc8e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dc91:	75 09                	jne    f010dc9c <test_find_block+0x32b>
f010dc93:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010dc98:	85 c0                	test   %eax,%eax
f010dc9a:	74 17                	je     f010dcb3 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010dc9c:	83 ec 04             	sub    $0x4,%esp
f010dc9f:	68 3c 70 13 f0       	push   $0xf013703c
f010dca4:	68 f2 00 00 00       	push   $0xf2
f010dca9:	68 54 6c 13 f0       	push   $0xf0136c54
f010dcae:	e8 f3 24 ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010dcb3:	83 ec 0c             	sub    $0xc,%esp
f010dcb6:	68 a0 70 13 f0       	push   $0xf01370a0
f010dcbb:	e8 6d 2f ff ff       	call   f0100c2d <cprintf>
f010dcc0:	83 c4 10             	add    $0x10,%esp
}
f010dcc3:	90                   	nop
f010dcc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010dcc7:	5b                   	pop    %ebx
f010dcc8:	5e                   	pop    %esi
f010dcc9:	5f                   	pop    %edi
f010dcca:	5d                   	pop    %ebp
f010dccb:	c3                   	ret    

f010dccc <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010dccc:	55                   	push   %ebp
f010dccd:	89 e5                	mov    %esp,%ebp
f010dccf:	57                   	push   %edi
f010dcd0:	56                   	push   %esi
f010dcd1:	53                   	push   %ebx
f010dcd2:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010dcd8:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dcdf:	83 ec 0c             	sub    $0xc,%esp
f010dce2:	ff 75 e0             	pushl  -0x20(%ebp)
f010dce5:	e8 e5 2e 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010dcea:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010dced:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010dcf4:	00 00 00 
f010dcf7:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010dcfe:	00 00 00 
f010dd01:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010dd08:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010dd0b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010dd0e:	bb 80 73 13 f0       	mov    $0xf0137380,%ebx
f010dd13:	ba 08 00 00 00       	mov    $0x8,%edx
f010dd18:	89 c7                	mov    %eax,%edi
f010dd1a:	89 de                	mov    %ebx,%esi
f010dd1c:	89 d1                	mov    %edx,%ecx
f010dd1e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010dd20:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010dd23:	bb a0 73 13 f0       	mov    $0xf01373a0,%ebx
f010dd28:	ba 08 00 00 00       	mov    $0x8,%edx
f010dd2d:	89 c7                	mov    %eax,%edi
f010dd2f:	89 de                	mov    %ebx,%esi
f010dd31:	89 d1                	mov    %edx,%ecx
f010dd33:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010dd35:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010dd3c:	00 00 00 
f010dd3f:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010dd46:	00 00 00 
f010dd49:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010dd50:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010dd53:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010dd5a:	e9 5f 01 00 00       	jmp    f010debe <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010dd5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd62:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010dd66:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd69:	c1 e2 04             	shl    $0x4,%edx
f010dd6c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dd6f:	01 da                	add    %ebx,%edx
f010dd71:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010dd77:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010dd79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd7c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010dd80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd83:	c1 e2 04             	shl    $0x4,%edx
f010dd86:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dd89:	01 f2                	add    %esi,%edx
f010dd8b:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010dd91:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010dd93:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010dd97:	0f 85 92 00 00 00    	jne    f010de2f <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010dd9d:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010dda2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dda5:	c1 e2 04             	shl    $0x4,%edx
f010dda8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ddab:	01 fa                	add    %edi,%edx
f010ddad:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ddb3:	89 02                	mov    %eax,(%edx)
f010ddb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ddb8:	c1 e0 04             	shl    $0x4,%eax
f010ddbb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ddbe:	01 d8                	add    %ebx,%eax
f010ddc0:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ddc5:	8b 00                	mov    (%eax),%eax
f010ddc7:	85 c0                	test   %eax,%eax
f010ddc9:	74 18                	je     f010dde3 <test_alloc_block_FF+0x117>
f010ddcb:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010ddd0:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ddd6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ddd9:	c1 e1 04             	shl    $0x4,%ecx
f010dddc:	01 ca                	add    %ecx,%edx
f010ddde:	89 50 04             	mov    %edx,0x4(%eax)
f010dde1:	eb 13                	jmp    f010ddf6 <test_alloc_block_FF+0x12a>
f010dde3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010dde9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddec:	c1 e2 04             	shl    $0x4,%edx
f010ddef:	01 d0                	add    %edx,%eax
f010ddf1:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010ddf6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ddfc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddff:	c1 e2 04             	shl    $0x4,%edx
f010de02:	01 d0                	add    %edx,%eax
f010de04:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010de09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de0c:	c1 e0 04             	shl    $0x4,%eax
f010de0f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010de12:	01 f0                	add    %esi,%eax
f010de14:	2d d0 00 00 00       	sub    $0xd0,%eax
f010de19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010de1f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010de24:	40                   	inc    %eax
f010de25:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010de2a:	e9 8c 00 00 00       	jmp    f010debb <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010de2f:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010de34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de37:	c1 e2 04             	shl    $0x4,%edx
f010de3a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010de3d:	01 fa                	add    %edi,%edx
f010de3f:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010de45:	89 02                	mov    %eax,(%edx)
f010de47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de4a:	c1 e0 04             	shl    $0x4,%eax
f010de4d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010de50:	01 d8                	add    %ebx,%eax
f010de52:	2d d0 00 00 00       	sub    $0xd0,%eax
f010de57:	8b 00                	mov    (%eax),%eax
f010de59:	85 c0                	test   %eax,%eax
f010de5b:	74 17                	je     f010de74 <test_alloc_block_FF+0x1a8>
f010de5d:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010de62:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010de68:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010de6b:	c1 e1 04             	shl    $0x4,%ecx
f010de6e:	01 ca                	add    %ecx,%edx
f010de70:	89 10                	mov    %edx,(%eax)
f010de72:	eb 13                	jmp    f010de87 <test_alloc_block_FF+0x1bb>
f010de74:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010de7a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de7d:	c1 e2 04             	shl    $0x4,%edx
f010de80:	01 d0                	add    %edx,%eax
f010de82:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010de87:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010de8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de90:	c1 e2 04             	shl    $0x4,%edx
f010de93:	01 d0                	add    %edx,%eax
f010de95:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010de9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de9d:	c1 e0 04             	shl    $0x4,%eax
f010dea0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dea3:	01 f0                	add    %esi,%eax
f010dea5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010deaa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010deb0:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010deb5:	40                   	inc    %eax
f010deb6:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010debb:	ff 45 e4             	incl   -0x1c(%ebp)
f010debe:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010dec2:	0f 8e 97 fe ff ff    	jle    f010dd5f <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010dec8:	83 ec 0c             	sub    $0xc,%esp
f010decb:	68 00 00 30 00       	push   $0x300000
f010ded0:	e8 94 30 02 00       	call   f0130f69 <alloc_block_FF>
f010ded5:	83 c4 10             	add    $0x10,%esp
f010ded8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010dedb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dedf:	74 17                	je     f010def8 <test_alloc_block_FF+0x22c>
f010dee1:	83 ec 04             	sub    $0x4,%esp
f010dee4:	68 0c 71 13 f0       	push   $0xf013710c
f010dee9:	68 15 01 00 00       	push   $0x115
f010deee:	68 54 6c 13 f0       	push   $0xf0136c54
f010def3:	e8 ae 22 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010def8:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010defd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010df00:	75 13                	jne    f010df15 <test_alloc_block_FF+0x249>
f010df02:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010df07:	83 f8 08             	cmp    $0x8,%eax
f010df0a:	75 09                	jne    f010df15 <test_alloc_block_FF+0x249>
f010df0c:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010df11:	85 c0                	test   %eax,%eax
f010df13:	74 17                	je     f010df2c <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010df15:	83 ec 04             	sub    $0x4,%esp
f010df18:	68 80 71 13 f0       	push   $0xf0137180
f010df1d:	68 19 01 00 00       	push   $0x119
f010df22:	68 54 6c 13 f0       	push   $0xf0136c54
f010df27:	e8 7a 22 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010df2c:	83 ec 0c             	sub    $0xc,%esp
f010df2f:	68 00 24 00 00       	push   $0x2400
f010df34:	e8 30 30 02 00       	call   f0130f69 <alloc_block_FF>
f010df39:	83 c4 10             	add    $0x10,%esp
f010df3c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010df3f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df43:	74 1a                	je     f010df5f <test_alloc_block_FF+0x293>
f010df45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df48:	8b 40 0c             	mov    0xc(%eax),%eax
f010df4b:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010df50:	75 0d                	jne    f010df5f <test_alloc_block_FF+0x293>
f010df52:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df55:	8b 40 08             	mov    0x8(%eax),%eax
f010df58:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010df5d:	74 17                	je     f010df76 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010df5f:	83 ec 04             	sub    $0x4,%esp
f010df62:	68 f8 71 13 f0       	push   $0xf01371f8
f010df67:	68 21 01 00 00       	push   $0x121
f010df6c:	68 54 6c 13 f0       	push   $0xf0136c54
f010df71:	e8 30 22 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010df76:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010df7b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010df7e:	75 13                	jne    f010df93 <test_alloc_block_FF+0x2c7>
f010df80:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010df85:	83 f8 07             	cmp    $0x7,%eax
f010df88:	75 09                	jne    f010df93 <test_alloc_block_FF+0x2c7>
f010df8a:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010df8f:	85 c0                	test   %eax,%eax
f010df91:	74 17                	je     f010dfaa <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010df93:	83 ec 04             	sub    $0x4,%esp
f010df96:	68 3c 72 13 f0       	push   $0xf013723c
f010df9b:	68 25 01 00 00       	push   $0x125
f010dfa0:	68 54 6c 13 f0       	push   $0xf0136c54
f010dfa5:	e8 fc 21 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010dfaa:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010dfb1:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010dfb4:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010dfbb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010dfc2:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010dfc9:	83 ec 0c             	sub    $0xc,%esp
f010dfcc:	ff 75 d8             	pushl  -0x28(%ebp)
f010dfcf:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010dfd5:	50                   	push   %eax
f010dfd6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010dfd9:	50                   	push   %eax
f010dfda:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010dfdd:	50                   	push   %eax
f010dfde:	68 c0 74 6e f0       	push   $0xf06e74c0
f010dfe3:	e8 5b 1c 00 00       	call   f010fc43 <check_list_data>
f010dfe8:	83 c4 20             	add    $0x20,%esp
f010dfeb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010dfee:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010dff2:	74 17                	je     f010e00b <test_alloc_block_FF+0x33f>
f010dff4:	83 ec 04             	sub    $0x4,%esp
f010dff7:	68 a0 72 13 f0       	push   $0xf01372a0
f010dffc:	68 2d 01 00 00       	push   $0x12d
f010e001:	68 54 6c 13 f0       	push   $0xf0136c54
f010e006:	e8 9b 21 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e00b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e011:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e014:	74 17                	je     f010e02d <test_alloc_block_FF+0x361>
f010e016:	83 ec 04             	sub    $0x4,%esp
f010e019:	68 ec 72 13 f0       	push   $0xf01372ec
f010e01e:	68 2e 01 00 00       	push   $0x12e
f010e023:	68 54 6c 13 f0       	push   $0xf0136c54
f010e028:	e8 79 21 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e02d:	83 ec 0c             	sub    $0xc,%esp
f010e030:	68 00 00 10 00       	push   $0x100000
f010e035:	e8 2f 2f 02 00       	call   f0130f69 <alloc_block_FF>
f010e03a:	83 c4 10             	add    $0x10,%esp
f010e03d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e040:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e044:	74 1a                	je     f010e060 <test_alloc_block_FF+0x394>
f010e046:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e049:	8b 40 0c             	mov    0xc(%eax),%eax
f010e04c:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e051:	75 0d                	jne    f010e060 <test_alloc_block_FF+0x394>
f010e053:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e056:	8b 40 08             	mov    0x8(%eax),%eax
f010e059:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e05e:	74 17                	je     f010e077 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e060:	83 ec 04             	sub    $0x4,%esp
f010e063:	68 f8 71 13 f0       	push   $0xf01371f8
f010e068:	68 36 01 00 00       	push   $0x136
f010e06d:	68 54 6c 13 f0       	push   $0xf0136c54
f010e072:	e8 2f 21 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e077:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e07c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e07f:	4a                   	dec    %edx
f010e080:	39 d0                	cmp    %edx,%eax
f010e082:	75 13                	jne    f010e097 <test_alloc_block_FF+0x3cb>
f010e084:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e089:	83 f8 07             	cmp    $0x7,%eax
f010e08c:	75 09                	jne    f010e097 <test_alloc_block_FF+0x3cb>
f010e08e:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e093:	85 c0                	test   %eax,%eax
f010e095:	74 17                	je     f010e0ae <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e097:	83 ec 04             	sub    $0x4,%esp
f010e09a:	68 3c 72 13 f0       	push   $0xf013723c
f010e09f:	68 3a 01 00 00       	push   $0x13a
f010e0a4:	68 54 6c 13 f0       	push   $0xf0136c54
f010e0a9:	e8 f8 20 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e0ae:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e0b5:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e0b8:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e0bf:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e0c6:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e0cd:	83 ec 0c             	sub    $0xc,%esp
f010e0d0:	ff 75 d8             	pushl  -0x28(%ebp)
f010e0d3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e0d9:	50                   	push   %eax
f010e0da:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e0dd:	50                   	push   %eax
f010e0de:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e0e1:	50                   	push   %eax
f010e0e2:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e0e7:	e8 57 1b 00 00       	call   f010fc43 <check_list_data>
f010e0ec:	83 c4 20             	add    $0x20,%esp
f010e0ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e0f2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e0f6:	74 17                	je     f010e10f <test_alloc_block_FF+0x443>
f010e0f8:	83 ec 04             	sub    $0x4,%esp
f010e0fb:	68 a0 72 13 f0       	push   $0xf01372a0
f010e100:	68 42 01 00 00       	push   $0x142
f010e105:	68 54 6c 13 f0       	push   $0xf0136c54
f010e10a:	e8 97 20 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e10f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e115:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e118:	74 17                	je     f010e131 <test_alloc_block_FF+0x465>
f010e11a:	83 ec 04             	sub    $0x4,%esp
f010e11d:	68 ec 72 13 f0       	push   $0xf01372ec
f010e122:	68 43 01 00 00       	push   $0x143
f010e127:	68 54 6c 13 f0       	push   $0xf0136c54
f010e12c:	e8 75 20 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e131:	83 ec 0c             	sub    $0xc,%esp
f010e134:	68 38 73 13 f0       	push   $0xf0137338
f010e139:	e8 ef 2a ff ff       	call   f0100c2d <cprintf>
f010e13e:	83 c4 10             	add    $0x10,%esp
}
f010e141:	90                   	nop
f010e142:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e145:	5b                   	pop    %ebx
f010e146:	5e                   	pop    %esi
f010e147:	5f                   	pop    %edi
f010e148:	5d                   	pop    %ebp
f010e149:	c3                   	ret    

f010e14a <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e14a:	55                   	push   %ebp
f010e14b:	89 e5                	mov    %esp,%ebp
f010e14d:	57                   	push   %edi
f010e14e:	56                   	push   %esi
f010e14f:	53                   	push   %ebx
f010e150:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e156:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e15d:	83 ec 0c             	sub    $0xc,%esp
f010e160:	ff 75 e0             	pushl  -0x20(%ebp)
f010e163:	e8 67 2a 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010e168:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e16b:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010e172:	00 00 00 
f010e175:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010e17c:	00 00 00 
f010e17f:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010e186:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e189:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e18c:	bb b4 75 13 f0       	mov    $0xf01375b4,%ebx
f010e191:	ba 07 00 00 00       	mov    $0x7,%edx
f010e196:	89 c7                	mov    %eax,%edi
f010e198:	89 de                	mov    %ebx,%esi
f010e19a:	89 d1                	mov    %edx,%ecx
f010e19c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e19e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e1a1:	bb d0 75 13 f0       	mov    $0xf01375d0,%ebx
f010e1a6:	ba 07 00 00 00       	mov    $0x7,%edx
f010e1ab:	89 c7                	mov    %eax,%edi
f010e1ad:	89 de                	mov    %ebx,%esi
f010e1af:	89 d1                	mov    %edx,%ecx
f010e1b1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e1b3:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010e1ba:	00 00 00 
f010e1bd:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010e1c4:	00 00 00 
f010e1c7:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010e1ce:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e1d1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e1d8:	e9 5f 01 00 00       	jmp    f010e33c <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e1dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1e0:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e1e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1e7:	c1 e2 04             	shl    $0x4,%edx
f010e1ea:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e1ed:	01 da                	add    %ebx,%edx
f010e1ef:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e1f5:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e1f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1fa:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e1fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e201:	c1 e2 04             	shl    $0x4,%edx
f010e204:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e207:	01 f2                	add    %esi,%edx
f010e209:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e20f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e211:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e215:	0f 85 92 00 00 00    	jne    f010e2ad <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e21b:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e220:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e223:	c1 e2 04             	shl    $0x4,%edx
f010e226:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e229:	01 fa                	add    %edi,%edx
f010e22b:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e231:	89 02                	mov    %eax,(%edx)
f010e233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e236:	c1 e0 04             	shl    $0x4,%eax
f010e239:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e23c:	01 d8                	add    %ebx,%eax
f010e23e:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e243:	8b 00                	mov    (%eax),%eax
f010e245:	85 c0                	test   %eax,%eax
f010e247:	74 18                	je     f010e261 <test_alloc_block_BF+0x117>
f010e249:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e24e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e254:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e257:	c1 e1 04             	shl    $0x4,%ecx
f010e25a:	01 ca                	add    %ecx,%edx
f010e25c:	89 50 04             	mov    %edx,0x4(%eax)
f010e25f:	eb 13                	jmp    f010e274 <test_alloc_block_BF+0x12a>
f010e261:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e267:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e26a:	c1 e2 04             	shl    $0x4,%edx
f010e26d:	01 d0                	add    %edx,%eax
f010e26f:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e274:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e27a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e27d:	c1 e2 04             	shl    $0x4,%edx
f010e280:	01 d0                	add    %edx,%eax
f010e282:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e287:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e28a:	c1 e0 04             	shl    $0x4,%eax
f010e28d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e290:	01 f0                	add    %esi,%eax
f010e292:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e297:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e29d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e2a2:	40                   	inc    %eax
f010e2a3:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010e2a8:	e9 8c 00 00 00       	jmp    f010e339 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e2ad:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e2b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e2b5:	c1 e2 04             	shl    $0x4,%edx
f010e2b8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e2bb:	01 fa                	add    %edi,%edx
f010e2bd:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010e2c3:	89 02                	mov    %eax,(%edx)
f010e2c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e2c8:	c1 e0 04             	shl    $0x4,%eax
f010e2cb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e2ce:	01 d8                	add    %ebx,%eax
f010e2d0:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e2d5:	8b 00                	mov    (%eax),%eax
f010e2d7:	85 c0                	test   %eax,%eax
f010e2d9:	74 17                	je     f010e2f2 <test_alloc_block_BF+0x1a8>
f010e2db:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e2e0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e2e6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e2e9:	c1 e1 04             	shl    $0x4,%ecx
f010e2ec:	01 ca                	add    %ecx,%edx
f010e2ee:	89 10                	mov    %edx,(%eax)
f010e2f0:	eb 13                	jmp    f010e305 <test_alloc_block_BF+0x1bb>
f010e2f2:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e2f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e2fb:	c1 e2 04             	shl    $0x4,%edx
f010e2fe:	01 d0                	add    %edx,%eax
f010e300:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e305:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e30b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e30e:	c1 e2 04             	shl    $0x4,%edx
f010e311:	01 d0                	add    %edx,%eax
f010e313:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e318:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e31b:	c1 e0 04             	shl    $0x4,%eax
f010e31e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e321:	01 f0                	add    %esi,%eax
f010e323:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e328:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e32e:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e333:	40                   	inc    %eax
f010e334:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e339:	ff 45 e4             	incl   -0x1c(%ebp)
f010e33c:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010e340:	0f 8e 97 fe ff ff    	jle    f010e1dd <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010e346:	83 ec 0c             	sub    $0xc,%esp
f010e349:	68 00 00 40 00       	push   $0x400000
f010e34e:	e8 e3 2d 02 00       	call   f0131136 <alloc_block_BF>
f010e353:	83 c4 10             	add    $0x10,%esp
f010e356:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010e359:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e35d:	74 17                	je     f010e376 <test_alloc_block_BF+0x22c>
f010e35f:	83 ec 04             	sub    $0x4,%esp
f010e362:	68 c0 73 13 f0       	push   $0xf01373c0
f010e367:	68 66 01 00 00       	push   $0x166
f010e36c:	68 54 6c 13 f0       	push   $0xf0136c54
f010e371:	e8 30 1e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e376:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e37b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e37e:	75 13                	jne    f010e393 <test_alloc_block_BF+0x249>
f010e380:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e385:	83 f8 07             	cmp    $0x7,%eax
f010e388:	75 09                	jne    f010e393 <test_alloc_block_BF+0x249>
f010e38a:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e38f:	85 c0                	test   %eax,%eax
f010e391:	74 17                	je     f010e3aa <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e393:	83 ec 04             	sub    $0x4,%esp
f010e396:	68 80 71 13 f0       	push   $0xf0137180
f010e39b:	68 6a 01 00 00       	push   $0x16a
f010e3a0:	68 54 6c 13 f0       	push   $0xf0136c54
f010e3a5:	e8 fc 1d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e3aa:	83 ec 0c             	sub    $0xc,%esp
f010e3ad:	68 00 00 10 00       	push   $0x100000
f010e3b2:	e8 7f 2d 02 00       	call   f0131136 <alloc_block_BF>
f010e3b7:	83 c4 10             	add    $0x10,%esp
f010e3ba:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010e3bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e3c1:	74 1a                	je     f010e3dd <test_alloc_block_BF+0x293>
f010e3c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3c6:	8b 40 0c             	mov    0xc(%eax),%eax
f010e3c9:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e3ce:	75 0d                	jne    f010e3dd <test_alloc_block_BF+0x293>
f010e3d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e3d3:	8b 40 08             	mov    0x8(%eax),%eax
f010e3d6:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010e3db:	74 17                	je     f010e3f4 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e3dd:	83 ec 04             	sub    $0x4,%esp
f010e3e0:	68 34 74 13 f0       	push   $0xf0137434
f010e3e5:	68 72 01 00 00       	push   $0x172
f010e3ea:	68 54 6c 13 f0       	push   $0xf0136c54
f010e3ef:	e8 b2 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e3f4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e3f9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e3fc:	75 13                	jne    f010e411 <test_alloc_block_BF+0x2c7>
f010e3fe:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e403:	83 f8 06             	cmp    $0x6,%eax
f010e406:	75 09                	jne    f010e411 <test_alloc_block_BF+0x2c7>
f010e408:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e40d:	85 c0                	test   %eax,%eax
f010e40f:	74 17                	je     f010e428 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e411:	83 ec 04             	sub    $0x4,%esp
f010e414:	68 78 74 13 f0       	push   $0xf0137478
f010e419:	68 76 01 00 00       	push   $0x176
f010e41e:	68 54 6c 13 f0       	push   $0xf0136c54
f010e423:	e8 7e 1d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e428:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e42f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010e432:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010e439:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010e440:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e447:	83 ec 0c             	sub    $0xc,%esp
f010e44a:	ff 75 d8             	pushl  -0x28(%ebp)
f010e44d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e453:	50                   	push   %eax
f010e454:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e457:	50                   	push   %eax
f010e458:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e45b:	50                   	push   %eax
f010e45c:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e461:	e8 dd 17 00 00       	call   f010fc43 <check_list_data>
f010e466:	83 c4 20             	add    $0x20,%esp
f010e469:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e46c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e470:	74 17                	je     f010e489 <test_alloc_block_BF+0x33f>
f010e472:	83 ec 04             	sub    $0x4,%esp
f010e475:	68 dc 74 13 f0       	push   $0xf01374dc
f010e47a:	68 7e 01 00 00       	push   $0x17e
f010e47f:	68 54 6c 13 f0       	push   $0xf0136c54
f010e484:	e8 1d 1d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e489:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e48f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e492:	74 17                	je     f010e4ab <test_alloc_block_BF+0x361>
f010e494:	83 ec 04             	sub    $0x4,%esp
f010e497:	68 28 75 13 f0       	push   $0xf0137528
f010e49c:	68 7f 01 00 00       	push   $0x17f
f010e4a1:	68 54 6c 13 f0       	push   $0xf0136c54
f010e4a6:	e8 fb 1c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e4ab:	83 ec 0c             	sub    $0xc,%esp
f010e4ae:	68 00 00 10 00       	push   $0x100000
f010e4b3:	e8 7e 2c 02 00       	call   f0131136 <alloc_block_BF>
f010e4b8:	83 c4 10             	add    $0x10,%esp
f010e4bb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e4be:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e4c2:	74 1a                	je     f010e4de <test_alloc_block_BF+0x394>
f010e4c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e4c7:	8b 40 0c             	mov    0xc(%eax),%eax
f010e4ca:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e4cf:	75 0d                	jne    f010e4de <test_alloc_block_BF+0x394>
f010e4d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e4d4:	8b 40 08             	mov    0x8(%eax),%eax
f010e4d7:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e4dc:	74 17                	je     f010e4f5 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e4de:	83 ec 04             	sub    $0x4,%esp
f010e4e1:	68 34 74 13 f0       	push   $0xf0137434
f010e4e6:	68 87 01 00 00       	push   $0x187
f010e4eb:	68 54 6c 13 f0       	push   $0xf0136c54
f010e4f0:	e8 b1 1c ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e4f5:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e4fa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e4fd:	4a                   	dec    %edx
f010e4fe:	39 d0                	cmp    %edx,%eax
f010e500:	75 13                	jne    f010e515 <test_alloc_block_BF+0x3cb>
f010e502:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e507:	83 f8 06             	cmp    $0x6,%eax
f010e50a:	75 09                	jne    f010e515 <test_alloc_block_BF+0x3cb>
f010e50c:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e511:	85 c0                	test   %eax,%eax
f010e513:	74 17                	je     f010e52c <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e515:	83 ec 04             	sub    $0x4,%esp
f010e518:	68 78 74 13 f0       	push   $0xf0137478
f010e51d:	68 8b 01 00 00       	push   $0x18b
f010e522:	68 54 6c 13 f0       	push   $0xf0136c54
f010e527:	e8 7a 1c ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e52c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e533:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e536:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e53d:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e544:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e54b:	83 ec 0c             	sub    $0xc,%esp
f010e54e:	ff 75 d8             	pushl  -0x28(%ebp)
f010e551:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e557:	50                   	push   %eax
f010e558:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e55b:	50                   	push   %eax
f010e55c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e55f:	50                   	push   %eax
f010e560:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e565:	e8 d9 16 00 00       	call   f010fc43 <check_list_data>
f010e56a:	83 c4 20             	add    $0x20,%esp
f010e56d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e570:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e574:	74 17                	je     f010e58d <test_alloc_block_BF+0x443>
f010e576:	83 ec 04             	sub    $0x4,%esp
f010e579:	68 dc 74 13 f0       	push   $0xf01374dc
f010e57e:	68 93 01 00 00       	push   $0x193
f010e583:	68 54 6c 13 f0       	push   $0xf0136c54
f010e588:	e8 19 1c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e58d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e593:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e596:	74 17                	je     f010e5af <test_alloc_block_BF+0x465>
f010e598:	83 ec 04             	sub    $0x4,%esp
f010e59b:	68 28 75 13 f0       	push   $0xf0137528
f010e5a0:	68 94 01 00 00       	push   $0x194
f010e5a5:	68 54 6c 13 f0       	push   $0xf0136c54
f010e5aa:	e8 f7 1b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010e5af:	83 ec 0c             	sub    $0xc,%esp
f010e5b2:	68 00 0c 00 00       	push   $0xc00
f010e5b7:	e8 7a 2b 02 00       	call   f0131136 <alloc_block_BF>
f010e5bc:	83 c4 10             	add    $0x10,%esp
f010e5bf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010e5c2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e5c6:	74 1a                	je     f010e5e2 <test_alloc_block_BF+0x498>
f010e5c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e5cb:	8b 40 0c             	mov    0xc(%eax),%eax
f010e5ce:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e5d3:	75 0d                	jne    f010e5e2 <test_alloc_block_BF+0x498>
f010e5d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e5d8:	8b 40 08             	mov    0x8(%eax),%eax
f010e5db:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010e5e0:	74 17                	je     f010e5f9 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e5e2:	83 ec 04             	sub    $0x4,%esp
f010e5e5:	68 34 74 13 f0       	push   $0xf0137434
f010e5ea:	68 9c 01 00 00       	push   $0x19c
f010e5ef:	68 54 6c 13 f0       	push   $0xf0136c54
f010e5f4:	e8 ad 1b ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e5f9:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e5fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e601:	83 ea 02             	sub    $0x2,%edx
f010e604:	39 d0                	cmp    %edx,%eax
f010e606:	75 13                	jne    f010e61b <test_alloc_block_BF+0x4d1>
f010e608:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e60d:	83 f8 06             	cmp    $0x6,%eax
f010e610:	75 09                	jne    f010e61b <test_alloc_block_BF+0x4d1>
f010e612:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e617:	85 c0                	test   %eax,%eax
f010e619:	74 17                	je     f010e632 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e61b:	83 ec 04             	sub    $0x4,%esp
f010e61e:	68 78 74 13 f0       	push   $0xf0137478
f010e623:	68 a0 01 00 00       	push   $0x1a0
f010e628:	68 54 6c 13 f0       	push   $0xf0136c54
f010e62d:	e8 74 1b ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e632:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e639:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e63c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010e643:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010e64a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e651:	83 ec 0c             	sub    $0xc,%esp
f010e654:	ff 75 d8             	pushl  -0x28(%ebp)
f010e657:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e65d:	50                   	push   %eax
f010e65e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e661:	50                   	push   %eax
f010e662:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e665:	50                   	push   %eax
f010e666:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e66b:	e8 d3 15 00 00       	call   f010fc43 <check_list_data>
f010e670:	83 c4 20             	add    $0x20,%esp
f010e673:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e676:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e67a:	74 17                	je     f010e693 <test_alloc_block_BF+0x549>
f010e67c:	83 ec 04             	sub    $0x4,%esp
f010e67f:	68 dc 74 13 f0       	push   $0xf01374dc
f010e684:	68 a8 01 00 00       	push   $0x1a8
f010e689:	68 54 6c 13 f0       	push   $0xf0136c54
f010e68e:	e8 13 1b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e693:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e699:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e69c:	74 17                	je     f010e6b5 <test_alloc_block_BF+0x56b>
f010e69e:	83 ec 04             	sub    $0x4,%esp
f010e6a1:	68 28 75 13 f0       	push   $0xf0137528
f010e6a6:	68 a9 01 00 00       	push   $0x1a9
f010e6ab:	68 54 6c 13 f0       	push   $0xf0136c54
f010e6b0:	e8 f1 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010e6b5:	83 ec 0c             	sub    $0xc,%esp
f010e6b8:	68 00 08 00 00       	push   $0x800
f010e6bd:	e8 74 2a 02 00       	call   f0131136 <alloc_block_BF>
f010e6c2:	83 c4 10             	add    $0x10,%esp
f010e6c5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010e6c8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e6cc:	74 17                	je     f010e6e5 <test_alloc_block_BF+0x59b>
f010e6ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6d1:	8b 40 0c             	mov    0xc(%eax),%eax
f010e6d4:	3d 00 08 00 00       	cmp    $0x800,%eax
f010e6d9:	75 0a                	jne    f010e6e5 <test_alloc_block_BF+0x59b>
f010e6db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6de:	8b 40 08             	mov    0x8(%eax),%eax
f010e6e1:	85 c0                	test   %eax,%eax
f010e6e3:	74 17                	je     f010e6fc <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e6e5:	83 ec 04             	sub    $0x4,%esp
f010e6e8:	68 34 74 13 f0       	push   $0xf0137434
f010e6ed:	68 b1 01 00 00       	push   $0x1b1
f010e6f2:	68 54 6c 13 f0       	push   $0xf0136c54
f010e6f7:	e8 aa 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e6fc:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010e701:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e704:	83 ea 02             	sub    $0x2,%edx
f010e707:	39 d0                	cmp    %edx,%eax
f010e709:	75 13                	jne    f010e71e <test_alloc_block_BF+0x5d4>
f010e70b:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e710:	83 f8 05             	cmp    $0x5,%eax
f010e713:	75 09                	jne    f010e71e <test_alloc_block_BF+0x5d4>
f010e715:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010e71a:	85 c0                	test   %eax,%eax
f010e71c:	74 17                	je     f010e735 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e71e:	83 ec 04             	sub    $0x4,%esp
f010e721:	68 78 74 13 f0       	push   $0xf0137478
f010e726:	68 b5 01 00 00       	push   $0x1b5
f010e72b:	68 54 6c 13 f0       	push   $0xf0136c54
f010e730:	e8 71 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e735:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e73c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010e73f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010e746:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010e74d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e754:	83 ec 0c             	sub    $0xc,%esp
f010e757:	ff 75 d8             	pushl  -0x28(%ebp)
f010e75a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e760:	50                   	push   %eax
f010e761:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e764:	50                   	push   %eax
f010e765:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e768:	50                   	push   %eax
f010e769:	68 c0 74 6e f0       	push   $0xf06e74c0
f010e76e:	e8 d0 14 00 00       	call   f010fc43 <check_list_data>
f010e773:	83 c4 20             	add    $0x20,%esp
f010e776:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e779:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e77d:	74 17                	je     f010e796 <test_alloc_block_BF+0x64c>
f010e77f:	83 ec 04             	sub    $0x4,%esp
f010e782:	68 dc 74 13 f0       	push   $0xf01374dc
f010e787:	68 bd 01 00 00       	push   $0x1bd
f010e78c:	68 54 6c 13 f0       	push   $0xf0136c54
f010e791:	e8 10 1a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e796:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e79c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e79f:	74 17                	je     f010e7b8 <test_alloc_block_BF+0x66e>
f010e7a1:	83 ec 04             	sub    $0x4,%esp
f010e7a4:	68 28 75 13 f0       	push   $0xf0137528
f010e7a9:	68 be 01 00 00       	push   $0x1be
f010e7ae:	68 54 6c 13 f0       	push   $0xf0136c54
f010e7b3:	e8 ee 19 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010e7b8:	83 ec 0c             	sub    $0xc,%esp
f010e7bb:	68 74 75 13 f0       	push   $0xf0137574
f010e7c0:	e8 68 24 ff ff       	call   f0100c2d <cprintf>
f010e7c5:	83 c4 10             	add    $0x10,%esp
}
f010e7c8:	90                   	nop
f010e7c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e7cc:	5b                   	pop    %ebx
f010e7cd:	5e                   	pop    %esi
f010e7ce:	5f                   	pop    %edi
f010e7cf:	5d                   	pop    %ebp
f010e7d0:	c3                   	ret    

f010e7d1 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010e7d1:	55                   	push   %ebp
f010e7d2:	89 e5                	mov    %esp,%ebp
f010e7d4:	57                   	push   %edi
f010e7d5:	56                   	push   %esi
f010e7d6:	53                   	push   %ebx
f010e7d7:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e7dd:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e7e4:	83 ec 0c             	sub    $0xc,%esp
f010e7e7:	ff 75 e0             	pushl  -0x20(%ebp)
f010e7ea:	e8 e0 23 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010e7ef:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e7f2:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010e7f9:	00 00 00 
f010e7fc:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010e803:	00 00 00 
f010e806:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010e80d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e810:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e813:	bb 80 73 13 f0       	mov    $0xf0137380,%ebx
f010e818:	ba 08 00 00 00       	mov    $0x8,%edx
f010e81d:	89 c7                	mov    %eax,%edi
f010e81f:	89 de                	mov    %ebx,%esi
f010e821:	89 d1                	mov    %edx,%ecx
f010e823:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010e825:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e828:	bb e0 77 13 f0       	mov    $0xf01377e0,%ebx
f010e82d:	ba 08 00 00 00       	mov    $0x8,%edx
f010e832:	89 c7                	mov    %eax,%edi
f010e834:	89 de                	mov    %ebx,%esi
f010e836:	89 d1                	mov    %edx,%ecx
f010e838:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e83a:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010e841:	00 00 00 
f010e844:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010e84b:	00 00 00 
f010e84e:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010e855:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010e858:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e85f:	e9 5f 01 00 00       	jmp    f010e9c3 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e864:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e867:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e86b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e86e:	c1 e2 04             	shl    $0x4,%edx
f010e871:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e874:	01 da                	add    %ebx,%edx
f010e876:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e87c:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e87e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e881:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e885:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e888:	c1 e2 04             	shl    $0x4,%edx
f010e88b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e88e:	01 f2                	add    %esi,%edx
f010e890:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e896:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e898:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e89c:	0f 85 92 00 00 00    	jne    f010e934 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e8a2:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e8a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8aa:	c1 e2 04             	shl    $0x4,%edx
f010e8ad:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e8b0:	01 fa                	add    %edi,%edx
f010e8b2:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e8b8:	89 02                	mov    %eax,(%edx)
f010e8ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8bd:	c1 e0 04             	shl    $0x4,%eax
f010e8c0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e8c3:	01 d8                	add    %ebx,%eax
f010e8c5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e8ca:	8b 00                	mov    (%eax),%eax
f010e8cc:	85 c0                	test   %eax,%eax
f010e8ce:	74 18                	je     f010e8e8 <test_alloc_block_NF+0x117>
f010e8d0:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f010e8d5:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e8db:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e8de:	c1 e1 04             	shl    $0x4,%ecx
f010e8e1:	01 ca                	add    %ecx,%edx
f010e8e3:	89 50 04             	mov    %edx,0x4(%eax)
f010e8e6:	eb 13                	jmp    f010e8fb <test_alloc_block_NF+0x12a>
f010e8e8:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e8ee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e8f1:	c1 e2 04             	shl    $0x4,%edx
f010e8f4:	01 d0                	add    %edx,%eax
f010e8f6:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e8fb:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e901:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e904:	c1 e2 04             	shl    $0x4,%edx
f010e907:	01 d0                	add    %edx,%eax
f010e909:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e90e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e911:	c1 e0 04             	shl    $0x4,%eax
f010e914:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e917:	01 f0                	add    %esi,%eax
f010e919:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e91e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e924:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e929:	40                   	inc    %eax
f010e92a:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
f010e92f:	e9 8c 00 00 00       	jmp    f010e9c0 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e934:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e939:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e93c:	c1 e2 04             	shl    $0x4,%edx
f010e93f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e942:	01 fa                	add    %edi,%edx
f010e944:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e94a:	89 02                	mov    %eax,(%edx)
f010e94c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e94f:	c1 e0 04             	shl    $0x4,%eax
f010e952:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e955:	01 d8                	add    %ebx,%eax
f010e957:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e95c:	8b 00                	mov    (%eax),%eax
f010e95e:	85 c0                	test   %eax,%eax
f010e960:	74 17                	je     f010e979 <test_alloc_block_NF+0x1a8>
f010e962:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f010e967:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e96d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e970:	c1 e1 04             	shl    $0x4,%ecx
f010e973:	01 ca                	add    %ecx,%edx
f010e975:	89 10                	mov    %edx,(%eax)
f010e977:	eb 13                	jmp    f010e98c <test_alloc_block_NF+0x1bb>
f010e979:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e97f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e982:	c1 e2 04             	shl    $0x4,%edx
f010e985:	01 d0                	add    %edx,%eax
f010e987:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f010e98c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e992:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e995:	c1 e2 04             	shl    $0x4,%edx
f010e998:	01 d0                	add    %edx,%eax
f010e99a:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f010e99f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9a2:	c1 e0 04             	shl    $0x4,%eax
f010e9a5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e9a8:	01 f0                	add    %esi,%eax
f010e9aa:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e9af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e9b5:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010e9ba:	40                   	inc    %eax
f010e9bb:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010e9c0:	ff 45 e4             	incl   -0x1c(%ebp)
f010e9c3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e9c7:	0f 8e 97 fe ff ff    	jle    f010e864 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010e9cd:	83 ec 0c             	sub    $0xc,%esp
f010e9d0:	68 00 00 a0 00       	push   $0xa00000
f010e9d5:	e8 6d 29 02 00       	call   f0131347 <alloc_block_NF>
f010e9da:	83 c4 10             	add    $0x10,%esp
f010e9dd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010e9e0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e9e4:	74 17                	je     f010e9fd <test_alloc_block_NF+0x22c>
f010e9e6:	83 ec 04             	sub    $0x4,%esp
f010e9e9:	68 ec 75 13 f0       	push   $0xf01375ec
f010e9ee:	68 e1 01 00 00       	push   $0x1e1
f010e9f3:	68 54 6c 13 f0       	push   $0xf0136c54
f010e9f8:	e8 a9 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e9fd:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ea02:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ea05:	75 13                	jne    f010ea1a <test_alloc_block_NF+0x249>
f010ea07:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ea0c:	83 f8 08             	cmp    $0x8,%eax
f010ea0f:	75 09                	jne    f010ea1a <test_alloc_block_NF+0x249>
f010ea11:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ea16:	85 c0                	test   %eax,%eax
f010ea18:	74 17                	je     f010ea31 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ea1a:	83 ec 04             	sub    $0x4,%esp
f010ea1d:	68 80 71 13 f0       	push   $0xf0137180
f010ea22:	68 e5 01 00 00       	push   $0x1e5
f010ea27:	68 54 6c 13 f0       	push   $0xf0136c54
f010ea2c:	e8 75 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ea31:	83 ec 0c             	sub    $0xc,%esp
f010ea34:	68 00 28 00 00       	push   $0x2800
f010ea39:	e8 09 29 02 00       	call   f0131347 <alloc_block_NF>
f010ea3e:	83 c4 10             	add    $0x10,%esp
f010ea41:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010ea44:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea48:	74 1a                	je     f010ea64 <test_alloc_block_NF+0x293>
f010ea4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea4d:	8b 40 0c             	mov    0xc(%eax),%eax
f010ea50:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010ea55:	75 0d                	jne    f010ea64 <test_alloc_block_NF+0x293>
f010ea57:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea5a:	8b 40 08             	mov    0x8(%eax),%eax
f010ea5d:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ea62:	74 17                	je     f010ea7b <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ea64:	83 ec 04             	sub    $0x4,%esp
f010ea67:	68 60 76 13 f0       	push   $0xf0137660
f010ea6c:	68 ed 01 00 00       	push   $0x1ed
f010ea71:	68 54 6c 13 f0       	push   $0xf0136c54
f010ea76:	e8 2b 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea7b:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ea80:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ea83:	75 13                	jne    f010ea98 <test_alloc_block_NF+0x2c7>
f010ea85:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ea8a:	83 f8 07             	cmp    $0x7,%eax
f010ea8d:	75 09                	jne    f010ea98 <test_alloc_block_NF+0x2c7>
f010ea8f:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ea94:	85 c0                	test   %eax,%eax
f010ea96:	74 17                	je     f010eaaf <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ea98:	83 ec 04             	sub    $0x4,%esp
f010ea9b:	68 a4 76 13 f0       	push   $0xf01376a4
f010eaa0:	68 f1 01 00 00       	push   $0x1f1
f010eaa5:	68 54 6c 13 f0       	push   $0xf0136c54
f010eaaa:	e8 f7 16 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010eaaf:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eab6:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010eab9:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010eac0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010eac7:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eace:	83 ec 0c             	sub    $0xc,%esp
f010ead1:	ff 75 d8             	pushl  -0x28(%ebp)
f010ead4:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eada:	50                   	push   %eax
f010eadb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eade:	50                   	push   %eax
f010eadf:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eae2:	50                   	push   %eax
f010eae3:	68 c0 74 6e f0       	push   $0xf06e74c0
f010eae8:	e8 56 11 00 00       	call   f010fc43 <check_list_data>
f010eaed:	83 c4 20             	add    $0x20,%esp
f010eaf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010eaf3:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eaf7:	74 17                	je     f010eb10 <test_alloc_block_NF+0x33f>
f010eaf9:	83 ec 04             	sub    $0x4,%esp
f010eafc:	68 08 77 13 f0       	push   $0xf0137708
f010eb01:	68 f9 01 00 00       	push   $0x1f9
f010eb06:	68 54 6c 13 f0       	push   $0xf0136c54
f010eb0b:	e8 96 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010eb10:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eb16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eb19:	74 17                	je     f010eb32 <test_alloc_block_NF+0x361>
f010eb1b:	83 ec 04             	sub    $0x4,%esp
f010eb1e:	68 54 77 13 f0       	push   $0xf0137754
f010eb23:	68 fa 01 00 00       	push   $0x1fa
f010eb28:	68 54 6c 13 f0       	push   $0xf0136c54
f010eb2d:	e8 74 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010eb32:	83 ec 0c             	sub    $0xc,%esp
f010eb35:	68 00 00 20 00       	push   $0x200000
f010eb3a:	e8 08 28 02 00       	call   f0131347 <alloc_block_NF>
f010eb3f:	83 c4 10             	add    $0x10,%esp
f010eb42:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010eb45:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb49:	74 1a                	je     f010eb65 <test_alloc_block_NF+0x394>
f010eb4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb4e:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb51:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010eb56:	75 0d                	jne    f010eb65 <test_alloc_block_NF+0x394>
f010eb58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb5b:	8b 40 08             	mov    0x8(%eax),%eax
f010eb5e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010eb63:	74 17                	je     f010eb7c <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010eb65:	83 ec 04             	sub    $0x4,%esp
f010eb68:	68 60 76 13 f0       	push   $0xf0137660
f010eb6d:	68 03 02 00 00       	push   $0x203
f010eb72:	68 54 6c 13 f0       	push   $0xf0136c54
f010eb77:	e8 2a 16 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb7c:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010eb81:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb84:	75 13                	jne    f010eb99 <test_alloc_block_NF+0x3c8>
f010eb86:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010eb8b:	83 f8 06             	cmp    $0x6,%eax
f010eb8e:	75 09                	jne    f010eb99 <test_alloc_block_NF+0x3c8>
f010eb90:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010eb95:	85 c0                	test   %eax,%eax
f010eb97:	74 17                	je     f010ebb0 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb99:	83 ec 04             	sub    $0x4,%esp
f010eb9c:	68 a4 76 13 f0       	push   $0xf01376a4
f010eba1:	68 07 02 00 00       	push   $0x207
f010eba6:	68 54 6c 13 f0       	push   $0xf0136c54
f010ebab:	e8 f6 15 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ebb0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ebb7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ebba:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010ebc1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010ebc8:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ebcf:	83 ec 0c             	sub    $0xc,%esp
f010ebd2:	ff 75 d8             	pushl  -0x28(%ebp)
f010ebd5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ebdb:	50                   	push   %eax
f010ebdc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ebdf:	50                   	push   %eax
f010ebe0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ebe3:	50                   	push   %eax
f010ebe4:	68 c0 74 6e f0       	push   $0xf06e74c0
f010ebe9:	e8 55 10 00 00       	call   f010fc43 <check_list_data>
f010ebee:	83 c4 20             	add    $0x20,%esp
f010ebf1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ebf4:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ebf8:	74 17                	je     f010ec11 <test_alloc_block_NF+0x440>
f010ebfa:	83 ec 04             	sub    $0x4,%esp
f010ebfd:	68 08 77 13 f0       	push   $0xf0137708
f010ec02:	68 0f 02 00 00       	push   $0x20f
f010ec07:	68 54 6c 13 f0       	push   $0xf0136c54
f010ec0c:	e8 95 15 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ec11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ec17:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ec1a:	74 17                	je     f010ec33 <test_alloc_block_NF+0x462>
f010ec1c:	83 ec 04             	sub    $0x4,%esp
f010ec1f:	68 54 77 13 f0       	push   $0xf0137754
f010ec24:	68 10 02 00 00       	push   $0x210
f010ec29:	68 54 6c 13 f0       	push   $0xf0136c54
f010ec2e:	e8 73 15 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010ec33:	83 ec 0c             	sub    $0xc,%esp
f010ec36:	68 00 00 08 00       	push   $0x80000
f010ec3b:	e8 07 27 02 00       	call   f0131347 <alloc_block_NF>
f010ec40:	83 c4 10             	add    $0x10,%esp
f010ec43:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010ec46:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec4a:	74 1a                	je     f010ec66 <test_alloc_block_NF+0x495>
f010ec4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec4f:	8b 40 0c             	mov    0xc(%eax),%eax
f010ec52:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010ec57:	75 0d                	jne    f010ec66 <test_alloc_block_NF+0x495>
f010ec59:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec5c:	8b 40 08             	mov    0x8(%eax),%eax
f010ec5f:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ec64:	74 17                	je     f010ec7d <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ec66:	83 ec 04             	sub    $0x4,%esp
f010ec69:	68 60 76 13 f0       	push   $0xf0137660
f010ec6e:	68 19 02 00 00       	push   $0x219
f010ec73:	68 54 6c 13 f0       	push   $0xf0136c54
f010ec78:	e8 29 15 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec7d:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ec82:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ec85:	4a                   	dec    %edx
f010ec86:	39 d0                	cmp    %edx,%eax
f010ec88:	75 13                	jne    f010ec9d <test_alloc_block_NF+0x4cc>
f010ec8a:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ec8f:	83 f8 06             	cmp    $0x6,%eax
f010ec92:	75 09                	jne    f010ec9d <test_alloc_block_NF+0x4cc>
f010ec94:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ec99:	85 c0                	test   %eax,%eax
f010ec9b:	74 17                	je     f010ecb4 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec9d:	83 ec 04             	sub    $0x4,%esp
f010eca0:	68 a4 76 13 f0       	push   $0xf01376a4
f010eca5:	68 1d 02 00 00       	push   $0x21d
f010ecaa:	68 54 6c 13 f0       	push   $0xf0136c54
f010ecaf:	e8 f2 14 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ecb4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ecbb:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010ecbe:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010ecc5:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010eccc:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ecd3:	83 ec 0c             	sub    $0xc,%esp
f010ecd6:	ff 75 d8             	pushl  -0x28(%ebp)
f010ecd9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ecdf:	50                   	push   %eax
f010ece0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ece3:	50                   	push   %eax
f010ece4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ece7:	50                   	push   %eax
f010ece8:	68 c0 74 6e f0       	push   $0xf06e74c0
f010eced:	e8 51 0f 00 00       	call   f010fc43 <check_list_data>
f010ecf2:	83 c4 20             	add    $0x20,%esp
f010ecf5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ecf8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ecfc:	74 17                	je     f010ed15 <test_alloc_block_NF+0x544>
f010ecfe:	83 ec 04             	sub    $0x4,%esp
f010ed01:	68 08 77 13 f0       	push   $0xf0137708
f010ed06:	68 25 02 00 00       	push   $0x225
f010ed0b:	68 54 6c 13 f0       	push   $0xf0136c54
f010ed10:	e8 91 14 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ed15:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ed1b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed1e:	74 17                	je     f010ed37 <test_alloc_block_NF+0x566>
f010ed20:	83 ec 04             	sub    $0x4,%esp
f010ed23:	68 54 77 13 f0       	push   $0xf0137754
f010ed28:	68 26 02 00 00       	push   $0x226
f010ed2d:	68 54 6c 13 f0       	push   $0xf0136c54
f010ed32:	e8 6f 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010ed37:	83 ec 0c             	sub    $0xc,%esp
f010ed3a:	68 00 fc 07 00       	push   $0x7fc00
f010ed3f:	e8 03 26 02 00       	call   f0131347 <alloc_block_NF>
f010ed44:	83 c4 10             	add    $0x10,%esp
f010ed47:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010ed4a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed4e:	74 1a                	je     f010ed6a <test_alloc_block_NF+0x599>
f010ed50:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed53:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed56:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010ed5b:	75 0d                	jne    f010ed6a <test_alloc_block_NF+0x599>
f010ed5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed60:	8b 40 08             	mov    0x8(%eax),%eax
f010ed63:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010ed68:	74 17                	je     f010ed81 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ed6a:	83 ec 04             	sub    $0x4,%esp
f010ed6d:	68 60 76 13 f0       	push   $0xf0137660
f010ed72:	68 2f 02 00 00       	push   $0x22f
f010ed77:	68 54 6c 13 f0       	push   $0xf0136c54
f010ed7c:	e8 25 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed81:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ed86:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ed89:	83 ea 02             	sub    $0x2,%edx
f010ed8c:	39 d0                	cmp    %edx,%eax
f010ed8e:	75 13                	jne    f010eda3 <test_alloc_block_NF+0x5d2>
f010ed90:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ed95:	83 f8 06             	cmp    $0x6,%eax
f010ed98:	75 09                	jne    f010eda3 <test_alloc_block_NF+0x5d2>
f010ed9a:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010ed9f:	85 c0                	test   %eax,%eax
f010eda1:	74 17                	je     f010edba <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eda3:	83 ec 04             	sub    $0x4,%esp
f010eda6:	68 a4 76 13 f0       	push   $0xf01376a4
f010edab:	68 33 02 00 00       	push   $0x233
f010edb0:	68 54 6c 13 f0       	push   $0xf0136c54
f010edb5:	e8 ec 13 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010edba:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010edc1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010edc4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010edcb:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010edd2:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010edd9:	83 ec 0c             	sub    $0xc,%esp
f010eddc:	ff 75 d8             	pushl  -0x28(%ebp)
f010eddf:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ede5:	50                   	push   %eax
f010ede6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ede9:	50                   	push   %eax
f010edea:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eded:	50                   	push   %eax
f010edee:	68 c0 74 6e f0       	push   $0xf06e74c0
f010edf3:	e8 4b 0e 00 00       	call   f010fc43 <check_list_data>
f010edf8:	83 c4 20             	add    $0x20,%esp
f010edfb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010edfe:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ee02:	74 17                	je     f010ee1b <test_alloc_block_NF+0x64a>
f010ee04:	83 ec 04             	sub    $0x4,%esp
f010ee07:	68 08 77 13 f0       	push   $0xf0137708
f010ee0c:	68 3b 02 00 00       	push   $0x23b
f010ee11:	68 54 6c 13 f0       	push   $0xf0136c54
f010ee16:	e8 8b 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ee1b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ee21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee24:	74 17                	je     f010ee3d <test_alloc_block_NF+0x66c>
f010ee26:	83 ec 04             	sub    $0x4,%esp
f010ee29:	68 54 77 13 f0       	push   $0xf0137754
f010ee2e:	68 3c 02 00 00       	push   $0x23c
f010ee33:	68 54 6c 13 f0       	push   $0xf0136c54
f010ee38:	e8 69 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010ee3d:	83 ec 0c             	sub    $0xc,%esp
f010ee40:	68 00 0c 00 00       	push   $0xc00
f010ee45:	e8 fd 24 02 00       	call   f0131347 <alloc_block_NF>
f010ee4a:	83 c4 10             	add    $0x10,%esp
f010ee4d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010ee50:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee54:	74 17                	je     f010ee6d <test_alloc_block_NF+0x69c>
f010ee56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee59:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee5c:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ee61:	75 0a                	jne    f010ee6d <test_alloc_block_NF+0x69c>
f010ee63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee66:	8b 40 08             	mov    0x8(%eax),%eax
f010ee69:	85 c0                	test   %eax,%eax
f010ee6b:	74 17                	je     f010ee84 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ee6d:	83 ec 04             	sub    $0x4,%esp
f010ee70:	68 60 76 13 f0       	push   $0xf0137660
f010ee75:	68 45 02 00 00       	push   $0x245
f010ee7a:	68 54 6c 13 f0       	push   $0xf0136c54
f010ee7f:	e8 22 13 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee84:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ee89:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ee8c:	83 ea 02             	sub    $0x2,%edx
f010ee8f:	39 d0                	cmp    %edx,%eax
f010ee91:	75 13                	jne    f010eea6 <test_alloc_block_NF+0x6d5>
f010ee93:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ee98:	83 f8 05             	cmp    $0x5,%eax
f010ee9b:	75 09                	jne    f010eea6 <test_alloc_block_NF+0x6d5>
f010ee9d:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010eea2:	85 c0                	test   %eax,%eax
f010eea4:	74 17                	je     f010eebd <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eea6:	83 ec 04             	sub    $0x4,%esp
f010eea9:	68 a4 76 13 f0       	push   $0xf01376a4
f010eeae:	68 49 02 00 00       	push   $0x249
f010eeb3:	68 54 6c 13 f0       	push   $0xf0136c54
f010eeb8:	e8 e9 12 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eebd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eec4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010eec7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010eece:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010eed5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010eedc:	83 ec 0c             	sub    $0xc,%esp
f010eedf:	ff 75 d8             	pushl  -0x28(%ebp)
f010eee2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010eee8:	50                   	push   %eax
f010eee9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eeec:	50                   	push   %eax
f010eeed:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eef0:	50                   	push   %eax
f010eef1:	68 c0 74 6e f0       	push   $0xf06e74c0
f010eef6:	e8 48 0d 00 00       	call   f010fc43 <check_list_data>
f010eefb:	83 c4 20             	add    $0x20,%esp
f010eefe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ef01:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ef05:	74 17                	je     f010ef1e <test_alloc_block_NF+0x74d>
f010ef07:	83 ec 04             	sub    $0x4,%esp
f010ef0a:	68 08 77 13 f0       	push   $0xf0137708
f010ef0f:	68 51 02 00 00       	push   $0x251
f010ef14:	68 54 6c 13 f0       	push   $0xf0136c54
f010ef19:	e8 88 12 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ef1e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ef24:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef27:	74 17                	je     f010ef40 <test_alloc_block_NF+0x76f>
f010ef29:	83 ec 04             	sub    $0x4,%esp
f010ef2c:	68 54 77 13 f0       	push   $0xf0137754
f010ef31:	68 52 02 00 00       	push   $0x252
f010ef36:	68 54 6c 13 f0       	push   $0xf0136c54
f010ef3b:	e8 66 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010ef40:	83 ec 0c             	sub    $0xc,%esp
f010ef43:	68 00 04 00 00       	push   $0x400
f010ef48:	e8 fa 23 02 00       	call   f0131347 <alloc_block_NF>
f010ef4d:	83 c4 10             	add    $0x10,%esp
f010ef50:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010ef53:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef57:	74 1a                	je     f010ef73 <test_alloc_block_NF+0x7a2>
f010ef59:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef5c:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef5f:	3d 00 04 00 00       	cmp    $0x400,%eax
f010ef64:	75 0d                	jne    f010ef73 <test_alloc_block_NF+0x7a2>
f010ef66:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef69:	8b 40 08             	mov    0x8(%eax),%eax
f010ef6c:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010ef71:	74 17                	je     f010ef8a <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ef73:	83 ec 04             	sub    $0x4,%esp
f010ef76:	68 60 76 13 f0       	push   $0xf0137660
f010ef7b:	68 5b 02 00 00       	push   $0x25b
f010ef80:	68 54 6c 13 f0       	push   $0xf0136c54
f010ef85:	e8 1c 12 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ef8a:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010ef8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ef92:	83 ea 03             	sub    $0x3,%edx
f010ef95:	39 d0                	cmp    %edx,%eax
f010ef97:	75 13                	jne    f010efac <test_alloc_block_NF+0x7db>
f010ef99:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010ef9e:	83 f8 05             	cmp    $0x5,%eax
f010efa1:	75 09                	jne    f010efac <test_alloc_block_NF+0x7db>
f010efa3:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010efa8:	85 c0                	test   %eax,%eax
f010efaa:	74 17                	je     f010efc3 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010efac:	83 ec 04             	sub    $0x4,%esp
f010efaf:	68 a4 76 13 f0       	push   $0xf01376a4
f010efb4:	68 5f 02 00 00       	push   $0x25f
f010efb9:	68 54 6c 13 f0       	push   $0xf0136c54
f010efbe:	e8 e3 11 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010efc3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010efca:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010efcd:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010efd4:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010efdb:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010efe2:	83 ec 0c             	sub    $0xc,%esp
f010efe5:	ff 75 d8             	pushl  -0x28(%ebp)
f010efe8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010efee:	50                   	push   %eax
f010efef:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eff2:	50                   	push   %eax
f010eff3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eff6:	50                   	push   %eax
f010eff7:	68 c0 74 6e f0       	push   $0xf06e74c0
f010effc:	e8 42 0c 00 00       	call   f010fc43 <check_list_data>
f010f001:	83 c4 20             	add    $0x20,%esp
f010f004:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f007:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f00b:	74 17                	je     f010f024 <test_alloc_block_NF+0x853>
f010f00d:	83 ec 04             	sub    $0x4,%esp
f010f010:	68 08 77 13 f0       	push   $0xf0137708
f010f015:	68 67 02 00 00       	push   $0x267
f010f01a:	68 54 6c 13 f0       	push   $0xf0136c54
f010f01f:	e8 82 11 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f024:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f02a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f02d:	74 17                	je     f010f046 <test_alloc_block_NF+0x875>
f010f02f:	83 ec 04             	sub    $0x4,%esp
f010f032:	68 54 77 13 f0       	push   $0xf0137754
f010f037:	68 68 02 00 00       	push   $0x268
f010f03c:	68 54 6c 13 f0       	push   $0xf0136c54
f010f041:	e8 60 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f046:	83 ec 0c             	sub    $0xc,%esp
f010f049:	68 a0 77 13 f0       	push   $0xf01377a0
f010f04e:	e8 da 1b ff ff       	call   f0100c2d <cprintf>
f010f053:	83 c4 10             	add    $0x10,%esp

}
f010f056:	90                   	nop
f010f057:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f05a:	5b                   	pop    %ebx
f010f05b:	5e                   	pop    %esi
f010f05c:	5f                   	pop    %edi
f010f05d:	5d                   	pop    %ebp
f010f05e:	c3                   	ret    

f010f05f <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f05f:	55                   	push   %ebp
f010f060:	89 e5                	mov    %esp,%ebp
f010f062:	57                   	push   %edi
f010f063:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f069:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f070:	83 ec 0c             	sub    $0xc,%esp
f010f073:	ff 75 f4             	pushl  -0xc(%ebp)
f010f076:	e8 54 1b 02 00       	call   f0130bcf <initialize_MemBlocksList>
f010f07b:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f07e:	c7 05 f0 7f 65 f0 00 	movl   $0x0,0xf0657ff0
f010f085:	00 00 00 
f010f088:	c7 05 f4 7f 65 f0 00 	movl   $0x0,0xf0657ff4
f010f08f:	00 00 00 
f010f092:	c7 05 fc 7f 65 f0 00 	movl   $0x0,0xf0657ffc
f010f099:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f09c:	c7 05 c0 74 6e f0 00 	movl   $0x0,0xf06e74c0
f010f0a3:	00 00 00 
f010f0a6:	c7 05 c4 74 6e f0 00 	movl   $0x0,0xf06e74c4
f010f0ad:	00 00 00 
f010f0b0:	c7 05 cc 74 6e f0 00 	movl   $0x0,0xf06e74cc
f010f0b7:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f0ba:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f0bd:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f0c2:	b8 00 00 00 00       	mov    $0x0,%eax
f010f0c7:	89 d7                	mov    %edx,%edi
f010f0c9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f0cb:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f0ce:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f0d3:	b8 00 00 00 00       	mov    $0x0,%eax
f010f0d8:	89 d7                	mov    %edx,%edi
f010f0da:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f0dc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f0e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f0ea:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f0f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0f4:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f0fb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f0fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f0ff:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f106:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f107:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f10a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f10e:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f111:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f114:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f118:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f11b:	83 ec 0c             	sub    $0xc,%esp
f010f11e:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f121:	50                   	push   %eax
f010f122:	e8 ed 27 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f127:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f12a:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f12f:	85 c0                	test   %eax,%eax
f010f131:	75 14                	jne    f010f147 <test_insert_sorted_with_merge_freeList+0xe8>
f010f133:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f138:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f13b:	75 0a                	jne    f010f147 <test_insert_sorted_with_merge_freeList+0xe8>
f010f13d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f142:	83 f8 01             	cmp    $0x1,%eax
f010f145:	74 17                	je     f010f15e <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f147:	83 ec 04             	sub    $0x4,%esp
f010f14a:	68 00 78 13 f0       	push   $0xf0137800
f010f14f:	68 88 02 00 00       	push   $0x288
f010f154:	68 54 6c 13 f0       	push   $0xf0136c54
f010f159:	e8 48 10 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f15e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f165:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f16c:	83 ec 0c             	sub    $0xc,%esp
f010f16f:	ff 75 f0             	pushl  -0x10(%ebp)
f010f172:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f175:	50                   	push   %eax
f010f176:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f179:	50                   	push   %eax
f010f17a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f17d:	50                   	push   %eax
f010f17e:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f183:	e8 bb 0a 00 00       	call   f010fc43 <check_list_data>
f010f188:	83 c4 20             	add    $0x20,%esp
f010f18b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f18e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f192:	74 17                	je     f010f1ab <test_insert_sorted_with_merge_freeList+0x14c>
f010f194:	83 ec 04             	sub    $0x4,%esp
f010f197:	68 6c 78 13 f0       	push   $0xf013786c
f010f19c:	68 8e 02 00 00       	push   $0x28e
f010f1a1:	68 54 6c 13 f0       	push   $0xf0136c54
f010f1a6:	e8 fb 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f1ab:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f1ae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1b1:	74 17                	je     f010f1ca <test_insert_sorted_with_merge_freeList+0x16b>
f010f1b3:	83 ec 04             	sub    $0x4,%esp
f010f1b6:	68 c0 78 13 f0       	push   $0xf01378c0
f010f1bb:	68 8f 02 00 00       	push   $0x28f
f010f1c0:	68 54 6c 13 f0       	push   $0xf0136c54
f010f1c5:	e8 dc 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f1ca:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f1d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1d4:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f1db:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f1dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1df:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f1e6:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f1e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1ea:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f1ee:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f1f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f1f7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f1fb:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f1fe:	83 ec 0c             	sub    $0xc,%esp
f010f201:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f207:	50                   	push   %eax
f010f208:	e8 07 27 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f20d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f210:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f215:	85 c0                	test   %eax,%eax
f010f217:	75 14                	jne    f010f22d <test_insert_sorted_with_merge_freeList+0x1ce>
f010f219:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f21e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f221:	75 0a                	jne    f010f22d <test_insert_sorted_with_merge_freeList+0x1ce>
f010f223:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f228:	83 f8 02             	cmp    $0x2,%eax
f010f22b:	74 17                	je     f010f244 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f22d:	83 ec 04             	sub    $0x4,%esp
f010f230:	68 00 78 13 f0       	push   $0xf0137800
f010f235:	68 9e 02 00 00       	push   $0x29e
f010f23a:	68 54 6c 13 f0       	push   $0xf0136c54
f010f23f:	e8 62 0f ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f244:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f24b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f252:	83 ec 0c             	sub    $0xc,%esp
f010f255:	ff 75 f0             	pushl  -0x10(%ebp)
f010f258:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f25b:	50                   	push   %eax
f010f25c:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f25f:	50                   	push   %eax
f010f260:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f263:	50                   	push   %eax
f010f264:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f269:	e8 d5 09 00 00       	call   f010fc43 <check_list_data>
f010f26e:	83 c4 20             	add    $0x20,%esp
f010f271:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f274:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f278:	74 17                	je     f010f291 <test_insert_sorted_with_merge_freeList+0x232>
f010f27a:	83 ec 04             	sub    $0x4,%esp
f010f27d:	68 6c 78 13 f0       	push   $0xf013786c
f010f282:	68 a4 02 00 00       	push   $0x2a4
f010f287:	68 54 6c 13 f0       	push   $0xf0136c54
f010f28c:	e8 15 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f291:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f294:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f297:	74 17                	je     f010f2b0 <test_insert_sorted_with_merge_freeList+0x251>
f010f299:	83 ec 04             	sub    $0x4,%esp
f010f29c:	68 c0 78 13 f0       	push   $0xf01378c0
f010f2a1:	68 a5 02 00 00       	push   $0x2a5
f010f2a6:	68 54 6c 13 f0       	push   $0xf0136c54
f010f2ab:	e8 f6 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010f2b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010f2b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2ba:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010f2c1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f2c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2c5:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f2cc:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f2cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2d0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f2d4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010f2da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2dd:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f2e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010f2e7:	83 ec 0c             	sub    $0xc,%esp
f010f2ea:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010f2f0:	50                   	push   %eax
f010f2f1:	e8 1e 26 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f2f6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f2f9:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f2fe:	85 c0                	test   %eax,%eax
f010f300:	75 14                	jne    f010f316 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f302:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f307:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f30a:	75 0a                	jne    f010f316 <test_insert_sorted_with_merge_freeList+0x2b7>
f010f30c:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f311:	83 f8 03             	cmp    $0x3,%eax
f010f314:	74 17                	je     f010f32d <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f316:	83 ec 04             	sub    $0x4,%esp
f010f319:	68 00 78 13 f0       	push   $0xf0137800
f010f31e:	68 b4 02 00 00       	push   $0x2b4
f010f323:	68 54 6c 13 f0       	push   $0xf0136c54
f010f328:	e8 79 0e ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f32d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f334:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f33b:	83 ec 0c             	sub    $0xc,%esp
f010f33e:	ff 75 f0             	pushl  -0x10(%ebp)
f010f341:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f344:	50                   	push   %eax
f010f345:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f348:	50                   	push   %eax
f010f349:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f34c:	50                   	push   %eax
f010f34d:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f352:	e8 ec 08 00 00       	call   f010fc43 <check_list_data>
f010f357:	83 c4 20             	add    $0x20,%esp
f010f35a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f35d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f361:	74 17                	je     f010f37a <test_insert_sorted_with_merge_freeList+0x31b>
f010f363:	83 ec 04             	sub    $0x4,%esp
f010f366:	68 6c 78 13 f0       	push   $0xf013786c
f010f36b:	68 ba 02 00 00       	push   $0x2ba
f010f370:	68 54 6c 13 f0       	push   $0xf0136c54
f010f375:	e8 2c 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f37a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f37d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f380:	74 17                	je     f010f399 <test_insert_sorted_with_merge_freeList+0x33a>
f010f382:	83 ec 04             	sub    $0x4,%esp
f010f385:	68 c0 78 13 f0       	push   $0xf01378c0
f010f38a:	68 bb 02 00 00       	push   $0x2bb
f010f38f:	68 54 6c 13 f0       	push   $0xf0136c54
f010f394:	e8 0d 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010f399:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010f3a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3a3:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010f3aa:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f3ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3ae:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f3b5:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f3b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3b9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f3bd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010f3c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3c6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f3ca:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010f3d0:	83 ec 0c             	sub    $0xc,%esp
f010f3d3:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010f3d9:	50                   	push   %eax
f010f3da:	e8 35 25 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f3df:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f3e2:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f3e7:	85 c0                	test   %eax,%eax
f010f3e9:	75 14                	jne    f010f3ff <test_insert_sorted_with_merge_freeList+0x3a0>
f010f3eb:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f3f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f3f3:	75 0a                	jne    f010f3ff <test_insert_sorted_with_merge_freeList+0x3a0>
f010f3f5:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f3fa:	83 f8 04             	cmp    $0x4,%eax
f010f3fd:	74 17                	je     f010f416 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f3ff:	83 ec 04             	sub    $0x4,%esp
f010f402:	68 00 78 13 f0       	push   $0xf0137800
f010f407:	68 ca 02 00 00       	push   $0x2ca
f010f40c:	68 54 6c 13 f0       	push   $0xf0136c54
f010f411:	e8 90 0d ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f416:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f41d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f424:	83 ec 0c             	sub    $0xc,%esp
f010f427:	ff 75 f0             	pushl  -0x10(%ebp)
f010f42a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f42d:	50                   	push   %eax
f010f42e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f431:	50                   	push   %eax
f010f432:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f435:	50                   	push   %eax
f010f436:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f43b:	e8 03 08 00 00       	call   f010fc43 <check_list_data>
f010f440:	83 c4 20             	add    $0x20,%esp
f010f443:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f446:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f44a:	74 17                	je     f010f463 <test_insert_sorted_with_merge_freeList+0x404>
f010f44c:	83 ec 04             	sub    $0x4,%esp
f010f44f:	68 6c 78 13 f0       	push   $0xf013786c
f010f454:	68 d0 02 00 00       	push   $0x2d0
f010f459:	68 54 6c 13 f0       	push   $0xf0136c54
f010f45e:	e8 43 0d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f463:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f466:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f469:	74 17                	je     f010f482 <test_insert_sorted_with_merge_freeList+0x423>
f010f46b:	83 ec 04             	sub    $0x4,%esp
f010f46e:	68 c0 78 13 f0       	push   $0xf01378c0
f010f473:	68 d1 02 00 00       	push   $0x2d1
f010f478:	68 54 6c 13 f0       	push   $0xf0136c54
f010f47d:	e8 24 0d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010f482:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010f489:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f48c:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010f493:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010f494:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f497:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010f49e:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f49f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4a2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f4a6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010f4ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f4af:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f4b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010f4b9:	83 ec 0c             	sub    $0xc,%esp
f010f4bc:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010f4c2:	50                   	push   %eax
f010f4c3:	e8 4c 24 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f4c8:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f4cb:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f4d0:	85 c0                	test   %eax,%eax
f010f4d2:	75 17                	jne    f010f4eb <test_insert_sorted_with_merge_freeList+0x48c>
f010f4d4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f4d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f4dc:	42                   	inc    %edx
f010f4dd:	39 d0                	cmp    %edx,%eax
f010f4df:	75 0a                	jne    f010f4eb <test_insert_sorted_with_merge_freeList+0x48c>
f010f4e1:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f4e6:	83 f8 04             	cmp    $0x4,%eax
f010f4e9:	74 17                	je     f010f502 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f4eb:	83 ec 04             	sub    $0x4,%esp
f010f4ee:	68 00 78 13 f0       	push   $0xf0137800
f010f4f3:	68 e3 02 00 00       	push   $0x2e3
f010f4f8:	68 54 6c 13 f0       	push   $0xf0136c54
f010f4fd:	e8 a4 0c ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f502:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f509:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f510:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f513:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f516:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f519:	48                   	dec    %eax
f010f51a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f51e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f521:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f525:	01 c8                	add    %ecx,%eax
f010f527:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f52b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f52e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f535:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f536:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f539:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f540:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f541:	83 ec 0c             	sub    $0xc,%esp
f010f544:	ff 75 f0             	pushl  -0x10(%ebp)
f010f547:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f54a:	50                   	push   %eax
f010f54b:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f54e:	50                   	push   %eax
f010f54f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f552:	50                   	push   %eax
f010f553:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f558:	e8 e6 06 00 00       	call   f010fc43 <check_list_data>
f010f55d:	83 c4 20             	add    $0x20,%esp
f010f560:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f563:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f567:	74 17                	je     f010f580 <test_insert_sorted_with_merge_freeList+0x521>
f010f569:	83 ec 04             	sub    $0x4,%esp
f010f56c:	68 6c 78 13 f0       	push   $0xf013786c
f010f571:	68 ec 02 00 00       	push   $0x2ec
f010f576:	68 54 6c 13 f0       	push   $0xf0136c54
f010f57b:	e8 26 0c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f580:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f583:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f586:	74 17                	je     f010f59f <test_insert_sorted_with_merge_freeList+0x540>
f010f588:	83 ec 04             	sub    $0x4,%esp
f010f58b:	68 c0 78 13 f0       	push   $0xf01378c0
f010f590:	68 ed 02 00 00       	push   $0x2ed
f010f595:	68 54 6c 13 f0       	push   $0xf0136c54
f010f59a:	e8 07 0c ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f59f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f5a6:	83 ec 0c             	sub    $0xc,%esp
f010f5a9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f5ac:	50                   	push   %eax
f010f5ad:	e8 5d 07 00 00       	call   f010fd0f <check_avaliable_list_data>
f010f5b2:	83 c4 10             	add    $0x10,%esp
f010f5b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f5b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f5bb:	8d 50 01             	lea    0x1(%eax),%edx
f010f5be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f5c1:	39 c2                	cmp    %eax,%edx
f010f5c3:	74 17                	je     f010f5dc <test_insert_sorted_with_merge_freeList+0x57d>
f010f5c5:	83 ec 04             	sub    $0x4,%esp
f010f5c8:	68 14 79 13 f0       	push   $0xf0137914
f010f5cd:	68 f2 02 00 00       	push   $0x2f2
f010f5d2:	68 54 6c 13 f0       	push   $0xf0136c54
f010f5d7:	e8 ca 0b ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f5dc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f5e0:	74 17                	je     f010f5f9 <test_insert_sorted_with_merge_freeList+0x59a>
f010f5e2:	83 ec 04             	sub    $0x4,%esp
f010f5e5:	68 6c 79 13 f0       	push   $0xf013796c
f010f5ea:	68 f3 02 00 00       	push   $0x2f3
f010f5ef:	68 54 6c 13 f0       	push   $0xf0136c54
f010f5f4:	e8 ad 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010f5f9:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010f600:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f603:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010f60a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f60b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f60e:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f615:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f616:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f619:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f61d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010f623:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f626:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f62a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010f630:	83 ec 0c             	sub    $0xc,%esp
f010f633:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010f639:	50                   	push   %eax
f010f63a:	e8 d5 22 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f63f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f642:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f647:	85 c0                	test   %eax,%eax
f010f649:	75 19                	jne    f010f664 <test_insert_sorted_with_merge_freeList+0x605>
f010f64b:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f650:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f653:	83 c2 02             	add    $0x2,%edx
f010f656:	39 d0                	cmp    %edx,%eax
f010f658:	75 0a                	jne    f010f664 <test_insert_sorted_with_merge_freeList+0x605>
f010f65a:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f65f:	83 f8 04             	cmp    $0x4,%eax
f010f662:	74 17                	je     f010f67b <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f664:	83 ec 04             	sub    $0x4,%esp
f010f667:	68 00 78 13 f0       	push   $0xf0137800
f010f66c:	68 05 03 00 00       	push   $0x305
f010f671:	68 54 6c 13 f0       	push   $0xf0136c54
f010f676:	e8 2b 0b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f67b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f682:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f689:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f68c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f68f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f692:	48                   	dec    %eax
f010f693:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f697:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f69a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f69e:	01 c8                	add    %ecx,%eax
f010f6a0:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f6a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6a7:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f6ae:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f6af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6b2:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f6b9:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f6ba:	83 ec 0c             	sub    $0xc,%esp
f010f6bd:	ff 75 f0             	pushl  -0x10(%ebp)
f010f6c0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6c3:	50                   	push   %eax
f010f6c4:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f6c7:	50                   	push   %eax
f010f6c8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f6cb:	50                   	push   %eax
f010f6cc:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f6d1:	e8 6d 05 00 00       	call   f010fc43 <check_list_data>
f010f6d6:	83 c4 20             	add    $0x20,%esp
f010f6d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f6dc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f6e0:	74 17                	je     f010f6f9 <test_insert_sorted_with_merge_freeList+0x69a>
f010f6e2:	83 ec 04             	sub    $0x4,%esp
f010f6e5:	68 6c 78 13 f0       	push   $0xf013786c
f010f6ea:	68 0e 03 00 00       	push   $0x30e
f010f6ef:	68 54 6c 13 f0       	push   $0xf0136c54
f010f6f4:	e8 ad 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f6f9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f6fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f6ff:	74 17                	je     f010f718 <test_insert_sorted_with_merge_freeList+0x6b9>
f010f701:	83 ec 04             	sub    $0x4,%esp
f010f704:	68 c0 78 13 f0       	push   $0xf01378c0
f010f709:	68 0f 03 00 00       	push   $0x30f
f010f70e:	68 54 6c 13 f0       	push   $0xf0136c54
f010f713:	e8 8e 0a ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f718:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f71f:	83 ec 0c             	sub    $0xc,%esp
f010f722:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f725:	50                   	push   %eax
f010f726:	e8 e4 05 00 00       	call   f010fd0f <check_avaliable_list_data>
f010f72b:	83 c4 10             	add    $0x10,%esp
f010f72e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f731:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f734:	8d 50 02             	lea    0x2(%eax),%edx
f010f737:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f73a:	39 c2                	cmp    %eax,%edx
f010f73c:	74 17                	je     f010f755 <test_insert_sorted_with_merge_freeList+0x6f6>
f010f73e:	83 ec 04             	sub    $0x4,%esp
f010f741:	68 14 79 13 f0       	push   $0xf0137914
f010f746:	68 14 03 00 00       	push   $0x314
f010f74b:	68 54 6c 13 f0       	push   $0xf0136c54
f010f750:	e8 51 0a ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f755:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f759:	74 17                	je     f010f772 <test_insert_sorted_with_merge_freeList+0x713>
f010f75b:	83 ec 04             	sub    $0x4,%esp
f010f75e:	68 6c 79 13 f0       	push   $0xf013796c
f010f763:	68 15 03 00 00       	push   $0x315
f010f768:	68 54 6c 13 f0       	push   $0xf0136c54
f010f76d:	e8 34 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010f772:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f779:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f77c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f783:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f784:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f787:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f78e:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f78f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f792:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f796:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010f79c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f79f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f7a3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010f7a9:	83 ec 0c             	sub    $0xc,%esp
f010f7ac:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010f7b2:	50                   	push   %eax
f010f7b3:	e8 5c 21 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f7b8:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f7bb:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f7c0:	85 c0                	test   %eax,%eax
f010f7c2:	75 19                	jne    f010f7dd <test_insert_sorted_with_merge_freeList+0x77e>
f010f7c4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f7c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f7cc:	83 c2 03             	add    $0x3,%edx
f010f7cf:	39 d0                	cmp    %edx,%eax
f010f7d1:	75 0a                	jne    f010f7dd <test_insert_sorted_with_merge_freeList+0x77e>
f010f7d3:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f7d8:	83 f8 04             	cmp    $0x4,%eax
f010f7db:	74 17                	je     f010f7f4 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f7dd:	83 ec 04             	sub    $0x4,%esp
f010f7e0:	68 00 78 13 f0       	push   $0xf0137800
f010f7e5:	68 28 03 00 00       	push   $0x328
f010f7ea:	68 54 6c 13 f0       	push   $0xf0136c54
f010f7ef:	e8 b2 09 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f7f4:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f7fb:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010f802:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f805:	8d 50 01             	lea    0x1(%eax),%edx
f010f808:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f80b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f80f:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010f813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f816:	8d 50 01             	lea    0x1(%eax),%edx
f010f819:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f81c:	40                   	inc    %eax
f010f81d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f821:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f824:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f828:	01 c8                	add    %ecx,%eax
f010f82a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f82e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f831:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f838:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f839:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f83c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f843:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f844:	83 ec 0c             	sub    $0xc,%esp
f010f847:	ff 75 f0             	pushl  -0x10(%ebp)
f010f84a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f84d:	50                   	push   %eax
f010f84e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f851:	50                   	push   %eax
f010f852:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f855:	50                   	push   %eax
f010f856:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f85b:	e8 e3 03 00 00       	call   f010fc43 <check_list_data>
f010f860:	83 c4 20             	add    $0x20,%esp
f010f863:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f866:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f86a:	74 17                	je     f010f883 <test_insert_sorted_with_merge_freeList+0x824>
f010f86c:	83 ec 04             	sub    $0x4,%esp
f010f86f:	68 6c 78 13 f0       	push   $0xf013786c
f010f874:	68 32 03 00 00       	push   $0x332
f010f879:	68 54 6c 13 f0       	push   $0xf0136c54
f010f87e:	e8 23 09 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f883:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f886:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f889:	74 17                	je     f010f8a2 <test_insert_sorted_with_merge_freeList+0x843>
f010f88b:	83 ec 04             	sub    $0x4,%esp
f010f88e:	68 c0 78 13 f0       	push   $0xf01378c0
f010f893:	68 33 03 00 00       	push   $0x333
f010f898:	68 54 6c 13 f0       	push   $0xf0136c54
f010f89d:	e8 04 09 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f8a2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f8a9:	83 ec 0c             	sub    $0xc,%esp
f010f8ac:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8af:	50                   	push   %eax
f010f8b0:	e8 5a 04 00 00       	call   f010fd0f <check_avaliable_list_data>
f010f8b5:	83 c4 10             	add    $0x10,%esp
f010f8b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f8bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f8be:	8d 50 03             	lea    0x3(%eax),%edx
f010f8c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8c4:	39 c2                	cmp    %eax,%edx
f010f8c6:	74 17                	je     f010f8df <test_insert_sorted_with_merge_freeList+0x880>
f010f8c8:	83 ec 04             	sub    $0x4,%esp
f010f8cb:	68 14 79 13 f0       	push   $0xf0137914
f010f8d0:	68 38 03 00 00       	push   $0x338
f010f8d5:	68 54 6c 13 f0       	push   $0xf0136c54
f010f8da:	e8 c7 08 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f8df:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f8e3:	74 17                	je     f010f8fc <test_insert_sorted_with_merge_freeList+0x89d>
f010f8e5:	83 ec 04             	sub    $0x4,%esp
f010f8e8:	68 6c 79 13 f0       	push   $0xf013796c
f010f8ed:	68 39 03 00 00       	push   $0x339
f010f8f2:	68 54 6c 13 f0       	push   $0xf0136c54
f010f8f7:	e8 aa 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010f8fc:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010f903:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f906:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010f90d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f90e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f911:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f918:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f919:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f91c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f920:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010f926:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f929:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f92d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010f933:	83 ec 0c             	sub    $0xc,%esp
f010f936:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f93c:	50                   	push   %eax
f010f93d:	e8 d2 1f 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010f942:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f945:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010f94a:	85 c0                	test   %eax,%eax
f010f94c:	75 19                	jne    f010f967 <test_insert_sorted_with_merge_freeList+0x908>
f010f94e:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010f953:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f956:	83 c2 04             	add    $0x4,%edx
f010f959:	39 d0                	cmp    %edx,%eax
f010f95b:	75 0a                	jne    f010f967 <test_insert_sorted_with_merge_freeList+0x908>
f010f95d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010f962:	83 f8 04             	cmp    $0x4,%eax
f010f965:	74 17                	je     f010f97e <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f967:	83 ec 04             	sub    $0x4,%esp
f010f96a:	68 00 78 13 f0       	push   $0xf0137800
f010f96f:	68 4c 03 00 00       	push   $0x34c
f010f974:	68 54 6c 13 f0       	push   $0xf0136c54
f010f979:	e8 28 08 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f97e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f985:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010f98c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f98f:	8d 50 01             	lea    0x1(%eax),%edx
f010f992:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f995:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f999:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010f99d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9a0:	8d 50 01             	lea    0x1(%eax),%edx
f010f9a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9a6:	40                   	inc    %eax
f010f9a7:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f9ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ae:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f9b2:	01 c8                	add    %ecx,%eax
f010f9b4:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f9b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9bb:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f9c2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f9c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c6:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f9cd:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f9ce:	83 ec 0c             	sub    $0xc,%esp
f010f9d1:	ff 75 f0             	pushl  -0x10(%ebp)
f010f9d4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9d7:	50                   	push   %eax
f010f9d8:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f9db:	50                   	push   %eax
f010f9dc:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f9df:	50                   	push   %eax
f010f9e0:	68 c0 74 6e f0       	push   $0xf06e74c0
f010f9e5:	e8 59 02 00 00       	call   f010fc43 <check_list_data>
f010f9ea:	83 c4 20             	add    $0x20,%esp
f010f9ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f9f0:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f9f4:	74 17                	je     f010fa0d <test_insert_sorted_with_merge_freeList+0x9ae>
f010f9f6:	83 ec 04             	sub    $0x4,%esp
f010f9f9:	68 6c 78 13 f0       	push   $0xf013786c
f010f9fe:	68 56 03 00 00       	push   $0x356
f010fa03:	68 54 6c 13 f0       	push   $0xf0136c54
f010fa08:	e8 99 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fa0d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa10:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa13:	74 17                	je     f010fa2c <test_insert_sorted_with_merge_freeList+0x9cd>
f010fa15:	83 ec 04             	sub    $0x4,%esp
f010fa18:	68 c0 78 13 f0       	push   $0xf01378c0
f010fa1d:	68 57 03 00 00       	push   $0x357
f010fa22:	68 54 6c 13 f0       	push   $0xf0136c54
f010fa27:	e8 7a 07 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fa2c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fa33:	83 ec 0c             	sub    $0xc,%esp
f010fa36:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa39:	50                   	push   %eax
f010fa3a:	e8 d0 02 00 00       	call   f010fd0f <check_avaliable_list_data>
f010fa3f:	83 c4 10             	add    $0x10,%esp
f010fa42:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fa45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa48:	8d 50 04             	lea    0x4(%eax),%edx
f010fa4b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa4e:	39 c2                	cmp    %eax,%edx
f010fa50:	74 17                	je     f010fa69 <test_insert_sorted_with_merge_freeList+0xa0a>
f010fa52:	83 ec 04             	sub    $0x4,%esp
f010fa55:	68 14 79 13 f0       	push   $0xf0137914
f010fa5a:	68 5c 03 00 00       	push   $0x35c
f010fa5f:	68 54 6c 13 f0       	push   $0xf0136c54
f010fa64:	e8 3d 07 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fa69:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa6d:	74 17                	je     f010fa86 <test_insert_sorted_with_merge_freeList+0xa27>
f010fa6f:	83 ec 04             	sub    $0x4,%esp
f010fa72:	68 6c 79 13 f0       	push   $0xf013796c
f010fa77:	68 5d 03 00 00       	push   $0x35d
f010fa7c:	68 54 6c 13 f0       	push   $0xf0136c54
f010fa81:	e8 20 07 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f010fa86:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f010fa8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa90:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f010fa97:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f010fa98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa9b:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f010faa2:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010faa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010faa6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010faaa:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f010fab0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fab3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fab7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f010fabd:	83 ec 0c             	sub    $0xc,%esp
f010fac0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f010fac6:	50                   	push   %eax
f010fac7:	e8 48 1e 02 00       	call   f0131914 <insert_sorted_with_merge_freeList>
f010facc:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010facf:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f010fad4:	85 c0                	test   %eax,%eax
f010fad6:	75 19                	jne    f010faf1 <test_insert_sorted_with_merge_freeList+0xa92>
f010fad8:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f010fadd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fae0:	83 c2 06             	add    $0x6,%edx
f010fae3:	39 d0                	cmp    %edx,%eax
f010fae5:	75 0a                	jne    f010faf1 <test_insert_sorted_with_merge_freeList+0xa92>
f010fae7:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f010faec:	83 f8 03             	cmp    $0x3,%eax
f010faef:	74 17                	je     f010fb08 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010faf1:	83 ec 04             	sub    $0x4,%esp
f010faf4:	68 00 78 13 f0       	push   $0xf0137800
f010faf9:	68 70 03 00 00       	push   $0x370
f010fafe:	68 54 6c 13 f0       	push   $0xf0136c54
f010fb03:	e8 9e 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb08:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010fb0f:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f010fb16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb19:	48                   	dec    %eax
f010fb1a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb21:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f010fb22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb25:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fb28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb2b:	48                   	dec    %eax
f010fb2c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fb30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb33:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb37:	01 c1                	add    %eax,%ecx
f010fb39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb3c:	40                   	inc    %eax
f010fb3d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb41:	01 c8                	add    %ecx,%eax
f010fb43:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fb47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb4a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb51:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fb52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb55:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb5c:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f010fb5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb60:	40                   	inc    %eax
f010fb61:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb68:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f010fb69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb6c:	40                   	inc    %eax
f010fb6d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb74:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fb75:	83 ec 0c             	sub    $0xc,%esp
f010fb78:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb7b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb7e:	50                   	push   %eax
f010fb7f:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fb82:	50                   	push   %eax
f010fb83:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fb86:	50                   	push   %eax
f010fb87:	68 c0 74 6e f0       	push   $0xf06e74c0
f010fb8c:	e8 b2 00 00 00       	call   f010fc43 <check_list_data>
f010fb91:	83 c4 20             	add    $0x20,%esp
f010fb94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fb97:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fb9b:	74 17                	je     f010fbb4 <test_insert_sorted_with_merge_freeList+0xb55>
f010fb9d:	83 ec 04             	sub    $0x4,%esp
f010fba0:	68 6c 78 13 f0       	push   $0xf013786c
f010fba5:	68 7c 03 00 00       	push   $0x37c
f010fbaa:	68 54 6c 13 f0       	push   $0xf0136c54
f010fbaf:	e8 f2 05 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fbb4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbb7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbba:	74 17                	je     f010fbd3 <test_insert_sorted_with_merge_freeList+0xb74>
f010fbbc:	83 ec 04             	sub    $0x4,%esp
f010fbbf:	68 c0 78 13 f0       	push   $0xf01378c0
f010fbc4:	68 7d 03 00 00       	push   $0x37d
f010fbc9:	68 54 6c 13 f0       	push   $0xf0136c54
f010fbce:	e8 d3 05 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fbd3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fbda:	83 ec 0c             	sub    $0xc,%esp
f010fbdd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbe0:	50                   	push   %eax
f010fbe1:	e8 29 01 00 00       	call   f010fd0f <check_avaliable_list_data>
f010fbe6:	83 c4 10             	add    $0x10,%esp
f010fbe9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fbec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbef:	8d 50 06             	lea    0x6(%eax),%edx
f010fbf2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbf5:	39 c2                	cmp    %eax,%edx
f010fbf7:	74 17                	je     f010fc10 <test_insert_sorted_with_merge_freeList+0xbb1>
f010fbf9:	83 ec 04             	sub    $0x4,%esp
f010fbfc:	68 14 79 13 f0       	push   $0xf0137914
f010fc01:	68 82 03 00 00       	push   $0x382
f010fc06:	68 54 6c 13 f0       	push   $0xf0136c54
f010fc0b:	e8 96 05 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fc10:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc14:	74 17                	je     f010fc2d <test_insert_sorted_with_merge_freeList+0xbce>
f010fc16:	83 ec 04             	sub    $0x4,%esp
f010fc19:	68 6c 79 13 f0       	push   $0xf013796c
f010fc1e:	68 83 03 00 00       	push   $0x383
f010fc23:	68 54 6c 13 f0       	push   $0xf0136c54
f010fc28:	e8 79 05 ff ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f010fc2d:	83 ec 0c             	sub    $0xc,%esp
f010fc30:	68 c8 79 13 f0       	push   $0xf01379c8
f010fc35:	e8 f3 0f ff ff       	call   f0100c2d <cprintf>
f010fc3a:	83 c4 10             	add    $0x10,%esp

}
f010fc3d:	90                   	nop
f010fc3e:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010fc41:	c9                   	leave  
f010fc42:	c3                   	ret    

f010fc43 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f010fc43:	55                   	push   %ebp
f010fc44:	89 e5                	mov    %esp,%ebp
f010fc46:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010fc49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010fc50:	8b 45 14             	mov    0x14(%ebp),%eax
f010fc53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f010fc59:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f010fc60:	8b 45 08             	mov    0x8(%ebp),%eax
f010fc63:	8b 00                	mov    (%eax),%eax
f010fc65:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fc68:	eb 6e                	jmp    f010fcd8 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f010fc6a:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f010fc6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fc70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fc77:	8b 45 10             	mov    0x10(%ebp),%eax
f010fc7a:	01 d0                	add    %edx,%eax
f010fc7c:	8b 00                	mov    (%eax),%eax
f010fc7e:	85 c0                	test   %eax,%eax
f010fc80:	74 e8                	je     f010fc6a <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f010fc82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fc85:	8b 50 08             	mov    0x8(%eax),%edx
f010fc88:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fc8b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010fc92:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fc95:	01 c8                	add    %ecx,%eax
f010fc97:	8b 00                	mov    (%eax),%eax
f010fc99:	39 c2                	cmp    %eax,%edx
f010fc9b:	75 1b                	jne    f010fcb8 <check_list_data+0x75>
f010fc9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fca0:	8b 50 0c             	mov    0xc(%eax),%edx
f010fca3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010fca6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010fcad:	8b 45 10             	mov    0x10(%ebp),%eax
f010fcb0:	01 c8                	add    %ecx,%eax
f010fcb2:	8b 00                	mov    (%eax),%eax
f010fcb4:	39 c2                	cmp    %eax,%edx
f010fcb6:	74 07                	je     f010fcbf <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f010fcb8:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcbd:	eb 4e                	jmp    f010fd0d <check_list_data+0xca>
		}
		(*size)++;
f010fcbf:	8b 45 14             	mov    0x14(%ebp),%eax
f010fcc2:	8b 00                	mov    (%eax),%eax
f010fcc4:	8d 50 01             	lea    0x1(%eax),%edx
f010fcc7:	8b 45 14             	mov    0x14(%ebp),%eax
f010fcca:	89 10                	mov    %edx,(%eax)
		i++;
f010fccc:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f010fccf:	8b 45 08             	mov    0x8(%ebp),%eax
f010fcd2:	8b 40 08             	mov    0x8(%eax),%eax
f010fcd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fcd8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fcdc:	74 07                	je     f010fce5 <check_list_data+0xa2>
f010fcde:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fce1:	8b 00                	mov    (%eax),%eax
f010fce3:	eb 05                	jmp    f010fcea <check_list_data+0xa7>
f010fce5:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcea:	8b 55 08             	mov    0x8(%ebp),%edx
f010fced:	89 42 08             	mov    %eax,0x8(%edx)
f010fcf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010fcf3:	8b 40 08             	mov    0x8(%eax),%eax
f010fcf6:	85 c0                	test   %eax,%eax
f010fcf8:	0f 85 6f ff ff ff    	jne    f010fc6d <check_list_data+0x2a>
f010fcfe:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd02:	0f 85 65 ff ff ff    	jne    f010fc6d <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f010fd08:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fd0d:	c9                   	leave  
f010fd0e:	c3                   	ret    

f010fd0f <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f010fd0f:	55                   	push   %ebp
f010fd10:	89 e5                	mov    %esp,%ebp
f010fd12:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010fd15:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010fd1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010fd25:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f010fd2a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fd2d:	eb 30                	jmp    f010fd5f <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f010fd2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd32:	8b 40 08             	mov    0x8(%eax),%eax
f010fd35:	85 c0                	test   %eax,%eax
f010fd37:	75 0a                	jne    f010fd43 <check_avaliable_list_data+0x34>
f010fd39:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd3c:	8b 40 0c             	mov    0xc(%eax),%eax
f010fd3f:	85 c0                	test   %eax,%eax
f010fd41:	74 07                	je     f010fd4a <check_avaliable_list_data+0x3b>
		{
			return 0;
f010fd43:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd48:	eb 40                	jmp    f010fd8a <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f010fd4a:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd4d:	8b 00                	mov    (%eax),%eax
f010fd4f:	8d 50 01             	lea    0x1(%eax),%edx
f010fd52:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd55:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f010fd57:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010fd5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010fd5f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd63:	74 07                	je     f010fd6c <check_avaliable_list_data+0x5d>
f010fd65:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010fd68:	8b 00                	mov    (%eax),%eax
f010fd6a:	eb 05                	jmp    f010fd71 <check_avaliable_list_data+0x62>
f010fd6c:	b8 00 00 00 00       	mov    $0x0,%eax
f010fd71:	a3 fc 74 6e f0       	mov    %eax,0xf06e74fc
f010fd76:	a1 fc 74 6e f0       	mov    0xf06e74fc,%eax
f010fd7b:	85 c0                	test   %eax,%eax
f010fd7d:	75 b0                	jne    f010fd2f <check_avaliable_list_data+0x20>
f010fd7f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010fd83:	75 aa                	jne    f010fd2f <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f010fd85:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fd8a:	c9                   	leave  
f010fd8b:	c3                   	ret    

f010fd8c <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f010fd8c:	55                   	push   %ebp
f010fd8d:	89 e5                	mov    %esp,%ebp
f010fd8f:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f010fd92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f010fd99:	8b 45 08             	mov    0x8(%ebp),%eax
f010fd9c:	8b 00                	mov    (%eax),%eax
f010fd9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010fda1:	eb 27                	jmp    f010fdca <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010fda3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fda6:	8b 50 0c             	mov    0xc(%eax),%edx
f010fda9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fdac:	8b 40 08             	mov    0x8(%eax),%eax
f010fdaf:	83 ec 04             	sub    $0x4,%esp
f010fdb2:	52                   	push   %edx
f010fdb3:	50                   	push   %eax
f010fdb4:	68 18 6d 13 f0       	push   $0xf0136d18
f010fdb9:	e8 6f 0e ff ff       	call   f0100c2d <cprintf>
f010fdbe:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f010fdc1:	8b 45 08             	mov    0x8(%ebp),%eax
f010fdc4:	8b 40 08             	mov    0x8(%eax),%eax
f010fdc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010fdca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010fdce:	74 07                	je     f010fdd7 <show_list_content+0x4b>
f010fdd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fdd3:	8b 00                	mov    (%eax),%eax
f010fdd5:	eb 05                	jmp    f010fddc <show_list_content+0x50>
f010fdd7:	b8 00 00 00 00       	mov    $0x0,%eax
f010fddc:	8b 55 08             	mov    0x8(%ebp),%edx
f010fddf:	89 42 08             	mov    %eax,0x8(%edx)
f010fde2:	8b 45 08             	mov    0x8(%ebp),%eax
f010fde5:	8b 40 08             	mov    0x8(%eax),%eax
f010fde8:	85 c0                	test   %eax,%eax
f010fdea:	75 b7                	jne    f010fda3 <show_list_content+0x17>
f010fdec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010fdf0:	75 b1                	jne    f010fda3 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f010fdf2:	90                   	nop
f010fdf3:	c9                   	leave  
f010fdf4:	c3                   	ret    

f010fdf5 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f010fdf5:	55                   	push   %ebp
f010fdf6:	89 e5                	mov    %esp,%ebp
f010fdf8:	57                   	push   %edi
f010fdf9:	56                   	push   %esi
f010fdfa:	53                   	push   %ebx
f010fdfb:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f010fe01:	83 ec 0c             	sub    $0xc,%esp
f010fe04:	68 1c 7a 13 f0       	push   $0xf0137a1c
f010fe09:	e8 1f 0e ff ff       	call   f0100c2d <cprintf>
f010fe0e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f010fe11:	83 ec 0c             	sub    $0xc,%esp
f010fe14:	68 40 7a 13 f0       	push   $0xf0137a40
f010fe19:	e8 0f 0e ff ff       	call   f0100c2d <cprintf>
f010fe1e:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f010fe21:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f010fe28:	83 ec 0c             	sub    $0xc,%esp
f010fe2b:	68 5c 7a 13 f0       	push   $0xf0137a5c
f010fe30:	e8 f8 0d ff ff       	call   f0100c2d <cprintf>
f010fe35:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f010fe38:	8d 45 80             	lea    -0x80(%ebp),%eax
f010fe3b:	bb 16 7b 13 f0       	mov    $0xf0137b16,%ebx
f010fe40:	ba 03 00 00 00       	mov    $0x3,%edx
f010fe45:	89 c7                	mov    %eax,%edi
f010fe47:	89 de                	mov    %ebx,%esi
f010fe49:	89 d1                	mov    %edx,%ecx
f010fe4b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010fe4d:	8d 55 8c             	lea    -0x74(%ebp),%edx
f010fe50:	b9 16 00 00 00       	mov    $0x16,%ecx
f010fe55:	b8 00 00 00 00       	mov    $0x0,%eax
f010fe5a:	89 d7                	mov    %edx,%edi
f010fe5c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f010fe5e:	83 ec 0c             	sub    $0xc,%esp
f010fe61:	8d 45 80             	lea    -0x80(%ebp),%eax
f010fe64:	50                   	push   %eax
f010fe65:	e8 25 0e ff ff       	call   f0100c8f <execute_command>
f010fe6a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010fe6d:	83 ec 0c             	sub    $0xc,%esp
f010fe70:	68 8a 7a 13 f0       	push   $0xf0137a8a
f010fe75:	e8 b3 0d ff ff       	call   f0100c2d <cprintf>
f010fe7a:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f010fe7d:	83 ec 0c             	sub    $0xc,%esp
f010fe80:	68 a0 7a 13 f0       	push   $0xf0137aa0
f010fe85:	e8 a3 0d ff ff       	call   f0100c2d <cprintf>
f010fe8a:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f010fe8d:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f010fe94:	65 00 00 
f010fe97:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f010fe9d:	b9 18 00 00 00       	mov    $0x18,%ecx
f010fea2:	b8 00 00 00 00       	mov    $0x0,%eax
f010fea7:	89 d7                	mov    %edx,%edi
f010fea9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f010feab:	83 ec 0c             	sub    $0xc,%esp
f010feae:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f010feb4:	50                   	push   %eax
f010feb5:	e8 d5 0d ff ff       	call   f0100c8f <execute_command>
f010feba:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010febd:	83 ec 0c             	sub    $0xc,%esp
f010fec0:	68 8a 7a 13 f0       	push   $0xf0137a8a
f010fec5:	e8 63 0d ff ff       	call   f0100c2d <cprintf>
f010feca:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f010fecd:	83 ec 0c             	sub    $0xc,%esp
f010fed0:	68 c8 7a 13 f0       	push   $0xf0137ac8
f010fed5:	e8 53 0d ff ff       	call   f0100c2d <cprintf>
f010feda:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f010fedd:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f010fee4:	75 00 00 
f010fee7:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f010feed:	b9 18 00 00 00       	mov    $0x18,%ecx
f010fef2:	b8 00 00 00 00       	mov    $0x0,%eax
f010fef7:	89 d7                	mov    %edx,%edi
f010fef9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f010fefb:	83 ec 0c             	sub    $0xc,%esp
f010fefe:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f010ff04:	50                   	push   %eax
f010ff05:	e8 85 0d ff ff       	call   f0100c8f <execute_command>
f010ff0a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010ff0d:	83 ec 0c             	sub    $0xc,%esp
f010ff10:	68 8a 7a 13 f0       	push   $0xf0137a8a
f010ff15:	e8 13 0d ff ff       	call   f0100c2d <cprintf>
f010ff1a:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f010ff1d:	83 ec 0c             	sub    $0xc,%esp
f010ff20:	68 f0 7a 13 f0       	push   $0xf0137af0
f010ff25:	e8 03 0d ff ff       	call   f0100c2d <cprintf>
f010ff2a:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f010ff2d:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f010ff34:	6d 6d 00 
f010ff37:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f010ff3d:	b9 18 00 00 00       	mov    $0x18,%ecx
f010ff42:	b8 00 00 00 00       	mov    $0x0,%eax
f010ff47:	89 d7                	mov    %edx,%edi
f010ff49:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f010ff4b:	83 ec 0c             	sub    $0xc,%esp
f010ff4e:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f010ff54:	50                   	push   %eax
f010ff55:	e8 35 0d ff ff       	call   f0100c8f <execute_command>
f010ff5a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f010ff5d:	83 ec 0c             	sub    $0xc,%esp
f010ff60:	68 8a 7a 13 f0       	push   $0xf0137a8a
f010ff65:	e8 c3 0c ff ff       	call   f0100c2d <cprintf>
f010ff6a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010ff6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ff72:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ff75:	5b                   	pop    %ebx
f010ff76:	5e                   	pop    %esi
f010ff77:	5f                   	pop    %edi
f010ff78:	5d                   	pop    %ebp
f010ff79:	c3                   	ret    

f010ff7a <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f010ff7a:	55                   	push   %ebp
f010ff7b:	89 e5                	mov    %esp,%ebp
f010ff7d:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f010ff80:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f010ff87:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f010ff8e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010ff95:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010ff9a:	ff 75 ec             	pushl  -0x14(%ebp)
f010ff9d:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffa0:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffa3:	50                   	push   %eax
f010ffa4:	e8 03 75 ff ff       	call   f01074ac <pt_set_page_permissions>
f010ffa9:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010ffac:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010ffb1:	ff 75 ec             	pushl  -0x14(%ebp)
f010ffb4:	ff 75 f0             	pushl  -0x10(%ebp)
f010ffb7:	ff 75 f4             	pushl  -0xc(%ebp)
f010ffba:	50                   	push   %eax
f010ffbb:	e8 2a 50 00 00       	call   f0114fea <CP>
f010ffc0:	83 c4 10             	add    $0x10,%esp
f010ffc3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f010ffc6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ffca:	74 14                	je     f010ffe0 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f010ffcc:	83 ec 04             	sub    $0x4,%esp
f010ffcf:	68 7c 7b 13 f0       	push   $0xf0137b7c
f010ffd4:	6a 59                	push   $0x59
f010ffd6:	68 9e 7b 13 f0       	push   $0xf0137b9e
f010ffdb:	e8 c6 01 ff ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f010ffe0:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f010ffe7:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f010ffee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f010fff5:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f010fffa:	ff 75 ec             	pushl  -0x14(%ebp)
f010fffd:	ff 75 f0             	pushl  -0x10(%ebp)
f0110000:	ff 75 f4             	pushl  -0xc(%ebp)
f0110003:	50                   	push   %eax
f0110004:	e8 a3 74 ff ff       	call   f01074ac <pt_set_page_permissions>
f0110009:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011000c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110011:	ff 75 ec             	pushl  -0x14(%ebp)
f0110014:	ff 75 f0             	pushl  -0x10(%ebp)
f0110017:	ff 75 f4             	pushl  -0xc(%ebp)
f011001a:	50                   	push   %eax
f011001b:	e8 ca 4f 00 00       	call   f0114fea <CP>
f0110020:	83 c4 10             	add    $0x10,%esp
f0110023:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110026:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011002a:	74 14                	je     f0110040 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f011002c:	83 ec 04             	sub    $0x4,%esp
f011002f:	68 bc 7b 13 f0       	push   $0xf0137bbc
f0110034:	6a 65                	push   $0x65
f0110036:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011003b:	e8 66 01 ff ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110040:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110047:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f011004e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110055:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011005a:	ff 75 ec             	pushl  -0x14(%ebp)
f011005d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110060:	ff 75 f4             	pushl  -0xc(%ebp)
f0110063:	50                   	push   %eax
f0110064:	e8 43 74 ff ff       	call   f01074ac <pt_set_page_permissions>
f0110069:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011006c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110071:	ff 75 ec             	pushl  -0x14(%ebp)
f0110074:	ff 75 f0             	pushl  -0x10(%ebp)
f0110077:	ff 75 f4             	pushl  -0xc(%ebp)
f011007a:	50                   	push   %eax
f011007b:	e8 6a 4f 00 00       	call   f0114fea <CP>
f0110080:	83 c4 10             	add    $0x10,%esp
f0110083:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110086:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011008a:	74 14                	je     f01100a0 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f011008c:	83 ec 04             	sub    $0x4,%esp
f011008f:	68 e0 7b 13 f0       	push   $0xf0137be0
f0110094:	6a 70                	push   $0x70
f0110096:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011009b:	e8 06 01 ff ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01100a0:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01100a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01100ae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01100b5:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01100ba:	ff 75 ec             	pushl  -0x14(%ebp)
f01100bd:	ff 75 f0             	pushl  -0x10(%ebp)
f01100c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01100c3:	50                   	push   %eax
f01100c4:	e8 e3 73 ff ff       	call   f01074ac <pt_set_page_permissions>
f01100c9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01100cc:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01100d1:	ff 75 ec             	pushl  -0x14(%ebp)
f01100d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01100d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01100da:	50                   	push   %eax
f01100db:	e8 0a 4f 00 00       	call   f0114fea <CP>
f01100e0:	83 c4 10             	add    $0x10,%esp
f01100e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01100e6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01100ea:	74 14                	je     f0110100 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f01100ec:	83 ec 04             	sub    $0x4,%esp
f01100ef:	68 04 7c 13 f0       	push   $0xf0137c04
f01100f4:	6a 7c                	push   $0x7c
f01100f6:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01100fb:	e8 a6 00 ff ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110100:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110107:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f011010e:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110115:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011011a:	ff 75 ec             	pushl  -0x14(%ebp)
f011011d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110120:	ff 75 f4             	pushl  -0xc(%ebp)
f0110123:	50                   	push   %eax
f0110124:	e8 83 73 ff ff       	call   f01074ac <pt_set_page_permissions>
f0110129:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011012c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110131:	ff 75 ec             	pushl  -0x14(%ebp)
f0110134:	ff 75 f0             	pushl  -0x10(%ebp)
f0110137:	ff 75 f4             	pushl  -0xc(%ebp)
f011013a:	50                   	push   %eax
f011013b:	e8 aa 4e 00 00       	call   f0114fea <CP>
f0110140:	83 c4 10             	add    $0x10,%esp
f0110143:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110146:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011014a:	74 17                	je     f0110163 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f011014c:	83 ec 04             	sub    $0x4,%esp
f011014f:	68 28 7c 13 f0       	push   $0xf0137c28
f0110154:	68 88 00 00 00       	push   $0x88
f0110159:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011015e:	e8 43 00 ff ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110163:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011016a:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110171:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110178:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011017d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110180:	ff 75 f0             	pushl  -0x10(%ebp)
f0110183:	ff 75 f4             	pushl  -0xc(%ebp)
f0110186:	50                   	push   %eax
f0110187:	e8 20 73 ff ff       	call   f01074ac <pt_set_page_permissions>
f011018c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011018f:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110194:	ff 75 ec             	pushl  -0x14(%ebp)
f0110197:	ff 75 f0             	pushl  -0x10(%ebp)
f011019a:	ff 75 f4             	pushl  -0xc(%ebp)
f011019d:	50                   	push   %eax
f011019e:	e8 47 4e 00 00       	call   f0114fea <CP>
f01101a3:	83 c4 10             	add    $0x10,%esp
f01101a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01101a9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101ad:	74 17                	je     f01101c6 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01101af:	83 ec 04             	sub    $0x4,%esp
f01101b2:	68 4c 7c 13 f0       	push   $0xf0137c4c
f01101b7:	68 94 00 00 00       	push   $0x94
f01101bc:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01101c1:	e8 e0 ff fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01101c6:	83 ec 0c             	sub    $0xc,%esp
f01101c9:	68 78 7c 13 f0       	push   $0xf0137c78
f01101ce:	e8 5a 0a ff ff       	call   f0100c2d <cprintf>
f01101d3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01101d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01101db:	c9                   	leave  
f01101dc:	c3                   	ret    

f01101dd <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f01101dd:	55                   	push   %ebp
f01101de:	89 e5                	mov    %esp,%ebp
f01101e0:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f01101e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01101ea:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01101f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01101f8:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01101fd:	ff 75 ec             	pushl  -0x14(%ebp)
f0110200:	ff 75 f0             	pushl  -0x10(%ebp)
f0110203:	ff 75 f4             	pushl  -0xc(%ebp)
f0110206:	50                   	push   %eax
f0110207:	e8 a0 72 ff ff       	call   f01074ac <pt_set_page_permissions>
f011020c:	83 c4 10             	add    $0x10,%esp
	panic("This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f011020f:	83 ec 04             	sub    $0x4,%esp
f0110212:	68 c8 7c 13 f0       	push   $0xf0137cc8
f0110217:	68 a1 00 00 00       	push   $0xa1
f011021c:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110221:	e8 80 ff fe ff       	call   f01001a6 <_panic>

f0110226 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110226:	55                   	push   %ebp
f0110227:	89 e5                	mov    %esp,%ebp
f0110229:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f011022c:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110233:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110238:	83 ec 08             	sub    $0x8,%esp
f011023b:	ff 75 f4             	pushl  -0xc(%ebp)
f011023e:	50                   	push   %eax
f011023f:	e8 82 72 ff ff       	call   f01074c6 <pt_get_page_permissions>
f0110244:	83 c4 10             	add    $0x10,%esp
f0110247:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f011024a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f011024e:	74 17                	je     f0110267 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110250:	83 ec 04             	sub    $0x4,%esp
f0110253:	68 58 7d 13 f0       	push   $0xf0137d58
f0110258:	68 af 00 00 00       	push   $0xaf
f011025d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110262:	e8 3f ff fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110267:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011026e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110273:	83 ec 08             	sub    $0x8,%esp
f0110276:	ff 75 f4             	pushl  -0xc(%ebp)
f0110279:	50                   	push   %eax
f011027a:	e8 47 72 ff ff       	call   f01074c6 <pt_get_page_permissions>
f011027f:	83 c4 10             	add    $0x10,%esp
f0110282:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0110285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110289:	74 17                	je     f01102a2 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f011028b:	83 ec 04             	sub    $0x4,%esp
f011028e:	68 7c 7d 13 f0       	push   $0xf0137d7c
f0110293:	68 b7 00 00 00       	push   $0xb7
f0110298:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011029d:	e8 04 ff fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01102a2:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01102a9:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01102ae:	83 ec 08             	sub    $0x8,%esp
f01102b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01102b4:	50                   	push   %eax
f01102b5:	e8 0c 72 ff ff       	call   f01074c6 <pt_get_page_permissions>
f01102ba:	83 c4 10             	add    $0x10,%esp
f01102bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01102c0:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01102c4:	74 17                	je     f01102dd <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01102c6:	83 ec 04             	sub    $0x4,%esp
f01102c9:	68 a0 7d 13 f0       	push   $0xf0137da0
f01102ce:	68 bf 00 00 00       	push   $0xbf
f01102d3:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01102d8:	e8 c9 fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f01102dd:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01102e4:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01102e9:	83 ec 08             	sub    $0x8,%esp
f01102ec:	ff 75 f4             	pushl  -0xc(%ebp)
f01102ef:	50                   	push   %eax
f01102f0:	e8 d1 71 ff ff       	call   f01074c6 <pt_get_page_permissions>
f01102f5:	83 c4 10             	add    $0x10,%esp
f01102f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01102fb:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01102ff:	74 17                	je     f0110318 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110301:	83 ec 04             	sub    $0x4,%esp
f0110304:	68 c4 7d 13 f0       	push   $0xf0137dc4
f0110309:	68 c6 00 00 00       	push   $0xc6
f011030e:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110313:	e8 8e fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f0110318:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011031f:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110324:	83 ec 08             	sub    $0x8,%esp
f0110327:	ff 75 f4             	pushl  -0xc(%ebp)
f011032a:	50                   	push   %eax
f011032b:	e8 96 71 ff ff       	call   f01074c6 <pt_get_page_permissions>
f0110330:	83 c4 10             	add    $0x10,%esp
f0110333:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110336:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f011033a:	74 17                	je     f0110353 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f011033c:	83 ec 04             	sub    $0x4,%esp
f011033f:	68 e8 7d 13 f0       	push   $0xf0137de8
f0110344:	68 cd 00 00 00       	push   $0xcd
f0110349:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011034e:	e8 53 fe fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110353:	83 ec 0c             	sub    $0xc,%esp
f0110356:	68 0c 7e 13 f0       	push   $0xf0137e0c
f011035b:	e8 cd 08 ff ff       	call   f0100c2d <cprintf>
f0110360:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110363:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110368:	c9                   	leave  
f0110369:	c3                   	ret    

f011036a <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011036a:	55                   	push   %ebp
f011036b:	89 e5                	mov    %esp,%ebp
f011036d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0110370:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110377:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011037c:	83 ec 08             	sub    $0x8,%esp
f011037f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110382:	50                   	push   %eax
f0110383:	e8 58 71 ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f0110388:	83 c4 10             	add    $0x10,%esp

	int ret = CP(ptr_page_directory, va, 0, 0);
f011038b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110390:	6a 00                	push   $0x0
f0110392:	6a 00                	push   $0x0
f0110394:	ff 75 f4             	pushl  -0xc(%ebp)
f0110397:	50                   	push   %eax
f0110398:	e8 4d 4c 00 00       	call   f0114fea <CP>
f011039d:	83 c4 10             	add    $0x10,%esp
f01103a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01103a3:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01103a7:	74 17                	je     f01103c0 <test_pt_clear_page_table_entry+0x56>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01103a9:	83 ec 04             	sub    $0x4,%esp
f01103ac:	68 54 7e 13 f0       	push   $0xf0137e54
f01103b1:	68 de 00 00 00       	push   $0xde
f01103b6:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01103bb:	e8 e6 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f01103c0:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01103c7:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01103cc:	83 ec 08             	sub    $0x8,%esp
f01103cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01103d2:	50                   	push   %eax
f01103d3:	e8 08 71 ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f01103d8:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f01103db:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01103e0:	6a 00                	push   $0x0
f01103e2:	6a 00                	push   $0x0
f01103e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01103e7:	50                   	push   %eax
f01103e8:	e8 fd 4b 00 00       	call   f0114fea <CP>
f01103ed:	83 c4 10             	add    $0x10,%esp
f01103f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01103f3:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01103f7:	74 17                	je     f0110410 <test_pt_clear_page_table_entry+0xa6>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f01103f9:	83 ec 04             	sub    $0x4,%esp
f01103fc:	68 80 7e 13 f0       	push   $0xf0137e80
f0110401:	68 e7 00 00 00       	push   $0xe7
f0110406:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011040b:	e8 96 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110410:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110417:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011041c:	83 ec 08             	sub    $0x8,%esp
f011041f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110422:	50                   	push   %eax
f0110423:	e8 b8 70 ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f0110428:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f011042b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110430:	6a 00                	push   $0x0
f0110432:	6a 00                	push   $0x0
f0110434:	ff 75 f4             	pushl  -0xc(%ebp)
f0110437:	50                   	push   %eax
f0110438:	e8 ad 4b 00 00       	call   f0114fea <CP>
f011043d:	83 c4 10             	add    $0x10,%esp
f0110440:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110443:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110447:	74 17                	je     f0110460 <test_pt_clear_page_table_entry+0xf6>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0110449:	83 ec 04             	sub    $0x4,%esp
f011044c:	68 ac 7e 13 f0       	push   $0xf0137eac
f0110451:	68 f0 00 00 00       	push   $0xf0
f0110456:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011045b:	e8 46 fd fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110460:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110467:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011046c:	83 ec 08             	sub    $0x8,%esp
f011046f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110472:	50                   	push   %eax
f0110473:	e8 68 70 ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f0110478:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, 0, 0);
f011047b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110480:	6a 00                	push   $0x0
f0110482:	6a 00                	push   $0x0
f0110484:	ff 75 f4             	pushl  -0xc(%ebp)
f0110487:	50                   	push   %eax
f0110488:	e8 5d 4b 00 00       	call   f0114fea <CP>
f011048d:	83 c4 10             	add    $0x10,%esp
f0110490:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110493:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110497:	74 17                	je     f01104b0 <test_pt_clear_page_table_entry+0x146>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0110499:	83 ec 04             	sub    $0x4,%esp
f011049c:	68 d8 7e 13 f0       	push   $0xf0137ed8
f01104a1:	68 f9 00 00 00       	push   $0xf9
f01104a6:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01104ab:	e8 f6 fc fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01104b0:	83 ec 0c             	sub    $0xc,%esp
f01104b3:	68 04 7f 13 f0       	push   $0xf0137f04
f01104b8:	e8 70 07 ff ff       	call   f0100c2d <cprintf>
f01104bd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01104c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01104c5:	c9                   	leave  
f01104c6:	c3                   	ret    

f01104c7 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01104c7:	55                   	push   %ebp
f01104c8:	89 e5                	mov    %esp,%ebp
f01104ca:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01104cd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01104d4:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01104d9:	83 ec 08             	sub    $0x8,%esp
f01104dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01104df:	50                   	push   %eax
f01104e0:	e8 fb 6f ff ff       	call   f01074e0 <pt_clear_page_table_entry>
f01104e5:	83 c4 10             	add    $0x10,%esp
	panic("This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01104e8:	83 ec 04             	sub    $0x4,%esp
f01104eb:	68 50 7f 13 f0       	push   $0xf0137f50
f01104f0:	68 04 01 00 00       	push   $0x104
f01104f5:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01104fa:	e8 a7 fc fe ff       	call   f01001a6 <_panic>

f01104ff <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f01104ff:	55                   	push   %ebp
f0110500:	89 e5                	mov    %esp,%ebp
f0110502:	57                   	push   %edi
f0110503:	56                   	push   %esi
f0110504:	53                   	push   %ebx
f0110505:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011050b:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110512:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0110519:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011051e:	83 ec 0c             	sub    $0xc,%esp
f0110521:	50                   	push   %eax
f0110522:	e8 20 4c 00 00       	call   f0115147 <ClearUserSpace>
f0110527:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f011052a:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110531:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110536:	83 ec 08             	sub    $0x8,%esp
f0110539:	ff 75 dc             	pushl  -0x24(%ebp)
f011053c:	50                   	push   %eax
f011053d:	e8 b8 6f ff ff       	call   f01074fa <virtual_to_physical>
f0110542:	83 c4 10             	add    $0x10,%esp
f0110545:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0110548:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f011054c:	74 17                	je     f0110565 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f011054e:	83 ec 04             	sub    $0x4,%esp
f0110551:	68 d8 7f 13 f0       	push   $0xf0137fd8
f0110556:	68 19 01 00 00       	push   $0x119
f011055b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110560:	e8 41 fc fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0110565:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011056c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110571:	83 ec 08             	sub    $0x8,%esp
f0110574:	ff 75 dc             	pushl  -0x24(%ebp)
f0110577:	50                   	push   %eax
f0110578:	e8 7d 6f ff ff       	call   f01074fa <virtual_to_physical>
f011057d:	83 c4 10             	add    $0x10,%esp
f0110580:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110583:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110588:	83 ec 08             	sub    $0x8,%esp
f011058b:	ff 75 dc             	pushl  -0x24(%ebp)
f011058e:	50                   	push   %eax
f011058f:	e8 bd 49 00 00       	call   f0114f51 <CA>
f0110594:	83 c4 10             	add    $0x10,%esp
f0110597:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011059a:	74 17                	je     f01105b3 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011059c:	83 ec 04             	sub    $0x4,%esp
f011059f:	68 10 80 13 f0       	push   $0xf0138010
f01105a4:	68 22 01 00 00       	push   $0x122
f01105a9:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01105ae:	e8 f3 fb fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01105b3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01105b9:	bb dc 81 13 f0       	mov    $0xf01381dc,%ebx
f01105be:	ba 0d 00 00 00       	mov    $0xd,%edx
f01105c3:	89 c7                	mov    %eax,%edi
f01105c5:	89 de                	mov    %ebx,%esi
f01105c7:	89 d1                	mov    %edx,%ecx
f01105c9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01105cb:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01105ce:	b9 57 00 00 00       	mov    $0x57,%ecx
f01105d3:	b0 00                	mov    $0x0,%al
f01105d5:	89 d7                	mov    %edx,%edi
f01105d7:	f3 aa                	rep stos %al,%es:(%edi)
f01105d9:	83 ec 0c             	sub    $0xc,%esp
f01105dc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01105e2:	50                   	push   %eax
f01105e3:	e8 a7 06 ff ff       	call   f0100c8f <execute_command>
f01105e8:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f01105eb:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01105f2:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01105f7:	83 ec 08             	sub    $0x8,%esp
f01105fa:	ff 75 dc             	pushl  -0x24(%ebp)
f01105fd:	50                   	push   %eax
f01105fe:	e8 f7 6e ff ff       	call   f01074fa <virtual_to_physical>
f0110603:	83 c4 10             	add    $0x10,%esp
f0110606:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110609:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011060e:	83 ec 08             	sub    $0x8,%esp
f0110611:	ff 75 dc             	pushl  -0x24(%ebp)
f0110614:	50                   	push   %eax
f0110615:	e8 37 49 00 00       	call   f0114f51 <CA>
f011061a:	83 c4 10             	add    $0x10,%esp
f011061d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110620:	74 17                	je     f0110639 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110622:	83 ec 04             	sub    $0x4,%esp
f0110625:	68 48 80 13 f0       	push   $0xf0138048
f011062a:	68 2b 01 00 00       	push   $0x12b
f011062f:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110634:	e8 6d fb fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0110639:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011063f:	bb 40 82 13 f0       	mov    $0xf0138240,%ebx
f0110644:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110649:	89 c7                	mov    %eax,%edi
f011064b:	89 de                	mov    %ebx,%esi
f011064d:	89 d1                	mov    %edx,%ecx
f011064f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110651:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0110657:	b9 57 00 00 00       	mov    $0x57,%ecx
f011065c:	b0 00                	mov    $0x0,%al
f011065e:	89 d7                	mov    %edx,%edi
f0110660:	f3 aa                	rep stos %al,%es:(%edi)
f0110662:	83 ec 0c             	sub    $0xc,%esp
f0110665:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011066b:	50                   	push   %eax
f011066c:	e8 1e 06 ff ff       	call   f0100c8f <execute_command>
f0110671:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0110674:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011067b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110680:	83 ec 08             	sub    $0x8,%esp
f0110683:	ff 75 dc             	pushl  -0x24(%ebp)
f0110686:	50                   	push   %eax
f0110687:	e8 6e 6e ff ff       	call   f01074fa <virtual_to_physical>
f011068c:	83 c4 10             	add    $0x10,%esp
f011068f:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110692:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110697:	83 ec 08             	sub    $0x8,%esp
f011069a:	ff 75 dc             	pushl  -0x24(%ebp)
f011069d:	50                   	push   %eax
f011069e:	e8 ae 48 00 00       	call   f0114f51 <CA>
f01106a3:	83 c4 10             	add    $0x10,%esp
f01106a6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01106a9:	74 17                	je     f01106c2 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01106ab:	83 ec 04             	sub    $0x4,%esp
f01106ae:	68 80 80 13 f0       	push   $0xf0138080
f01106b3:	68 34 01 00 00       	push   $0x134
f01106b8:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01106bd:	e8 e4 fa fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01106c2:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01106c8:	bb a4 82 13 f0       	mov    $0xf01382a4,%ebx
f01106cd:	ba 0d 00 00 00       	mov    $0xd,%edx
f01106d2:	89 c7                	mov    %eax,%edi
f01106d4:	89 de                	mov    %ebx,%esi
f01106d6:	89 d1                	mov    %edx,%ecx
f01106d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01106da:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01106e0:	b9 57 00 00 00       	mov    $0x57,%ecx
f01106e5:	b0 00                	mov    $0x0,%al
f01106e7:	89 d7                	mov    %edx,%edi
f01106e9:	f3 aa                	rep stos %al,%es:(%edi)
f01106eb:	83 ec 0c             	sub    $0xc,%esp
f01106ee:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01106f4:	50                   	push   %eax
f01106f5:	e8 95 05 ff ff       	call   f0100c8f <execute_command>
f01106fa:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01106fd:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110704:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110709:	83 ec 08             	sub    $0x8,%esp
f011070c:	ff 75 dc             	pushl  -0x24(%ebp)
f011070f:	50                   	push   %eax
f0110710:	e8 e5 6d ff ff       	call   f01074fa <virtual_to_physical>
f0110715:	83 c4 10             	add    $0x10,%esp
f0110718:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011071b:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110720:	83 ec 08             	sub    $0x8,%esp
f0110723:	ff 75 dc             	pushl  -0x24(%ebp)
f0110726:	50                   	push   %eax
f0110727:	e8 25 48 00 00       	call   f0114f51 <CA>
f011072c:	83 c4 10             	add    $0x10,%esp
f011072f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110732:	74 17                	je     f011074b <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110734:	83 ec 04             	sub    $0x4,%esp
f0110737:	68 b8 80 13 f0       	push   $0xf01380b8
f011073c:	68 3d 01 00 00       	push   $0x13d
f0110741:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110746:	e8 5b fa fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f011074b:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110752:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110757:	83 ec 08             	sub    $0x8,%esp
f011075a:	ff 75 dc             	pushl  -0x24(%ebp)
f011075d:	50                   	push   %eax
f011075e:	e8 97 6d ff ff       	call   f01074fa <virtual_to_physical>
f0110763:	83 c4 10             	add    $0x10,%esp
f0110766:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110769:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011076e:	83 ec 08             	sub    $0x8,%esp
f0110771:	ff 75 dc             	pushl  -0x24(%ebp)
f0110774:	50                   	push   %eax
f0110775:	e8 d7 47 00 00       	call   f0114f51 <CA>
f011077a:	83 c4 10             	add    $0x10,%esp
f011077d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110780:	74 17                	je     f0110799 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0110782:	83 ec 04             	sub    $0x4,%esp
f0110785:	68 f0 80 13 f0       	push   $0xf01380f0
f011078a:	68 45 01 00 00       	push   $0x145
f011078f:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110794:	e8 0d fa fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f0110799:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01107a0:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01107a5:	83 ec 08             	sub    $0x8,%esp
f01107a8:	ff 75 dc             	pushl  -0x24(%ebp)
f01107ab:	50                   	push   %eax
f01107ac:	e8 49 6d ff ff       	call   f01074fa <virtual_to_physical>
f01107b1:	83 c4 10             	add    $0x10,%esp
f01107b4:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01107b7:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01107bc:	83 ec 08             	sub    $0x8,%esp
f01107bf:	ff 75 dc             	pushl  -0x24(%ebp)
f01107c2:	50                   	push   %eax
f01107c3:	e8 89 47 00 00       	call   f0114f51 <CA>
f01107c8:	83 c4 10             	add    $0x10,%esp
f01107cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01107ce:	74 17                	je     f01107e7 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01107d0:	83 ec 04             	sub    $0x4,%esp
f01107d3:	68 28 81 13 f0       	push   $0xf0138128
f01107d8:	68 4d 01 00 00       	push   $0x14d
f01107dd:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01107e2:	e8 bf f9 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01107e7:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01107ed:	bb 08 83 13 f0       	mov    $0xf0138308,%ebx
f01107f2:	ba 0e 00 00 00       	mov    $0xe,%edx
f01107f7:	89 c7                	mov    %eax,%edi
f01107f9:	89 de                	mov    %ebx,%esi
f01107fb:	89 d1                	mov    %edx,%ecx
f01107fd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01107ff:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110805:	b9 56 00 00 00       	mov    $0x56,%ecx
f011080a:	b0 00                	mov    $0x0,%al
f011080c:	89 d7                	mov    %edx,%edi
f011080e:	f3 aa                	rep stos %al,%es:(%edi)
f0110810:	83 ec 0c             	sub    $0xc,%esp
f0110813:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110819:	50                   	push   %eax
f011081a:	e8 70 04 ff ff       	call   f0100c8f <execute_command>
f011081f:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110822:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110829:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f011082e:	83 ec 08             	sub    $0x8,%esp
f0110831:	ff 75 dc             	pushl  -0x24(%ebp)
f0110834:	50                   	push   %eax
f0110835:	e8 c0 6c ff ff       	call   f01074fa <virtual_to_physical>
f011083a:	83 c4 10             	add    $0x10,%esp
f011083d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110840:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0110845:	83 ec 08             	sub    $0x8,%esp
f0110848:	ff 75 dc             	pushl  -0x24(%ebp)
f011084b:	50                   	push   %eax
f011084c:	e8 00 47 00 00       	call   f0114f51 <CA>
f0110851:	83 c4 10             	add    $0x10,%esp
f0110854:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110857:	74 17                	je     f0110870 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0110859:	83 ec 04             	sub    $0x4,%esp
f011085c:	68 60 81 13 f0       	push   $0xf0138160
f0110861:	68 56 01 00 00       	push   $0x156
f0110866:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011086b:	e8 36 f9 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0110870:	83 ec 0c             	sub    $0xc,%esp
f0110873:	68 98 81 13 f0       	push   $0xf0138198
f0110878:	e8 b0 03 ff ff       	call   f0100c2d <cprintf>
f011087d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0110880:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110885:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110888:	5b                   	pop    %ebx
f0110889:	5e                   	pop    %esi
f011088a:	5f                   	pop    %edi
f011088b:	5d                   	pop    %ebp
f011088c:	c3                   	ret    

f011088d <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011088d:	55                   	push   %ebp
f011088e:	89 e5                	mov    %esp,%ebp
f0110890:	57                   	push   %edi
f0110891:	56                   	push   %esi
f0110892:	53                   	push   %ebx
f0110893:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110899:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011089f:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f01108a4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01108a9:	89 c7                	mov    %eax,%edi
f01108ab:	89 de                	mov    %ebx,%esi
f01108ad:	89 d1                	mov    %edx,%ecx
f01108af:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01108b1:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01108b7:	b9 23 00 00 00       	mov    $0x23,%ecx
f01108bc:	b0 00                	mov    $0x0,%al
f01108be:	89 d7                	mov    %edx,%edi
f01108c0:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01108c2:	6a 00                	push   $0x0
f01108c4:	6a 0a                	push   $0xa
f01108c6:	6a 14                	push   $0x14
f01108c8:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01108ce:	50                   	push   %eax
f01108cf:	e8 78 77 ff ff       	call   f010804c <env_create>
f01108d4:	83 c4 10             	add    $0x10,%esp
f01108d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01108da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01108dd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01108e0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01108e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01108e6:	8b 40 60             	mov    0x60(%eax),%eax
f01108e9:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01108ec:	8b 45 90             	mov    -0x70(%ebp),%eax
f01108ef:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01108f2:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01108f9:	75 70 20 
f01108fc:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110903:	00 00 00 
f0110906:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011090c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110911:	b8 00 00 00 00       	mov    $0x0,%eax
f0110916:	89 d7                	mov    %edx,%edi
f0110918:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011091a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011091d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110920:	83 ec 08             	sub    $0x8,%esp
f0110923:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0110929:	52                   	push   %edx
f011092a:	50                   	push   %eax
f011092b:	e8 db fb 01 00       	call   f013050b <ltostr>
f0110930:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110933:	83 ec 04             	sub    $0x4,%esp
f0110936:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011093c:	50                   	push   %eax
f011093d:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110943:	50                   	push   %eax
f0110944:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011094a:	50                   	push   %eax
f011094b:	e8 b3 fc 01 00       	call   f0130603 <strcconcat>
f0110950:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110953:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011095a:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110961:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0110968:	83 ec 0c             	sub    $0xc,%esp
f011096b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011096e:	e8 d4 47 00 00       	call   f0115147 <ClearUserSpace>
f0110973:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0110976:	83 ec 04             	sub    $0x4,%esp
f0110979:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011097f:	50                   	push   %eax
f0110980:	68 6c 83 13 f0       	push   $0xf013836c
f0110985:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011098b:	50                   	push   %eax
f011098c:	e8 72 fc 01 00       	call   f0130603 <strcconcat>
f0110991:	83 c4 10             	add    $0x10,%esp
f0110994:	83 ec 0c             	sub    $0xc,%esp
f0110997:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011099d:	50                   	push   %eax
f011099e:	e8 ec 02 ff ff       	call   f0100c8f <execute_command>
f01109a3:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01109a6:	83 ec 04             	sub    $0x4,%esp
f01109a9:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01109af:	50                   	push   %eax
f01109b0:	68 77 83 13 f0       	push   $0xf0138377
f01109b5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01109bb:	50                   	push   %eax
f01109bc:	e8 42 fc 01 00       	call   f0130603 <strcconcat>
f01109c1:	83 c4 10             	add    $0x10,%esp
f01109c4:	83 ec 0c             	sub    $0xc,%esp
f01109c7:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01109cd:	50                   	push   %eax
f01109ce:	e8 bc 02 ff ff       	call   f0100c8f <execute_command>
f01109d3:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01109d6:	83 ec 04             	sub    $0x4,%esp
f01109d9:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01109df:	50                   	push   %eax
f01109e0:	68 82 83 13 f0       	push   $0xf0138382
f01109e5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01109eb:	50                   	push   %eax
f01109ec:	e8 12 fc 01 00       	call   f0130603 <strcconcat>
f01109f1:	83 c4 10             	add    $0x10,%esp
f01109f4:	83 ec 0c             	sub    $0xc,%esp
f01109f7:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01109fd:	50                   	push   %eax
f01109fe:	e8 8c 02 ff ff       	call   f0100c8f <execute_command>
f0110a03:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0110a06:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0110a0d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a10:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0110a13:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0110a1a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a1d:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0110a20:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0110a27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a2a:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0110a2d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110a30:	83 ec 08             	sub    $0x8,%esp
f0110a33:	50                   	push   %eax
f0110a34:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110a37:	e8 72 46 00 00       	call   f01150ae <GP>
f0110a3c:	83 c4 10             	add    $0x10,%esp
f0110a3f:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0110a42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0110a49:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0110a50:	e8 43 b3 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0110a55:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0110a58:	83 ec 0c             	sub    $0xc,%esp
f0110a5b:	68 90 83 13 f0       	push   $0xf0138390
f0110a60:	e8 c8 01 ff ff       	call   f0100c2d <cprintf>
f0110a65:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0110a68:	6a 03                	push   $0x3
f0110a6a:	68 00 00 90 02       	push   $0x2900000
f0110a6f:	68 00 00 80 02       	push   $0x2800000
f0110a74:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110a77:	e8 7b 74 ff ff       	call   f0107ef7 <cut_paste_pages>
f0110a7c:	83 c4 10             	add    $0x10,%esp
f0110a7f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0110a82:	e8 11 b3 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0110a87:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0110a8a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0110a91:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110a95:	75 08                	jne    f0110a9f <test_cut_paste_pages+0x212>
f0110a97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110a9a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110a9d:	74 2b                	je     f0110aca <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110a9f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110aa2:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110aa5:	83 ec 0c             	sub    $0xc,%esp
f0110aa8:	50                   	push   %eax
f0110aa9:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110aac:	68 c0 83 13 f0       	push   $0xf01383c0
f0110ab1:	68 94 01 00 00       	push   $0x194
f0110ab6:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110abb:	e8 72 f8 fe ff       	call   f0100332 <_warn>
f0110ac0:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110ac3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0110aca:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110ace:	74 04                	je     f0110ad4 <test_cut_paste_pages+0x247>
f0110ad0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0110ad4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110adb:	83 ec 08             	sub    $0x8,%esp
f0110ade:	6a 00                	push   $0x0
f0110ae0:	6a 01                	push   $0x1
f0110ae2:	6a 00                	push   $0x0
f0110ae4:	68 ff 0f 00 00       	push   $0xfff
f0110ae9:	ff 75 bc             	pushl  -0x44(%ebp)
f0110aec:	6a 01                	push   $0x1
f0110aee:	68 00 30 00 00       	push   $0x3000
f0110af3:	68 00 00 90 02       	push   $0x2900000
f0110af8:	68 00 00 80 02       	push   $0x2800000
f0110afd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b00:	e8 76 46 00 00       	call   f011517b <CCP>
f0110b05:	83 c4 30             	add    $0x30,%esp
f0110b08:	83 f8 01             	cmp    $0x1,%eax
f0110b0b:	74 21                	je     f0110b2e <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110b0d:	83 ec 04             	sub    $0x4,%esp
f0110b10:	68 14 84 13 f0       	push   $0xf0138414
f0110b15:	68 9c 01 00 00       	push   $0x19c
f0110b1a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110b1f:	e8 0e f8 fe ff       	call   f0100332 <_warn>
f0110b24:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110b27:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0110b2e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110b32:	74 04                	je     f0110b38 <test_cut_paste_pages+0x2ab>
f0110b34:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0110b38:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0110b3f:	83 ec 04             	sub    $0x4,%esp
f0110b42:	6a 00                	push   $0x0
f0110b44:	68 00 00 90 02       	push   $0x2900000
f0110b49:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b4c:	e8 5f 41 00 00       	call   f0114cb0 <CB>
f0110b51:	83 c4 10             	add    $0x10,%esp
f0110b54:	85 c0                	test   %eax,%eax
f0110b56:	0f 84 f6 00 00 00    	je     f0110c52 <test_cut_paste_pages+0x3c5>
f0110b5c:	83 ec 04             	sub    $0x4,%esp
f0110b5f:	6a 00                	push   $0x0
f0110b61:	68 00 10 90 02       	push   $0x2901000
f0110b66:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b69:	e8 42 41 00 00       	call   f0114cb0 <CB>
f0110b6e:	83 c4 10             	add    $0x10,%esp
f0110b71:	85 c0                	test   %eax,%eax
f0110b73:	0f 84 d9 00 00 00    	je     f0110c52 <test_cut_paste_pages+0x3c5>
f0110b79:	83 ec 04             	sub    $0x4,%esp
f0110b7c:	6a 00                	push   $0x0
f0110b7e:	68 00 20 90 02       	push   $0x2902000
f0110b83:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110b86:	e8 25 41 00 00       	call   f0114cb0 <CB>
f0110b8b:	83 c4 10             	add    $0x10,%esp
f0110b8e:	85 c0                	test   %eax,%eax
f0110b90:	0f 84 bc 00 00 00    	je     f0110c52 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0110b96:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0110b9d:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0110ba4:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0110bab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110bae:	8a 00                	mov    (%eax),%al
f0110bb0:	3c 61                	cmp    $0x61,%al
f0110bb2:	75 12                	jne    f0110bc6 <test_cut_paste_pages+0x339>
f0110bb4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110bb7:	8a 00                	mov    (%eax),%al
f0110bb9:	3c 62                	cmp    $0x62,%al
f0110bbb:	75 09                	jne    f0110bc6 <test_cut_paste_pages+0x339>
f0110bbd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110bc0:	8a 00                	mov    (%eax),%al
f0110bc2:	3c 63                	cmp    $0x63,%al
f0110bc4:	74 21                	je     f0110be7 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110bc6:	83 ec 04             	sub    $0x4,%esp
f0110bc9:	68 60 84 13 f0       	push   $0xf0138460
f0110bce:	68 a9 01 00 00       	push   $0x1a9
f0110bd3:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110bd8:	e8 55 f7 fe ff       	call   f0100332 <_warn>
f0110bdd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110be0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0110be7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110beb:	74 04                	je     f0110bf1 <test_cut_paste_pages+0x364>
f0110bed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110bf1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0110bf8:	83 ec 04             	sub    $0x4,%esp
f0110bfb:	6a 01                	push   $0x1
f0110bfd:	68 00 10 90 02       	push   $0x2901000
f0110c02:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110c05:	e8 a6 40 00 00       	call   f0114cb0 <CB>
f0110c0a:	83 c4 10             	add    $0x10,%esp
f0110c0d:	85 c0                	test   %eax,%eax
f0110c0f:	74 41                	je     f0110c52 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0110c11:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c14:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0110c17:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110c1a:	8a 00                	mov    (%eax),%al
f0110c1c:	3c 79                	cmp    $0x79,%al
f0110c1e:	74 21                	je     f0110c41 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110c20:	83 ec 04             	sub    $0x4,%esp
f0110c23:	68 60 84 13 f0       	push   $0xf0138460
f0110c28:	68 b4 01 00 00       	push   $0x1b4
f0110c2d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110c32:	e8 fb f6 fe ff       	call   f0100332 <_warn>
f0110c37:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0110c3a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0110c41:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110c45:	74 04                	je     f0110c4b <test_cut_paste_pages+0x3be>
f0110c47:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0110c4b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0110c52:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110c55:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0110c58:	6a 02                	push   $0x2
f0110c5a:	68 00 f0 bf 02       	push   $0x2bff000
f0110c5f:	68 00 10 90 02       	push   $0x2901000
f0110c64:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110c67:	e8 8b 72 ff ff       	call   f0107ef7 <cut_paste_pages>
f0110c6c:	83 c4 10             	add    $0x10,%esp
f0110c6f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110c72:	e8 21 b1 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0110c77:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0110c7a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110c7e:	75 0b                	jne    f0110c8b <test_cut_paste_pages+0x3fe>
f0110c80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110c83:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110c86:	83 f8 01             	cmp    $0x1,%eax
f0110c89:	74 2b                	je     f0110cb6 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110c8b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110c8e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110c91:	83 ec 0c             	sub    $0xc,%esp
f0110c94:	50                   	push   %eax
f0110c95:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110c98:	68 c0 83 13 f0       	push   $0xf01383c0
f0110c9d:	68 c5 01 00 00       	push   $0x1c5
f0110ca2:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110ca7:	e8 86 f6 fe ff       	call   f0100332 <_warn>
f0110cac:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110caf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110cb6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110cba:	74 04                	je     f0110cc0 <test_cut_paste_pages+0x433>
f0110cbc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110cc0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110cc7:	83 ec 08             	sub    $0x8,%esp
f0110cca:	6a 00                	push   $0x0
f0110ccc:	6a 01                	push   $0x1
f0110cce:	6a 00                	push   $0x0
f0110cd0:	68 ff 0f 00 00       	push   $0xfff
f0110cd5:	ff 75 bc             	pushl  -0x44(%ebp)
f0110cd8:	6a 01                	push   $0x1
f0110cda:	68 00 20 00 00       	push   $0x2000
f0110cdf:	68 00 f0 bf 02       	push   $0x2bff000
f0110ce4:	68 00 10 90 02       	push   $0x2901000
f0110ce9:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110cec:	e8 8a 44 00 00       	call   f011517b <CCP>
f0110cf1:	83 c4 30             	add    $0x30,%esp
f0110cf4:	83 f8 01             	cmp    $0x1,%eax
f0110cf7:	74 21                	je     f0110d1a <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110cf9:	83 ec 04             	sub    $0x4,%esp
f0110cfc:	68 14 84 13 f0       	push   $0xf0138414
f0110d01:	68 cd 01 00 00       	push   $0x1cd
f0110d06:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110d0b:	e8 22 f6 fe ff       	call   f0100332 <_warn>
f0110d10:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110d13:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110d1a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110d1e:	74 04                	je     f0110d24 <test_cut_paste_pages+0x497>
f0110d20:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110d24:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0110d2b:	83 ec 04             	sub    $0x4,%esp
f0110d2e:	6a 00                	push   $0x0
f0110d30:	68 ff f7 bf 02       	push   $0x2bff7ff
f0110d35:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d38:	e8 73 3f 00 00       	call   f0114cb0 <CB>
f0110d3d:	83 c4 10             	add    $0x10,%esp
f0110d40:	85 c0                	test   %eax,%eax
f0110d42:	74 6b                	je     f0110daf <test_cut_paste_pages+0x522>
f0110d44:	83 ec 04             	sub    $0x4,%esp
f0110d47:	6a 00                	push   $0x0
f0110d49:	68 ff 0f c0 02       	push   $0x2c00fff
f0110d4e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d51:	e8 5a 3f 00 00       	call   f0114cb0 <CB>
f0110d56:	83 c4 10             	add    $0x10,%esp
f0110d59:	85 c0                	test   %eax,%eax
f0110d5b:	74 52                	je     f0110daf <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0110d5d:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0110d64:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0110d6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d6e:	8a 00                	mov    (%eax),%al
f0110d70:	3c 79                	cmp    $0x79,%al
f0110d72:	75 09                	jne    f0110d7d <test_cut_paste_pages+0x4f0>
f0110d74:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110d77:	8a 00                	mov    (%eax),%al
f0110d79:	3c 63                	cmp    $0x63,%al
f0110d7b:	74 21                	je     f0110d9e <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110d7d:	83 ec 04             	sub    $0x4,%esp
f0110d80:	68 60 84 13 f0       	push   $0xf0138460
f0110d85:	68 d9 01 00 00       	push   $0x1d9
f0110d8a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110d8f:	e8 9e f5 fe ff       	call   f0100332 <_warn>
f0110d94:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110d97:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0110d9e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110da2:	74 04                	je     f0110da8 <test_cut_paste_pages+0x51b>
f0110da4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0110da8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0110daf:	83 ec 0c             	sub    $0xc,%esp
f0110db2:	68 99 84 13 f0       	push   $0xf0138499
f0110db7:	e8 71 fe fe ff       	call   f0100c2d <cprintf>
f0110dbc:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0110dbf:	83 ec 0c             	sub    $0xc,%esp
f0110dc2:	68 a8 84 13 f0       	push   $0xf01384a8
f0110dc7:	e8 61 fe fe ff       	call   f0100c2d <cprintf>
f0110dcc:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0110dcf:	83 ec 04             	sub    $0x4,%esp
f0110dd2:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0110dd8:	50                   	push   %eax
f0110dd9:	68 d1 84 13 f0       	push   $0xf01384d1
f0110dde:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110de4:	50                   	push   %eax
f0110de5:	e8 19 f8 01 00       	call   f0130603 <strcconcat>
f0110dea:	83 c4 10             	add    $0x10,%esp
f0110ded:	83 ec 0c             	sub    $0xc,%esp
f0110df0:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0110df6:	50                   	push   %eax
f0110df7:	e8 93 fe fe ff       	call   f0100c8f <execute_command>
f0110dfc:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0110dff:	83 ec 04             	sub    $0x4,%esp
f0110e02:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0110e08:	50                   	push   %eax
f0110e09:	68 dc 84 13 f0       	push   $0xf01384dc
f0110e0e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e14:	50                   	push   %eax
f0110e15:	e8 e9 f7 01 00       	call   f0130603 <strcconcat>
f0110e1a:	83 c4 10             	add    $0x10,%esp
f0110e1d:	83 ec 0c             	sub    $0xc,%esp
f0110e20:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0110e26:	50                   	push   %eax
f0110e27:	e8 63 fe fe ff       	call   f0100c8f <execute_command>
f0110e2c:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0110e2f:	83 ec 04             	sub    $0x4,%esp
f0110e32:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0110e38:	50                   	push   %eax
f0110e39:	68 e7 84 13 f0       	push   $0xf01384e7
f0110e3e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e44:	50                   	push   %eax
f0110e45:	e8 b9 f7 01 00       	call   f0130603 <strcconcat>
f0110e4a:	83 c4 10             	add    $0x10,%esp
f0110e4d:	83 ec 0c             	sub    $0xc,%esp
f0110e50:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0110e56:	50                   	push   %eax
f0110e57:	e8 33 fe fe ff       	call   f0100c8f <execute_command>
f0110e5c:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0110e5f:	83 ec 04             	sub    $0x4,%esp
f0110e62:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0110e68:	50                   	push   %eax
f0110e69:	68 f2 84 13 f0       	push   $0xf01384f2
f0110e6e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110e74:	50                   	push   %eax
f0110e75:	e8 89 f7 01 00       	call   f0130603 <strcconcat>
f0110e7a:	83 c4 10             	add    $0x10,%esp
f0110e7d:	83 ec 0c             	sub    $0xc,%esp
f0110e80:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0110e86:	50                   	push   %eax
f0110e87:	e8 03 fe fe ff       	call   f0100c8f <execute_command>
f0110e8c:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0110e8f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0110e96:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110e99:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0110e9c:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0110ea3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ea6:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0110ea9:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0110eb0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110eb3:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0110eb6:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0110ebd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ec0:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0110ec3:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0110eca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ecd:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0110ed0:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0110ed7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110eda:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0110edd:	83 ec 08             	sub    $0x8,%esp
f0110ee0:	68 00 00 c0 01       	push   $0x1c00000
f0110ee5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110ee8:	e8 c1 41 00 00       	call   f01150ae <GP>
f0110eed:	83 c4 10             	add    $0x10,%esp
f0110ef0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0110ef3:	83 ec 08             	sub    $0x8,%esp
f0110ef6:	68 00 00 40 01       	push   $0x1400000
f0110efb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110efe:	e8 ab 41 00 00       	call   f01150ae <GP>
f0110f03:	83 c4 10             	add    $0x10,%esp
f0110f06:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0110f09:	e8 8a ae ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0110f0e:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0110f11:	6a 01                	push   $0x1
f0110f13:	68 00 00 40 01       	push   $0x1400000
f0110f18:	68 00 00 c0 01       	push   $0x1c00000
f0110f1d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f20:	e8 d2 6f ff ff       	call   f0107ef7 <cut_paste_pages>
f0110f25:	83 c4 10             	add    $0x10,%esp
f0110f28:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110f2b:	e8 68 ae ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0110f30:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0110f33:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0110f37:	75 08                	jne    f0110f41 <test_cut_paste_pages+0x6b4>
f0110f39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110f3c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110f3f:	74 2b                	je     f0110f6c <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110f41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110f44:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110f47:	83 ec 0c             	sub    $0xc,%esp
f0110f4a:	50                   	push   %eax
f0110f4b:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110f4e:	68 00 85 13 f0       	push   $0xf0138500
f0110f53:	68 fc 01 00 00       	push   $0x1fc
f0110f58:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110f5d:	e8 d0 f3 fe ff       	call   f0100332 <_warn>
f0110f62:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110f65:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110f6c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110f70:	74 04                	je     f0110f76 <test_cut_paste_pages+0x6e9>
f0110f72:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110f76:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0110f7d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0110f84:	83 ec 08             	sub    $0x8,%esp
f0110f87:	6a 00                	push   $0x0
f0110f89:	68 ff 0f 00 00       	push   $0xfff
f0110f8e:	ff 75 a4             	pushl  -0x5c(%ebp)
f0110f91:	68 ff 0f 00 00       	push   $0xfff
f0110f96:	ff 75 a0             	pushl  -0x60(%ebp)
f0110f99:	6a 01                	push   $0x1
f0110f9b:	68 00 10 00 00       	push   $0x1000
f0110fa0:	68 00 00 40 01       	push   $0x1400000
f0110fa5:	68 00 00 c0 01       	push   $0x1c00000
f0110faa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110fad:	e8 c9 41 00 00       	call   f011517b <CCP>
f0110fb2:	83 c4 30             	add    $0x30,%esp
f0110fb5:	83 f8 01             	cmp    $0x1,%eax
f0110fb8:	74 28                	je     f0110fe2 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110fba:	83 ec 04             	sub    $0x4,%esp
f0110fbd:	68 14 84 13 f0       	push   $0xf0138414
f0110fc2:	68 05 02 00 00       	push   $0x205
f0110fc7:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0110fcc:	e8 61 f3 fe ff       	call   f0100332 <_warn>
f0110fd1:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110fd4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0110fdb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0110fe2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110fe6:	74 04                	je     f0110fec <test_cut_paste_pages+0x75f>
f0110fe8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0110fec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0110ff3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110ff7:	0f 84 92 00 00 00    	je     f011108f <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0110ffd:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111004:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011100b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111012:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111019:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111020:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111027:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011102a:	8a 00                	mov    (%eax),%al
f011102c:	3c 61                	cmp    $0x61,%al
f011102e:	75 2d                	jne    f011105d <test_cut_paste_pages+0x7d0>
f0111030:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111033:	8a 00                	mov    (%eax),%al
f0111035:	3c 78                	cmp    $0x78,%al
f0111037:	75 24                	jne    f011105d <test_cut_paste_pages+0x7d0>
f0111039:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011103c:	8a 00                	mov    (%eax),%al
f011103e:	3c 62                	cmp    $0x62,%al
f0111040:	75 1b                	jne    f011105d <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111042:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111045:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111047:	3c 79                	cmp    $0x79,%al
f0111049:	75 12                	jne    f011105d <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011104b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011104e:	8a 00                	mov    (%eax),%al
f0111050:	3c 63                	cmp    $0x63,%al
f0111052:	75 09                	jne    f011105d <test_cut_paste_pages+0x7d0>
f0111054:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111057:	8a 00                	mov    (%eax),%al
f0111059:	3c 7a                	cmp    $0x7a,%al
f011105b:	74 21                	je     f011107e <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011105d:	83 ec 04             	sub    $0x4,%esp
f0111060:	68 60 84 13 f0       	push   $0xf0138460
f0111065:	68 17 02 00 00       	push   $0x217
f011106a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011106f:	e8 be f2 fe ff       	call   f0100332 <_warn>
f0111074:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111077:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011107e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111082:	74 04                	je     f0111088 <test_cut_paste_pages+0x7fb>
f0111084:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111088:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f011108f:	e8 04 ad ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111094:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111097:	6a 03                	push   $0x3
f0111099:	68 00 f0 bf 01       	push   $0x1bff000
f011109e:	68 00 00 40 01       	push   $0x1400000
f01110a3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01110a6:	e8 4c 6e ff ff       	call   f0107ef7 <cut_paste_pages>
f01110ab:	83 c4 10             	add    $0x10,%esp
f01110ae:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01110b1:	e8 e2 ac ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01110b6:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01110b9:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01110bd:	75 08                	jne    f01110c7 <test_cut_paste_pages+0x83a>
f01110bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110c2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01110c5:	74 2b                	je     f01110f2 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01110c7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110ca:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01110cd:	83 ec 0c             	sub    $0xc,%esp
f01110d0:	50                   	push   %eax
f01110d1:	ff 75 b4             	pushl  -0x4c(%ebp)
f01110d4:	68 00 85 13 f0       	push   $0xf0138500
f01110d9:	68 26 02 00 00       	push   $0x226
f01110de:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01110e3:	e8 4a f2 fe ff       	call   f0100332 <_warn>
f01110e8:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01110eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01110f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01110f6:	74 04                	je     f01110fc <test_cut_paste_pages+0x86f>
f01110f8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01110fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111103:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011110a:	83 ec 04             	sub    $0x4,%esp
f011110d:	6a 00                	push   $0x0
f011110f:	68 00 00 40 01       	push   $0x1400000
f0111114:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111117:	e8 94 3b 00 00       	call   f0114cb0 <CB>
f011111c:	83 c4 10             	add    $0x10,%esp
f011111f:	83 f8 01             	cmp    $0x1,%eax
f0111122:	0f 85 80 00 00 00    	jne    f01111a8 <test_cut_paste_pages+0x91b>
f0111128:	83 ec 04             	sub    $0x4,%esp
f011112b:	6a 00                	push   $0x0
f011112d:	68 00 10 40 01       	push   $0x1401000
f0111132:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111135:	e8 76 3b 00 00       	call   f0114cb0 <CB>
f011113a:	83 c4 10             	add    $0x10,%esp
f011113d:	83 f8 01             	cmp    $0x1,%eax
f0111140:	75 66                	jne    f01111a8 <test_cut_paste_pages+0x91b>
f0111142:	83 ec 04             	sub    $0x4,%esp
f0111145:	6a 00                	push   $0x0
f0111147:	68 00 20 40 01       	push   $0x1402000
f011114c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011114f:	e8 5c 3b 00 00       	call   f0114cb0 <CB>
f0111154:	83 c4 10             	add    $0x10,%esp
f0111157:	83 f8 01             	cmp    $0x1,%eax
f011115a:	75 4c                	jne    f01111a8 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011115c:	83 ec 04             	sub    $0x4,%esp
f011115f:	6a 00                	push   $0x0
f0111161:	68 00 f0 bf 01       	push   $0x1bff000
f0111166:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111169:	e8 42 3b 00 00       	call   f0114cb0 <CB>
f011116e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111171:	85 c0                	test   %eax,%eax
f0111173:	75 33                	jne    f01111a8 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111175:	83 ec 04             	sub    $0x4,%esp
f0111178:	6a 00                	push   $0x0
f011117a:	68 00 00 c0 01       	push   $0x1c00000
f011117f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111182:	e8 29 3b 00 00       	call   f0114cb0 <CB>
f0111187:	83 c4 10             	add    $0x10,%esp
f011118a:	83 f8 01             	cmp    $0x1,%eax
f011118d:	75 19                	jne    f01111a8 <test_cut_paste_pages+0x91b>
f011118f:	83 ec 04             	sub    $0x4,%esp
f0111192:	6a 00                	push   $0x0
f0111194:	68 00 10 c0 01       	push   $0x1c01000
f0111199:	ff 75 d4             	pushl  -0x2c(%ebp)
f011119c:	e8 0f 3b 00 00       	call   f0114cb0 <CB>
f01111a1:	83 c4 10             	add    $0x10,%esp
f01111a4:	85 c0                	test   %eax,%eax
f01111a6:	74 28                	je     f01111d0 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01111a8:	83 ec 04             	sub    $0x4,%esp
f01111ab:	68 60 85 13 f0       	push   $0xf0138560
f01111b0:	68 2f 02 00 00       	push   $0x22f
f01111b5:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01111ba:	e8 73 f1 fe ff       	call   f0100332 <_warn>
f01111bf:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01111c2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01111c9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01111d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01111d4:	74 04                	je     f01111da <test_cut_paste_pages+0x94d>
f01111d6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01111da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01111e1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01111e5:	0f 84 99 00 00 00    	je     f0111284 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f01111eb:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f01111f2:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f01111f9:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111200:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111207:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011120e:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111215:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111218:	8a 00                	mov    (%eax),%al
f011121a:	3c 61                	cmp    $0x61,%al
f011121c:	75 2d                	jne    f011124b <test_cut_paste_pages+0x9be>
f011121e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111221:	8a 00                	mov    (%eax),%al
f0111223:	3c 78                	cmp    $0x78,%al
f0111225:	75 24                	jne    f011124b <test_cut_paste_pages+0x9be>
f0111227:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011122a:	8a 00                	mov    (%eax),%al
f011122c:	3c 62                	cmp    $0x62,%al
f011122e:	75 1b                	jne    f011124b <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111230:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111233:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111235:	3c 79                	cmp    $0x79,%al
f0111237:	75 12                	jne    f011124b <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111239:	8b 45 98             	mov    -0x68(%ebp),%eax
f011123c:	8a 00                	mov    (%eax),%al
f011123e:	3c 63                	cmp    $0x63,%al
f0111240:	75 09                	jne    f011124b <test_cut_paste_pages+0x9be>
f0111242:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111245:	8a 00                	mov    (%eax),%al
f0111247:	3c 7a                	cmp    $0x7a,%al
f0111249:	74 28                	je     f0111273 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011124b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111252:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111259:	83 ec 04             	sub    $0x4,%esp
f011125c:	68 60 84 13 f0       	push   $0xf0138460
f0111261:	68 43 02 00 00       	push   $0x243
f0111266:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011126b:	e8 c2 f0 fe ff       	call   f0100332 <_warn>
f0111270:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111273:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111277:	74 04                	je     f011127d <test_cut_paste_pages+0x9f0>
f0111279:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011127d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0111284:	83 ec 0c             	sub    $0xc,%esp
f0111287:	68 99 85 13 f0       	push   $0xf0138599
f011128c:	e8 9c f9 fe ff       	call   f0100c2d <cprintf>
f0111291:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0111294:	83 ec 08             	sub    $0x8,%esp
f0111297:	ff 75 e4             	pushl  -0x1c(%ebp)
f011129a:	68 a8 85 13 f0       	push   $0xf01385a8
f011129f:	e8 89 f9 fe ff       	call   f0100c2d <cprintf>
f01112a4:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01112a7:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01112ab:	75 10                	jne    f01112bd <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01112ad:	83 ec 0c             	sub    $0xc,%esp
f01112b0:	68 dc 85 13 f0       	push   $0xf01385dc
f01112b5:	e8 73 f9 fe ff       	call   f0100c2d <cprintf>
f01112ba:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01112bd:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01112c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01112c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01112c8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01112cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01112d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01112d3:	5b                   	pop    %ebx
f01112d4:	5e                   	pop    %esi
f01112d5:	5f                   	pop    %edi
f01112d6:	5d                   	pop    %ebp
f01112d7:	c3                   	ret    

f01112d8 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01112d8:	55                   	push   %ebp
f01112d9:	89 e5                	mov    %esp,%ebp
f01112db:	57                   	push   %edi
f01112dc:	56                   	push   %esi
f01112dd:	53                   	push   %ebx
f01112de:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01112e4:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f01112ea:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f01112ef:	ba 0f 00 00 00       	mov    $0xf,%edx
f01112f4:	89 c7                	mov    %eax,%edi
f01112f6:	89 de                	mov    %ebx,%esi
f01112f8:	89 d1                	mov    %edx,%ecx
f01112fa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01112fc:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111302:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111307:	b0 00                	mov    $0x0,%al
f0111309:	89 d7                	mov    %edx,%edi
f011130b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011130d:	6a 00                	push   $0x0
f011130f:	6a 0a                	push   $0xa
f0111311:	6a 14                	push   $0x14
f0111313:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111319:	50                   	push   %eax
f011131a:	e8 2d 6d ff ff       	call   f010804c <env_create>
f011131f:	83 c4 10             	add    $0x10,%esp
f0111322:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111325:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111328:	8b 40 5c             	mov    0x5c(%eax),%eax
f011132b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f011132e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111331:	8b 40 60             	mov    0x60(%eax),%eax
f0111334:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011133a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111340:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111343:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011134a:	75 70 20 
f011134d:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111354:	00 00 00 
f0111357:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011135d:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111362:	b8 00 00 00 00       	mov    $0x0,%eax
f0111367:	89 d7                	mov    %edx,%edi
f0111369:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011136b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011136e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111371:	83 ec 08             	sub    $0x8,%esp
f0111374:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f011137a:	52                   	push   %edx
f011137b:	50                   	push   %eax
f011137c:	e8 8a f1 01 00       	call   f013050b <ltostr>
f0111381:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111384:	83 ec 04             	sub    $0x4,%esp
f0111387:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011138d:	50                   	push   %eax
f011138e:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0111394:	50                   	push   %eax
f0111395:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f011139b:	50                   	push   %eax
f011139c:	e8 62 f2 01 00       	call   f0130603 <strcconcat>
f01113a1:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01113a4:	83 ec 0c             	sub    $0xc,%esp
f01113a7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113aa:	e8 98 3d 00 00       	call   f0115147 <ClearUserSpace>
f01113af:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01113b2:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01113b9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01113c0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01113c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01113ce:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01113d5:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01113dc:	83 ec 0c             	sub    $0xc,%esp
f01113df:	68 50 86 13 f0       	push   $0xf0138650
f01113e4:	e8 44 f8 fe ff       	call   f0100c2d <cprintf>
f01113e9:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01113ec:	83 ec 04             	sub    $0x4,%esp
f01113ef:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01113f5:	50                   	push   %eax
f01113f6:	68 86 86 13 f0       	push   $0xf0138686
f01113fb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111401:	50                   	push   %eax
f0111402:	e8 fc f1 01 00       	call   f0130603 <strcconcat>
f0111407:	83 c4 10             	add    $0x10,%esp
f011140a:	83 ec 0c             	sub    $0xc,%esp
f011140d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111413:	50                   	push   %eax
f0111414:	e8 76 f8 fe ff       	call   f0100c8f <execute_command>
f0111419:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f011141c:	83 ec 04             	sub    $0x4,%esp
f011141f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111425:	50                   	push   %eax
f0111426:	68 8b 86 13 f0       	push   $0xf013868b
f011142b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111431:	50                   	push   %eax
f0111432:	e8 cc f1 01 00       	call   f0130603 <strcconcat>
f0111437:	83 c4 10             	add    $0x10,%esp
f011143a:	83 ec 0c             	sub    $0xc,%esp
f011143d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111443:	50                   	push   %eax
f0111444:	e8 46 f8 fe ff       	call   f0100c8f <execute_command>
f0111449:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f011144c:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111452:	bb 91 89 13 f0       	mov    $0xf0138991,%ebx
f0111457:	ba 0f 00 00 00       	mov    $0xf,%edx
f011145c:	89 c7                	mov    %eax,%edi
f011145e:	89 de                	mov    %ebx,%esi
f0111460:	89 d1                	mov    %edx,%ecx
f0111462:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111464:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011146a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011146f:	b0 00                	mov    $0x0,%al
f0111471:	89 d7                	mov    %edx,%edi
f0111473:	f3 aa                	rep stos %al,%es:(%edi)
f0111475:	83 ec 0c             	sub    $0xc,%esp
f0111478:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011147e:	50                   	push   %eax
f011147f:	e8 0b f8 fe ff       	call   f0100c8f <execute_command>
f0111484:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0111487:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011148d:	bb f5 89 13 f0       	mov    $0xf01389f5,%ebx
f0111492:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111497:	89 c7                	mov    %eax,%edi
f0111499:	89 de                	mov    %ebx,%esi
f011149b:	89 d1                	mov    %edx,%ecx
f011149d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011149f:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01114a5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01114aa:	b0 00                	mov    $0x0,%al
f01114ac:	89 d7                	mov    %edx,%edi
f01114ae:	f3 aa                	rep stos %al,%es:(%edi)
f01114b0:	83 ec 0c             	sub    $0xc,%esp
f01114b3:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01114b9:	50                   	push   %eax
f01114ba:	e8 d0 f7 fe ff       	call   f0100c8f <execute_command>
f01114bf:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01114c2:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01114c8:	bb 59 8a 13 f0       	mov    $0xf0138a59,%ebx
f01114cd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01114d2:	89 c7                	mov    %eax,%edi
f01114d4:	89 de                	mov    %ebx,%esi
f01114d6:	89 d1                	mov    %edx,%ecx
f01114d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01114da:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01114e0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01114e5:	b0 00                	mov    $0x0,%al
f01114e7:	89 d7                	mov    %edx,%edi
f01114e9:	f3 aa                	rep stos %al,%es:(%edi)
f01114eb:	83 ec 0c             	sub    $0xc,%esp
f01114ee:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01114f4:	50                   	push   %eax
f01114f5:	e8 95 f7 fe ff       	call   f0100c8f <execute_command>
f01114fa:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01114fd:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111503:	bb bd 8a 13 f0       	mov    $0xf0138abd,%ebx
f0111508:	ba 0f 00 00 00       	mov    $0xf,%edx
f011150d:	89 c7                	mov    %eax,%edi
f011150f:	89 de                	mov    %ebx,%esi
f0111511:	89 d1                	mov    %edx,%ecx
f0111513:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111515:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011151b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111520:	b0 00                	mov    $0x0,%al
f0111522:	89 d7                	mov    %edx,%edi
f0111524:	f3 aa                	rep stos %al,%es:(%edi)
f0111526:	83 ec 0c             	sub    $0xc,%esp
f0111529:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011152f:	50                   	push   %eax
f0111530:	e8 5a f7 fe ff       	call   f0100c8f <execute_command>
f0111535:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0111538:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011153e:	bb 21 8b 13 f0       	mov    $0xf0138b21,%ebx
f0111543:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111548:	89 c7                	mov    %eax,%edi
f011154a:	89 de                	mov    %ebx,%esi
f011154c:	89 d1                	mov    %edx,%ecx
f011154e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111550:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111556:	b9 55 00 00 00       	mov    $0x55,%ecx
f011155b:	b0 00                	mov    $0x0,%al
f011155d:	89 d7                	mov    %edx,%edi
f011155f:	f3 aa                	rep stos %al,%es:(%edi)
f0111561:	83 ec 0c             	sub    $0xc,%esp
f0111564:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011156a:	50                   	push   %eax
f011156b:	e8 1f f7 fe ff       	call   f0100c8f <execute_command>
f0111570:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0111573:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111579:	bb 85 8b 13 f0       	mov    $0xf0138b85,%ebx
f011157e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111583:	89 c7                	mov    %eax,%edi
f0111585:	89 de                	mov    %ebx,%esi
f0111587:	89 d1                	mov    %edx,%ecx
f0111589:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011158b:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111591:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111596:	b0 00                	mov    $0x0,%al
f0111598:	89 d7                	mov    %edx,%edi
f011159a:	f3 aa                	rep stos %al,%es:(%edi)
f011159c:	83 ec 0c             	sub    $0xc,%esp
f011159f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01115a5:	50                   	push   %eax
f01115a6:	e8 e4 f6 fe ff       	call   f0100c8f <execute_command>
f01115ab:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01115ae:	83 ec 04             	sub    $0x4,%esp
f01115b1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01115b7:	50                   	push   %eax
f01115b8:	68 93 86 13 f0       	push   $0xf0138693
f01115bd:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01115c3:	50                   	push   %eax
f01115c4:	e8 3a f0 01 00       	call   f0130603 <strcconcat>
f01115c9:	83 c4 10             	add    $0x10,%esp
f01115cc:	83 ec 0c             	sub    $0xc,%esp
f01115cf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01115d5:	50                   	push   %eax
f01115d6:	e8 b4 f6 fe ff       	call   f0100c8f <execute_command>
f01115db:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01115de:	83 ec 04             	sub    $0x4,%esp
f01115e1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01115e7:	50                   	push   %eax
f01115e8:	68 9d 86 13 f0       	push   $0xf013869d
f01115ed:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01115f3:	50                   	push   %eax
f01115f4:	e8 0a f0 01 00       	call   f0130603 <strcconcat>
f01115f9:	83 c4 10             	add    $0x10,%esp
f01115fc:	83 ec 0c             	sub    $0xc,%esp
f01115ff:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111605:	50                   	push   %eax
f0111606:	e8 84 f6 fe ff       	call   f0100c8f <execute_command>
f011160b:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011160e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111614:	bb e9 8b 13 f0       	mov    $0xf0138be9,%ebx
f0111619:	ba 0f 00 00 00       	mov    $0xf,%edx
f011161e:	89 c7                	mov    %eax,%edi
f0111620:	89 de                	mov    %ebx,%esi
f0111622:	89 d1                	mov    %edx,%ecx
f0111624:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111626:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011162c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111631:	b0 00                	mov    $0x0,%al
f0111633:	89 d7                	mov    %edx,%edi
f0111635:	f3 aa                	rep stos %al,%es:(%edi)
f0111637:	83 ec 0c             	sub    $0xc,%esp
f011163a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111640:	50                   	push   %eax
f0111641:	e8 49 f6 fe ff       	call   f0100c8f <execute_command>
f0111646:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0111649:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011164f:	bb 4d 8c 13 f0       	mov    $0xf0138c4d,%ebx
f0111654:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111659:	89 c7                	mov    %eax,%edi
f011165b:	89 de                	mov    %ebx,%esi
f011165d:	89 d1                	mov    %edx,%ecx
f011165f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111661:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111667:	b9 55 00 00 00       	mov    $0x55,%ecx
f011166c:	b0 00                	mov    $0x0,%al
f011166e:	89 d7                	mov    %edx,%edi
f0111670:	f3 aa                	rep stos %al,%es:(%edi)
f0111672:	83 ec 0c             	sub    $0xc,%esp
f0111675:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011167b:	50                   	push   %eax
f011167c:	e8 0e f6 fe ff       	call   f0100c8f <execute_command>
f0111681:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0111684:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011168a:	bb b1 8c 13 f0       	mov    $0xf0138cb1,%ebx
f011168f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111694:	89 c7                	mov    %eax,%edi
f0111696:	89 de                	mov    %ebx,%esi
f0111698:	89 d1                	mov    %edx,%ecx
f011169a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011169c:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01116a2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01116a7:	b0 00                	mov    $0x0,%al
f01116a9:	89 d7                	mov    %edx,%edi
f01116ab:	f3 aa                	rep stos %al,%es:(%edi)
f01116ad:	83 ec 0c             	sub    $0xc,%esp
f01116b0:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01116b6:	50                   	push   %eax
f01116b7:	e8 d3 f5 fe ff       	call   f0100c8f <execute_command>
f01116bc:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01116bf:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01116c6:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01116cd:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01116d4:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01116db:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01116e2:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01116e9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01116f0:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01116f7:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01116fe:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111705:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011170c:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111713:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111716:	8a 00                	mov    (%eax),%al
f0111718:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011171e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111721:	8a 00                	mov    (%eax),%al
f0111723:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0111729:	8b 45 90             	mov    -0x70(%ebp),%eax
f011172c:	8a 00                	mov    (%eax),%al
f011172e:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111734:	e8 5f a6 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111739:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011173c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011173f:	89 d0                	mov    %edx,%eax
f0111741:	01 c0                	add    %eax,%eax
f0111743:	01 d0                	add    %edx,%eax
f0111745:	01 c0                	add    %eax,%eax
f0111747:	50                   	push   %eax
f0111748:	68 00 00 10 00       	push   $0x100000
f011174d:	6a 00                	push   $0x0
f011174f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111752:	e8 ba 67 ff ff       	call   f0107f11 <copy_paste_chunk>
f0111757:	83 c4 10             	add    $0x10,%esp
f011175a:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011175d:	e8 36 a6 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111762:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111765:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011176c:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0111770:	75 08                	jne    f011177a <test_copy_paste_chunk+0x4a2>
f0111772:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111775:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111778:	74 2b                	je     f01117a5 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011177a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011177d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111780:	83 ec 0c             	sub    $0xc,%esp
f0111783:	50                   	push   %eax
f0111784:	ff 75 88             	pushl  -0x78(%ebp)
f0111787:	68 ac 86 13 f0       	push   $0xf01386ac
f011178c:	68 96 02 00 00       	push   $0x296
f0111791:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111796:	e8 97 eb fe ff       	call   f0100332 <_warn>
f011179b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011179e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01117a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117a9:	74 04                	je     f01117af <test_copy_paste_chunk+0x4d7>
f01117ab:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01117af:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01117b6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01117b9:	8a 00                	mov    (%eax),%al
f01117bb:	3c 61                	cmp    $0x61,%al
f01117bd:	75 75                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01117c2:	8a 00                	mov    (%eax),%al
f01117c4:	3c 78                	cmp    $0x78,%al
f01117c6:	75 6c                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01117cb:	8a 00                	mov    (%eax),%al
f01117cd:	3c 62                	cmp    $0x62,%al
f01117cf:	75 63                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01117d4:	8a 00                	mov    (%eax),%al
f01117d6:	3c 79                	cmp    $0x79,%al
f01117d8:	75 5a                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117dd:	8a 00                	mov    (%eax),%al
f01117df:	3c 63                	cmp    $0x63,%al
f01117e1:	75 51                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117e6:	8a 00                	mov    (%eax),%al
f01117e8:	3c 7a                	cmp    $0x7a,%al
f01117ea:	75 48                	jne    f0111834 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01117ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117ef:	8a 00                	mov    (%eax),%al
f01117f1:	3c 64                	cmp    $0x64,%al
f01117f3:	75 3f                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f01117f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01117f8:	8a 10                	mov    (%eax),%dl
f01117fa:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111800:	38 c2                	cmp    %al,%dl
f0111802:	75 30                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f0111804:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111807:	8a 00                	mov    (%eax),%al
f0111809:	3c 65                	cmp    $0x65,%al
f011180b:	75 27                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f011180d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111810:	8a 10                	mov    (%eax),%dl
f0111812:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111818:	38 c2                	cmp    %al,%dl
f011181a:	75 18                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f011181c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011181f:	8a 00                	mov    (%eax),%al
f0111821:	3c 66                	cmp    $0x66,%al
f0111823:	75 0f                	jne    f0111834 <test_copy_paste_chunk+0x55c>
f0111825:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111828:	8a 10                	mov    (%eax),%dl
f011182a:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111830:	38 c2                	cmp    %al,%dl
f0111832:	74 21                	je     f0111855 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111834:	83 ec 04             	sub    $0x4,%esp
f0111837:	68 10 87 13 f0       	push   $0xf0138710
f011183c:	68 9f 02 00 00       	push   $0x29f
f0111841:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111846:	e8 e7 ea fe ff       	call   f0100332 <_warn>
f011184b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011184e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111855:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111859:	74 04                	je     f011185f <test_copy_paste_chunk+0x587>
f011185b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011185f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111866:	83 ec 0c             	sub    $0xc,%esp
f0111869:	68 4a 87 13 f0       	push   $0xf013874a
f011186e:	e8 ba f3 fe ff       	call   f0100c2d <cprintf>
f0111873:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0111876:	83 ec 0c             	sub    $0xc,%esp
f0111879:	68 5c 87 13 f0       	push   $0xf013875c
f011187e:	e8 aa f3 fe ff       	call   f0100c2d <cprintf>
f0111883:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0111886:	83 ec 04             	sub    $0x4,%esp
f0111889:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011188f:	50                   	push   %eax
f0111890:	68 92 87 13 f0       	push   $0xf0138792
f0111895:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011189b:	50                   	push   %eax
f011189c:	e8 62 ed 01 00       	call   f0130603 <strcconcat>
f01118a1:	83 c4 10             	add    $0x10,%esp
f01118a4:	83 ec 0c             	sub    $0xc,%esp
f01118a7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118ad:	50                   	push   %eax
f01118ae:	e8 dc f3 fe ff       	call   f0100c8f <execute_command>
f01118b3:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01118b6:	83 ec 04             	sub    $0x4,%esp
f01118b9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118bf:	50                   	push   %eax
f01118c0:	68 9c 87 13 f0       	push   $0xf013879c
f01118c5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01118cb:	50                   	push   %eax
f01118cc:	e8 32 ed 01 00       	call   f0130603 <strcconcat>
f01118d1:	83 c4 10             	add    $0x10,%esp
f01118d4:	83 ec 0c             	sub    $0xc,%esp
f01118d7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01118dd:	50                   	push   %eax
f01118de:	e8 ac f3 fe ff       	call   f0100c8f <execute_command>
f01118e3:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01118e6:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01118ec:	bb 15 8d 13 f0       	mov    $0xf0138d15,%ebx
f01118f1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01118f6:	89 c7                	mov    %eax,%edi
f01118f8:	89 de                	mov    %ebx,%esi
f01118fa:	89 d1                	mov    %edx,%ecx
f01118fc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01118fe:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111904:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111909:	b0 00                	mov    $0x0,%al
f011190b:	89 d7                	mov    %edx,%edi
f011190d:	f3 aa                	rep stos %al,%es:(%edi)
f011190f:	83 ec 0c             	sub    $0xc,%esp
f0111912:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111918:	50                   	push   %eax
f0111919:	e8 71 f3 fe ff       	call   f0100c8f <execute_command>
f011191e:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111921:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111927:	bb 79 8d 13 f0       	mov    $0xf0138d79,%ebx
f011192c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111931:	89 c7                	mov    %eax,%edi
f0111933:	89 de                	mov    %ebx,%esi
f0111935:	89 d1                	mov    %edx,%ecx
f0111937:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111939:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011193f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111944:	b0 00                	mov    $0x0,%al
f0111946:	89 d7                	mov    %edx,%edi
f0111948:	f3 aa                	rep stos %al,%es:(%edi)
f011194a:	83 ec 0c             	sub    $0xc,%esp
f011194d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111953:	50                   	push   %eax
f0111954:	e8 36 f3 fe ff       	call   f0100c8f <execute_command>
f0111959:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011195c:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111962:	bb dd 8d 13 f0       	mov    $0xf0138ddd,%ebx
f0111967:	ba 0f 00 00 00       	mov    $0xf,%edx
f011196c:	89 c7                	mov    %eax,%edi
f011196e:	89 de                	mov    %ebx,%esi
f0111970:	89 d1                	mov    %edx,%ecx
f0111972:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111974:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011197a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011197f:	b0 00                	mov    $0x0,%al
f0111981:	89 d7                	mov    %edx,%edi
f0111983:	f3 aa                	rep stos %al,%es:(%edi)
f0111985:	83 ec 0c             	sub    $0xc,%esp
f0111988:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011198e:	50                   	push   %eax
f011198f:	e8 fb f2 fe ff       	call   f0100c8f <execute_command>
f0111994:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0111997:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011199d:	bb 41 8e 13 f0       	mov    $0xf0138e41,%ebx
f01119a2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119a7:	89 c7                	mov    %eax,%edi
f01119a9:	89 de                	mov    %ebx,%esi
f01119ab:	89 d1                	mov    %edx,%ecx
f01119ad:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119af:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01119b5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119ba:	b0 00                	mov    $0x0,%al
f01119bc:	89 d7                	mov    %edx,%edi
f01119be:	f3 aa                	rep stos %al,%es:(%edi)
f01119c0:	83 ec 0c             	sub    $0xc,%esp
f01119c3:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01119c9:	50                   	push   %eax
f01119ca:	e8 c0 f2 fe ff       	call   f0100c8f <execute_command>
f01119cf:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01119d2:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01119d8:	bb a5 8e 13 f0       	mov    $0xf0138ea5,%ebx
f01119dd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119e2:	89 c7                	mov    %eax,%edi
f01119e4:	89 de                	mov    %ebx,%esi
f01119e6:	89 d1                	mov    %edx,%ecx
f01119e8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119ea:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01119f0:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119f5:	b0 00                	mov    $0x0,%al
f01119f7:	89 d7                	mov    %edx,%edi
f01119f9:	f3 aa                	rep stos %al,%es:(%edi)
f01119fb:	83 ec 0c             	sub    $0xc,%esp
f01119fe:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111a04:	50                   	push   %eax
f0111a05:	e8 85 f2 fe ff       	call   f0100c8f <execute_command>
f0111a0a:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0111a0d:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111a13:	bb 09 8f 13 f0       	mov    $0xf0138f09,%ebx
f0111a18:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111a1d:	89 c7                	mov    %eax,%edi
f0111a1f:	89 de                	mov    %ebx,%esi
f0111a21:	89 d1                	mov    %edx,%ecx
f0111a23:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111a25:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111a2b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111a30:	b0 00                	mov    $0x0,%al
f0111a32:	89 d7                	mov    %edx,%edi
f0111a34:	f3 aa                	rep stos %al,%es:(%edi)
f0111a36:	83 ec 0c             	sub    $0xc,%esp
f0111a39:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111a3f:	50                   	push   %eax
f0111a40:	e8 4a f2 fe ff       	call   f0100c8f <execute_command>
f0111a45:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0111a48:	83 ec 04             	sub    $0x4,%esp
f0111a4b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111a51:	50                   	push   %eax
f0111a52:	68 a6 87 13 f0       	push   $0xf01387a6
f0111a57:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111a5d:	50                   	push   %eax
f0111a5e:	e8 a0 eb 01 00       	call   f0130603 <strcconcat>
f0111a63:	83 c4 10             	add    $0x10,%esp
f0111a66:	83 ec 0c             	sub    $0xc,%esp
f0111a69:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111a6f:	50                   	push   %eax
f0111a70:	e8 1a f2 fe ff       	call   f0100c8f <execute_command>
f0111a75:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0111a78:	83 ec 04             	sub    $0x4,%esp
f0111a7b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111a81:	50                   	push   %eax
f0111a82:	68 b0 87 13 f0       	push   $0xf01387b0
f0111a87:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111a8d:	50                   	push   %eax
f0111a8e:	e8 70 eb 01 00       	call   f0130603 <strcconcat>
f0111a93:	83 c4 10             	add    $0x10,%esp
f0111a96:	83 ec 0c             	sub    $0xc,%esp
f0111a99:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111a9f:	50                   	push   %eax
f0111aa0:	e8 ea f1 fe ff       	call   f0100c8f <execute_command>
f0111aa5:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0111aa8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111aae:	bb 6d 8f 13 f0       	mov    $0xf0138f6d,%ebx
f0111ab3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ab8:	89 c7                	mov    %eax,%edi
f0111aba:	89 de                	mov    %ebx,%esi
f0111abc:	89 d1                	mov    %edx,%ecx
f0111abe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ac0:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111ac6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111acb:	b0 00                	mov    $0x0,%al
f0111acd:	89 d7                	mov    %edx,%edi
f0111acf:	f3 aa                	rep stos %al,%es:(%edi)
f0111ad1:	83 ec 0c             	sub    $0xc,%esp
f0111ad4:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111ada:	50                   	push   %eax
f0111adb:	e8 af f1 fe ff       	call   f0100c8f <execute_command>
f0111ae0:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0111ae3:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111ae9:	bb d1 8f 13 f0       	mov    $0xf0138fd1,%ebx
f0111aee:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111af3:	89 c7                	mov    %eax,%edi
f0111af5:	89 de                	mov    %ebx,%esi
f0111af7:	89 d1                	mov    %edx,%ecx
f0111af9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111afb:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111b01:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b06:	b0 00                	mov    $0x0,%al
f0111b08:	89 d7                	mov    %edx,%edi
f0111b0a:	f3 aa                	rep stos %al,%es:(%edi)
f0111b0c:	83 ec 0c             	sub    $0xc,%esp
f0111b0f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111b15:	50                   	push   %eax
f0111b16:	e8 74 f1 fe ff       	call   f0100c8f <execute_command>
f0111b1b:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0111b1e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111b24:	bb 35 90 13 f0       	mov    $0xf0139035,%ebx
f0111b29:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111b2e:	89 c7                	mov    %eax,%edi
f0111b30:	89 de                	mov    %ebx,%esi
f0111b32:	89 d1                	mov    %edx,%ecx
f0111b34:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111b36:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111b3c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111b41:	b0 00                	mov    $0x0,%al
f0111b43:	89 d7                	mov    %edx,%edi
f0111b45:	f3 aa                	rep stos %al,%es:(%edi)
f0111b47:	83 ec 0c             	sub    $0xc,%esp
f0111b4a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111b50:	50                   	push   %eax
f0111b51:	e8 39 f1 fe ff       	call   f0100c8f <execute_command>
f0111b56:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0111b59:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0111b60:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0111b67:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0111b6e:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0111b75:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0111b7c:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0111b83:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0111b8a:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0111b91:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0111b98:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0111b9f:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0111ba6:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0111bad:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111bb0:	8a 00                	mov    (%eax),%al
f0111bb2:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111bb8:	e8 db a1 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111bbd:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0111bc0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111bc3:	89 d0                	mov    %edx,%eax
f0111bc5:	01 c0                	add    %eax,%eax
f0111bc7:	01 d0                	add    %edx,%eax
f0111bc9:	01 c0                	add    %eax,%eax
f0111bcb:	50                   	push   %eax
f0111bcc:	68 00 00 40 00       	push   $0x400000
f0111bd1:	68 00 00 20 00       	push   $0x200000
f0111bd6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111bd9:	e8 33 63 ff ff       	call   f0107f11 <copy_paste_chunk>
f0111bde:	83 c4 10             	add    $0x10,%esp
f0111be1:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111be4:	e8 af a1 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111be9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111bec:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111bf3:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111bf7:	75 08                	jne    f0111c01 <test_copy_paste_chunk+0x929>
f0111bf9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111bfc:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111bff:	74 2b                	je     f0111c2c <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111c01:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111c04:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111c07:	83 ec 0c             	sub    $0xc,%esp
f0111c0a:	50                   	push   %eax
f0111c0b:	ff 75 80             	pushl  -0x80(%ebp)
f0111c0e:	68 bc 87 13 f0       	push   $0xf01387bc
f0111c13:	68 cf 02 00 00       	push   $0x2cf
f0111c18:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111c1d:	e8 10 e7 fe ff       	call   f0100332 <_warn>
f0111c22:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111c25:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111c2c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c30:	74 04                	je     f0111c36 <test_copy_paste_chunk+0x95e>
f0111c32:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111c36:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0111c3d:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0111c44:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111c47:	83 ec 08             	sub    $0x8,%esp
f0111c4a:	6a 01                	push   $0x1
f0111c4c:	6a 07                	push   $0x7
f0111c4e:	6a 07                	push   $0x7
f0111c50:	6a 07                	push   $0x7
f0111c52:	6a 07                	push   $0x7
f0111c54:	6a 01                	push   $0x1
f0111c56:	68 00 20 00 00       	push   $0x2000
f0111c5b:	68 00 00 40 00       	push   $0x400000
f0111c60:	68 00 00 20 00       	push   $0x200000
f0111c65:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c68:	e8 0e 35 00 00       	call   f011517b <CCP>
f0111c6d:	83 c4 30             	add    $0x30,%esp
f0111c70:	83 f8 01             	cmp    $0x1,%eax
f0111c73:	74 2b                	je     f0111ca0 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0111c75:	83 ec 04             	sub    $0x4,%esp
f0111c78:	68 10 88 13 f0       	push   $0xf0138810
f0111c7d:	68 d8 02 00 00       	push   $0x2d8
f0111c82:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111c87:	e8 a6 e6 fe ff       	call   f0100332 <_warn>
f0111c8c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111c8f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0111c96:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0111c9d:	00 00 00 
		}
		if (correct) eval += 5 ;
f0111ca0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ca4:	74 04                	je     f0111caa <test_copy_paste_chunk+0x9d2>
f0111ca6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111caa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0111cb1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111cb4:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0111cb7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111cba:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0111cbd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111cc0:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0111cc3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cc6:	8a 00                	mov    (%eax),%al
f0111cc8:	3c 61                	cmp    $0x61,%al
f0111cca:	75 69                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111ccc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111ccf:	8a 00                	mov    (%eax),%al
f0111cd1:	3c 61                	cmp    $0x61,%al
f0111cd3:	75 60                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111cd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111cd8:	8a 00                	mov    (%eax),%al
f0111cda:	3c 79                	cmp    $0x79,%al
f0111cdc:	75 57                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111cde:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111ce1:	8a 00                	mov    (%eax),%al
f0111ce3:	3c 62                	cmp    $0x62,%al
f0111ce5:	75 4e                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111ce7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111cea:	8a 00                	mov    (%eax),%al
f0111cec:	3c 63                	cmp    $0x63,%al
f0111cee:	75 45                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111cf0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111cf3:	8a 00                	mov    (%eax),%al
f0111cf5:	3c 7a                	cmp    $0x7a,%al
f0111cf7:	75 3c                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0111cf9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111cfc:	8a 00                	mov    (%eax),%al
f0111cfe:	3c 77                	cmp    $0x77,%al
f0111d00:	75 33                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111d02:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111d05:	8a 00                	mov    (%eax),%al
f0111d07:	3c 64                	cmp    $0x64,%al
f0111d09:	75 2a                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111d0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111d0e:	8a 00                	mov    (%eax),%al
f0111d10:	3c 65                	cmp    $0x65,%al
f0111d12:	75 21                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111d14:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111d17:	8a 00                	mov    (%eax),%al
f0111d19:	3c 65                	cmp    $0x65,%al
f0111d1b:	75 18                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111d1d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111d20:	8a 00                	mov    (%eax),%al
f0111d22:	3c 66                	cmp    $0x66,%al
f0111d24:	75 0f                	jne    f0111d35 <test_copy_paste_chunk+0xa5d>
f0111d26:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111d29:	8a 10                	mov    (%eax),%dl
f0111d2b:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111d31:	38 c2                	cmp    %al,%dl
f0111d33:	74 21                	je     f0111d56 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111d35:	83 ec 04             	sub    $0x4,%esp
f0111d38:	68 10 87 13 f0       	push   $0xf0138710
f0111d3d:	68 e6 02 00 00       	push   $0x2e6
f0111d42:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111d47:	e8 e6 e5 fe ff       	call   f0100332 <_warn>
f0111d4c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111d4f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111d56:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111d5a:	74 04                	je     f0111d60 <test_copy_paste_chunk+0xa88>
f0111d5c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111d60:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0111d67:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111d6a:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111d6d:	e8 26 a0 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111d72:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0111d75:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111d78:	89 c2                	mov    %eax,%edx
f0111d7a:	01 d2                	add    %edx,%edx
f0111d7c:	01 d0                	add    %edx,%eax
f0111d7e:	50                   	push   %eax
f0111d7f:	68 00 08 20 00       	push   $0x200800
f0111d84:	68 00 08 40 00       	push   $0x400800
f0111d89:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d8c:	e8 80 61 ff ff       	call   f0107f11 <copy_paste_chunk>
f0111d91:	83 c4 10             	add    $0x10,%esp
f0111d94:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111d97:	e8 fc 9f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0111d9c:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111d9f:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111da3:	75 08                	jne    f0111dad <test_copy_paste_chunk+0xad5>
f0111da5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111da8:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111dab:	74 2b                	je     f0111dd8 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111dad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111db0:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111db3:	83 ec 0c             	sub    $0xc,%esp
f0111db6:	50                   	push   %eax
f0111db7:	ff 75 80             	pushl  -0x80(%ebp)
f0111dba:	68 bc 87 13 f0       	push   $0xf01387bc
f0111dbf:	68 f6 02 00 00       	push   $0x2f6
f0111dc4:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111dc9:	e8 64 e5 fe ff       	call   f0100332 <_warn>
f0111dce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111dd1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111dd8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ddc:	74 04                	je     f0111de2 <test_copy_paste_chunk+0xb0a>
f0111dde:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111de2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111de9:	83 ec 08             	sub    $0x8,%esp
f0111dec:	6a 01                	push   $0x1
f0111dee:	6a 07                	push   $0x7
f0111df0:	6a 07                	push   $0x7
f0111df2:	6a 07                	push   $0x7
f0111df4:	6a 07                	push   $0x7
f0111df6:	6a 01                	push   $0x1
f0111df8:	68 00 20 00 00       	push   $0x2000
f0111dfd:	68 00 00 20 00       	push   $0x200000
f0111e02:	68 00 00 40 00       	push   $0x400000
f0111e07:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111e0a:	e8 6c 33 00 00       	call   f011517b <CCP>
f0111e0f:	83 c4 30             	add    $0x30,%esp
f0111e12:	83 f8 01             	cmp    $0x1,%eax
f0111e15:	74 21                	je     f0111e38 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0111e17:	83 ec 04             	sub    $0x4,%esp
f0111e1a:	68 5c 88 13 f0       	push   $0xf013885c
f0111e1f:	68 fe 02 00 00       	push   $0x2fe
f0111e24:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111e29:	e8 04 e5 fe ff       	call   f0100332 <_warn>
f0111e2e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111e31:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111e38:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e3c:	74 04                	je     f0111e42 <test_copy_paste_chunk+0xb6a>
f0111e3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e42:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0111e49:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e4c:	8a 00                	mov    (%eax),%al
f0111e4e:	3c 61                	cmp    $0x61,%al
f0111e50:	75 69                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e52:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111e55:	8a 00                	mov    (%eax),%al
f0111e57:	3c 61                	cmp    $0x61,%al
f0111e59:	75 60                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e5b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111e5e:	8a 00                	mov    (%eax),%al
f0111e60:	3c 79                	cmp    $0x79,%al
f0111e62:	75 57                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111e67:	8a 00                	mov    (%eax),%al
f0111e69:	3c 62                	cmp    $0x62,%al
f0111e6b:	75 4e                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e6d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e70:	8a 00                	mov    (%eax),%al
f0111e72:	3c 7a                	cmp    $0x7a,%al
f0111e74:	75 45                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e79:	8a 00                	mov    (%eax),%al
f0111e7b:	3c 7a                	cmp    $0x7a,%al
f0111e7d:	75 3c                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0111e7f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111e82:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0111e84:	3c 64                	cmp    $0x64,%al
f0111e86:	75 33                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0111e88:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111e8b:	8a 00                	mov    (%eax),%al
f0111e8d:	3c 64                	cmp    $0x64,%al
f0111e8f:	75 2a                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e91:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111e94:	8a 00                	mov    (%eax),%al
f0111e96:	3c 65                	cmp    $0x65,%al
f0111e98:	75 21                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111e9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111e9d:	8a 00                	mov    (%eax),%al
f0111e9f:	3c 78                	cmp    $0x78,%al
f0111ea1:	75 18                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111ea3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111ea6:	8a 00                	mov    (%eax),%al
f0111ea8:	3c 66                	cmp    $0x66,%al
f0111eaa:	75 0f                	jne    f0111ebb <test_copy_paste_chunk+0xbe3>
f0111eac:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111eaf:	8a 10                	mov    (%eax),%dl
f0111eb1:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111eb7:	38 c2                	cmp    %al,%dl
f0111eb9:	74 21                	je     f0111edc <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111ebb:	83 ec 04             	sub    $0x4,%esp
f0111ebe:	68 10 87 13 f0       	push   $0xf0138710
f0111ec3:	68 07 03 00 00       	push   $0x307
f0111ec8:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0111ecd:	e8 60 e4 fe ff       	call   f0100332 <_warn>
f0111ed2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111ed5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111edc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ee0:	74 04                	je     f0111ee6 <test_copy_paste_chunk+0xc0e>
f0111ee2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111ee6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0111eed:	83 ec 0c             	sub    $0xc,%esp
f0111ef0:	68 a7 88 13 f0       	push   $0xf01388a7
f0111ef5:	e8 33 ed fe ff       	call   f0100c2d <cprintf>
f0111efa:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0111efd:	83 ec 0c             	sub    $0xc,%esp
f0111f00:	68 b8 88 13 f0       	push   $0xf01388b8
f0111f05:	e8 23 ed fe ff       	call   f0100c2d <cprintf>
f0111f0a:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0111f0d:	83 ec 04             	sub    $0x4,%esp
f0111f10:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f16:	50                   	push   %eax
f0111f17:	68 ec 88 13 f0       	push   $0xf01388ec
f0111f1c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f22:	50                   	push   %eax
f0111f23:	e8 db e6 01 00       	call   f0130603 <strcconcat>
f0111f28:	83 c4 10             	add    $0x10,%esp
f0111f2b:	83 ec 0c             	sub    $0xc,%esp
f0111f2e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f34:	50                   	push   %eax
f0111f35:	e8 55 ed fe ff       	call   f0100c8f <execute_command>
f0111f3a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0111f3d:	83 ec 04             	sub    $0x4,%esp
f0111f40:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f46:	50                   	push   %eax
f0111f47:	68 f6 88 13 f0       	push   $0xf01388f6
f0111f4c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f52:	50                   	push   %eax
f0111f53:	e8 ab e6 01 00       	call   f0130603 <strcconcat>
f0111f58:	83 c4 10             	add    $0x10,%esp
f0111f5b:	83 ec 0c             	sub    $0xc,%esp
f0111f5e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f64:	50                   	push   %eax
f0111f65:	e8 25 ed fe ff       	call   f0100c8f <execute_command>
f0111f6a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0111f6d:	83 ec 04             	sub    $0x4,%esp
f0111f70:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f76:	50                   	push   %eax
f0111f77:	68 00 89 13 f0       	push   $0xf0138900
f0111f7c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f82:	50                   	push   %eax
f0111f83:	e8 7b e6 01 00       	call   f0130603 <strcconcat>
f0111f88:	83 c4 10             	add    $0x10,%esp
f0111f8b:	83 ec 0c             	sub    $0xc,%esp
f0111f8e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111f94:	50                   	push   %eax
f0111f95:	e8 f5 ec fe ff       	call   f0100c8f <execute_command>
f0111f9a:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0111f9d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111fa3:	bb 99 90 13 f0       	mov    $0xf0139099,%ebx
f0111fa8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111fad:	89 c7                	mov    %eax,%edi
f0111faf:	89 de                	mov    %ebx,%esi
f0111fb1:	89 d1                	mov    %edx,%ecx
f0111fb3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fb5:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111fbb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111fc0:	b0 00                	mov    $0x0,%al
f0111fc2:	89 d7                	mov    %edx,%edi
f0111fc4:	f3 aa                	rep stos %al,%es:(%edi)
f0111fc6:	83 ec 0c             	sub    $0xc,%esp
f0111fc9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111fcf:	50                   	push   %eax
f0111fd0:	e8 ba ec fe ff       	call   f0100c8f <execute_command>
f0111fd5:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0111fd8:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111fde:	bb fd 90 13 f0       	mov    $0xf01390fd,%ebx
f0111fe3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111fe8:	89 c7                	mov    %eax,%edi
f0111fea:	89 de                	mov    %ebx,%esi
f0111fec:	89 d1                	mov    %edx,%ecx
f0111fee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ff0:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111ff6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111ffb:	b0 00                	mov    $0x0,%al
f0111ffd:	89 d7                	mov    %edx,%edi
f0111fff:	f3 aa                	rep stos %al,%es:(%edi)
f0112001:	83 ec 0c             	sub    $0xc,%esp
f0112004:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011200a:	50                   	push   %eax
f011200b:	e8 7f ec fe ff       	call   f0100c8f <execute_command>
f0112010:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112013:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112019:	bb 61 91 13 f0       	mov    $0xf0139161,%ebx
f011201e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112023:	89 c7                	mov    %eax,%edi
f0112025:	89 de                	mov    %ebx,%esi
f0112027:	89 d1                	mov    %edx,%ecx
f0112029:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011202b:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112031:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112036:	b0 00                	mov    $0x0,%al
f0112038:	89 d7                	mov    %edx,%edi
f011203a:	f3 aa                	rep stos %al,%es:(%edi)
f011203c:	83 ec 0c             	sub    $0xc,%esp
f011203f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112045:	50                   	push   %eax
f0112046:	e8 44 ec fe ff       	call   f0100c8f <execute_command>
f011204b:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011204e:	e8 45 9d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112053:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112056:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112059:	89 d0                	mov    %edx,%eax
f011205b:	01 c0                	add    %eax,%eax
f011205d:	01 d0                	add    %edx,%eax
f011205f:	c1 e0 02             	shl    $0x2,%eax
f0112062:	50                   	push   %eax
f0112063:	68 00 00 90 00       	push   $0x900000
f0112068:	68 00 00 80 00       	push   $0x800000
f011206d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112070:	e8 9c 5e ff ff       	call   f0107f11 <copy_paste_chunk>
f0112075:	83 c4 10             	add    $0x10,%esp
f0112078:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011207e:	e8 15 9d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112083:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112086:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011208d:	75 0b                	jne    f011209a <test_copy_paste_chunk+0xdc2>
f011208f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112092:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112095:	83 f8 03             	cmp    $0x3,%eax
f0112098:	74 2e                	je     f01120c8 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011209a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011209d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01120a0:	83 ec 0c             	sub    $0xc,%esp
f01120a3:	50                   	push   %eax
f01120a4:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01120aa:	68 bc 87 13 f0       	push   $0xf01387bc
f01120af:	68 25 03 00 00       	push   $0x325
f01120b4:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01120b9:	e8 74 e2 fe ff       	call   f0100332 <_warn>
f01120be:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01120c1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01120c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01120cc:	74 04                	je     f01120d2 <test_copy_paste_chunk+0xdfa>
f01120ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01120d2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01120d9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01120e0:	83 ec 08             	sub    $0x8,%esp
f01120e3:	6a 01                	push   $0x1
f01120e5:	6a 07                	push   $0x7
f01120e7:	6a 07                	push   $0x7
f01120e9:	6a 07                	push   $0x7
f01120eb:	6a 07                	push   $0x7
f01120ed:	6a 01                	push   $0x1
f01120ef:	68 00 30 00 00       	push   $0x3000
f01120f4:	68 00 00 90 00       	push   $0x900000
f01120f9:	68 00 00 80 00       	push   $0x800000
f01120fe:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112101:	e8 75 30 00 00       	call   f011517b <CCP>
f0112106:	83 c4 30             	add    $0x30,%esp
f0112109:	83 f8 01             	cmp    $0x1,%eax
f011210c:	74 28                	je     f0112136 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011210e:	83 ec 04             	sub    $0x4,%esp
f0112111:	68 5c 88 13 f0       	push   $0xf013885c
f0112116:	68 2e 03 00 00       	push   $0x32e
f011211b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112120:	e8 0d e2 fe ff       	call   f0100332 <_warn>
f0112125:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112128:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011212f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112136:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011213a:	74 04                	je     f0112140 <test_copy_paste_chunk+0xe68>
f011213c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112140:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112147:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011214b:	0f 84 9e 00 00 00    	je     f01121ef <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112151:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0112158:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f011215f:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112166:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011216d:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112174:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f011217b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011217e:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112181:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112184:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0112187:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011218a:	8a 00                	mov    (%eax),%al
f011218c:	3c 61                	cmp    $0x61,%al
f011218e:	75 2d                	jne    f01121bd <test_copy_paste_chunk+0xee5>
f0112190:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112193:	8a 00                	mov    (%eax),%al
f0112195:	3c 61                	cmp    $0x61,%al
f0112197:	75 24                	jne    f01121bd <test_copy_paste_chunk+0xee5>
f0112199:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011219c:	8a 00                	mov    (%eax),%al
f011219e:	3c 79                	cmp    $0x79,%al
f01121a0:	75 1b                	jne    f01121bd <test_copy_paste_chunk+0xee5>
f01121a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01121a5:	8a 00                	mov    (%eax),%al
f01121a7:	3c 62                	cmp    $0x62,%al
f01121a9:	75 12                	jne    f01121bd <test_copy_paste_chunk+0xee5>
f01121ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121ae:	8a 00                	mov    (%eax),%al
f01121b0:	3c 63                	cmp    $0x63,%al
f01121b2:	75 09                	jne    f01121bd <test_copy_paste_chunk+0xee5>
f01121b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01121b7:	8a 00                	mov    (%eax),%al
f01121b9:	3c 7a                	cmp    $0x7a,%al
f01121bb:	74 21                	je     f01121de <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01121bd:	83 ec 04             	sub    $0x4,%esp
f01121c0:	68 10 87 13 f0       	push   $0xf0138710
f01121c5:	68 40 03 00 00       	push   $0x340
f01121ca:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01121cf:	e8 5e e1 fe ff       	call   f0100332 <_warn>
f01121d4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01121d7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01121de:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01121e2:	74 04                	je     f01121e8 <test_copy_paste_chunk+0xf10>
f01121e4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f01121e8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01121ef:	e8 a4 9b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01121f4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f01121f7:	6a 00                	push   $0x0
f01121f9:	6a 02                	push   $0x2
f01121fb:	68 00 10 90 00       	push   $0x901000
f0112200:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112203:	e8 59 2b 00 00       	call   f0114d61 <SB>
f0112208:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011220b:	6a 00                	push   $0x0
f011220d:	6a 02                	push   $0x2
f011220f:	68 00 20 90 00       	push   $0x902000
f0112214:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112217:	e8 45 2b 00 00       	call   f0114d61 <SB>
f011221c:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f011221f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112222:	c1 e0 03             	shl    $0x3,%eax
f0112225:	50                   	push   %eax
f0112226:	68 00 f0 bf 00       	push   $0xbff000
f011222b:	68 00 10 90 00       	push   $0x901000
f0112230:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112233:	e8 d9 5c ff ff       	call   f0107f11 <copy_paste_chunk>
f0112238:	83 c4 10             	add    $0x10,%esp
f011223b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112241:	e8 52 9b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112246:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112249:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112250:	75 0b                	jne    f011225d <test_copy_paste_chunk+0xf85>
f0112252:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112255:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112258:	83 f8 03             	cmp    $0x3,%eax
f011225b:	74 2e                	je     f011228b <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011225d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112260:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112263:	83 ec 0c             	sub    $0xc,%esp
f0112266:	50                   	push   %eax
f0112267:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011226d:	68 bc 87 13 f0       	push   $0xf01387bc
f0112272:	68 50 03 00 00       	push   $0x350
f0112277:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011227c:	e8 b1 e0 fe ff       	call   f0100332 <_warn>
f0112281:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112284:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011228b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011228f:	74 04                	je     f0112295 <test_copy_paste_chunk+0xfbd>
f0112291:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112295:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f011229c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01122a3:	83 ec 08             	sub    $0x8,%esp
f01122a6:	6a 01                	push   $0x1
f01122a8:	6a 07                	push   $0x7
f01122aa:	6a 03                	push   $0x3
f01122ac:	6a 07                	push   $0x7
f01122ae:	6a 03                	push   $0x3
f01122b0:	6a 01                	push   $0x1
f01122b2:	68 00 20 00 00       	push   $0x2000
f01122b7:	68 00 f0 bf 00       	push   $0xbff000
f01122bc:	68 00 10 90 00       	push   $0x901000
f01122c1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01122c4:	e8 b2 2e 00 00       	call   f011517b <CCP>
f01122c9:	83 c4 30             	add    $0x30,%esp
f01122cc:	83 f8 01             	cmp    $0x1,%eax
f01122cf:	74 28                	je     f01122f9 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01122d1:	83 ec 04             	sub    $0x4,%esp
f01122d4:	68 5c 88 13 f0       	push   $0xf013885c
f01122d9:	68 59 03 00 00       	push   $0x359
f01122de:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01122e3:	e8 4a e0 fe ff       	call   f0100332 <_warn>
f01122e8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01122eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01122f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01122f9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01122fd:	74 04                	je     f0112303 <test_copy_paste_chunk+0x102b>
f01122ff:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112303:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011230a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011230e:	74 72                	je     f0112382 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112310:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112317:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011231e:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112325:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f011232c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011232f:	8a 00                	mov    (%eax),%al
f0112331:	3c 62                	cmp    $0x62,%al
f0112333:	75 1b                	jne    f0112350 <test_copy_paste_chunk+0x1078>
f0112335:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112338:	8a 00                	mov    (%eax),%al
f011233a:	3c 62                	cmp    $0x62,%al
f011233c:	75 12                	jne    f0112350 <test_copy_paste_chunk+0x1078>
f011233e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112341:	8a 00                	mov    (%eax),%al
f0112343:	3c 7a                	cmp    $0x7a,%al
f0112345:	75 09                	jne    f0112350 <test_copy_paste_chunk+0x1078>
f0112347:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011234a:	8a 00                	mov    (%eax),%al
f011234c:	3c 7a                	cmp    $0x7a,%al
f011234e:	74 21                	je     f0112371 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112350:	83 ec 04             	sub    $0x4,%esp
f0112353:	68 10 87 13 f0       	push   $0xf0138710
f0112358:	68 65 03 00 00       	push   $0x365
f011235d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112362:	e8 cb df fe ff       	call   f0100332 <_warn>
f0112367:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011236a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112371:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112375:	74 04                	je     f011237b <test_copy_paste_chunk+0x10a3>
f0112377:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011237b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112382:	83 ec 0c             	sub    $0xc,%esp
f0112385:	68 0a 89 13 f0       	push   $0xf013890a
f011238a:	e8 9e e8 fe ff       	call   f0100c2d <cprintf>
f011238f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0112392:	83 ec 08             	sub    $0x8,%esp
f0112395:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112398:	68 1c 89 13 f0       	push   $0xf013891c
f011239d:	e8 8b e8 fe ff       	call   f0100c2d <cprintf>
f01123a2:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01123a5:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01123a9:	75 10                	jne    f01123bb <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01123ab:	83 ec 0c             	sub    $0xc,%esp
f01123ae:	68 50 89 13 f0       	push   $0xf0138950
f01123b3:	e8 75 e8 fe ff       	call   f0100c2d <cprintf>
f01123b8:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01123bb:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f01123c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01123c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01123c6:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01123c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01123ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01123d1:	5b                   	pop    %ebx
f01123d2:	5e                   	pop    %esi
f01123d3:	5f                   	pop    %edi
f01123d4:	5d                   	pop    %ebp
f01123d5:	c3                   	ret    

f01123d6 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01123d6:	55                   	push   %ebp
f01123d7:	89 e5                	mov    %esp,%ebp
f01123d9:	57                   	push   %edi
f01123da:	56                   	push   %esi
f01123db:	53                   	push   %ebx
f01123dc:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01123e2:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f01123e8:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f01123ed:	ba 0f 00 00 00       	mov    $0xf,%edx
f01123f2:	89 c7                	mov    %eax,%edi
f01123f4:	89 de                	mov    %ebx,%esi
f01123f6:	89 d1                	mov    %edx,%ecx
f01123f8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01123fa:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112400:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112405:	b0 00                	mov    $0x0,%al
f0112407:	89 d7                	mov    %edx,%edi
f0112409:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011240b:	6a 00                	push   $0x0
f011240d:	6a 0a                	push   $0xa
f011240f:	6a 14                	push   $0x14
f0112411:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112417:	50                   	push   %eax
f0112418:	e8 2f 5c ff ff       	call   f010804c <env_create>
f011241d:	83 c4 10             	add    $0x10,%esp
f0112420:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112423:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112426:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112429:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011242c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011242f:	8b 40 60             	mov    0x60(%eax),%eax
f0112432:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112435:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112438:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011243b:	83 ec 0c             	sub    $0xc,%esp
f011243e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112441:	e8 01 2d 00 00       	call   f0115147 <ClearUserSpace>
f0112446:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112449:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112450:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0112457:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011245e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112462:	83 ec 0c             	sub    $0xc,%esp
f0112465:	68 c8 91 13 f0       	push   $0xf01391c8
f011246a:	e8 be e7 fe ff       	call   f0100c2d <cprintf>
f011246f:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0112472:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0112479:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0112480:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112483:	8a 00                	mov    (%eax),%al
f0112485:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f011248b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011248e:	8a 00                	mov    (%eax),%al
f0112490:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112496:	e8 fd 98 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011249b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f011249e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01124a1:	89 d0                	mov    %edx,%eax
f01124a3:	01 c0                	add    %eax,%eax
f01124a5:	01 d0                	add    %edx,%eax
f01124a7:	01 c0                	add    %eax,%eax
f01124a9:	83 ec 0c             	sub    $0xc,%esp
f01124ac:	6a 02                	push   $0x2
f01124ae:	50                   	push   %eax
f01124af:	68 00 40 10 f0       	push   $0xf0104000
f01124b4:	68 00 00 10 f0       	push   $0xf0100000
f01124b9:	ff 75 cc             	pushl  -0x34(%ebp)
f01124bc:	e8 6a 5a ff ff       	call   f0107f2b <share_chunk>
f01124c1:	83 c4 20             	add    $0x20,%esp
f01124c4:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01124c7:	e8 cc 98 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01124cc:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01124cf:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01124d3:	75 08                	jne    f01124dd <test_share_chunk+0x107>
f01124d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01124d8:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01124db:	74 28                	je     f0112505 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01124dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01124e0:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01124e3:	83 ec 0c             	sub    $0xc,%esp
f01124e6:	50                   	push   %eax
f01124e7:	ff 75 b0             	pushl  -0x50(%ebp)
f01124ea:	68 f4 91 13 f0       	push   $0xf01391f4
f01124ef:	68 a1 03 00 00       	push   $0x3a1
f01124f4:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01124f9:	e8 34 de fe ff       	call   f0100332 <_warn>
f01124fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112501:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112505:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112509:	74 04                	je     f011250f <test_share_chunk+0x139>
f011250b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011250f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112513:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112516:	c1 e0 03             	shl    $0x3,%eax
f0112519:	83 ec 08             	sub    $0x8,%esp
f011251c:	68 fd 00 00 00       	push   $0xfd
f0112521:	6a 07                	push   $0x7
f0112523:	6a 03                	push   $0x3
f0112525:	6a 07                	push   $0x7
f0112527:	6a 03                	push   $0x3
f0112529:	6a 01                	push   $0x1
f011252b:	50                   	push   %eax
f011252c:	68 00 40 10 f0       	push   $0xf0104000
f0112531:	68 00 00 10 f0       	push   $0xf0100000
f0112536:	ff 75 cc             	pushl  -0x34(%ebp)
f0112539:	e8 3d 2c 00 00       	call   f011517b <CCP>
f011253e:	83 c4 30             	add    $0x30,%esp
f0112541:	85 c0                	test   %eax,%eax
f0112543:	75 1e                	jne    f0112563 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112545:	83 ec 04             	sub    $0x4,%esp
f0112548:	68 50 92 13 f0       	push   $0xf0139250
f011254d:	68 a9 03 00 00       	push   $0x3a9
f0112552:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112557:	e8 d6 dd fe ff       	call   f0100332 <_warn>
f011255c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011255f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112563:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112567:	74 04                	je     f011256d <test_share_chunk+0x197>
f0112569:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011256d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112570:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0112573:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112576:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0112579:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011257c:	8a 00                	mov    (%eax),%al
f011257e:	3c 41                	cmp    $0x41,%al
f0112580:	75 09                	jne    f011258b <test_share_chunk+0x1b5>
f0112582:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112585:	8a 00                	mov    (%eax),%al
f0112587:	3c 42                	cmp    $0x42,%al
f0112589:	74 1e                	je     f01125a9 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011258b:	83 ec 04             	sub    $0x4,%esp
f011258e:	68 98 92 13 f0       	push   $0xf0139298
f0112593:	68 b3 03 00 00       	push   $0x3b3
f0112598:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011259d:	e8 90 dd fe ff       	call   f0100332 <_warn>
f01125a2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01125a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01125ad:	74 04                	je     f01125b3 <test_share_chunk+0x1dd>
f01125af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01125b7:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01125bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01125c0:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01125c2:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01125c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01125cb:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01125cd:	83 ec 0c             	sub    $0xc,%esp
f01125d0:	68 cd 92 13 f0       	push   $0xf01392cd
f01125d5:	e8 53 e6 fe ff       	call   f0100c2d <cprintf>
f01125da:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01125dd:	83 ec 0c             	sub    $0xc,%esp
f01125e0:	68 dc 92 13 f0       	push   $0xf01392dc
f01125e5:	e8 43 e6 fe ff       	call   f0100c2d <cprintf>
f01125ea:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01125ed:	e8 a6 97 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01125f2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01125f5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125f8:	c1 e0 05             	shl    $0x5,%eax
f01125fb:	83 ec 0c             	sub    $0xc,%esp
f01125fe:	68 02 0e 00 00       	push   $0xe02
f0112603:	50                   	push   %eax
f0112604:	68 00 00 00 40       	push   $0x40000000
f0112609:	68 00 00 00 f0       	push   $0xf0000000
f011260e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112611:	e8 15 59 ff ff       	call   f0107f2b <share_chunk>
f0112616:	83 c4 20             	add    $0x20,%esp
f0112619:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011261c:	e8 77 97 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112621:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0112624:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0112628:	75 1f                	jne    f0112649 <test_share_chunk+0x273>
f011262a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011262d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112630:	89 c1                	mov    %eax,%ecx
f0112632:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112635:	c1 e0 05             	shl    $0x5,%eax
f0112638:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011263b:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112642:	99                   	cltd   
f0112643:	f7 fb                	idiv   %ebx
f0112645:	39 c1                	cmp    %eax,%ecx
f0112647:	74 28                	je     f0112671 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112649:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011264c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011264f:	83 ec 0c             	sub    $0xc,%esp
f0112652:	50                   	push   %eax
f0112653:	ff 75 a8             	pushl  -0x58(%ebp)
f0112656:	68 18 93 13 f0       	push   $0xf0139318
f011265b:	68 cb 03 00 00       	push   $0x3cb
f0112660:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112665:	e8 c8 dc fe ff       	call   f0100332 <_warn>
f011266a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011266d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112671:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112675:	74 04                	je     f011267b <test_share_chunk+0x2a5>
f0112677:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011267b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011267f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112686:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112689:	c1 e0 05             	shl    $0x5,%eax
f011268c:	83 ec 08             	sub    $0x8,%esp
f011268f:	6a 02                	push   $0x2
f0112691:	6a 07                	push   $0x7
f0112693:	6a 03                	push   $0x3
f0112695:	68 07 0e 00 00       	push   $0xe07
f011269a:	68 03 0e 00 00       	push   $0xe03
f011269f:	6a ff                	push   $0xffffffff
f01126a1:	50                   	push   %eax
f01126a2:	68 00 00 00 40       	push   $0x40000000
f01126a7:	68 00 00 00 f0       	push   $0xf0000000
f01126ac:	ff 75 cc             	pushl  -0x34(%ebp)
f01126af:	e8 c7 2a 00 00       	call   f011517b <CCP>
f01126b4:	83 c4 30             	add    $0x30,%esp
f01126b7:	85 c0                	test   %eax,%eax
f01126b9:	75 25                	jne    f01126e0 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01126bb:	83 ec 04             	sub    $0x4,%esp
f01126be:	68 50 92 13 f0       	push   $0xf0139250
f01126c3:	68 d4 03 00 00       	push   $0x3d4
f01126c8:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01126cd:	e8 60 dc fe ff       	call   f0100332 <_warn>
f01126d2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01126d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01126d9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01126e0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01126e3:	89 d0                	mov    %edx,%eax
f01126e5:	01 c0                	add    %eax,%eax
f01126e7:	01 d0                	add    %edx,%eax
f01126e9:	c1 e0 02             	shl    $0x2,%eax
f01126ec:	83 ec 08             	sub    $0x8,%esp
f01126ef:	6a 02                	push   $0x2
f01126f1:	6a 07                	push   $0x7
f01126f3:	6a 03                	push   $0x3
f01126f5:	68 07 0e 00 00       	push   $0xe07
f01126fa:	68 03 0e 00 00       	push   $0xe03
f01126ff:	6a 02                	push   $0x2
f0112701:	50                   	push   %eax
f0112702:	68 00 00 00 40       	push   $0x40000000
f0112707:	68 00 00 00 f0       	push   $0xf0000000
f011270c:	ff 75 cc             	pushl  -0x34(%ebp)
f011270f:	e8 67 2a 00 00       	call   f011517b <CCP>
f0112714:	83 c4 30             	add    $0x30,%esp
f0112717:	85 c0                	test   %eax,%eax
f0112719:	75 1e                	jne    f0112739 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011271b:	83 ec 04             	sub    $0x4,%esp
f011271e:	68 50 92 13 f0       	push   $0xf0139250
f0112723:	68 db 03 00 00       	push   $0x3db
f0112728:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011272d:	e8 00 dc fe ff       	call   f0100332 <_warn>
f0112732:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112735:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112739:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011273d:	74 04                	je     f0112743 <test_share_chunk+0x36d>
f011273f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112743:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112747:	b8 1c 76 6e f0       	mov    $0xf06e761c,%eax
f011274c:	05 00 00 00 10       	add    $0x10000000,%eax
f0112751:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112754:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112757:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011275c:	83 ec 08             	sub    $0x8,%esp
f011275f:	6a 02                	push   $0x2
f0112761:	6a 07                	push   $0x7
f0112763:	6a 03                	push   $0x3
f0112765:	68 07 0e 00 00       	push   $0xe07
f011276a:	68 03 0e 00 00       	push   $0xe03
f011276f:	6a 02                	push   $0x2
f0112771:	50                   	push   %eax
f0112772:	68 00 00 0a 40       	push   $0x400a0000
f0112777:	68 00 00 0a f0       	push   $0xf00a0000
f011277c:	ff 75 cc             	pushl  -0x34(%ebp)
f011277f:	e8 f7 29 00 00       	call   f011517b <CCP>
f0112784:	83 c4 30             	add    $0x30,%esp
f0112787:	85 c0                	test   %eax,%eax
f0112789:	75 1e                	jne    f01127a9 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011278b:	83 ec 04             	sub    $0x4,%esp
f011278e:	68 50 92 13 f0       	push   $0xf0139250
f0112793:	68 e5 03 00 00       	push   $0x3e5
f0112798:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011279d:	e8 90 db fe ff       	call   f0100332 <_warn>
f01127a2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01127a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01127ad:	74 04                	je     f01127b3 <test_share_chunk+0x3dd>
f01127af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01127b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01127b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01127bb:	0f 84 a4 00 00 00    	je     f0112865 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01127c1:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01127c8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01127cb:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01127ce:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01127d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01127d8:	8a 00                	mov    (%eax),%al
f01127da:	3c 41                	cmp    $0x41,%al
f01127dc:	75 09                	jne    f01127e7 <test_share_chunk+0x411>
f01127de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127e1:	8a 00                	mov    (%eax),%al
f01127e3:	3c 41                	cmp    $0x41,%al
f01127e5:	74 1e                	je     f0112805 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01127e7:	83 ec 04             	sub    $0x4,%esp
f01127ea:	68 98 92 13 f0       	push   $0xf0139298
f01127ef:	68 f2 03 00 00       	push   $0x3f2
f01127f4:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01127f9:	e8 34 db fe ff       	call   f0100332 <_warn>
f01127fe:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112801:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112805:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112809:	74 04                	je     f011280f <test_share_chunk+0x439>
f011280b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011280f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112813:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f011281a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011281d:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112820:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112827:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011282a:	8a 00                	mov    (%eax),%al
f011282c:	3c 43                	cmp    $0x43,%al
f011282e:	75 09                	jne    f0112839 <test_share_chunk+0x463>
f0112830:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112833:	8a 00                	mov    (%eax),%al
f0112835:	3c 43                	cmp    $0x43,%al
f0112837:	74 1e                	je     f0112857 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112839:	83 ec 04             	sub    $0x4,%esp
f011283c:	68 98 92 13 f0       	push   $0xf0139298
f0112841:	68 fd 03 00 00       	push   $0x3fd
f0112846:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011284b:	e8 e2 da fe ff       	call   f0100332 <_warn>
f0112850:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112853:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112857:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011285b:	74 04                	je     f0112861 <test_share_chunk+0x48b>
f011285d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112861:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112865:	83 ec 0c             	sub    $0xc,%esp
f0112868:	68 a7 88 13 f0       	push   $0xf01388a7
f011286d:	e8 bb e3 fe ff       	call   f0100c2d <cprintf>
f0112872:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0112875:	83 ec 0c             	sub    $0xc,%esp
f0112878:	68 68 93 13 f0       	push   $0xf0139368
f011287d:	e8 ab e3 fe ff       	call   f0100c2d <cprintf>
f0112882:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112885:	e8 0e 95 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011288a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f011288d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112890:	89 d0                	mov    %edx,%eax
f0112892:	c1 e0 03             	shl    $0x3,%eax
f0112895:	01 d0                	add    %edx,%eax
f0112897:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011289e:	01 d0                	add    %edx,%eax
f01128a0:	c1 e0 03             	shl    $0x3,%eax
f01128a3:	83 ec 0c             	sub    $0xc,%esp
f01128a6:	6a 06                	push   $0x6
f01128a8:	50                   	push   %eax
f01128a9:	6a 00                	push   $0x0
f01128ab:	68 00 00 00 40       	push   $0x40000000
f01128b0:	ff 75 cc             	pushl  -0x34(%ebp)
f01128b3:	e8 73 56 ff ff       	call   f0107f2b <share_chunk>
f01128b8:	83 c4 20             	add    $0x20,%esp
f01128bb:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01128be:	e8 d5 94 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01128c3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01128c6:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01128ca:	75 0b                	jne    f01128d7 <test_share_chunk+0x501>
f01128cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128cf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01128d2:	83 f8 01             	cmp    $0x1,%eax
f01128d5:	74 28                	je     f01128ff <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01128d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128da:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01128dd:	83 ec 0c             	sub    $0xc,%esp
f01128e0:	50                   	push   %eax
f01128e1:	ff 75 a0             	pushl  -0x60(%ebp)
f01128e4:	68 18 93 13 f0       	push   $0xf0139318
f01128e9:	68 13 04 00 00       	push   $0x413
f01128ee:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01128f3:	e8 3a da fe ff       	call   f0100332 <_warn>
f01128f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01128fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01128ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112903:	74 04                	je     f0112909 <test_share_chunk+0x533>
f0112905:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112909:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011290d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112914:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112917:	05 00 80 02 00       	add    $0x28000,%eax
f011291c:	c1 e0 02             	shl    $0x2,%eax
f011291f:	83 ec 08             	sub    $0x8,%esp
f0112922:	6a 02                	push   $0x2
f0112924:	6a 07                	push   $0x7
f0112926:	6a 03                	push   $0x3
f0112928:	6a 07                	push   $0x7
f011292a:	6a 07                	push   $0x7
f011292c:	6a ff                	push   $0xffffffff
f011292e:	50                   	push   %eax
f011292f:	6a 00                	push   $0x0
f0112931:	68 00 00 00 40       	push   $0x40000000
f0112936:	ff 75 cc             	pushl  -0x34(%ebp)
f0112939:	e8 3d 28 00 00       	call   f011517b <CCP>
f011293e:	83 c4 30             	add    $0x30,%esp
f0112941:	85 c0                	test   %eax,%eax
f0112943:	75 25                	jne    f011296a <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112945:	83 ec 04             	sub    $0x4,%esp
f0112948:	68 50 92 13 f0       	push   $0xf0139250
f011294d:	68 1c 04 00 00       	push   $0x41c
f0112952:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112957:	e8 d6 d9 fe ff       	call   f0100332 <_warn>
f011295c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011295f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112963:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011296a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011296d:	89 d0                	mov    %edx,%eax
f011296f:	01 c0                	add    %eax,%eax
f0112971:	01 d0                	add    %edx,%eax
f0112973:	c1 e0 02             	shl    $0x2,%eax
f0112976:	83 ec 08             	sub    $0x8,%esp
f0112979:	6a 02                	push   $0x2
f011297b:	6a 07                	push   $0x7
f011297d:	6a 03                	push   $0x3
f011297f:	6a 07                	push   $0x7
f0112981:	6a 07                	push   $0x7
f0112983:	6a 03                	push   $0x3
f0112985:	50                   	push   %eax
f0112986:	6a 00                	push   $0x0
f0112988:	68 00 00 00 40       	push   $0x40000000
f011298d:	ff 75 cc             	pushl  -0x34(%ebp)
f0112990:	e8 e6 27 00 00       	call   f011517b <CCP>
f0112995:	83 c4 30             	add    $0x30,%esp
f0112998:	85 c0                	test   %eax,%eax
f011299a:	75 1e                	jne    f01129ba <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011299c:	83 ec 04             	sub    $0x4,%esp
f011299f:	68 50 92 13 f0       	push   $0xf0139250
f01129a4:	68 23 04 00 00       	push   $0x423
f01129a9:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01129ae:	e8 7f d9 fe ff       	call   f0100332 <_warn>
f01129b3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01129b6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01129ba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01129be:	74 04                	je     f01129c4 <test_share_chunk+0x5ee>
f01129c0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129c4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01129c8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01129cb:	89 d0                	mov    %edx,%eax
f01129cd:	01 c0                	add    %eax,%eax
f01129cf:	01 d0                	add    %edx,%eax
f01129d1:	c1 e0 02             	shl    $0x2,%eax
f01129d4:	f7 d8                	neg    %eax
f01129d6:	05 00 00 0a 00       	add    $0xa0000,%eax
f01129db:	83 ec 08             	sub    $0x8,%esp
f01129de:	6a 02                	push   $0x2
f01129e0:	6a 07                	push   $0x7
f01129e2:	6a 03                	push   $0x3
f01129e4:	6a 07                	push   $0x7
f01129e6:	6a 07                	push   $0x7
f01129e8:	6a 02                	push   $0x2
f01129ea:	50                   	push   %eax
f01129eb:	68 00 30 00 00       	push   $0x3000
f01129f0:	68 00 30 00 40       	push   $0x40003000
f01129f5:	ff 75 cc             	pushl  -0x34(%ebp)
f01129f8:	e8 7e 27 00 00       	call   f011517b <CCP>
f01129fd:	83 c4 30             	add    $0x30,%esp
f0112a00:	85 c0                	test   %eax,%eax
f0112a02:	75 1e                	jne    f0112a22 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a04:	83 ec 04             	sub    $0x4,%esp
f0112a07:	68 50 92 13 f0       	push   $0xf0139250
f0112a0c:	68 2b 04 00 00       	push   $0x42b
f0112a11:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112a16:	e8 17 d9 fe ff       	call   f0100332 <_warn>
f0112a1b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a1e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112a22:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112a26:	74 04                	je     f0112a2c <test_share_chunk+0x656>
f0112a28:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a2c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112a30:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112a33:	c1 e0 02             	shl    $0x2,%eax
f0112a36:	83 ec 08             	sub    $0x8,%esp
f0112a39:	6a 02                	push   $0x2
f0112a3b:	6a 07                	push   $0x7
f0112a3d:	6a 03                	push   $0x3
f0112a3f:	6a 07                	push   $0x7
f0112a41:	6a 07                	push   $0x7
f0112a43:	6a 03                	push   $0x3
f0112a45:	50                   	push   %eax
f0112a46:	68 00 00 0a 00       	push   $0xa0000
f0112a4b:	68 00 00 0a 40       	push   $0x400a0000
f0112a50:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a53:	e8 23 27 00 00       	call   f011517b <CCP>
f0112a58:	83 c4 30             	add    $0x30,%esp
f0112a5b:	85 c0                	test   %eax,%eax
f0112a5d:	75 1e                	jne    f0112a7d <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a5f:	83 ec 04             	sub    $0x4,%esp
f0112a62:	68 50 92 13 f0       	push   $0xf0139250
f0112a67:	68 33 04 00 00       	push   $0x433
f0112a6c:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112a71:	e8 bc d8 fe ff       	call   f0100332 <_warn>
f0112a76:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a79:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112a7d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112a81:	74 04                	je     f0112a87 <test_share_chunk+0x6b1>
f0112a83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a87:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112a8b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0112a8f:	0f 84 92 00 00 00    	je     f0112b27 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0112a95:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0112a9c:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0112aa3:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0112aaa:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0112ab1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ab4:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0112ab7:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0112abe:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112ac5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112ac8:	8a 00                	mov    (%eax),%al
f0112aca:	3c 41                	cmp    $0x41,%al
f0112acc:	75 2d                	jne    f0112afb <test_share_chunk+0x725>
f0112ace:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ad1:	8a 00                	mov    (%eax),%al
f0112ad3:	3c 41                	cmp    $0x41,%al
f0112ad5:	75 24                	jne    f0112afb <test_share_chunk+0x725>
f0112ad7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ada:	8a 00                	mov    (%eax),%al
f0112adc:	3c 41                	cmp    $0x41,%al
f0112ade:	75 1b                	jne    f0112afb <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112ae0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ae3:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112ae5:	3c 44                	cmp    $0x44,%al
f0112ae7:	75 12                	jne    f0112afb <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112ae9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112aec:	8a 00                	mov    (%eax),%al
f0112aee:	3c 44                	cmp    $0x44,%al
f0112af0:	75 09                	jne    f0112afb <test_share_chunk+0x725>
f0112af2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112af5:	8a 00                	mov    (%eax),%al
f0112af7:	3c 44                	cmp    $0x44,%al
f0112af9:	74 1e                	je     f0112b19 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112afb:	83 ec 04             	sub    $0x4,%esp
f0112afe:	68 98 92 13 f0       	push   $0xf0139298
f0112b03:	68 45 04 00 00       	push   $0x445
f0112b08:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112b0d:	e8 20 d8 fe ff       	call   f0100332 <_warn>
f0112b12:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b19:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b1d:	74 04                	je     f0112b23 <test_share_chunk+0x74d>
f0112b1f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b23:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112b27:	83 ec 0c             	sub    $0xc,%esp
f0112b2a:	68 0a 89 13 f0       	push   $0xf013890a
f0112b2f:	e8 f9 e0 fe ff       	call   f0100c2d <cprintf>
f0112b34:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0112b37:	83 ec 0c             	sub    $0xc,%esp
f0112b3a:	68 a4 93 13 f0       	push   $0xf01393a4
f0112b3f:	e8 e9 e0 fe ff       	call   f0100c2d <cprintf>
f0112b44:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112b47:	e8 4c 92 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112b4c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0112b4f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112b52:	89 d0                	mov    %edx,%eax
f0112b54:	01 c0                	add    %eax,%eax
f0112b56:	01 d0                	add    %edx,%eax
f0112b58:	01 c0                	add    %eax,%eax
f0112b5a:	01 d0                	add    %edx,%eax
f0112b5c:	83 ec 0c             	sub    $0xc,%esp
f0112b5f:	6a 04                	push   $0x4
f0112b61:	50                   	push   %eax
f0112b62:	68 00 fc 3f 00       	push   $0x3ffc00
f0112b67:	68 00 fc 09 00       	push   $0x9fc00
f0112b6c:	ff 75 cc             	pushl  -0x34(%ebp)
f0112b6f:	e8 b7 53 ff ff       	call   f0107f2b <share_chunk>
f0112b74:	83 c4 20             	add    $0x20,%esp
f0112b77:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112b7a:	e8 19 92 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112b7f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112b82:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0112b86:	75 0b                	jne    f0112b93 <test_share_chunk+0x7bd>
f0112b88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b8b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112b8e:	83 f8 01             	cmp    $0x1,%eax
f0112b91:	74 28                	je     f0112bbb <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112b93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112b96:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112b99:	83 ec 0c             	sub    $0xc,%esp
f0112b9c:	50                   	push   %eax
f0112b9d:	ff 75 8c             	pushl  -0x74(%ebp)
f0112ba0:	68 18 93 13 f0       	push   $0xf0139318
f0112ba5:	68 5b 04 00 00       	push   $0x45b
f0112baa:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112baf:	e8 7e d7 fe ff       	call   f0100332 <_warn>
f0112bb4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112bb7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112bbb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112bbf:	74 04                	je     f0112bc5 <test_share_chunk+0x7ef>
f0112bc1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112bc5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112bc9:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112bd0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112bd3:	89 d0                	mov    %edx,%eax
f0112bd5:	01 c0                	add    %eax,%eax
f0112bd7:	01 d0                	add    %edx,%eax
f0112bd9:	c1 e0 02             	shl    $0x2,%eax
f0112bdc:	83 ec 08             	sub    $0x8,%esp
f0112bdf:	6a 02                	push   $0x2
f0112be1:	6a 07                	push   $0x7
f0112be3:	6a 07                	push   $0x7
f0112be5:	6a 07                	push   $0x7
f0112be7:	6a 05                	push   $0x5
f0112be9:	6a ff                	push   $0xffffffff
f0112beb:	50                   	push   %eax
f0112bec:	68 00 f0 3f 00       	push   $0x3ff000
f0112bf1:	68 00 f0 09 00       	push   $0x9f000
f0112bf6:	ff 75 cc             	pushl  -0x34(%ebp)
f0112bf9:	e8 7d 25 00 00       	call   f011517b <CCP>
f0112bfe:	83 c4 30             	add    $0x30,%esp
f0112c01:	85 c0                	test   %eax,%eax
f0112c03:	75 25                	jne    f0112c2a <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c05:	83 ec 04             	sub    $0x4,%esp
f0112c08:	68 50 92 13 f0       	push   $0xf0139250
f0112c0d:	68 64 04 00 00       	push   $0x464
f0112c12:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112c17:	e8 16 d7 fe ff       	call   f0100332 <_warn>
f0112c1c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112c23:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0112c2a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c2e:	74 04                	je     f0112c34 <test_share_chunk+0x85e>
f0112c30:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c34:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112c38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c3b:	c1 e0 02             	shl    $0x2,%eax
f0112c3e:	83 ec 08             	sub    $0x8,%esp
f0112c41:	6a 02                	push   $0x2
f0112c43:	6a 07                	push   $0x7
f0112c45:	6a 07                	push   $0x7
f0112c47:	6a 07                	push   $0x7
f0112c49:	6a 05                	push   $0x5
f0112c4b:	6a 03                	push   $0x3
f0112c4d:	50                   	push   %eax
f0112c4e:	68 00 f0 3f 00       	push   $0x3ff000
f0112c53:	68 00 f0 09 00       	push   $0x9f000
f0112c58:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c5b:	e8 1b 25 00 00       	call   f011517b <CCP>
f0112c60:	83 c4 30             	add    $0x30,%esp
f0112c63:	85 c0                	test   %eax,%eax
f0112c65:	75 1e                	jne    f0112c85 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c67:	83 ec 04             	sub    $0x4,%esp
f0112c6a:	68 50 92 13 f0       	push   $0xf0139250
f0112c6f:	68 6d 04 00 00       	push   $0x46d
f0112c74:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112c79:	e8 b4 d6 fe ff       	call   f0100332 <_warn>
f0112c7e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c81:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112c85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c89:	74 04                	je     f0112c8f <test_share_chunk+0x8b9>
f0112c8b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c8f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112c93:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c96:	c1 e0 03             	shl    $0x3,%eax
f0112c99:	83 ec 08             	sub    $0x8,%esp
f0112c9c:	6a 02                	push   $0x2
f0112c9e:	6a 07                	push   $0x7
f0112ca0:	6a 07                	push   $0x7
f0112ca2:	6a 07                	push   $0x7
f0112ca4:	6a 05                	push   $0x5
f0112ca6:	6a 04                	push   $0x4
f0112ca8:	50                   	push   %eax
f0112ca9:	68 00 00 40 00       	push   $0x400000
f0112cae:	68 00 00 0a 00       	push   $0xa0000
f0112cb3:	ff 75 cc             	pushl  -0x34(%ebp)
f0112cb6:	e8 c0 24 00 00       	call   f011517b <CCP>
f0112cbb:	83 c4 30             	add    $0x30,%esp
f0112cbe:	85 c0                	test   %eax,%eax
f0112cc0:	75 1e                	jne    f0112ce0 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112cc2:	83 ec 04             	sub    $0x4,%esp
f0112cc5:	68 50 92 13 f0       	push   $0xf0139250
f0112cca:	68 75 04 00 00       	push   $0x475
f0112ccf:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112cd4:	e8 59 d6 fe ff       	call   f0100332 <_warn>
f0112cd9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cdc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112ce0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ce4:	74 04                	je     f0112cea <test_share_chunk+0x914>
f0112ce6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112cee:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0112cf2:	0f 84 b2 00 00 00    	je     f0112daa <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0112cf8:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0112cff:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0112d06:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0112d0d:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0112d14:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0112d1b:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0112d22:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0112d29:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0112d30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d33:	8a 00                	mov    (%eax),%al
f0112d35:	3c 44                	cmp    $0x44,%al
f0112d37:	75 45                	jne    f0112d7e <test_share_chunk+0x9a8>
f0112d39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d3c:	8a 00                	mov    (%eax),%al
f0112d3e:	3c 44                	cmp    $0x44,%al
f0112d40:	75 3c                	jne    f0112d7e <test_share_chunk+0x9a8>
f0112d42:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112d45:	8a 00                	mov    (%eax),%al
f0112d47:	3c 44                	cmp    $0x44,%al
f0112d49:	75 33                	jne    f0112d7e <test_share_chunk+0x9a8>
f0112d4b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d4e:	8a 00                	mov    (%eax),%al
f0112d50:	3c 44                	cmp    $0x44,%al
f0112d52:	75 2a                	jne    f0112d7e <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112d54:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d57:	8a 10                	mov    (%eax),%dl
f0112d59:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112d5c:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0112d5e:	38 c2                	cmp    %al,%dl
f0112d60:	75 1c                	jne    f0112d7e <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0112d62:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d65:	8a 10                	mov    (%eax),%dl
f0112d67:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112d6a:	8a 00                	mov    (%eax),%al
f0112d6c:	38 c2                	cmp    %al,%dl
f0112d6e:	75 0e                	jne    f0112d7e <test_share_chunk+0x9a8>
f0112d70:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d73:	8a 10                	mov    (%eax),%dl
f0112d75:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112d78:	8a 00                	mov    (%eax),%al
f0112d7a:	38 c2                	cmp    %al,%dl
f0112d7c:	74 1e                	je     f0112d9c <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112d7e:	83 ec 04             	sub    $0x4,%esp
f0112d81:	68 98 92 13 f0       	push   $0xf0139298
f0112d86:	68 8a 04 00 00       	push   $0x48a
f0112d8b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112d90:	e8 9d d5 fe ff       	call   f0100332 <_warn>
f0112d95:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112d98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112d9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112da0:	74 04                	je     f0112da6 <test_share_chunk+0x9d0>
f0112da2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112da6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0112daa:	83 ec 0c             	sub    $0xc,%esp
f0112dad:	68 dc 93 13 f0       	push   $0xf01393dc
f0112db2:	e8 76 de fe ff       	call   f0100c2d <cprintf>
f0112db7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0112dba:	83 ec 08             	sub    $0x8,%esp
f0112dbd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112dc0:	68 ec 93 13 f0       	push   $0xf01393ec
f0112dc5:	e8 63 de fe ff       	call   f0100c2d <cprintf>
f0112dca:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112dcd:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112dd1:	75 10                	jne    f0112de3 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0112dd3:	83 ec 0c             	sub    $0xc,%esp
f0112dd6:	68 1c 94 13 f0       	push   $0xf013941c
f0112ddb:	e8 4d de fe ff       	call   f0100c2d <cprintf>
f0112de0:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112de3:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0112de8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0112deb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112dee:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112df1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112df6:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112df9:	5b                   	pop    %ebx
f0112dfa:	5e                   	pop    %esi
f0112dfb:	5f                   	pop    %edi
f0112dfc:	5d                   	pop    %ebp
f0112dfd:	c3                   	ret    

f0112dfe <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0112dfe:	55                   	push   %ebp
f0112dff:	89 e5                	mov    %esp,%ebp
f0112e01:	57                   	push   %edi
f0112e02:	56                   	push   %esi
f0112e03:	53                   	push   %ebx
f0112e04:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112e0a:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112e10:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f0112e15:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e1a:	89 c7                	mov    %eax,%edi
f0112e1c:	89 de                	mov    %ebx,%esi
f0112e1e:	89 d1                	mov    %edx,%ecx
f0112e20:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e22:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112e28:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112e2d:	b0 00                	mov    $0x0,%al
f0112e2f:	89 d7                	mov    %edx,%edi
f0112e31:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112e33:	6a 00                	push   $0x0
f0112e35:	6a 0a                	push   $0xa
f0112e37:	6a 14                	push   $0x14
f0112e39:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112e3f:	50                   	push   %eax
f0112e40:	e8 07 52 ff ff       	call   f010804c <env_create>
f0112e45:	83 c4 10             	add    $0x10,%esp
f0112e48:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112e4b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e4e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112e51:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0112e54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e57:	8b 40 60             	mov    0x60(%eax),%eax
f0112e5a:	89 45 90             	mov    %eax,-0x70(%ebp)
f0112e5d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e60:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0112e63:	83 ec 0c             	sub    $0xc,%esp
f0112e66:	ff 75 d0             	pushl  -0x30(%ebp)
f0112e69:	e8 d9 22 00 00       	call   f0115147 <ClearUserSpace>
f0112e6e:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0112e71:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112e78:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0112e7f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112e86:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0112e8a:	83 ec 0c             	sub    $0xc,%esp
f0112e8d:	68 58 94 13 f0       	push   $0xf0139458
f0112e92:	e8 96 dd fe ff       	call   f0100c2d <cprintf>
f0112e97:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0112e9a:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0112ea1:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0112ea8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112eab:	8a 00                	mov    (%eax),%al
f0112ead:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0112eb3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112eb6:	8a 00                	mov    (%eax),%al
f0112eb8:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0112ebe:	83 ec 08             	sub    $0x8,%esp
f0112ec1:	68 00 f0 bf ef       	push   $0xefbff000
f0112ec6:	ff 75 d0             	pushl  -0x30(%ebp)
f0112ec9:	e8 e0 21 00 00       	call   f01150ae <GP>
f0112ece:	83 c4 10             	add    $0x10,%esp
f0112ed1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112ed4:	e8 bf 8e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112ed9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0112edc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112edf:	c1 e0 02             	shl    $0x2,%eax
f0112ee2:	6a 02                	push   $0x2
f0112ee4:	50                   	push   %eax
f0112ee5:	68 00 f0 bf ef       	push   $0xefbff000
f0112eea:	ff 75 d0             	pushl  -0x30(%ebp)
f0112eed:	e8 53 50 ff ff       	call   f0107f45 <allocate_chunk>
f0112ef2:	83 c4 10             	add    $0x10,%esp
f0112ef5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112ef8:	e8 9b 8e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112efd:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112f00:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112f04:	75 08                	jne    f0112f0e <test_allocate_chunk+0x110>
f0112f06:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f09:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112f0c:	74 2a                	je     f0112f38 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0112f0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f11:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112f14:	83 ec 08             	sub    $0x8,%esp
f0112f17:	6a 00                	push   $0x0
f0112f19:	50                   	push   %eax
f0112f1a:	ff 75 b0             	pushl  -0x50(%ebp)
f0112f1d:	68 84 94 13 f0       	push   $0xf0139484
f0112f22:	68 c6 04 00 00       	push   $0x4c6
f0112f27:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112f2c:	e8 01 d4 fe ff       	call   f0100332 <_warn>
f0112f31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112f34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112f38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f3c:	74 04                	je     f0112f42 <test_allocate_chunk+0x144>
f0112f3e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112f42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112f46:	e8 4d 8e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112f4b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0112f4e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f51:	01 c0                	add    %eax,%eax
f0112f53:	89 c1                	mov    %eax,%ecx
f0112f55:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0112f58:	89 d0                	mov    %edx,%eax
f0112f5a:	c1 e0 02             	shl    $0x2,%eax
f0112f5d:	01 d0                	add    %edx,%eax
f0112f5f:	f7 d8                	neg    %eax
f0112f61:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0112f66:	6a 02                	push   $0x2
f0112f68:	51                   	push   %ecx
f0112f69:	50                   	push   %eax
f0112f6a:	ff 75 d0             	pushl  -0x30(%ebp)
f0112f6d:	e8 d3 4f ff ff       	call   f0107f45 <allocate_chunk>
f0112f72:	83 c4 10             	add    $0x10,%esp
f0112f75:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112f78:	e8 1b 8e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0112f7d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112f80:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112f84:	75 08                	jne    f0112f8e <test_allocate_chunk+0x190>
f0112f86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f89:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0112f8c:	74 2a                	je     f0112fb8 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0112f8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f91:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112f94:	83 ec 08             	sub    $0x8,%esp
f0112f97:	6a 00                	push   $0x0
f0112f99:	50                   	push   %eax
f0112f9a:	ff 75 b0             	pushl  -0x50(%ebp)
f0112f9d:	68 84 94 13 f0       	push   $0xf0139484
f0112fa2:	68 d4 04 00 00       	push   $0x4d4
f0112fa7:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0112fac:	e8 81 d3 fe ff       	call   f0100332 <_warn>
f0112fb1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112fb4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112fb8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112fbc:	74 04                	je     f0112fc2 <test_allocate_chunk+0x1c4>
f0112fbe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112fc2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0112fc6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112fc9:	c1 e0 02             	shl    $0x2,%eax
f0112fcc:	83 ec 08             	sub    $0x8,%esp
f0112fcf:	6a 03                	push   $0x3
f0112fd1:	6a 00                	push   $0x0
f0112fd3:	6a 00                	push   $0x0
f0112fd5:	68 ff 0f 00 00       	push   $0xfff
f0112fda:	ff 75 b8             	pushl  -0x48(%ebp)
f0112fdd:	6a 01                	push   $0x1
f0112fdf:	50                   	push   %eax
f0112fe0:	68 00 f0 bf ef       	push   $0xefbff000
f0112fe5:	6a 00                	push   $0x0
f0112fe7:	ff 75 d0             	pushl  -0x30(%ebp)
f0112fea:	e8 8c 21 00 00       	call   f011517b <CCP>
f0112fef:	83 c4 30             	add    $0x30,%esp
f0112ff2:	85 c0                	test   %eax,%eax
f0112ff4:	75 1e                	jne    f0113014 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0112ff6:	83 ec 04             	sub    $0x4,%esp
f0112ff9:	68 ec 94 13 f0       	push   $0xf01394ec
f0112ffe:	68 dc 04 00 00       	push   $0x4dc
f0113003:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113008:	e8 25 d3 fe ff       	call   f0100332 <_warn>
f011300d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113010:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113014:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113018:	74 04                	je     f011301e <test_allocate_chunk+0x220>
f011301a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011301e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113022:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113025:	8a 10                	mov    (%eax),%dl
f0113027:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f011302d:	38 c2                	cmp    %al,%dl
f011302f:	75 0f                	jne    f0113040 <test_allocate_chunk+0x242>
f0113031:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113034:	8a 10                	mov    (%eax),%dl
f0113036:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f011303c:	38 c2                	cmp    %al,%dl
f011303e:	74 1e                	je     f011305e <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113040:	83 ec 04             	sub    $0x4,%esp
f0113043:	68 38 95 13 f0       	push   $0xf0139538
f0113048:	68 e4 04 00 00       	push   $0x4e4
f011304d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113052:	e8 db d2 fe ff       	call   f0100332 <_warn>
f0113057:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011305a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011305e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113062:	74 04                	je     f0113068 <test_allocate_chunk+0x26a>
f0113064:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113068:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011306c:	83 ec 0c             	sub    $0xc,%esp
f011306f:	68 cd 92 13 f0       	push   $0xf01392cd
f0113074:	e8 b4 db fe ff       	call   f0100c2d <cprintf>
f0113079:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f011307c:	83 ec 0c             	sub    $0xc,%esp
f011307f:	68 70 95 13 f0       	push   $0xf0139570
f0113084:	e8 a4 db fe ff       	call   f0100c2d <cprintf>
f0113089:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011308c:	e8 07 8d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0113091:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113094:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113097:	c1 e0 05             	shl    $0x5,%eax
f011309a:	68 02 0e 00 00       	push   $0xe02
f011309f:	50                   	push   %eax
f01130a0:	6a 00                	push   $0x0
f01130a2:	ff 75 d0             	pushl  -0x30(%ebp)
f01130a5:	e8 9b 4e ff ff       	call   f0107f45 <allocate_chunk>
f01130aa:	83 c4 10             	add    $0x10,%esp
f01130ad:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01130b0:	e8 e3 8c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01130b5:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01130b8:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01130bc:	75 36                	jne    f01130f4 <test_allocate_chunk+0x2f6>
f01130be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130c1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01130c4:	89 c1                	mov    %eax,%ecx
f01130c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130c9:	c1 e0 05             	shl    $0x5,%eax
f01130cc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01130cf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01130d6:	99                   	cltd   
f01130d7:	f7 fe                	idiv   %esi
f01130d9:	89 c3                	mov    %eax,%ebx
f01130db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130de:	c1 e0 05             	shl    $0x5,%eax
f01130e1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01130e4:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01130eb:	99                   	cltd   
f01130ec:	f7 fe                	idiv   %esi
f01130ee:	01 d8                	add    %ebx,%eax
f01130f0:	39 c1                	cmp    %eax,%ecx
f01130f2:	74 54                	je     f0113148 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01130f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01130f7:	c1 e0 05             	shl    $0x5,%eax
f01130fa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01130fd:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113104:	99                   	cltd   
f0113105:	f7 ff                	idiv   %edi
f0113107:	89 c1                	mov    %eax,%ecx
f0113109:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011310c:	c1 e0 05             	shl    $0x5,%eax
f011310f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113112:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113119:	99                   	cltd   
f011311a:	f7 fe                	idiv   %esi
f011311c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011311f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113122:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113125:	83 ec 08             	sub    $0x8,%esp
f0113128:	52                   	push   %edx
f0113129:	50                   	push   %eax
f011312a:	ff 75 a8             	pushl  -0x58(%ebp)
f011312d:	68 b0 95 13 f0       	push   $0xf01395b0
f0113132:	68 f9 04 00 00       	push   $0x4f9
f0113137:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011313c:	e8 f1 d1 fe ff       	call   f0100332 <_warn>
f0113141:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113144:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113148:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011314c:	74 04                	je     f0113152 <test_allocate_chunk+0x354>
f011314e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113152:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113156:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011315d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113160:	c1 e0 05             	shl    $0x5,%eax
f0113163:	83 ec 08             	sub    $0x8,%esp
f0113166:	6a 03                	push   $0x3
f0113168:	6a 00                	push   $0x0
f011316a:	6a 00                	push   $0x0
f011316c:	68 07 0e 00 00       	push   $0xe07
f0113171:	68 03 0e 00 00       	push   $0xe03
f0113176:	6a 01                	push   $0x1
f0113178:	50                   	push   %eax
f0113179:	6a 00                	push   $0x0
f011317b:	6a 00                	push   $0x0
f011317d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113180:	e8 f6 1f 00 00       	call   f011517b <CCP>
f0113185:	83 c4 30             	add    $0x30,%esp
f0113188:	85 c0                	test   %eax,%eax
f011318a:	75 25                	jne    f01131b1 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011318c:	83 ec 04             	sub    $0x4,%esp
f011318f:	68 ec 94 13 f0       	push   $0xf01394ec
f0113194:	68 02 05 00 00       	push   $0x502
f0113199:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011319e:	e8 8f d1 fe ff       	call   f0100332 <_warn>
f01131a3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01131a6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01131aa:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01131b1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131b5:	74 04                	je     f01131bb <test_allocate_chunk+0x3bd>
f01131b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131bb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01131bf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01131c3:	74 5a                	je     f011321f <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01131c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01131c8:	01 c0                	add    %eax,%eax
f01131ca:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01131cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131d0:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01131d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01131d6:	01 c0                	add    %eax,%eax
f01131d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01131db:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131de:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01131e1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131e4:	8a 00                	mov    (%eax),%al
f01131e6:	3c 4b                	cmp    $0x4b,%al
f01131e8:	75 09                	jne    f01131f3 <test_allocate_chunk+0x3f5>
f01131ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131ed:	8a 00                	mov    (%eax),%al
f01131ef:	3c 4d                	cmp    $0x4d,%al
f01131f1:	74 1e                	je     f0113211 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01131f3:	83 ec 04             	sub    $0x4,%esp
f01131f6:	68 38 95 13 f0       	push   $0xf0139538
f01131fb:	68 10 05 00 00       	push   $0x510
f0113200:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113205:	e8 28 d1 fe ff       	call   f0100332 <_warn>
f011320a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011320d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113211:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113215:	74 04                	je     f011321b <test_allocate_chunk+0x41d>
f0113217:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011321b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011321f:	83 ec 0c             	sub    $0xc,%esp
f0113222:	68 a7 88 13 f0       	push   $0xf01388a7
f0113227:	e8 01 da fe ff       	call   f0100c2d <cprintf>
f011322c:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f011322f:	83 ec 0c             	sub    $0xc,%esp
f0113232:	68 10 96 13 f0       	push   $0xf0139610
f0113237:	e8 f1 d9 fe ff       	call   f0100c2d <cprintf>
f011323c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011323f:	e8 54 8b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0113244:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113247:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011324a:	c1 e0 06             	shl    $0x6,%eax
f011324d:	89 c2                	mov    %eax,%edx
f011324f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113252:	c1 e0 05             	shl    $0x5,%eax
f0113255:	6a 00                	push   $0x0
f0113257:	52                   	push   %edx
f0113258:	50                   	push   %eax
f0113259:	ff 75 d0             	pushl  -0x30(%ebp)
f011325c:	e8 e4 4c ff ff       	call   f0107f45 <allocate_chunk>
f0113261:	83 c4 10             	add    $0x10,%esp
f0113264:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113267:	e8 2c 8b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011326c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f011326f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113273:	75 36                	jne    f01132ab <test_allocate_chunk+0x4ad>
f0113275:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113278:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011327b:	89 c1                	mov    %eax,%ecx
f011327d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113280:	c1 e0 06             	shl    $0x6,%eax
f0113283:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113286:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011328d:	99                   	cltd   
f011328e:	f7 ff                	idiv   %edi
f0113290:	89 c3                	mov    %eax,%ebx
f0113292:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113295:	c1 e0 06             	shl    $0x6,%eax
f0113298:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011329b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01132a2:	99                   	cltd   
f01132a3:	f7 fe                	idiv   %esi
f01132a5:	01 d8                	add    %ebx,%eax
f01132a7:	39 c1                	cmp    %eax,%ecx
f01132a9:	74 54                	je     f01132ff <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01132ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132ae:	c1 e0 06             	shl    $0x6,%eax
f01132b1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132b4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01132bb:	99                   	cltd   
f01132bc:	f7 fb                	idiv   %ebx
f01132be:	89 c1                	mov    %eax,%ecx
f01132c0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01132c3:	c1 e0 06             	shl    $0x6,%eax
f01132c6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01132c9:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01132d0:	99                   	cltd   
f01132d1:	f7 ff                	idiv   %edi
f01132d3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01132d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132d9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132dc:	83 ec 08             	sub    $0x8,%esp
f01132df:	52                   	push   %edx
f01132e0:	50                   	push   %eax
f01132e1:	ff 75 a4             	pushl  -0x5c(%ebp)
f01132e4:	68 b0 95 13 f0       	push   $0xf01395b0
f01132e9:	68 26 05 00 00       	push   $0x526
f01132ee:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01132f3:	e8 3a d0 fe ff       	call   f0100332 <_warn>
f01132f8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01132ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113303:	74 04                	je     f0113309 <test_allocate_chunk+0x50b>
f0113305:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113309:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011330d:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113314:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113317:	c1 e0 06             	shl    $0x6,%eax
f011331a:	89 c2                	mov    %eax,%edx
f011331c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011331f:	c1 e0 05             	shl    $0x5,%eax
f0113322:	83 ec 08             	sub    $0x8,%esp
f0113325:	6a 03                	push   $0x3
f0113327:	6a 00                	push   $0x0
f0113329:	6a 00                	push   $0x0
f011332b:	68 07 0e 00 00       	push   $0xe07
f0113330:	6a 01                	push   $0x1
f0113332:	6a 01                	push   $0x1
f0113334:	52                   	push   %edx
f0113335:	50                   	push   %eax
f0113336:	6a 00                	push   $0x0
f0113338:	ff 75 d0             	pushl  -0x30(%ebp)
f011333b:	e8 3b 1e 00 00       	call   f011517b <CCP>
f0113340:	83 c4 30             	add    $0x30,%esp
f0113343:	85 c0                	test   %eax,%eax
f0113345:	75 25                	jne    f011336c <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113347:	83 ec 04             	sub    $0x4,%esp
f011334a:	68 ec 94 13 f0       	push   $0xf01394ec
f011334f:	68 2f 05 00 00       	push   $0x52f
f0113354:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113359:	e8 d4 cf fe ff       	call   f0100332 <_warn>
f011335e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113361:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113365:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f011336c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113370:	74 04                	je     f0113376 <test_allocate_chunk+0x578>
f0113372:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113376:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f011337a:	83 ec 0c             	sub    $0xc,%esp
f011337d:	68 0a 89 13 f0       	push   $0xf013890a
f0113382:	e8 a6 d8 fe ff       	call   f0100c2d <cprintf>
f0113387:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011338a:	83 ec 0c             	sub    $0xc,%esp
f011338d:	68 50 96 13 f0       	push   $0xf0139650
f0113392:	e8 96 d8 fe ff       	call   f0100c2d <cprintf>
f0113397:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011339a:	e8 f9 89 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011339f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01133a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133a5:	c1 e0 06             	shl    $0x6,%eax
f01133a8:	68 06 0e 00 00       	push   $0xe06
f01133ad:	50                   	push   %eax
f01133ae:	68 00 00 00 80       	push   $0x80000000
f01133b3:	ff 75 d0             	pushl  -0x30(%ebp)
f01133b6:	e8 8a 4b ff ff       	call   f0107f45 <allocate_chunk>
f01133bb:	83 c4 10             	add    $0x10,%esp
f01133be:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133c1:	e8 d2 89 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01133c6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01133c9:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f01133cd:	75 36                	jne    f0113405 <test_allocate_chunk+0x607>
f01133cf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133d2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133d5:	89 c1                	mov    %eax,%ecx
f01133d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133da:	c1 e0 06             	shl    $0x6,%eax
f01133dd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01133e0:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01133e7:	99                   	cltd   
f01133e8:	f7 fb                	idiv   %ebx
f01133ea:	89 c3                	mov    %eax,%ebx
f01133ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133ef:	c1 e0 06             	shl    $0x6,%eax
f01133f2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01133f5:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01133fc:	99                   	cltd   
f01133fd:	f7 fe                	idiv   %esi
f01133ff:	01 d8                	add    %ebx,%eax
f0113401:	39 c1                	cmp    %eax,%ecx
f0113403:	74 54                	je     f0113459 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113405:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113408:	c1 e0 06             	shl    $0x6,%eax
f011340b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011340e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113415:	99                   	cltd   
f0113416:	f7 ff                	idiv   %edi
f0113418:	89 c1                	mov    %eax,%ecx
f011341a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011341d:	c1 e0 06             	shl    $0x6,%eax
f0113420:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113423:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011342a:	99                   	cltd   
f011342b:	f7 fb                	idiv   %ebx
f011342d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113430:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113433:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113436:	83 ec 08             	sub    $0x8,%esp
f0113439:	52                   	push   %edx
f011343a:	50                   	push   %eax
f011343b:	ff 75 9c             	pushl  -0x64(%ebp)
f011343e:	68 b0 95 13 f0       	push   $0xf01395b0
f0113443:	68 45 05 00 00       	push   $0x545
f0113448:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011344d:	e8 e0 ce fe ff       	call   f0100332 <_warn>
f0113452:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113455:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113459:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011345d:	74 04                	je     f0113463 <test_allocate_chunk+0x665>
f011345f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113463:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113467:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011346e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113471:	c1 e0 06             	shl    $0x6,%eax
f0113474:	83 ec 08             	sub    $0x8,%esp
f0113477:	6a 03                	push   $0x3
f0113479:	6a 00                	push   $0x0
f011347b:	6a 00                	push   $0x0
f011347d:	68 07 0e 00 00       	push   $0xe07
f0113482:	68 07 0e 00 00       	push   $0xe07
f0113487:	6a 01                	push   $0x1
f0113489:	50                   	push   %eax
f011348a:	68 00 00 00 80       	push   $0x80000000
f011348f:	6a 00                	push   $0x0
f0113491:	ff 75 d0             	pushl  -0x30(%ebp)
f0113494:	e8 e2 1c 00 00       	call   f011517b <CCP>
f0113499:	83 c4 30             	add    $0x30,%esp
f011349c:	85 c0                	test   %eax,%eax
f011349e:	75 25                	jne    f01134c5 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01134a0:	83 ec 04             	sub    $0x4,%esp
f01134a3:	68 ec 94 13 f0       	push   $0xf01394ec
f01134a8:	68 4e 05 00 00       	push   $0x54e
f01134ad:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01134b2:	e8 7b ce fe ff       	call   f0100332 <_warn>
f01134b7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01134be:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01134c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134c9:	74 04                	je     f01134cf <test_allocate_chunk+0x6d1>
f01134cb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01134d3:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01134d7:	74 6f                	je     f0113548 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01134d9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01134dc:	01 c0                	add    %eax,%eax
f01134de:	05 00 00 00 80       	add    $0x80000000,%eax
f01134e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01134e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01134e9:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01134ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01134ef:	89 d0                	mov    %edx,%eax
f01134f1:	c1 e0 02             	shl    $0x2,%eax
f01134f4:	01 d0                	add    %edx,%eax
f01134f6:	01 c0                	add    %eax,%eax
f01134f8:	01 d0                	add    %edx,%eax
f01134fa:	01 c0                	add    %eax,%eax
f01134fc:	05 00 00 00 80       	add    $0x80000000,%eax
f0113501:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113504:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113507:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011350a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011350d:	8a 00                	mov    (%eax),%al
f011350f:	3c 4b                	cmp    $0x4b,%al
f0113511:	75 09                	jne    f011351c <test_allocate_chunk+0x71e>
f0113513:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113516:	8a 00                	mov    (%eax),%al
f0113518:	3c 4d                	cmp    $0x4d,%al
f011351a:	74 1e                	je     f011353a <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011351c:	83 ec 04             	sub    $0x4,%esp
f011351f:	68 38 95 13 f0       	push   $0xf0139538
f0113524:	68 5c 05 00 00       	push   $0x55c
f0113529:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011352e:	e8 ff cd fe ff       	call   f0100332 <_warn>
f0113533:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113536:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011353a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011353e:	74 04                	je     f0113544 <test_allocate_chunk+0x746>
f0113540:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113544:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0113548:	83 ec 0c             	sub    $0xc,%esp
f011354b:	68 dc 93 13 f0       	push   $0xf01393dc
f0113550:	e8 d8 d6 fe ff       	call   f0100c2d <cprintf>
f0113555:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0113558:	83 ec 0c             	sub    $0xc,%esp
f011355b:	68 8c 96 13 f0       	push   $0xf013968c
f0113560:	e8 c8 d6 fe ff       	call   f0100c2d <cprintf>
f0113565:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113568:	e8 2b 88 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011356d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0113570:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113573:	89 d0                	mov    %edx,%eax
f0113575:	01 c0                	add    %eax,%eax
f0113577:	01 d0                	add    %edx,%eax
f0113579:	01 c0                	add    %eax,%eax
f011357b:	01 d0                	add    %edx,%eax
f011357d:	68 04 0e 00 00       	push   $0xe04
f0113582:	50                   	push   %eax
f0113583:	68 00 fc 3f 40       	push   $0x403ffc00
f0113588:	ff 75 d0             	pushl  -0x30(%ebp)
f011358b:	e8 b5 49 ff ff       	call   f0107f45 <allocate_chunk>
f0113590:	83 c4 10             	add    $0x10,%esp
f0113593:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113596:	e8 fd 87 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011359b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011359e:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01135a2:	75 0b                	jne    f01135af <test_allocate_chunk+0x7b1>
f01135a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135a7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135aa:	83 f8 05             	cmp    $0x5,%eax
f01135ad:	74 2a                	je     f01135d9 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01135af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135b2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135b5:	83 ec 08             	sub    $0x8,%esp
f01135b8:	6a 05                	push   $0x5
f01135ba:	50                   	push   %eax
f01135bb:	ff 75 98             	pushl  -0x68(%ebp)
f01135be:	68 b0 95 13 f0       	push   $0xf01395b0
f01135c3:	68 73 05 00 00       	push   $0x573
f01135c8:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01135cd:	e8 60 cd fe ff       	call   f0100332 <_warn>
f01135d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01135d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01135d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135dd:	74 04                	je     f01135e3 <test_allocate_chunk+0x7e5>
f01135df:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01135e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01135e7:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01135ee:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135f1:	89 d0                	mov    %edx,%eax
f01135f3:	01 c0                	add    %eax,%eax
f01135f5:	01 d0                	add    %edx,%eax
f01135f7:	c1 e0 02             	shl    $0x2,%eax
f01135fa:	83 ec 08             	sub    $0x8,%esp
f01135fd:	6a 03                	push   $0x3
f01135ff:	6a 00                	push   $0x0
f0113601:	6a 00                	push   $0x0
f0113603:	68 07 0e 00 00       	push   $0xe07
f0113608:	68 05 0e 00 00       	push   $0xe05
f011360d:	6a 01                	push   $0x1
f011360f:	50                   	push   %eax
f0113610:	68 00 f0 3f 40       	push   $0x403ff000
f0113615:	6a 00                	push   $0x0
f0113617:	ff 75 d0             	pushl  -0x30(%ebp)
f011361a:	e8 5c 1b 00 00       	call   f011517b <CCP>
f011361f:	83 c4 30             	add    $0x30,%esp
f0113622:	85 c0                	test   %eax,%eax
f0113624:	75 25                	jne    f011364b <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113626:	83 ec 04             	sub    $0x4,%esp
f0113629:	68 ec 94 13 f0       	push   $0xf01394ec
f011362e:	68 7c 05 00 00       	push   $0x57c
f0113633:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113638:	e8 f5 cc fe ff       	call   f0100332 <_warn>
f011363d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113640:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113644:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011364b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011364f:	74 04                	je     f0113655 <test_allocate_chunk+0x857>
f0113651:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113655:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0113659:	83 ec 0c             	sub    $0xc,%esp
f011365c:	68 c3 96 13 f0       	push   $0xf01396c3
f0113661:	e8 c7 d5 fe ff       	call   f0100c2d <cprintf>
f0113666:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0113669:	83 ec 08             	sub    $0x8,%esp
f011366c:	ff 75 e4             	pushl  -0x1c(%ebp)
f011366f:	68 d4 96 13 f0       	push   $0xf01396d4
f0113674:	e8 b4 d5 fe ff       	call   f0100c2d <cprintf>
f0113679:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011367c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113680:	75 10                	jne    f0113692 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0113682:	83 ec 0c             	sub    $0xc,%esp
f0113685:	68 08 97 13 f0       	push   $0xf0139708
f011368a:	e8 9e d5 fe ff       	call   f0100c2d <cprintf>
f011368f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113692:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0113697:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011369a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011369d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01136a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01136a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01136a8:	5b                   	pop    %ebx
f01136a9:	5e                   	pop    %esi
f01136aa:	5f                   	pop    %edi
f01136ab:	5d                   	pop    %ebp
f01136ac:	c3                   	ret    

f01136ad <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01136ad:	55                   	push   %ebp
f01136ae:	89 e5                	mov    %esp,%ebp
f01136b0:	57                   	push   %edi
f01136b1:	56                   	push   %esi
f01136b2:	53                   	push   %ebx
f01136b3:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01136b9:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01136bc:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f01136c1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136c6:	89 c7                	mov    %eax,%edi
f01136c8:	89 de                	mov    %ebx,%esi
f01136ca:	89 d1                	mov    %edx,%ecx
f01136cc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136ce:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01136d1:	b9 23 00 00 00       	mov    $0x23,%ecx
f01136d6:	b0 00                	mov    $0x0,%al
f01136d8:	89 d7                	mov    %edx,%edi
f01136da:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01136dc:	6a 00                	push   $0x0
f01136de:	6a 0a                	push   $0xa
f01136e0:	6a 14                	push   $0x14
f01136e2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01136e5:	50                   	push   %eax
f01136e6:	e8 61 49 ff ff       	call   f010804c <env_create>
f01136eb:	83 c4 10             	add    $0x10,%esp
f01136ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01136f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01136f4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01136f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01136fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01136fd:	8b 40 60             	mov    0x60(%eax),%eax
f0113700:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113703:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113706:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113709:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113710:	75 70 20 
f0113713:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011371a:	00 00 00 
f011371d:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113720:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113725:	b8 00 00 00 00       	mov    $0x0,%eax
f011372a:	89 d7                	mov    %edx,%edi
f011372c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011372e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113731:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113734:	83 ec 08             	sub    $0x8,%esp
f0113737:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011373d:	52                   	push   %edx
f011373e:	50                   	push   %eax
f011373f:	e8 c7 cd 01 00       	call   f013050b <ltostr>
f0113744:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113747:	83 ec 04             	sub    $0x4,%esp
f011374a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113750:	50                   	push   %eax
f0113751:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113757:	50                   	push   %eax
f0113758:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011375e:	50                   	push   %eax
f011375f:	e8 9f ce 01 00       	call   f0130603 <strcconcat>
f0113764:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113767:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011376e:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113775:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f011377c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113783:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113787:	83 ec 0c             	sub    $0xc,%esp
f011378a:	ff 75 d8             	pushl  -0x28(%ebp)
f011378d:	e8 b5 19 00 00       	call   f0115147 <ClearUserSpace>
f0113792:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113795:	83 ec 0c             	sub    $0xc,%esp
f0113798:	68 48 97 13 f0       	push   $0xf0139748
f011379d:	e8 8b d4 fe ff       	call   f0100c2d <cprintf>
f01137a2:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01137a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01137a8:	c1 e0 03             	shl    $0x3,%eax
f01137ab:	83 ec 04             	sub    $0x4,%esp
f01137ae:	50                   	push   %eax
f01137af:	6a 00                	push   $0x0
f01137b1:	ff 75 d8             	pushl  -0x28(%ebp)
f01137b4:	e8 c0 47 ff ff       	call   f0107f79 <calculate_required_frames>
f01137b9:	83 c4 10             	add    $0x10,%esp
f01137bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01137bf:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01137c3:	74 23                	je     f01137e8 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01137c5:	83 ec 0c             	sub    $0xc,%esp
f01137c8:	6a 03                	push   $0x3
f01137ca:	ff 75 c8             	pushl  -0x38(%ebp)
f01137cd:	68 7c 97 13 f0       	push   $0xf013977c
f01137d2:	68 b5 05 00 00       	push   $0x5b5
f01137d7:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01137dc:	e8 51 cb fe ff       	call   f0100332 <_warn>
f01137e1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01137e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137ec:	74 04                	je     f01137f2 <test_calculate_required_frames+0x145>
f01137ee:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01137f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01137f9:	c1 e0 02             	shl    $0x2,%eax
f01137fc:	83 ec 04             	sub    $0x4,%esp
f01137ff:	50                   	push   %eax
f0113800:	6a 00                	push   $0x0
f0113802:	ff 75 d8             	pushl  -0x28(%ebp)
f0113805:	e8 6f 47 ff ff       	call   f0107f79 <calculate_required_frames>
f011380a:	83 c4 10             	add    $0x10,%esp
f011380d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113810:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113817:	74 26                	je     f011383f <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0113819:	83 ec 0c             	sub    $0xc,%esp
f011381c:	68 01 04 00 00       	push   $0x401
f0113821:	ff 75 c8             	pushl  -0x38(%ebp)
f0113824:	68 7c 97 13 f0       	push   $0xf013977c
f0113829:	68 bf 05 00 00       	push   $0x5bf
f011382e:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113833:	e8 fa ca fe ff       	call   f0100332 <_warn>
f0113838:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011383b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011383f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113843:	74 04                	je     f0113849 <test_calculate_required_frames+0x19c>
f0113845:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113849:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011384d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113850:	c1 e0 0a             	shl    $0xa,%eax
f0113853:	83 ec 04             	sub    $0x4,%esp
f0113856:	50                   	push   %eax
f0113857:	6a 00                	push   $0x0
f0113859:	ff 75 d8             	pushl  -0x28(%ebp)
f011385c:	e8 18 47 ff ff       	call   f0107f79 <calculate_required_frames>
f0113861:	83 c4 10             	add    $0x10,%esp
f0113864:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113867:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011386a:	c1 e0 0a             	shl    $0xa,%eax
f011386d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113870:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113877:	99                   	cltd   
f0113878:	f7 fb                	idiv   %ebx
f011387a:	89 c1                	mov    %eax,%ecx
f011387c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011387f:	c1 e0 0a             	shl    $0xa,%eax
f0113882:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113885:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011388c:	99                   	cltd   
f011388d:	f7 fe                	idiv   %esi
f011388f:	01 c8                	add    %ecx,%eax
f0113891:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113894:	74 4c                	je     f01138e2 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113896:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113899:	c1 e0 0a             	shl    $0xa,%eax
f011389c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011389f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01138a6:	99                   	cltd   
f01138a7:	f7 fb                	idiv   %ebx
f01138a9:	89 c1                	mov    %eax,%ecx
f01138ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01138ae:	c1 e0 0a             	shl    $0xa,%eax
f01138b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01138b4:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01138bb:	99                   	cltd   
f01138bc:	f7 fe                	idiv   %esi
f01138be:	01 c8                	add    %ecx,%eax
f01138c0:	83 ec 0c             	sub    $0xc,%esp
f01138c3:	50                   	push   %eax
f01138c4:	ff 75 c8             	pushl  -0x38(%ebp)
f01138c7:	68 7c 97 13 f0       	push   $0xf013977c
f01138cc:	68 c9 05 00 00       	push   $0x5c9
f01138d1:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01138d6:	e8 57 ca fe ff       	call   f0100332 <_warn>
f01138db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01138de:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01138e2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138e6:	74 04                	je     f01138ec <test_calculate_required_frames+0x23f>
f01138e8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138ec:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01138f0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01138f3:	89 d0                	mov    %edx,%eax
f01138f5:	01 c0                	add    %eax,%eax
f01138f7:	01 d0                	add    %edx,%eax
f01138f9:	01 c0                	add    %eax,%eax
f01138fb:	83 ec 04             	sub    $0x4,%esp
f01138fe:	50                   	push   %eax
f01138ff:	68 00 10 00 00       	push   $0x1000
f0113904:	ff 75 d8             	pushl  -0x28(%ebp)
f0113907:	e8 6d 46 ff ff       	call   f0107f79 <calculate_required_frames>
f011390c:	83 c4 10             	add    $0x10,%esp
f011390f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113912:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113916:	74 23                	je     f011393b <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113918:	83 ec 0c             	sub    $0xc,%esp
f011391b:	6a 03                	push   $0x3
f011391d:	ff 75 c8             	pushl  -0x38(%ebp)
f0113920:	68 7c 97 13 f0       	push   $0xf013977c
f0113925:	68 d5 05 00 00       	push   $0x5d5
f011392a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011392f:	e8 fe c9 fe ff       	call   f0100332 <_warn>
f0113934:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113937:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011393b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011393f:	74 04                	je     f0113945 <test_calculate_required_frames+0x298>
f0113941:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113945:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113949:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011394c:	89 c2                	mov    %eax,%edx
f011394e:	01 d2                	add    %edx,%edx
f0113950:	01 d0                	add    %edx,%eax
f0113952:	83 ec 04             	sub    $0x4,%esp
f0113955:	50                   	push   %eax
f0113956:	68 00 18 00 00       	push   $0x1800
f011395b:	ff 75 d8             	pushl  -0x28(%ebp)
f011395e:	e8 16 46 ff ff       	call   f0107f79 <calculate_required_frames>
f0113963:	83 c4 10             	add    $0x10,%esp
f0113966:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113969:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011396d:	74 23                	je     f0113992 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011396f:	83 ec 0c             	sub    $0xc,%esp
f0113972:	6a 03                	push   $0x3
f0113974:	ff 75 c8             	pushl  -0x38(%ebp)
f0113977:	68 7c 97 13 f0       	push   $0xf013977c
f011397c:	68 df 05 00 00       	push   $0x5df
f0113981:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113986:	e8 a7 c9 fe ff       	call   f0100332 <_warn>
f011398b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011398e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113992:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113996:	74 04                	je     f011399c <test_calculate_required_frames+0x2ef>
f0113998:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011399c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01139a0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01139a3:	89 d0                	mov    %edx,%eax
f01139a5:	c1 e0 02             	shl    $0x2,%eax
f01139a8:	01 d0                	add    %edx,%eax
f01139aa:	01 c0                	add    %eax,%eax
f01139ac:	83 ec 04             	sub    $0x4,%esp
f01139af:	50                   	push   %eax
f01139b0:	68 00 00 40 00       	push   $0x400000
f01139b5:	ff 75 d8             	pushl  -0x28(%ebp)
f01139b8:	e8 bc 45 ff ff       	call   f0107f79 <calculate_required_frames>
f01139bd:	83 c4 10             	add    $0x10,%esp
f01139c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01139c3:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01139ca:	74 26                	je     f01139f2 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01139cc:	83 ec 0c             	sub    $0xc,%esp
f01139cf:	68 03 0a 00 00       	push   $0xa03
f01139d4:	ff 75 c8             	pushl  -0x38(%ebp)
f01139d7:	68 7c 97 13 f0       	push   $0xf013977c
f01139dc:	68 e9 05 00 00       	push   $0x5e9
f01139e1:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01139e6:	e8 47 c9 fe ff       	call   f0100332 <_warn>
f01139eb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01139f2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01139f6:	74 04                	je     f01139fc <test_calculate_required_frames+0x34f>
f01139f8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113a00:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113a03:	01 c0                	add    %eax,%eax
f0113a05:	83 ec 04             	sub    $0x4,%esp
f0113a08:	50                   	push   %eax
f0113a09:	68 00 00 70 00       	push   $0x700000
f0113a0e:	ff 75 d8             	pushl  -0x28(%ebp)
f0113a11:	e8 63 45 ff ff       	call   f0107f79 <calculate_required_frames>
f0113a16:	83 c4 10             	add    $0x10,%esp
f0113a19:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0113a1c:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0113a23:	74 26                	je     f0113a4b <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0113a25:	83 ec 0c             	sub    $0xc,%esp
f0113a28:	68 02 02 00 00       	push   $0x202
f0113a2d:	ff 75 c8             	pushl  -0x38(%ebp)
f0113a30:	68 7c 97 13 f0       	push   $0xf013977c
f0113a35:	68 f5 05 00 00       	push   $0x5f5
f0113a3a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113a3f:	e8 ee c8 fe ff       	call   f0100332 <_warn>
f0113a44:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a47:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113a4b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113a4f:	74 04                	je     f0113a55 <test_calculate_required_frames+0x3a8>
f0113a51:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113a55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113a59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113a5c:	83 ec 04             	sub    $0x4,%esp
f0113a5f:	50                   	push   %eax
f0113a60:	68 ff ff 3f 00       	push   $0x3fffff
f0113a65:	ff 75 d8             	pushl  -0x28(%ebp)
f0113a68:	e8 0c 45 ff ff       	call   f0107f79 <calculate_required_frames>
f0113a6d:	83 c4 10             	add    $0x10,%esp
f0113a70:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0113a73:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0113a77:	74 23                	je     f0113a9c <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0113a79:	83 ec 0c             	sub    $0xc,%esp
f0113a7c:	6a 04                	push   $0x4
f0113a7e:	ff 75 c8             	pushl  -0x38(%ebp)
f0113a81:	68 7c 97 13 f0       	push   $0xf013977c
f0113a86:	68 ff 05 00 00       	push   $0x5ff
f0113a8b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113a90:	e8 9d c8 fe ff       	call   f0100332 <_warn>
f0113a95:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113a98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113a9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113aa0:	74 04                	je     f0113aa6 <test_calculate_required_frames+0x3f9>
f0113aa2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113aa6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113aaa:	83 ec 0c             	sub    $0xc,%esp
f0113aad:	68 cd 92 13 f0       	push   $0xf01392cd
f0113ab2:	e8 76 d1 fe ff       	call   f0100c2d <cprintf>
f0113ab7:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0113aba:	83 ec 0c             	sub    $0xc,%esp
f0113abd:	68 d4 97 13 f0       	push   $0xf01397d4
f0113ac2:	e8 66 d1 fe ff       	call   f0100c2d <cprintf>
f0113ac7:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113aca:	83 ec 04             	sub    $0x4,%esp
f0113acd:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113ad3:	50                   	push   %eax
f0113ad4:	68 86 86 13 f0       	push   $0xf0138686
f0113ad9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113adf:	50                   	push   %eax
f0113ae0:	e8 1e cb 01 00       	call   f0130603 <strcconcat>
f0113ae5:	83 c4 10             	add    $0x10,%esp
f0113ae8:	83 ec 0c             	sub    $0xc,%esp
f0113aeb:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113af1:	50                   	push   %eax
f0113af2:	e8 98 d1 fe ff       	call   f0100c8f <execute_command>
f0113af7:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113afa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113afd:	c1 e0 03             	shl    $0x3,%eax
f0113b00:	83 ec 04             	sub    $0x4,%esp
f0113b03:	50                   	push   %eax
f0113b04:	6a 00                	push   $0x0
f0113b06:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b09:	e8 6b 44 ff ff       	call   f0107f79 <calculate_required_frames>
f0113b0e:	83 c4 10             	add    $0x10,%esp
f0113b11:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113b14:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113b1b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b1e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113b21:	74 24                	je     f0113b47 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113b23:	83 ec 0c             	sub    $0xc,%esp
f0113b26:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113b29:	ff 75 c8             	pushl  -0x38(%ebp)
f0113b2c:	68 7c 97 13 f0       	push   $0xf013977c
f0113b31:	68 13 06 00 00       	push   $0x613
f0113b36:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113b3b:	e8 f2 c7 fe ff       	call   f0100332 <_warn>
f0113b40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b47:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b4b:	74 04                	je     f0113b51 <test_calculate_required_frames+0x4a4>
f0113b4d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b51:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0113b55:	83 ec 04             	sub    $0x4,%esp
f0113b58:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113b5e:	50                   	push   %eax
f0113b5f:	68 93 86 13 f0       	push   $0xf0138693
f0113b64:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113b6a:	50                   	push   %eax
f0113b6b:	e8 93 ca 01 00       	call   f0130603 <strcconcat>
f0113b70:	83 c4 10             	add    $0x10,%esp
f0113b73:	83 ec 0c             	sub    $0xc,%esp
f0113b76:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113b7c:	50                   	push   %eax
f0113b7d:	e8 0d d1 fe ff       	call   f0100c8f <execute_command>
f0113b82:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113b85:	83 ec 04             	sub    $0x4,%esp
f0113b88:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113b8e:	50                   	push   %eax
f0113b8f:	68 08 98 13 f0       	push   $0xf0139808
f0113b94:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113b9a:	50                   	push   %eax
f0113b9b:	e8 63 ca 01 00       	call   f0130603 <strcconcat>
f0113ba0:	83 c4 10             	add    $0x10,%esp
f0113ba3:	83 ec 0c             	sub    $0xc,%esp
f0113ba6:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113bac:	50                   	push   %eax
f0113bad:	e8 dd d0 fe ff       	call   f0100c8f <execute_command>
f0113bb2:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0113bb5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113bb8:	c1 e0 03             	shl    $0x3,%eax
f0113bbb:	83 ec 04             	sub    $0x4,%esp
f0113bbe:	50                   	push   %eax
f0113bbf:	6a 00                	push   $0x0
f0113bc1:	ff 75 d8             	pushl  -0x28(%ebp)
f0113bc4:	e8 b0 43 ff ff       	call   f0107f79 <calculate_required_frames>
f0113bc9:	83 c4 10             	add    $0x10,%esp
f0113bcc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0113bcf:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0113bd6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113bd9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113bdc:	74 24                	je     f0113c02 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113bde:	83 ec 0c             	sub    $0xc,%esp
f0113be1:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113be4:	ff 75 c8             	pushl  -0x38(%ebp)
f0113be7:	68 7c 97 13 f0       	push   $0xf013977c
f0113bec:	68 21 06 00 00       	push   $0x621
f0113bf1:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113bf6:	e8 37 c7 fe ff       	call   f0100332 <_warn>
f0113bfb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113bfe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c02:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c06:	74 04                	je     f0113c0c <test_calculate_required_frames+0x55f>
f0113c08:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c0c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113c10:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c13:	c1 e0 0a             	shl    $0xa,%eax
f0113c16:	83 ec 04             	sub    $0x4,%esp
f0113c19:	50                   	push   %eax
f0113c1a:	6a 00                	push   $0x0
f0113c1c:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c1f:	e8 55 43 ff ff       	call   f0107f79 <calculate_required_frames>
f0113c24:	83 c4 10             	add    $0x10,%esp
f0113c27:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0113c2a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c2d:	c1 e0 0a             	shl    $0xa,%eax
f0113c30:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113c33:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113c3a:	99                   	cltd   
f0113c3b:	f7 fb                	idiv   %ebx
f0113c3d:	89 c1                	mov    %eax,%ecx
f0113c3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113c42:	c1 e0 0a             	shl    $0xa,%eax
f0113c45:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113c48:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113c4f:	99                   	cltd   
f0113c50:	f7 fe                	idiv   %esi
f0113c52:	01 c8                	add    %ecx,%eax
f0113c54:	83 e8 05             	sub    $0x5,%eax
f0113c57:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0113c5a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113c5d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113c60:	74 24                	je     f0113c86 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113c62:	83 ec 0c             	sub    $0xc,%esp
f0113c65:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113c68:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c6b:	68 7c 97 13 f0       	push   $0xf013977c
f0113c70:	68 2c 06 00 00       	push   $0x62c
f0113c75:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113c7a:	e8 b3 c6 fe ff       	call   f0100332 <_warn>
f0113c7f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c82:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113c86:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c8a:	74 04                	je     f0113c90 <test_calculate_required_frames+0x5e3>
f0113c8c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113c90:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0113c94:	83 ec 04             	sub    $0x4,%esp
f0113c97:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113c9d:	50                   	push   %eax
f0113c9e:	68 14 98 13 f0       	push   $0xf0139814
f0113ca3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113ca9:	50                   	push   %eax
f0113caa:	e8 54 c9 01 00       	call   f0130603 <strcconcat>
f0113caf:	83 c4 10             	add    $0x10,%esp
f0113cb2:	83 ec 0c             	sub    $0xc,%esp
f0113cb5:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113cbb:	50                   	push   %eax
f0113cbc:	e8 ce cf fe ff       	call   f0100c8f <execute_command>
f0113cc1:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113cc4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113cc7:	89 c2                	mov    %eax,%edx
f0113cc9:	01 d2                	add    %edx,%edx
f0113ccb:	01 d0                	add    %edx,%eax
f0113ccd:	83 ec 04             	sub    $0x4,%esp
f0113cd0:	50                   	push   %eax
f0113cd1:	68 00 18 00 00       	push   $0x1800
f0113cd6:	ff 75 d8             	pushl  -0x28(%ebp)
f0113cd9:	e8 9b 42 ff ff       	call   f0107f79 <calculate_required_frames>
f0113cde:	83 c4 10             	add    $0x10,%esp
f0113ce1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113ce4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113ceb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113cee:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113cf1:	74 24                	je     f0113d17 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113cf3:	83 ec 0c             	sub    $0xc,%esp
f0113cf6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113cf9:	ff 75 c8             	pushl  -0x38(%ebp)
f0113cfc:	68 7c 97 13 f0       	push   $0xf013977c
f0113d01:	68 3b 06 00 00       	push   $0x63b
f0113d06:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113d0b:	e8 22 c6 fe ff       	call   f0100332 <_warn>
f0113d10:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d13:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d17:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d1b:	74 04                	je     f0113d21 <test_calculate_required_frames+0x674>
f0113d1d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d21:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0113d25:	83 ec 04             	sub    $0x4,%esp
f0113d28:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113d2e:	50                   	push   %eax
f0113d2f:	68 ec 88 13 f0       	push   $0xf01388ec
f0113d34:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113d3a:	50                   	push   %eax
f0113d3b:	e8 c3 c8 01 00       	call   f0130603 <strcconcat>
f0113d40:	83 c4 10             	add    $0x10,%esp
f0113d43:	83 ec 0c             	sub    $0xc,%esp
f0113d46:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113d4c:	50                   	push   %eax
f0113d4d:	e8 3d cf fe ff       	call   f0100c8f <execute_command>
f0113d52:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113d55:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113d58:	89 d0                	mov    %edx,%eax
f0113d5a:	c1 e0 02             	shl    $0x2,%eax
f0113d5d:	01 d0                	add    %edx,%eax
f0113d5f:	01 c0                	add    %eax,%eax
f0113d61:	83 ec 04             	sub    $0x4,%esp
f0113d64:	50                   	push   %eax
f0113d65:	68 00 00 40 00       	push   $0x400000
f0113d6a:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d6d:	e8 07 42 ff ff       	call   f0107f79 <calculate_required_frames>
f0113d72:	83 c4 10             	add    $0x10,%esp
f0113d75:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0113d78:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0113d7f:	74 26                	je     f0113da7 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113d81:	83 ec 0c             	sub    $0xc,%esp
f0113d84:	68 03 0a 00 00       	push   $0xa03
f0113d89:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d8c:	68 7c 97 13 f0       	push   $0xf013977c
f0113d91:	68 47 06 00 00       	push   $0x647
f0113d96:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113d9b:	e8 92 c5 fe ff       	call   f0100332 <_warn>
f0113da0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113da3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113da7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dab:	74 04                	je     f0113db1 <test_calculate_required_frames+0x704>
f0113dad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113db1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0113db5:	83 ec 04             	sub    $0x4,%esp
f0113db8:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113dbe:	50                   	push   %eax
f0113dbf:	68 f6 88 13 f0       	push   $0xf01388f6
f0113dc4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113dca:	50                   	push   %eax
f0113dcb:	e8 33 c8 01 00       	call   f0130603 <strcconcat>
f0113dd0:	83 c4 10             	add    $0x10,%esp
f0113dd3:	83 ec 0c             	sub    $0xc,%esp
f0113dd6:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113ddc:	50                   	push   %eax
f0113ddd:	e8 ad ce fe ff       	call   f0100c8f <execute_command>
f0113de2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0113de5:	83 ec 04             	sub    $0x4,%esp
f0113de8:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113dee:	50                   	push   %eax
f0113def:	68 1c 98 13 f0       	push   $0xf013981c
f0113df4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113dfa:	50                   	push   %eax
f0113dfb:	e8 03 c8 01 00       	call   f0130603 <strcconcat>
f0113e00:	83 c4 10             	add    $0x10,%esp
f0113e03:	83 ec 0c             	sub    $0xc,%esp
f0113e06:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113e0c:	50                   	push   %eax
f0113e0d:	e8 7d ce fe ff       	call   f0100c8f <execute_command>
f0113e12:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113e15:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113e18:	01 c0                	add    %eax,%eax
f0113e1a:	83 ec 04             	sub    $0x4,%esp
f0113e1d:	50                   	push   %eax
f0113e1e:	68 00 00 70 00       	push   $0x700000
f0113e23:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e26:	e8 4e 41 ff ff       	call   f0107f79 <calculate_required_frames>
f0113e2b:	83 c4 10             	add    $0x10,%esp
f0113e2e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0113e31:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0113e38:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e3b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113e3e:	74 24                	je     f0113e64 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113e40:	83 ec 0c             	sub    $0xc,%esp
f0113e43:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113e46:	ff 75 c8             	pushl  -0x38(%ebp)
f0113e49:	68 7c 97 13 f0       	push   $0xf013977c
f0113e4e:	68 57 06 00 00       	push   $0x657
f0113e53:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113e58:	e8 d5 c4 fe ff       	call   f0100332 <_warn>
f0113e5d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e60:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113e64:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e68:	74 04                	je     f0113e6e <test_calculate_required_frames+0x7c1>
f0113e6a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e6e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113e72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e75:	83 ec 04             	sub    $0x4,%esp
f0113e78:	50                   	push   %eax
f0113e79:	68 ff ff 3f 00       	push   $0x3fffff
f0113e7e:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e81:	e8 f3 40 ff ff       	call   f0107f79 <calculate_required_frames>
f0113e86:	83 c4 10             	add    $0x10,%esp
f0113e89:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0113e8c:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0113e93:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e96:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113e99:	74 24                	je     f0113ebf <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113e9b:	83 ec 0c             	sub    $0xc,%esp
f0113e9e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113ea1:	ff 75 c8             	pushl  -0x38(%ebp)
f0113ea4:	68 7c 97 13 f0       	push   $0xf013977c
f0113ea9:	68 62 06 00 00       	push   $0x662
f0113eae:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0113eb3:	e8 7a c4 fe ff       	call   f0100332 <_warn>
f0113eb8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ebb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113ebf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ec3:	74 04                	je     f0113ec9 <test_calculate_required_frames+0x81c>
f0113ec5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113ec9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0113ecd:	83 ec 0c             	sub    $0xc,%esp
f0113ed0:	68 a7 88 13 f0       	push   $0xf01388a7
f0113ed5:	e8 53 cd fe ff       	call   f0100c2d <cprintf>
f0113eda:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0113edd:	83 ec 08             	sub    $0x8,%esp
f0113ee0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113ee3:	68 28 98 13 f0       	push   $0xf0139828
f0113ee8:	e8 40 cd fe ff       	call   f0100c2d <cprintf>
f0113eed:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113ef0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113ef4:	75 10                	jne    f0113f06 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0113ef6:	83 ec 0c             	sub    $0xc,%esp
f0113ef9:	68 68 98 13 f0       	push   $0xf0139868
f0113efe:	e8 2a cd fe ff       	call   f0100c2d <cprintf>
f0113f03:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113f06:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0113f0b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0113f0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113f11:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113f14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113f19:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113f1c:	5b                   	pop    %ebx
f0113f1d:	5e                   	pop    %esi
f0113f1e:	5f                   	pop    %edi
f0113f1f:	5d                   	pop    %ebp
f0113f20:	c3                   	ret    

f0113f21 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0113f21:	55                   	push   %ebp
f0113f22:	89 e5                	mov    %esp,%ebp
f0113f24:	57                   	push   %edi
f0113f25:	56                   	push   %esi
f0113f26:	53                   	push   %ebx
f0113f27:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113f2d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113f30:	bb 1c 86 13 f0       	mov    $0xf013861c,%ebx
f0113f35:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113f3a:	89 c7                	mov    %eax,%edi
f0113f3c:	89 de                	mov    %ebx,%esi
f0113f3e:	89 d1                	mov    %edx,%ecx
f0113f40:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113f42:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113f45:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113f4a:	b0 00                	mov    $0x0,%al
f0113f4c:	89 d7                	mov    %edx,%edi
f0113f4e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113f50:	6a 00                	push   $0x0
f0113f52:	6a 0a                	push   $0xa
f0113f54:	6a 14                	push   $0x14
f0113f56:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113f59:	50                   	push   %eax
f0113f5a:	e8 ed 40 ff ff       	call   f010804c <env_create>
f0113f5f:	83 c4 10             	add    $0x10,%esp
f0113f62:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f65:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113f68:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113f6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113f6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113f71:	8b 40 60             	mov    0x60(%eax),%eax
f0113f74:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113f77:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113f7a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113f7d:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113f84:	75 70 20 
f0113f87:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113f8e:	00 00 00 
f0113f91:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113f94:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113f99:	b8 00 00 00 00       	mov    $0x0,%eax
f0113f9e:	89 d7                	mov    %edx,%edi
f0113fa0:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113fa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113fa5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113fa8:	83 ec 08             	sub    $0x8,%esp
f0113fab:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113fb1:	52                   	push   %edx
f0113fb2:	50                   	push   %eax
f0113fb3:	e8 53 c5 01 00       	call   f013050b <ltostr>
f0113fb8:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113fbb:	83 ec 04             	sub    $0x4,%esp
f0113fbe:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113fc4:	50                   	push   %eax
f0113fc5:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113fcb:	50                   	push   %eax
f0113fcc:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113fd2:	50                   	push   %eax
f0113fd3:	e8 2b c6 01 00       	call   f0130603 <strcconcat>
f0113fd8:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113fdb:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113fe2:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113fe9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0113ff0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0113ff4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0113ffb:	00 00 00 
	uint32 num_tables = 0;
f0113ffe:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114005:	00 00 00 
	ClearUserSpace(proc_directory);
f0114008:	83 ec 0c             	sub    $0xc,%esp
f011400b:	ff 75 d8             	pushl  -0x28(%ebp)
f011400e:	e8 34 11 00 00       	call   f0115147 <ClearUserSpace>
f0114013:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114016:	83 ec 0c             	sub    $0xc,%esp
f0114019:	68 48 97 13 f0       	push   $0xf0139748
f011401e:	e8 0a cc fe ff       	call   f0100c2d <cprintf>
f0114023:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114026:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114029:	c1 e0 03             	shl    $0x3,%eax
f011402c:	89 c2                	mov    %eax,%edx
f011402e:	83 ec 0c             	sub    $0xc,%esp
f0114031:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114037:	50                   	push   %eax
f0114038:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011403e:	50                   	push   %eax
f011403f:	52                   	push   %edx
f0114040:	6a 00                	push   $0x0
f0114042:	ff 75 d8             	pushl  -0x28(%ebp)
f0114045:	e8 15 3f ff ff       	call   f0107f5f <calculate_allocated_space>
f011404a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011404d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114053:	85 c0                	test   %eax,%eax
f0114055:	74 27                	je     f011407e <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114057:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011405d:	83 ec 0c             	sub    $0xc,%esp
f0114060:	6a 00                	push   $0x0
f0114062:	50                   	push   %eax
f0114063:	68 b4 98 13 f0       	push   $0xf01398b4
f0114068:	68 97 06 00 00       	push   $0x697
f011406d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114072:	e8 bb c2 fe ff       	call   f0100332 <_warn>
f0114077:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011407a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011407e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114084:	85 c0                	test   %eax,%eax
f0114086:	74 27                	je     f01140af <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114088:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011408e:	83 ec 0c             	sub    $0xc,%esp
f0114091:	6a 00                	push   $0x0
f0114093:	50                   	push   %eax
f0114094:	68 14 99 13 f0       	push   $0xf0139914
f0114099:	68 9c 06 00 00       	push   $0x69c
f011409e:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01140a3:	e8 8a c2 fe ff       	call   f0100332 <_warn>
f01140a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140b3:	74 04                	je     f01140b9 <test_calculate_allocated_space+0x198>
f01140b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01140bd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01140c4:	00 00 00 
		num_pages = 0;
f01140c7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01140ce:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01140d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01140d4:	c1 e0 02             	shl    $0x2,%eax
f01140d7:	89 c2                	mov    %eax,%edx
f01140d9:	83 ec 0c             	sub    $0xc,%esp
f01140dc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01140e2:	50                   	push   %eax
f01140e3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01140e9:	50                   	push   %eax
f01140ea:	52                   	push   %edx
f01140eb:	6a 00                	push   $0x0
f01140ed:	ff 75 d8             	pushl  -0x28(%ebp)
f01140f0:	e8 6a 3e ff ff       	call   f0107f5f <calculate_allocated_space>
f01140f5:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01140f8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01140fe:	85 c0                	test   %eax,%eax
f0114100:	74 27                	je     f0114129 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114102:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114108:	83 ec 0c             	sub    $0xc,%esp
f011410b:	6a 00                	push   $0x0
f011410d:	50                   	push   %eax
f011410e:	68 b4 98 13 f0       	push   $0xf01398b4
f0114113:	68 a8 06 00 00       	push   $0x6a8
f0114118:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011411d:	e8 10 c2 fe ff       	call   f0100332 <_warn>
f0114122:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114125:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114129:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011412f:	85 c0                	test   %eax,%eax
f0114131:	74 27                	je     f011415a <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114133:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114139:	83 ec 0c             	sub    $0xc,%esp
f011413c:	6a 00                	push   $0x0
f011413e:	50                   	push   %eax
f011413f:	68 14 99 13 f0       	push   $0xf0139914
f0114144:	68 ad 06 00 00       	push   $0x6ad
f0114149:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011414e:	e8 df c1 fe ff       	call   f0100332 <_warn>
f0114153:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114156:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011415a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011415e:	74 04                	je     f0114164 <test_calculate_allocated_space+0x243>
f0114160:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114164:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114168:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011416f:	00 00 00 
		num_pages = 0;
f0114172:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114179:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011417c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011417f:	c1 e0 0a             	shl    $0xa,%eax
f0114182:	89 c2                	mov    %eax,%edx
f0114184:	83 ec 0c             	sub    $0xc,%esp
f0114187:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011418d:	50                   	push   %eax
f011418e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114194:	50                   	push   %eax
f0114195:	52                   	push   %edx
f0114196:	6a 00                	push   $0x0
f0114198:	ff 75 d8             	pushl  -0x28(%ebp)
f011419b:	e8 bf 3d ff ff       	call   f0107f5f <calculate_allocated_space>
f01141a0:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01141a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141a9:	85 c0                	test   %eax,%eax
f01141ab:	74 27                	je     f01141d4 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01141ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01141b3:	83 ec 0c             	sub    $0xc,%esp
f01141b6:	6a 00                	push   $0x0
f01141b8:	50                   	push   %eax
f01141b9:	68 b4 98 13 f0       	push   $0xf01398b4
f01141be:	68 b9 06 00 00       	push   $0x6b9
f01141c3:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01141c8:	e8 65 c1 fe ff       	call   f0100332 <_warn>
f01141cd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141d0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01141d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01141da:	85 c0                	test   %eax,%eax
f01141dc:	74 27                	je     f0114205 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01141de:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01141e4:	83 ec 0c             	sub    $0xc,%esp
f01141e7:	6a 00                	push   $0x0
f01141e9:	50                   	push   %eax
f01141ea:	68 14 99 13 f0       	push   $0xf0139914
f01141ef:	68 be 06 00 00       	push   $0x6be
f01141f4:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01141f9:	e8 34 c1 fe ff       	call   f0100332 <_warn>
f01141fe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114201:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114205:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114209:	74 04                	je     f011420f <test_calculate_allocated_space+0x2ee>
f011420b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011420f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114213:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011421a:	00 00 00 
		num_pages = 0;
f011421d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114224:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114227:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011422a:	89 d0                	mov    %edx,%eax
f011422c:	01 c0                	add    %eax,%eax
f011422e:	01 d0                	add    %edx,%eax
f0114230:	01 c0                	add    %eax,%eax
f0114232:	05 00 10 00 00       	add    $0x1000,%eax
f0114237:	89 c2                	mov    %eax,%edx
f0114239:	83 ec 0c             	sub    $0xc,%esp
f011423c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114242:	50                   	push   %eax
f0114243:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114249:	50                   	push   %eax
f011424a:	52                   	push   %edx
f011424b:	68 00 10 00 00       	push   $0x1000
f0114250:	ff 75 d8             	pushl  -0x28(%ebp)
f0114253:	e8 07 3d ff ff       	call   f0107f5f <calculate_allocated_space>
f0114258:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011425b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114261:	85 c0                	test   %eax,%eax
f0114263:	74 27                	je     f011428c <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114265:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011426b:	83 ec 0c             	sub    $0xc,%esp
f011426e:	6a 00                	push   $0x0
f0114270:	50                   	push   %eax
f0114271:	68 b4 98 13 f0       	push   $0xf01398b4
f0114276:	68 cb 06 00 00       	push   $0x6cb
f011427b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114280:	e8 ad c0 fe ff       	call   f0100332 <_warn>
f0114285:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114288:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011428c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114292:	85 c0                	test   %eax,%eax
f0114294:	74 27                	je     f01142bd <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114296:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011429c:	83 ec 0c             	sub    $0xc,%esp
f011429f:	6a 00                	push   $0x0
f01142a1:	50                   	push   %eax
f01142a2:	68 14 99 13 f0       	push   $0xf0139914
f01142a7:	68 d0 06 00 00       	push   $0x6d0
f01142ac:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01142b1:	e8 7c c0 fe ff       	call   f0100332 <_warn>
f01142b6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01142b9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01142bd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142c1:	74 04                	je     f01142c7 <test_calculate_allocated_space+0x3a6>
f01142c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01142c7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01142cb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01142d2:	00 00 00 
		num_pages = 0;
f01142d5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01142dc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01142df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01142e2:	89 c2                	mov    %eax,%edx
f01142e4:	01 d2                	add    %edx,%edx
f01142e6:	01 d0                	add    %edx,%eax
f01142e8:	05 00 18 00 00       	add    $0x1800,%eax
f01142ed:	89 c2                	mov    %eax,%edx
f01142ef:	83 ec 0c             	sub    $0xc,%esp
f01142f2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01142f8:	50                   	push   %eax
f01142f9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01142ff:	50                   	push   %eax
f0114300:	52                   	push   %edx
f0114301:	68 00 18 00 00       	push   $0x1800
f0114306:	ff 75 d8             	pushl  -0x28(%ebp)
f0114309:	e8 51 3c ff ff       	call   f0107f5f <calculate_allocated_space>
f011430e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114311:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114317:	85 c0                	test   %eax,%eax
f0114319:	74 27                	je     f0114342 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011431b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114321:	83 ec 0c             	sub    $0xc,%esp
f0114324:	6a 00                	push   $0x0
f0114326:	50                   	push   %eax
f0114327:	68 b4 98 13 f0       	push   $0xf01398b4
f011432c:	68 dc 06 00 00       	push   $0x6dc
f0114331:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114336:	e8 f7 bf fe ff       	call   f0100332 <_warn>
f011433b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011433e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114342:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114348:	85 c0                	test   %eax,%eax
f011434a:	74 27                	je     f0114373 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011434c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114352:	83 ec 0c             	sub    $0xc,%esp
f0114355:	6a 00                	push   $0x0
f0114357:	50                   	push   %eax
f0114358:	68 14 99 13 f0       	push   $0xf0139914
f011435d:	68 e1 06 00 00       	push   $0x6e1
f0114362:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114367:	e8 c6 bf fe ff       	call   f0100332 <_warn>
f011436c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011436f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114373:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114377:	74 04                	je     f011437d <test_calculate_allocated_space+0x45c>
f0114379:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011437d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0114381:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114388:	00 00 00 
		num_pages = 0;
f011438b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114392:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114395:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114398:	89 d0                	mov    %edx,%eax
f011439a:	c1 e0 02             	shl    $0x2,%eax
f011439d:	01 d0                	add    %edx,%eax
f011439f:	01 c0                	add    %eax,%eax
f01143a1:	05 00 00 40 00       	add    $0x400000,%eax
f01143a6:	89 c2                	mov    %eax,%edx
f01143a8:	83 ec 0c             	sub    $0xc,%esp
f01143ab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01143b1:	50                   	push   %eax
f01143b2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01143b8:	50                   	push   %eax
f01143b9:	52                   	push   %edx
f01143ba:	68 00 00 40 00       	push   $0x400000
f01143bf:	ff 75 d8             	pushl  -0x28(%ebp)
f01143c2:	e8 98 3b ff ff       	call   f0107f5f <calculate_allocated_space>
f01143c7:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01143ca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01143d0:	85 c0                	test   %eax,%eax
f01143d2:	74 27                	je     f01143fb <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01143d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01143da:	83 ec 0c             	sub    $0xc,%esp
f01143dd:	6a 00                	push   $0x0
f01143df:	50                   	push   %eax
f01143e0:	68 b4 98 13 f0       	push   $0xf01398b4
f01143e5:	68 ed 06 00 00       	push   $0x6ed
f01143ea:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01143ef:	e8 3e bf fe ff       	call   f0100332 <_warn>
f01143f4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143f7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01143fb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114401:	85 c0                	test   %eax,%eax
f0114403:	74 27                	je     f011442c <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114405:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011440b:	83 ec 0c             	sub    $0xc,%esp
f011440e:	6a 00                	push   $0x0
f0114410:	50                   	push   %eax
f0114411:	68 14 99 13 f0       	push   $0xf0139914
f0114416:	68 f2 06 00 00       	push   $0x6f2
f011441b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114420:	e8 0d bf fe ff       	call   f0100332 <_warn>
f0114425:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114428:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011442c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114430:	74 04                	je     f0114436 <test_calculate_allocated_space+0x515>
f0114432:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114436:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011443a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114441:	00 00 00 
		num_pages = 0;
f0114444:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011444b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011444e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114451:	05 00 00 38 00       	add    $0x380000,%eax
f0114456:	01 c0                	add    %eax,%eax
f0114458:	89 c2                	mov    %eax,%edx
f011445a:	83 ec 0c             	sub    $0xc,%esp
f011445d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114463:	50                   	push   %eax
f0114464:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011446a:	50                   	push   %eax
f011446b:	52                   	push   %edx
f011446c:	68 00 00 70 00       	push   $0x700000
f0114471:	ff 75 d8             	pushl  -0x28(%ebp)
f0114474:	e8 e6 3a ff ff       	call   f0107f5f <calculate_allocated_space>
f0114479:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011447c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114482:	85 c0                	test   %eax,%eax
f0114484:	74 27                	je     f01144ad <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114486:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011448c:	83 ec 0c             	sub    $0xc,%esp
f011448f:	6a 00                	push   $0x0
f0114491:	50                   	push   %eax
f0114492:	68 b4 98 13 f0       	push   $0xf01398b4
f0114497:	68 ff 06 00 00       	push   $0x6ff
f011449c:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01144a1:	e8 8c be fe ff       	call   f0100332 <_warn>
f01144a6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144a9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01144ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144b3:	85 c0                	test   %eax,%eax
f01144b5:	74 27                	je     f01144de <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01144b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01144bd:	83 ec 0c             	sub    $0xc,%esp
f01144c0:	6a 00                	push   $0x0
f01144c2:	50                   	push   %eax
f01144c3:	68 14 99 13 f0       	push   $0xf0139914
f01144c8:	68 04 07 00 00       	push   $0x704
f01144cd:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01144d2:	e8 5b be fe ff       	call   f0100332 <_warn>
f01144d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01144de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144e2:	74 04                	je     f01144e8 <test_calculate_allocated_space+0x5c7>
f01144e4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01144e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f01144ec:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01144f3:	00 00 00 
		num_pages = 0;
f01144f6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01144fd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114500:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114503:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114508:	89 c2                	mov    %eax,%edx
f011450a:	83 ec 0c             	sub    $0xc,%esp
f011450d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114513:	50                   	push   %eax
f0114514:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011451a:	50                   	push   %eax
f011451b:	52                   	push   %edx
f011451c:	68 ff ff 3f 00       	push   $0x3fffff
f0114521:	ff 75 d8             	pushl  -0x28(%ebp)
f0114524:	e8 36 3a ff ff       	call   f0107f5f <calculate_allocated_space>
f0114529:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011452c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114532:	85 c0                	test   %eax,%eax
f0114534:	74 27                	je     f011455d <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114536:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011453c:	83 ec 0c             	sub    $0xc,%esp
f011453f:	6a 00                	push   $0x0
f0114541:	50                   	push   %eax
f0114542:	68 b4 98 13 f0       	push   $0xf01398b4
f0114547:	68 10 07 00 00       	push   $0x710
f011454c:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114551:	e8 dc bd fe ff       	call   f0100332 <_warn>
f0114556:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114559:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011455d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114563:	85 c0                	test   %eax,%eax
f0114565:	74 27                	je     f011458e <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114567:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011456d:	83 ec 0c             	sub    $0xc,%esp
f0114570:	6a 00                	push   $0x0
f0114572:	50                   	push   %eax
f0114573:	68 14 99 13 f0       	push   $0xf0139914
f0114578:	68 15 07 00 00       	push   $0x715
f011457d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114582:	e8 ab bd fe ff       	call   f0100332 <_warn>
f0114587:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011458a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011458e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114592:	74 04                	je     f0114598 <test_calculate_allocated_space+0x677>
f0114594:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114598:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011459c:	83 ec 0c             	sub    $0xc,%esp
f011459f:	68 cd 92 13 f0       	push   $0xf01392cd
f01145a4:	e8 84 c6 fe ff       	call   f0100c2d <cprintf>
f01145a9:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01145ac:	83 ec 0c             	sub    $0xc,%esp
f01145af:	68 d4 97 13 f0       	push   $0xf01397d4
f01145b4:	e8 74 c6 fe ff       	call   f0100c2d <cprintf>
f01145b9:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01145bc:	83 ec 04             	sub    $0x4,%esp
f01145bf:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01145c5:	50                   	push   %eax
f01145c6:	68 86 86 13 f0       	push   $0xf0138686
f01145cb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01145d1:	50                   	push   %eax
f01145d2:	e8 2c c0 01 00       	call   f0130603 <strcconcat>
f01145d7:	83 c4 10             	add    $0x10,%esp
f01145da:	83 ec 0c             	sub    $0xc,%esp
f01145dd:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01145e3:	50                   	push   %eax
f01145e4:	e8 a6 c6 fe ff       	call   f0100c8f <execute_command>
f01145e9:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01145ec:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01145f3:	00 00 00 
		num_pages = 0;
f01145f6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01145fd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114600:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114603:	c1 e0 03             	shl    $0x3,%eax
f0114606:	89 c2                	mov    %eax,%edx
f0114608:	83 ec 0c             	sub    $0xc,%esp
f011460b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114611:	50                   	push   %eax
f0114612:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114618:	50                   	push   %eax
f0114619:	52                   	push   %edx
f011461a:	6a 00                	push   $0x0
f011461c:	ff 75 d8             	pushl  -0x28(%ebp)
f011461f:	e8 3b 39 ff ff       	call   f0107f5f <calculate_allocated_space>
f0114624:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114627:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011462e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114635:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011463b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011463e:	74 28                	je     f0114668 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114640:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114646:	83 ec 0c             	sub    $0xc,%esp
f0114649:	ff 75 c8             	pushl  -0x38(%ebp)
f011464c:	50                   	push   %eax
f011464d:	68 b4 98 13 f0       	push   $0xf01398b4
f0114652:	68 2c 07 00 00       	push   $0x72c
f0114657:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011465c:	e8 d1 bc fe ff       	call   f0100332 <_warn>
f0114661:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114664:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114668:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011466e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114671:	74 28                	je     f011469b <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114673:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114679:	83 ec 0c             	sub    $0xc,%esp
f011467c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011467f:	50                   	push   %eax
f0114680:	68 14 99 13 f0       	push   $0xf0139914
f0114685:	68 31 07 00 00       	push   $0x731
f011468a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011468f:	e8 9e bc fe ff       	call   f0100332 <_warn>
f0114694:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114697:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011469b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011469f:	74 04                	je     f01146a5 <test_calculate_allocated_space+0x784>
f01146a1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01146a9:	83 ec 04             	sub    $0x4,%esp
f01146ac:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01146b2:	50                   	push   %eax
f01146b3:	68 93 86 13 f0       	push   $0xf0138693
f01146b8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01146be:	50                   	push   %eax
f01146bf:	e8 3f bf 01 00       	call   f0130603 <strcconcat>
f01146c4:	83 c4 10             	add    $0x10,%esp
f01146c7:	83 ec 0c             	sub    $0xc,%esp
f01146ca:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01146d0:	50                   	push   %eax
f01146d1:	e8 b9 c5 fe ff       	call   f0100c8f <execute_command>
f01146d6:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01146d9:	83 ec 04             	sub    $0x4,%esp
f01146dc:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01146e2:	50                   	push   %eax
f01146e3:	68 08 98 13 f0       	push   $0xf0139808
f01146e8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01146ee:	50                   	push   %eax
f01146ef:	e8 0f bf 01 00       	call   f0130603 <strcconcat>
f01146f4:	83 c4 10             	add    $0x10,%esp
f01146f7:	83 ec 0c             	sub    $0xc,%esp
f01146fa:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114700:	50                   	push   %eax
f0114701:	e8 89 c5 fe ff       	call   f0100c8f <execute_command>
f0114706:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0114709:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114710:	00 00 00 
		num_pages = 0;
f0114713:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011471a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011471d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114720:	c1 e0 03             	shl    $0x3,%eax
f0114723:	89 c2                	mov    %eax,%edx
f0114725:	83 ec 0c             	sub    $0xc,%esp
f0114728:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011472e:	50                   	push   %eax
f011472f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114735:	50                   	push   %eax
f0114736:	52                   	push   %edx
f0114737:	6a 00                	push   $0x0
f0114739:	ff 75 d8             	pushl  -0x28(%ebp)
f011473c:	e8 1e 38 ff ff       	call   f0107f5f <calculate_allocated_space>
f0114741:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114744:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011474b:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114752:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114758:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011475b:	74 28                	je     f0114785 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011475d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114763:	83 ec 0c             	sub    $0xc,%esp
f0114766:	ff 75 c8             	pushl  -0x38(%ebp)
f0114769:	50                   	push   %eax
f011476a:	68 b4 98 13 f0       	push   $0xf01398b4
f011476f:	68 42 07 00 00       	push   $0x742
f0114774:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114779:	e8 b4 bb fe ff       	call   f0100332 <_warn>
f011477e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114781:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114785:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011478b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011478e:	74 28                	je     f01147b8 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114790:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114796:	83 ec 0c             	sub    $0xc,%esp
f0114799:	ff 75 c4             	pushl  -0x3c(%ebp)
f011479c:	50                   	push   %eax
f011479d:	68 14 99 13 f0       	push   $0xf0139914
f01147a2:	68 47 07 00 00       	push   $0x747
f01147a7:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01147ac:	e8 81 bb fe ff       	call   f0100332 <_warn>
f01147b1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147b4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147b8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147bc:	74 04                	je     f01147c2 <test_calculate_allocated_space+0x8a1>
f01147be:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147c2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01147c6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01147cd:	00 00 00 
		num_pages = 0;
f01147d0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01147d7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01147da:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01147dd:	c1 e0 0a             	shl    $0xa,%eax
f01147e0:	89 c2                	mov    %eax,%edx
f01147e2:	83 ec 0c             	sub    $0xc,%esp
f01147e5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01147eb:	50                   	push   %eax
f01147ec:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01147f2:	50                   	push   %eax
f01147f3:	52                   	push   %edx
f01147f4:	6a 00                	push   $0x0
f01147f6:	ff 75 d8             	pushl  -0x28(%ebp)
f01147f9:	e8 61 37 ff ff       	call   f0107f5f <calculate_allocated_space>
f01147fe:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114801:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0114808:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011480f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114815:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114818:	74 28                	je     f0114842 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011481a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114820:	83 ec 0c             	sub    $0xc,%esp
f0114823:	ff 75 c8             	pushl  -0x38(%ebp)
f0114826:	50                   	push   %eax
f0114827:	68 b4 98 13 f0       	push   $0xf01398b4
f011482c:	68 55 07 00 00       	push   $0x755
f0114831:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114836:	e8 f7 ba fe ff       	call   f0100332 <_warn>
f011483b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011483e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114842:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114848:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011484b:	74 28                	je     f0114875 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011484d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114853:	83 ec 0c             	sub    $0xc,%esp
f0114856:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114859:	50                   	push   %eax
f011485a:	68 14 99 13 f0       	push   $0xf0139914
f011485f:	68 5a 07 00 00       	push   $0x75a
f0114864:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114869:	e8 c4 ba fe ff       	call   f0100332 <_warn>
f011486e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114871:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114875:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114879:	74 04                	je     f011487f <test_calculate_allocated_space+0x95e>
f011487b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011487f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114883:	83 ec 04             	sub    $0x4,%esp
f0114886:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011488c:	50                   	push   %eax
f011488d:	68 14 98 13 f0       	push   $0xf0139814
f0114892:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114898:	50                   	push   %eax
f0114899:	e8 65 bd 01 00       	call   f0130603 <strcconcat>
f011489e:	83 c4 10             	add    $0x10,%esp
f01148a1:	83 ec 0c             	sub    $0xc,%esp
f01148a4:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01148aa:	50                   	push   %eax
f01148ab:	e8 df c3 fe ff       	call   f0100c8f <execute_command>
f01148b0:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01148b3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01148ba:	00 00 00 
		num_pages = 0;
f01148bd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01148c4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01148c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148ca:	89 c2                	mov    %eax,%edx
f01148cc:	01 d2                	add    %edx,%edx
f01148ce:	01 d0                	add    %edx,%eax
f01148d0:	05 00 18 00 00       	add    $0x1800,%eax
f01148d5:	89 c2                	mov    %eax,%edx
f01148d7:	83 ec 0c             	sub    $0xc,%esp
f01148da:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01148e0:	50                   	push   %eax
f01148e1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01148e7:	50                   	push   %eax
f01148e8:	52                   	push   %edx
f01148e9:	68 00 18 00 00       	push   $0x1800
f01148ee:	ff 75 d8             	pushl  -0x28(%ebp)
f01148f1:	e8 69 36 ff ff       	call   f0107f5f <calculate_allocated_space>
f01148f6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01148f9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114900:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114907:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011490d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114910:	74 28                	je     f011493a <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114912:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114918:	83 ec 0c             	sub    $0xc,%esp
f011491b:	ff 75 c8             	pushl  -0x38(%ebp)
f011491e:	50                   	push   %eax
f011491f:	68 b4 98 13 f0       	push   $0xf01398b4
f0114924:	68 6b 07 00 00       	push   $0x76b
f0114929:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011492e:	e8 ff b9 fe ff       	call   f0100332 <_warn>
f0114933:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114936:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011493a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114940:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114943:	74 28                	je     f011496d <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114945:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011494b:	83 ec 0c             	sub    $0xc,%esp
f011494e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114951:	50                   	push   %eax
f0114952:	68 14 99 13 f0       	push   $0xf0139914
f0114957:	68 70 07 00 00       	push   $0x770
f011495c:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114961:	e8 cc b9 fe ff       	call   f0100332 <_warn>
f0114966:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114969:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011496d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114971:	74 04                	je     f0114977 <test_calculate_allocated_space+0xa56>
f0114973:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114977:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011497b:	83 ec 04             	sub    $0x4,%esp
f011497e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114984:	50                   	push   %eax
f0114985:	68 ec 88 13 f0       	push   $0xf01388ec
f011498a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114990:	50                   	push   %eax
f0114991:	e8 6d bc 01 00       	call   f0130603 <strcconcat>
f0114996:	83 c4 10             	add    $0x10,%esp
f0114999:	83 ec 0c             	sub    $0xc,%esp
f011499c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01149a2:	50                   	push   %eax
f01149a3:	e8 e7 c2 fe ff       	call   f0100c8f <execute_command>
f01149a8:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01149ab:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01149b2:	00 00 00 
		num_pages = 0;
f01149b5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01149bc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01149bf:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01149c2:	89 d0                	mov    %edx,%eax
f01149c4:	c1 e0 02             	shl    $0x2,%eax
f01149c7:	01 d0                	add    %edx,%eax
f01149c9:	01 c0                	add    %eax,%eax
f01149cb:	05 00 00 40 00       	add    $0x400000,%eax
f01149d0:	89 c2                	mov    %eax,%edx
f01149d2:	83 ec 0c             	sub    $0xc,%esp
f01149d5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01149db:	50                   	push   %eax
f01149dc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01149e2:	50                   	push   %eax
f01149e3:	52                   	push   %edx
f01149e4:	68 00 00 40 00       	push   $0x400000
f01149e9:	ff 75 d8             	pushl  -0x28(%ebp)
f01149ec:	e8 6e 35 ff ff       	call   f0107f5f <calculate_allocated_space>
f01149f1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01149f4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01149fb:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114a02:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a08:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114a0b:	74 28                	je     f0114a35 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114a0d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a13:	83 ec 0c             	sub    $0xc,%esp
f0114a16:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a19:	50                   	push   %eax
f0114a1a:	68 b4 98 13 f0       	push   $0xf01398b4
f0114a1f:	68 80 07 00 00       	push   $0x780
f0114a24:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114a29:	e8 04 b9 fe ff       	call   f0100332 <_warn>
f0114a2e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a31:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114a35:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a3b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a3e:	74 28                	je     f0114a68 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114a40:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114a46:	83 ec 0c             	sub    $0xc,%esp
f0114a49:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a4c:	50                   	push   %eax
f0114a4d:	68 14 99 13 f0       	push   $0xf0139914
f0114a52:	68 85 07 00 00       	push   $0x785
f0114a57:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114a5c:	e8 d1 b8 fe ff       	call   f0100332 <_warn>
f0114a61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a6c:	74 04                	je     f0114a72 <test_calculate_allocated_space+0xb51>
f0114a6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114a76:	83 ec 04             	sub    $0x4,%esp
f0114a79:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114a7f:	50                   	push   %eax
f0114a80:	68 f6 88 13 f0       	push   $0xf01388f6
f0114a85:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a8b:	50                   	push   %eax
f0114a8c:	e8 72 bb 01 00       	call   f0130603 <strcconcat>
f0114a91:	83 c4 10             	add    $0x10,%esp
f0114a94:	83 ec 0c             	sub    $0xc,%esp
f0114a97:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114a9d:	50                   	push   %eax
f0114a9e:	e8 ec c1 fe ff       	call   f0100c8f <execute_command>
f0114aa3:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114aa6:	83 ec 04             	sub    $0x4,%esp
f0114aa9:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114aaf:	50                   	push   %eax
f0114ab0:	68 1c 98 13 f0       	push   $0xf013981c
f0114ab5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114abb:	50                   	push   %eax
f0114abc:	e8 42 bb 01 00       	call   f0130603 <strcconcat>
f0114ac1:	83 c4 10             	add    $0x10,%esp
f0114ac4:	83 ec 0c             	sub    $0xc,%esp
f0114ac7:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114acd:	50                   	push   %eax
f0114ace:	e8 bc c1 fe ff       	call   f0100c8f <execute_command>
f0114ad3:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0114ad6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114add:	00 00 00 
		num_pages = 0;
f0114ae0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ae7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114aea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114aed:	05 00 00 38 00       	add    $0x380000,%eax
f0114af2:	01 c0                	add    %eax,%eax
f0114af4:	89 c2                	mov    %eax,%edx
f0114af6:	83 ec 0c             	sub    $0xc,%esp
f0114af9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114aff:	50                   	push   %eax
f0114b00:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b06:	50                   	push   %eax
f0114b07:	52                   	push   %edx
f0114b08:	68 00 00 70 00       	push   $0x700000
f0114b0d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b10:	e8 4a 34 ff ff       	call   f0107f5f <calculate_allocated_space>
f0114b15:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114b18:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0114b1f:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114b26:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b2c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114b2f:	74 28                	je     f0114b59 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114b31:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b37:	83 ec 0c             	sub    $0xc,%esp
f0114b3a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b3d:	50                   	push   %eax
f0114b3e:	68 b4 98 13 f0       	push   $0xf01398b4
f0114b43:	68 97 07 00 00       	push   $0x797
f0114b48:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114b4d:	e8 e0 b7 fe ff       	call   f0100332 <_warn>
f0114b52:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b55:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114b59:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b5f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b62:	74 28                	je     f0114b8c <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114b64:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b6a:	83 ec 0c             	sub    $0xc,%esp
f0114b6d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114b70:	50                   	push   %eax
f0114b71:	68 14 99 13 f0       	push   $0xf0139914
f0114b76:	68 9c 07 00 00       	push   $0x79c
f0114b7b:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114b80:	e8 ad b7 fe ff       	call   f0100332 <_warn>
f0114b85:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b88:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114b8c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b90:	74 04                	je     f0114b96 <test_calculate_allocated_space+0xc75>
f0114b92:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114b96:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0114b9a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ba1:	00 00 00 
		num_pages = 0;
f0114ba4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bab:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114bae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114bb1:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114bb6:	89 c2                	mov    %eax,%edx
f0114bb8:	83 ec 0c             	sub    $0xc,%esp
f0114bbb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114bc1:	50                   	push   %eax
f0114bc2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114bc8:	50                   	push   %eax
f0114bc9:	52                   	push   %edx
f0114bca:	68 ff ff 3f 00       	push   $0x3fffff
f0114bcf:	ff 75 d8             	pushl  -0x28(%ebp)
f0114bd2:	e8 88 33 ff ff       	call   f0107f5f <calculate_allocated_space>
f0114bd7:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114bda:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0114be1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114be8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114bee:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114bf1:	74 28                	je     f0114c1b <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114bf3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114bf9:	83 ec 0c             	sub    $0xc,%esp
f0114bfc:	ff 75 c8             	pushl  -0x38(%ebp)
f0114bff:	50                   	push   %eax
f0114c00:	68 b4 98 13 f0       	push   $0xf01398b4
f0114c05:	68 aa 07 00 00       	push   $0x7aa
f0114c0a:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114c0f:	e8 1e b7 fe ff       	call   f0100332 <_warn>
f0114c14:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c17:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114c1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c21:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c24:	74 28                	je     f0114c4e <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114c26:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c2c:	83 ec 0c             	sub    $0xc,%esp
f0114c2f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c32:	50                   	push   %eax
f0114c33:	68 14 99 13 f0       	push   $0xf0139914
f0114c38:	68 af 07 00 00       	push   $0x7af
f0114c3d:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114c42:	e8 eb b6 fe ff       	call   f0100332 <_warn>
f0114c47:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114c4e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c52:	74 04                	je     f0114c58 <test_calculate_allocated_space+0xd37>
f0114c54:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c58:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114c5c:	83 ec 0c             	sub    $0xc,%esp
f0114c5f:	68 a7 88 13 f0       	push   $0xf01388a7
f0114c64:	e8 c4 bf fe ff       	call   f0100c2d <cprintf>
f0114c69:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0114c6c:	83 ec 08             	sub    $0x8,%esp
f0114c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114c72:	68 70 99 13 f0       	push   $0xf0139970
f0114c77:	e8 b1 bf fe ff       	call   f0100c2d <cprintf>
f0114c7c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114c7f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114c83:	75 10                	jne    f0114c95 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0114c85:	83 ec 0c             	sub    $0xc,%esp
f0114c88:	68 b0 99 13 f0       	push   $0xf01399b0
f0114c8d:	e8 9b bf fe ff       	call   f0100c2d <cprintf>
f0114c92:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114c95:	a1 08 75 6e f0       	mov    0xf06e7508,%eax
f0114c9a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114c9d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114ca0:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114ca8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114cab:	5b                   	pop    %ebx
f0114cac:	5e                   	pop    %esi
f0114cad:	5f                   	pop    %edi
f0114cae:	5d                   	pop    %ebp
f0114caf:	c3                   	ret    

f0114cb0 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0114cb0:	55                   	push   %ebp
f0114cb1:	89 e5                	mov    %esp,%ebp
f0114cb3:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114cb6:	8b 45 10             	mov    0x10(%ebp),%eax
f0114cb9:	ba 01 00 00 00       	mov    $0x1,%edx
f0114cbe:	88 c1                	mov    %al,%cl
f0114cc0:	d3 e2                	shl    %cl,%edx
f0114cc2:	89 d0                	mov    %edx,%eax
f0114cc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114cca:	c1 e8 16             	shr    $0x16,%eax
f0114ccd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0114cd7:	01 d0                	add    %edx,%eax
f0114cd9:	8b 00                	mov    (%eax),%eax
f0114cdb:	83 e0 01             	and    $0x1,%eax
f0114cde:	85 c0                	test   %eax,%eax
f0114ce0:	75 07                	jne    f0114ce9 <CB+0x39>
f0114ce2:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ce7:	eb 76                	jmp    f0114d5f <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114cec:	c1 e8 16             	shr    $0x16,%eax
f0114cef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114cf6:	8b 45 08             	mov    0x8(%ebp),%eax
f0114cf9:	01 d0                	add    %edx,%eax
f0114cfb:	8b 00                	mov    (%eax),%eax
f0114cfd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114d02:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114d05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114d08:	c1 e8 0c             	shr    $0xc,%eax
f0114d0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114d0e:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114d13:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114d16:	72 17                	jb     f0114d2f <CB+0x7f>
f0114d18:	ff 75 f0             	pushl  -0x10(%ebp)
f0114d1b:	68 fc 99 13 f0       	push   $0xf01399fc
f0114d20:	68 ca 07 00 00       	push   $0x7ca
f0114d25:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114d2a:	e8 77 b4 fe ff       	call   f01001a6 <_panic>
f0114d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114d32:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114d37:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0114d3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114d3d:	c1 e8 0c             	shr    $0xc,%eax
f0114d40:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114d45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114d4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114d4f:	01 d0                	add    %edx,%eax
f0114d51:	8b 00                	mov    (%eax),%eax
f0114d53:	23 45 f4             	and    -0xc(%ebp),%eax
f0114d56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114d59:	0f 94 c0             	sete   %al
f0114d5c:	0f b6 c0             	movzbl %al,%eax
}
f0114d5f:	c9                   	leave  
f0114d60:	c3                   	ret    

f0114d61 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0114d61:	55                   	push   %ebp
f0114d62:	89 e5                	mov    %esp,%ebp
f0114d64:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114d67:	8b 45 10             	mov    0x10(%ebp),%eax
f0114d6a:	ba 01 00 00 00       	mov    $0x1,%edx
f0114d6f:	88 c1                	mov    %al,%cl
f0114d71:	d3 e2                	shl    %cl,%edx
f0114d73:	89 d0                	mov    %edx,%eax
f0114d75:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114d78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114d7b:	c1 e8 16             	shr    $0x16,%eax
f0114d7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114d85:	8b 45 08             	mov    0x8(%ebp),%eax
f0114d88:	01 d0                	add    %edx,%eax
f0114d8a:	8b 00                	mov    (%eax),%eax
f0114d8c:	83 e0 01             	and    $0x1,%eax
f0114d8f:	85 c0                	test   %eax,%eax
f0114d91:	75 0a                	jne    f0114d9d <SB+0x3c>
f0114d93:	b8 00 00 00 00       	mov    $0x0,%eax
f0114d98:	e9 cd 00 00 00       	jmp    f0114e6a <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114d9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114da0:	c1 e8 16             	shr    $0x16,%eax
f0114da3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0114dad:	01 d0                	add    %edx,%eax
f0114daf:	8b 00                	mov    (%eax),%eax
f0114db1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114dbc:	c1 e8 0c             	shr    $0xc,%eax
f0114dbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114dc2:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114dc7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114dca:	72 17                	jb     f0114de3 <SB+0x82>
f0114dcc:	ff 75 f0             	pushl  -0x10(%ebp)
f0114dcf:	68 fc 99 13 f0       	push   $0xf01399fc
f0114dd4:	68 d2 07 00 00       	push   $0x7d2
f0114dd9:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114dde:	e8 c3 b3 fe ff       	call   f01001a6 <_panic>
f0114de3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114de6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114deb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0114dee:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0114df2:	74 3c                	je     f0114e30 <SB+0xcf>
f0114df4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114df7:	c1 e8 0c             	shr    $0xc,%eax
f0114dfa:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114dff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114e06:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e09:	01 d0                	add    %edx,%eax
f0114e0b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0114e0e:	c1 ea 0c             	shr    $0xc,%edx
f0114e11:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0114e17:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0114e1e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0114e21:	01 ca                	add    %ecx,%edx
f0114e23:	8b 12                	mov    (%edx),%edx
f0114e25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114e28:	f7 d1                	not    %ecx
f0114e2a:	21 ca                	and    %ecx,%edx
f0114e2c:	89 10                	mov    %edx,(%eax)
f0114e2e:	eb 35                	jmp    f0114e65 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0114e30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e33:	c1 e8 0c             	shr    $0xc,%eax
f0114e36:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114e3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114e42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e45:	01 c2                	add    %eax,%edx
f0114e47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e4a:	c1 e8 0c             	shr    $0xc,%eax
f0114e4d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114e52:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0114e59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114e5c:	01 c8                	add    %ecx,%eax
f0114e5e:	8b 00                	mov    (%eax),%eax
f0114e60:	0b 45 f4             	or     -0xc(%ebp),%eax
f0114e63:	89 02                	mov    %eax,(%edx)
	return 0;
f0114e65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114e6a:	c9                   	leave  
f0114e6b:	c3                   	ret    

f0114e6c <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0114e6c:	55                   	push   %ebp
f0114e6d:	89 e5                	mov    %esp,%ebp
f0114e6f:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114e72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e75:	c1 e8 16             	shr    $0x16,%eax
f0114e78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114e7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0114e82:	01 d0                	add    %edx,%eax
f0114e84:	8b 00                	mov    (%eax),%eax
f0114e86:	83 e0 01             	and    $0x1,%eax
f0114e89:	85 c0                	test   %eax,%eax
f0114e8b:	75 0a                	jne    f0114e97 <CPs+0x2b>
f0114e8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0114e92:	e9 b8 00 00 00       	jmp    f0114f4f <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114e97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114e9a:	c1 e8 16             	shr    $0x16,%eax
f0114e9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114ea4:	8b 45 08             	mov    0x8(%ebp),%eax
f0114ea7:	01 d0                	add    %edx,%eax
f0114ea9:	8b 00                	mov    (%eax),%eax
f0114eab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114eb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114eb6:	c1 e8 0c             	shr    $0xc,%eax
f0114eb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0114ebc:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114ec1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0114ec4:	72 17                	jb     f0114edd <CPs+0x71>
f0114ec6:	ff 75 f0             	pushl  -0x10(%ebp)
f0114ec9:	68 fc 99 13 f0       	push   $0xf01399fc
f0114ece:	68 db 07 00 00       	push   $0x7db
f0114ed3:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114ed8:	e8 c9 b2 fe ff       	call   f01001a6 <_panic>
f0114edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114ee0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114ee5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0114ee8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114eef:	eb 53                	jmp    f0114f44 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0114ef1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114ef4:	ba 01 00 00 00       	mov    $0x1,%edx
f0114ef9:	88 c1                	mov    %al,%cl
f0114efb:	d3 e2                	shl    %cl,%edx
f0114efd:	89 d0                	mov    %edx,%eax
f0114eff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0114f02:	8b 45 14             	mov    0x14(%ebp),%eax
f0114f05:	23 45 e4             	and    -0x1c(%ebp),%eax
f0114f08:	85 c0                	test   %eax,%eax
f0114f0a:	74 34                	je     f0114f40 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0114f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114f0f:	c1 e8 0c             	shr    $0xc,%eax
f0114f12:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0114f21:	01 d0                	add    %edx,%eax
f0114f23:	8b 00                	mov    (%eax),%eax
f0114f25:	33 45 10             	xor    0x10(%ebp),%eax
f0114f28:	23 45 e4             	and    -0x1c(%ebp),%eax
f0114f2b:	85 c0                	test   %eax,%eax
f0114f2d:	0f 94 c0             	sete   %al
f0114f30:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0114f33:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f37:	75 08                	jne    f0114f41 <CPs+0xd5>
f0114f39:	b8 00 00 00 00       	mov    $0x0,%eax
f0114f3e:	eb 0f                	jmp    f0114f4f <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0114f40:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0114f41:	ff 45 f4             	incl   -0xc(%ebp)
f0114f44:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0114f48:	7e a7                	jle    f0114ef1 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0114f4a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0114f4f:	c9                   	leave  
f0114f50:	c3                   	ret    

f0114f51 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0114f51:	55                   	push   %ebp
f0114f52:	89 e5                	mov    %esp,%ebp
f0114f54:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114f57:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114f5a:	c1 e8 16             	shr    $0x16,%eax
f0114f5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114f64:	8b 45 08             	mov    0x8(%ebp),%eax
f0114f67:	01 d0                	add    %edx,%eax
f0114f69:	8b 00                	mov    (%eax),%eax
f0114f6b:	83 e0 01             	and    $0x1,%eax
f0114f6e:	85 c0                	test   %eax,%eax
f0114f70:	75 07                	jne    f0114f79 <CA+0x28>
f0114f72:	b8 00 00 00 00       	mov    $0x0,%eax
f0114f77:	eb 6f                	jmp    f0114fe8 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0114f79:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114f7c:	c1 e8 16             	shr    $0x16,%eax
f0114f7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114f86:	8b 45 08             	mov    0x8(%ebp),%eax
f0114f89:	01 d0                	add    %edx,%eax
f0114f8b:	8b 00                	mov    (%eax),%eax
f0114f8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0114f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0114f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114f98:	c1 e8 0c             	shr    $0xc,%eax
f0114f9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0114f9e:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0114fa3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0114fa6:	72 17                	jb     f0114fbf <CA+0x6e>
f0114fa8:	ff 75 f4             	pushl  -0xc(%ebp)
f0114fab:	68 fc 99 13 f0       	push   $0xf01399fc
f0114fb0:	68 ea 07 00 00       	push   $0x7ea
f0114fb5:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0114fba:	e8 e7 b1 fe ff       	call   f01001a6 <_panic>
f0114fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114fc2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0114fc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0114fca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114fcd:	c1 e8 0c             	shr    $0xc,%eax
f0114fd0:	25 ff 03 00 00       	and    $0x3ff,%eax
f0114fd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114fdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0114fdf:	01 d0                	add    %edx,%eax
f0114fe1:	8b 00                	mov    (%eax),%eax
f0114fe3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0114fe8:	c9                   	leave  
f0114fe9:	c3                   	ret    

f0114fea <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0114fea:	55                   	push   %ebp
f0114feb:	89 e5                	mov    %esp,%ebp
f0114fed:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0114ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114ff3:	c1 e8 16             	shr    $0x16,%eax
f0114ff6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0114ffd:	8b 45 08             	mov    0x8(%ebp),%eax
f0115000:	01 d0                	add    %edx,%eax
f0115002:	8b 00                	mov    (%eax),%eax
f0115004:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0115007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011500a:	83 e0 01             	and    $0x1,%eax
f011500d:	85 c0                	test   %eax,%eax
f011500f:	0f 84 92 00 00 00    	je     f01150a7 <CP+0xbd>
	{
		uint32 *t = NULL;
f0115015:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011501c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011501f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115024:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115027:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011502a:	c1 e8 0c             	shr    $0xc,%eax
f011502d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0115030:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0115035:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0115038:	72 17                	jb     f0115051 <CP+0x67>
f011503a:	ff 75 ec             	pushl  -0x14(%ebp)
f011503d:	68 fc 99 13 f0       	push   $0xf01399fc
f0115042:	68 f5 07 00 00       	push   $0x7f5
f0115047:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011504c:	e8 55 b1 fe ff       	call   f01001a6 <_panic>
f0115051:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115054:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115059:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f011505c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011505f:	c1 e8 0c             	shr    $0xc,%eax
f0115062:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115067:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011506e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115071:	01 d0                	add    %edx,%eax
f0115073:	8b 00                	mov    (%eax),%eax
f0115075:	23 45 10             	and    0x10(%ebp),%eax
f0115078:	3b 45 10             	cmp    0x10(%ebp),%eax
f011507b:	75 2a                	jne    f01150a7 <CP+0xbd>
f011507d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115080:	c1 e8 0c             	shr    $0xc,%eax
f0115083:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115088:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011508f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115092:	01 d0                	add    %edx,%eax
f0115094:	8b 00                	mov    (%eax),%eax
f0115096:	f7 d0                	not    %eax
f0115098:	23 45 14             	and    0x14(%ebp),%eax
f011509b:	3b 45 14             	cmp    0x14(%ebp),%eax
f011509e:	75 07                	jne    f01150a7 <CP+0xbd>
			return 1;
f01150a0:	b8 01 00 00 00       	mov    $0x1,%eax
f01150a5:	eb 05                	jmp    f01150ac <CP+0xc2>
	}
	return 0;
f01150a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01150ac:	c9                   	leave  
f01150ad:	c3                   	ret    

f01150ae <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01150ae:	55                   	push   %ebp
f01150af:	89 e5                	mov    %esp,%ebp
f01150b1:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01150b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150b7:	c1 e8 16             	shr    $0x16,%eax
f01150ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01150c4:	01 d0                	add    %edx,%eax
f01150c6:	8b 00                	mov    (%eax),%eax
f01150c8:	83 e0 01             	and    $0x1,%eax
f01150cb:	85 c0                	test   %eax,%eax
f01150cd:	75 07                	jne    f01150d6 <GP+0x28>
f01150cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01150d4:	eb 6f                	jmp    f0115145 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01150d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150d9:	c1 e8 16             	shr    $0x16,%eax
f01150dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01150e6:	01 d0                	add    %edx,%eax
f01150e8:	8b 00                	mov    (%eax),%eax
f01150ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01150ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01150f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01150f5:	c1 e8 0c             	shr    $0xc,%eax
f01150f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01150fb:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f0115100:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115103:	72 17                	jb     f011511c <GP+0x6e>
f0115105:	ff 75 f4             	pushl  -0xc(%ebp)
f0115108:	68 fc 99 13 f0       	push   $0xf01399fc
f011510d:	68 02 08 00 00       	push   $0x802
f0115112:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0115117:	e8 8a b0 fe ff       	call   f01001a6 <_panic>
f011511c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011511f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115124:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0115127:	8b 45 0c             	mov    0xc(%ebp),%eax
f011512a:	c1 e8 0c             	shr    $0xc,%eax
f011512d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115132:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115139:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011513c:	01 d0                	add    %edx,%eax
f011513e:	8b 00                	mov    (%eax),%eax
f0115140:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0115145:	c9                   	leave  
f0115146:	c3                   	ret    

f0115147 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0115147:	55                   	push   %ebp
f0115148:	89 e5                	mov    %esp,%ebp
f011514a:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011514d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115154:	eb 18                	jmp    f011516e <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115156:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115159:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115160:	8b 45 08             	mov    0x8(%ebp),%eax
f0115163:	01 d0                	add    %edx,%eax
f0115165:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011516b:	ff 45 fc             	incl   -0x4(%ebp)
f011516e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115171:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115176:	76 de                	jbe    f0115156 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115178:	90                   	nop
f0115179:	c9                   	leave  
f011517a:	c3                   	ret    

f011517b <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f011517b:	55                   	push   %ebp
f011517c:	89 e5                	mov    %esp,%ebp
f011517e:	83 ec 38             	sub    $0x38,%esp
f0115181:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115184:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115187:	8b 45 0c             	mov    0xc(%ebp),%eax
f011518a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011518f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115192:	8b 45 10             	mov    0x10(%ebp),%eax
f0115195:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011519a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011519d:	e9 ea 01 00 00       	jmp    f011538c <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01151a2:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01151a6:	74 44                	je     f01151ec <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01151a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01151ab:	83 ec 04             	sub    $0x4,%esp
f01151ae:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01151b1:	52                   	push   %edx
f01151b2:	50                   	push   %eax
f01151b3:	ff 75 08             	pushl  0x8(%ebp)
f01151b6:	e8 46 1a ff ff       	call   f0106c01 <get_frame_info>
f01151bb:	83 c4 10             	add    $0x10,%esp
f01151be:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01151c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01151c4:	85 c0                	test   %eax,%eax
f01151c6:	75 24                	jne    f01151ec <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01151c8:	83 ec 04             	sub    $0x4,%esp
f01151cb:	68 2c 9a 13 f0       	push   $0xf0139a2c
f01151d0:	68 1d 08 00 00       	push   $0x81d
f01151d5:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01151da:	e8 53 b1 fe ff       	call   f0100332 <_warn>
f01151df:	83 c4 10             	add    $0x10,%esp
				return 0;
f01151e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01151e7:	e9 b6 01 00 00       	jmp    f01153a2 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01151ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01151ef:	83 ec 04             	sub    $0x4,%esp
f01151f2:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01151f5:	52                   	push   %edx
f01151f6:	50                   	push   %eax
f01151f7:	ff 75 08             	pushl  0x8(%ebp)
f01151fa:	e8 02 1a ff ff       	call   f0106c01 <get_frame_info>
f01151ff:	83 c4 10             	add    $0x10,%esp
f0115202:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115205:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115208:	85 c0                	test   %eax,%eax
f011520a:	75 24                	jne    f0115230 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011520c:	83 ec 04             	sub    $0x4,%esp
f011520f:	68 58 9a 13 f0       	push   $0xf0139a58
f0115214:	68 24 08 00 00       	push   $0x824
f0115219:	68 9e 7b 13 f0       	push   $0xf0137b9e
f011521e:	e8 0f b1 fe ff       	call   f0100332 <_warn>
f0115223:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115226:	b8 00 00 00 00       	mov    $0x0,%eax
f011522b:	e9 72 01 00 00       	jmp    f01153a2 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115230:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115234:	75 70                	jne    f01152a6 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115236:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115239:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011523c:	c1 ea 0c             	shr    $0xc,%edx
f011523f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115245:	c1 e2 02             	shl    $0x2,%edx
f0115248:	01 d0                	add    %edx,%eax
f011524a:	8b 00                	mov    (%eax),%eax
f011524c:	c1 e8 0c             	shr    $0xc,%eax
f011524f:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115252:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115255:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115258:	c1 ea 0c             	shr    $0xc,%edx
f011525b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115261:	c1 e2 02             	shl    $0x2,%edx
f0115264:	01 d0                	add    %edx,%eax
f0115266:	8b 00                	mov    (%eax),%eax
f0115268:	c1 e8 0c             	shr    $0xc,%eax
f011526b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011526e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115271:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115274:	74 30                	je     f01152a6 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115276:	83 ec 04             	sub    $0x4,%esp
f0115279:	ff 75 e4             	pushl  -0x1c(%ebp)
f011527c:	ff 75 e8             	pushl  -0x18(%ebp)
f011527f:	ff 75 f0             	pushl  -0x10(%ebp)
f0115282:	ff 75 f4             	pushl  -0xc(%ebp)
f0115285:	68 84 9a 13 f0       	push   $0xf0139a84
f011528a:	68 2e 08 00 00       	push   $0x82e
f011528f:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0115294:	e8 99 b0 fe ff       	call   f0100332 <_warn>
f0115299:	83 c4 20             	add    $0x20,%esp
				return 0;
f011529c:	b8 00 00 00 00       	mov    $0x0,%eax
f01152a1:	e9 fc 00 00 00       	jmp    f01153a2 <CCP+0x227>
			}
		}
		if (ref != -1)
f01152a6:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01152aa:	74 52                	je     f01152fe <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01152ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01152b0:	74 0e                	je     f01152c0 <CCP+0x145>
f01152b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01152b5:	8b 40 08             	mov    0x8(%eax),%eax
f01152b8:	0f b7 c0             	movzwl %ax,%eax
f01152bb:	3b 45 18             	cmp    0x18(%ebp),%eax
f01152be:	74 3e                	je     f01152fe <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01152c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01152c4:	74 0b                	je     f01152d1 <CCP+0x156>
f01152c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01152c9:	8b 40 08             	mov    0x8(%eax),%eax
f01152cc:	0f b7 c0             	movzwl %ax,%eax
f01152cf:	eb 05                	jmp    f01152d6 <CCP+0x15b>
f01152d1:	b8 00 00 00 00       	mov    $0x0,%eax
f01152d6:	83 ec 0c             	sub    $0xc,%esp
f01152d9:	50                   	push   %eax
f01152da:	ff 75 f0             	pushl  -0x10(%ebp)
f01152dd:	68 e0 9a 13 f0       	push   $0xf0139ae0
f01152e2:	68 36 08 00 00       	push   $0x836
f01152e7:	68 9e 7b 13 f0       	push   $0xf0137b9e
f01152ec:	e8 41 b0 fe ff       	call   f0100332 <_warn>
f01152f1:	83 c4 20             	add    $0x20,%esp
				return 0;
f01152f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01152f9:	e9 a4 00 00 00       	jmp    f01153a2 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01152fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115301:	ff 75 20             	pushl  0x20(%ebp)
f0115304:	ff 75 1c             	pushl  0x1c(%ebp)
f0115307:	50                   	push   %eax
f0115308:	ff 75 08             	pushl  0x8(%ebp)
f011530b:	e8 5c fb ff ff       	call   f0114e6c <CPs>
f0115310:	83 c4 10             	add    $0x10,%esp
f0115313:	85 c0                	test   %eax,%eax
f0115315:	7f 21                	jg     f0115338 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115317:	83 ec 04             	sub    $0x4,%esp
f011531a:	68 50 9b 13 f0       	push   $0xf0139b50
f011531f:	68 3c 08 00 00       	push   $0x83c
f0115324:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0115329:	e8 04 b0 fe ff       	call   f0100332 <_warn>
f011532e:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115331:	b8 00 00 00 00       	mov    $0x0,%eax
f0115336:	eb 6a                	jmp    f01153a2 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115338:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011533c:	74 3a                	je     f0115378 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011533e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115341:	ff 75 28             	pushl  0x28(%ebp)
f0115344:	ff 75 24             	pushl  0x24(%ebp)
f0115347:	50                   	push   %eax
f0115348:	ff 75 08             	pushl  0x8(%ebp)
f011534b:	e8 1c fb ff ff       	call   f0114e6c <CPs>
f0115350:	83 c4 10             	add    $0x10,%esp
f0115353:	85 c0                	test   %eax,%eax
f0115355:	7f 21                	jg     f0115378 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115357:	83 ec 04             	sub    $0x4,%esp
f011535a:	68 98 9b 13 f0       	push   $0xf0139b98
f011535f:	68 43 08 00 00       	push   $0x843
f0115364:	68 9e 7b 13 f0       	push   $0xf0137b9e
f0115369:	e8 c4 af fe ff       	call   f0100332 <_warn>
f011536e:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115371:	b8 00 00 00 00       	mov    $0x0,%eax
f0115376:	eb 2a                	jmp    f01153a2 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115378:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011537c:	74 07                	je     f0115385 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f011537e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115385:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f011538c:	8b 55 10             	mov    0x10(%ebp),%edx
f011538f:	8b 45 14             	mov    0x14(%ebp),%eax
f0115392:	01 d0                	add    %edx,%eax
f0115394:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115397:	0f 87 05 fe ff ff    	ja     f01151a2 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f011539d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01153a2:	c9                   	leave  
f01153a3:	c3                   	ret    

f01153a4 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01153a4:	55                   	push   %ebp
f01153a5:	89 e5                	mov    %esp,%ebp
f01153a7:	57                   	push   %edi
f01153a8:	56                   	push   %esi
f01153a9:	53                   	push   %ebx
f01153aa:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f01153b0:	a0 ce fc 18 f0       	mov    0xf018fcce,%al
f01153b5:	84 c0                	test   %al,%al
f01153b7:	0f 84 a8 09 00 00    	je     f0115d65 <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01153bd:	c6 05 ce fc 18 f0 00 	movb   $0x0,0xf018fcce
		char command[100] = "load fos_add 20";
f01153c4:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01153ca:	bb 38 9e 13 f0       	mov    $0xf0139e38,%ebx
f01153cf:	ba 04 00 00 00       	mov    $0x4,%edx
f01153d4:	89 c7                	mov    %eax,%edi
f01153d6:	89 de                	mov    %ebx,%esi
f01153d8:	89 d1                	mov    %edx,%ecx
f01153da:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01153dc:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01153e2:	b9 15 00 00 00       	mov    $0x15,%ecx
f01153e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01153ec:	89 d7                	mov    %edx,%edi
f01153ee:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01153f0:	83 ec 0c             	sub    $0xc,%esp
f01153f3:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01153f9:	50                   	push   %eax
f01153fa:	e8 90 b8 fe ff       	call   f0100c8f <execute_command>
f01153ff:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115402:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115408:	bb 9c 9e 13 f0       	mov    $0xf0139e9c,%ebx
f011540d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115412:	89 c7                	mov    %eax,%edi
f0115414:	89 de                	mov    %ebx,%esi
f0115416:	89 d1                	mov    %edx,%ecx
f0115418:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011541a:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115420:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115425:	b0 00                	mov    $0x0,%al
f0115427:	89 d7                	mov    %edx,%edi
f0115429:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011542b:	83 ec 0c             	sub    $0xc,%esp
f011542e:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115434:	50                   	push   %eax
f0115435:	e8 55 b8 fe ff       	call   f0100c8f <execute_command>
f011543a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011543d:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115443:	bb 00 9f 13 f0       	mov    $0xf0139f00,%ebx
f0115448:	ba 17 00 00 00       	mov    $0x17,%edx
f011544d:	89 c7                	mov    %eax,%edi
f011544f:	89 de                	mov    %ebx,%esi
f0115451:	89 d1                	mov    %edx,%ecx
f0115453:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115455:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011545b:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115460:	b0 00                	mov    $0x0,%al
f0115462:	89 d7                	mov    %edx,%edi
f0115464:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115466:	83 ec 0c             	sub    $0xc,%esp
f0115469:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011546f:	50                   	push   %eax
f0115470:	e8 1a b8 fe ff       	call   f0100c8f <execute_command>
f0115475:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115478:	83 ec 04             	sub    $0x4,%esp
f011547b:	6a 00                	push   $0x0
f011547d:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115480:	50                   	push   %eax
f0115481:	68 00 10 00 00       	push   $0x1000
f0115486:	e8 1c 39 ff ff       	call   f0108da7 <envid2env>
f011548b:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011548e:	83 ec 04             	sub    $0x4,%esp
f0115491:	6a 00                	push   $0x0
f0115493:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115496:	50                   	push   %eax
f0115497:	68 01 10 00 00       	push   $0x1001
f011549c:	e8 06 39 ff ff       	call   f0108da7 <envid2env>
f01154a1:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01154a4:	83 ec 04             	sub    $0x4,%esp
f01154a7:	6a 00                	push   $0x0
f01154a9:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01154ac:	50                   	push   %eax
f01154ad:	68 02 10 00 00       	push   $0x1002
f01154b2:	e8 f0 38 ff ff       	call   f0108da7 <envid2env>
f01154b7:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01154ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01154bd:	85 c0                	test   %eax,%eax
f01154bf:	74 0e                	je     f01154cf <test_priority_normal_and_higher+0x12b>
f01154c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154c4:	85 c0                	test   %eax,%eax
f01154c6:	74 07                	je     f01154cf <test_priority_normal_and_higher+0x12b>
f01154c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154cb:	85 c0                	test   %eax,%eax
f01154cd:	75 14                	jne    f01154e3 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01154cf:	83 ec 04             	sub    $0x4,%esp
f01154d2:	68 d8 9b 13 f0       	push   $0xf0139bd8
f01154d7:	6a 26                	push   $0x26
f01154d9:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01154de:	e8 c3 ac fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01154e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01154e6:	8b 40 74             	mov    0x74(%eax),%eax
f01154e9:	83 f8 14             	cmp    $0x14,%eax
f01154ec:	75 16                	jne    f0115504 <test_priority_normal_and_higher+0x160>
f01154ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154f1:	8b 40 74             	mov    0x74(%eax),%eax
f01154f4:	83 f8 0f             	cmp    $0xf,%eax
f01154f7:	75 0b                	jne    f0115504 <test_priority_normal_and_higher+0x160>
f01154f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154fc:	8b 40 74             	mov    0x74(%eax),%eax
f01154ff:	83 f8 0a             	cmp    $0xa,%eax
f0115502:	74 14                	je     f0115518 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115504:	83 ec 04             	sub    $0x4,%esp
f0115507:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011550c:	6a 29                	push   $0x29
f011550e:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115513:	e8 8e ac fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0115518:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011551f:	eb 43                	jmp    f0115564 <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115521:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115524:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115527:	89 d0                	mov    %edx,%eax
f0115529:	01 c0                	add    %eax,%eax
f011552b:	01 d0                	add    %edx,%eax
f011552d:	c1 e0 03             	shl    $0x3,%eax
f0115530:	01 c8                	add    %ecx,%eax
f0115532:	83 c0 78             	add    $0x78,%eax
f0115535:	8b 10                	mov    (%eax),%edx
f0115537:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011553a:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115541:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0115544:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115547:	89 d0                	mov    %edx,%eax
f0115549:	01 c0                	add    %eax,%eax
f011554b:	01 d0                	add    %edx,%eax
f011554d:	c1 e0 03             	shl    $0x3,%eax
f0115550:	01 c8                	add    %ecx,%eax
f0115552:	83 e8 80             	sub    $0xffffff80,%eax
f0115555:	8b 10                	mov    (%eax),%edx
f0115557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011555a:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115561:	ff 45 e4             	incl   -0x1c(%ebp)
f0115564:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115568:	7e b7                	jle    f0115521 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011556a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115571:	eb 43                	jmp    f01155b6 <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115573:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115576:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115579:	89 d0                	mov    %edx,%eax
f011557b:	01 c0                	add    %eax,%eax
f011557d:	01 d0                	add    %edx,%eax
f011557f:	c1 e0 03             	shl    $0x3,%eax
f0115582:	01 c8                	add    %ecx,%eax
f0115584:	83 c0 78             	add    $0x78,%eax
f0115587:	8b 10                	mov    (%eax),%edx
f0115589:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011558c:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115593:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115596:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115599:	89 d0                	mov    %edx,%eax
f011559b:	01 c0                	add    %eax,%eax
f011559d:	01 d0                	add    %edx,%eax
f011559f:	c1 e0 03             	shl    $0x3,%eax
f01155a2:	01 c8                	add    %ecx,%eax
f01155a4:	83 e8 80             	sub    $0xffffff80,%eax
f01155a7:	8b 10                	mov    (%eax),%edx
f01155a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01155ac:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01155b3:	ff 45 e0             	incl   -0x20(%ebp)
f01155b6:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01155ba:	7e b7                	jle    f0115573 <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01155bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01155c3:	eb 43                	jmp    f0115608 <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01155c5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01155c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01155cb:	89 d0                	mov    %edx,%eax
f01155cd:	01 c0                	add    %eax,%eax
f01155cf:	01 d0                	add    %edx,%eax
f01155d1:	c1 e0 03             	shl    $0x3,%eax
f01155d4:	01 c8                	add    %ecx,%eax
f01155d6:	83 c0 78             	add    $0x78,%eax
f01155d9:	8b 10                	mov    (%eax),%edx
f01155db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01155de:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01155e5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01155e8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01155eb:	89 d0                	mov    %edx,%eax
f01155ed:	01 c0                	add    %eax,%eax
f01155ef:	01 d0                	add    %edx,%eax
f01155f1:	c1 e0 03             	shl    $0x3,%eax
f01155f4:	01 c8                	add    %ecx,%eax
f01155f6:	83 e8 80             	sub    $0xffffff80,%eax
f01155f9:	8b 10                	mov    (%eax),%edx
f01155fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01155fe:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115605:	ff 45 dc             	incl   -0x24(%ebp)
f0115608:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011560c:	7e b7                	jle    f01155c5 <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011560e:	e8 85 67 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115613:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115616:	e8 71 e6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011561b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011561e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115621:	83 ec 08             	sub    $0x8,%esp
f0115624:	6a 03                	push   $0x3
f0115626:	50                   	push   %eax
f0115627:	e8 62 4c ff ff       	call   f010a28e <set_program_priority>
f011562c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011562f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115632:	83 ec 08             	sub    $0x8,%esp
f0115635:	6a 03                	push   $0x3
f0115637:	50                   	push   %eax
f0115638:	e8 51 4c ff ff       	call   f010a28e <set_program_priority>
f011563d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115640:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115643:	83 ec 08             	sub    $0x8,%esp
f0115646:	6a 03                	push   $0x3
f0115648:	50                   	push   %eax
f0115649:	e8 40 4c ff ff       	call   f010a28e <set_program_priority>
f011564e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115651:	e8 36 e6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115656:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115659:	74 14                	je     f011566f <test_priority_normal_and_higher+0x2cb>
f011565b:	83 ec 04             	sub    $0x4,%esp
f011565e:	68 58 9c 13 f0       	push   $0xf0139c58
f0115663:	6a 45                	push   $0x45
f0115665:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011566a:	e8 37 ab fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011566f:	e8 24 67 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115674:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115677:	74 14                	je     f011568d <test_priority_normal_and_higher+0x2e9>
f0115679:	83 ec 04             	sub    $0x4,%esp
f011567c:	68 58 9c 13 f0       	push   $0xf0139c58
f0115681:	6a 46                	push   $0x46
f0115683:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115688:	e8 19 ab fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011568d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115690:	8b 40 74             	mov    0x74(%eax),%eax
f0115693:	83 f8 14             	cmp    $0x14,%eax
f0115696:	75 16                	jne    f01156ae <test_priority_normal_and_higher+0x30a>
f0115698:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011569b:	8b 40 74             	mov    0x74(%eax),%eax
f011569e:	83 f8 0f             	cmp    $0xf,%eax
f01156a1:	75 0b                	jne    f01156ae <test_priority_normal_and_higher+0x30a>
f01156a3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01156a6:	8b 40 74             	mov    0x74(%eax),%eax
f01156a9:	83 f8 0a             	cmp    $0xa,%eax
f01156ac:	74 14                	je     f01156c2 <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01156ae:	83 ec 04             	sub    $0x4,%esp
f01156b1:	68 84 9c 13 f0       	push   $0xf0139c84
f01156b6:	6a 49                	push   $0x49
f01156b8:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01156bd:	e8 e4 aa fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01156c2:	e8 d1 66 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01156c7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01156ca:	e8 bd e5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01156cf:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01156d2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01156d5:	83 ec 08             	sub    $0x8,%esp
f01156d8:	6a 04                	push   $0x4
f01156da:	50                   	push   %eax
f01156db:	e8 ae 4b ff ff       	call   f010a28e <set_program_priority>
f01156e0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f01156e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01156e6:	83 ec 08             	sub    $0x8,%esp
f01156e9:	6a 04                	push   $0x4
f01156eb:	50                   	push   %eax
f01156ec:	e8 9d 4b ff ff       	call   f010a28e <set_program_priority>
f01156f1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01156f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01156f7:	83 ec 08             	sub    $0x8,%esp
f01156fa:	6a 04                	push   $0x4
f01156fc:	50                   	push   %eax
f01156fd:	e8 8c 4b ff ff       	call   f010a28e <set_program_priority>
f0115702:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115705:	e8 82 e5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011570a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011570d:	74 14                	je     f0115723 <test_priority_normal_and_higher+0x37f>
f011570f:	83 ec 04             	sub    $0x4,%esp
f0115712:	68 58 9c 13 f0       	push   $0xf0139c58
f0115717:	6a 53                	push   $0x53
f0115719:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011571e:	e8 83 aa fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115723:	e8 70 66 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115728:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011572b:	74 14                	je     f0115741 <test_priority_normal_and_higher+0x39d>
f011572d:	83 ec 04             	sub    $0x4,%esp
f0115730:	68 d8 9c 13 f0       	push   $0xf0139cd8
f0115735:	6a 54                	push   $0x54
f0115737:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011573c:	e8 65 aa fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115741:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115744:	8b 40 74             	mov    0x74(%eax),%eax
f0115747:	83 f8 14             	cmp    $0x14,%eax
f011574a:	75 16                	jne    f0115762 <test_priority_normal_and_higher+0x3be>
f011574c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011574f:	8b 40 74             	mov    0x74(%eax),%eax
f0115752:	83 f8 0f             	cmp    $0xf,%eax
f0115755:	75 0b                	jne    f0115762 <test_priority_normal_and_higher+0x3be>
f0115757:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011575a:	8b 40 74             	mov    0x74(%eax),%eax
f011575d:	83 f8 14             	cmp    $0x14,%eax
f0115760:	74 14                	je     f0115776 <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115762:	83 ec 04             	sub    $0x4,%esp
f0115765:	68 08 9d 13 f0       	push   $0xf0139d08
f011576a:	6a 57                	push   $0x57
f011576c:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115771:	e8 30 aa fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115776:	e8 1d 66 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011577b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011577e:	e8 09 e5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115783:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115786:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115789:	83 ec 08             	sub    $0x8,%esp
f011578c:	6a 04                	push   $0x4
f011578e:	50                   	push   %eax
f011578f:	e8 fa 4a ff ff       	call   f010a28e <set_program_priority>
f0115794:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115797:	e8 f0 e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011579c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011579f:	74 14                	je     f01157b5 <test_priority_normal_and_higher+0x411>
f01157a1:	83 ec 04             	sub    $0x4,%esp
f01157a4:	68 58 9c 13 f0       	push   $0xf0139c58
f01157a9:	6a 5f                	push   $0x5f
f01157ab:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01157b0:	e8 f1 a9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01157b5:	e8 de 65 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01157ba:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01157bd:	74 14                	je     f01157d3 <test_priority_normal_and_higher+0x42f>
f01157bf:	83 ec 04             	sub    $0x4,%esp
f01157c2:	68 58 9c 13 f0       	push   $0xf0139c58
f01157c7:	6a 60                	push   $0x60
f01157c9:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01157ce:	e8 d3 a9 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01157d3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01157d6:	8b 40 74             	mov    0x74(%eax),%eax
f01157d9:	83 f8 14             	cmp    $0x14,%eax
f01157dc:	75 16                	jne    f01157f4 <test_priority_normal_and_higher+0x450>
f01157de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01157e1:	8b 40 74             	mov    0x74(%eax),%eax
f01157e4:	83 f8 0f             	cmp    $0xf,%eax
f01157e7:	75 0b                	jne    f01157f4 <test_priority_normal_and_higher+0x450>
f01157e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01157ec:	8b 40 74             	mov    0x74(%eax),%eax
f01157ef:	83 f8 14             	cmp    $0x14,%eax
f01157f2:	74 14                	je     f0115808 <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f01157f4:	83 ec 04             	sub    $0x4,%esp
f01157f7:	68 50 9d 13 f0       	push   $0xf0139d50
f01157fc:	6a 63                	push   $0x63
f01157fe:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115803:	e8 9e a9 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115808:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011580f:	eb 1a                	jmp    f011582b <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115811:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115814:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115817:	89 d0                	mov    %edx,%eax
f0115819:	01 c0                	add    %eax,%eax
f011581b:	01 d0                	add    %edx,%eax
f011581d:	c1 e0 03             	shl    $0x3,%eax
f0115820:	01 c8                	add    %ecx,%eax
f0115822:	83 c0 7c             	add    $0x7c,%eax
f0115825:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115828:	ff 45 d8             	incl   -0x28(%ebp)
f011582b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011582f:	7e e0                	jle    f0115811 <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115831:	e8 62 65 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115836:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115839:	e8 4e e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011583e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115841:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115844:	83 ec 08             	sub    $0x8,%esp
f0115847:	6a 04                	push   $0x4
f0115849:	50                   	push   %eax
f011584a:	e8 3f 4a ff ff       	call   f010a28e <set_program_priority>
f011584f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115852:	e8 35 e4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115857:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011585a:	74 14                	je     f0115870 <test_priority_normal_and_higher+0x4cc>
f011585c:	83 ec 04             	sub    $0x4,%esp
f011585f:	68 58 9c 13 f0       	push   $0xf0139c58
f0115864:	6a 70                	push   $0x70
f0115866:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011586b:	e8 36 a9 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115870:	e8 23 65 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115875:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115878:	74 14                	je     f011588e <test_priority_normal_and_higher+0x4ea>
f011587a:	83 ec 04             	sub    $0x4,%esp
f011587d:	68 58 9c 13 f0       	push   $0xf0139c58
f0115882:	6a 71                	push   $0x71
f0115884:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115889:	e8 18 a9 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011588e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115891:	8b 40 74             	mov    0x74(%eax),%eax
f0115894:	83 f8 14             	cmp    $0x14,%eax
f0115897:	75 16                	jne    f01158af <test_priority_normal_and_higher+0x50b>
f0115899:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011589c:	8b 40 74             	mov    0x74(%eax),%eax
f011589f:	83 f8 0f             	cmp    $0xf,%eax
f01158a2:	75 0b                	jne    f01158af <test_priority_normal_and_higher+0x50b>
f01158a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158a7:	8b 40 74             	mov    0x74(%eax),%eax
f01158aa:	83 f8 14             	cmp    $0x14,%eax
f01158ad:	74 14                	je     f01158c3 <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f01158af:	83 ec 04             	sub    $0x4,%esp
f01158b2:	68 50 9d 13 f0       	push   $0xf0139d50
f01158b7:	6a 74                	push   $0x74
f01158b9:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01158be:	e8 e3 a8 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f01158c3:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f01158ca:	eb 1a                	jmp    f01158e6 <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01158cc:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01158cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01158d2:	89 d0                	mov    %edx,%eax
f01158d4:	01 c0                	add    %eax,%eax
f01158d6:	01 d0                	add    %edx,%eax
f01158d8:	c1 e0 03             	shl    $0x3,%eax
f01158db:	01 c8                	add    %ecx,%eax
f01158dd:	83 c0 7c             	add    $0x7c,%eax
f01158e0:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01158e3:	ff 45 d4             	incl   -0x2c(%ebp)
f01158e6:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01158ea:	7e e0                	jle    f01158cc <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01158ec:	e8 a7 64 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01158f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01158f4:	e8 93 e3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01158f9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01158fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01158ff:	83 ec 08             	sub    $0x8,%esp
f0115902:	6a 05                	push   $0x5
f0115904:	50                   	push   %eax
f0115905:	e8 84 49 ff ff       	call   f010a28e <set_program_priority>
f011590a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011590d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115910:	83 ec 08             	sub    $0x8,%esp
f0115913:	6a 05                	push   $0x5
f0115915:	50                   	push   %eax
f0115916:	e8 73 49 ff ff       	call   f010a28e <set_program_priority>
f011591b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011591e:	e8 69 e3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115923:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115926:	74 14                	je     f011593c <test_priority_normal_and_higher+0x598>
f0115928:	83 ec 04             	sub    $0x4,%esp
f011592b:	68 58 9c 13 f0       	push   $0xf0139c58
f0115930:	6a 7f                	push   $0x7f
f0115932:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115937:	e8 6a a8 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011593c:	e8 57 64 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115941:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115944:	74 17                	je     f011595d <test_priority_normal_and_higher+0x5b9>
f0115946:	83 ec 04             	sub    $0x4,%esp
f0115949:	68 58 9c 13 f0       	push   $0xf0139c58
f011594e:	68 80 00 00 00       	push   $0x80
f0115953:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115958:	e8 49 a8 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011595d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115960:	8b 40 74             	mov    0x74(%eax),%eax
f0115963:	83 f8 14             	cmp    $0x14,%eax
f0115966:	75 16                	jne    f011597e <test_priority_normal_and_higher+0x5da>
f0115968:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011596b:	8b 40 74             	mov    0x74(%eax),%eax
f011596e:	83 f8 1e             	cmp    $0x1e,%eax
f0115971:	75 0b                	jne    f011597e <test_priority_normal_and_higher+0x5da>
f0115973:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115976:	8b 40 74             	mov    0x74(%eax),%eax
f0115979:	83 f8 28             	cmp    $0x28,%eax
f011597c:	74 17                	je     f0115995 <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f011597e:	83 ec 04             	sub    $0x4,%esp
f0115981:	68 8c 9d 13 f0       	push   $0xf0139d8c
f0115986:	68 83 00 00 00       	push   $0x83
f011598b:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115990:	e8 11 a8 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f0115995:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011599c:	eb 1a                	jmp    f01159b8 <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011599e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01159a1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01159a4:	89 d0                	mov    %edx,%eax
f01159a6:	01 c0                	add    %eax,%eax
f01159a8:	01 d0                	add    %edx,%eax
f01159aa:	c1 e0 03             	shl    $0x3,%eax
f01159ad:	01 c8                	add    %ecx,%eax
f01159af:	83 c0 7c             	add    $0x7c,%eax
f01159b2:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f01159b5:	ff 45 d0             	incl   -0x30(%ebp)
f01159b8:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f01159bc:	7e e0                	jle    f011599e <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01159be:	e8 d5 63 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01159c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01159c6:	e8 c1 e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01159cb:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01159ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01159d1:	83 ec 08             	sub    $0x8,%esp
f01159d4:	6a 05                	push   $0x5
f01159d6:	50                   	push   %eax
f01159d7:	e8 b2 48 ff ff       	call   f010a28e <set_program_priority>
f01159dc:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01159df:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01159e2:	83 ec 08             	sub    $0x8,%esp
f01159e5:	6a 04                	push   $0x4
f01159e7:	50                   	push   %eax
f01159e8:	e8 a1 48 ff ff       	call   f010a28e <set_program_priority>
f01159ed:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01159f0:	e8 97 e2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01159f5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01159f8:	74 17                	je     f0115a11 <test_priority_normal_and_higher+0x66d>
f01159fa:	83 ec 04             	sub    $0x4,%esp
f01159fd:	68 58 9c 13 f0       	push   $0xf0139c58
f0115a02:	68 8e 00 00 00       	push   $0x8e
f0115a07:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115a0c:	e8 95 a7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115a11:	e8 82 63 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115a16:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115a19:	74 17                	je     f0115a32 <test_priority_normal_and_higher+0x68e>
f0115a1b:	83 ec 04             	sub    $0x4,%esp
f0115a1e:	68 58 9c 13 f0       	push   $0xf0139c58
f0115a23:	68 8f 00 00 00       	push   $0x8f
f0115a28:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115a2d:	e8 74 a7 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115a32:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a35:	8b 40 74             	mov    0x74(%eax),%eax
f0115a38:	83 f8 14             	cmp    $0x14,%eax
f0115a3b:	75 16                	jne    f0115a53 <test_priority_normal_and_higher+0x6af>
f0115a3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a40:	8b 40 74             	mov    0x74(%eax),%eax
f0115a43:	83 f8 1e             	cmp    $0x1e,%eax
f0115a46:	75 0b                	jne    f0115a53 <test_priority_normal_and_higher+0x6af>
f0115a48:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a4b:	8b 40 74             	mov    0x74(%eax),%eax
f0115a4e:	83 f8 28             	cmp    $0x28,%eax
f0115a51:	74 17                	je     f0115a6a <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0115a53:	83 ec 04             	sub    $0x4,%esp
f0115a56:	68 8c 9d 13 f0       	push   $0xf0139d8c
f0115a5b:	68 92 00 00 00       	push   $0x92
f0115a60:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115a65:	e8 3c a7 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f0115a6a:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0115a71:	eb 1a                	jmp    f0115a8d <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115a73:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115a76:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115a79:	89 d0                	mov    %edx,%eax
f0115a7b:	01 c0                	add    %eax,%eax
f0115a7d:	01 d0                	add    %edx,%eax
f0115a7f:	c1 e0 03             	shl    $0x3,%eax
f0115a82:	01 c8                	add    %ecx,%eax
f0115a84:	83 c0 7c             	add    $0x7c,%eax
f0115a87:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0115a8a:	ff 45 cc             	incl   -0x34(%ebp)
f0115a8d:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0115a91:	7e e0                	jle    f0115a73 <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115a93:	e8 00 63 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115a98:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115a9b:	e8 ec e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115aa0:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115aa3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115aa6:	83 ec 08             	sub    $0x8,%esp
f0115aa9:	6a 05                	push   $0x5
f0115aab:	50                   	push   %eax
f0115aac:	e8 dd 47 ff ff       	call   f010a28e <set_program_priority>
f0115ab1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115ab4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ab7:	83 ec 08             	sub    $0x8,%esp
f0115aba:	6a 04                	push   $0x4
f0115abc:	50                   	push   %eax
f0115abd:	e8 cc 47 ff ff       	call   f010a28e <set_program_priority>
f0115ac2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115ac5:	e8 c2 e1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115aca:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115acd:	74 17                	je     f0115ae6 <test_priority_normal_and_higher+0x742>
f0115acf:	83 ec 04             	sub    $0x4,%esp
f0115ad2:	68 58 9c 13 f0       	push   $0xf0139c58
f0115ad7:	68 9d 00 00 00       	push   $0x9d
f0115adc:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115ae1:	e8 c0 a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115ae6:	e8 ad 62 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115aeb:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115aee:	74 17                	je     f0115b07 <test_priority_normal_and_higher+0x763>
f0115af0:	83 ec 04             	sub    $0x4,%esp
f0115af3:	68 58 9c 13 f0       	push   $0xf0139c58
f0115af8:	68 9e 00 00 00       	push   $0x9e
f0115afd:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115b02:	e8 9f a6 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115b07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b0a:	8b 40 74             	mov    0x74(%eax),%eax
f0115b0d:	83 f8 14             	cmp    $0x14,%eax
f0115b10:	75 16                	jne    f0115b28 <test_priority_normal_and_higher+0x784>
f0115b12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b15:	8b 40 74             	mov    0x74(%eax),%eax
f0115b18:	83 f8 3c             	cmp    $0x3c,%eax
f0115b1b:	75 0b                	jne    f0115b28 <test_priority_normal_and_higher+0x784>
f0115b1d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b20:	8b 40 74             	mov    0x74(%eax),%eax
f0115b23:	83 f8 28             	cmp    $0x28,%eax
f0115b26:	74 17                	je     f0115b3f <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f0115b28:	83 ec 04             	sub    $0x4,%esp
f0115b2b:	68 8c 9d 13 f0       	push   $0xf0139d8c
f0115b30:	68 a1 00 00 00       	push   $0xa1
f0115b35:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115b3a:	e8 67 a6 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f0115b3f:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115b46:	eb 1a                	jmp    f0115b62 <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115b48:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115b4b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115b4e:	89 d0                	mov    %edx,%eax
f0115b50:	01 c0                	add    %eax,%eax
f0115b52:	01 d0                	add    %edx,%eax
f0115b54:	c1 e0 03             	shl    $0x3,%eax
f0115b57:	01 c8                	add    %ecx,%eax
f0115b59:	83 c0 7c             	add    $0x7c,%eax
f0115b5c:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115b5f:	ff 45 c8             	incl   -0x38(%ebp)
f0115b62:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115b66:	7e e0                	jle    f0115b48 <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115b68:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115b6f:	eb 1a                	jmp    f0115b8b <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115b71:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115b74:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115b77:	89 d0                	mov    %edx,%eax
f0115b79:	01 c0                	add    %eax,%eax
f0115b7b:	01 d0                	add    %edx,%eax
f0115b7d:	c1 e0 03             	shl    $0x3,%eax
f0115b80:	01 c8                	add    %ecx,%eax
f0115b82:	83 c0 7c             	add    $0x7c,%eax
f0115b85:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115b88:	ff 45 c4             	incl   -0x3c(%ebp)
f0115b8b:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115b8f:	7e e0                	jle    f0115b71 <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115b91:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0115b98:	eb 79                	jmp    f0115c13 <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0115b9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115b9d:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0115ba4:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115ba7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115baa:	89 d0                	mov    %edx,%eax
f0115bac:	01 c0                	add    %eax,%eax
f0115bae:	01 d0                	add    %edx,%eax
f0115bb0:	c1 e0 03             	shl    $0x3,%eax
f0115bb3:	01 d8                	add    %ebx,%eax
f0115bb5:	83 c0 78             	add    $0x78,%eax
f0115bb8:	8b 00                	mov    (%eax),%eax
f0115bba:	39 c1                	cmp    %eax,%ecx
f0115bbc:	74 17                	je     f0115bd5 <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f0115bbe:	83 ec 04             	sub    $0x4,%esp
f0115bc1:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115bc6:	68 af 00 00 00       	push   $0xaf
f0115bcb:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115bd0:	e8 d1 a5 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0115bd5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115bd8:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0115bdf:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115be2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115be5:	89 d0                	mov    %edx,%eax
f0115be7:	01 c0                	add    %eax,%eax
f0115be9:	01 d0                	add    %edx,%eax
f0115beb:	c1 e0 03             	shl    $0x3,%eax
f0115bee:	01 d8                	add    %ebx,%eax
f0115bf0:	83 e8 80             	sub    $0xffffff80,%eax
f0115bf3:	8b 00                	mov    (%eax),%eax
f0115bf5:	39 c1                	cmp    %eax,%ecx
f0115bf7:	74 17                	je     f0115c10 <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f0115bf9:	83 ec 04             	sub    $0x4,%esp
f0115bfc:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115c01:	68 b2 00 00 00       	push   $0xb2
f0115c06:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115c0b:	e8 96 a5 fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115c10:	ff 45 c0             	incl   -0x40(%ebp)
f0115c13:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0115c17:	7e 81                	jle    f0115b9a <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115c19:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0115c20:	eb 79                	jmp    f0115c9b <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0115c22:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c25:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0115c2c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0115c2f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115c32:	89 d0                	mov    %edx,%eax
f0115c34:	01 c0                	add    %eax,%eax
f0115c36:	01 d0                	add    %edx,%eax
f0115c38:	c1 e0 03             	shl    $0x3,%eax
f0115c3b:	01 d8                	add    %ebx,%eax
f0115c3d:	83 c0 78             	add    $0x78,%eax
f0115c40:	8b 00                	mov    (%eax),%eax
f0115c42:	39 c1                	cmp    %eax,%ecx
f0115c44:	74 17                	je     f0115c5d <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f0115c46:	83 ec 04             	sub    $0x4,%esp
f0115c49:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115c4e:	68 b8 00 00 00       	push   $0xb8
f0115c53:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115c58:	e8 49 a5 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0115c5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c60:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0115c67:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0115c6a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0115c6d:	89 d0                	mov    %edx,%eax
f0115c6f:	01 c0                	add    %eax,%eax
f0115c71:	01 d0                	add    %edx,%eax
f0115c73:	c1 e0 03             	shl    $0x3,%eax
f0115c76:	01 d8                	add    %ebx,%eax
f0115c78:	83 e8 80             	sub    $0xffffff80,%eax
f0115c7b:	8b 00                	mov    (%eax),%eax
f0115c7d:	39 c1                	cmp    %eax,%ecx
f0115c7f:	74 17                	je     f0115c98 <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f0115c81:	83 ec 04             	sub    $0x4,%esp
f0115c84:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115c89:	68 bb 00 00 00       	push   $0xbb
f0115c8e:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115c93:	e8 0e a5 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115c98:	ff 45 bc             	incl   -0x44(%ebp)
f0115c9b:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0115c9f:	7e 81                	jle    f0115c22 <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115ca1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0115ca8:	eb 79                	jmp    f0115d23 <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0115caa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115cad:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0115cb4:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0115cb7:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115cba:	89 d0                	mov    %edx,%eax
f0115cbc:	01 c0                	add    %eax,%eax
f0115cbe:	01 d0                	add    %edx,%eax
f0115cc0:	c1 e0 03             	shl    $0x3,%eax
f0115cc3:	01 d8                	add    %ebx,%eax
f0115cc5:	83 c0 78             	add    $0x78,%eax
f0115cc8:	8b 00                	mov    (%eax),%eax
f0115cca:	39 c1                	cmp    %eax,%ecx
f0115ccc:	74 17                	je     f0115ce5 <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f0115cce:	83 ec 04             	sub    $0x4,%esp
f0115cd1:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115cd6:	68 c1 00 00 00       	push   $0xc1
f0115cdb:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115ce0:	e8 c1 a4 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0115ce5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ce8:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0115cef:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0115cf2:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0115cf5:	89 d0                	mov    %edx,%eax
f0115cf7:	01 c0                	add    %eax,%eax
f0115cf9:	01 d0                	add    %edx,%eax
f0115cfb:	c1 e0 03             	shl    $0x3,%eax
f0115cfe:	01 d8                	add    %ebx,%eax
f0115d00:	83 e8 80             	sub    $0xffffff80,%eax
f0115d03:	8b 00                	mov    (%eax),%eax
f0115d05:	39 c1                	cmp    %eax,%ecx
f0115d07:	74 17                	je     f0115d20 <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f0115d09:	83 ec 04             	sub    $0x4,%esp
f0115d0c:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0115d11:	68 c4 00 00 00       	push   $0xc4
f0115d16:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115d1b:	e8 86 a4 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0115d20:	ff 45 b8             	incl   -0x48(%ebp)
f0115d23:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0115d27:	7e 81                	jle    f0115caa <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0115d29:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0115d30:	75 6e 61 
f0115d33:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0115d3a:	6c 00 00 
f0115d3d:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0115d43:	b9 17 00 00 00       	mov    $0x17,%ecx
f0115d48:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d4d:	89 d7                	mov    %edx,%edi
f0115d4f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0115d51:	83 ec 0c             	sub    $0xc,%esp
f0115d54:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0115d5a:	50                   	push   %eax
f0115d5b:	e8 2f af fe ff       	call   f0100c8f <execute_command>
f0115d60:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0115d63:	eb 10                	jmp    f0115d75 <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0115d65:	83 ec 0c             	sub    $0xc,%esp
f0115d68:	68 fc 9d 13 f0       	push   $0xf0139dfc
f0115d6d:	e8 bb ae fe ff       	call   f0100c2d <cprintf>
f0115d72:	83 c4 10             	add    $0x10,%esp
	}
}
f0115d75:	90                   	nop
f0115d76:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115d79:	5b                   	pop    %ebx
f0115d7a:	5e                   	pop    %esi
f0115d7b:	5f                   	pop    %edi
f0115d7c:	5d                   	pop    %ebp
f0115d7d:	c3                   	ret    

f0115d7e <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0115d7e:	55                   	push   %ebp
f0115d7f:	89 e5                	mov    %esp,%ebp
f0115d81:	57                   	push   %edi
f0115d82:	56                   	push   %esi
f0115d83:	53                   	push   %ebx
f0115d84:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0115d8a:	a0 ce fc 18 f0       	mov    0xf018fcce,%al
f0115d8f:	84 c0                	test   %al,%al
f0115d91:	0f 84 ac 09 00 00    	je     f0116743 <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0115d97:	c6 05 ce fc 18 f0 00 	movb   $0x0,0xf018fcce
		char command[100] = "load fos_add 20";
f0115d9e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115da4:	bb 38 9e 13 f0       	mov    $0xf0139e38,%ebx
f0115da9:	ba 04 00 00 00       	mov    $0x4,%edx
f0115dae:	89 c7                	mov    %eax,%edi
f0115db0:	89 de                	mov    %ebx,%esi
f0115db2:	89 d1                	mov    %edx,%ecx
f0115db4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115db6:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0115dbc:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115dc1:	b8 00 00 00 00       	mov    $0x0,%eax
f0115dc6:	89 d7                	mov    %edx,%edi
f0115dc8:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115dca:	83 ec 0c             	sub    $0xc,%esp
f0115dcd:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0115dd3:	50                   	push   %eax
f0115dd4:	e8 b6 ae fe ff       	call   f0100c8f <execute_command>
f0115dd9:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0115ddc:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115de2:	bb f4 a0 13 f0       	mov    $0xf013a0f4,%ebx
f0115de7:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115dec:	89 c7                	mov    %eax,%edi
f0115dee:	89 de                	mov    %ebx,%esi
f0115df0:	89 d1                	mov    %edx,%ecx
f0115df2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115df4:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0115dfa:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115dff:	b0 00                	mov    $0x0,%al
f0115e01:	89 d7                	mov    %edx,%edi
f0115e03:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115e05:	83 ec 0c             	sub    $0xc,%esp
f0115e08:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0115e0e:	50                   	push   %eax
f0115e0f:	e8 7b ae fe ff       	call   f0100c8f <execute_command>
f0115e14:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0115e17:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115e1d:	bb 58 a1 13 f0       	mov    $0xf013a158,%ebx
f0115e22:	ba 17 00 00 00       	mov    $0x17,%edx
f0115e27:	89 c7                	mov    %eax,%edi
f0115e29:	89 de                	mov    %ebx,%esi
f0115e2b:	89 d1                	mov    %edx,%ecx
f0115e2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115e2f:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0115e35:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115e3a:	b0 00                	mov    $0x0,%al
f0115e3c:	89 d7                	mov    %edx,%edi
f0115e3e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115e40:	83 ec 0c             	sub    $0xc,%esp
f0115e43:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0115e49:	50                   	push   %eax
f0115e4a:	e8 40 ae fe ff       	call   f0100c8f <execute_command>
f0115e4f:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115e52:	83 ec 04             	sub    $0x4,%esp
f0115e55:	6a 00                	push   $0x0
f0115e57:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0115e5a:	50                   	push   %eax
f0115e5b:	68 00 10 00 00       	push   $0x1000
f0115e60:	e8 42 2f ff ff       	call   f0108da7 <envid2env>
f0115e65:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115e68:	83 ec 04             	sub    $0x4,%esp
f0115e6b:	6a 00                	push   $0x0
f0115e6d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0115e70:	50                   	push   %eax
f0115e71:	68 01 10 00 00       	push   $0x1001
f0115e76:	e8 2c 2f ff ff       	call   f0108da7 <envid2env>
f0115e7b:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115e7e:	83 ec 04             	sub    $0x4,%esp
f0115e81:	6a 00                	push   $0x0
f0115e83:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0115e86:	50                   	push   %eax
f0115e87:	68 02 10 00 00       	push   $0x1002
f0115e8c:	e8 16 2f ff ff       	call   f0108da7 <envid2env>
f0115e91:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115e94:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e97:	85 c0                	test   %eax,%eax
f0115e99:	74 0e                	je     f0115ea9 <test_priority_normal_and_lower+0x12b>
f0115e9b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115e9e:	85 c0                	test   %eax,%eax
f0115ea0:	74 07                	je     f0115ea9 <test_priority_normal_and_lower+0x12b>
f0115ea2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115ea5:	85 c0                	test   %eax,%eax
f0115ea7:	75 17                	jne    f0115ec0 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0115ea9:	83 ec 04             	sub    $0x4,%esp
f0115eac:	68 d8 9b 13 f0       	push   $0xf0139bd8
f0115eb1:	68 eb 00 00 00       	push   $0xeb
f0115eb6:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115ebb:	e8 e6 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115ec0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115ec3:	8b 40 74             	mov    0x74(%eax),%eax
f0115ec6:	83 f8 14             	cmp    $0x14,%eax
f0115ec9:	75 16                	jne    f0115ee1 <test_priority_normal_and_lower+0x163>
f0115ecb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115ece:	8b 40 74             	mov    0x74(%eax),%eax
f0115ed1:	83 f8 1e             	cmp    $0x1e,%eax
f0115ed4:	75 0b                	jne    f0115ee1 <test_priority_normal_and_lower+0x163>
f0115ed6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115ed9:	8b 40 74             	mov    0x74(%eax),%eax
f0115edc:	83 f8 28             	cmp    $0x28,%eax
f0115edf:	74 17                	je     f0115ef8 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0115ee1:	83 ec 04             	sub    $0x4,%esp
f0115ee4:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0115ee9:	68 ee 00 00 00       	push   $0xee
f0115eee:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0115ef3:	e8 ae a2 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f0115ef8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115eff:	eb 43                	jmp    f0115f44 <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f01:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0115f04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f07:	89 d0                	mov    %edx,%eax
f0115f09:	01 c0                	add    %eax,%eax
f0115f0b:	01 d0                	add    %edx,%eax
f0115f0d:	c1 e0 03             	shl    $0x3,%eax
f0115f10:	01 c8                	add    %ecx,%eax
f0115f12:	83 c0 78             	add    $0x78,%eax
f0115f15:	8b 10                	mov    (%eax),%edx
f0115f17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f1a:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f21:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0115f24:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115f27:	89 d0                	mov    %edx,%eax
f0115f29:	01 c0                	add    %eax,%eax
f0115f2b:	01 d0                	add    %edx,%eax
f0115f2d:	c1 e0 03             	shl    $0x3,%eax
f0115f30:	01 c8                	add    %ecx,%eax
f0115f32:	83 e8 80             	sub    $0xffffff80,%eax
f0115f35:	8b 10                	mov    (%eax),%edx
f0115f37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115f3a:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115f41:	ff 45 e4             	incl   -0x1c(%ebp)
f0115f44:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115f48:	7e b7                	jle    f0115f01 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115f4a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115f51:	eb 43                	jmp    f0115f96 <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f53:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0115f56:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115f59:	89 d0                	mov    %edx,%eax
f0115f5b:	01 c0                	add    %eax,%eax
f0115f5d:	01 d0                	add    %edx,%eax
f0115f5f:	c1 e0 03             	shl    $0x3,%eax
f0115f62:	01 c8                	add    %ecx,%eax
f0115f64:	83 c0 78             	add    $0x78,%eax
f0115f67:	8b 10                	mov    (%eax),%edx
f0115f69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f6c:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f73:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0115f76:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115f79:	89 d0                	mov    %edx,%eax
f0115f7b:	01 c0                	add    %eax,%eax
f0115f7d:	01 d0                	add    %edx,%eax
f0115f7f:	c1 e0 03             	shl    $0x3,%eax
f0115f82:	01 c8                	add    %ecx,%eax
f0115f84:	83 e8 80             	sub    $0xffffff80,%eax
f0115f87:	8b 10                	mov    (%eax),%edx
f0115f89:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115f8c:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0115f93:	ff 45 e0             	incl   -0x20(%ebp)
f0115f96:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0115f9a:	7e b7                	jle    f0115f53 <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0115f9c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115fa3:	eb 43                	jmp    f0115fe8 <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115fa5:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0115fa8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115fab:	89 d0                	mov    %edx,%eax
f0115fad:	01 c0                	add    %eax,%eax
f0115faf:	01 d0                	add    %edx,%eax
f0115fb1:	c1 e0 03             	shl    $0x3,%eax
f0115fb4:	01 c8                	add    %ecx,%eax
f0115fb6:	83 c0 78             	add    $0x78,%eax
f0115fb9:	8b 10                	mov    (%eax),%edx
f0115fbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115fbe:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115fc5:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0115fc8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115fcb:	89 d0                	mov    %edx,%eax
f0115fcd:	01 c0                	add    %eax,%eax
f0115fcf:	01 d0                	add    %edx,%eax
f0115fd1:	c1 e0 03             	shl    $0x3,%eax
f0115fd4:	01 c8                	add    %ecx,%eax
f0115fd6:	83 e8 80             	sub    $0xffffff80,%eax
f0115fd9:	8b 10                	mov    (%eax),%edx
f0115fdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115fde:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0115fe5:	ff 45 dc             	incl   -0x24(%ebp)
f0115fe8:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0115fec:	7e b7                	jle    f0115fa5 <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115fee:	e8 a5 5d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0115ff3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0115ff6:	e8 91 dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0115ffb:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115ffe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116001:	83 ec 08             	sub    $0x8,%esp
f0116004:	6a 03                	push   $0x3
f0116006:	50                   	push   %eax
f0116007:	e8 82 42 ff ff       	call   f010a28e <set_program_priority>
f011600c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011600f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116012:	83 ec 08             	sub    $0x8,%esp
f0116015:	6a 03                	push   $0x3
f0116017:	50                   	push   %eax
f0116018:	e8 71 42 ff ff       	call   f010a28e <set_program_priority>
f011601d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116020:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116023:	83 ec 08             	sub    $0x8,%esp
f0116026:	6a 03                	push   $0x3
f0116028:	50                   	push   %eax
f0116029:	e8 60 42 ff ff       	call   f010a28e <set_program_priority>
f011602e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116031:	e8 56 dc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116036:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116039:	74 17                	je     f0116052 <test_priority_normal_and_lower+0x2d4>
f011603b:	83 ec 04             	sub    $0x4,%esp
f011603e:	68 58 9c 13 f0       	push   $0xf0139c58
f0116043:	68 0a 01 00 00       	push   $0x10a
f0116048:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011604d:	e8 54 a1 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116052:	e8 41 5d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116057:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011605a:	74 17                	je     f0116073 <test_priority_normal_and_lower+0x2f5>
f011605c:	83 ec 04             	sub    $0x4,%esp
f011605f:	68 58 9c 13 f0       	push   $0xf0139c58
f0116064:	68 0b 01 00 00       	push   $0x10b
f0116069:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011606e:	e8 33 a1 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116073:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116076:	8b 40 74             	mov    0x74(%eax),%eax
f0116079:	83 f8 14             	cmp    $0x14,%eax
f011607c:	75 16                	jne    f0116094 <test_priority_normal_and_lower+0x316>
f011607e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116081:	8b 40 74             	mov    0x74(%eax),%eax
f0116084:	83 f8 1e             	cmp    $0x1e,%eax
f0116087:	75 0b                	jne    f0116094 <test_priority_normal_and_lower+0x316>
f0116089:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011608c:	8b 40 74             	mov    0x74(%eax),%eax
f011608f:	83 f8 28             	cmp    $0x28,%eax
f0116092:	74 17                	je     f01160ab <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116094:	83 ec 04             	sub    $0x4,%esp
f0116097:	68 84 9c 13 f0       	push   $0xf0139c84
f011609c:	68 0e 01 00 00       	push   $0x10e
f01160a1:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01160a6:	e8 fb a0 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f01160ab:	e8 e8 5c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01160b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160b3:	e8 d4 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01160b8:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01160bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160be:	83 ec 08             	sub    $0x8,%esp
f01160c1:	6a 02                	push   $0x2
f01160c3:	50                   	push   %eax
f01160c4:	e8 c5 41 ff ff       	call   f010a28e <set_program_priority>
f01160c9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01160cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01160cf:	83 ec 08             	sub    $0x8,%esp
f01160d2:	6a 02                	push   $0x2
f01160d4:	50                   	push   %eax
f01160d5:	e8 b4 41 ff ff       	call   f010a28e <set_program_priority>
f01160da:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01160dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01160e0:	83 ec 08             	sub    $0x8,%esp
f01160e3:	6a 02                	push   $0x2
f01160e5:	50                   	push   %eax
f01160e6:	e8 a3 41 ff ff       	call   f010a28e <set_program_priority>
f01160eb:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160ee:	e8 99 db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01160f3:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01160f6:	74 17                	je     f011610f <test_priority_normal_and_lower+0x391>
f01160f8:	83 ec 04             	sub    $0x4,%esp
f01160fb:	68 58 9c 13 f0       	push   $0xf0139c58
f0116100:	68 18 01 00 00       	push   $0x118
f0116105:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011610a:	e8 97 a0 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011610f:	e8 84 5c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116114:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116117:	74 21                	je     f011613a <test_priority_normal_and_lower+0x3bc>
f0116119:	e8 7a 5c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011611e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116121:	29 c2                	sub    %eax,%edx
f0116123:	89 d0                	mov    %edx,%eax
f0116125:	50                   	push   %eax
f0116126:	68 d8 9c 13 f0       	push   $0xf0139cd8
f011612b:	68 19 01 00 00       	push   $0x119
f0116130:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116135:	e8 6c a0 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011613a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011613d:	8b 40 74             	mov    0x74(%eax),%eax
f0116140:	83 f8 0a             	cmp    $0xa,%eax
f0116143:	75 16                	jne    f011615b <test_priority_normal_and_lower+0x3dd>
f0116145:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116148:	8b 40 74             	mov    0x74(%eax),%eax
f011614b:	83 f8 0f             	cmp    $0xf,%eax
f011614e:	75 0b                	jne    f011615b <test_priority_normal_and_lower+0x3dd>
f0116150:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116153:	8b 40 74             	mov    0x74(%eax),%eax
f0116156:	83 f8 14             	cmp    $0x14,%eax
f0116159:	74 17                	je     f0116172 <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f011615b:	83 ec 04             	sub    $0x4,%esp
f011615e:	68 08 9d 13 f0       	push   $0xf0139d08
f0116163:	68 1c 01 00 00       	push   $0x11c
f0116168:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011616d:	e8 34 a0 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116172:	e8 21 5c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116177:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011617a:	e8 0d db fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011617f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116182:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116185:	83 ec 08             	sub    $0x8,%esp
f0116188:	6a 02                	push   $0x2
f011618a:	50                   	push   %eax
f011618b:	e8 fe 40 ff ff       	call   f010a28e <set_program_priority>
f0116190:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116193:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116196:	83 ec 08             	sub    $0x8,%esp
f0116199:	6a 02                	push   $0x2
f011619b:	50                   	push   %eax
f011619c:	e8 ed 40 ff ff       	call   f010a28e <set_program_priority>
f01161a1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01161a4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01161a7:	83 ec 08             	sub    $0x8,%esp
f01161aa:	6a 02                	push   $0x2
f01161ac:	50                   	push   %eax
f01161ad:	e8 dc 40 ff ff       	call   f010a28e <set_program_priority>
f01161b2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161b5:	e8 d2 da fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01161ba:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01161bd:	74 17                	je     f01161d6 <test_priority_normal_and_lower+0x458>
f01161bf:	83 ec 04             	sub    $0x4,%esp
f01161c2:	68 58 9c 13 f0       	push   $0xf0139c58
f01161c7:	68 26 01 00 00       	push   $0x126
f01161cc:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01161d1:	e8 d0 9f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01161d6:	e8 bd 5b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01161db:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01161de:	74 21                	je     f0116201 <test_priority_normal_and_lower+0x483>
f01161e0:	e8 b3 5b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01161e5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01161e8:	29 c2                	sub    %eax,%edx
f01161ea:	89 d0                	mov    %edx,%eax
f01161ec:	50                   	push   %eax
f01161ed:	68 d8 9c 13 f0       	push   $0xf0139cd8
f01161f2:	68 27 01 00 00       	push   $0x127
f01161f7:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01161fc:	e8 a5 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116201:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116204:	8b 40 74             	mov    0x74(%eax),%eax
f0116207:	83 f8 0a             	cmp    $0xa,%eax
f011620a:	75 16                	jne    f0116222 <test_priority_normal_and_lower+0x4a4>
f011620c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011620f:	8b 40 74             	mov    0x74(%eax),%eax
f0116212:	83 f8 0f             	cmp    $0xf,%eax
f0116215:	75 0b                	jne    f0116222 <test_priority_normal_and_lower+0x4a4>
f0116217:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011621a:	8b 40 74             	mov    0x74(%eax),%eax
f011621d:	83 f8 0a             	cmp    $0xa,%eax
f0116220:	74 17                	je     f0116239 <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116222:	83 ec 04             	sub    $0x4,%esp
f0116225:	68 08 9d 13 f0       	push   $0xf0139d08
f011622a:	68 2a 01 00 00       	push   $0x12a
f011622f:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116234:	e8 6d 9f fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f0116239:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116240:	eb 79                	jmp    f01162bb <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116242:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116245:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011624c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011624f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116252:	89 d0                	mov    %edx,%eax
f0116254:	01 c0                	add    %eax,%eax
f0116256:	01 d0                	add    %edx,%eax
f0116258:	c1 e0 03             	shl    $0x3,%eax
f011625b:	01 d8                	add    %ebx,%eax
f011625d:	83 c0 78             	add    $0x78,%eax
f0116260:	8b 00                	mov    (%eax),%eax
f0116262:	39 c1                	cmp    %eax,%ecx
f0116264:	74 17                	je     f011627d <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f0116266:	83 ec 04             	sub    $0x4,%esp
f0116269:	68 c8 9d 13 f0       	push   $0xf0139dc8
f011626e:	68 2f 01 00 00       	push   $0x12f
f0116273:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116278:	e8 29 9f fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011627d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116280:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116287:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011628a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011628d:	89 d0                	mov    %edx,%eax
f011628f:	01 c0                	add    %eax,%eax
f0116291:	01 d0                	add    %edx,%eax
f0116293:	c1 e0 03             	shl    $0x3,%eax
f0116296:	01 d8                	add    %ebx,%eax
f0116298:	83 e8 80             	sub    $0xffffff80,%eax
f011629b:	8b 00                	mov    (%eax),%eax
f011629d:	39 c1                	cmp    %eax,%ecx
f011629f:	74 17                	je     f01162b8 <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f01162a1:	83 ec 04             	sub    $0x4,%esp
f01162a4:	68 c8 9d 13 f0       	push   $0xf0139dc8
f01162a9:	68 32 01 00 00       	push   $0x132
f01162ae:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01162b3:	e8 ee 9e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01162b8:	ff 45 d8             	incl   -0x28(%ebp)
f01162bb:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01162bf:	7e 81                	jle    f0116242 <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01162c1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01162c8:	eb 79                	jmp    f0116343 <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01162ca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01162cd:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01162d4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01162d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01162da:	89 d0                	mov    %edx,%eax
f01162dc:	01 c0                	add    %eax,%eax
f01162de:	01 d0                	add    %edx,%eax
f01162e0:	c1 e0 03             	shl    $0x3,%eax
f01162e3:	01 d8                	add    %ebx,%eax
f01162e5:	83 c0 78             	add    $0x78,%eax
f01162e8:	8b 00                	mov    (%eax),%eax
f01162ea:	39 c1                	cmp    %eax,%ecx
f01162ec:	74 17                	je     f0116305 <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f01162ee:	83 ec 04             	sub    $0x4,%esp
f01162f1:	68 c8 9d 13 f0       	push   $0xf0139dc8
f01162f6:	68 38 01 00 00       	push   $0x138
f01162fb:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116300:	e8 a1 9e fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116305:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116308:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011630f:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116312:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116315:	89 d0                	mov    %edx,%eax
f0116317:	01 c0                	add    %eax,%eax
f0116319:	01 d0                	add    %edx,%eax
f011631b:	c1 e0 03             	shl    $0x3,%eax
f011631e:	01 d8                	add    %ebx,%eax
f0116320:	83 e8 80             	sub    $0xffffff80,%eax
f0116323:	8b 00                	mov    (%eax),%eax
f0116325:	39 c1                	cmp    %eax,%ecx
f0116327:	74 17                	je     f0116340 <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f0116329:	83 ec 04             	sub    $0x4,%esp
f011632c:	68 c8 9d 13 f0       	push   $0xf0139dc8
f0116331:	68 3b 01 00 00       	push   $0x13b
f0116336:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011633b:	e8 66 9e fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116340:	ff 45 d4             	incl   -0x2c(%ebp)
f0116343:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116347:	7e 81                	jle    f01162ca <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116349:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116350:	eb 79                	jmp    f01163cb <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116352:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116355:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011635c:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011635f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116362:	89 d0                	mov    %edx,%eax
f0116364:	01 c0                	add    %eax,%eax
f0116366:	01 d0                	add    %edx,%eax
f0116368:	c1 e0 03             	shl    $0x3,%eax
f011636b:	01 d8                	add    %ebx,%eax
f011636d:	83 c0 78             	add    $0x78,%eax
f0116370:	8b 00                	mov    (%eax),%eax
f0116372:	39 c1                	cmp    %eax,%ecx
f0116374:	74 17                	je     f011638d <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f0116376:	83 ec 04             	sub    $0x4,%esp
f0116379:	68 c8 9d 13 f0       	push   $0xf0139dc8
f011637e:	68 41 01 00 00       	push   $0x141
f0116383:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116388:	e8 19 9e fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011638d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116390:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116397:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011639a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011639d:	89 d0                	mov    %edx,%eax
f011639f:	01 c0                	add    %eax,%eax
f01163a1:	01 d0                	add    %edx,%eax
f01163a3:	c1 e0 03             	shl    $0x3,%eax
f01163a6:	01 d8                	add    %ebx,%eax
f01163a8:	83 e8 80             	sub    $0xffffff80,%eax
f01163ab:	8b 00                	mov    (%eax),%eax
f01163ad:	39 c1                	cmp    %eax,%ecx
f01163af:	74 17                	je     f01163c8 <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f01163b1:	83 ec 04             	sub    $0x4,%esp
f01163b4:	68 c8 9d 13 f0       	push   $0xf0139dc8
f01163b9:	68 44 01 00 00       	push   $0x144
f01163be:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01163c3:	e8 de 9d fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01163c8:	ff 45 d0             	incl   -0x30(%ebp)
f01163cb:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01163cf:	7e 81                	jle    f0116352 <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01163d1:	e8 c2 59 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01163d6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163d9:	e8 ae d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01163de:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01163e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163e4:	83 ec 08             	sub    $0x8,%esp
f01163e7:	6a 01                	push   $0x1
f01163e9:	50                   	push   %eax
f01163ea:	e8 9f 3e ff ff       	call   f010a28e <set_program_priority>
f01163ef:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01163f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163f5:	83 ec 08             	sub    $0x8,%esp
f01163f8:	6a 01                	push   $0x1
f01163fa:	50                   	push   %eax
f01163fb:	e8 8e 3e ff ff       	call   f010a28e <set_program_priority>
f0116400:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116403:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116406:	83 ec 08             	sub    $0x8,%esp
f0116409:	6a 01                	push   $0x1
f011640b:	50                   	push   %eax
f011640c:	e8 7d 3e ff ff       	call   f010a28e <set_program_priority>
f0116411:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116414:	e8 73 d8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116419:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011641c:	74 17                	je     f0116435 <test_priority_normal_and_lower+0x6b7>
f011641e:	83 ec 04             	sub    $0x4,%esp
f0116421:	68 58 9c 13 f0       	push   $0xf0139c58
f0116426:	68 4d 01 00 00       	push   $0x14d
f011642b:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116430:	e8 71 9d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116435:	e8 5e 59 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011643a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011643d:	83 f8 0d             	cmp    $0xd,%eax
f0116440:	74 17                	je     f0116459 <test_priority_normal_and_lower+0x6db>
f0116442:	83 ec 04             	sub    $0x4,%esp
f0116445:	68 64 9f 13 f0       	push   $0xf0139f64
f011644a:	68 4e 01 00 00       	push   $0x14e
f011644f:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116454:	e8 4d 9d fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116459:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011645c:	8b 40 74             	mov    0x74(%eax),%eax
f011645f:	83 f8 05             	cmp    $0x5,%eax
f0116462:	75 16                	jne    f011647a <test_priority_normal_and_lower+0x6fc>
f0116464:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116467:	8b 40 74             	mov    0x74(%eax),%eax
f011646a:	83 f8 07             	cmp    $0x7,%eax
f011646d:	75 0b                	jne    f011647a <test_priority_normal_and_lower+0x6fc>
f011646f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116472:	8b 40 74             	mov    0x74(%eax),%eax
f0116475:	83 f8 05             	cmp    $0x5,%eax
f0116478:	74 17                	je     f0116491 <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f011647a:	83 ec 04             	sub    $0x4,%esp
f011647d:	68 ac 9f 13 f0       	push   $0xf0139fac
f0116482:	68 51 01 00 00       	push   $0x151
f0116487:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011648c:	e8 15 9d fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116491:	e8 02 59 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116496:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116499:	e8 ee d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011649e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01164a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164a4:	83 ec 08             	sub    $0x8,%esp
f01164a7:	6a 01                	push   $0x1
f01164a9:	50                   	push   %eax
f01164aa:	e8 df 3d ff ff       	call   f010a28e <set_program_priority>
f01164af:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164b2:	e8 d5 d7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01164b7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01164ba:	74 17                	je     f01164d3 <test_priority_normal_and_lower+0x755>
f01164bc:	83 ec 04             	sub    $0x4,%esp
f01164bf:	68 58 9c 13 f0       	push   $0xf0139c58
f01164c4:	68 57 01 00 00       	push   $0x157
f01164c9:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01164ce:	e8 d3 9c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01164d3:	e8 c0 58 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01164d8:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01164db:	83 f8 03             	cmp    $0x3,%eax
f01164de:	74 17                	je     f01164f7 <test_priority_normal_and_lower+0x779>
f01164e0:	83 ec 04             	sub    $0x4,%esp
f01164e3:	68 58 9c 13 f0       	push   $0xf0139c58
f01164e8:	68 58 01 00 00       	push   $0x158
f01164ed:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01164f2:	e8 af 9c fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01164f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164fa:	8b 40 74             	mov    0x74(%eax),%eax
f01164fd:	83 f8 02             	cmp    $0x2,%eax
f0116500:	75 16                	jne    f0116518 <test_priority_normal_and_lower+0x79a>
f0116502:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116505:	8b 40 74             	mov    0x74(%eax),%eax
f0116508:	83 f8 07             	cmp    $0x7,%eax
f011650b:	75 0b                	jne    f0116518 <test_priority_normal_and_lower+0x79a>
f011650d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116510:	8b 40 74             	mov    0x74(%eax),%eax
f0116513:	83 f8 05             	cmp    $0x5,%eax
f0116516:	74 17                	je     f011652f <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f0116518:	83 ec 04             	sub    $0x4,%esp
f011651b:	68 8c 9d 13 f0       	push   $0xf0139d8c
f0116520:	68 5b 01 00 00       	push   $0x15b
f0116525:	68 f1 9b 13 f0       	push   $0xf0139bf1
f011652a:	e8 77 9c fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f011652f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116536:	eb 7f                	jmp    f01165b7 <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116538:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011653b:	83 c0 08             	add    $0x8,%eax
f011653e:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116545:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116548:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011654b:	89 d0                	mov    %edx,%eax
f011654d:	01 c0                	add    %eax,%eax
f011654f:	01 d0                	add    %edx,%eax
f0116551:	c1 e0 03             	shl    $0x3,%eax
f0116554:	01 d8                	add    %ebx,%eax
f0116556:	83 c0 78             	add    $0x78,%eax
f0116559:	8b 00                	mov    (%eax),%eax
f011655b:	39 c1                	cmp    %eax,%ecx
f011655d:	74 17                	je     f0116576 <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011655f:	83 ec 04             	sub    $0x4,%esp
f0116562:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0116567:	68 60 01 00 00       	push   $0x160
f011656c:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116571:	e8 30 9c fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116576:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116579:	83 c0 08             	add    $0x8,%eax
f011657c:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116583:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116586:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116589:	89 d0                	mov    %edx,%eax
f011658b:	01 c0                	add    %eax,%eax
f011658d:	01 d0                	add    %edx,%eax
f011658f:	c1 e0 03             	shl    $0x3,%eax
f0116592:	01 d8                	add    %ebx,%eax
f0116594:	83 e8 80             	sub    $0xffffff80,%eax
f0116597:	8b 00                	mov    (%eax),%eax
f0116599:	39 c1                	cmp    %eax,%ecx
f011659b:	74 17                	je     f01165b4 <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011659d:	83 ec 04             	sub    $0x4,%esp
f01165a0:	68 dc 9f 13 f0       	push   $0xf0139fdc
f01165a5:	68 63 01 00 00       	push   $0x163
f01165aa:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01165af:	e8 f2 9b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01165b4:	ff 45 cc             	incl   -0x34(%ebp)
f01165b7:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01165bb:	0f 8e 77 ff ff ff    	jle    f0116538 <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01165c1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01165c8:	eb 7f                	jmp    f0116649 <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01165ca:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01165cd:	83 c0 03             	add    $0x3,%eax
f01165d0:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01165d7:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01165da:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01165dd:	89 d0                	mov    %edx,%eax
f01165df:	01 c0                	add    %eax,%eax
f01165e1:	01 d0                	add    %edx,%eax
f01165e3:	c1 e0 03             	shl    $0x3,%eax
f01165e6:	01 d8                	add    %ebx,%eax
f01165e8:	83 c0 78             	add    $0x78,%eax
f01165eb:	8b 00                	mov    (%eax),%eax
f01165ed:	39 c1                	cmp    %eax,%ecx
f01165ef:	74 17                	je     f0116608 <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01165f1:	ff 75 c8             	pushl  -0x38(%ebp)
f01165f4:	68 48 a0 13 f0       	push   $0xf013a048
f01165f9:	68 69 01 00 00       	push   $0x169
f01165fe:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116603:	e8 9e 9b fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116608:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011660b:	83 c0 03             	add    $0x3,%eax
f011660e:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116615:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0116618:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011661b:	89 d0                	mov    %edx,%eax
f011661d:	01 c0                	add    %eax,%eax
f011661f:	01 d0                	add    %edx,%eax
f0116621:	c1 e0 03             	shl    $0x3,%eax
f0116624:	01 d8                	add    %ebx,%eax
f0116626:	83 e8 80             	sub    $0xffffff80,%eax
f0116629:	8b 00                	mov    (%eax),%eax
f011662b:	39 c1                	cmp    %eax,%ecx
f011662d:	74 17                	je     f0116646 <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011662f:	83 ec 04             	sub    $0x4,%esp
f0116632:	68 dc 9f 13 f0       	push   $0xf0139fdc
f0116637:	68 6c 01 00 00       	push   $0x16c
f011663c:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116641:	e8 60 9b fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116646:	ff 45 c8             	incl   -0x38(%ebp)
f0116649:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011664d:	0f 8e 77 ff ff ff    	jle    f01165ca <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116653:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011665a:	eb 7f                	jmp    f01166db <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011665c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011665f:	83 c0 05             	add    $0x5,%eax
f0116662:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116669:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011666c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011666f:	89 d0                	mov    %edx,%eax
f0116671:	01 c0                	add    %eax,%eax
f0116673:	01 d0                	add    %edx,%eax
f0116675:	c1 e0 03             	shl    $0x3,%eax
f0116678:	01 d8                	add    %ebx,%eax
f011667a:	83 c0 78             	add    $0x78,%eax
f011667d:	8b 00                	mov    (%eax),%eax
f011667f:	39 c1                	cmp    %eax,%ecx
f0116681:	74 17                	je     f011669a <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116683:	83 ec 04             	sub    $0x4,%esp
f0116686:	68 dc 9f 13 f0       	push   $0xf0139fdc
f011668b:	68 72 01 00 00       	push   $0x172
f0116690:	68 f1 9b 13 f0       	push   $0xf0139bf1
f0116695:	e8 0c 9b fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011669a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011669d:	83 c0 05             	add    $0x5,%eax
f01166a0:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01166a7:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01166aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01166ad:	89 d0                	mov    %edx,%eax
f01166af:	01 c0                	add    %eax,%eax
f01166b1:	01 d0                	add    %edx,%eax
f01166b3:	c1 e0 03             	shl    $0x3,%eax
f01166b6:	01 d8                	add    %ebx,%eax
f01166b8:	83 e8 80             	sub    $0xffffff80,%eax
f01166bb:	8b 00                	mov    (%eax),%eax
f01166bd:	39 c1                	cmp    %eax,%ecx
f01166bf:	74 17                	je     f01166d8 <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01166c1:	83 ec 04             	sub    $0x4,%esp
f01166c4:	68 dc 9f 13 f0       	push   $0xf0139fdc
f01166c9:	68 75 01 00 00       	push   $0x175
f01166ce:	68 f1 9b 13 f0       	push   $0xf0139bf1
f01166d3:	e8 ce 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01166d8:	ff 45 c4             	incl   -0x3c(%ebp)
f01166db:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01166df:	0f 8e 77 ff ff ff    	jle    f011665c <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01166e5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166e8:	83 ec 08             	sub    $0x8,%esp
f01166eb:	6a 05                	push   $0x5
f01166ed:	50                   	push   %eax
f01166ee:	e8 9b 3b ff ff       	call   f010a28e <set_program_priority>
f01166f3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01166f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01166f9:	83 ec 08             	sub    $0x8,%esp
f01166fc:	6a 05                	push   $0x5
f01166fe:	50                   	push   %eax
f01166ff:	e8 8a 3b ff ff       	call   f010a28e <set_program_priority>
f0116704:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116707:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011670e:	75 6e 61 
f0116711:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116718:	6c 00 00 
f011671b:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116721:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116726:	b8 00 00 00 00       	mov    $0x0,%eax
f011672b:	89 d7                	mov    %edx,%edi
f011672d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011672f:	83 ec 0c             	sub    $0xc,%esp
f0116732:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116738:	50                   	push   %eax
f0116739:	e8 51 a5 fe ff       	call   f0100c8f <execute_command>
f011673e:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116741:	eb 10                	jmp    f0116753 <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116743:	83 ec 0c             	sub    $0xc,%esp
f0116746:	68 b8 a0 13 f0       	push   $0xf013a0b8
f011674b:	e8 dd a4 fe ff       	call   f0100c2d <cprintf>
f0116750:	83 c4 10             	add    $0x10,%esp
	}
}
f0116753:	90                   	nop
f0116754:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116757:	5b                   	pop    %ebx
f0116758:	5e                   	pop    %esi
f0116759:	5f                   	pop    %edi
f011675a:	5d                   	pop    %ebp
f011675b:	c3                   	ret    

f011675c <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f011675c:	55                   	push   %ebp
f011675d:	89 e5                	mov    %esp,%ebp
f011675f:	a1 b8 74 6e f0       	mov    0xf06e74b8,%eax
f0116764:	83 f8 03             	cmp    $0x3,%eax
f0116767:	75 04                	jne    f011676d <isKHeapPlacementStrategyNEXTFIT+0x11>
f0116769:	b0 01                	mov    $0x1,%al
f011676b:	eb 02                	jmp    f011676f <isKHeapPlacementStrategyNEXTFIT+0x13>
f011676d:	b0 00                	mov    $0x0,%al
f011676f:	5d                   	pop    %ebp
f0116770:	c3                   	ret    

f0116771 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0116771:	55                   	push   %ebp
f0116772:	89 e5                	mov    %esp,%ebp
f0116774:	57                   	push   %edi
f0116775:	53                   	push   %ebx
f0116776:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f011677c:	83 ec 0c             	sub    $0xc,%esp
f011677f:	68 bc a1 13 f0       	push   $0xf013a1bc
f0116784:	e8 a4 a4 fe ff       	call   f0100c2d <cprintf>
f0116789:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011678c:	83 ec 0c             	sub    $0xc,%esp
f011678f:	68 ec a1 13 f0       	push   $0xf013a1ec
f0116794:	e8 94 a4 fe ff       	call   f0100c2d <cprintf>
f0116799:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011679c:	83 ec 0c             	sub    $0xc,%esp
f011679f:	68 bc a1 13 f0       	push   $0xf013a1bc
f01167a4:	e8 84 a4 fe ff       	call   f0100c2d <cprintf>
f01167a9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01167ac:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01167b0:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01167b4:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01167ba:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01167c0:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01167c7:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01167ce:	e8 c5 55 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01167d3:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01167d6:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f01167dc:	b9 14 00 00 00       	mov    $0x14,%ecx
f01167e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01167e6:	89 d7                	mov    %edx,%edi
f01167e8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01167ea:	e8 a9 55 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01167ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01167f2:	e8 95 d4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01167f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01167fa:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116801:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116804:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116809:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011680c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011680f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116814:	f7 75 d4             	divl   -0x2c(%ebp)
f0116817:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011681a:	29 d0                	sub    %edx,%eax
f011681c:	89 c1                	mov    %eax,%ecx
f011681e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116825:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011682a:	0f b6 d0             	movzbl %al,%edx
f011682d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116830:	01 d0                	add    %edx,%eax
f0116832:	48                   	dec    %eax
f0116833:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116836:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116839:	ba 00 00 00 00       	mov    $0x0,%edx
f011683e:	f7 75 cc             	divl   -0x34(%ebp)
f0116841:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116844:	29 d0                	sub    %edx,%eax
f0116846:	01 c1                	add    %eax,%ecx
f0116848:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011684f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116854:	0f b6 c0             	movzbl %al,%eax
f0116857:	c1 e0 04             	shl    $0x4,%eax
f011685a:	89 c2                	mov    %eax,%edx
f011685c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011685f:	01 d0                	add    %edx,%eax
f0116861:	48                   	dec    %eax
f0116862:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116865:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116868:	ba 00 00 00 00       	mov    $0x0,%edx
f011686d:	f7 75 c4             	divl   -0x3c(%ebp)
f0116870:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116873:	29 d0                	sub    %edx,%eax
f0116875:	01 c8                	add    %ecx,%eax
f0116877:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011687c:	29 c2                	sub    %eax,%edx
f011687e:	89 d0                	mov    %edx,%eax
f0116880:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0116883:	83 ec 0c             	sub    $0xc,%esp
f0116886:	ff 75 bc             	pushl  -0x44(%ebp)
f0116889:	e8 4e 0b ff ff       	call   f01073dc <kmalloc>
f011688e:	83 c4 10             	add    $0x10,%esp
f0116891:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0116897:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011689d:	85 c0                	test   %eax,%eax
f011689f:	74 14                	je     f01168b5 <test_kmalloc+0x144>
f01168a1:	83 ec 04             	sub    $0x4,%esp
f01168a4:	68 48 a2 13 f0       	push   $0xf013a248
f01168a9:	6a 40                	push   $0x40
f01168ab:	68 7a a2 13 f0       	push   $0xf013a27a
f01168b0:	e8 f1 98 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01168b5:	e8 d2 d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01168ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01168bd:	74 14                	je     f01168d3 <test_kmalloc+0x162>
f01168bf:	83 ec 04             	sub    $0x4,%esp
f01168c2:	68 94 a2 13 f0       	push   $0xf013a294
f01168c7:	6a 41                	push   $0x41
f01168c9:	68 7a a2 13 f0       	push   $0xf013a27a
f01168ce:	e8 d3 98 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01168d3:	e8 c0 54 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01168d8:	89 c2                	mov    %eax,%edx
f01168da:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01168dd:	39 c2                	cmp    %eax,%edx
f01168df:	74 14                	je     f01168f5 <test_kmalloc+0x184>
f01168e1:	83 ec 04             	sub    $0x4,%esp
f01168e4:	68 fc a2 13 f0       	push   $0xf013a2fc
f01168e9:	6a 42                	push   $0x42
f01168eb:	68 7a a2 13 f0       	push   $0xf013a27a
f01168f0:	e8 b1 98 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01168f5:	83 ec 0c             	sub    $0xc,%esp
f01168f8:	68 3c a3 13 f0       	push   $0xf013a33c
f01168fd:	e8 2b a3 fe ff       	call   f0100c2d <cprintf>
f0116902:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116905:	e8 8e 54 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011690a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011690d:	e8 7a d3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116912:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116915:	83 ec 0c             	sub    $0xc,%esp
f0116918:	68 00 fc 1f 00       	push   $0x1ffc00
f011691d:	e8 ba 0a ff ff       	call   f01073dc <kmalloc>
f0116922:	83 c4 10             	add    $0x10,%esp
f0116925:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011692b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116931:	89 c1                	mov    %eax,%ecx
f0116933:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011693a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011693d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116942:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0116945:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116948:	ba 00 00 00 00       	mov    $0x0,%edx
f011694d:	f7 75 b8             	divl   -0x48(%ebp)
f0116950:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116953:	29 d0                	sub    %edx,%eax
f0116955:	89 c3                	mov    %eax,%ebx
f0116957:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011695e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116963:	0f b6 d0             	movzbl %al,%edx
f0116966:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116969:	01 d0                	add    %edx,%eax
f011696b:	48                   	dec    %eax
f011696c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011696f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116972:	ba 00 00 00 00       	mov    $0x0,%edx
f0116977:	f7 75 b0             	divl   -0x50(%ebp)
f011697a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011697d:	29 d0                	sub    %edx,%eax
f011697f:	01 c3                	add    %eax,%ebx
f0116981:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0116988:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011698d:	0f b6 c0             	movzbl %al,%eax
f0116990:	c1 e0 04             	shl    $0x4,%eax
f0116993:	89 c2                	mov    %eax,%edx
f0116995:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116998:	01 d0                	add    %edx,%eax
f011699a:	48                   	dec    %eax
f011699b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011699e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01169a6:	f7 75 a8             	divl   -0x58(%ebp)
f01169a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01169ac:	29 d0                	sub    %edx,%eax
f01169ae:	01 d8                	add    %ebx,%eax
f01169b0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01169b5:	39 c1                	cmp    %eax,%ecx
f01169b7:	74 14                	je     f01169cd <test_kmalloc+0x25c>
f01169b9:	83 ec 04             	sub    $0x4,%esp
f01169bc:	68 60 a3 13 f0       	push   $0xf013a360
f01169c1:	6a 49                	push   $0x49
f01169c3:	68 7a a2 13 f0       	push   $0xf013a27a
f01169c8:	e8 d9 97 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01169cd:	e8 ba d2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01169d2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01169d5:	74 14                	je     f01169eb <test_kmalloc+0x27a>
f01169d7:	83 ec 04             	sub    $0x4,%esp
f01169da:	68 94 a2 13 f0       	push   $0xf013a294
f01169df:	6a 4a                	push   $0x4a
f01169e1:	68 7a a2 13 f0       	push   $0xf013a27a
f01169e6:	e8 bb 97 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01169eb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01169ee:	e8 a5 53 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01169f3:	29 c3                	sub    %eax,%ebx
f01169f5:	89 d8                	mov    %ebx,%eax
f01169f7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01169fc:	74 14                	je     f0116a12 <test_kmalloc+0x2a1>
f01169fe:	83 ec 04             	sub    $0x4,%esp
f0116a01:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116a06:	6a 4b                	push   $0x4b
f0116a08:	68 7a a2 13 f0       	push   $0xf013a27a
f0116a0d:	e8 94 97 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116a12:	e8 81 53 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116a17:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a1a:	e8 6d d2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116a1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116a22:	83 ec 0c             	sub    $0xc,%esp
f0116a25:	68 00 fc 1f 00       	push   $0x1ffc00
f0116a2a:	e8 ad 09 ff ff       	call   f01073dc <kmalloc>
f0116a2f:	83 c4 10             	add    $0x10,%esp
f0116a32:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116a38:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116a3e:	89 c1                	mov    %eax,%ecx
f0116a40:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0116a47:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116a4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116a4f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0116a52:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116a55:	ba 00 00 00 00       	mov    $0x0,%edx
f0116a5a:	f7 75 a0             	divl   -0x60(%ebp)
f0116a5d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116a60:	29 d0                	sub    %edx,%eax
f0116a62:	89 c3                	mov    %eax,%ebx
f0116a64:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0116a6b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116a70:	0f b6 d0             	movzbl %al,%edx
f0116a73:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116a76:	01 d0                	add    %edx,%eax
f0116a78:	48                   	dec    %eax
f0116a79:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0116a7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116a7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116a84:	f7 75 98             	divl   -0x68(%ebp)
f0116a87:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116a8a:	29 d0                	sub    %edx,%eax
f0116a8c:	01 c3                	add    %eax,%ebx
f0116a8e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0116a95:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116a9a:	0f b6 c0             	movzbl %al,%eax
f0116a9d:	c1 e0 04             	shl    $0x4,%eax
f0116aa0:	89 c2                	mov    %eax,%edx
f0116aa2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116aa5:	01 d0                	add    %edx,%eax
f0116aa7:	48                   	dec    %eax
f0116aa8:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0116aab:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0116ab3:	f7 75 90             	divl   -0x70(%ebp)
f0116ab6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116ab9:	29 d0                	sub    %edx,%eax
f0116abb:	01 d8                	add    %ebx,%eax
f0116abd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0116ac2:	39 c1                	cmp    %eax,%ecx
f0116ac4:	74 14                	je     f0116ada <test_kmalloc+0x369>
f0116ac6:	83 ec 04             	sub    $0x4,%esp
f0116ac9:	68 60 a3 13 f0       	push   $0xf013a360
f0116ace:	6a 51                	push   $0x51
f0116ad0:	68 7a a2 13 f0       	push   $0xf013a27a
f0116ad5:	e8 cc 96 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116ada:	e8 ad d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116adf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116ae2:	74 14                	je     f0116af8 <test_kmalloc+0x387>
f0116ae4:	83 ec 04             	sub    $0x4,%esp
f0116ae7:	68 94 a2 13 f0       	push   $0xf013a294
f0116aec:	6a 52                	push   $0x52
f0116aee:	68 7a a2 13 f0       	push   $0xf013a27a
f0116af3:	e8 ae 96 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116af8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116afb:	e8 98 52 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116b00:	29 c3                	sub    %eax,%ebx
f0116b02:	89 d8                	mov    %ebx,%eax
f0116b04:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116b09:	74 14                	je     f0116b1f <test_kmalloc+0x3ae>
f0116b0b:	83 ec 04             	sub    $0x4,%esp
f0116b0e:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116b13:	6a 53                	push   $0x53
f0116b15:	68 7a a2 13 f0       	push   $0xf013a27a
f0116b1a:	e8 87 96 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116b1f:	e8 74 52 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116b24:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b27:	e8 60 d1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116b2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0116b2f:	83 ec 0c             	sub    $0xc,%esp
f0116b32:	68 00 08 00 00       	push   $0x800
f0116b37:	e8 a0 08 ff ff       	call   f01073dc <kmalloc>
f0116b3c:	83 c4 10             	add    $0x10,%esp
f0116b3f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116b45:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116b4b:	89 c1                	mov    %eax,%ecx
f0116b4d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0116b54:	8b 45 88             	mov    -0x78(%ebp),%eax
f0116b57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116b5c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0116b5f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116b62:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b67:	f7 75 88             	divl   -0x78(%ebp)
f0116b6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116b6d:	29 d0                	sub    %edx,%eax
f0116b6f:	89 c3                	mov    %eax,%ebx
f0116b71:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0116b78:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116b7d:	0f b6 d0             	movzbl %al,%edx
f0116b80:	8b 45 80             	mov    -0x80(%ebp),%eax
f0116b83:	01 d0                	add    %edx,%eax
f0116b85:	48                   	dec    %eax
f0116b86:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0116b8c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116b92:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b97:	f7 75 80             	divl   -0x80(%ebp)
f0116b9a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116ba0:	29 d0                	sub    %edx,%eax
f0116ba2:	01 c3                	add    %eax,%ebx
f0116ba4:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0116bab:	10 00 00 
f0116bae:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116bb3:	0f b6 c0             	movzbl %al,%eax
f0116bb6:	c1 e0 04             	shl    $0x4,%eax
f0116bb9:	89 c2                	mov    %eax,%edx
f0116bbb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0116bc1:	01 d0                	add    %edx,%eax
f0116bc3:	48                   	dec    %eax
f0116bc4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0116bca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116bd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bd5:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0116bdb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116be1:	29 d0                	sub    %edx,%eax
f0116be3:	01 d8                	add    %ebx,%eax
f0116be5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0116bea:	39 c1                	cmp    %eax,%ecx
f0116bec:	74 14                	je     f0116c02 <test_kmalloc+0x491>
f0116bee:	83 ec 04             	sub    $0x4,%esp
f0116bf1:	68 60 a3 13 f0       	push   $0xf013a360
f0116bf6:	6a 59                	push   $0x59
f0116bf8:	68 7a a2 13 f0       	push   $0xf013a27a
f0116bfd:	e8 a4 95 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c02:	e8 85 d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c07:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116c0a:	74 14                	je     f0116c20 <test_kmalloc+0x4af>
f0116c0c:	83 ec 04             	sub    $0x4,%esp
f0116c0f:	68 94 a2 13 f0       	push   $0xf013a294
f0116c14:	6a 5a                	push   $0x5a
f0116c16:	68 7a a2 13 f0       	push   $0xf013a27a
f0116c1b:	e8 86 95 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116c20:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116c23:	e8 70 51 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116c28:	29 c3                	sub    %eax,%ebx
f0116c2a:	89 d8                	mov    %ebx,%eax
f0116c2c:	83 f8 01             	cmp    $0x1,%eax
f0116c2f:	74 14                	je     f0116c45 <test_kmalloc+0x4d4>
f0116c31:	83 ec 04             	sub    $0x4,%esp
f0116c34:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116c39:	6a 5b                	push   $0x5b
f0116c3b:	68 7a a2 13 f0       	push   $0xf013a27a
f0116c40:	e8 61 95 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116c45:	e8 4e 51 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116c4a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c4d:	e8 3a d0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116c52:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0116c55:	83 ec 0c             	sub    $0xc,%esp
f0116c58:	68 00 08 00 00       	push   $0x800
f0116c5d:	e8 7a 07 ff ff       	call   f01073dc <kmalloc>
f0116c62:	83 c4 10             	add    $0x10,%esp
f0116c65:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116c6b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116c71:	89 c1                	mov    %eax,%ecx
f0116c73:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0116c7a:	10 00 00 
f0116c7d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0116c83:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116c88:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0116c8e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0116c94:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c99:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0116c9f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0116ca5:	29 d0                	sub    %edx,%eax
f0116ca7:	89 c3                	mov    %eax,%ebx
f0116ca9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0116cb0:	10 00 00 
f0116cb3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116cb8:	0f b6 d0             	movzbl %al,%edx
f0116cbb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0116cc1:	01 d0                	add    %edx,%eax
f0116cc3:	48                   	dec    %eax
f0116cc4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0116cca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0116cd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0116cd5:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0116cdb:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0116ce1:	29 d0                	sub    %edx,%eax
f0116ce3:	01 c3                	add    %eax,%ebx
f0116ce5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0116cec:	10 00 00 
f0116cef:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116cf4:	0f b6 c0             	movzbl %al,%eax
f0116cf7:	c1 e0 04             	shl    $0x4,%eax
f0116cfa:	89 c2                	mov    %eax,%edx
f0116cfc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0116d02:	01 d0                	add    %edx,%eax
f0116d04:	48                   	dec    %eax
f0116d05:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0116d0b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116d11:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d16:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0116d1c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116d22:	29 d0                	sub    %edx,%eax
f0116d24:	01 d8                	add    %ebx,%eax
f0116d26:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0116d2b:	39 c1                	cmp    %eax,%ecx
f0116d2d:	74 14                	je     f0116d43 <test_kmalloc+0x5d2>
f0116d2f:	83 ec 04             	sub    $0x4,%esp
f0116d32:	68 60 a3 13 f0       	push   $0xf013a360
f0116d37:	6a 61                	push   $0x61
f0116d39:	68 7a a2 13 f0       	push   $0xf013a27a
f0116d3e:	e8 63 94 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116d43:	e8 44 cf fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116d48:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116d4b:	74 14                	je     f0116d61 <test_kmalloc+0x5f0>
f0116d4d:	83 ec 04             	sub    $0x4,%esp
f0116d50:	68 94 a2 13 f0       	push   $0xf013a294
f0116d55:	6a 62                	push   $0x62
f0116d57:	68 7a a2 13 f0       	push   $0xf013a27a
f0116d5c:	e8 45 94 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116d61:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116d64:	e8 2f 50 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116d69:	29 c3                	sub    %eax,%ebx
f0116d6b:	89 d8                	mov    %ebx,%eax
f0116d6d:	83 f8 01             	cmp    $0x1,%eax
f0116d70:	74 14                	je     f0116d86 <test_kmalloc+0x615>
f0116d72:	83 ec 04             	sub    $0x4,%esp
f0116d75:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116d7a:	6a 63                	push   $0x63
f0116d7c:	68 7a a2 13 f0       	push   $0xf013a27a
f0116d81:	e8 20 94 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0116d86:	e8 0d 50 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116d8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d8e:	e8 f9 ce fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116d93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0116d96:	83 ec 0c             	sub    $0xc,%esp
f0116d99:	68 00 1c 00 00       	push   $0x1c00
f0116d9e:	e8 39 06 ff ff       	call   f01073dc <kmalloc>
f0116da3:	83 c4 10             	add    $0x10,%esp
f0116da6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116dac:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116db2:	89 c1                	mov    %eax,%ecx
f0116db4:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0116dbb:	10 00 00 
f0116dbe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0116dc4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116dc9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0116dcf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0116dd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0116dda:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0116de0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0116de6:	29 d0                	sub    %edx,%eax
f0116de8:	89 c3                	mov    %eax,%ebx
f0116dea:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0116df1:	10 00 00 
f0116df4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116df9:	0f b6 d0             	movzbl %al,%edx
f0116dfc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0116e02:	01 d0                	add    %edx,%eax
f0116e04:	48                   	dec    %eax
f0116e05:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0116e0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116e11:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e16:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0116e1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116e22:	29 d0                	sub    %edx,%eax
f0116e24:	01 c3                	add    %eax,%ebx
f0116e26:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0116e2d:	10 00 00 
f0116e30:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116e35:	0f b6 c0             	movzbl %al,%eax
f0116e38:	c1 e0 04             	shl    $0x4,%eax
f0116e3b:	89 c2                	mov    %eax,%edx
f0116e3d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0116e43:	01 d0                	add    %edx,%eax
f0116e45:	48                   	dec    %eax
f0116e46:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0116e4c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116e52:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e57:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0116e5d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116e63:	29 d0                	sub    %edx,%eax
f0116e65:	01 d8                	add    %ebx,%eax
f0116e67:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0116e6c:	39 c1                	cmp    %eax,%ecx
f0116e6e:	74 14                	je     f0116e84 <test_kmalloc+0x713>
f0116e70:	83 ec 04             	sub    $0x4,%esp
f0116e73:	68 60 a3 13 f0       	push   $0xf013a360
f0116e78:	6a 69                	push   $0x69
f0116e7a:	68 7a a2 13 f0       	push   $0xf013a27a
f0116e7f:	e8 22 93 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e84:	e8 03 ce fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116e89:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116e8c:	74 14                	je     f0116ea2 <test_kmalloc+0x731>
f0116e8e:	83 ec 04             	sub    $0x4,%esp
f0116e91:	68 94 a2 13 f0       	push   $0xf013a294
f0116e96:	6a 6a                	push   $0x6a
f0116e98:	68 7a a2 13 f0       	push   $0xf013a27a
f0116e9d:	e8 04 93 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116ea2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116ea5:	e8 ee 4e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116eaa:	29 c3                	sub    %eax,%ebx
f0116eac:	89 d8                	mov    %ebx,%eax
f0116eae:	83 f8 02             	cmp    $0x2,%eax
f0116eb1:	74 14                	je     f0116ec7 <test_kmalloc+0x756>
f0116eb3:	83 ec 04             	sub    $0x4,%esp
f0116eb6:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116ebb:	6a 6b                	push   $0x6b
f0116ebd:	68 7a a2 13 f0       	push   $0xf013a27a
f0116ec2:	e8 df 92 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116ec7:	e8 cc 4e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116ecc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ecf:	e8 b8 cd fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116ed4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0116ed7:	83 ec 0c             	sub    $0xc,%esp
f0116eda:	68 00 fc 2f 00       	push   $0x2ffc00
f0116edf:	e8 f8 04 ff ff       	call   f01073dc <kmalloc>
f0116ee4:	83 c4 10             	add    $0x10,%esp
f0116ee7:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116eed:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116ef3:	89 c1                	mov    %eax,%ecx
f0116ef5:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0116efc:	10 00 00 
f0116eff:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0116f05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116f0a:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0116f10:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0116f16:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f1b:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0116f21:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0116f27:	29 d0                	sub    %edx,%eax
f0116f29:	89 c3                	mov    %eax,%ebx
f0116f2b:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0116f32:	10 00 00 
f0116f35:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116f3a:	0f b6 d0             	movzbl %al,%edx
f0116f3d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0116f43:	01 d0                	add    %edx,%eax
f0116f45:	48                   	dec    %eax
f0116f46:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0116f4c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116f52:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f57:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0116f5d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116f63:	29 d0                	sub    %edx,%eax
f0116f65:	01 c3                	add    %eax,%ebx
f0116f67:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0116f6e:	10 00 00 
f0116f71:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0116f76:	0f b6 c0             	movzbl %al,%eax
f0116f79:	c1 e0 04             	shl    $0x4,%eax
f0116f7c:	89 c2                	mov    %eax,%edx
f0116f7e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0116f84:	01 d0                	add    %edx,%eax
f0116f86:	48                   	dec    %eax
f0116f87:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0116f8d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f98:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0116f9e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116fa4:	29 d0                	sub    %edx,%eax
f0116fa6:	01 d8                	add    %ebx,%eax
f0116fa8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0116fad:	39 c1                	cmp    %eax,%ecx
f0116faf:	74 14                	je     f0116fc5 <test_kmalloc+0x854>
f0116fb1:	83 ec 04             	sub    $0x4,%esp
f0116fb4:	68 60 a3 13 f0       	push   $0xf013a360
f0116fb9:	6a 71                	push   $0x71
f0116fbb:	68 7a a2 13 f0       	push   $0xf013a27a
f0116fc0:	e8 e1 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116fc5:	e8 c2 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0116fca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116fcd:	74 14                	je     f0116fe3 <test_kmalloc+0x872>
f0116fcf:	83 ec 04             	sub    $0x4,%esp
f0116fd2:	68 94 a2 13 f0       	push   $0xf013a294
f0116fd7:	6a 72                	push   $0x72
f0116fd9:	68 7a a2 13 f0       	push   $0xf013a27a
f0116fde:	e8 c3 91 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116fe3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116fe6:	e8 ad 4d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0116feb:	29 c3                	sub    %eax,%ebx
f0116fed:	89 d8                	mov    %ebx,%eax
f0116fef:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116ff4:	74 14                	je     f011700a <test_kmalloc+0x899>
f0116ff6:	83 ec 04             	sub    $0x4,%esp
f0116ff9:	68 fc a2 13 f0       	push   $0xf013a2fc
f0116ffe:	6a 73                	push   $0x73
f0117000:	68 7a a2 13 f0       	push   $0xf013a27a
f0117005:	e8 9c 91 fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011700a:	e8 89 4d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011700f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117012:	e8 75 cc fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117017:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011701a:	83 ec 0c             	sub    $0xc,%esp
f011701d:	68 00 fc 5f 00       	push   $0x5ffc00
f0117022:	e8 b5 03 ff ff       	call   f01073dc <kmalloc>
f0117027:	83 c4 10             	add    $0x10,%esp
f011702a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117030:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117036:	89 c1                	mov    %eax,%ecx
f0117038:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011703f:	10 00 00 
f0117042:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117048:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011704d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117053:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117059:	ba 00 00 00 00       	mov    $0x0,%edx
f011705e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117064:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011706a:	29 d0                	sub    %edx,%eax
f011706c:	89 c3                	mov    %eax,%ebx
f011706e:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0117075:	10 00 00 
f0117078:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011707d:	0f b6 d0             	movzbl %al,%edx
f0117080:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117086:	01 d0                	add    %edx,%eax
f0117088:	48                   	dec    %eax
f0117089:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011708f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117095:	ba 00 00 00 00       	mov    $0x0,%edx
f011709a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01170a0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01170a6:	29 d0                	sub    %edx,%eax
f01170a8:	01 c3                	add    %eax,%ebx
f01170aa:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01170b1:	10 00 00 
f01170b4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01170b9:	0f b6 c0             	movzbl %al,%eax
f01170bc:	c1 e0 04             	shl    $0x4,%eax
f01170bf:	89 c2                	mov    %eax,%edx
f01170c1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01170c7:	01 d0                	add    %edx,%eax
f01170c9:	48                   	dec    %eax
f01170ca:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01170d0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01170d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01170db:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01170e1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01170e7:	29 d0                	sub    %edx,%eax
f01170e9:	01 d8                	add    %ebx,%eax
f01170eb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01170f0:	39 c1                	cmp    %eax,%ecx
f01170f2:	74 14                	je     f0117108 <test_kmalloc+0x997>
f01170f4:	83 ec 04             	sub    $0x4,%esp
f01170f7:	68 60 a3 13 f0       	push   $0xf013a360
f01170fc:	6a 79                	push   $0x79
f01170fe:	68 7a a2 13 f0       	push   $0xf013a27a
f0117103:	e8 9e 90 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117108:	e8 7f cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011710d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117110:	74 14                	je     f0117126 <test_kmalloc+0x9b5>
f0117112:	83 ec 04             	sub    $0x4,%esp
f0117115:	68 94 a2 13 f0       	push   $0xf013a294
f011711a:	6a 7a                	push   $0x7a
f011711c:	68 7a a2 13 f0       	push   $0xf013a27a
f0117121:	e8 80 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117126:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117129:	e8 6a 4c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011712e:	29 c3                	sub    %eax,%ebx
f0117130:	89 d8                	mov    %ebx,%eax
f0117132:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117137:	74 14                	je     f011714d <test_kmalloc+0x9dc>
f0117139:	83 ec 04             	sub    $0x4,%esp
f011713c:	68 fc a2 13 f0       	push   $0xf013a2fc
f0117141:	6a 7b                	push   $0x7b
f0117143:	68 7a a2 13 f0       	push   $0xf013a27a
f0117148:	e8 59 90 fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011714d:	e8 46 4c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0117152:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117155:	e8 32 cb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011715a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011715d:	83 ec 0c             	sub    $0xc,%esp
f0117160:	68 00 38 00 00       	push   $0x3800
f0117165:	e8 72 02 ff ff       	call   f01073dc <kmalloc>
f011716a:	83 c4 10             	add    $0x10,%esp
f011716d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117173:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117179:	89 c1                	mov    %eax,%ecx
f011717b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117182:	10 00 00 
f0117185:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011718b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117190:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117196:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011719c:	ba 00 00 00 00       	mov    $0x0,%edx
f01171a1:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01171a7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01171ad:	29 d0                	sub    %edx,%eax
f01171af:	89 c3                	mov    %eax,%ebx
f01171b1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01171b8:	10 00 00 
f01171bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01171c0:	0f b6 d0             	movzbl %al,%edx
f01171c3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01171c9:	01 d0                	add    %edx,%eax
f01171cb:	48                   	dec    %eax
f01171cc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01171d2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01171d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01171dd:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01171e3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01171e9:	29 d0                	sub    %edx,%eax
f01171eb:	01 c3                	add    %eax,%ebx
f01171ed:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01171f4:	10 00 00 
f01171f7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01171fc:	0f b6 c0             	movzbl %al,%eax
f01171ff:	c1 e0 04             	shl    $0x4,%eax
f0117202:	89 c2                	mov    %eax,%edx
f0117204:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011720a:	01 d0                	add    %edx,%eax
f011720c:	48                   	dec    %eax
f011720d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117213:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117219:	ba 00 00 00 00       	mov    $0x0,%edx
f011721e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117224:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011722a:	29 d0                	sub    %edx,%eax
f011722c:	01 d8                	add    %ebx,%eax
f011722e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117233:	39 c1                	cmp    %eax,%ecx
f0117235:	74 17                	je     f011724e <test_kmalloc+0xadd>
f0117237:	83 ec 04             	sub    $0x4,%esp
f011723a:	68 60 a3 13 f0       	push   $0xf013a360
f011723f:	68 81 00 00 00       	push   $0x81
f0117244:	68 7a a2 13 f0       	push   $0xf013a27a
f0117249:	e8 58 8f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011724e:	e8 39 ca fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117253:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117256:	74 17                	je     f011726f <test_kmalloc+0xafe>
f0117258:	83 ec 04             	sub    $0x4,%esp
f011725b:	68 94 a2 13 f0       	push   $0xf013a294
f0117260:	68 82 00 00 00       	push   $0x82
f0117265:	68 7a a2 13 f0       	push   $0xf013a27a
f011726a:	e8 37 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011726f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117272:	e8 21 4b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0117277:	29 c3                	sub    %eax,%ebx
f0117279:	89 d8                	mov    %ebx,%eax
f011727b:	83 f8 04             	cmp    $0x4,%eax
f011727e:	74 17                	je     f0117297 <test_kmalloc+0xb26>
f0117280:	83 ec 04             	sub    $0x4,%esp
f0117283:	68 fc a2 13 f0       	push   $0xf013a2fc
f0117288:	68 83 00 00 00       	push   $0x83
f011728d:	68 7a a2 13 f0       	push   $0xf013a27a
f0117292:	e8 0f 8f fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f0117297:	83 ec 0c             	sub    $0xc,%esp
f011729a:	68 c6 a3 13 f0       	push   $0xf013a3c6
f011729f:	e8 89 99 fe ff       	call   f0100c2d <cprintf>
f01172a4:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01172a7:	e8 ec 4a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01172ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01172af:	e8 d8 c9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01172b4:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f01172b7:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f01172be:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f01172c1:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01172c7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01172cd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01172d3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01172d6:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01172d8:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01172de:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01172e4:	01 c2                	add    %eax,%edx
f01172e6:	8a 45 f2             	mov    -0xe(%ebp),%al
f01172e9:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01172eb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01172f1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f01172f7:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f01172fe:	fd 0f 00 
			shortArr[0] = minShort;
f0117301:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117307:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011730a:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f011730d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117313:	01 c0                	add    %eax,%eax
f0117315:	89 c2                	mov    %eax,%edx
f0117317:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011731d:	01 c2                	add    %eax,%edx
f011731f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117323:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117326:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011732c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117332:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117339:	01 00 00 
			intArr[0] = minInt;
f011733c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117342:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117345:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117347:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011734d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117354:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011735a:	01 c2                	add    %eax,%edx
f011735c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011735f:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117361:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117367:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011736d:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117374:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117377:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011737d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117380:	88 10                	mov    %dl,(%eax)
f0117382:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117388:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011738b:	66 89 42 02          	mov    %ax,0x2(%edx)
f011738f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117395:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117398:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011739b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01173a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01173a8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173ae:	01 c2                	add    %eax,%edx
f01173b0:	8a 45 f2             	mov    -0xe(%ebp),%al
f01173b3:	88 02                	mov    %al,(%edx)
f01173b5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01173bb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01173c2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173c8:	01 c2                	add    %eax,%edx
f01173ca:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01173ce:	66 89 42 02          	mov    %ax,0x2(%edx)
f01173d2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01173d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01173df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01173e5:	01 c2                	add    %eax,%edx
f01173e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01173ea:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01173ed:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01173f4:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f01173f7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01173fd:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117403:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117409:	8a 55 f3             	mov    -0xd(%ebp),%dl
f011740c:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f011740e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117414:	89 c2                	mov    %eax,%edx
f0117416:	c1 ea 1f             	shr    $0x1f,%edx
f0117419:	01 d0                	add    %edx,%eax
f011741b:	d1 f8                	sar    %eax
f011741d:	89 c2                	mov    %eax,%edx
f011741f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117425:	01 c2                	add    %eax,%edx
f0117427:	8a 45 f2             	mov    -0xe(%ebp),%al
f011742a:	88 c1                	mov    %al,%cl
f011742c:	c0 e9 07             	shr    $0x7,%cl
f011742f:	01 c8                	add    %ecx,%eax
f0117431:	d0 f8                	sar    %al
f0117433:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117435:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f011743b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117441:	01 c2                	add    %eax,%edx
f0117443:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117446:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117448:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011744e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117454:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f011745b:	1b 00 00 
			shortArr2[0] = minShort;
f011745e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117464:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117467:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f011746a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117470:	01 c0                	add    %eax,%eax
f0117472:	89 c2                	mov    %eax,%edx
f0117474:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011747a:	01 c2                	add    %eax,%edx
f011747c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117480:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117483:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117489:	8a 00                	mov    (%eax),%al
f011748b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011748e:	75 15                	jne    f01174a5 <test_kmalloc+0xd34>
f0117490:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117496:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011749c:	01 d0                	add    %edx,%eax
f011749e:	8a 00                	mov    (%eax),%al
f01174a0:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01174a3:	74 17                	je     f01174bc <test_kmalloc+0xd4b>
f01174a5:	83 ec 04             	sub    $0x4,%esp
f01174a8:	68 d0 a3 13 f0       	push   $0xf013a3d0
f01174ad:	68 b2 00 00 00       	push   $0xb2
f01174b2:	68 7a a2 13 f0       	push   $0xf013a27a
f01174b7:	e8 ea 8c fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01174bc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01174c2:	66 8b 00             	mov    (%eax),%ax
f01174c5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01174c9:	75 1b                	jne    f01174e6 <test_kmalloc+0xd75>
f01174cb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01174d1:	01 c0                	add    %eax,%eax
f01174d3:	89 c2                	mov    %eax,%edx
f01174d5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01174db:	01 d0                	add    %edx,%eax
f01174dd:	66 8b 00             	mov    (%eax),%ax
f01174e0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01174e4:	74 17                	je     f01174fd <test_kmalloc+0xd8c>
f01174e6:	83 ec 04             	sub    $0x4,%esp
f01174e9:	68 d0 a3 13 f0       	push   $0xf013a3d0
f01174ee:	68 b3 00 00 00       	push   $0xb3
f01174f3:	68 7a a2 13 f0       	push   $0xf013a27a
f01174f8:	e8 a9 8c fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f01174fd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117503:	8b 00                	mov    (%eax),%eax
f0117505:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117508:	75 1c                	jne    f0117526 <test_kmalloc+0xdb5>
f011750a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117510:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117517:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011751d:	01 d0                	add    %edx,%eax
f011751f:	8b 00                	mov    (%eax),%eax
f0117521:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117524:	74 17                	je     f011753d <test_kmalloc+0xdcc>
f0117526:	83 ec 04             	sub    $0x4,%esp
f0117529:	68 d0 a3 13 f0       	push   $0xf013a3d0
f011752e:	68 b4 00 00 00       	push   $0xb4
f0117533:	68 7a a2 13 f0       	push   $0xf013a27a
f0117538:	e8 69 8c fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011753d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117543:	8a 00                	mov    (%eax),%al
f0117545:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117548:	75 1c                	jne    f0117566 <test_kmalloc+0xdf5>
f011754a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117550:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117557:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011755d:	01 d0                	add    %edx,%eax
f011755f:	8a 00                	mov    (%eax),%al
f0117561:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117564:	74 17                	je     f011757d <test_kmalloc+0xe0c>
f0117566:	83 ec 04             	sub    $0x4,%esp
f0117569:	68 d0 a3 13 f0       	push   $0xf013a3d0
f011756e:	68 b6 00 00 00       	push   $0xb6
f0117573:	68 7a a2 13 f0       	push   $0xf013a27a
f0117578:	e8 29 8c fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011757d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117583:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117587:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011758b:	75 1f                	jne    f01175ac <test_kmalloc+0xe3b>
f011758d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117593:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011759a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175a0:	01 d0                	add    %edx,%eax
f01175a2:	66 8b 40 02          	mov    0x2(%eax),%ax
f01175a6:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01175aa:	74 17                	je     f01175c3 <test_kmalloc+0xe52>
f01175ac:	83 ec 04             	sub    $0x4,%esp
f01175af:	68 d0 a3 13 f0       	push   $0xf013a3d0
f01175b4:	68 b7 00 00 00       	push   $0xb7
f01175b9:	68 7a a2 13 f0       	push   $0xf013a27a
f01175be:	e8 e3 8b fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01175c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175c9:	8b 40 04             	mov    0x4(%eax),%eax
f01175cc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01175cf:	75 1d                	jne    f01175ee <test_kmalloc+0xe7d>
f01175d1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01175d7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01175de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01175e4:	01 d0                	add    %edx,%eax
f01175e6:	8b 40 04             	mov    0x4(%eax),%eax
f01175e9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01175ec:	74 17                	je     f0117605 <test_kmalloc+0xe94>
f01175ee:	83 ec 04             	sub    $0x4,%esp
f01175f1:	68 d0 a3 13 f0       	push   $0xf013a3d0
f01175f6:	68 b8 00 00 00       	push   $0xb8
f01175fb:	68 7a a2 13 f0       	push   $0xf013a27a
f0117600:	e8 a1 8b fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117605:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011760b:	8a 00                	mov    (%eax),%al
f011760d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117610:	75 40                	jne    f0117652 <test_kmalloc+0xee1>
f0117612:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117618:	89 c2                	mov    %eax,%edx
f011761a:	c1 ea 1f             	shr    $0x1f,%edx
f011761d:	01 d0                	add    %edx,%eax
f011761f:	d1 f8                	sar    %eax
f0117621:	89 c2                	mov    %eax,%edx
f0117623:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117629:	01 d0                	add    %edx,%eax
f011762b:	8a 10                	mov    (%eax),%dl
f011762d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117630:	88 c1                	mov    %al,%cl
f0117632:	c0 e9 07             	shr    $0x7,%cl
f0117635:	01 c8                	add    %ecx,%eax
f0117637:	d0 f8                	sar    %al
f0117639:	38 c2                	cmp    %al,%dl
f011763b:	75 15                	jne    f0117652 <test_kmalloc+0xee1>
f011763d:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117643:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117649:	01 d0                	add    %edx,%eax
f011764b:	8a 00                	mov    (%eax),%al
f011764d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117650:	74 17                	je     f0117669 <test_kmalloc+0xef8>
f0117652:	83 ec 04             	sub    $0x4,%esp
f0117655:	68 d0 a3 13 f0       	push   $0xf013a3d0
f011765a:	68 ba 00 00 00       	push   $0xba
f011765f:	68 7a a2 13 f0       	push   $0xf013a27a
f0117664:	e8 3d 8b fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117669:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011766f:	66 8b 00             	mov    (%eax),%ax
f0117672:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117676:	75 1b                	jne    f0117693 <test_kmalloc+0xf22>
f0117678:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011767e:	01 c0                	add    %eax,%eax
f0117680:	89 c2                	mov    %eax,%edx
f0117682:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117688:	01 d0                	add    %edx,%eax
f011768a:	66 8b 00             	mov    (%eax),%ax
f011768d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117691:	74 17                	je     f01176aa <test_kmalloc+0xf39>
f0117693:	83 ec 04             	sub    $0x4,%esp
f0117696:	68 d0 a3 13 f0       	push   $0xf013a3d0
f011769b:	68 bb 00 00 00       	push   $0xbb
f01176a0:	68 7a a2 13 f0       	push   $0xf013a27a
f01176a5:	e8 fc 8a fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01176aa:	e8 e9 46 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01176af:	89 c2                	mov    %eax,%edx
f01176b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01176b4:	39 c2                	cmp    %eax,%edx
f01176b6:	74 17                	je     f01176cf <test_kmalloc+0xf5e>
f01176b8:	83 ec 04             	sub    $0x4,%esp
f01176bb:	68 fc a2 13 f0       	push   $0xf013a2fc
f01176c0:	68 bd 00 00 00       	push   $0xbd
f01176c5:	68 7a a2 13 f0       	push   $0xf013a27a
f01176ca:	e8 d7 8a fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01176cf:	e8 b8 c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01176d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01176d7:	74 17                	je     f01176f0 <test_kmalloc+0xf7f>
f01176d9:	83 ec 04             	sub    $0x4,%esp
f01176dc:	68 94 a2 13 f0       	push   $0xf013a294
f01176e1:	68 be 00 00 00       	push   $0xbe
f01176e6:	68 7a a2 13 f0       	push   $0xf013a27a
f01176eb:	e8 b6 8a fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f01176f0:	83 ec 0c             	sub    $0xc,%esp
f01176f3:	68 05 a4 13 f0       	push   $0xf013a405
f01176f8:	e8 30 95 fe ff       	call   f0100c2d <cprintf>
f01176fd:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117700:	e8 93 46 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0117705:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117708:	e8 7f c5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011770d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117710:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117717:	10 00 00 
f011771a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117720:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117725:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011772b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117731:	ba 00 00 00 00       	mov    $0x0,%edx
f0117736:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011773c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117742:	29 d0                	sub    %edx,%eax
f0117744:	89 c1                	mov    %eax,%ecx
f0117746:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011774d:	10 00 00 
f0117750:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117755:	0f b6 d0             	movzbl %al,%edx
f0117758:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011775e:	01 d0                	add    %edx,%eax
f0117760:	48                   	dec    %eax
f0117761:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117767:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011776d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117772:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0117778:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011777e:	29 d0                	sub    %edx,%eax
f0117780:	01 c1                	add    %eax,%ecx
f0117782:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117789:	10 00 00 
f011778c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117791:	0f b6 c0             	movzbl %al,%eax
f0117794:	c1 e0 04             	shl    $0x4,%eax
f0117797:	89 c2                	mov    %eax,%edx
f0117799:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011779f:	01 d0                	add    %edx,%eax
f01177a1:	48                   	dec    %eax
f01177a2:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f01177a8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01177ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01177b3:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f01177b9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01177bf:	29 d0                	sub    %edx,%eax
f01177c1:	01 c8                	add    %ecx,%eax
f01177c3:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01177c8:	29 c2                	sub    %eax,%edx
f01177ca:	89 d0                	mov    %edx,%eax
f01177cc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01177d2:	83 ec 0c             	sub    $0xc,%esp
f01177d5:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f01177db:	e8 fc fb fe ff       	call   f01073dc <kmalloc>
f01177e0:	83 c4 10             	add    $0x10,%esp
f01177e3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01177e9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01177ef:	85 c0                	test   %eax,%eax
f01177f1:	74 17                	je     f011780a <test_kmalloc+0x1099>
f01177f3:	83 ec 04             	sub    $0x4,%esp
f01177f6:	68 48 a2 13 f0       	push   $0xf013a248
f01177fb:	68 c8 00 00 00       	push   $0xc8
f0117800:	68 7a a2 13 f0       	push   $0xf013a27a
f0117805:	e8 9c 89 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011780a:	e8 7d c4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011780f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117812:	74 17                	je     f011782b <test_kmalloc+0x10ba>
f0117814:	83 ec 04             	sub    $0x4,%esp
f0117817:	68 94 a2 13 f0       	push   $0xf013a294
f011781c:	68 c9 00 00 00       	push   $0xc9
f0117821:	68 7a a2 13 f0       	push   $0xf013a27a
f0117826:	e8 7b 89 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011782b:	e8 68 45 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0117830:	89 c2                	mov    %eax,%edx
f0117832:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117835:	39 c2                	cmp    %eax,%edx
f0117837:	74 17                	je     f0117850 <test_kmalloc+0x10df>
f0117839:	83 ec 04             	sub    $0x4,%esp
f011783c:	68 fc a2 13 f0       	push   $0xf013a2fc
f0117841:	68 ca 00 00 00       	push   $0xca
f0117846:	68 7a a2 13 f0       	push   $0xf013a27a
f011784b:	e8 56 89 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0117850:	83 ec 0c             	sub    $0xc,%esp
f0117853:	68 0c a4 13 f0       	push   $0xf013a40c
f0117858:	e8 d0 93 fe ff       	call   f0100c2d <cprintf>
f011785d:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0117860:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117866:	05 00 40 00 00       	add    $0x4000,%eax
f011786b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117871:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0117878:	10 00 00 
f011787b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117881:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117886:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011788c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117892:	ba 00 00 00 00       	mov    $0x0,%edx
f0117897:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011789d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01178a3:	29 d0                	sub    %edx,%eax
f01178a5:	89 c1                	mov    %eax,%ecx
f01178a7:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01178ae:	10 00 00 
f01178b1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01178b6:	0f b6 d0             	movzbl %al,%edx
f01178b9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01178bf:	01 d0                	add    %edx,%eax
f01178c1:	48                   	dec    %eax
f01178c2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01178c8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01178ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01178d3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01178d9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01178df:	29 d0                	sub    %edx,%eax
f01178e1:	01 c1                	add    %eax,%ecx
f01178e3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01178ea:	10 00 00 
f01178ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01178f2:	0f b6 c0             	movzbl %al,%eax
f01178f5:	c1 e0 04             	shl    $0x4,%eax
f01178f8:	89 c2                	mov    %eax,%edx
f01178fa:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0117900:	01 d0                	add    %edx,%eax
f0117902:	48                   	dec    %eax
f0117903:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0117909:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011790f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117914:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011791a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117920:	29 d0                	sub    %edx,%eax
f0117922:	01 c8                	add    %ecx,%eax
f0117924:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117929:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011792c:	eb 6a                	jmp    f0117998 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011792e:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0117933:	83 ec 04             	sub    $0x4,%esp
f0117936:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f011793c:	52                   	push   %edx
f011793d:	ff 75 f4             	pushl  -0xc(%ebp)
f0117940:	50                   	push   %eax
f0117941:	e8 23 f0 fe ff       	call   f0106969 <get_page_table>
f0117946:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0117949:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011794f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117952:	c1 ea 0c             	shr    $0xc,%edx
f0117955:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011795b:	c1 e2 02             	shl    $0x2,%edx
f011795e:	01 d0                	add    %edx,%eax
f0117960:	8b 00                	mov    (%eax),%eax
f0117962:	25 ff 0f 00 00       	and    $0xfff,%eax
f0117967:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011796d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0117973:	83 e0 04             	and    $0x4,%eax
f0117976:	85 c0                	test   %eax,%eax
f0117978:	74 17                	je     f0117991 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011797a:	83 ec 04             	sub    $0x4,%esp
f011797d:	68 14 a4 13 f0       	push   $0xf013a414
f0117982:	68 d7 00 00 00       	push   $0xd7
f0117987:	68 7a a2 13 f0       	push   $0xf013a27a
f011798c:	e8 15 88 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117991:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0117998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011799b:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01179a1:	72 8b                	jb     f011792e <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f01179a3:	83 ec 0c             	sub    $0xc,%esp
f01179a6:	68 5e a4 13 f0       	push   $0xf013a45e
f01179ab:	e8 7d 92 fe ff       	call   f0100c2d <cprintf>
f01179b0:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f01179b3:	83 ec 0c             	sub    $0xc,%esp
f01179b6:	68 68 a4 13 f0       	push   $0xf013a468
f01179bb:	e8 6d 92 fe ff       	call   f0100c2d <cprintf>
f01179c0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01179c3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01179c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01179cb:	5b                   	pop    %ebx
f01179cc:	5f                   	pop    %edi
f01179cd:	5d                   	pop    %ebp
f01179ce:	c3                   	ret    

f01179cf <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01179cf:	55                   	push   %ebp
f01179d0:	89 e5                	mov    %esp,%ebp
f01179d2:	57                   	push   %edi
f01179d3:	53                   	push   %ebx
f01179d4:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01179da:	83 ec 0c             	sub    $0xc,%esp
f01179dd:	68 bc a1 13 f0       	push   $0xf013a1bc
f01179e2:	e8 46 92 fe ff       	call   f0100c2d <cprintf>
f01179e7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01179ea:	83 ec 0c             	sub    $0xc,%esp
f01179ed:	68 ec a1 13 f0       	push   $0xf013a1ec
f01179f2:	e8 36 92 fe ff       	call   f0100c2d <cprintf>
f01179f7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01179fa:	83 ec 0c             	sub    $0xc,%esp
f01179fd:	68 bc a1 13 f0       	push   $0xf013a1bc
f0117a02:	e8 26 92 fe ff       	call   f0100c2d <cprintf>
f0117a07:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0117a0a:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0117a10:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0117a15:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a1a:	89 d7                	mov    %edx,%edi
f0117a1c:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0117a1e:	83 ec 0c             	sub    $0xc,%esp
f0117a21:	68 a4 a4 13 f0       	push   $0xf013a4a4
f0117a26:	e8 02 92 fe ff       	call   f0100c2d <cprintf>
f0117a2b:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0117a2e:	e8 65 43 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0117a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0117a36:	e8 51 c2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0117a3b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117a3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117a45:	eb 1f                	jmp    f0117a66 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0117a47:	83 ec 0c             	sub    $0xc,%esp
f0117a4a:	68 00 00 20 00       	push   $0x200000
f0117a4f:	e8 88 f9 fe ff       	call   f01073dc <kmalloc>
f0117a54:	83 c4 10             	add    $0x10,%esp
f0117a57:	89 c2                	mov    %eax,%edx
f0117a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117a5c:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117a63:	ff 45 f4             	incl   -0xc(%ebp)
f0117a66:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0117a6a:	7e db                	jle    f0117a47 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0117a6c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0117a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0117a76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117a7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117a7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117a81:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a86:	f7 75 e8             	divl   -0x18(%ebp)
f0117a89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117a8c:	29 d0                	sub    %edx,%eax
f0117a8e:	89 c1                	mov    %eax,%ecx
f0117a90:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0117a97:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117a9c:	0f b6 d0             	movzbl %al,%edx
f0117a9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117aa2:	01 d0                	add    %edx,%eax
f0117aa4:	48                   	dec    %eax
f0117aa5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117aa8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117aab:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ab0:	f7 75 e0             	divl   -0x20(%ebp)
f0117ab3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117ab6:	29 d0                	sub    %edx,%eax
f0117ab8:	01 c1                	add    %eax,%ecx
f0117aba:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0117ac1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117ac6:	0f b6 c0             	movzbl %al,%eax
f0117ac9:	c1 e0 04             	shl    $0x4,%eax
f0117acc:	89 c2                	mov    %eax,%edx
f0117ace:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117ad1:	01 d0                	add    %edx,%eax
f0117ad3:	48                   	dec    %eax
f0117ad4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0117ad7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0117adf:	f7 75 d8             	divl   -0x28(%ebp)
f0117ae2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117ae5:	29 d0                	sub    %edx,%eax
f0117ae7:	01 c8                	add    %ecx,%eax
f0117ae9:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0117aee:	29 c2                	sub    %eax,%edx
f0117af0:	89 d0                	mov    %edx,%eax
f0117af2:	83 ec 0c             	sub    $0xc,%esp
f0117af5:	50                   	push   %eax
f0117af6:	e8 e1 f8 fe ff       	call   f01073dc <kmalloc>
f0117afb:	83 c4 10             	add    $0x10,%esp
f0117afe:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117b04:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0117b0a:	89 c1                	mov    %eax,%ecx
f0117b0c:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0117b13:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117b1b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117b1e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b21:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b26:	f7 75 d0             	divl   -0x30(%ebp)
f0117b29:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b2c:	29 d0                	sub    %edx,%eax
f0117b2e:	89 c3                	mov    %eax,%ebx
f0117b30:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117b37:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117b3c:	0f b6 d0             	movzbl %al,%edx
f0117b3f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117b42:	01 d0                	add    %edx,%eax
f0117b44:	48                   	dec    %eax
f0117b45:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117b48:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b50:	f7 75 c8             	divl   -0x38(%ebp)
f0117b53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117b56:	29 d0                	sub    %edx,%eax
f0117b58:	01 c3                	add    %eax,%ebx
f0117b5a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0117b61:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117b66:	0f b6 c0             	movzbl %al,%eax
f0117b69:	c1 e0 04             	shl    $0x4,%eax
f0117b6c:	89 c2                	mov    %eax,%edx
f0117b6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117b71:	01 d0                	add    %edx,%eax
f0117b73:	48                   	dec    %eax
f0117b74:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0117b77:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117b7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b7f:	f7 75 c0             	divl   -0x40(%ebp)
f0117b82:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117b85:	29 d0                	sub    %edx,%eax
f0117b87:	01 d8                	add    %ebx,%eax
f0117b89:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117b8e:	39 c1                	cmp    %eax,%ecx
f0117b90:	0f 85 ed 04 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117b96:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0117b9c:	89 c1                	mov    %eax,%ecx
f0117b9e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117ba5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ba8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117bad:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117bb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bb8:	f7 75 b8             	divl   -0x48(%ebp)
f0117bbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bbe:	29 d0                	sub    %edx,%eax
f0117bc0:	89 c3                	mov    %eax,%ebx
f0117bc2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117bc9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117bce:	0f b6 d0             	movzbl %al,%edx
f0117bd1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117bd4:	01 d0                	add    %edx,%eax
f0117bd6:	48                   	dec    %eax
f0117bd7:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117bda:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0117be2:	f7 75 b0             	divl   -0x50(%ebp)
f0117be5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117be8:	29 d0                	sub    %edx,%eax
f0117bea:	01 c3                	add    %eax,%ebx
f0117bec:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117bf3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117bf8:	0f b6 c0             	movzbl %al,%eax
f0117bfb:	c1 e0 04             	shl    $0x4,%eax
f0117bfe:	89 c2                	mov    %eax,%edx
f0117c00:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117c03:	01 d0                	add    %edx,%eax
f0117c05:	48                   	dec    %eax
f0117c06:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117c09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c11:	f7 75 a8             	divl   -0x58(%ebp)
f0117c14:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c17:	29 d0                	sub    %edx,%eax
f0117c19:	01 d8                	add    %ebx,%eax
f0117c1b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117c20:	39 c1                	cmp    %eax,%ecx
f0117c22:	0f 85 5b 04 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117c28:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0117c2e:	89 c1                	mov    %eax,%ecx
f0117c30:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117c37:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117c3a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c3f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117c42:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c45:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c4a:	f7 75 a0             	divl   -0x60(%ebp)
f0117c4d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117c50:	29 d0                	sub    %edx,%eax
f0117c52:	89 c3                	mov    %eax,%ebx
f0117c54:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0117c5b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117c60:	0f b6 d0             	movzbl %al,%edx
f0117c63:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c66:	01 d0                	add    %edx,%eax
f0117c68:	48                   	dec    %eax
f0117c69:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0117c6c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117c6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c74:	f7 75 98             	divl   -0x68(%ebp)
f0117c77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117c7a:	29 d0                	sub    %edx,%eax
f0117c7c:	01 c3                	add    %eax,%ebx
f0117c7e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117c85:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117c8a:	0f b6 c0             	movzbl %al,%eax
f0117c8d:	c1 e0 04             	shl    $0x4,%eax
f0117c90:	89 c2                	mov    %eax,%edx
f0117c92:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117c95:	01 d0                	add    %edx,%eax
f0117c97:	48                   	dec    %eax
f0117c98:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117c9b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ca3:	f7 75 90             	divl   -0x70(%ebp)
f0117ca6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117ca9:	29 d0                	sub    %edx,%eax
f0117cab:	01 d8                	add    %ebx,%eax
f0117cad:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117cb2:	39 c1                	cmp    %eax,%ecx
f0117cb4:	0f 85 c9 03 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117cba:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0117cc0:	89 c1                	mov    %eax,%ecx
f0117cc2:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117cc9:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117ccc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117cd1:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0117cd4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117cd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cdc:	f7 75 88             	divl   -0x78(%ebp)
f0117cdf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0117ce2:	29 d0                	sub    %edx,%eax
f0117ce4:	89 c3                	mov    %eax,%ebx
f0117ce6:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117ced:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117cf2:	0f b6 d0             	movzbl %al,%edx
f0117cf5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117cf8:	01 d0                	add    %edx,%eax
f0117cfa:	48                   	dec    %eax
f0117cfb:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0117d01:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117d07:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d0c:	f7 75 80             	divl   -0x80(%ebp)
f0117d0f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117d15:	29 d0                	sub    %edx,%eax
f0117d17:	01 c3                	add    %eax,%ebx
f0117d19:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117d20:	10 00 00 
f0117d23:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117d28:	0f b6 c0             	movzbl %al,%eax
f0117d2b:	c1 e0 04             	shl    $0x4,%eax
f0117d2e:	89 c2                	mov    %eax,%edx
f0117d30:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117d36:	01 d0                	add    %edx,%eax
f0117d38:	48                   	dec    %eax
f0117d39:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117d3f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d4a:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117d50:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0117d56:	29 d0                	sub    %edx,%eax
f0117d58:	01 d8                	add    %ebx,%eax
f0117d5a:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0117d5f:	39 c1                	cmp    %eax,%ecx
f0117d61:	0f 85 1c 03 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117d67:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0117d6d:	89 c1                	mov    %eax,%ecx
f0117d6f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117d76:	10 00 00 
f0117d79:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117d7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117d84:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117d8a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117d90:	ba 00 00 00 00       	mov    $0x0,%edx
f0117d95:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117d9b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117da1:	29 d0                	sub    %edx,%eax
f0117da3:	89 c3                	mov    %eax,%ebx
f0117da5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117dac:	10 00 00 
f0117daf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117db4:	0f b6 d0             	movzbl %al,%edx
f0117db7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117dbd:	01 d0                	add    %edx,%eax
f0117dbf:	48                   	dec    %eax
f0117dc0:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117dc6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117dcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0117dd1:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117dd7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117ddd:	29 d0                	sub    %edx,%eax
f0117ddf:	01 c3                	add    %eax,%ebx
f0117de1:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117de8:	10 00 00 
f0117deb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117df0:	0f b6 c0             	movzbl %al,%eax
f0117df3:	c1 e0 04             	shl    $0x4,%eax
f0117df6:	89 c2                	mov    %eax,%edx
f0117df8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117dfe:	01 d0                	add    %edx,%eax
f0117e00:	48                   	dec    %eax
f0117e01:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117e07:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117e0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e12:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117e18:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117e1e:	29 d0                	sub    %edx,%eax
f0117e20:	01 d8                	add    %ebx,%eax
f0117e22:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0117e27:	39 c1                	cmp    %eax,%ecx
f0117e29:	0f 85 54 02 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0117e2f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0117e35:	89 c1                	mov    %eax,%ecx
f0117e37:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117e3e:	10 00 00 
f0117e41:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117e47:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e4c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0117e52:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117e58:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e5d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0117e63:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117e69:	29 d0                	sub    %edx,%eax
f0117e6b:	89 c3                	mov    %eax,%ebx
f0117e6d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0117e74:	10 00 00 
f0117e77:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117e7c:	0f b6 d0             	movzbl %al,%edx
f0117e7f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117e85:	01 d0                	add    %edx,%eax
f0117e87:	48                   	dec    %eax
f0117e88:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117e8e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117e94:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e99:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117e9f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117ea5:	29 d0                	sub    %edx,%eax
f0117ea7:	01 c3                	add    %eax,%ebx
f0117ea9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117eb0:	10 00 00 
f0117eb3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117eb8:	0f b6 c0             	movzbl %al,%eax
f0117ebb:	c1 e0 04             	shl    $0x4,%eax
f0117ebe:	89 c2                	mov    %eax,%edx
f0117ec0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117ec6:	01 d0                	add    %edx,%eax
f0117ec8:	48                   	dec    %eax
f0117ec9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117ecf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117ed5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eda:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117ee0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117ee6:	29 d0                	sub    %edx,%eax
f0117ee8:	01 d8                	add    %ebx,%eax
f0117eea:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0117eef:	39 c1                	cmp    %eax,%ecx
f0117ef1:	0f 85 8c 01 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0117ef7:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0117efd:	89 c1                	mov    %eax,%ecx
f0117eff:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117f06:	10 00 00 
f0117f09:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117f0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0117f1a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f20:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f25:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0117f2b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117f31:	29 d0                	sub    %edx,%eax
f0117f33:	89 c3                	mov    %eax,%ebx
f0117f35:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0117f3c:	10 00 00 
f0117f3f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117f44:	0f b6 d0             	movzbl %al,%edx
f0117f47:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117f4d:	01 d0                	add    %edx,%eax
f0117f4f:	48                   	dec    %eax
f0117f50:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117f56:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f61:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117f67:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117f6d:	29 d0                	sub    %edx,%eax
f0117f6f:	01 c3                	add    %eax,%ebx
f0117f71:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117f78:	10 00 00 
f0117f7b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0117f80:	0f b6 c0             	movzbl %al,%eax
f0117f83:	c1 e0 04             	shl    $0x4,%eax
f0117f86:	89 c2                	mov    %eax,%edx
f0117f88:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117f8e:	01 d0                	add    %edx,%eax
f0117f90:	48                   	dec    %eax
f0117f91:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117f97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117f9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fa2:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117fa8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117fae:	29 d0                	sub    %edx,%eax
f0117fb0:	01 d8                	add    %ebx,%eax
f0117fb2:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0117fb7:	39 c1                	cmp    %eax,%ecx
f0117fb9:	0f 85 c4 00 00 00    	jne    f0118083 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0117fbf:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0117fc5:	89 c1                	mov    %eax,%ecx
f0117fc7:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117fce:	10 00 00 
f0117fd1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117fd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fdc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117fe2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117fe8:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fed:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117ff3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117ff9:	29 d0                	sub    %edx,%eax
f0117ffb:	89 c3                	mov    %eax,%ebx
f0117ffd:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118004:	10 00 00 
f0118007:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011800c:	0f b6 d0             	movzbl %al,%edx
f011800f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118015:	01 d0                	add    %edx,%eax
f0118017:	48                   	dec    %eax
f0118018:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011801e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118024:	ba 00 00 00 00       	mov    $0x0,%edx
f0118029:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011802f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118035:	29 d0                	sub    %edx,%eax
f0118037:	01 c3                	add    %eax,%ebx
f0118039:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118040:	10 00 00 
f0118043:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118048:	0f b6 c0             	movzbl %al,%eax
f011804b:	c1 e0 04             	shl    $0x4,%eax
f011804e:	89 c2                	mov    %eax,%edx
f0118050:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118056:	01 d0                	add    %edx,%eax
f0118058:	48                   	dec    %eax
f0118059:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011805f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118065:	ba 00 00 00 00       	mov    $0x0,%edx
f011806a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118070:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118076:	29 d0                	sub    %edx,%eax
f0118078:	01 d8                	add    %ebx,%eax
f011807a:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011807f:	39 c1                	cmp    %eax,%ecx
f0118081:	74 17                	je     f011809a <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0118083:	83 ec 04             	sub    $0x4,%esp
f0118086:	68 f4 a4 13 f0       	push   $0xf013a4f4
f011808b:	68 03 01 00 00       	push   $0x103
f0118090:	68 7a a2 13 f0       	push   $0xf013a27a
f0118095:	e8 0c 81 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011809a:	e8 ed bb fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011809f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01180a2:	74 17                	je     f01180bb <test_kmalloc_nextfit+0x6ec>
f01180a4:	83 ec 04             	sub    $0x4,%esp
f01180a7:	68 94 a2 13 f0       	push   $0xf013a294
f01180ac:	68 05 01 00 00       	push   $0x105
f01180b1:	68 7a a2 13 f0       	push   $0xf013a27a
f01180b6:	e8 eb 80 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01180bb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01180be:	e8 d5 3c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01180c3:	29 c3                	sub    %eax,%ebx
f01180c5:	89 d9                	mov    %ebx,%ecx
f01180c7:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01180ce:	10 00 00 
f01180d1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01180d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180dc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01180e2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01180e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01180ed:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01180f3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01180f9:	29 d0                	sub    %edx,%eax
f01180fb:	89 c3                	mov    %eax,%ebx
f01180fd:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118104:	10 00 00 
f0118107:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011810c:	0f b6 d0             	movzbl %al,%edx
f011810f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118115:	01 d0                	add    %edx,%eax
f0118117:	48                   	dec    %eax
f0118118:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011811e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118124:	ba 00 00 00 00       	mov    $0x0,%edx
f0118129:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011812f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118135:	29 d0                	sub    %edx,%eax
f0118137:	01 c3                	add    %eax,%ebx
f0118139:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118140:	10 00 00 
f0118143:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118148:	0f b6 c0             	movzbl %al,%eax
f011814b:	c1 e0 04             	shl    $0x4,%eax
f011814e:	89 c2                	mov    %eax,%edx
f0118150:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118156:	01 d0                	add    %edx,%eax
f0118158:	48                   	dec    %eax
f0118159:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011815f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118165:	ba 00 00 00 00       	mov    $0x0,%edx
f011816a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118170:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118176:	29 d0                	sub    %edx,%eax
f0118178:	01 d8                	add    %ebx,%eax
f011817a:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011817f:	29 c2                	sub    %eax,%edx
f0118181:	89 d0                	mov    %edx,%eax
f0118183:	c1 e8 0c             	shr    $0xc,%eax
f0118186:	39 c1                	cmp    %eax,%ecx
f0118188:	74 17                	je     f01181a1 <test_kmalloc_nextfit+0x7d2>
f011818a:	83 ec 04             	sub    $0x4,%esp
f011818d:	68 37 a5 13 f0       	push   $0xf013a537
f0118192:	68 06 01 00 00       	push   $0x106
f0118197:	68 7a a2 13 f0       	push   $0xf013a27a
f011819c:	e8 05 80 fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f01181a1:	e8 e6 ba fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01181a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01181a9:	e8 ea 3b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01181ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f01181b1:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01181b7:	83 ec 0c             	sub    $0xc,%esp
f01181ba:	50                   	push   %eax
f01181bb:	e8 36 f2 fe ff       	call   f01073f6 <kfree>
f01181c0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01181c3:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01181c9:	83 ec 0c             	sub    $0xc,%esp
f01181cc:	50                   	push   %eax
f01181cd:	e8 24 f2 fe ff       	call   f01073f6 <kfree>
f01181d2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01181d5:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01181db:	83 ec 0c             	sub    $0xc,%esp
f01181de:	50                   	push   %eax
f01181df:	e8 12 f2 fe ff       	call   f01073f6 <kfree>
f01181e4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01181e7:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01181ed:	83 ec 0c             	sub    $0xc,%esp
f01181f0:	50                   	push   %eax
f01181f1:	e8 00 f2 fe ff       	call   f01073f6 <kfree>
f01181f6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01181f9:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01181ff:	83 ec 0c             	sub    $0xc,%esp
f0118202:	50                   	push   %eax
f0118203:	e8 ee f1 fe ff       	call   f01073f6 <kfree>
f0118208:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011820b:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118211:	83 ec 0c             	sub    $0xc,%esp
f0118214:	50                   	push   %eax
f0118215:	e8 dc f1 fe ff       	call   f01073f6 <kfree>
f011821a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011821d:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118223:	83 ec 0c             	sub    $0xc,%esp
f0118226:	50                   	push   %eax
f0118227:	e8 ca f1 fe ff       	call   f01073f6 <kfree>
f011822c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011822f:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118235:	83 ec 0c             	sub    $0xc,%esp
f0118238:	50                   	push   %eax
f0118239:	e8 b8 f1 fe ff       	call   f01073f6 <kfree>
f011823e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118241:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118247:	83 ec 0c             	sub    $0xc,%esp
f011824a:	50                   	push   %eax
f011824b:	e8 a6 f1 fe ff       	call   f01073f6 <kfree>
f0118250:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118253:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118259:	83 ec 0c             	sub    $0xc,%esp
f011825c:	50                   	push   %eax
f011825d:	e8 94 f1 fe ff       	call   f01073f6 <kfree>
f0118262:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118265:	e8 22 ba fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011826a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011826d:	74 17                	je     f0118286 <test_kmalloc_nextfit+0x8b7>
f011826f:	83 ec 04             	sub    $0x4,%esp
f0118272:	68 94 a2 13 f0       	push   $0xf013a294
f0118277:	68 17 01 00 00       	push   $0x117
f011827c:	68 7a a2 13 f0       	push   $0xf013a27a
f0118281:	e8 20 7f fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118286:	e8 0d 3b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011828b:	89 c2                	mov    %eax,%edx
f011828d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118290:	89 d1                	mov    %edx,%ecx
f0118292:	29 c1                	sub    %eax,%ecx
f0118294:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011829b:	10 00 00 
f011829e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01182a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182a9:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01182af:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182ba:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01182c0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01182c6:	29 d0                	sub    %edx,%eax
f01182c8:	89 c3                	mov    %eax,%ebx
f01182ca:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01182d1:	10 00 00 
f01182d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01182d9:	0f b6 d0             	movzbl %al,%edx
f01182dc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01182e2:	01 d0                	add    %edx,%eax
f01182e4:	48                   	dec    %eax
f01182e5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01182eb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01182f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01182f6:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01182fc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118302:	29 d0                	sub    %edx,%eax
f0118304:	01 c3                	add    %eax,%ebx
f0118306:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011830d:	10 00 00 
f0118310:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118315:	0f b6 c0             	movzbl %al,%eax
f0118318:	c1 e0 04             	shl    $0x4,%eax
f011831b:	89 c2                	mov    %eax,%edx
f011831d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118323:	01 d0                	add    %edx,%eax
f0118325:	48                   	dec    %eax
f0118326:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011832c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118332:	ba 00 00 00 00       	mov    $0x0,%edx
f0118337:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011833d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118343:	29 d0                	sub    %edx,%eax
f0118345:	01 d8                	add    %ebx,%eax
f0118347:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f011834c:	29 c2                	sub    %eax,%edx
f011834e:	89 d0                	mov    %edx,%eax
f0118350:	c1 e8 0c             	shr    $0xc,%eax
f0118353:	39 c1                	cmp    %eax,%ecx
f0118355:	74 17                	je     f011836e <test_kmalloc_nextfit+0x99f>
f0118357:	83 ec 04             	sub    $0x4,%esp
f011835a:	68 48 a5 13 f0       	push   $0xf013a548
f011835f:	68 18 01 00 00       	push   $0x118
f0118364:	68 7a a2 13 f0       	push   $0xf013a27a
f0118369:	e8 38 7e fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f011836e:	e8 19 b9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118373:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118376:	e8 1d 3a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011837b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f011837e:	83 ec 0c             	sub    $0xc,%esp
f0118381:	68 00 fc 0f 00       	push   $0xffc00
f0118386:	e8 51 f0 fe ff       	call   f01073dc <kmalloc>
f011838b:	83 c4 10             	add    $0x10,%esp
f011838e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118394:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011839b:	10 00 00 
f011839e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01183a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183a9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01183af:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01183b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01183ba:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01183c0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01183c6:	29 d0                	sub    %edx,%eax
f01183c8:	89 c1                	mov    %eax,%ecx
f01183ca:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01183d1:	10 00 00 
f01183d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01183d9:	0f b6 d0             	movzbl %al,%edx
f01183dc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01183e2:	01 d0                	add    %edx,%eax
f01183e4:	48                   	dec    %eax
f01183e5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01183eb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01183f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01183f6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01183fc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118402:	29 d0                	sub    %edx,%eax
f0118404:	01 c1                	add    %eax,%ecx
f0118406:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011840d:	10 00 00 
f0118410:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118415:	0f b6 c0             	movzbl %al,%eax
f0118418:	c1 e0 04             	shl    $0x4,%eax
f011841b:	89 c2                	mov    %eax,%edx
f011841d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118423:	01 d0                	add    %edx,%eax
f0118425:	48                   	dec    %eax
f0118426:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011842c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118432:	ba 00 00 00 00       	mov    $0x0,%edx
f0118437:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011843d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118443:	29 d0                	sub    %edx,%eax
f0118445:	01 c8                	add    %ecx,%eax
f0118447:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011844d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118453:	39 c2                	cmp    %eax,%edx
f0118455:	74 17                	je     f011846e <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118457:	83 ec 04             	sub    $0x4,%esp
f011845a:	68 88 a5 13 f0       	push   $0xf013a588
f011845f:	68 1f 01 00 00       	push   $0x11f
f0118464:	68 7a a2 13 f0       	push   $0xf013a27a
f0118469:	e8 38 7d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011846e:	e8 19 b8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118473:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118476:	74 17                	je     f011848f <test_kmalloc_nextfit+0xac0>
f0118478:	83 ec 04             	sub    $0x4,%esp
f011847b:	68 94 a2 13 f0       	push   $0xf013a294
f0118480:	68 20 01 00 00       	push   $0x120
f0118485:	68 7a a2 13 f0       	push   $0xf013a27a
f011848a:	e8 17 7d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011848f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118492:	e8 01 39 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118497:	29 c3                	sub    %eax,%ebx
f0118499:	89 d8                	mov    %ebx,%eax
f011849b:	3d 00 01 00 00       	cmp    $0x100,%eax
f01184a0:	74 17                	je     f01184b9 <test_kmalloc_nextfit+0xaea>
f01184a2:	83 ec 04             	sub    $0x4,%esp
f01184a5:	68 37 a5 13 f0       	push   $0xf013a537
f01184aa:	68 21 01 00 00       	push   $0x121
f01184af:	68 7a a2 13 f0       	push   $0xf013a27a
f01184b4:	e8 ed 7c fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01184b9:	e8 ce b7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01184be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01184c1:	e8 d2 38 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01184c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01184c9:	83 ec 0c             	sub    $0xc,%esp
f01184cc:	68 00 04 00 00       	push   $0x400
f01184d1:	e8 06 ef fe ff       	call   f01073dc <kmalloc>
f01184d6:	83 c4 10             	add    $0x10,%esp
f01184d9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01184df:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01184e6:	10 00 00 
f01184e9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01184ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184f4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01184fa:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118500:	ba 00 00 00 00       	mov    $0x0,%edx
f0118505:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011850b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118511:	29 d0                	sub    %edx,%eax
f0118513:	89 c1                	mov    %eax,%ecx
f0118515:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011851c:	10 00 00 
f011851f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118524:	0f b6 d0             	movzbl %al,%edx
f0118527:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011852d:	01 d0                	add    %edx,%eax
f011852f:	48                   	dec    %eax
f0118530:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118536:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011853c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118541:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118547:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011854d:	29 d0                	sub    %edx,%eax
f011854f:	01 c1                	add    %eax,%ecx
f0118551:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118558:	10 00 00 
f011855b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118560:	0f b6 c0             	movzbl %al,%eax
f0118563:	c1 e0 04             	shl    $0x4,%eax
f0118566:	89 c2                	mov    %eax,%edx
f0118568:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011856e:	01 d0                	add    %edx,%eax
f0118570:	48                   	dec    %eax
f0118571:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118577:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011857d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118582:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118588:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011858e:	29 d0                	sub    %edx,%eax
f0118590:	01 c8                	add    %ecx,%eax
f0118592:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118598:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011859e:	39 c2                	cmp    %eax,%edx
f01185a0:	74 17                	je     f01185b9 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f01185a2:	83 ec 04             	sub    $0x4,%esp
f01185a5:	68 88 a5 13 f0       	push   $0xf013a588
f01185aa:	68 27 01 00 00       	push   $0x127
f01185af:	68 7a a2 13 f0       	push   $0xf013a27a
f01185b4:	e8 ed 7b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185b9:	e8 ce b6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01185be:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01185c1:	74 17                	je     f01185da <test_kmalloc_nextfit+0xc0b>
f01185c3:	83 ec 04             	sub    $0x4,%esp
f01185c6:	68 94 a2 13 f0       	push   $0xf013a294
f01185cb:	68 28 01 00 00       	push   $0x128
f01185d0:	68 7a a2 13 f0       	push   $0xf013a27a
f01185d5:	e8 cc 7b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01185da:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01185dd:	e8 b6 37 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01185e2:	29 c3                	sub    %eax,%ebx
f01185e4:	89 d8                	mov    %ebx,%eax
f01185e6:	83 f8 01             	cmp    $0x1,%eax
f01185e9:	74 17                	je     f0118602 <test_kmalloc_nextfit+0xc33>
f01185eb:	83 ec 04             	sub    $0x4,%esp
f01185ee:	68 37 a5 13 f0       	push   $0xf013a537
f01185f3:	68 29 01 00 00       	push   $0x129
f01185f8:	68 7a a2 13 f0       	push   $0xf013a27a
f01185fd:	e8 a4 7b fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118602:	e8 85 b6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118607:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011860a:	e8 89 37 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011860f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118612:	83 ec 0c             	sub    $0xc,%esp
f0118615:	68 00 00 50 00       	push   $0x500000
f011861a:	e8 bd ed fe ff       	call   f01073dc <kmalloc>
f011861f:	83 c4 10             	add    $0x10,%esp
f0118622:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118628:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011862f:	10 00 00 
f0118632:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011863d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118643:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118649:	ba 00 00 00 00       	mov    $0x0,%edx
f011864e:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118654:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011865a:	29 d0                	sub    %edx,%eax
f011865c:	89 c1                	mov    %eax,%ecx
f011865e:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118665:	10 00 00 
f0118668:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011866d:	0f b6 d0             	movzbl %al,%edx
f0118670:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118676:	01 d0                	add    %edx,%eax
f0118678:	48                   	dec    %eax
f0118679:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011867f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118685:	ba 00 00 00 00       	mov    $0x0,%edx
f011868a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118690:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118696:	29 d0                	sub    %edx,%eax
f0118698:	01 c1                	add    %eax,%ecx
f011869a:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01186a1:	10 00 00 
f01186a4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01186a9:	0f b6 c0             	movzbl %al,%eax
f01186ac:	c1 e0 04             	shl    $0x4,%eax
f01186af:	89 c2                	mov    %eax,%edx
f01186b1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01186b7:	01 d0                	add    %edx,%eax
f01186b9:	48                   	dec    %eax
f01186ba:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f01186c0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01186c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01186cb:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f01186d1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01186d7:	29 d0                	sub    %edx,%eax
f01186d9:	01 c8                	add    %ecx,%eax
f01186db:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01186e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01186e7:	39 c2                	cmp    %eax,%edx
f01186e9:	74 17                	je     f0118702 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f01186eb:	83 ec 04             	sub    $0x4,%esp
f01186ee:	68 88 a5 13 f0       	push   $0xf013a588
f01186f3:	68 2f 01 00 00       	push   $0x12f
f01186f8:	68 7a a2 13 f0       	push   $0xf013a27a
f01186fd:	e8 a4 7a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118702:	e8 85 b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118707:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011870a:	74 17                	je     f0118723 <test_kmalloc_nextfit+0xd54>
f011870c:	83 ec 04             	sub    $0x4,%esp
f011870f:	68 94 a2 13 f0       	push   $0xf013a294
f0118714:	68 30 01 00 00       	push   $0x130
f0118719:	68 7a a2 13 f0       	push   $0xf013a27a
f011871e:	e8 83 7a fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118723:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118726:	e8 6d 36 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011872b:	29 c3                	sub    %eax,%ebx
f011872d:	89 d8                	mov    %ebx,%eax
f011872f:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118734:	74 17                	je     f011874d <test_kmalloc_nextfit+0xd7e>
f0118736:	83 ec 04             	sub    $0x4,%esp
f0118739:	68 37 a5 13 f0       	push   $0xf013a537
f011873e:	68 31 01 00 00       	push   $0x131
f0118743:	68 7a a2 13 f0       	push   $0xf013a27a
f0118748:	e8 59 7a fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011874d:	e8 3a b5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118752:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118755:	e8 3e 36 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011875a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011875d:	83 ec 0c             	sub    $0xc,%esp
f0118760:	68 00 00 10 00       	push   $0x100000
f0118765:	e8 72 ec fe ff       	call   f01073dc <kmalloc>
f011876a:	83 c4 10             	add    $0x10,%esp
f011876d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0118773:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f011877a:	10 00 00 
f011877d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118783:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118788:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f011878e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118794:	ba 00 00 00 00       	mov    $0x0,%edx
f0118799:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f011879f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01187a5:	29 d0                	sub    %edx,%eax
f01187a7:	89 c1                	mov    %eax,%ecx
f01187a9:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01187b0:	10 00 00 
f01187b3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01187b8:	0f b6 d0             	movzbl %al,%edx
f01187bb:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01187c1:	01 d0                	add    %edx,%eax
f01187c3:	48                   	dec    %eax
f01187c4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01187ca:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01187d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01187d5:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01187db:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01187e1:	29 d0                	sub    %edx,%eax
f01187e3:	01 c1                	add    %eax,%ecx
f01187e5:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f01187ec:	10 00 00 
f01187ef:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01187f4:	0f b6 c0             	movzbl %al,%eax
f01187f7:	c1 e0 04             	shl    $0x4,%eax
f01187fa:	89 c2                	mov    %eax,%edx
f01187fc:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118802:	01 d0                	add    %edx,%eax
f0118804:	48                   	dec    %eax
f0118805:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f011880b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118811:	ba 00 00 00 00       	mov    $0x0,%edx
f0118816:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011881c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118822:	29 d0                	sub    %edx,%eax
f0118824:	01 c8                	add    %ecx,%eax
f0118826:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011882c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118832:	39 c2                	cmp    %eax,%edx
f0118834:	74 17                	je     f011884d <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0118836:	83 ec 04             	sub    $0x4,%esp
f0118839:	68 88 a5 13 f0       	push   $0xf013a588
f011883e:	68 37 01 00 00       	push   $0x137
f0118843:	68 7a a2 13 f0       	push   $0xf013a27a
f0118848:	e8 59 79 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011884d:	e8 3a b4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118852:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118855:	74 17                	je     f011886e <test_kmalloc_nextfit+0xe9f>
f0118857:	83 ec 04             	sub    $0x4,%esp
f011885a:	68 94 a2 13 f0       	push   $0xf013a294
f011885f:	68 38 01 00 00       	push   $0x138
f0118864:	68 7a a2 13 f0       	push   $0xf013a27a
f0118869:	e8 38 79 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011886e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118871:	e8 22 35 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118876:	29 c3                	sub    %eax,%ebx
f0118878:	89 d8                	mov    %ebx,%eax
f011887a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011887f:	74 17                	je     f0118898 <test_kmalloc_nextfit+0xec9>
f0118881:	83 ec 04             	sub    $0x4,%esp
f0118884:	68 37 a5 13 f0       	push   $0xf013a537
f0118889:	68 39 01 00 00       	push   $0x139
f011888e:	68 7a a2 13 f0       	push   $0xf013a27a
f0118893:	e8 0e 79 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118898:	e8 ef b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011889d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01188a0:	e8 f3 34 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01188a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f01188a8:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01188ae:	83 ec 0c             	sub    $0xc,%esp
f01188b1:	50                   	push   %eax
f01188b2:	e8 3f eb fe ff       	call   f01073f6 <kfree>
f01188b7:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188ba:	e8 cd b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01188bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01188c2:	74 17                	je     f01188db <test_kmalloc_nextfit+0xf0c>
f01188c4:	83 ec 04             	sub    $0x4,%esp
f01188c7:	68 94 a2 13 f0       	push   $0xf013a294
f01188cc:	68 3e 01 00 00       	push   $0x13e
f01188d1:	68 7a a2 13 f0       	push   $0xf013a27a
f01188d6:	e8 cb 78 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01188db:	e8 b8 34 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01188e0:	89 c2                	mov    %eax,%edx
f01188e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01188e5:	29 c2                	sub    %eax,%edx
f01188e7:	89 d0                	mov    %edx,%eax
f01188e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01188ee:	74 17                	je     f0118907 <test_kmalloc_nextfit+0xf38>
f01188f0:	83 ec 04             	sub    $0x4,%esp
f01188f3:	68 48 a5 13 f0       	push   $0xf013a548
f01188f8:	68 3f 01 00 00       	push   $0x13f
f01188fd:	68 7a a2 13 f0       	push   $0xf013a27a
f0118902:	e8 9f 78 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118907:	e8 80 b3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011890c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011890f:	e8 84 34 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118914:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0118917:	83 ec 0c             	sub    $0xc,%esp
f011891a:	68 00 04 00 00       	push   $0x400
f011891f:	e8 b8 ea fe ff       	call   f01073dc <kmalloc>
f0118924:	83 c4 10             	add    $0x10,%esp
f0118927:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011892d:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0118934:	10 00 00 
f0118937:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011893d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118942:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0118948:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011894e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118953:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0118959:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011895f:	29 d0                	sub    %edx,%eax
f0118961:	89 c1                	mov    %eax,%ecx
f0118963:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011896a:	10 00 00 
f011896d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118972:	0f b6 d0             	movzbl %al,%edx
f0118975:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011897b:	01 d0                	add    %edx,%eax
f011897d:	48                   	dec    %eax
f011897e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0118984:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011898a:	ba 00 00 00 00       	mov    $0x0,%edx
f011898f:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0118995:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011899b:	29 d0                	sub    %edx,%eax
f011899d:	01 c1                	add    %eax,%ecx
f011899f:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01189a6:	10 00 00 
f01189a9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01189ae:	0f b6 c0             	movzbl %al,%eax
f01189b1:	c1 e0 04             	shl    $0x4,%eax
f01189b4:	89 c2                	mov    %eax,%edx
f01189b6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01189bc:	01 d0                	add    %edx,%eax
f01189be:	48                   	dec    %eax
f01189bf:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01189c5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01189cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01189d0:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01189d6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01189dc:	29 d0                	sub    %edx,%eax
f01189de:	01 c8                	add    %ecx,%eax
f01189e0:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f01189e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01189ec:	39 c2                	cmp    %eax,%edx
f01189ee:	74 17                	je     f0118a07 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f01189f0:	83 ec 04             	sub    $0x4,%esp
f01189f3:	68 88 a5 13 f0       	push   $0xf013a588
f01189f8:	68 45 01 00 00       	push   $0x145
f01189fd:	68 7a a2 13 f0       	push   $0xf013a27a
f0118a02:	e8 9f 77 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a07:	e8 80 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a0c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118a0f:	74 17                	je     f0118a28 <test_kmalloc_nextfit+0x1059>
f0118a11:	83 ec 04             	sub    $0x4,%esp
f0118a14:	68 94 a2 13 f0       	push   $0xf013a294
f0118a19:	68 46 01 00 00       	push   $0x146
f0118a1e:	68 7a a2 13 f0       	push   $0xf013a27a
f0118a23:	e8 7e 77 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118a28:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118a2b:	e8 68 33 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118a30:	29 c3                	sub    %eax,%ebx
f0118a32:	89 d8                	mov    %ebx,%eax
f0118a34:	83 f8 01             	cmp    $0x1,%eax
f0118a37:	74 17                	je     f0118a50 <test_kmalloc_nextfit+0x1081>
f0118a39:	83 ec 04             	sub    $0x4,%esp
f0118a3c:	68 37 a5 13 f0       	push   $0xf013a537
f0118a41:	68 47 01 00 00       	push   $0x147
f0118a46:	68 7a a2 13 f0       	push   $0xf013a27a
f0118a4b:	e8 56 77 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118a50:	e8 37 b2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118a55:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118a58:	e8 3b 33 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118a5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0118a60:	83 ec 0c             	sub    $0xc,%esp
f0118a63:	68 00 e0 1f 00       	push   $0x1fe000
f0118a68:	e8 6f e9 fe ff       	call   f01073dc <kmalloc>
f0118a6d:	83 c4 10             	add    $0x10,%esp
f0118a70:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0118a76:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0118a7d:	10 00 00 
f0118a80:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118a86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a8b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0118a91:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118a97:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a9c:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0118aa2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118aa8:	29 d0                	sub    %edx,%eax
f0118aaa:	89 c1                	mov    %eax,%ecx
f0118aac:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0118ab3:	10 00 00 
f0118ab6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118abb:	0f b6 d0             	movzbl %al,%edx
f0118abe:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118ac4:	01 d0                	add    %edx,%eax
f0118ac6:	48                   	dec    %eax
f0118ac7:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0118acd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ad8:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0118ade:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118ae4:	29 d0                	sub    %edx,%eax
f0118ae6:	01 c1                	add    %eax,%ecx
f0118ae8:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0118aef:	10 00 00 
f0118af2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118af7:	0f b6 c0             	movzbl %al,%eax
f0118afa:	c1 e0 04             	shl    $0x4,%eax
f0118afd:	89 c2                	mov    %eax,%edx
f0118aff:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118b05:	01 d0                	add    %edx,%eax
f0118b07:	48                   	dec    %eax
f0118b08:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0118b0e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118b14:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b19:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0118b1f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118b25:	29 d0                	sub    %edx,%eax
f0118b27:	01 c8                	add    %ecx,%eax
f0118b29:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0118b2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b35:	39 c2                	cmp    %eax,%edx
f0118b37:	74 17                	je     f0118b50 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0118b39:	83 ec 04             	sub    $0x4,%esp
f0118b3c:	68 88 a5 13 f0       	push   $0xf013a588
f0118b41:	68 4d 01 00 00       	push   $0x14d
f0118b46:	68 7a a2 13 f0       	push   $0xf013a27a
f0118b4b:	e8 56 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b50:	e8 37 b1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118b55:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118b58:	74 17                	je     f0118b71 <test_kmalloc_nextfit+0x11a2>
f0118b5a:	83 ec 04             	sub    $0x4,%esp
f0118b5d:	68 94 a2 13 f0       	push   $0xf013a294
f0118b62:	68 4e 01 00 00       	push   $0x14e
f0118b67:	68 7a a2 13 f0       	push   $0xf013a27a
f0118b6c:	e8 35 76 fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118b71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118b74:	e8 1f 32 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118b79:	29 c3                	sub    %eax,%ebx
f0118b7b:	89 d8                	mov    %ebx,%eax
f0118b7d:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0118b82:	74 17                	je     f0118b9b <test_kmalloc_nextfit+0x11cc>
f0118b84:	83 ec 04             	sub    $0x4,%esp
f0118b87:	68 37 a5 13 f0       	push   $0xf013a537
f0118b8c:	68 50 01 00 00       	push   $0x150
f0118b91:	68 7a a2 13 f0       	push   $0xf013a27a
f0118b96:	e8 0b 76 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118b9b:	e8 ec b0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ba0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118ba3:	e8 f0 31 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118ba8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0118bab:	83 ec 0c             	sub    $0xc,%esp
f0118bae:	68 00 00 08 00       	push   $0x80000
f0118bb3:	e8 24 e8 fe ff       	call   f01073dc <kmalloc>
f0118bb8:	83 c4 10             	add    $0x10,%esp
f0118bbb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0118bc1:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0118bc8:	10 00 00 
f0118bcb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118bd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118bd6:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0118bdc:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118be2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118be7:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0118bed:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118bf3:	29 d0                	sub    %edx,%eax
f0118bf5:	89 c1                	mov    %eax,%ecx
f0118bf7:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0118bfe:	10 00 00 
f0118c01:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118c06:	0f b6 d0             	movzbl %al,%edx
f0118c09:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118c0f:	01 d0                	add    %edx,%eax
f0118c11:	48                   	dec    %eax
f0118c12:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0118c18:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118c1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c23:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0118c29:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118c2f:	29 d0                	sub    %edx,%eax
f0118c31:	01 c1                	add    %eax,%ecx
f0118c33:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0118c3a:	10 00 00 
f0118c3d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118c42:	0f b6 c0             	movzbl %al,%eax
f0118c45:	c1 e0 04             	shl    $0x4,%eax
f0118c48:	89 c2                	mov    %eax,%edx
f0118c4a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0118c50:	01 d0                	add    %edx,%eax
f0118c52:	48                   	dec    %eax
f0118c53:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0118c59:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0118c5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c64:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0118c6a:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0118c70:	29 d0                	sub    %edx,%eax
f0118c72:	01 c8                	add    %ecx,%eax
f0118c74:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0118c7a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c80:	39 c2                	cmp    %eax,%edx
f0118c82:	74 17                	je     f0118c9b <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f0118c84:	83 ec 04             	sub    $0x4,%esp
f0118c87:	68 88 a5 13 f0       	push   $0xf013a588
f0118c8c:	68 56 01 00 00       	push   $0x156
f0118c91:	68 7a a2 13 f0       	push   $0xf013a27a
f0118c96:	e8 0b 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c9b:	e8 ec af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118ca0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118ca3:	74 17                	je     f0118cbc <test_kmalloc_nextfit+0x12ed>
f0118ca5:	83 ec 04             	sub    $0x4,%esp
f0118ca8:	68 94 a2 13 f0       	push   $0xf013a294
f0118cad:	68 57 01 00 00       	push   $0x157
f0118cb2:	68 7a a2 13 f0       	push   $0xf013a27a
f0118cb7:	e8 ea 74 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118cbc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118cbf:	e8 d4 30 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118cc4:	29 c3                	sub    %eax,%ebx
f0118cc6:	89 d8                	mov    %ebx,%eax
f0118cc8:	3d 80 00 00 00       	cmp    $0x80,%eax
f0118ccd:	74 17                	je     f0118ce6 <test_kmalloc_nextfit+0x1317>
f0118ccf:	83 ec 04             	sub    $0x4,%esp
f0118cd2:	68 37 a5 13 f0       	push   $0xf013a537
f0118cd7:	68 58 01 00 00       	push   $0x158
f0118cdc:	68 7a a2 13 f0       	push   $0xf013a27a
f0118ce1:	e8 c0 74 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0118ce6:	83 ec 0c             	sub    $0xc,%esp
f0118ce9:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0118cee:	e8 3a 7f fe ff       	call   f0100c2d <cprintf>
f0118cf3:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0118cf6:	e8 91 af fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118cfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118cfe:	e8 95 30 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118d03:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0118d06:	83 ec 0c             	sub    $0xc,%esp
f0118d09:	68 00 00 38 00       	push   $0x380000
f0118d0e:	e8 c9 e6 fe ff       	call   f01073dc <kmalloc>
f0118d13:	83 c4 10             	add    $0x10,%esp
f0118d16:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0118d1c:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f0118d23:	10 00 00 
f0118d26:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0118d2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d31:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f0118d37:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0118d3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d42:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0118d48:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0118d4e:	29 d0                	sub    %edx,%eax
f0118d50:	89 c1                	mov    %eax,%ecx
f0118d52:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0118d59:	10 00 00 
f0118d5c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118d61:	0f b6 d0             	movzbl %al,%edx
f0118d64:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0118d6a:	01 d0                	add    %edx,%eax
f0118d6c:	48                   	dec    %eax
f0118d6d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f0118d73:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0118d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d7e:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f0118d84:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0118d8a:	29 d0                	sub    %edx,%eax
f0118d8c:	01 c1                	add    %eax,%ecx
f0118d8e:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0118d95:	10 00 00 
f0118d98:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118d9d:	0f b6 c0             	movzbl %al,%eax
f0118da0:	c1 e0 04             	shl    $0x4,%eax
f0118da3:	89 c2                	mov    %eax,%edx
f0118da5:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0118dab:	01 d0                	add    %edx,%eax
f0118dad:	48                   	dec    %eax
f0118dae:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0118db4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0118dba:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dbf:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0118dc5:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0118dcb:	29 d0                	sub    %edx,%eax
f0118dcd:	01 c8                	add    %ecx,%eax
f0118dcf:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0118dd5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ddb:	39 c2                	cmp    %eax,%edx
f0118ddd:	74 17                	je     f0118df6 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f0118ddf:	83 ec 04             	sub    $0x4,%esp
f0118de2:	68 88 a5 13 f0       	push   $0xf013a588
f0118de7:	68 62 01 00 00       	push   $0x162
f0118dec:	68 7a a2 13 f0       	push   $0xf013a27a
f0118df1:	e8 b0 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118df6:	e8 91 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118dfb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118dfe:	74 17                	je     f0118e17 <test_kmalloc_nextfit+0x1448>
f0118e00:	83 ec 04             	sub    $0x4,%esp
f0118e03:	68 94 a2 13 f0       	push   $0xf013a294
f0118e08:	68 63 01 00 00       	push   $0x163
f0118e0d:	68 7a a2 13 f0       	push   $0xf013a27a
f0118e12:	e8 8f 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118e17:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118e1a:	e8 79 2f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118e1f:	29 c3                	sub    %eax,%ebx
f0118e21:	89 d8                	mov    %ebx,%eax
f0118e23:	3d 80 03 00 00       	cmp    $0x380,%eax
f0118e28:	74 17                	je     f0118e41 <test_kmalloc_nextfit+0x1472>
f0118e2a:	83 ec 04             	sub    $0x4,%esp
f0118e2d:	68 37 a5 13 f0       	push   $0xf013a537
f0118e32:	68 64 01 00 00       	push   $0x164
f0118e37:	68 7a a2 13 f0       	push   $0xf013a27a
f0118e3c:	e8 65 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e41:	e8 46 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e46:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e49:	e8 4a 2f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118e4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0118e51:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f0118e57:	83 ec 0c             	sub    $0xc,%esp
f0118e5a:	50                   	push   %eax
f0118e5b:	e8 96 e5 fe ff       	call   f01073f6 <kfree>
f0118e60:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e63:	e8 24 ae fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118e68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118e6b:	74 17                	je     f0118e84 <test_kmalloc_nextfit+0x14b5>
f0118e6d:	83 ec 04             	sub    $0x4,%esp
f0118e70:	68 94 a2 13 f0       	push   $0xf013a294
f0118e75:	68 69 01 00 00       	push   $0x169
f0118e7a:	68 7a a2 13 f0       	push   $0xf013a27a
f0118e7f:	e8 22 73 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118e84:	e8 0f 2f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118e89:	89 c2                	mov    %eax,%edx
f0118e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e8e:	29 c2                	sub    %eax,%edx
f0118e90:	89 d0                	mov    %edx,%eax
f0118e92:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118e97:	74 17                	je     f0118eb0 <test_kmalloc_nextfit+0x14e1>
f0118e99:	83 ec 04             	sub    $0x4,%esp
f0118e9c:	68 48 a5 13 f0       	push   $0xf013a548
f0118ea1:	68 6a 01 00 00       	push   $0x16a
f0118ea6:	68 7a a2 13 f0       	push   $0xf013a27a
f0118eab:	e8 f6 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118eb0:	e8 d7 ad fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118eb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118eb8:	e8 db 2e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118ebd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0118ec0:	83 ec 0c             	sub    $0xc,%esp
f0118ec3:	68 00 fc 3f 00       	push   $0x3ffc00
f0118ec8:	e8 0f e5 fe ff       	call   f01073dc <kmalloc>
f0118ecd:	83 c4 10             	add    $0x10,%esp
f0118ed0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0118ed6:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0118edd:	10 00 00 
f0118ee0:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0118ee6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118eeb:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f0118ef1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0118ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118efc:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f0118f02:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0118f08:	29 d0                	sub    %edx,%eax
f0118f0a:	89 c1                	mov    %eax,%ecx
f0118f0c:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f0118f13:	10 00 00 
f0118f16:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118f1b:	0f b6 d0             	movzbl %al,%edx
f0118f1e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0118f24:	01 d0                	add    %edx,%eax
f0118f26:	48                   	dec    %eax
f0118f27:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0118f2d:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0118f33:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f38:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0118f3e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0118f44:	29 d0                	sub    %edx,%eax
f0118f46:	01 c1                	add    %eax,%ecx
f0118f48:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0118f4f:	10 00 00 
f0118f52:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0118f57:	0f b6 c0             	movzbl %al,%eax
f0118f5a:	c1 e0 04             	shl    $0x4,%eax
f0118f5d:	89 c2                	mov    %eax,%edx
f0118f5f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0118f65:	01 d0                	add    %edx,%eax
f0118f67:	48                   	dec    %eax
f0118f68:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0118f6e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0118f74:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f79:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0118f7f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0118f85:	29 d0                	sub    %edx,%eax
f0118f87:	01 c8                	add    %ecx,%eax
f0118f89:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0118f8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118f95:	39 c2                	cmp    %eax,%edx
f0118f97:	74 17                	je     f0118fb0 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0118f99:	83 ec 04             	sub    $0x4,%esp
f0118f9c:	68 88 a5 13 f0       	push   $0xf013a588
f0118fa1:	68 70 01 00 00       	push   $0x170
f0118fa6:	68 7a a2 13 f0       	push   $0xf013a27a
f0118fab:	e8 f6 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118fb0:	e8 d7 ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0118fb5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118fb8:	74 17                	je     f0118fd1 <test_kmalloc_nextfit+0x1602>
f0118fba:	83 ec 04             	sub    $0x4,%esp
f0118fbd:	68 94 a2 13 f0       	push   $0xf013a294
f0118fc2:	68 71 01 00 00       	push   $0x171
f0118fc7:	68 7a a2 13 f0       	push   $0xf013a27a
f0118fcc:	e8 d5 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118fd1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118fd4:	e8 bf 2d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0118fd9:	29 c3                	sub    %eax,%ebx
f0118fdb:	89 d8                	mov    %ebx,%eax
f0118fdd:	3d 00 04 00 00       	cmp    $0x400,%eax
f0118fe2:	74 17                	je     f0118ffb <test_kmalloc_nextfit+0x162c>
f0118fe4:	83 ec 04             	sub    $0x4,%esp
f0118fe7:	68 37 a5 13 f0       	push   $0xf013a537
f0118fec:	68 72 01 00 00       	push   $0x172
f0118ff1:	68 7a a2 13 f0       	push   $0xf013a27a
f0118ff6:	e8 ab 71 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0118ffb:	83 ec 0c             	sub    $0xc,%esp
f0118ffe:	68 e4 a5 13 f0       	push   $0xf013a5e4
f0119003:	e8 25 7c fe ff       	call   f0100c2d <cprintf>
f0119008:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011900b:	e8 7c ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119010:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119013:	e8 80 2d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119018:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011901b:	83 ec 0c             	sub    $0xc,%esp
f011901e:	68 00 00 60 00       	push   $0x600000
f0119023:	e8 b4 e3 fe ff       	call   f01073dc <kmalloc>
f0119028:	83 c4 10             	add    $0x10,%esp
f011902b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119031:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119037:	85 c0                	test   %eax,%eax
f0119039:	74 17                	je     f0119052 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011903b:	83 ec 04             	sub    $0x4,%esp
f011903e:	68 88 a5 13 f0       	push   $0xf013a588
f0119043:	68 7c 01 00 00       	push   $0x17c
f0119048:	68 7a a2 13 f0       	push   $0xf013a27a
f011904d:	e8 54 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119052:	e8 35 ac fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119057:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011905a:	74 17                	je     f0119073 <test_kmalloc_nextfit+0x16a4>
f011905c:	83 ec 04             	sub    $0x4,%esp
f011905f:	68 94 a2 13 f0       	push   $0xf013a294
f0119064:	68 7d 01 00 00       	push   $0x17d
f0119069:	68 7a a2 13 f0       	push   $0xf013a27a
f011906e:	e8 33 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0119073:	e8 20 2d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119078:	89 c2                	mov    %eax,%edx
f011907a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011907d:	39 c2                	cmp    %eax,%edx
f011907f:	74 17                	je     f0119098 <test_kmalloc_nextfit+0x16c9>
f0119081:	83 ec 04             	sub    $0x4,%esp
f0119084:	68 37 a5 13 f0       	push   $0xf013a537
f0119089:	68 7e 01 00 00       	push   $0x17e
f011908e:	68 7a a2 13 f0       	push   $0xf013a27a
f0119093:	e8 0e 71 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119098:	83 ec 0c             	sub    $0xc,%esp
f011909b:	68 1c a6 13 f0       	push   $0xf013a61c
f01190a0:	e8 88 7b fe ff       	call   f0100c2d <cprintf>
f01190a5:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f01190a8:	83 ec 0c             	sub    $0xc,%esp
f01190ab:	68 58 a6 13 f0       	push   $0xf013a658
f01190b0:	e8 78 7b fe ff       	call   f0100c2d <cprintf>
f01190b5:	83 c4 10             	add    $0x10,%esp
	return 1;
f01190b8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01190bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01190c0:	5b                   	pop    %ebx
f01190c1:	5f                   	pop    %edi
f01190c2:	5d                   	pop    %ebp
f01190c3:	c3                   	ret    

f01190c4 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f01190c4:	55                   	push   %ebp
f01190c5:	89 e5                	mov    %esp,%ebp
f01190c7:	57                   	push   %edi
f01190c8:	53                   	push   %ebx
f01190c9:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f01190cf:	83 ec 0c             	sub    $0xc,%esp
f01190d2:	68 bc a1 13 f0       	push   $0xf013a1bc
f01190d7:	e8 51 7b fe ff       	call   f0100c2d <cprintf>
f01190dc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01190df:	83 ec 0c             	sub    $0xc,%esp
f01190e2:	68 ec a1 13 f0       	push   $0xf013a1ec
f01190e7:	e8 41 7b fe ff       	call   f0100c2d <cprintf>
f01190ec:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01190ef:	83 ec 0c             	sub    $0xc,%esp
f01190f2:	68 bc a1 13 f0       	push   $0xf013a1bc
f01190f7:	e8 31 7b fe ff       	call   f0100c2d <cprintf>
f01190fc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01190ff:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119105:	b9 14 00 00 00       	mov    $0x14,%ecx
f011910a:	b8 00 00 00 00       	mov    $0x0,%eax
f011910f:	89 d7                	mov    %edx,%edi
f0119111:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119113:	e8 80 2c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119118:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011911b:	e8 6c ab fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119120:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119123:	83 ec 0c             	sub    $0xc,%esp
f0119126:	68 00 fc 2f 00       	push   $0x2ffc00
f011912b:	e8 ac e2 fe ff       	call   f01073dc <kmalloc>
f0119130:	83 c4 10             	add    $0x10,%esp
f0119133:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119139:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011913f:	89 c1                	mov    %eax,%ecx
f0119141:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119148:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011914b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119150:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119153:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119156:	ba 00 00 00 00       	mov    $0x0,%edx
f011915b:	f7 75 ec             	divl   -0x14(%ebp)
f011915e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119161:	29 d0                	sub    %edx,%eax
f0119163:	89 c3                	mov    %eax,%ebx
f0119165:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011916c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119171:	0f b6 d0             	movzbl %al,%edx
f0119174:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119177:	01 d0                	add    %edx,%eax
f0119179:	48                   	dec    %eax
f011917a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011917d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119180:	ba 00 00 00 00       	mov    $0x0,%edx
f0119185:	f7 75 e4             	divl   -0x1c(%ebp)
f0119188:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011918b:	29 d0                	sub    %edx,%eax
f011918d:	01 c3                	add    %eax,%ebx
f011918f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119196:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011919b:	0f b6 c0             	movzbl %al,%eax
f011919e:	c1 e0 04             	shl    $0x4,%eax
f01191a1:	89 c2                	mov    %eax,%edx
f01191a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191a6:	01 d0                	add    %edx,%eax
f01191a8:	48                   	dec    %eax
f01191a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01191ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191af:	ba 00 00 00 00       	mov    $0x0,%edx
f01191b4:	f7 75 dc             	divl   -0x24(%ebp)
f01191b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01191ba:	29 d0                	sub    %edx,%eax
f01191bc:	01 d8                	add    %ebx,%eax
f01191be:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01191c3:	39 c1                	cmp    %eax,%ecx
f01191c5:	74 17                	je     f01191de <test_kmalloc_bestfit1+0x11a>
f01191c7:	83 ec 04             	sub    $0x4,%esp
f01191ca:	68 94 a6 13 f0       	push   $0xf013a694
f01191cf:	68 98 01 00 00       	push   $0x198
f01191d4:	68 7a a2 13 f0       	push   $0xf013a27a
f01191d9:	e8 c8 6f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191de:	e8 a9 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01191e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01191e6:	74 17                	je     f01191ff <test_kmalloc_bestfit1+0x13b>
f01191e8:	83 ec 04             	sub    $0x4,%esp
f01191eb:	68 94 a2 13 f0       	push   $0xf013a294
f01191f0:	68 99 01 00 00       	push   $0x199
f01191f5:	68 7a a2 13 f0       	push   $0xf013a27a
f01191fa:	e8 a7 6f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01191ff:	e8 94 2b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119204:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119207:	29 c2                	sub    %eax,%edx
f0119209:	89 d0                	mov    %edx,%eax
f011920b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119210:	74 17                	je     f0119229 <test_kmalloc_bestfit1+0x165>
f0119212:	83 ec 04             	sub    $0x4,%esp
f0119215:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011921a:	68 9a 01 00 00       	push   $0x19a
f011921f:	68 7a a2 13 f0       	push   $0xf013a27a
f0119224:	e8 7d 6f fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119229:	e8 6a 2b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011922e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119231:	e8 56 aa fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119236:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119239:	83 ec 0c             	sub    $0xc,%esp
f011923c:	68 00 fc 2f 00       	push   $0x2ffc00
f0119241:	e8 96 e1 fe ff       	call   f01073dc <kmalloc>
f0119246:	83 c4 10             	add    $0x10,%esp
f0119249:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011924f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119255:	89 c1                	mov    %eax,%ecx
f0119257:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011925e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119261:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119266:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119269:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011926c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119271:	f7 75 d4             	divl   -0x2c(%ebp)
f0119274:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119277:	29 d0                	sub    %edx,%eax
f0119279:	89 c3                	mov    %eax,%ebx
f011927b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119282:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119287:	0f b6 d0             	movzbl %al,%edx
f011928a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011928d:	01 d0                	add    %edx,%eax
f011928f:	48                   	dec    %eax
f0119290:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119293:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119296:	ba 00 00 00 00       	mov    $0x0,%edx
f011929b:	f7 75 cc             	divl   -0x34(%ebp)
f011929e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01192a1:	29 d0                	sub    %edx,%eax
f01192a3:	01 c3                	add    %eax,%ebx
f01192a5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01192ac:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01192b1:	0f b6 c0             	movzbl %al,%eax
f01192b4:	c1 e0 04             	shl    $0x4,%eax
f01192b7:	89 c2                	mov    %eax,%edx
f01192b9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192bc:	01 d0                	add    %edx,%eax
f01192be:	48                   	dec    %eax
f01192bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01192c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01192ca:	f7 75 c4             	divl   -0x3c(%ebp)
f01192cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192d0:	29 d0                	sub    %edx,%eax
f01192d2:	01 d8                	add    %ebx,%eax
f01192d4:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01192d9:	39 c1                	cmp    %eax,%ecx
f01192db:	74 17                	je     f01192f4 <test_kmalloc_bestfit1+0x230>
f01192dd:	83 ec 04             	sub    $0x4,%esp
f01192e0:	68 94 a6 13 f0       	push   $0xf013a694
f01192e5:	68 a0 01 00 00       	push   $0x1a0
f01192ea:	68 7a a2 13 f0       	push   $0xf013a27a
f01192ef:	e8 b2 6e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192f4:	e8 93 a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01192f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01192fc:	74 17                	je     f0119315 <test_kmalloc_bestfit1+0x251>
f01192fe:	83 ec 04             	sub    $0x4,%esp
f0119301:	68 94 a2 13 f0       	push   $0xf013a294
f0119306:	68 a1 01 00 00       	push   $0x1a1
f011930b:	68 7a a2 13 f0       	push   $0xf013a27a
f0119310:	e8 91 6e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119315:	e8 7e 2a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011931a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011931d:	29 c2                	sub    %eax,%edx
f011931f:	89 d0                	mov    %edx,%eax
f0119321:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119326:	74 17                	je     f011933f <test_kmalloc_bestfit1+0x27b>
f0119328:	83 ec 04             	sub    $0x4,%esp
f011932b:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119330:	68 a2 01 00 00       	push   $0x1a2
f0119335:	68 7a a2 13 f0       	push   $0xf013a27a
f011933a:	e8 67 6e fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011933f:	e8 54 2a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119344:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119347:	e8 40 a9 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011934c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011934f:	83 ec 0c             	sub    $0xc,%esp
f0119352:	68 00 fc 1f 00       	push   $0x1ffc00
f0119357:	e8 80 e0 fe ff       	call   f01073dc <kmalloc>
f011935c:	83 c4 10             	add    $0x10,%esp
f011935f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119365:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011936b:	89 c1                	mov    %eax,%ecx
f011936d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119374:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119377:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011937c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011937f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119382:	ba 00 00 00 00       	mov    $0x0,%edx
f0119387:	f7 75 bc             	divl   -0x44(%ebp)
f011938a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011938d:	29 d0                	sub    %edx,%eax
f011938f:	89 c3                	mov    %eax,%ebx
f0119391:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119398:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011939d:	0f b6 d0             	movzbl %al,%edx
f01193a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01193a3:	01 d0                	add    %edx,%eax
f01193a5:	48                   	dec    %eax
f01193a6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01193a9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01193ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01193b1:	f7 75 b4             	divl   -0x4c(%ebp)
f01193b4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01193b7:	29 d0                	sub    %edx,%eax
f01193b9:	01 c3                	add    %eax,%ebx
f01193bb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01193c2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01193c7:	0f b6 c0             	movzbl %al,%eax
f01193ca:	c1 e0 04             	shl    $0x4,%eax
f01193cd:	89 c2                	mov    %eax,%edx
f01193cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01193d2:	01 d0                	add    %edx,%eax
f01193d4:	48                   	dec    %eax
f01193d5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01193d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193db:	ba 00 00 00 00       	mov    $0x0,%edx
f01193e0:	f7 75 ac             	divl   -0x54(%ebp)
f01193e3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193e6:	29 d0                	sub    %edx,%eax
f01193e8:	01 d8                	add    %ebx,%eax
f01193ea:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f01193ef:	39 c1                	cmp    %eax,%ecx
f01193f1:	74 17                	je     f011940a <test_kmalloc_bestfit1+0x346>
f01193f3:	83 ec 04             	sub    $0x4,%esp
f01193f6:	68 94 a6 13 f0       	push   $0xf013a694
f01193fb:	68 a8 01 00 00       	push   $0x1a8
f0119400:	68 7a a2 13 f0       	push   $0xf013a27a
f0119405:	e8 9c 6d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011940a:	e8 7d a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011940f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119412:	74 17                	je     f011942b <test_kmalloc_bestfit1+0x367>
f0119414:	83 ec 04             	sub    $0x4,%esp
f0119417:	68 94 a2 13 f0       	push   $0xf013a294
f011941c:	68 a9 01 00 00       	push   $0x1a9
f0119421:	68 7a a2 13 f0       	push   $0xf013a27a
f0119426:	e8 7b 6d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011942b:	e8 68 29 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119430:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119433:	29 c2                	sub    %eax,%edx
f0119435:	89 d0                	mov    %edx,%eax
f0119437:	3d 00 02 00 00       	cmp    $0x200,%eax
f011943c:	74 17                	je     f0119455 <test_kmalloc_bestfit1+0x391>
f011943e:	83 ec 04             	sub    $0x4,%esp
f0119441:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119446:	68 aa 01 00 00       	push   $0x1aa
f011944b:	68 7a a2 13 f0       	push   $0xf013a27a
f0119450:	e8 51 6d fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119455:	e8 3e 29 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011945a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011945d:	e8 2a a8 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119462:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119465:	83 ec 0c             	sub    $0xc,%esp
f0119468:	68 00 fc 1f 00       	push   $0x1ffc00
f011946d:	e8 6a df fe ff       	call   f01073dc <kmalloc>
f0119472:	83 c4 10             	add    $0x10,%esp
f0119475:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011947b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119481:	89 c1                	mov    %eax,%ecx
f0119483:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011948a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011948d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119492:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119495:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119498:	ba 00 00 00 00       	mov    $0x0,%edx
f011949d:	f7 75 a4             	divl   -0x5c(%ebp)
f01194a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01194a3:	29 d0                	sub    %edx,%eax
f01194a5:	89 c3                	mov    %eax,%ebx
f01194a7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01194ae:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01194b3:	0f b6 d0             	movzbl %al,%edx
f01194b6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01194b9:	01 d0                	add    %edx,%eax
f01194bb:	48                   	dec    %eax
f01194bc:	89 45 98             	mov    %eax,-0x68(%ebp)
f01194bf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01194c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01194c7:	f7 75 9c             	divl   -0x64(%ebp)
f01194ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01194cd:	29 d0                	sub    %edx,%eax
f01194cf:	01 c3                	add    %eax,%ebx
f01194d1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01194d8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01194dd:	0f b6 c0             	movzbl %al,%eax
f01194e0:	c1 e0 04             	shl    $0x4,%eax
f01194e3:	89 c2                	mov    %eax,%edx
f01194e5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01194e8:	01 d0                	add    %edx,%eax
f01194ea:	48                   	dec    %eax
f01194eb:	89 45 90             	mov    %eax,-0x70(%ebp)
f01194ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f01194f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f6:	f7 75 94             	divl   -0x6c(%ebp)
f01194f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01194fc:	29 d0                	sub    %edx,%eax
f01194fe:	01 d8                	add    %ebx,%eax
f0119500:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119505:	39 c1                	cmp    %eax,%ecx
f0119507:	74 17                	je     f0119520 <test_kmalloc_bestfit1+0x45c>
f0119509:	83 ec 04             	sub    $0x4,%esp
f011950c:	68 94 a6 13 f0       	push   $0xf013a694
f0119511:	68 b0 01 00 00       	push   $0x1b0
f0119516:	68 7a a2 13 f0       	push   $0xf013a27a
f011951b:	e8 86 6c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119520:	e8 67 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119525:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119528:	74 17                	je     f0119541 <test_kmalloc_bestfit1+0x47d>
f011952a:	83 ec 04             	sub    $0x4,%esp
f011952d:	68 94 a2 13 f0       	push   $0xf013a294
f0119532:	68 b1 01 00 00       	push   $0x1b1
f0119537:	68 7a a2 13 f0       	push   $0xf013a27a
f011953c:	e8 65 6c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119541:	e8 52 28 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119546:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119549:	29 c2                	sub    %eax,%edx
f011954b:	89 d0                	mov    %edx,%eax
f011954d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119552:	74 17                	je     f011956b <test_kmalloc_bestfit1+0x4a7>
f0119554:	83 ec 04             	sub    $0x4,%esp
f0119557:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011955c:	68 b2 01 00 00       	push   $0x1b2
f0119561:	68 7a a2 13 f0       	push   $0xf013a27a
f0119566:	e8 3b 6c fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011956b:	e8 28 28 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119570:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119573:	e8 14 a7 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119578:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011957b:	83 ec 0c             	sub    $0xc,%esp
f011957e:	68 00 fc 0f 00       	push   $0xffc00
f0119583:	e8 54 de fe ff       	call   f01073dc <kmalloc>
f0119588:	83 c4 10             	add    $0x10,%esp
f011958b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119591:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119597:	89 c1                	mov    %eax,%ecx
f0119599:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01195a0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01195a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195a8:	89 45 88             	mov    %eax,-0x78(%ebp)
f01195ab:	8b 45 88             	mov    -0x78(%ebp),%eax
f01195ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01195b3:	f7 75 8c             	divl   -0x74(%ebp)
f01195b6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01195b9:	29 d0                	sub    %edx,%eax
f01195bb:	89 c3                	mov    %eax,%ebx
f01195bd:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01195c4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01195c9:	0f b6 d0             	movzbl %al,%edx
f01195cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01195cf:	01 d0                	add    %edx,%eax
f01195d1:	48                   	dec    %eax
f01195d2:	89 45 80             	mov    %eax,-0x80(%ebp)
f01195d5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01195d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01195dd:	f7 75 84             	divl   -0x7c(%ebp)
f01195e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01195e3:	29 d0                	sub    %edx,%eax
f01195e5:	01 c3                	add    %eax,%ebx
f01195e7:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01195ee:	10 00 00 
f01195f1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01195f6:	0f b6 c0             	movzbl %al,%eax
f01195f9:	c1 e0 04             	shl    $0x4,%eax
f01195fc:	89 c2                	mov    %eax,%edx
f01195fe:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119604:	01 d0                	add    %edx,%eax
f0119606:	48                   	dec    %eax
f0119607:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011960d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119613:	ba 00 00 00 00       	mov    $0x0,%edx
f0119618:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011961e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119624:	29 d0                	sub    %edx,%eax
f0119626:	01 d8                	add    %ebx,%eax
f0119628:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011962d:	39 c1                	cmp    %eax,%ecx
f011962f:	74 17                	je     f0119648 <test_kmalloc_bestfit1+0x584>
f0119631:	83 ec 04             	sub    $0x4,%esp
f0119634:	68 94 a6 13 f0       	push   $0xf013a694
f0119639:	68 b8 01 00 00       	push   $0x1b8
f011963e:	68 7a a2 13 f0       	push   $0xf013a27a
f0119643:	e8 5e 6b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119648:	e8 3f a6 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011964d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119650:	74 17                	je     f0119669 <test_kmalloc_bestfit1+0x5a5>
f0119652:	83 ec 04             	sub    $0x4,%esp
f0119655:	68 94 a2 13 f0       	push   $0xf013a294
f011965a:	68 b9 01 00 00       	push   $0x1b9
f011965f:	68 7a a2 13 f0       	push   $0xf013a27a
f0119664:	e8 3d 6b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119669:	e8 2a 27 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011966e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119671:	29 c2                	sub    %eax,%edx
f0119673:	89 d0                	mov    %edx,%eax
f0119675:	3d 00 01 00 00       	cmp    $0x100,%eax
f011967a:	74 17                	je     f0119693 <test_kmalloc_bestfit1+0x5cf>
f011967c:	83 ec 04             	sub    $0x4,%esp
f011967f:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119684:	68 ba 01 00 00       	push   $0x1ba
f0119689:	68 7a a2 13 f0       	push   $0xf013a27a
f011968e:	e8 13 6b fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119693:	e8 00 27 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119698:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011969b:	e8 ec a5 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01196a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f01196a3:	83 ec 0c             	sub    $0xc,%esp
f01196a6:	68 00 fc 0f 00       	push   $0xffc00
f01196ab:	e8 2c dd fe ff       	call   f01073dc <kmalloc>
f01196b0:	83 c4 10             	add    $0x10,%esp
f01196b3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01196b9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01196bf:	89 c1                	mov    %eax,%ecx
f01196c1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01196c8:	10 00 00 
f01196cb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01196d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196d6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01196dc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01196e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01196ed:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01196f3:	29 d0                	sub    %edx,%eax
f01196f5:	89 c3                	mov    %eax,%ebx
f01196f7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01196fe:	10 00 00 
f0119701:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119706:	0f b6 d0             	movzbl %al,%edx
f0119709:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011970f:	01 d0                	add    %edx,%eax
f0119711:	48                   	dec    %eax
f0119712:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119718:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011971e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119723:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119729:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011972f:	29 d0                	sub    %edx,%eax
f0119731:	01 c3                	add    %eax,%ebx
f0119733:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011973a:	10 00 00 
f011973d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119742:	0f b6 c0             	movzbl %al,%eax
f0119745:	c1 e0 04             	shl    $0x4,%eax
f0119748:	89 c2                	mov    %eax,%edx
f011974a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119750:	01 d0                	add    %edx,%eax
f0119752:	48                   	dec    %eax
f0119753:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119759:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011975f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119764:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011976a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119770:	29 d0                	sub    %edx,%eax
f0119772:	01 d8                	add    %ebx,%eax
f0119774:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119779:	39 c1                	cmp    %eax,%ecx
f011977b:	74 17                	je     f0119794 <test_kmalloc_bestfit1+0x6d0>
f011977d:	83 ec 04             	sub    $0x4,%esp
f0119780:	68 94 a6 13 f0       	push   $0xf013a694
f0119785:	68 c0 01 00 00       	push   $0x1c0
f011978a:	68 7a a2 13 f0       	push   $0xf013a27a
f011978f:	e8 12 6a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119794:	e8 f3 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119799:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011979c:	74 17                	je     f01197b5 <test_kmalloc_bestfit1+0x6f1>
f011979e:	83 ec 04             	sub    $0x4,%esp
f01197a1:	68 94 a2 13 f0       	push   $0xf013a294
f01197a6:	68 c1 01 00 00       	push   $0x1c1
f01197ab:	68 7a a2 13 f0       	push   $0xf013a27a
f01197b0:	e8 f1 69 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f01197b5:	e8 de 25 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01197ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01197bd:	29 c2                	sub    %eax,%edx
f01197bf:	89 d0                	mov    %edx,%eax
f01197c1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01197c6:	74 17                	je     f01197df <test_kmalloc_bestfit1+0x71b>
f01197c8:	83 ec 04             	sub    $0x4,%esp
f01197cb:	68 c4 a6 13 f0       	push   $0xf013a6c4
f01197d0:	68 c2 01 00 00       	push   $0x1c2
f01197d5:	68 7a a2 13 f0       	push   $0xf013a27a
f01197da:	e8 c7 69 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01197df:	e8 b4 25 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f01197e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01197e7:	e8 a0 a4 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01197ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f01197ef:	83 ec 0c             	sub    $0xc,%esp
f01197f2:	68 00 fc 0f 00       	push   $0xffc00
f01197f7:	e8 e0 db fe ff       	call   f01073dc <kmalloc>
f01197fc:	83 c4 10             	add    $0x10,%esp
f01197ff:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119805:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011980b:	89 c1                	mov    %eax,%ecx
f011980d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119814:	10 00 00 
f0119817:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011981d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119822:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0119828:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011982e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119833:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0119839:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011983f:	29 d0                	sub    %edx,%eax
f0119841:	89 c3                	mov    %eax,%ebx
f0119843:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011984a:	10 00 00 
f011984d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119852:	0f b6 d0             	movzbl %al,%edx
f0119855:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011985b:	01 d0                	add    %edx,%eax
f011985d:	48                   	dec    %eax
f011985e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119864:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011986a:	ba 00 00 00 00       	mov    $0x0,%edx
f011986f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0119875:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011987b:	29 d0                	sub    %edx,%eax
f011987d:	01 c3                	add    %eax,%ebx
f011987f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0119886:	10 00 00 
f0119889:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011988e:	0f b6 c0             	movzbl %al,%eax
f0119891:	c1 e0 04             	shl    $0x4,%eax
f0119894:	89 c2                	mov    %eax,%edx
f0119896:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011989c:	01 d0                	add    %edx,%eax
f011989e:	48                   	dec    %eax
f011989f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01198a5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01198b0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01198b6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01198bc:	29 d0                	sub    %edx,%eax
f01198be:	01 d8                	add    %ebx,%eax
f01198c0:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f01198c5:	39 c1                	cmp    %eax,%ecx
f01198c7:	74 17                	je     f01198e0 <test_kmalloc_bestfit1+0x81c>
f01198c9:	83 ec 04             	sub    $0x4,%esp
f01198cc:	68 94 a6 13 f0       	push   $0xf013a694
f01198d1:	68 c8 01 00 00       	push   $0x1c8
f01198d6:	68 7a a2 13 f0       	push   $0xf013a27a
f01198db:	e8 c6 68 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198e0:	e8 a7 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01198e5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01198e8:	74 17                	je     f0119901 <test_kmalloc_bestfit1+0x83d>
f01198ea:	83 ec 04             	sub    $0x4,%esp
f01198ed:	68 94 a2 13 f0       	push   $0xf013a294
f01198f2:	68 c9 01 00 00       	push   $0x1c9
f01198f7:	68 7a a2 13 f0       	push   $0xf013a27a
f01198fc:	e8 a5 68 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119901:	e8 92 24 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119906:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119909:	29 c2                	sub    %eax,%edx
f011990b:	89 d0                	mov    %edx,%eax
f011990d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119912:	74 17                	je     f011992b <test_kmalloc_bestfit1+0x867>
f0119914:	83 ec 04             	sub    $0x4,%esp
f0119917:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011991c:	68 ca 01 00 00       	push   $0x1ca
f0119921:	68 7a a2 13 f0       	push   $0xf013a27a
f0119926:	e8 7b 68 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011992b:	e8 68 24 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119930:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119933:	e8 54 a3 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119938:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011993b:	83 ec 0c             	sub    $0xc,%esp
f011993e:	68 00 fc 0f 00       	push   $0xffc00
f0119943:	e8 94 da fe ff       	call   f01073dc <kmalloc>
f0119948:	83 c4 10             	add    $0x10,%esp
f011994b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0119951:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119957:	89 c1                	mov    %eax,%ecx
f0119959:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0119960:	10 00 00 
f0119963:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119969:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011996e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0119974:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011997a:	ba 00 00 00 00       	mov    $0x0,%edx
f011997f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0119985:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011998b:	29 d0                	sub    %edx,%eax
f011998d:	89 c3                	mov    %eax,%ebx
f011998f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0119996:	10 00 00 
f0119999:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011999e:	0f b6 d0             	movzbl %al,%edx
f01199a1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01199a7:	01 d0                	add    %edx,%eax
f01199a9:	48                   	dec    %eax
f01199aa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01199b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01199b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01199bb:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01199c1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01199c7:	29 d0                	sub    %edx,%eax
f01199c9:	01 c3                	add    %eax,%ebx
f01199cb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01199d2:	10 00 00 
f01199d5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01199da:	0f b6 c0             	movzbl %al,%eax
f01199dd:	c1 e0 04             	shl    $0x4,%eax
f01199e0:	89 c2                	mov    %eax,%edx
f01199e2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01199e8:	01 d0                	add    %edx,%eax
f01199ea:	48                   	dec    %eax
f01199eb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01199f1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01199f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01199fc:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119a02:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119a08:	29 d0                	sub    %edx,%eax
f0119a0a:	01 d8                	add    %ebx,%eax
f0119a0c:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0119a11:	39 c1                	cmp    %eax,%ecx
f0119a13:	74 17                	je     f0119a2c <test_kmalloc_bestfit1+0x968>
f0119a15:	83 ec 04             	sub    $0x4,%esp
f0119a18:	68 94 a6 13 f0       	push   $0xf013a694
f0119a1d:	68 d0 01 00 00       	push   $0x1d0
f0119a22:	68 7a a2 13 f0       	push   $0xf013a27a
f0119a27:	e8 7a 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a2c:	e8 5b a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a31:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119a34:	74 17                	je     f0119a4d <test_kmalloc_bestfit1+0x989>
f0119a36:	83 ec 04             	sub    $0x4,%esp
f0119a39:	68 94 a2 13 f0       	push   $0xf013a294
f0119a3e:	68 d1 01 00 00       	push   $0x1d1
f0119a43:	68 7a a2 13 f0       	push   $0xf013a27a
f0119a48:	e8 59 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119a4d:	e8 46 23 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119a52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a55:	29 c2                	sub    %eax,%edx
f0119a57:	89 d0                	mov    %edx,%eax
f0119a59:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119a5e:	74 17                	je     f0119a77 <test_kmalloc_bestfit1+0x9b3>
f0119a60:	83 ec 04             	sub    $0x4,%esp
f0119a63:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119a68:	68 d2 01 00 00       	push   $0x1d2
f0119a6d:	68 7a a2 13 f0       	push   $0xf013a27a
f0119a72:	e8 2f 67 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119a77:	e8 1c 23 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119a7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a7f:	e8 08 a2 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a84:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0119a87:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119a8d:	83 ec 0c             	sub    $0xc,%esp
f0119a90:	50                   	push   %eax
f0119a91:	e8 60 d9 fe ff       	call   f01073f6 <kfree>
f0119a96:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a99:	e8 ee a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119a9e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119aa1:	74 17                	je     f0119aba <test_kmalloc_bestfit1+0x9f6>
f0119aa3:	83 ec 04             	sub    $0x4,%esp
f0119aa6:	68 94 a2 13 f0       	push   $0xf013a294
f0119aab:	68 db 01 00 00       	push   $0x1db
f0119ab0:	68 7a a2 13 f0       	push   $0xf013a27a
f0119ab5:	e8 ec 66 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119aba:	e8 d9 22 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119abf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119ac2:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119ac7:	74 17                	je     f0119ae0 <test_kmalloc_bestfit1+0xa1c>
f0119ac9:	83 ec 04             	sub    $0x4,%esp
f0119acc:	68 d7 a6 13 f0       	push   $0xf013a6d7
f0119ad1:	68 dc 01 00 00       	push   $0x1dc
f0119ad6:	68 7a a2 13 f0       	push   $0xf013a27a
f0119adb:	e8 c6 66 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119ae0:	e8 b3 22 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119ae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ae8:	e8 9f a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0119af0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119af6:	83 ec 0c             	sub    $0xc,%esp
f0119af9:	50                   	push   %eax
f0119afa:	e8 f7 d8 fe ff       	call   f01073f6 <kfree>
f0119aff:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b02:	e8 85 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b0a:	74 17                	je     f0119b23 <test_kmalloc_bestfit1+0xa5f>
f0119b0c:	83 ec 04             	sub    $0x4,%esp
f0119b0f:	68 94 a2 13 f0       	push   $0xf013a294
f0119b14:	68 e2 01 00 00       	push   $0x1e2
f0119b19:	68 7a a2 13 f0       	push   $0xf013a27a
f0119b1e:	e8 83 66 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119b23:	e8 70 22 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119b28:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119b30:	74 17                	je     f0119b49 <test_kmalloc_bestfit1+0xa85>
f0119b32:	83 ec 04             	sub    $0x4,%esp
f0119b35:	68 d7 a6 13 f0       	push   $0xf013a6d7
f0119b3a:	68 e3 01 00 00       	push   $0x1e3
f0119b3f:	68 7a a2 13 f0       	push   $0xf013a27a
f0119b44:	e8 5d 66 fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119b49:	e8 4a 22 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119b4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b51:	e8 36 a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b56:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0119b59:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119b5f:	83 ec 0c             	sub    $0xc,%esp
f0119b62:	50                   	push   %eax
f0119b63:	e8 8e d8 fe ff       	call   f01073f6 <kfree>
f0119b68:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b6b:	e8 1c a1 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119b70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b73:	74 17                	je     f0119b8c <test_kmalloc_bestfit1+0xac8>
f0119b75:	83 ec 04             	sub    $0x4,%esp
f0119b78:	68 94 a2 13 f0       	push   $0xf013a294
f0119b7d:	68 e9 01 00 00       	push   $0x1e9
f0119b82:	68 7a a2 13 f0       	push   $0xf013a27a
f0119b87:	e8 1a 66 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0119b8c:	e8 07 22 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119b91:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119b94:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119b99:	74 17                	je     f0119bb2 <test_kmalloc_bestfit1+0xaee>
f0119b9b:	83 ec 04             	sub    $0x4,%esp
f0119b9e:	68 d7 a6 13 f0       	push   $0xf013a6d7
f0119ba3:	68 ea 01 00 00       	push   $0x1ea
f0119ba8:	68 7a a2 13 f0       	push   $0xf013a27a
f0119bad:	e8 f4 65 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119bb2:	e8 e1 21 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119bb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119bba:	e8 cd a0 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f0119bc2:	83 ec 0c             	sub    $0xc,%esp
f0119bc5:	68 00 00 08 00       	push   $0x80000
f0119bca:	e8 0d d8 fe ff       	call   f01073dc <kmalloc>
f0119bcf:	83 c4 10             	add    $0x10,%esp
f0119bd2:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119bd8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119bde:	89 c1                	mov    %eax,%ecx
f0119be0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119be7:	10 00 00 
f0119bea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119bf0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bf5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119bfb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c06:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119c0c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c12:	29 d0                	sub    %edx,%eax
f0119c14:	89 c3                	mov    %eax,%ebx
f0119c16:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119c1d:	10 00 00 
f0119c20:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119c25:	0f b6 d0             	movzbl %al,%edx
f0119c28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119c2e:	01 d0                	add    %edx,%eax
f0119c30:	48                   	dec    %eax
f0119c31:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119c37:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119c3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c42:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119c48:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119c4e:	29 d0                	sub    %edx,%eax
f0119c50:	01 c3                	add    %eax,%ebx
f0119c52:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119c59:	10 00 00 
f0119c5c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119c61:	0f b6 c0             	movzbl %al,%eax
f0119c64:	c1 e0 04             	shl    $0x4,%eax
f0119c67:	89 c2                	mov    %eax,%edx
f0119c69:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119c6f:	01 d0                	add    %edx,%eax
f0119c71:	48                   	dec    %eax
f0119c72:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119c78:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c83:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119c89:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119c8f:	29 d0                	sub    %edx,%eax
f0119c91:	01 d8                	add    %ebx,%eax
f0119c93:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119c98:	39 c1                	cmp    %eax,%ecx
f0119c9a:	74 17                	je     f0119cb3 <test_kmalloc_bestfit1+0xbef>
f0119c9c:	83 ec 04             	sub    $0x4,%esp
f0119c9f:	68 94 a6 13 f0       	push   $0xf013a694
f0119ca4:	68 f3 01 00 00       	push   $0x1f3
f0119ca9:	68 7a a2 13 f0       	push   $0xf013a27a
f0119cae:	e8 f3 64 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cb3:	e8 d4 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119cb8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119cbb:	74 17                	je     f0119cd4 <test_kmalloc_bestfit1+0xc10>
f0119cbd:	83 ec 04             	sub    $0x4,%esp
f0119cc0:	68 94 a2 13 f0       	push   $0xf013a294
f0119cc5:	68 f4 01 00 00       	push   $0x1f4
f0119cca:	68 7a a2 13 f0       	push   $0xf013a27a
f0119ccf:	e8 d2 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0119cd4:	e8 bf 20 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119cd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119cdc:	29 c2                	sub    %eax,%edx
f0119cde:	89 d0                	mov    %edx,%eax
f0119ce0:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119ce5:	74 17                	je     f0119cfe <test_kmalloc_bestfit1+0xc3a>
f0119ce7:	83 ec 04             	sub    $0x4,%esp
f0119cea:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119cef:	68 f5 01 00 00       	push   $0x1f5
f0119cf4:	68 7a a2 13 f0       	push   $0xf013a27a
f0119cf9:	e8 a8 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0119cfe:	e8 95 20 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119d03:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d06:	e8 81 9f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119d0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0119d0e:	83 ec 0c             	sub    $0xc,%esp
f0119d11:	68 00 fc 0f 00       	push   $0xffc00
f0119d16:	e8 c1 d6 fe ff       	call   f01073dc <kmalloc>
f0119d1b:	83 c4 10             	add    $0x10,%esp
f0119d1e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119d24:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119d2a:	89 c1                	mov    %eax,%ecx
f0119d2c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119d33:	10 00 00 
f0119d36:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119d3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d41:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119d47:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119d4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d52:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119d58:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119d5e:	29 d0                	sub    %edx,%eax
f0119d60:	89 c3                	mov    %eax,%ebx
f0119d62:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119d69:	10 00 00 
f0119d6c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119d71:	0f b6 d0             	movzbl %al,%edx
f0119d74:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119d7a:	01 d0                	add    %edx,%eax
f0119d7c:	48                   	dec    %eax
f0119d7d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119d83:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119d89:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d8e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119d94:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119d9a:	29 d0                	sub    %edx,%eax
f0119d9c:	01 c3                	add    %eax,%ebx
f0119d9e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119da5:	10 00 00 
f0119da8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119dad:	0f b6 c0             	movzbl %al,%eax
f0119db0:	c1 e0 04             	shl    $0x4,%eax
f0119db3:	89 c2                	mov    %eax,%edx
f0119db5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119dbb:	01 d0                	add    %edx,%eax
f0119dbd:	48                   	dec    %eax
f0119dbe:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119dc4:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119dca:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dcf:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119dd5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119ddb:	29 d0                	sub    %edx,%eax
f0119ddd:	01 d8                	add    %ebx,%eax
f0119ddf:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119de4:	39 c1                	cmp    %eax,%ecx
f0119de6:	74 17                	je     f0119dff <test_kmalloc_bestfit1+0xd3b>
f0119de8:	83 ec 04             	sub    $0x4,%esp
f0119deb:	68 94 a6 13 f0       	push   $0xf013a694
f0119df0:	68 fb 01 00 00       	push   $0x1fb
f0119df5:	68 7a a2 13 f0       	push   $0xf013a27a
f0119dfa:	e8 a7 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119dff:	e8 88 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e04:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e07:	74 17                	je     f0119e20 <test_kmalloc_bestfit1+0xd5c>
f0119e09:	83 ec 04             	sub    $0x4,%esp
f0119e0c:	68 94 a2 13 f0       	push   $0xf013a294
f0119e11:	68 fc 01 00 00       	push   $0x1fc
f0119e16:	68 7a a2 13 f0       	push   $0xf013a27a
f0119e1b:	e8 86 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e20:	e8 73 1f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119e25:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e28:	29 c2                	sub    %eax,%edx
f0119e2a:	89 d0                	mov    %edx,%eax
f0119e2c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e31:	74 17                	je     f0119e4a <test_kmalloc_bestfit1+0xd86>
f0119e33:	83 ec 04             	sub    $0x4,%esp
f0119e36:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119e3b:	68 fd 01 00 00       	push   $0x1fd
f0119e40:	68 7a a2 13 f0       	push   $0xf013a27a
f0119e45:	e8 5c 63 fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119e4a:	e8 49 1f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e52:	e8 35 9e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119e57:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0119e5a:	83 ec 0c             	sub    $0xc,%esp
f0119e5d:	68 00 fc 03 00       	push   $0x3fc00
f0119e62:	e8 75 d5 fe ff       	call   f01073dc <kmalloc>
f0119e67:	83 c4 10             	add    $0x10,%esp
f0119e6a:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0119e70:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119e76:	89 c1                	mov    %eax,%ecx
f0119e78:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119e7f:	10 00 00 
f0119e82:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119e88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e8d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119e93:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119e99:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e9e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119ea4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119eaa:	29 d0                	sub    %edx,%eax
f0119eac:	89 c3                	mov    %eax,%ebx
f0119eae:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0119eb5:	10 00 00 
f0119eb8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119ebd:	0f b6 d0             	movzbl %al,%edx
f0119ec0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119ec6:	01 d0                	add    %edx,%eax
f0119ec8:	48                   	dec    %eax
f0119ec9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0119ecf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119ed5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eda:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0119ee0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119ee6:	29 d0                	sub    %edx,%eax
f0119ee8:	01 c3                	add    %eax,%ebx
f0119eea:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0119ef1:	10 00 00 
f0119ef4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0119ef9:	0f b6 c0             	movzbl %al,%eax
f0119efc:	c1 e0 04             	shl    $0x4,%eax
f0119eff:	89 c2                	mov    %eax,%edx
f0119f01:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119f07:	01 d0                	add    %edx,%eax
f0119f09:	48                   	dec    %eax
f0119f0a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0119f10:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119f16:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f1b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0119f21:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119f27:	29 d0                	sub    %edx,%eax
f0119f29:	01 d8                	add    %ebx,%eax
f0119f2b:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f0119f30:	39 c1                	cmp    %eax,%ecx
f0119f32:	74 17                	je     f0119f4b <test_kmalloc_bestfit1+0xe87>
f0119f34:	83 ec 04             	sub    $0x4,%esp
f0119f37:	68 94 a6 13 f0       	push   $0xf013a694
f0119f3c:	68 03 02 00 00       	push   $0x203
f0119f41:	68 7a a2 13 f0       	push   $0xf013a27a
f0119f46:	e8 5b 62 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f4b:	e8 3c 9d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119f50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f53:	74 17                	je     f0119f6c <test_kmalloc_bestfit1+0xea8>
f0119f55:	83 ec 04             	sub    $0x4,%esp
f0119f58:	68 94 a2 13 f0       	push   $0xf013a294
f0119f5d:	68 04 02 00 00       	push   $0x204
f0119f62:	68 7a a2 13 f0       	push   $0xf013a27a
f0119f67:	e8 3a 62 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0119f6c:	e8 27 1e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119f71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119f74:	29 c2                	sub    %eax,%edx
f0119f76:	89 d0                	mov    %edx,%eax
f0119f78:	83 f8 40             	cmp    $0x40,%eax
f0119f7b:	74 17                	je     f0119f94 <test_kmalloc_bestfit1+0xed0>
f0119f7d:	83 ec 04             	sub    $0x4,%esp
f0119f80:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0119f85:	68 05 02 00 00       	push   $0x205
f0119f8a:	68 7a a2 13 f0       	push   $0xf013a27a
f0119f8f:	e8 12 62 fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0119f94:	e8 ff 1d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f0119f99:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f9c:	e8 eb 9c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0119fa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f0119fa4:	83 ec 0c             	sub    $0xc,%esp
f0119fa7:	68 00 fc 3f 00       	push   $0x3ffc00
f0119fac:	e8 2b d4 fe ff       	call   f01073dc <kmalloc>
f0119fb1:	83 c4 10             	add    $0x10,%esp
f0119fb4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f0119fba:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119fc0:	89 c1                	mov    %eax,%ecx
f0119fc2:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0119fc9:	10 00 00 
f0119fcc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119fd2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fd7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0119fdd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fe3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fe8:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0119fee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ff4:	29 d0                	sub    %edx,%eax
f0119ff6:	89 c3                	mov    %eax,%ebx
f0119ff8:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119fff:	10 00 00 
f011a002:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a007:	0f b6 d0             	movzbl %al,%edx
f011a00a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a010:	01 d0                	add    %edx,%eax
f011a012:	48                   	dec    %eax
f011a013:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a019:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a01f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a024:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a02a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a030:	29 d0                	sub    %edx,%eax
f011a032:	01 c3                	add    %eax,%ebx
f011a034:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a03b:	10 00 00 
f011a03e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a043:	0f b6 c0             	movzbl %al,%eax
f011a046:	c1 e0 04             	shl    $0x4,%eax
f011a049:	89 c2                	mov    %eax,%edx
f011a04b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a051:	01 d0                	add    %edx,%eax
f011a053:	48                   	dec    %eax
f011a054:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a05a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a060:	ba 00 00 00 00       	mov    $0x0,%edx
f011a065:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a06b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a071:	29 d0                	sub    %edx,%eax
f011a073:	01 d8                	add    %ebx,%eax
f011a075:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a07a:	39 c1                	cmp    %eax,%ecx
f011a07c:	74 17                	je     f011a095 <test_kmalloc_bestfit1+0xfd1>
f011a07e:	83 ec 04             	sub    $0x4,%esp
f011a081:	68 94 a6 13 f0       	push   $0xf013a694
f011a086:	68 0b 02 00 00       	push   $0x20b
f011a08b:	68 7a a2 13 f0       	push   $0xf013a27a
f011a090:	e8 11 61 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a095:	e8 f2 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a09a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a09d:	74 17                	je     f011a0b6 <test_kmalloc_bestfit1+0xff2>
f011a09f:	83 ec 04             	sub    $0x4,%esp
f011a0a2:	68 94 a2 13 f0       	push   $0xf013a294
f011a0a7:	68 0c 02 00 00       	push   $0x20c
f011a0ac:	68 7a a2 13 f0       	push   $0xf013a27a
f011a0b1:	e8 f0 60 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a0b6:	e8 dd 1c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a0bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a0be:	29 c2                	sub    %eax,%edx
f011a0c0:	89 d0                	mov    %edx,%eax
f011a0c2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a0c7:	74 17                	je     f011a0e0 <test_kmalloc_bestfit1+0x101c>
f011a0c9:	83 ec 04             	sub    $0x4,%esp
f011a0cc:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a0d1:	68 0d 02 00 00       	push   $0x20d
f011a0d6:	68 7a a2 13 f0       	push   $0xf013a27a
f011a0db:	e8 c6 60 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a0e0:	e8 b3 1c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a0e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0e8:	e8 9f 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a0ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a0f0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0f6:	83 ec 0c             	sub    $0xc,%esp
f011a0f9:	50                   	push   %eax
f011a0fa:	e8 f7 d2 fe ff       	call   f01073f6 <kfree>
f011a0ff:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a102:	e8 85 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a107:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a10a:	74 17                	je     f011a123 <test_kmalloc_bestfit1+0x105f>
f011a10c:	83 ec 04             	sub    $0x4,%esp
f011a10f:	68 94 a2 13 f0       	push   $0xf013a294
f011a114:	68 16 02 00 00       	push   $0x216
f011a119:	68 7a a2 13 f0       	push   $0xf013a27a
f011a11e:	e8 83 60 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a123:	e8 70 1c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a128:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a12b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a130:	74 17                	je     f011a149 <test_kmalloc_bestfit1+0x1085>
f011a132:	83 ec 04             	sub    $0x4,%esp
f011a135:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011a13a:	68 17 02 00 00       	push   $0x217
f011a13f:	68 7a a2 13 f0       	push   $0xf013a27a
f011a144:	e8 5d 60 fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a149:	e8 4a 1c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a14e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a151:	e8 36 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a156:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a159:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a15f:	83 ec 0c             	sub    $0xc,%esp
f011a162:	50                   	push   %eax
f011a163:	e8 8e d2 fe ff       	call   f01073f6 <kfree>
f011a168:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a16b:	e8 1c 9b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a170:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a173:	74 17                	je     f011a18c <test_kmalloc_bestfit1+0x10c8>
f011a175:	83 ec 04             	sub    $0x4,%esp
f011a178:	68 94 a2 13 f0       	push   $0xf013a294
f011a17d:	68 1d 02 00 00       	push   $0x21d
f011a182:	68 7a a2 13 f0       	push   $0xf013a27a
f011a187:	e8 1a 60 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a18c:	e8 07 1c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a191:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a194:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a199:	74 17                	je     f011a1b2 <test_kmalloc_bestfit1+0x10ee>
f011a19b:	83 ec 04             	sub    $0x4,%esp
f011a19e:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011a1a3:	68 1e 02 00 00       	push   $0x21e
f011a1a8:	68 7a a2 13 f0       	push   $0xf013a27a
f011a1ad:	e8 f4 5f fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a1b2:	e8 e1 1b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a1b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1ba:	e8 cd 9a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a1bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a1c2:	83 ec 0c             	sub    $0xc,%esp
f011a1c5:	68 00 fc 1f 00       	push   $0x1ffc00
f011a1ca:	e8 0d d2 fe ff       	call   f01073dc <kmalloc>
f011a1cf:	83 c4 10             	add    $0x10,%esp
f011a1d2:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a1d8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a1de:	89 c1                	mov    %eax,%ecx
f011a1e0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a1e7:	10 00 00 
f011a1ea:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a1f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a1f5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a1fb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a201:	ba 00 00 00 00       	mov    $0x0,%edx
f011a206:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a20c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a212:	29 d0                	sub    %edx,%eax
f011a214:	89 c3                	mov    %eax,%ebx
f011a216:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a21d:	10 00 00 
f011a220:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a225:	0f b6 d0             	movzbl %al,%edx
f011a228:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a22e:	01 d0                	add    %edx,%eax
f011a230:	48                   	dec    %eax
f011a231:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a237:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a23d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a242:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a248:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a24e:	29 d0                	sub    %edx,%eax
f011a250:	01 c3                	add    %eax,%ebx
f011a252:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a259:	10 00 00 
f011a25c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a261:	0f b6 c0             	movzbl %al,%eax
f011a264:	c1 e0 04             	shl    $0x4,%eax
f011a267:	89 c2                	mov    %eax,%edx
f011a269:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a26f:	01 d0                	add    %edx,%eax
f011a271:	48                   	dec    %eax
f011a272:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a278:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a27e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a283:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a289:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a28f:	29 d0                	sub    %edx,%eax
f011a291:	01 d8                	add    %ebx,%eax
f011a293:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011a298:	39 c1                	cmp    %eax,%ecx
f011a29a:	74 17                	je     f011a2b3 <test_kmalloc_bestfit1+0x11ef>
f011a29c:	83 ec 04             	sub    $0x4,%esp
f011a29f:	68 94 a6 13 f0       	push   $0xf013a694
f011a2a4:	68 27 02 00 00       	push   $0x227
f011a2a9:	68 7a a2 13 f0       	push   $0xf013a27a
f011a2ae:	e8 f3 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2b3:	e8 d4 99 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a2b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a2bb:	74 17                	je     f011a2d4 <test_kmalloc_bestfit1+0x1210>
f011a2bd:	83 ec 04             	sub    $0x4,%esp
f011a2c0:	68 94 a2 13 f0       	push   $0xf013a294
f011a2c5:	68 28 02 00 00       	push   $0x228
f011a2ca:	68 7a a2 13 f0       	push   $0xf013a27a
f011a2cf:	e8 d2 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011a2d4:	e8 bf 1a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a2d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a2dc:	29 c2                	sub    %eax,%edx
f011a2de:	89 d0                	mov    %edx,%eax
f011a2e0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a2e5:	74 17                	je     f011a2fe <test_kmalloc_bestfit1+0x123a>
f011a2e7:	83 ec 04             	sub    $0x4,%esp
f011a2ea:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a2ef:	68 29 02 00 00       	push   $0x229
f011a2f4:	68 7a a2 13 f0       	push   $0xf013a27a
f011a2f9:	e8 a8 5e fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011a2fe:	83 ec 0c             	sub    $0xc,%esp
f011a301:	68 e4 a6 13 f0       	push   $0xf013a6e4
f011a306:	e8 22 69 fe ff       	call   f0100c2d <cprintf>
f011a30b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a30e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a313:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a316:	5b                   	pop    %ebx
f011a317:	5f                   	pop    %edi
f011a318:	5d                   	pop    %ebp
f011a319:	c3                   	ret    

f011a31a <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011a31a:	55                   	push   %ebp
f011a31b:	89 e5                	mov    %esp,%ebp
f011a31d:	57                   	push   %edi
f011a31e:	53                   	push   %ebx
f011a31f:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011a325:	83 ec 0c             	sub    $0xc,%esp
f011a328:	68 bc a1 13 f0       	push   $0xf013a1bc
f011a32d:	e8 fb 68 fe ff       	call   f0100c2d <cprintf>
f011a332:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a335:	83 ec 0c             	sub    $0xc,%esp
f011a338:	68 ec a1 13 f0       	push   $0xf013a1ec
f011a33d:	e8 eb 68 fe ff       	call   f0100c2d <cprintf>
f011a342:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a345:	83 ec 0c             	sub    $0xc,%esp
f011a348:	68 bc a1 13 f0       	push   $0xf013a1bc
f011a34d:	e8 db 68 fe ff       	call   f0100c2d <cprintf>
f011a352:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a355:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011a35b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a360:	b8 00 00 00 00       	mov    $0x0,%eax
f011a365:	89 d7                	mov    %edx,%edi
f011a367:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011a369:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011a370:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a373:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a378:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011a37b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a37e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a383:	f7 75 f4             	divl   -0xc(%ebp)
f011a386:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a389:	29 d0                	sub    %edx,%eax
f011a38b:	89 c1                	mov    %eax,%ecx
f011a38d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a394:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a399:	0f b6 d0             	movzbl %al,%edx
f011a39c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a39f:	01 d0                	add    %edx,%eax
f011a3a1:	48                   	dec    %eax
f011a3a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a3a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3a8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3ad:	f7 75 ec             	divl   -0x14(%ebp)
f011a3b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a3b3:	29 d0                	sub    %edx,%eax
f011a3b5:	01 c1                	add    %eax,%ecx
f011a3b7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a3be:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a3c3:	0f b6 c0             	movzbl %al,%eax
f011a3c6:	c1 e0 04             	shl    $0x4,%eax
f011a3c9:	89 c2                	mov    %eax,%edx
f011a3cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a3ce:	01 d0                	add    %edx,%eax
f011a3d0:	48                   	dec    %eax
f011a3d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a3d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a3d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3dc:	f7 75 e4             	divl   -0x1c(%ebp)
f011a3df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a3e2:	29 d0                	sub    %edx,%eax
f011a3e4:	01 c8                	add    %ecx,%eax
f011a3e6:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011a3eb:	29 c2                	sub    %eax,%edx
f011a3ed:	89 d0                	mov    %edx,%eax
f011a3ef:	83 ec 0c             	sub    $0xc,%esp
f011a3f2:	50                   	push   %eax
f011a3f3:	e8 e4 cf fe ff       	call   f01073dc <kmalloc>
f011a3f8:	83 c4 10             	add    $0x10,%esp
f011a3fb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011a401:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a407:	85 c0                	test   %eax,%eax
f011a409:	74 17                	je     f011a422 <test_kmalloc_bestfit2+0x108>
f011a40b:	83 ec 04             	sub    $0x4,%esp
f011a40e:	68 2c a7 13 f0       	push   $0xf013a72c
f011a413:	68 3f 02 00 00       	push   $0x23f
f011a418:	68 7a a2 13 f0       	push   $0xf013a27a
f011a41d:	e8 84 5d fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a422:	e8 71 19 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a427:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a42a:	e8 5d 98 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a42f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a432:	83 ec 0c             	sub    $0xc,%esp
f011a435:	68 00 fc 1f 00       	push   $0x1ffc00
f011a43a:	e8 9d cf fe ff       	call   f01073dc <kmalloc>
f011a43f:	83 c4 10             	add    $0x10,%esp
f011a442:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a448:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a44e:	89 c1                	mov    %eax,%ecx
f011a450:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a457:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a45a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a45f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a462:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a465:	ba 00 00 00 00       	mov    $0x0,%edx
f011a46a:	f7 75 d4             	divl   -0x2c(%ebp)
f011a46d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a470:	29 d0                	sub    %edx,%eax
f011a472:	89 c3                	mov    %eax,%ebx
f011a474:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a47b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a480:	0f b6 d0             	movzbl %al,%edx
f011a483:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a486:	01 d0                	add    %edx,%eax
f011a488:	48                   	dec    %eax
f011a489:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a48c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a48f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a494:	f7 75 cc             	divl   -0x34(%ebp)
f011a497:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a49a:	29 d0                	sub    %edx,%eax
f011a49c:	01 c3                	add    %eax,%ebx
f011a49e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a4a5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a4aa:	0f b6 c0             	movzbl %al,%eax
f011a4ad:	c1 e0 04             	shl    $0x4,%eax
f011a4b0:	89 c2                	mov    %eax,%edx
f011a4b2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a4b5:	01 d0                	add    %edx,%eax
f011a4b7:	48                   	dec    %eax
f011a4b8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a4bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4be:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4c3:	f7 75 c4             	divl   -0x3c(%ebp)
f011a4c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a4c9:	29 d0                	sub    %edx,%eax
f011a4cb:	01 d8                	add    %ebx,%eax
f011a4cd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a4d2:	39 c1                	cmp    %eax,%ecx
f011a4d4:	74 17                	je     f011a4ed <test_kmalloc_bestfit2+0x1d3>
f011a4d6:	83 ec 04             	sub    $0x4,%esp
f011a4d9:	68 94 a6 13 f0       	push   $0xf013a694
f011a4de:	68 49 02 00 00       	push   $0x249
f011a4e3:	68 7a a2 13 f0       	push   $0xf013a27a
f011a4e8:	e8 b9 5c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4ed:	e8 9a 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a4f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a4f5:	74 17                	je     f011a50e <test_kmalloc_bestfit2+0x1f4>
f011a4f7:	83 ec 04             	sub    $0x4,%esp
f011a4fa:	68 94 a2 13 f0       	push   $0xf013a294
f011a4ff:	68 4a 02 00 00       	push   $0x24a
f011a504:	68 7a a2 13 f0       	push   $0xf013a27a
f011a509:	e8 98 5c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a50e:	e8 85 18 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a513:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a516:	29 c2                	sub    %eax,%edx
f011a518:	89 d0                	mov    %edx,%eax
f011a51a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a51f:	74 17                	je     f011a538 <test_kmalloc_bestfit2+0x21e>
f011a521:	83 ec 04             	sub    $0x4,%esp
f011a524:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a529:	68 4b 02 00 00       	push   $0x24b
f011a52e:	68 7a a2 13 f0       	push   $0xf013a27a
f011a533:	e8 6e 5c fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a538:	e8 5b 18 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a53d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a540:	e8 47 97 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a545:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a548:	83 ec 0c             	sub    $0xc,%esp
f011a54b:	68 00 fc 1f 00       	push   $0x1ffc00
f011a550:	e8 87 ce fe ff       	call   f01073dc <kmalloc>
f011a555:	83 c4 10             	add    $0x10,%esp
f011a558:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011a55e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a564:	89 c1                	mov    %eax,%ecx
f011a566:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a56d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a570:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a575:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a578:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a57b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a580:	f7 75 bc             	divl   -0x44(%ebp)
f011a583:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a586:	29 d0                	sub    %edx,%eax
f011a588:	89 c3                	mov    %eax,%ebx
f011a58a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a591:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a596:	0f b6 d0             	movzbl %al,%edx
f011a599:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a59c:	01 d0                	add    %edx,%eax
f011a59e:	48                   	dec    %eax
f011a59f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a5a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5aa:	f7 75 b4             	divl   -0x4c(%ebp)
f011a5ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a5b0:	29 d0                	sub    %edx,%eax
f011a5b2:	01 c3                	add    %eax,%ebx
f011a5b4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a5bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a5c0:	0f b6 c0             	movzbl %al,%eax
f011a5c3:	c1 e0 04             	shl    $0x4,%eax
f011a5c6:	89 c2                	mov    %eax,%edx
f011a5c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a5cb:	01 d0                	add    %edx,%eax
f011a5cd:	48                   	dec    %eax
f011a5ce:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a5d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a5d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5d9:	f7 75 ac             	divl   -0x54(%ebp)
f011a5dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a5df:	29 d0                	sub    %edx,%eax
f011a5e1:	01 d8                	add    %ebx,%eax
f011a5e3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011a5e8:	39 c1                	cmp    %eax,%ecx
f011a5ea:	74 17                	je     f011a603 <test_kmalloc_bestfit2+0x2e9>
f011a5ec:	83 ec 04             	sub    $0x4,%esp
f011a5ef:	68 94 a6 13 f0       	push   $0xf013a694
f011a5f4:	68 51 02 00 00       	push   $0x251
f011a5f9:	68 7a a2 13 f0       	push   $0xf013a27a
f011a5fe:	e8 a3 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a603:	e8 84 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a608:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a60b:	74 17                	je     f011a624 <test_kmalloc_bestfit2+0x30a>
f011a60d:	83 ec 04             	sub    $0x4,%esp
f011a610:	68 94 a2 13 f0       	push   $0xf013a294
f011a615:	68 52 02 00 00       	push   $0x252
f011a61a:	68 7a a2 13 f0       	push   $0xf013a27a
f011a61f:	e8 82 5b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a624:	e8 6f 17 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a629:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a62c:	29 c2                	sub    %eax,%edx
f011a62e:	89 d0                	mov    %edx,%eax
f011a630:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a635:	74 17                	je     f011a64e <test_kmalloc_bestfit2+0x334>
f011a637:	83 ec 04             	sub    $0x4,%esp
f011a63a:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a63f:	68 53 02 00 00       	push   $0x253
f011a644:	68 7a a2 13 f0       	push   $0xf013a27a
f011a649:	e8 58 5b fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a64e:	e8 45 17 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a653:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a656:	e8 31 96 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a65b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011a65e:	83 ec 0c             	sub    $0xc,%esp
f011a661:	68 00 08 00 00       	push   $0x800
f011a666:	e8 71 cd fe ff       	call   f01073dc <kmalloc>
f011a66b:	83 c4 10             	add    $0x10,%esp
f011a66e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011a674:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a67a:	89 c1                	mov    %eax,%ecx
f011a67c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011a683:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a686:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a68b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011a68e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a691:	ba 00 00 00 00       	mov    $0x0,%edx
f011a696:	f7 75 a4             	divl   -0x5c(%ebp)
f011a699:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a69c:	29 d0                	sub    %edx,%eax
f011a69e:	89 c3                	mov    %eax,%ebx
f011a6a0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011a6a7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a6ac:	0f b6 d0             	movzbl %al,%edx
f011a6af:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6b2:	01 d0                	add    %edx,%eax
f011a6b4:	48                   	dec    %eax
f011a6b5:	89 45 98             	mov    %eax,-0x68(%ebp)
f011a6b8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6c0:	f7 75 9c             	divl   -0x64(%ebp)
f011a6c3:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a6c6:	29 d0                	sub    %edx,%eax
f011a6c8:	01 c3                	add    %eax,%ebx
f011a6ca:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011a6d1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a6d6:	0f b6 c0             	movzbl %al,%eax
f011a6d9:	c1 e0 04             	shl    $0x4,%eax
f011a6dc:	89 c2                	mov    %eax,%edx
f011a6de:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a6e1:	01 d0                	add    %edx,%eax
f011a6e3:	48                   	dec    %eax
f011a6e4:	89 45 90             	mov    %eax,-0x70(%ebp)
f011a6e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a6ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6ef:	f7 75 94             	divl   -0x6c(%ebp)
f011a6f2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011a6f5:	29 d0                	sub    %edx,%eax
f011a6f7:	01 d8                	add    %ebx,%eax
f011a6f9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011a6fe:	39 c1                	cmp    %eax,%ecx
f011a700:	74 17                	je     f011a719 <test_kmalloc_bestfit2+0x3ff>
f011a702:	83 ec 04             	sub    $0x4,%esp
f011a705:	68 94 a6 13 f0       	push   $0xf013a694
f011a70a:	68 59 02 00 00       	push   $0x259
f011a70f:	68 7a a2 13 f0       	push   $0xf013a27a
f011a714:	e8 8d 5a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a719:	e8 6e 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a71e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a721:	74 17                	je     f011a73a <test_kmalloc_bestfit2+0x420>
f011a723:	83 ec 04             	sub    $0x4,%esp
f011a726:	68 94 a2 13 f0       	push   $0xf013a294
f011a72b:	68 5a 02 00 00       	push   $0x25a
f011a730:	68 7a a2 13 f0       	push   $0xf013a27a
f011a735:	e8 6c 5a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011a73a:	e8 59 16 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a73f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a742:	29 c2                	sub    %eax,%edx
f011a744:	89 d0                	mov    %edx,%eax
f011a746:	83 f8 01             	cmp    $0x1,%eax
f011a749:	74 17                	je     f011a762 <test_kmalloc_bestfit2+0x448>
f011a74b:	83 ec 04             	sub    $0x4,%esp
f011a74e:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a753:	68 5b 02 00 00       	push   $0x25b
f011a758:	68 7a a2 13 f0       	push   $0xf013a27a
f011a75d:	e8 44 5a fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011a762:	e8 31 16 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a767:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a76a:	e8 1d 95 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a76f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011a772:	83 ec 0c             	sub    $0xc,%esp
f011a775:	68 00 08 00 00       	push   $0x800
f011a77a:	e8 5d cc fe ff       	call   f01073dc <kmalloc>
f011a77f:	83 c4 10             	add    $0x10,%esp
f011a782:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011a788:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a78e:	89 c1                	mov    %eax,%ecx
f011a790:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011a797:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011a79a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a79f:	89 45 88             	mov    %eax,-0x78(%ebp)
f011a7a2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7aa:	f7 75 8c             	divl   -0x74(%ebp)
f011a7ad:	8b 45 88             	mov    -0x78(%ebp),%eax
f011a7b0:	29 d0                	sub    %edx,%eax
f011a7b2:	89 c3                	mov    %eax,%ebx
f011a7b4:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011a7bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a7c0:	0f b6 d0             	movzbl %al,%edx
f011a7c3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011a7c6:	01 d0                	add    %edx,%eax
f011a7c8:	48                   	dec    %eax
f011a7c9:	89 45 80             	mov    %eax,-0x80(%ebp)
f011a7cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a7cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7d4:	f7 75 84             	divl   -0x7c(%ebp)
f011a7d7:	8b 45 80             	mov    -0x80(%ebp),%eax
f011a7da:	29 d0                	sub    %edx,%eax
f011a7dc:	01 c3                	add    %eax,%ebx
f011a7de:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011a7e5:	10 00 00 
f011a7e8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a7ed:	0f b6 c0             	movzbl %al,%eax
f011a7f0:	c1 e0 04             	shl    $0x4,%eax
f011a7f3:	89 c2                	mov    %eax,%edx
f011a7f5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011a7fb:	01 d0                	add    %edx,%eax
f011a7fd:	48                   	dec    %eax
f011a7fe:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011a804:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a80a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a80f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011a815:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011a81b:	29 d0                	sub    %edx,%eax
f011a81d:	01 d8                	add    %ebx,%eax
f011a81f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011a824:	39 c1                	cmp    %eax,%ecx
f011a826:	74 17                	je     f011a83f <test_kmalloc_bestfit2+0x525>
f011a828:	83 ec 04             	sub    $0x4,%esp
f011a82b:	68 94 a6 13 f0       	push   $0xf013a694
f011a830:	68 61 02 00 00       	push   $0x261
f011a835:	68 7a a2 13 f0       	push   $0xf013a27a
f011a83a:	e8 67 59 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a83f:	e8 48 94 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a844:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a847:	74 17                	je     f011a860 <test_kmalloc_bestfit2+0x546>
f011a849:	83 ec 04             	sub    $0x4,%esp
f011a84c:	68 94 a2 13 f0       	push   $0xf013a294
f011a851:	68 62 02 00 00       	push   $0x262
f011a856:	68 7a a2 13 f0       	push   $0xf013a27a
f011a85b:	e8 46 59 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011a860:	e8 33 15 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a865:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a868:	29 c2                	sub    %eax,%edx
f011a86a:	89 d0                	mov    %edx,%eax
f011a86c:	83 f8 01             	cmp    $0x1,%eax
f011a86f:	74 17                	je     f011a888 <test_kmalloc_bestfit2+0x56e>
f011a871:	83 ec 04             	sub    $0x4,%esp
f011a874:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a879:	68 63 02 00 00       	push   $0x263
f011a87e:	68 7a a2 13 f0       	push   $0xf013a27a
f011a883:	e8 1e 59 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a888:	e8 0b 15 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a88d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a890:	e8 f7 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a895:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011a898:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a89e:	83 ec 0c             	sub    $0xc,%esp
f011a8a1:	50                   	push   %eax
f011a8a2:	e8 4f cb fe ff       	call   f01073f6 <kfree>
f011a8a7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8aa:	e8 dd 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a8b2:	74 17                	je     f011a8cb <test_kmalloc_bestfit2+0x5b1>
f011a8b4:	83 ec 04             	sub    $0x4,%esp
f011a8b7:	68 94 a2 13 f0       	push   $0xf013a294
f011a8bc:	68 69 02 00 00       	push   $0x269
f011a8c1:	68 7a a2 13 f0       	push   $0xf013a27a
f011a8c6:	e8 db 58 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011a8cb:	e8 c8 14 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a8d0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011a8d3:	83 f8 01             	cmp    $0x1,%eax
f011a8d6:	74 17                	je     f011a8ef <test_kmalloc_bestfit2+0x5d5>
f011a8d8:	83 ec 04             	sub    $0x4,%esp
f011a8db:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011a8e0:	68 6a 02 00 00       	push   $0x26a
f011a8e5:	68 7a a2 13 f0       	push   $0xf013a27a
f011a8ea:	e8 b7 58 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011a8ef:	e8 a4 14 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011a8f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a8f7:	e8 90 93 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a8fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011a8ff:	83 ec 0c             	sub    $0xc,%esp
f011a902:	68 00 1c 00 00       	push   $0x1c00
f011a907:	e8 d0 ca fe ff       	call   f01073dc <kmalloc>
f011a90c:	83 c4 10             	add    $0x10,%esp
f011a90f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011a915:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a91b:	89 c1                	mov    %eax,%ecx
f011a91d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a924:	10 00 00 
f011a927:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a92d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a932:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a938:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a93e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a943:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a949:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a94f:	29 d0                	sub    %edx,%eax
f011a951:	89 c3                	mov    %eax,%ebx
f011a953:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a95a:	10 00 00 
f011a95d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a962:	0f b6 d0             	movzbl %al,%edx
f011a965:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a96b:	01 d0                	add    %edx,%eax
f011a96d:	48                   	dec    %eax
f011a96e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a974:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a97a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a97f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a985:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a98b:	29 d0                	sub    %edx,%eax
f011a98d:	01 c3                	add    %eax,%ebx
f011a98f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a996:	10 00 00 
f011a999:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011a99e:	0f b6 c0             	movzbl %al,%eax
f011a9a1:	c1 e0 04             	shl    $0x4,%eax
f011a9a4:	89 c2                	mov    %eax,%edx
f011a9a6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a9ac:	01 d0                	add    %edx,%eax
f011a9ae:	48                   	dec    %eax
f011a9af:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a9b5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a9bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9c0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a9c6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a9cc:	29 d0                	sub    %edx,%eax
f011a9ce:	01 d8                	add    %ebx,%eax
f011a9d0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011a9d5:	39 c1                	cmp    %eax,%ecx
f011a9d7:	74 17                	je     f011a9f0 <test_kmalloc_bestfit2+0x6d6>
f011a9d9:	83 ec 04             	sub    $0x4,%esp
f011a9dc:	68 94 a6 13 f0       	push   $0xf013a694
f011a9e1:	68 70 02 00 00       	push   $0x270
f011a9e6:	68 7a a2 13 f0       	push   $0xf013a27a
f011a9eb:	e8 b6 57 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9f0:	e8 97 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011a9f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a9f8:	74 17                	je     f011aa11 <test_kmalloc_bestfit2+0x6f7>
f011a9fa:	83 ec 04             	sub    $0x4,%esp
f011a9fd:	68 94 a2 13 f0       	push   $0xf013a294
f011aa02:	68 71 02 00 00       	push   $0x271
f011aa07:	68 7a a2 13 f0       	push   $0xf013a27a
f011aa0c:	e8 95 57 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011aa11:	e8 82 13 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aa16:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011aa19:	29 c2                	sub    %eax,%edx
f011aa1b:	89 d0                	mov    %edx,%eax
f011aa1d:	83 f8 02             	cmp    $0x2,%eax
f011aa20:	74 17                	je     f011aa39 <test_kmalloc_bestfit2+0x71f>
f011aa22:	83 ec 04             	sub    $0x4,%esp
f011aa25:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011aa2a:	68 72 02 00 00       	push   $0x272
f011aa2f:	68 7a a2 13 f0       	push   $0xf013a27a
f011aa34:	e8 6d 57 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aa39:	e8 5a 13 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aa3e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aa41:	e8 46 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa46:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011aa49:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011aa4f:	83 ec 0c             	sub    $0xc,%esp
f011aa52:	50                   	push   %eax
f011aa53:	e8 9e c9 fe ff       	call   f01073f6 <kfree>
f011aa58:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa5b:	e8 2c 92 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aa60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aa63:	74 17                	je     f011aa7c <test_kmalloc_bestfit2+0x762>
f011aa65:	83 ec 04             	sub    $0x4,%esp
f011aa68:	68 94 a2 13 f0       	push   $0xf013a294
f011aa6d:	68 78 02 00 00       	push   $0x278
f011aa72:	68 7a a2 13 f0       	push   $0xf013a27a
f011aa77:	e8 2a 57 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011aa7c:	e8 17 13 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aa81:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011aa84:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aa89:	74 17                	je     f011aaa2 <test_kmalloc_bestfit2+0x788>
f011aa8b:	83 ec 04             	sub    $0x4,%esp
f011aa8e:	68 48 a5 13 f0       	push   $0xf013a548
f011aa93:	68 79 02 00 00       	push   $0x279
f011aa98:	68 7a a2 13 f0       	push   $0xf013a27a
f011aa9d:	e8 04 57 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aaa2:	e8 f1 12 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aaa7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aaaa:	e8 dd 91 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aaaf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011aab2:	83 ec 0c             	sub    $0xc,%esp
f011aab5:	68 00 fc 2f 00       	push   $0x2ffc00
f011aaba:	e8 1d c9 fe ff       	call   f01073dc <kmalloc>
f011aabf:	83 c4 10             	add    $0x10,%esp
f011aac2:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011aac8:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011aace:	89 c1                	mov    %eax,%ecx
f011aad0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011aad7:	10 00 00 
f011aada:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011aae0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aae5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011aaeb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aaf1:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaf6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011aafc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ab02:	29 d0                	sub    %edx,%eax
f011ab04:	89 c3                	mov    %eax,%ebx
f011ab06:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011ab0d:	10 00 00 
f011ab10:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ab15:	0f b6 d0             	movzbl %al,%edx
f011ab18:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ab1e:	01 d0                	add    %edx,%eax
f011ab20:	48                   	dec    %eax
f011ab21:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011ab27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab32:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ab38:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ab3e:	29 d0                	sub    %edx,%eax
f011ab40:	01 c3                	add    %eax,%ebx
f011ab42:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ab49:	10 00 00 
f011ab4c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ab51:	0f b6 c0             	movzbl %al,%eax
f011ab54:	c1 e0 04             	shl    $0x4,%eax
f011ab57:	89 c2                	mov    %eax,%edx
f011ab59:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ab5f:	01 d0                	add    %edx,%eax
f011ab61:	48                   	dec    %eax
f011ab62:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ab68:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ab6e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab73:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ab79:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ab7f:	29 d0                	sub    %edx,%eax
f011ab81:	01 d8                	add    %ebx,%eax
f011ab83:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ab88:	39 c1                	cmp    %eax,%ecx
f011ab8a:	74 17                	je     f011aba3 <test_kmalloc_bestfit2+0x889>
f011ab8c:	83 ec 04             	sub    $0x4,%esp
f011ab8f:	68 94 a6 13 f0       	push   $0xf013a694
f011ab94:	68 7f 02 00 00       	push   $0x27f
f011ab99:	68 7a a2 13 f0       	push   $0xf013a27a
f011ab9e:	e8 03 56 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aba3:	e8 e4 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aba8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011abab:	74 17                	je     f011abc4 <test_kmalloc_bestfit2+0x8aa>
f011abad:	83 ec 04             	sub    $0x4,%esp
f011abb0:	68 94 a2 13 f0       	push   $0xf013a294
f011abb5:	68 80 02 00 00       	push   $0x280
f011abba:	68 7a a2 13 f0       	push   $0xf013a27a
f011abbf:	e8 e2 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011abc4:	e8 cf 11 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011abc9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011abcc:	29 c2                	sub    %eax,%edx
f011abce:	89 d0                	mov    %edx,%eax
f011abd0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011abd5:	74 17                	je     f011abee <test_kmalloc_bestfit2+0x8d4>
f011abd7:	83 ec 04             	sub    $0x4,%esp
f011abda:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011abdf:	68 81 02 00 00       	push   $0x281
f011abe4:	68 7a a2 13 f0       	push   $0xf013a27a
f011abe9:	e8 b8 55 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011abee:	e8 a5 11 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011abf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011abf6:	e8 91 90 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011abfb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011abfe:	83 ec 0c             	sub    $0xc,%esp
f011ac01:	68 00 18 20 00       	push   $0x201800
f011ac06:	e8 d1 c7 fe ff       	call   f01073dc <kmalloc>
f011ac0b:	83 c4 10             	add    $0x10,%esp
f011ac0e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ac14:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ac1a:	89 c1                	mov    %eax,%ecx
f011ac1c:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ac23:	10 00 00 
f011ac26:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ac2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac31:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ac37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ac3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac42:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ac48:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ac4e:	29 d0                	sub    %edx,%eax
f011ac50:	89 c3                	mov    %eax,%ebx
f011ac52:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ac59:	10 00 00 
f011ac5c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ac61:	0f b6 d0             	movzbl %al,%edx
f011ac64:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ac6a:	01 d0                	add    %edx,%eax
f011ac6c:	48                   	dec    %eax
f011ac6d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ac73:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ac79:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac7e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ac84:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ac8a:	29 d0                	sub    %edx,%eax
f011ac8c:	01 c3                	add    %eax,%ebx
f011ac8e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ac95:	10 00 00 
f011ac98:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ac9d:	0f b6 c0             	movzbl %al,%eax
f011aca0:	c1 e0 04             	shl    $0x4,%eax
f011aca3:	89 c2                	mov    %eax,%edx
f011aca5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011acab:	01 d0                	add    %edx,%eax
f011acad:	48                   	dec    %eax
f011acae:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011acb4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011acba:	ba 00 00 00 00       	mov    $0x0,%edx
f011acbf:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011acc5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011accb:	29 d0                	sub    %edx,%eax
f011accd:	01 d8                	add    %ebx,%eax
f011accf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011acd4:	39 c1                	cmp    %eax,%ecx
f011acd6:	74 17                	je     f011acef <test_kmalloc_bestfit2+0x9d5>
f011acd8:	83 ec 04             	sub    $0x4,%esp
f011acdb:	68 94 a6 13 f0       	push   $0xf013a694
f011ace0:	68 87 02 00 00       	push   $0x287
f011ace5:	68 7a a2 13 f0       	push   $0xf013a27a
f011acea:	e8 b7 54 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acef:	e8 98 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011acf4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011acf7:	74 17                	je     f011ad10 <test_kmalloc_bestfit2+0x9f6>
f011acf9:	83 ec 04             	sub    $0x4,%esp
f011acfc:	68 94 a2 13 f0       	push   $0xf013a294
f011ad01:	68 88 02 00 00       	push   $0x288
f011ad06:	68 7a a2 13 f0       	push   $0xf013a27a
f011ad0b:	e8 96 54 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011ad10:	e8 83 10 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011ad15:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ad18:	29 c2                	sub    %eax,%edx
f011ad1a:	89 d0                	mov    %edx,%eax
f011ad1c:	3d 02 02 00 00       	cmp    $0x202,%eax
f011ad21:	74 17                	je     f011ad3a <test_kmalloc_bestfit2+0xa20>
f011ad23:	83 ec 04             	sub    $0x4,%esp
f011ad26:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011ad2b:	68 89 02 00 00       	push   $0x289
f011ad30:	68 7a a2 13 f0       	push   $0xf013a27a
f011ad35:	e8 6c 54 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad3a:	e8 59 10 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011ad3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ad42:	e8 45 8f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ad47:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ad4a:	83 ec 0c             	sub    $0xc,%esp
f011ad4d:	68 00 fc 4f 00       	push   $0x4ffc00
f011ad52:	e8 85 c6 fe ff       	call   f01073dc <kmalloc>
f011ad57:	83 c4 10             	add    $0x10,%esp
f011ad5a:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ad60:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ad66:	89 c1                	mov    %eax,%ecx
f011ad68:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ad6f:	10 00 00 
f011ad72:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ad78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad7d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ad83:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ad89:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad8e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ad94:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ad9a:	29 d0                	sub    %edx,%eax
f011ad9c:	89 c3                	mov    %eax,%ebx
f011ad9e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ada5:	10 00 00 
f011ada8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011adad:	0f b6 d0             	movzbl %al,%edx
f011adb0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011adb6:	01 d0                	add    %edx,%eax
f011adb8:	48                   	dec    %eax
f011adb9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011adbf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011adc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011adca:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011add0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011add6:	29 d0                	sub    %edx,%eax
f011add8:	01 c3                	add    %eax,%ebx
f011adda:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ade1:	10 00 00 
f011ade4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ade9:	0f b6 c0             	movzbl %al,%eax
f011adec:	c1 e0 04             	shl    $0x4,%eax
f011adef:	89 c2                	mov    %eax,%edx
f011adf1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011adf7:	01 d0                	add    %edx,%eax
f011adf9:	48                   	dec    %eax
f011adfa:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ae00:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae0b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ae11:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ae17:	29 d0                	sub    %edx,%eax
f011ae19:	01 d8                	add    %ebx,%eax
f011ae1b:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ae20:	39 c1                	cmp    %eax,%ecx
f011ae22:	74 17                	je     f011ae3b <test_kmalloc_bestfit2+0xb21>
f011ae24:	83 ec 04             	sub    $0x4,%esp
f011ae27:	68 94 a6 13 f0       	push   $0xf013a694
f011ae2c:	68 8f 02 00 00       	push   $0x28f
f011ae31:	68 7a a2 13 f0       	push   $0xf013a27a
f011ae36:	e8 6b 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae3b:	e8 4c 8e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae40:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae43:	74 17                	je     f011ae5c <test_kmalloc_bestfit2+0xb42>
f011ae45:	83 ec 04             	sub    $0x4,%esp
f011ae48:	68 94 a2 13 f0       	push   $0xf013a294
f011ae4d:	68 90 02 00 00       	push   $0x290
f011ae52:	68 7a a2 13 f0       	push   $0xf013a27a
f011ae57:	e8 4a 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ae5c:	e8 37 0f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011ae61:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae64:	29 c2                	sub    %eax,%edx
f011ae66:	89 d0                	mov    %edx,%eax
f011ae68:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ae6d:	74 17                	je     f011ae86 <test_kmalloc_bestfit2+0xb6c>
f011ae6f:	83 ec 04             	sub    $0x4,%esp
f011ae72:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011ae77:	68 91 02 00 00       	push   $0x291
f011ae7c:	68 7a a2 13 f0       	push   $0xf013a27a
f011ae81:	e8 20 53 fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae86:	e8 0d 0f ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011ae8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae8e:	e8 f9 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ae93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011ae96:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ae9c:	83 ec 0c             	sub    $0xc,%esp
f011ae9f:	50                   	push   %eax
f011aea0:	e8 51 c5 fe ff       	call   f01073f6 <kfree>
f011aea5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aea8:	e8 df 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aead:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aeb0:	74 17                	je     f011aec9 <test_kmalloc_bestfit2+0xbaf>
f011aeb2:	83 ec 04             	sub    $0x4,%esp
f011aeb5:	68 94 a2 13 f0       	push   $0xf013a294
f011aeba:	68 97 02 00 00       	push   $0x297
f011aebf:	68 7a a2 13 f0       	push   $0xf013a27a
f011aec4:	e8 dd 52 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011aec9:	e8 ca 0e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aece:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011aed1:	3d 02 02 00 00       	cmp    $0x202,%eax
f011aed6:	74 17                	je     f011aeef <test_kmalloc_bestfit2+0xbd5>
f011aed8:	83 ec 04             	sub    $0x4,%esp
f011aedb:	68 48 a5 13 f0       	push   $0xf013a548
f011aee0:	68 98 02 00 00       	push   $0x298
f011aee5:	68 7a a2 13 f0       	push   $0xf013a27a
f011aeea:	e8 b7 52 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011aeef:	e8 a4 0e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011aef4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aef7:	e8 90 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011aefc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011aeff:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011af05:	83 ec 0c             	sub    $0xc,%esp
f011af08:	50                   	push   %eax
f011af09:	e8 e8 c4 fe ff       	call   f01073f6 <kfree>
f011af0e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af11:	e8 76 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af19:	74 17                	je     f011af32 <test_kmalloc_bestfit2+0xc18>
f011af1b:	83 ec 04             	sub    $0x4,%esp
f011af1e:	68 94 a2 13 f0       	push   $0xf013a294
f011af23:	68 9e 02 00 00       	push   $0x29e
f011af28:	68 7a a2 13 f0       	push   $0xf013a27a
f011af2d:	e8 74 52 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011af32:	e8 61 0e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011af37:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011af3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011af3f:	74 17                	je     f011af58 <test_kmalloc_bestfit2+0xc3e>
f011af41:	83 ec 04             	sub    $0x4,%esp
f011af44:	68 74 a7 13 f0       	push   $0xf013a774
f011af49:	68 9f 02 00 00       	push   $0x29f
f011af4e:	68 7a a2 13 f0       	push   $0xf013a27a
f011af53:	e8 4e 52 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011af58:	e8 3b 0e ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011af5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011af60:	e8 27 8d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011af65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011af68:	83 ec 0c             	sub    $0xc,%esp
f011af6b:	68 00 fc 1f 00       	push   $0x1ffc00
f011af70:	e8 67 c4 fe ff       	call   f01073dc <kmalloc>
f011af75:	83 c4 10             	add    $0x10,%esp
f011af78:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011af7e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011af84:	89 c1                	mov    %eax,%ecx
f011af86:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011af8d:	10 00 00 
f011af90:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011af96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011af9b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011afa1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011afa7:	ba 00 00 00 00       	mov    $0x0,%edx
f011afac:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011afb2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011afb8:	29 d0                	sub    %edx,%eax
f011afba:	89 c3                	mov    %eax,%ebx
f011afbc:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011afc3:	10 00 00 
f011afc6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011afcb:	0f b6 d0             	movzbl %al,%edx
f011afce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011afd4:	01 d0                	add    %edx,%eax
f011afd6:	48                   	dec    %eax
f011afd7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011afdd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011afe3:	ba 00 00 00 00       	mov    $0x0,%edx
f011afe8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011afee:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011aff4:	29 d0                	sub    %edx,%eax
f011aff6:	01 c3                	add    %eax,%ebx
f011aff8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011afff:	10 00 00 
f011b002:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b007:	0f b6 c0             	movzbl %al,%eax
f011b00a:	c1 e0 04             	shl    $0x4,%eax
f011b00d:	89 c2                	mov    %eax,%edx
f011b00f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b015:	01 d0                	add    %edx,%eax
f011b017:	48                   	dec    %eax
f011b018:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b01e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b024:	ba 00 00 00 00       	mov    $0x0,%edx
f011b029:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b02f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b035:	29 d0                	sub    %edx,%eax
f011b037:	01 d8                	add    %ebx,%eax
f011b039:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b03e:	39 c1                	cmp    %eax,%ecx
f011b040:	74 17                	je     f011b059 <test_kmalloc_bestfit2+0xd3f>
f011b042:	83 ec 04             	sub    $0x4,%esp
f011b045:	68 94 a6 13 f0       	push   $0xf013a694
f011b04a:	68 a5 02 00 00       	push   $0x2a5
f011b04f:	68 7a a2 13 f0       	push   $0xf013a27a
f011b054:	e8 4d 51 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b059:	e8 2e 8c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b05e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b061:	74 17                	je     f011b07a <test_kmalloc_bestfit2+0xd60>
f011b063:	83 ec 04             	sub    $0x4,%esp
f011b066:	68 94 a2 13 f0       	push   $0xf013a294
f011b06b:	68 a6 02 00 00       	push   $0x2a6
f011b070:	68 7a a2 13 f0       	push   $0xf013a27a
f011b075:	e8 2c 51 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b07a:	e8 19 0d ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b07f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b082:	29 c2                	sub    %eax,%edx
f011b084:	89 d0                	mov    %edx,%eax
f011b086:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b08b:	74 17                	je     f011b0a4 <test_kmalloc_bestfit2+0xd8a>
f011b08d:	83 ec 04             	sub    $0x4,%esp
f011b090:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011b095:	68 a7 02 00 00       	push   $0x2a7
f011b09a:	68 7a a2 13 f0       	push   $0xf013a27a
f011b09f:	e8 02 51 fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b0a4:	e8 ef 0c ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b0a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0ac:	e8 db 8b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b0b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b0b4:	83 ec 0c             	sub    $0xc,%esp
f011b0b7:	68 00 18 00 00       	push   $0x1800
f011b0bc:	e8 1b c3 fe ff       	call   f01073dc <kmalloc>
f011b0c1:	83 c4 10             	add    $0x10,%esp
f011b0c4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b0ca:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b0d0:	89 c1                	mov    %eax,%ecx
f011b0d2:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b0d9:	10 00 00 
f011b0dc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b0e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0e7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b0ed:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b0f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0f8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b0fe:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b104:	29 d0                	sub    %edx,%eax
f011b106:	89 c3                	mov    %eax,%ebx
f011b108:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b10f:	10 00 00 
f011b112:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b117:	0f b6 d0             	movzbl %al,%edx
f011b11a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b120:	01 d0                	add    %edx,%eax
f011b122:	48                   	dec    %eax
f011b123:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b129:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b12f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b134:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b13a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b140:	29 d0                	sub    %edx,%eax
f011b142:	01 c3                	add    %eax,%ebx
f011b144:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b14b:	10 00 00 
f011b14e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b153:	0f b6 c0             	movzbl %al,%eax
f011b156:	c1 e0 04             	shl    $0x4,%eax
f011b159:	89 c2                	mov    %eax,%edx
f011b15b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b161:	01 d0                	add    %edx,%eax
f011b163:	48                   	dec    %eax
f011b164:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b16a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b170:	ba 00 00 00 00       	mov    $0x0,%edx
f011b175:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b17b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b181:	29 d0                	sub    %edx,%eax
f011b183:	01 d8                	add    %ebx,%eax
f011b185:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b18a:	39 c1                	cmp    %eax,%ecx
f011b18c:	74 17                	je     f011b1a5 <test_kmalloc_bestfit2+0xe8b>
f011b18e:	83 ec 04             	sub    $0x4,%esp
f011b191:	68 94 a6 13 f0       	push   $0xf013a694
f011b196:	68 ad 02 00 00       	push   $0x2ad
f011b19b:	68 7a a2 13 f0       	push   $0xf013a27a
f011b1a0:	e8 01 50 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1a5:	e8 e2 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b1aa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1ad:	74 17                	je     f011b1c6 <test_kmalloc_bestfit2+0xeac>
f011b1af:	83 ec 04             	sub    $0x4,%esp
f011b1b2:	68 94 a2 13 f0       	push   $0xf013a294
f011b1b7:	68 ae 02 00 00       	push   $0x2ae
f011b1bc:	68 7a a2 13 f0       	push   $0xf013a27a
f011b1c1:	e8 e0 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b1c6:	e8 cd 0b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b1cb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b1ce:	29 c2                	sub    %eax,%edx
f011b1d0:	89 d0                	mov    %edx,%eax
f011b1d2:	83 f8 02             	cmp    $0x2,%eax
f011b1d5:	74 17                	je     f011b1ee <test_kmalloc_bestfit2+0xed4>
f011b1d7:	83 ec 04             	sub    $0x4,%esp
f011b1da:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011b1df:	68 af 02 00 00       	push   $0x2af
f011b1e4:	68 7a a2 13 f0       	push   $0xf013a27a
f011b1e9:	e8 b8 4f fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1ee:	e8 a5 0b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b1f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b1f6:	e8 91 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b1fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b1fe:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b204:	83 ec 0c             	sub    $0xc,%esp
f011b207:	50                   	push   %eax
f011b208:	e8 e9 c1 fe ff       	call   f01073f6 <kfree>
f011b20d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b210:	e8 77 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b215:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b218:	74 17                	je     f011b231 <test_kmalloc_bestfit2+0xf17>
f011b21a:	83 ec 04             	sub    $0x4,%esp
f011b21d:	68 94 a2 13 f0       	push   $0xf013a294
f011b222:	68 b5 02 00 00       	push   $0x2b5
f011b227:	68 7a a2 13 f0       	push   $0xf013a27a
f011b22c:	e8 75 4f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b231:	e8 62 0b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b236:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b239:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b23e:	74 17                	je     f011b257 <test_kmalloc_bestfit2+0xf3d>
f011b240:	83 ec 04             	sub    $0x4,%esp
f011b243:	68 74 a7 13 f0       	push   $0xf013a774
f011b248:	68 b6 02 00 00       	push   $0x2b6
f011b24d:	68 7a a2 13 f0       	push   $0xf013a27a
f011b252:	e8 4f 4f fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b257:	e8 3c 0b ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b25c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b25f:	e8 28 8a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b264:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011b267:	83 ec 0c             	sub    $0xc,%esp
f011b26a:	68 00 fc 2f 00       	push   $0x2ffc00
f011b26f:	e8 68 c1 fe ff       	call   f01073dc <kmalloc>
f011b274:	83 c4 10             	add    $0x10,%esp
f011b277:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b27d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b283:	89 c1                	mov    %eax,%ecx
f011b285:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b28c:	10 00 00 
f011b28f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b295:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b29a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b2a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b2a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2ab:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b2b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b2b7:	29 d0                	sub    %edx,%eax
f011b2b9:	89 c3                	mov    %eax,%ebx
f011b2bb:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b2c2:	10 00 00 
f011b2c5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b2ca:	0f b6 d0             	movzbl %al,%edx
f011b2cd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b2d3:	01 d0                	add    %edx,%eax
f011b2d5:	48                   	dec    %eax
f011b2d6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b2dc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b2e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2e7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b2ed:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b2f3:	29 d0                	sub    %edx,%eax
f011b2f5:	01 c3                	add    %eax,%ebx
f011b2f7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b2fe:	10 00 00 
f011b301:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b306:	0f b6 c0             	movzbl %al,%eax
f011b309:	c1 e0 04             	shl    $0x4,%eax
f011b30c:	89 c2                	mov    %eax,%edx
f011b30e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b314:	01 d0                	add    %edx,%eax
f011b316:	48                   	dec    %eax
f011b317:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b31d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b323:	ba 00 00 00 00       	mov    $0x0,%edx
f011b328:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b32e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b334:	29 d0                	sub    %edx,%eax
f011b336:	01 d8                	add    %ebx,%eax
f011b338:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b33d:	39 c1                	cmp    %eax,%ecx
f011b33f:	74 17                	je     f011b358 <test_kmalloc_bestfit2+0x103e>
f011b341:	83 ec 04             	sub    $0x4,%esp
f011b344:	68 94 a6 13 f0       	push   $0xf013a694
f011b349:	68 bc 02 00 00       	push   $0x2bc
f011b34e:	68 7a a2 13 f0       	push   $0xf013a27a
f011b353:	e8 4e 4e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b358:	e8 2f 89 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b35d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b360:	74 17                	je     f011b379 <test_kmalloc_bestfit2+0x105f>
f011b362:	83 ec 04             	sub    $0x4,%esp
f011b365:	68 94 a2 13 f0       	push   $0xf013a294
f011b36a:	68 bd 02 00 00       	push   $0x2bd
f011b36f:	68 7a a2 13 f0       	push   $0xf013a27a
f011b374:	e8 2d 4e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b379:	e8 1a 0a ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b37e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b381:	29 c2                	sub    %eax,%edx
f011b383:	89 d0                	mov    %edx,%eax
f011b385:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b38a:	74 17                	je     f011b3a3 <test_kmalloc_bestfit2+0x1089>
f011b38c:	83 ec 04             	sub    $0x4,%esp
f011b38f:	68 74 a7 13 f0       	push   $0xf013a774
f011b394:	68 be 02 00 00       	push   $0x2be
f011b399:	68 7a a2 13 f0       	push   $0xf013a27a
f011b39e:	e8 03 4e fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011b3a3:	e8 f0 09 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b3a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3ab:	e8 dc 88 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b3b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011b3b3:	83 ec 0c             	sub    $0xc,%esp
f011b3b6:	68 00 fc 3f 00       	push   $0x3ffc00
f011b3bb:	e8 1c c0 fe ff       	call   f01073dc <kmalloc>
f011b3c0:	83 c4 10             	add    $0x10,%esp
f011b3c3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b3c9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b3cf:	89 c1                	mov    %eax,%ecx
f011b3d1:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b3d8:	10 00 00 
f011b3db:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b3e1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b3e6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b3ec:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b3f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3f7:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b3fd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b403:	29 d0                	sub    %edx,%eax
f011b405:	89 c3                	mov    %eax,%ebx
f011b407:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b40e:	10 00 00 
f011b411:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b416:	0f b6 d0             	movzbl %al,%edx
f011b419:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b41f:	01 d0                	add    %edx,%eax
f011b421:	48                   	dec    %eax
f011b422:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b428:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b42e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b433:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b439:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b43f:	29 d0                	sub    %edx,%eax
f011b441:	01 c3                	add    %eax,%ebx
f011b443:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b44a:	10 00 00 
f011b44d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b452:	0f b6 c0             	movzbl %al,%eax
f011b455:	c1 e0 04             	shl    $0x4,%eax
f011b458:	89 c2                	mov    %eax,%edx
f011b45a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b460:	01 d0                	add    %edx,%eax
f011b462:	48                   	dec    %eax
f011b463:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b469:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b46f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b474:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b47a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b480:	29 d0                	sub    %edx,%eax
f011b482:	01 d8                	add    %ebx,%eax
f011b484:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b489:	39 c1                	cmp    %eax,%ecx
f011b48b:	74 17                	je     f011b4a4 <test_kmalloc_bestfit2+0x118a>
f011b48d:	83 ec 04             	sub    $0x4,%esp
f011b490:	68 94 a6 13 f0       	push   $0xf013a694
f011b495:	68 c4 02 00 00       	push   $0x2c4
f011b49a:	68 7a a2 13 f0       	push   $0xf013a27a
f011b49f:	e8 02 4d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4a4:	e8 e3 87 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b4a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b4ac:	74 17                	je     f011b4c5 <test_kmalloc_bestfit2+0x11ab>
f011b4ae:	83 ec 04             	sub    $0x4,%esp
f011b4b1:	68 94 a2 13 f0       	push   $0xf013a294
f011b4b6:	68 c5 02 00 00       	push   $0x2c5
f011b4bb:	68 7a a2 13 f0       	push   $0xf013a27a
f011b4c0:	e8 e1 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b4c5:	e8 ce 08 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b4ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b4cd:	29 c2                	sub    %eax,%edx
f011b4cf:	89 d0                	mov    %edx,%eax
f011b4d1:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b4d6:	74 17                	je     f011b4ef <test_kmalloc_bestfit2+0x11d5>
f011b4d8:	83 ec 04             	sub    $0x4,%esp
f011b4db:	68 74 a7 13 f0       	push   $0xf013a774
f011b4e0:	68 c6 02 00 00       	push   $0x2c6
f011b4e5:	68 7a a2 13 f0       	push   $0xf013a27a
f011b4ea:	e8 b7 4c fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011b4ef:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011b4f6:	10 00 00 
f011b4f9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011b4ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b504:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011b50a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b510:	ba 00 00 00 00       	mov    $0x0,%edx
f011b515:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011b51b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b521:	29 d0                	sub    %edx,%eax
f011b523:	89 c1                	mov    %eax,%ecx
f011b525:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011b52c:	10 00 00 
f011b52f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b534:	0f b6 d0             	movzbl %al,%edx
f011b537:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011b53d:	01 d0                	add    %edx,%eax
f011b53f:	48                   	dec    %eax
f011b540:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011b546:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b54c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b551:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011b557:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b55d:	29 d0                	sub    %edx,%eax
f011b55f:	01 c1                	add    %eax,%ecx
f011b561:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011b568:	10 00 00 
f011b56b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b570:	0f b6 c0             	movzbl %al,%eax
f011b573:	c1 e0 04             	shl    $0x4,%eax
f011b576:	89 c2                	mov    %eax,%edx
f011b578:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011b57e:	01 d0                	add    %edx,%eax
f011b580:	48                   	dec    %eax
f011b581:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011b587:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b58d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b592:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011b598:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b59e:	29 d0                	sub    %edx,%eax
f011b5a0:	01 c8                	add    %ecx,%eax
f011b5a2:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011b5a7:	29 c2                	sub    %eax,%edx
f011b5a9:	89 d0                	mov    %edx,%eax
f011b5ab:	83 ec 0c             	sub    $0xc,%esp
f011b5ae:	50                   	push   %eax
f011b5af:	e8 28 be fe ff       	call   f01073dc <kmalloc>
f011b5b4:	83 c4 10             	add    $0x10,%esp
f011b5b7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011b5bd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011b5c3:	85 c0                	test   %eax,%eax
f011b5c5:	74 17                	je     f011b5de <test_kmalloc_bestfit2+0x12c4>
f011b5c7:	83 ec 04             	sub    $0x4,%esp
f011b5ca:	68 c4 a7 13 f0       	push   $0xf013a7c4
f011b5cf:	68 ce 02 00 00       	push   $0x2ce
f011b5d4:	68 7a a2 13 f0       	push   $0xf013a27a
f011b5d9:	e8 c8 4b fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011b5de:	83 ec 0c             	sub    $0xc,%esp
f011b5e1:	68 28 a8 13 f0       	push   $0xf013a828
f011b5e6:	e8 42 56 fe ff       	call   f0100c2d <cprintf>
f011b5eb:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011b5ee:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b5f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b5f6:	5b                   	pop    %ebx
f011b5f7:	5f                   	pop    %edi
f011b5f8:	5d                   	pop    %ebp
f011b5f9:	c3                   	ret    

f011b5fa <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011b5fa:	55                   	push   %ebp
f011b5fb:	89 e5                	mov    %esp,%ebp
f011b5fd:	57                   	push   %edi
f011b5fe:	53                   	push   %ebx
f011b5ff:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b605:	83 ec 0c             	sub    $0xc,%esp
f011b608:	68 bc a1 13 f0       	push   $0xf013a1bc
f011b60d:	e8 1b 56 fe ff       	call   f0100c2d <cprintf>
f011b612:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b615:	83 ec 0c             	sub    $0xc,%esp
f011b618:	68 ec a1 13 f0       	push   $0xf013a1ec
f011b61d:	e8 0b 56 fe ff       	call   f0100c2d <cprintf>
f011b622:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b625:	83 ec 0c             	sub    $0xc,%esp
f011b628:	68 bc a1 13 f0       	push   $0xf013a1bc
f011b62d:	e8 fb 55 fe ff       	call   f0100c2d <cprintf>
f011b632:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b635:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011b63b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b640:	b8 00 00 00 00       	mov    $0x0,%eax
f011b645:	89 d7                	mov    %edx,%edi
f011b647:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b649:	e8 4a 07 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b64e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b651:	e8 36 86 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b656:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011b659:	83 ec 0c             	sub    $0xc,%esp
f011b65c:	68 00 fc 0f 00       	push   $0xffc00
f011b661:	e8 76 bd fe ff       	call   f01073dc <kmalloc>
f011b666:	83 c4 10             	add    $0x10,%esp
f011b669:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b66f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b675:	89 c1                	mov    %eax,%ecx
f011b677:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b67e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b681:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b686:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b689:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b68c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b691:	f7 75 ec             	divl   -0x14(%ebp)
f011b694:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b697:	29 d0                	sub    %edx,%eax
f011b699:	89 c3                	mov    %eax,%ebx
f011b69b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011b6a2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b6a7:	0f b6 d0             	movzbl %al,%edx
f011b6aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b6ad:	01 d0                	add    %edx,%eax
f011b6af:	48                   	dec    %eax
f011b6b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011b6b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b6b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6bb:	f7 75 e4             	divl   -0x1c(%ebp)
f011b6be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b6c1:	29 d0                	sub    %edx,%eax
f011b6c3:	01 c3                	add    %eax,%ebx
f011b6c5:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b6cc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b6d1:	0f b6 c0             	movzbl %al,%eax
f011b6d4:	c1 e0 04             	shl    $0x4,%eax
f011b6d7:	89 c2                	mov    %eax,%edx
f011b6d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b6dc:	01 d0                	add    %edx,%eax
f011b6de:	48                   	dec    %eax
f011b6df:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b6e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b6e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6ea:	f7 75 dc             	divl   -0x24(%ebp)
f011b6ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b6f0:	29 d0                	sub    %edx,%eax
f011b6f2:	01 d8                	add    %ebx,%eax
f011b6f4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b6f9:	39 c1                	cmp    %eax,%ecx
f011b6fb:	74 17                	je     f011b714 <test_kmalloc_firstfit1+0x11a>
f011b6fd:	83 ec 04             	sub    $0x4,%esp
f011b700:	68 94 a6 13 f0       	push   $0xf013a694
f011b705:	68 e6 02 00 00       	push   $0x2e6
f011b70a:	68 7a a2 13 f0       	push   $0xf013a27a
f011b70f:	e8 92 4a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b714:	e8 73 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b719:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b71c:	74 17                	je     f011b735 <test_kmalloc_firstfit1+0x13b>
f011b71e:	83 ec 04             	sub    $0x4,%esp
f011b721:	68 94 a2 13 f0       	push   $0xf013a294
f011b726:	68 e7 02 00 00       	push   $0x2e7
f011b72b:	68 7a a2 13 f0       	push   $0xf013a27a
f011b730:	e8 71 4a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b735:	e8 5e 06 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b73a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b73d:	29 c2                	sub    %eax,%edx
f011b73f:	89 d0                	mov    %edx,%eax
f011b741:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b746:	74 17                	je     f011b75f <test_kmalloc_firstfit1+0x165>
f011b748:	83 ec 04             	sub    $0x4,%esp
f011b74b:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011b750:	68 e8 02 00 00       	push   $0x2e8
f011b755:	68 7a a2 13 f0       	push   $0xf013a27a
f011b75a:	e8 47 4a fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b75f:	e8 34 06 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b764:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b767:	e8 20 85 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b76c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011b76f:	83 ec 0c             	sub    $0xc,%esp
f011b772:	68 00 fc 0f 00       	push   $0xffc00
f011b777:	e8 60 bc fe ff       	call   f01073dc <kmalloc>
f011b77c:	83 c4 10             	add    $0x10,%esp
f011b77f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011b785:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b78b:	89 c1                	mov    %eax,%ecx
f011b78d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b794:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b797:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b79c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b79f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7a7:	f7 75 d4             	divl   -0x2c(%ebp)
f011b7aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b7ad:	29 d0                	sub    %edx,%eax
f011b7af:	89 c3                	mov    %eax,%ebx
f011b7b1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b7b8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b7bd:	0f b6 d0             	movzbl %al,%edx
f011b7c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b7c3:	01 d0                	add    %edx,%eax
f011b7c5:	48                   	dec    %eax
f011b7c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b7c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7d1:	f7 75 cc             	divl   -0x34(%ebp)
f011b7d4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7d7:	29 d0                	sub    %edx,%eax
f011b7d9:	01 c3                	add    %eax,%ebx
f011b7db:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b7e2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b7e7:	0f b6 c0             	movzbl %al,%eax
f011b7ea:	c1 e0 04             	shl    $0x4,%eax
f011b7ed:	89 c2                	mov    %eax,%edx
f011b7ef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b7f2:	01 d0                	add    %edx,%eax
f011b7f4:	48                   	dec    %eax
f011b7f5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b7f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b800:	f7 75 c4             	divl   -0x3c(%ebp)
f011b803:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b806:	29 d0                	sub    %edx,%eax
f011b808:	01 d8                	add    %ebx,%eax
f011b80a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011b80f:	39 c1                	cmp    %eax,%ecx
f011b811:	74 17                	je     f011b82a <test_kmalloc_firstfit1+0x230>
f011b813:	83 ec 04             	sub    $0x4,%esp
f011b816:	68 94 a6 13 f0       	push   $0xf013a694
f011b81b:	68 ee 02 00 00       	push   $0x2ee
f011b820:	68 7a a2 13 f0       	push   $0xf013a27a
f011b825:	e8 7c 49 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b82a:	e8 5d 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b82f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b832:	74 17                	je     f011b84b <test_kmalloc_firstfit1+0x251>
f011b834:	83 ec 04             	sub    $0x4,%esp
f011b837:	68 94 a2 13 f0       	push   $0xf013a294
f011b83c:	68 ef 02 00 00       	push   $0x2ef
f011b841:	68 7a a2 13 f0       	push   $0xf013a27a
f011b846:	e8 5b 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b84b:	e8 48 05 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b850:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b853:	29 c2                	sub    %eax,%edx
f011b855:	89 d0                	mov    %edx,%eax
f011b857:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b85c:	74 17                	je     f011b875 <test_kmalloc_firstfit1+0x27b>
f011b85e:	83 ec 04             	sub    $0x4,%esp
f011b861:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011b866:	68 f0 02 00 00       	push   $0x2f0
f011b86b:	68 7a a2 13 f0       	push   $0xf013a27a
f011b870:	e8 31 49 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b875:	e8 1e 05 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b87a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b87d:	e8 0a 84 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b882:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011b885:	83 ec 0c             	sub    $0xc,%esp
f011b888:	68 00 fc 0f 00       	push   $0xffc00
f011b88d:	e8 4a bb fe ff       	call   f01073dc <kmalloc>
f011b892:	83 c4 10             	add    $0x10,%esp
f011b895:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b89b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b8a1:	89 c1                	mov    %eax,%ecx
f011b8a3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b8aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b8ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b8b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8bd:	f7 75 bc             	divl   -0x44(%ebp)
f011b8c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b8c3:	29 d0                	sub    %edx,%eax
f011b8c5:	89 c3                	mov    %eax,%ebx
f011b8c7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b8ce:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b8d3:	0f b6 d0             	movzbl %al,%edx
f011b8d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b8d9:	01 d0                	add    %edx,%eax
f011b8db:	48                   	dec    %eax
f011b8dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b8df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8e7:	f7 75 b4             	divl   -0x4c(%ebp)
f011b8ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b8ed:	29 d0                	sub    %edx,%eax
f011b8ef:	01 c3                	add    %eax,%ebx
f011b8f1:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b8f8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b8fd:	0f b6 c0             	movzbl %al,%eax
f011b900:	c1 e0 04             	shl    $0x4,%eax
f011b903:	89 c2                	mov    %eax,%edx
f011b905:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b908:	01 d0                	add    %edx,%eax
f011b90a:	48                   	dec    %eax
f011b90b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b90e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b911:	ba 00 00 00 00       	mov    $0x0,%edx
f011b916:	f7 75 ac             	divl   -0x54(%ebp)
f011b919:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b91c:	29 d0                	sub    %edx,%eax
f011b91e:	01 d8                	add    %ebx,%eax
f011b920:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b925:	39 c1                	cmp    %eax,%ecx
f011b927:	74 17                	je     f011b940 <test_kmalloc_firstfit1+0x346>
f011b929:	83 ec 04             	sub    $0x4,%esp
f011b92c:	68 94 a6 13 f0       	push   $0xf013a694
f011b931:	68 f6 02 00 00       	push   $0x2f6
f011b936:	68 7a a2 13 f0       	push   $0xf013a27a
f011b93b:	e8 66 48 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b940:	e8 47 83 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b945:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b948:	74 17                	je     f011b961 <test_kmalloc_firstfit1+0x367>
f011b94a:	83 ec 04             	sub    $0x4,%esp
f011b94d:	68 94 a2 13 f0       	push   $0xf013a294
f011b952:	68 f7 02 00 00       	push   $0x2f7
f011b957:	68 7a a2 13 f0       	push   $0xf013a27a
f011b95c:	e8 45 48 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b961:	e8 32 04 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b966:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b969:	29 c2                	sub    %eax,%edx
f011b96b:	89 d0                	mov    %edx,%eax
f011b96d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b972:	74 17                	je     f011b98b <test_kmalloc_firstfit1+0x391>
f011b974:	83 ec 04             	sub    $0x4,%esp
f011b977:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011b97c:	68 f8 02 00 00       	push   $0x2f8
f011b981:	68 7a a2 13 f0       	push   $0xf013a27a
f011b986:	e8 1b 48 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b98b:	e8 08 04 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011b990:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b993:	e8 f4 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011b998:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011b99b:	83 ec 0c             	sub    $0xc,%esp
f011b99e:	68 00 fc 0f 00       	push   $0xffc00
f011b9a3:	e8 34 ba fe ff       	call   f01073dc <kmalloc>
f011b9a8:	83 c4 10             	add    $0x10,%esp
f011b9ab:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011b9b1:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b9b7:	89 c1                	mov    %eax,%ecx
f011b9b9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b9c0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b9c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9c8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b9cb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9d3:	f7 75 a4             	divl   -0x5c(%ebp)
f011b9d6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9d9:	29 d0                	sub    %edx,%eax
f011b9db:	89 c3                	mov    %eax,%ebx
f011b9dd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b9e4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011b9e9:	0f b6 d0             	movzbl %al,%edx
f011b9ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b9ef:	01 d0                	add    %edx,%eax
f011b9f1:	48                   	dec    %eax
f011b9f2:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b9f5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9fd:	f7 75 9c             	divl   -0x64(%ebp)
f011ba00:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba03:	29 d0                	sub    %edx,%eax
f011ba05:	01 c3                	add    %eax,%ebx
f011ba07:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ba0e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ba13:	0f b6 c0             	movzbl %al,%eax
f011ba16:	c1 e0 04             	shl    $0x4,%eax
f011ba19:	89 c2                	mov    %eax,%edx
f011ba1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba1e:	01 d0                	add    %edx,%eax
f011ba20:	48                   	dec    %eax
f011ba21:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ba24:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba27:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba2c:	f7 75 94             	divl   -0x6c(%ebp)
f011ba2f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ba32:	29 d0                	sub    %edx,%eax
f011ba34:	01 d8                	add    %ebx,%eax
f011ba36:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ba3b:	39 c1                	cmp    %eax,%ecx
f011ba3d:	74 17                	je     f011ba56 <test_kmalloc_firstfit1+0x45c>
f011ba3f:	83 ec 04             	sub    $0x4,%esp
f011ba42:	68 94 a6 13 f0       	push   $0xf013a694
f011ba47:	68 fe 02 00 00       	push   $0x2fe
f011ba4c:	68 7a a2 13 f0       	push   $0xf013a27a
f011ba51:	e8 50 47 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba56:	e8 31 82 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ba5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ba5e:	74 17                	je     f011ba77 <test_kmalloc_firstfit1+0x47d>
f011ba60:	83 ec 04             	sub    $0x4,%esp
f011ba63:	68 94 a2 13 f0       	push   $0xf013a294
f011ba68:	68 ff 02 00 00       	push   $0x2ff
f011ba6d:	68 7a a2 13 f0       	push   $0xf013a27a
f011ba72:	e8 2f 47 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ba77:	e8 1c 03 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011ba7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ba7f:	29 c2                	sub    %eax,%edx
f011ba81:	89 d0                	mov    %edx,%eax
f011ba83:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ba88:	74 17                	je     f011baa1 <test_kmalloc_firstfit1+0x4a7>
f011ba8a:	83 ec 04             	sub    $0x4,%esp
f011ba8d:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011ba92:	68 00 03 00 00       	push   $0x300
f011ba97:	68 7a a2 13 f0       	push   $0xf013a27a
f011ba9c:	e8 05 47 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011baa1:	e8 f2 02 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011baa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011baa9:	e8 de 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011baae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011bab1:	83 ec 0c             	sub    $0xc,%esp
f011bab4:	68 00 fc 1f 00       	push   $0x1ffc00
f011bab9:	e8 1e b9 fe ff       	call   f01073dc <kmalloc>
f011babe:	83 c4 10             	add    $0x10,%esp
f011bac1:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bac7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bacd:	89 c1                	mov    %eax,%ecx
f011bacf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bad6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bad9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bade:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bae1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bae4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bae9:	f7 75 8c             	divl   -0x74(%ebp)
f011baec:	8b 45 88             	mov    -0x78(%ebp),%eax
f011baef:	29 d0                	sub    %edx,%eax
f011baf1:	89 c3                	mov    %eax,%ebx
f011baf3:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bafa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011baff:	0f b6 d0             	movzbl %al,%edx
f011bb02:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bb05:	01 d0                	add    %edx,%eax
f011bb07:	48                   	dec    %eax
f011bb08:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bb0b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb13:	f7 75 84             	divl   -0x7c(%ebp)
f011bb16:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bb19:	29 d0                	sub    %edx,%eax
f011bb1b:	01 c3                	add    %eax,%ebx
f011bb1d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bb24:	10 00 00 
f011bb27:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bb2c:	0f b6 c0             	movzbl %al,%eax
f011bb2f:	c1 e0 04             	shl    $0x4,%eax
f011bb32:	89 c2                	mov    %eax,%edx
f011bb34:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bb3a:	01 d0                	add    %edx,%eax
f011bb3c:	48                   	dec    %eax
f011bb3d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bb43:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb49:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb4e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bb54:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bb5a:	29 d0                	sub    %edx,%eax
f011bb5c:	01 d8                	add    %ebx,%eax
f011bb5e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bb63:	39 c1                	cmp    %eax,%ecx
f011bb65:	74 17                	je     f011bb7e <test_kmalloc_firstfit1+0x584>
f011bb67:	83 ec 04             	sub    $0x4,%esp
f011bb6a:	68 94 a6 13 f0       	push   $0xf013a694
f011bb6f:	68 06 03 00 00       	push   $0x306
f011bb74:	68 7a a2 13 f0       	push   $0xf013a27a
f011bb79:	e8 28 46 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb7e:	e8 09 81 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bb83:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bb86:	74 17                	je     f011bb9f <test_kmalloc_firstfit1+0x5a5>
f011bb88:	83 ec 04             	sub    $0x4,%esp
f011bb8b:	68 94 a2 13 f0       	push   $0xf013a294
f011bb90:	68 07 03 00 00       	push   $0x307
f011bb95:	68 7a a2 13 f0       	push   $0xf013a27a
f011bb9a:	e8 07 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bb9f:	e8 f4 01 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011bba4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bba7:	29 c2                	sub    %eax,%edx
f011bba9:	89 d0                	mov    %edx,%eax
f011bbab:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bbb0:	74 17                	je     f011bbc9 <test_kmalloc_firstfit1+0x5cf>
f011bbb2:	83 ec 04             	sub    $0x4,%esp
f011bbb5:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011bbba:	68 08 03 00 00       	push   $0x308
f011bbbf:	68 7a a2 13 f0       	push   $0xf013a27a
f011bbc4:	e8 dd 45 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbc9:	e8 ca 01 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011bbce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bbd1:	e8 b6 80 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bbd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011bbd9:	83 ec 0c             	sub    $0xc,%esp
f011bbdc:	68 00 fc 1f 00       	push   $0x1ffc00
f011bbe1:	e8 f6 b7 fe ff       	call   f01073dc <kmalloc>
f011bbe6:	83 c4 10             	add    $0x10,%esp
f011bbe9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011bbef:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bbf5:	89 c1                	mov    %eax,%ecx
f011bbf7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bbfe:	10 00 00 
f011bc01:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bc07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc0c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bc12:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc18:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc1d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bc23:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bc29:	29 d0                	sub    %edx,%eax
f011bc2b:	89 c3                	mov    %eax,%ebx
f011bc2d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bc34:	10 00 00 
f011bc37:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bc3c:	0f b6 d0             	movzbl %al,%edx
f011bc3f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bc45:	01 d0                	add    %edx,%eax
f011bc47:	48                   	dec    %eax
f011bc48:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bc4e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bc54:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc59:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bc5f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bc65:	29 d0                	sub    %edx,%eax
f011bc67:	01 c3                	add    %eax,%ebx
f011bc69:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bc70:	10 00 00 
f011bc73:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bc78:	0f b6 c0             	movzbl %al,%eax
f011bc7b:	c1 e0 04             	shl    $0x4,%eax
f011bc7e:	89 c2                	mov    %eax,%edx
f011bc80:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bc86:	01 d0                	add    %edx,%eax
f011bc88:	48                   	dec    %eax
f011bc89:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bc8f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bc95:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc9a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bca0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bca6:	29 d0                	sub    %edx,%eax
f011bca8:	01 d8                	add    %ebx,%eax
f011bcaa:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011bcaf:	39 c1                	cmp    %eax,%ecx
f011bcb1:	74 17                	je     f011bcca <test_kmalloc_firstfit1+0x6d0>
f011bcb3:	83 ec 04             	sub    $0x4,%esp
f011bcb6:	68 94 a6 13 f0       	push   $0xf013a694
f011bcbb:	68 0e 03 00 00       	push   $0x30e
f011bcc0:	68 7a a2 13 f0       	push   $0xf013a27a
f011bcc5:	e8 dc 44 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcca:	e8 bd 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bccf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bcd2:	74 17                	je     f011bceb <test_kmalloc_firstfit1+0x6f1>
f011bcd4:	83 ec 04             	sub    $0x4,%esp
f011bcd7:	68 94 a2 13 f0       	push   $0xf013a294
f011bcdc:	68 0f 03 00 00       	push   $0x30f
f011bce1:	68 7a a2 13 f0       	push   $0xf013a27a
f011bce6:	e8 bb 44 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bceb:	e8 a8 00 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011bcf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bcf3:	29 c2                	sub    %eax,%edx
f011bcf5:	89 d0                	mov    %edx,%eax
f011bcf7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bcfc:	74 17                	je     f011bd15 <test_kmalloc_firstfit1+0x71b>
f011bcfe:	83 ec 04             	sub    $0x4,%esp
f011bd01:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011bd06:	68 10 03 00 00       	push   $0x310
f011bd0b:	68 7a a2 13 f0       	push   $0xf013a27a
f011bd10:	e8 91 44 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd15:	e8 7e 00 ff ff       	call   f010bd98 <sys_calculate_free_frames>
f011bd1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd1d:	e8 6a 7f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bd22:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011bd25:	83 ec 0c             	sub    $0xc,%esp
f011bd28:	68 00 fc 2f 00       	push   $0x2ffc00
f011bd2d:	e8 aa b6 fe ff       	call   f01073dc <kmalloc>
f011bd32:	83 c4 10             	add    $0x10,%esp
f011bd35:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011bd3b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011bd41:	89 c1                	mov    %eax,%ecx
f011bd43:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011bd4a:	10 00 00 
f011bd4d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011bd53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd58:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011bd5e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd64:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd69:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011bd6f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011bd75:	29 d0                	sub    %edx,%eax
f011bd77:	89 c3                	mov    %eax,%ebx
f011bd79:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011bd80:	10 00 00 
f011bd83:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bd88:	0f b6 d0             	movzbl %al,%edx
f011bd8b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011bd91:	01 d0                	add    %edx,%eax
f011bd93:	48                   	dec    %eax
f011bd94:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011bd9a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bda0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bda5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011bdab:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011bdb1:	29 d0                	sub    %edx,%eax
f011bdb3:	01 c3                	add    %eax,%ebx
f011bdb5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011bdbc:	10 00 00 
f011bdbf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bdc4:	0f b6 c0             	movzbl %al,%eax
f011bdc7:	c1 e0 04             	shl    $0x4,%eax
f011bdca:	89 c2                	mov    %eax,%edx
f011bdcc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011bdd2:	01 d0                	add    %edx,%eax
f011bdd4:	48                   	dec    %eax
f011bdd5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011bddb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bde1:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011bdec:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011bdf2:	29 d0                	sub    %edx,%eax
f011bdf4:	01 d8                	add    %ebx,%eax
f011bdf6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011bdfb:	39 c1                	cmp    %eax,%ecx
f011bdfd:	74 17                	je     f011be16 <test_kmalloc_firstfit1+0x81c>
f011bdff:	83 ec 04             	sub    $0x4,%esp
f011be02:	68 94 a6 13 f0       	push   $0xf013a694
f011be07:	68 16 03 00 00       	push   $0x316
f011be0c:	68 7a a2 13 f0       	push   $0xf013a27a
f011be11:	e8 90 43 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be16:	e8 71 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be1b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011be1e:	74 17                	je     f011be37 <test_kmalloc_firstfit1+0x83d>
f011be20:	83 ec 04             	sub    $0x4,%esp
f011be23:	68 94 a2 13 f0       	push   $0xf013a294
f011be28:	68 17 03 00 00       	push   $0x317
f011be2d:	68 7a a2 13 f0       	push   $0xf013a27a
f011be32:	e8 6f 43 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011be37:	e8 5c ff fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011be3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011be3f:	29 c2                	sub    %eax,%edx
f011be41:	89 d0                	mov    %edx,%eax
f011be43:	3d 00 03 00 00       	cmp    $0x300,%eax
f011be48:	74 17                	je     f011be61 <test_kmalloc_firstfit1+0x867>
f011be4a:	83 ec 04             	sub    $0x4,%esp
f011be4d:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011be52:	68 18 03 00 00       	push   $0x318
f011be57:	68 7a a2 13 f0       	push   $0xf013a27a
f011be5c:	e8 45 43 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011be61:	e8 32 ff fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011be66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be69:	e8 1e 7e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011be6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011be71:	83 ec 0c             	sub    $0xc,%esp
f011be74:	68 00 fc 2f 00       	push   $0x2ffc00
f011be79:	e8 5e b5 fe ff       	call   f01073dc <kmalloc>
f011be7e:	83 c4 10             	add    $0x10,%esp
f011be81:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011be87:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011be8d:	89 c1                	mov    %eax,%ecx
f011be8f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011be96:	10 00 00 
f011be99:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011be9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bea4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011beaa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011beb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011beb5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011bebb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011bec1:	29 d0                	sub    %edx,%eax
f011bec3:	89 c3                	mov    %eax,%ebx
f011bec5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011becc:	10 00 00 
f011becf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bed4:	0f b6 d0             	movzbl %al,%edx
f011bed7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011bedd:	01 d0                	add    %edx,%eax
f011bedf:	48                   	dec    %eax
f011bee0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011bee6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011beec:	ba 00 00 00 00       	mov    $0x0,%edx
f011bef1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011bef7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011befd:	29 d0                	sub    %edx,%eax
f011beff:	01 c3                	add    %eax,%ebx
f011bf01:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011bf08:	10 00 00 
f011bf0b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011bf10:	0f b6 c0             	movzbl %al,%eax
f011bf13:	c1 e0 04             	shl    $0x4,%eax
f011bf16:	89 c2                	mov    %eax,%edx
f011bf18:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011bf1e:	01 d0                	add    %edx,%eax
f011bf20:	48                   	dec    %eax
f011bf21:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011bf27:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bf2d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf32:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011bf38:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011bf3e:	29 d0                	sub    %edx,%eax
f011bf40:	01 d8                	add    %ebx,%eax
f011bf42:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011bf47:	39 c1                	cmp    %eax,%ecx
f011bf49:	74 17                	je     f011bf62 <test_kmalloc_firstfit1+0x968>
f011bf4b:	83 ec 04             	sub    $0x4,%esp
f011bf4e:	68 94 a6 13 f0       	push   $0xf013a694
f011bf53:	68 1e 03 00 00       	push   $0x31e
f011bf58:	68 7a a2 13 f0       	push   $0xf013a27a
f011bf5d:	e8 44 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf62:	e8 25 7d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bf67:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bf6a:	74 17                	je     f011bf83 <test_kmalloc_firstfit1+0x989>
f011bf6c:	83 ec 04             	sub    $0x4,%esp
f011bf6f:	68 94 a2 13 f0       	push   $0xf013a294
f011bf74:	68 1f 03 00 00       	push   $0x31f
f011bf79:	68 7a a2 13 f0       	push   $0xf013a27a
f011bf7e:	e8 23 42 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011bf83:	e8 10 fe fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011bf88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bf8b:	29 c2                	sub    %eax,%edx
f011bf8d:	89 d0                	mov    %edx,%eax
f011bf8f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bf94:	74 17                	je     f011bfad <test_kmalloc_firstfit1+0x9b3>
f011bf96:	83 ec 04             	sub    $0x4,%esp
f011bf99:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011bf9e:	68 20 03 00 00       	push   $0x320
f011bfa3:	68 7a a2 13 f0       	push   $0xf013a27a
f011bfa8:	e8 f9 41 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bfad:	e8 e6 fd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011bfb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfb5:	e8 d2 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bfba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011bfbd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bfc3:	83 ec 0c             	sub    $0xc,%esp
f011bfc6:	50                   	push   %eax
f011bfc7:	e8 2a b4 fe ff       	call   f01073f6 <kfree>
f011bfcc:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfcf:	e8 b8 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011bfd4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bfd7:	74 17                	je     f011bff0 <test_kmalloc_firstfit1+0x9f6>
f011bfd9:	83 ec 04             	sub    $0x4,%esp
f011bfdc:	68 94 a2 13 f0       	push   $0xf013a294
f011bfe1:	68 29 03 00 00       	push   $0x329
f011bfe6:	68 7a a2 13 f0       	push   $0xf013a27a
f011bfeb:	e8 b6 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011bff0:	e8 a3 fd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011bff5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011bff8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bffd:	74 17                	je     f011c016 <test_kmalloc_firstfit1+0xa1c>
f011bfff:	83 ec 04             	sub    $0x4,%esp
f011c002:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011c007:	68 2a 03 00 00       	push   $0x32a
f011c00c:	68 7a a2 13 f0       	push   $0xf013a27a
f011c011:	e8 90 41 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c016:	e8 7d fd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c01b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c01e:	e8 69 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c023:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c026:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c02c:	83 ec 0c             	sub    $0xc,%esp
f011c02f:	50                   	push   %eax
f011c030:	e8 c1 b3 fe ff       	call   f01073f6 <kfree>
f011c035:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c038:	e8 4f 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c03d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c040:	74 17                	je     f011c059 <test_kmalloc_firstfit1+0xa5f>
f011c042:	83 ec 04             	sub    $0x4,%esp
f011c045:	68 94 a2 13 f0       	push   $0xf013a294
f011c04a:	68 30 03 00 00       	push   $0x330
f011c04f:	68 7a a2 13 f0       	push   $0xf013a27a
f011c054:	e8 4d 41 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c059:	e8 3a fd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c05e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c061:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c066:	74 17                	je     f011c07f <test_kmalloc_firstfit1+0xa85>
f011c068:	83 ec 04             	sub    $0x4,%esp
f011c06b:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011c070:	68 31 03 00 00       	push   $0x331
f011c075:	68 7a a2 13 f0       	push   $0xf013a27a
f011c07a:	e8 27 41 fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c07f:	e8 14 fd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c084:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c087:	e8 00 7c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c08c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c08f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c095:	83 ec 0c             	sub    $0xc,%esp
f011c098:	50                   	push   %eax
f011c099:	e8 58 b3 fe ff       	call   f01073f6 <kfree>
f011c09e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0a1:	e8 e6 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c0a6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c0a9:	74 17                	je     f011c0c2 <test_kmalloc_firstfit1+0xac8>
f011c0ab:	83 ec 04             	sub    $0x4,%esp
f011c0ae:	68 94 a2 13 f0       	push   $0xf013a294
f011c0b3:	68 37 03 00 00       	push   $0x337
f011c0b8:	68 7a a2 13 f0       	push   $0xf013a27a
f011c0bd:	e8 e4 40 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c0c2:	e8 d1 fc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c0c7:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c0ca:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c0cf:	74 17                	je     f011c0e8 <test_kmalloc_firstfit1+0xaee>
f011c0d1:	83 ec 04             	sub    $0x4,%esp
f011c0d4:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011c0d9:	68 38 03 00 00       	push   $0x338
f011c0de:	68 7a a2 13 f0       	push   $0xf013a27a
f011c0e3:	e8 be 40 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c0e8:	e8 ab fc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c0ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0f0:	e8 97 7b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c0f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c0f8:	83 ec 0c             	sub    $0xc,%esp
f011c0fb:	68 00 fc 07 00       	push   $0x7fc00
f011c100:	e8 d7 b2 fe ff       	call   f01073dc <kmalloc>
f011c105:	83 c4 10             	add    $0x10,%esp
f011c108:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c10e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c114:	89 c1                	mov    %eax,%ecx
f011c116:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c11d:	10 00 00 
f011c120:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c126:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c12b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c131:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c137:	ba 00 00 00 00       	mov    $0x0,%edx
f011c13c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c142:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c148:	29 d0                	sub    %edx,%eax
f011c14a:	89 c3                	mov    %eax,%ebx
f011c14c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c153:	10 00 00 
f011c156:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c15b:	0f b6 d0             	movzbl %al,%edx
f011c15e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c164:	01 d0                	add    %edx,%eax
f011c166:	48                   	dec    %eax
f011c167:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c16d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c173:	ba 00 00 00 00       	mov    $0x0,%edx
f011c178:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c17e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c184:	29 d0                	sub    %edx,%eax
f011c186:	01 c3                	add    %eax,%ebx
f011c188:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c18f:	10 00 00 
f011c192:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c197:	0f b6 c0             	movzbl %al,%eax
f011c19a:	c1 e0 04             	shl    $0x4,%eax
f011c19d:	89 c2                	mov    %eax,%edx
f011c19f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c1a5:	01 d0                	add    %edx,%eax
f011c1a7:	48                   	dec    %eax
f011c1a8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c1ae:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c1b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1b9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c1bf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c1c5:	29 d0                	sub    %edx,%eax
f011c1c7:	01 d8                	add    %ebx,%eax
f011c1c9:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c1ce:	39 c1                	cmp    %eax,%ecx
f011c1d0:	74 17                	je     f011c1e9 <test_kmalloc_firstfit1+0xbef>
f011c1d2:	83 ec 04             	sub    $0x4,%esp
f011c1d5:	68 94 a6 13 f0       	push   $0xf013a694
f011c1da:	68 41 03 00 00       	push   $0x341
f011c1df:	68 7a a2 13 f0       	push   $0xf013a27a
f011c1e4:	e8 bd 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1e9:	e8 9e 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c1ee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c1f1:	74 17                	je     f011c20a <test_kmalloc_firstfit1+0xc10>
f011c1f3:	83 ec 04             	sub    $0x4,%esp
f011c1f6:	68 94 a2 13 f0       	push   $0xf013a294
f011c1fb:	68 42 03 00 00       	push   $0x342
f011c200:	68 7a a2 13 f0       	push   $0xf013a27a
f011c205:	e8 9c 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c20a:	e8 89 fb fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c20f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c212:	29 c2                	sub    %eax,%edx
f011c214:	89 d0                	mov    %edx,%eax
f011c216:	3d 80 00 00 00       	cmp    $0x80,%eax
f011c21b:	74 17                	je     f011c234 <test_kmalloc_firstfit1+0xc3a>
f011c21d:	83 ec 04             	sub    $0x4,%esp
f011c220:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c225:	68 43 03 00 00       	push   $0x343
f011c22a:	68 7a a2 13 f0       	push   $0xf013a27a
f011c22f:	e8 72 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011c234:	e8 5f fb fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c239:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c23c:	e8 4b 7a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c241:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011c244:	83 ec 0c             	sub    $0xc,%esp
f011c247:	68 00 fc 0f 00       	push   $0xffc00
f011c24c:	e8 8b b1 fe ff       	call   f01073dc <kmalloc>
f011c251:	83 c4 10             	add    $0x10,%esp
f011c254:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c25a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c260:	89 c1                	mov    %eax,%ecx
f011c262:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c269:	10 00 00 
f011c26c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c272:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c277:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c27d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c283:	ba 00 00 00 00       	mov    $0x0,%edx
f011c288:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c28e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c294:	29 d0                	sub    %edx,%eax
f011c296:	89 c3                	mov    %eax,%ebx
f011c298:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c29f:	10 00 00 
f011c2a2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c2a7:	0f b6 d0             	movzbl %al,%edx
f011c2aa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c2b0:	01 d0                	add    %edx,%eax
f011c2b2:	48                   	dec    %eax
f011c2b3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c2b9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c2bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2c4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c2ca:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c2d0:	29 d0                	sub    %edx,%eax
f011c2d2:	01 c3                	add    %eax,%ebx
f011c2d4:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c2db:	10 00 00 
f011c2de:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c2e3:	0f b6 c0             	movzbl %al,%eax
f011c2e6:	c1 e0 04             	shl    $0x4,%eax
f011c2e9:	89 c2                	mov    %eax,%edx
f011c2eb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c2f1:	01 d0                	add    %edx,%eax
f011c2f3:	48                   	dec    %eax
f011c2f4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c2fa:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c300:	ba 00 00 00 00       	mov    $0x0,%edx
f011c305:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c30b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c311:	29 d0                	sub    %edx,%eax
f011c313:	01 d8                	add    %ebx,%eax
f011c315:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c31a:	39 c1                	cmp    %eax,%ecx
f011c31c:	74 17                	je     f011c335 <test_kmalloc_firstfit1+0xd3b>
f011c31e:	83 ec 04             	sub    $0x4,%esp
f011c321:	68 94 a6 13 f0       	push   $0xf013a694
f011c326:	68 49 03 00 00       	push   $0x349
f011c32b:	68 7a a2 13 f0       	push   $0xf013a27a
f011c330:	e8 71 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c335:	e8 52 79 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c33a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c33d:	74 17                	je     f011c356 <test_kmalloc_firstfit1+0xd5c>
f011c33f:	83 ec 04             	sub    $0x4,%esp
f011c342:	68 94 a2 13 f0       	push   $0xf013a294
f011c347:	68 4a 03 00 00       	push   $0x34a
f011c34c:	68 7a a2 13 f0       	push   $0xf013a27a
f011c351:	e8 50 3e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c356:	e8 3d fa fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c35b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c35e:	29 c2                	sub    %eax,%edx
f011c360:	89 d0                	mov    %edx,%eax
f011c362:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c367:	74 17                	je     f011c380 <test_kmalloc_firstfit1+0xd86>
f011c369:	83 ec 04             	sub    $0x4,%esp
f011c36c:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c371:	68 4b 03 00 00       	push   $0x34b
f011c376:	68 7a a2 13 f0       	push   $0xf013a27a
f011c37b:	e8 26 3e fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c380:	e8 13 fa fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c385:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c388:	e8 ff 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c38d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011c390:	83 ec 0c             	sub    $0xc,%esp
f011c393:	68 00 fc 03 00       	push   $0x3fc00
f011c398:	e8 3f b0 fe ff       	call   f01073dc <kmalloc>
f011c39d:	83 c4 10             	add    $0x10,%esp
f011c3a0:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011c3a6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c3ac:	89 c1                	mov    %eax,%ecx
f011c3ae:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c3b5:	10 00 00 
f011c3b8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c3be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3c3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c3c9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c3cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3d4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c3da:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c3e0:	29 d0                	sub    %edx,%eax
f011c3e2:	89 c3                	mov    %eax,%ebx
f011c3e4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c3eb:	10 00 00 
f011c3ee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c3f3:	0f b6 d0             	movzbl %al,%edx
f011c3f6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c3fc:	01 d0                	add    %edx,%eax
f011c3fe:	48                   	dec    %eax
f011c3ff:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c405:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c40b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c410:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c416:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c41c:	29 d0                	sub    %edx,%eax
f011c41e:	01 c3                	add    %eax,%ebx
f011c420:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c427:	10 00 00 
f011c42a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c42f:	0f b6 c0             	movzbl %al,%eax
f011c432:	c1 e0 04             	shl    $0x4,%eax
f011c435:	89 c2                	mov    %eax,%edx
f011c437:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c43d:	01 d0                	add    %edx,%eax
f011c43f:	48                   	dec    %eax
f011c440:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c446:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c44c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c451:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c457:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c45d:	29 d0                	sub    %edx,%eax
f011c45f:	01 d8                	add    %ebx,%eax
f011c461:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011c466:	39 c1                	cmp    %eax,%ecx
f011c468:	74 17                	je     f011c481 <test_kmalloc_firstfit1+0xe87>
f011c46a:	83 ec 04             	sub    $0x4,%esp
f011c46d:	68 94 a6 13 f0       	push   $0xf013a694
f011c472:	68 52 03 00 00       	push   $0x352
f011c477:	68 7a a2 13 f0       	push   $0xf013a27a
f011c47c:	e8 25 3d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c481:	e8 06 78 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c486:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c489:	74 17                	je     f011c4a2 <test_kmalloc_firstfit1+0xea8>
f011c48b:	83 ec 04             	sub    $0x4,%esp
f011c48e:	68 94 a2 13 f0       	push   $0xf013a294
f011c493:	68 53 03 00 00       	push   $0x353
f011c498:	68 7a a2 13 f0       	push   $0xf013a27a
f011c49d:	e8 04 3d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011c4a2:	e8 f1 f8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c4a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c4aa:	29 c2                	sub    %eax,%edx
f011c4ac:	89 d0                	mov    %edx,%eax
f011c4ae:	83 f8 40             	cmp    $0x40,%eax
f011c4b1:	74 17                	je     f011c4ca <test_kmalloc_firstfit1+0xed0>
f011c4b3:	83 ec 04             	sub    $0x4,%esp
f011c4b6:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c4bb:	68 54 03 00 00       	push   $0x354
f011c4c0:	68 7a a2 13 f0       	push   $0xf013a27a
f011c4c5:	e8 dc 3c fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011c4ca:	e8 c9 f8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c4cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4d2:	e8 b5 77 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c4d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011c4da:	83 ec 0c             	sub    $0xc,%esp
f011c4dd:	68 00 00 20 00       	push   $0x200000
f011c4e2:	e8 f5 ae fe ff       	call   f01073dc <kmalloc>
f011c4e7:	83 c4 10             	add    $0x10,%esp
f011c4ea:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c4f0:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c4f6:	89 c1                	mov    %eax,%ecx
f011c4f8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c4ff:	10 00 00 
f011c502:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c508:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c50d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c513:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c519:	ba 00 00 00 00       	mov    $0x0,%edx
f011c51e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c524:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c52a:	29 d0                	sub    %edx,%eax
f011c52c:	89 c3                	mov    %eax,%ebx
f011c52e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c535:	10 00 00 
f011c538:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c53d:	0f b6 d0             	movzbl %al,%edx
f011c540:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c546:	01 d0                	add    %edx,%eax
f011c548:	48                   	dec    %eax
f011c549:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c54f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c555:	ba 00 00 00 00       	mov    $0x0,%edx
f011c55a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c560:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c566:	29 d0                	sub    %edx,%eax
f011c568:	01 c3                	add    %eax,%ebx
f011c56a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c571:	10 00 00 
f011c574:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c579:	0f b6 c0             	movzbl %al,%eax
f011c57c:	c1 e0 04             	shl    $0x4,%eax
f011c57f:	89 c2                	mov    %eax,%edx
f011c581:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c587:	01 d0                	add    %edx,%eax
f011c589:	48                   	dec    %eax
f011c58a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c590:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c596:	ba 00 00 00 00       	mov    $0x0,%edx
f011c59b:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c5a1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c5a7:	29 d0                	sub    %edx,%eax
f011c5a9:	01 d8                	add    %ebx,%eax
f011c5ab:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c5b0:	39 c1                	cmp    %eax,%ecx
f011c5b2:	74 17                	je     f011c5cb <test_kmalloc_firstfit1+0xfd1>
f011c5b4:	83 ec 04             	sub    $0x4,%esp
f011c5b7:	68 94 a6 13 f0       	push   $0xf013a694
f011c5bc:	68 5a 03 00 00       	push   $0x35a
f011c5c1:	68 7a a2 13 f0       	push   $0xf013a27a
f011c5c6:	e8 db 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c5cb:	e8 c8 f7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c5d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5d3:	29 c2                	sub    %eax,%edx
f011c5d5:	89 d0                	mov    %edx,%eax
f011c5d7:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c5dc:	74 17                	je     f011c5f5 <test_kmalloc_firstfit1+0xffb>
f011c5de:	83 ec 04             	sub    $0x4,%esp
f011c5e1:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c5e6:	68 5b 03 00 00       	push   $0x35b
f011c5eb:	68 7a a2 13 f0       	push   $0xf013a27a
f011c5f0:	e8 b1 3b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5f5:	e8 92 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c5fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c5fd:	74 17                	je     f011c616 <test_kmalloc_firstfit1+0x101c>
f011c5ff:	83 ec 04             	sub    $0x4,%esp
f011c602:	68 94 a2 13 f0       	push   $0xf013a294
f011c607:	68 5c 03 00 00       	push   $0x35c
f011c60c:	68 7a a2 13 f0       	push   $0xf013a27a
f011c611:	e8 90 3b fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011c616:	e8 7d f7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c61b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c61e:	e8 69 76 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c623:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011c626:	83 ec 0c             	sub    $0xc,%esp
f011c629:	68 00 fc 3f 00       	push   $0x3ffc00
f011c62e:	e8 a9 ad fe ff       	call   f01073dc <kmalloc>
f011c633:	83 c4 10             	add    $0x10,%esp
f011c636:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011c63c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011c642:	89 c1                	mov    %eax,%ecx
f011c644:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011c64b:	10 00 00 
f011c64e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c654:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c659:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011c65f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c665:	ba 00 00 00 00       	mov    $0x0,%edx
f011c66a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011c670:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c676:	29 d0                	sub    %edx,%eax
f011c678:	89 c3                	mov    %eax,%ebx
f011c67a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011c681:	10 00 00 
f011c684:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c689:	0f b6 d0             	movzbl %al,%edx
f011c68c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c692:	01 d0                	add    %edx,%eax
f011c694:	48                   	dec    %eax
f011c695:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011c69b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6a6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011c6ac:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c6b2:	29 d0                	sub    %edx,%eax
f011c6b4:	01 c3                	add    %eax,%ebx
f011c6b6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011c6bd:	10 00 00 
f011c6c0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c6c5:	0f b6 c0             	movzbl %al,%eax
f011c6c8:	c1 e0 04             	shl    $0x4,%eax
f011c6cb:	89 c2                	mov    %eax,%edx
f011c6cd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011c6d3:	01 d0                	add    %edx,%eax
f011c6d5:	48                   	dec    %eax
f011c6d6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011c6dc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c6e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6e7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011c6ed:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011c6f3:	29 d0                	sub    %edx,%eax
f011c6f5:	01 d8                	add    %ebx,%eax
f011c6f7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011c6fc:	39 c1                	cmp    %eax,%ecx
f011c6fe:	74 17                	je     f011c717 <test_kmalloc_firstfit1+0x111d>
f011c700:	83 ec 04             	sub    $0x4,%esp
f011c703:	68 94 a6 13 f0       	push   $0xf013a694
f011c708:	68 63 03 00 00       	push   $0x363
f011c70d:	68 7a a2 13 f0       	push   $0xf013a27a
f011c712:	e8 8f 3a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c717:	e8 70 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c71c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c71f:	74 17                	je     f011c738 <test_kmalloc_firstfit1+0x113e>
f011c721:	83 ec 04             	sub    $0x4,%esp
f011c724:	68 94 a2 13 f0       	push   $0xf013a294
f011c729:	68 64 03 00 00       	push   $0x364
f011c72e:	68 7a a2 13 f0       	push   $0xf013a27a
f011c733:	e8 6e 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011c738:	e8 5b f6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c73d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c740:	29 c2                	sub    %eax,%edx
f011c742:	89 d0                	mov    %edx,%eax
f011c744:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c749:	74 17                	je     f011c762 <test_kmalloc_firstfit1+0x1168>
f011c74b:	83 ec 04             	sub    $0x4,%esp
f011c74e:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c753:	68 65 03 00 00       	push   $0x365
f011c758:	68 7a a2 13 f0       	push   $0xf013a27a
f011c75d:	e8 44 3a fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011c762:	e8 31 f6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c767:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c76a:	e8 1d 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c76f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011c772:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c778:	83 ec 0c             	sub    $0xc,%esp
f011c77b:	50                   	push   %eax
f011c77c:	e8 75 ac fe ff       	call   f01073f6 <kfree>
f011c781:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c784:	e8 03 75 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c789:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c78c:	74 17                	je     f011c7a5 <test_kmalloc_firstfit1+0x11ab>
f011c78e:	83 ec 04             	sub    $0x4,%esp
f011c791:	68 94 a2 13 f0       	push   $0xf013a294
f011c796:	68 6e 03 00 00       	push   $0x36e
f011c79b:	68 7a a2 13 f0       	push   $0xf013a27a
f011c7a0:	e8 01 3a fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c7a5:	e8 ee f5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c7aa:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c7ad:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7b2:	74 17                	je     f011c7cb <test_kmalloc_firstfit1+0x11d1>
f011c7b4:	83 ec 04             	sub    $0x4,%esp
f011c7b7:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011c7bc:	68 6f 03 00 00       	push   $0x36f
f011c7c1:	68 7a a2 13 f0       	push   $0xf013a27a
f011c7c6:	e8 db 39 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011c7cb:	e8 c8 f5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c7d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7d3:	e8 b4 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011c7db:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c7e1:	83 ec 0c             	sub    $0xc,%esp
f011c7e4:	50                   	push   %eax
f011c7e5:	e8 0c ac fe ff       	call   f01073f6 <kfree>
f011c7ea:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7ed:	e8 9a 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c7f2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7f5:	74 17                	je     f011c80e <test_kmalloc_firstfit1+0x1214>
f011c7f7:	83 ec 04             	sub    $0x4,%esp
f011c7fa:	68 94 a2 13 f0       	push   $0xf013a294
f011c7ff:	68 75 03 00 00       	push   $0x375
f011c804:	68 7a a2 13 f0       	push   $0xf013a27a
f011c809:	e8 98 39 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c80e:	e8 85 f5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c813:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c816:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c81b:	74 17                	je     f011c834 <test_kmalloc_firstfit1+0x123a>
f011c81d:	83 ec 04             	sub    $0x4,%esp
f011c820:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011c825:	68 76 03 00 00       	push   $0x376
f011c82a:	68 7a a2 13 f0       	push   $0xf013a27a
f011c82f:	e8 72 39 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011c834:	e8 5f f5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c839:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c83c:	e8 4b 74 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c841:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011c844:	83 ec 0c             	sub    $0xc,%esp
f011c847:	68 00 00 10 00       	push   $0x100000
f011c84c:	e8 8b ab fe ff       	call   f01073dc <kmalloc>
f011c851:	83 c4 10             	add    $0x10,%esp
f011c854:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011c85a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011c860:	89 c1                	mov    %eax,%ecx
f011c862:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011c869:	10 00 00 
f011c86c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011c872:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c877:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011c87d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c883:	ba 00 00 00 00       	mov    $0x0,%edx
f011c888:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011c88e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011c894:	29 d0                	sub    %edx,%eax
f011c896:	89 c3                	mov    %eax,%ebx
f011c898:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011c89f:	10 00 00 
f011c8a2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c8a7:	0f b6 d0             	movzbl %al,%edx
f011c8aa:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011c8b0:	01 d0                	add    %edx,%eax
f011c8b2:	48                   	dec    %eax
f011c8b3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011c8b9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c8bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8c4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011c8ca:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011c8d0:	29 d0                	sub    %edx,%eax
f011c8d2:	01 c3                	add    %eax,%ebx
f011c8d4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011c8db:	10 00 00 
f011c8de:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011c8e3:	0f b6 c0             	movzbl %al,%eax
f011c8e6:	c1 e0 04             	shl    $0x4,%eax
f011c8e9:	89 c2                	mov    %eax,%edx
f011c8eb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011c8f1:	01 d0                	add    %edx,%eax
f011c8f3:	48                   	dec    %eax
f011c8f4:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011c8fa:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c900:	ba 00 00 00 00       	mov    $0x0,%edx
f011c905:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011c90b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011c911:	29 d0                	sub    %edx,%eax
f011c913:	01 d8                	add    %ebx,%eax
f011c915:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011c91a:	39 c1                	cmp    %eax,%ecx
f011c91c:	74 17                	je     f011c935 <test_kmalloc_firstfit1+0x133b>
f011c91e:	83 ec 04             	sub    $0x4,%esp
f011c921:	68 94 a6 13 f0       	push   $0xf013a694
f011c926:	68 80 03 00 00       	push   $0x380
f011c92b:	68 7a a2 13 f0       	push   $0xf013a27a
f011c930:	e8 71 38 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c935:	e8 52 73 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011c93a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c93d:	74 17                	je     f011c956 <test_kmalloc_firstfit1+0x135c>
f011c93f:	83 ec 04             	sub    $0x4,%esp
f011c942:	68 94 a2 13 f0       	push   $0xf013a294
f011c947:	68 81 03 00 00       	push   $0x381
f011c94c:	68 7a a2 13 f0       	push   $0xf013a27a
f011c951:	e8 50 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c956:	e8 3d f4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011c95b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c95e:	29 c2                	sub    %eax,%edx
f011c960:	89 d0                	mov    %edx,%eax
f011c962:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c967:	74 17                	je     f011c980 <test_kmalloc_firstfit1+0x1386>
f011c969:	83 ec 04             	sub    $0x4,%esp
f011c96c:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011c971:	68 82 03 00 00       	push   $0x382
f011c976:	68 7a a2 13 f0       	push   $0xf013a27a
f011c97b:	e8 26 38 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011c980:	83 ec 0c             	sub    $0xc,%esp
f011c983:	68 70 a8 13 f0       	push   $0xf013a870
f011c988:	e8 a0 42 fe ff       	call   f0100c2d <cprintf>
f011c98d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c990:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011c995:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c998:	5b                   	pop    %ebx
f011c999:	5f                   	pop    %edi
f011c99a:	5d                   	pop    %ebp
f011c99b:	c3                   	ret    

f011c99c <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011c99c:	55                   	push   %ebp
f011c99d:	89 e5                	mov    %esp,%ebp
f011c99f:	57                   	push   %edi
f011c9a0:	53                   	push   %ebx
f011c9a1:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011c9a7:	83 ec 0c             	sub    $0xc,%esp
f011c9aa:	68 bc a1 13 f0       	push   $0xf013a1bc
f011c9af:	e8 79 42 fe ff       	call   f0100c2d <cprintf>
f011c9b4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c9b7:	83 ec 0c             	sub    $0xc,%esp
f011c9ba:	68 ec a1 13 f0       	push   $0xf013a1ec
f011c9bf:	e8 69 42 fe ff       	call   f0100c2d <cprintf>
f011c9c4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c9c7:	83 ec 0c             	sub    $0xc,%esp
f011c9ca:	68 bc a1 13 f0       	push   $0xf013a1bc
f011c9cf:	e8 59 42 fe ff       	call   f0100c2d <cprintf>
f011c9d4:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c9d7:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011c9dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c9e2:	b8 00 00 00 00       	mov    $0x0,%eax
f011c9e7:	89 d7                	mov    %edx,%edi
f011c9e9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011c9eb:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011c9f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c9f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c9fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011c9fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ca00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca05:	f7 75 f4             	divl   -0xc(%ebp)
f011ca08:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ca0b:	29 d0                	sub    %edx,%eax
f011ca0d:	89 c1                	mov    %eax,%ecx
f011ca0f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ca16:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ca1b:	0f b6 d0             	movzbl %al,%edx
f011ca1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ca21:	01 d0                	add    %edx,%eax
f011ca23:	48                   	dec    %eax
f011ca24:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ca27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca2f:	f7 75 ec             	divl   -0x14(%ebp)
f011ca32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ca35:	29 d0                	sub    %edx,%eax
f011ca37:	01 c1                	add    %eax,%ecx
f011ca39:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ca40:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ca45:	0f b6 c0             	movzbl %al,%eax
f011ca48:	c1 e0 04             	shl    $0x4,%eax
f011ca4b:	89 c2                	mov    %eax,%edx
f011ca4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ca50:	01 d0                	add    %edx,%eax
f011ca52:	48                   	dec    %eax
f011ca53:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ca56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca59:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca5e:	f7 75 e4             	divl   -0x1c(%ebp)
f011ca61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ca64:	29 d0                	sub    %edx,%eax
f011ca66:	01 c8                	add    %ecx,%eax
f011ca68:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ca6d:	29 c2                	sub    %eax,%edx
f011ca6f:	89 d0                	mov    %edx,%eax
f011ca71:	83 ec 0c             	sub    $0xc,%esp
f011ca74:	50                   	push   %eax
f011ca75:	e8 62 a9 fe ff       	call   f01073dc <kmalloc>
f011ca7a:	83 c4 10             	add    $0x10,%esp
f011ca7d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ca83:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ca89:	85 c0                	test   %eax,%eax
f011ca8b:	74 17                	je     f011caa4 <test_kmalloc_firstfit2+0x108>
f011ca8d:	83 ec 04             	sub    $0x4,%esp
f011ca90:	68 bc a8 13 f0       	push   $0xf013a8bc
f011ca95:	68 97 03 00 00       	push   $0x397
f011ca9a:	68 7a a2 13 f0       	push   $0xf013a27a
f011ca9f:	e8 02 37 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011caa4:	e8 ef f2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011caa9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caac:	e8 db 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cab1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011cab4:	83 ec 0c             	sub    $0xc,%esp
f011cab7:	68 00 fc 1f 00       	push   $0x1ffc00
f011cabc:	e8 1b a9 fe ff       	call   f01073dc <kmalloc>
f011cac1:	83 c4 10             	add    $0x10,%esp
f011cac4:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011caca:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011cad0:	89 c1                	mov    %eax,%ecx
f011cad2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cad9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cadc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cae1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cae4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cae7:	ba 00 00 00 00       	mov    $0x0,%edx
f011caec:	f7 75 d4             	divl   -0x2c(%ebp)
f011caef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011caf2:	29 d0                	sub    %edx,%eax
f011caf4:	89 c3                	mov    %eax,%ebx
f011caf6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cafd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cb02:	0f b6 d0             	movzbl %al,%edx
f011cb05:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cb08:	01 d0                	add    %edx,%eax
f011cb0a:	48                   	dec    %eax
f011cb0b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cb0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb11:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb16:	f7 75 cc             	divl   -0x34(%ebp)
f011cb19:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cb1c:	29 d0                	sub    %edx,%eax
f011cb1e:	01 c3                	add    %eax,%ebx
f011cb20:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cb27:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cb2c:	0f b6 c0             	movzbl %al,%eax
f011cb2f:	c1 e0 04             	shl    $0x4,%eax
f011cb32:	89 c2                	mov    %eax,%edx
f011cb34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cb37:	01 d0                	add    %edx,%eax
f011cb39:	48                   	dec    %eax
f011cb3a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cb3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb40:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb45:	f7 75 c4             	divl   -0x3c(%ebp)
f011cb48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb4b:	29 d0                	sub    %edx,%eax
f011cb4d:	01 d8                	add    %ebx,%eax
f011cb4f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cb54:	39 c1                	cmp    %eax,%ecx
f011cb56:	74 17                	je     f011cb6f <test_kmalloc_firstfit2+0x1d3>
f011cb58:	83 ec 04             	sub    $0x4,%esp
f011cb5b:	68 94 a6 13 f0       	push   $0xf013a694
f011cb60:	68 a1 03 00 00       	push   $0x3a1
f011cb65:	68 7a a2 13 f0       	push   $0xf013a27a
f011cb6a:	e8 37 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb6f:	e8 18 71 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cb74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cb77:	74 17                	je     f011cb90 <test_kmalloc_firstfit2+0x1f4>
f011cb79:	83 ec 04             	sub    $0x4,%esp
f011cb7c:	68 94 a2 13 f0       	push   $0xf013a294
f011cb81:	68 a2 03 00 00       	push   $0x3a2
f011cb86:	68 7a a2 13 f0       	push   $0xf013a27a
f011cb8b:	e8 16 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb90:	e8 03 f2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cb95:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cb98:	29 c2                	sub    %eax,%edx
f011cb9a:	89 d0                	mov    %edx,%eax
f011cb9c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cba1:	74 17                	je     f011cbba <test_kmalloc_firstfit2+0x21e>
f011cba3:	83 ec 04             	sub    $0x4,%esp
f011cba6:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011cbab:	68 a3 03 00 00       	push   $0x3a3
f011cbb0:	68 7a a2 13 f0       	push   $0xf013a27a
f011cbb5:	e8 ec 35 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbba:	e8 d9 f1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cbbf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbc2:	e8 c5 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cbc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011cbca:	83 ec 0c             	sub    $0xc,%esp
f011cbcd:	68 00 fc 1f 00       	push   $0x1ffc00
f011cbd2:	e8 05 a8 fe ff       	call   f01073dc <kmalloc>
f011cbd7:	83 c4 10             	add    $0x10,%esp
f011cbda:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cbe0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011cbe6:	89 c1                	mov    %eax,%ecx
f011cbe8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cbef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cbf2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbf7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cbfa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cbfd:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc02:	f7 75 bc             	divl   -0x44(%ebp)
f011cc05:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cc08:	29 d0                	sub    %edx,%eax
f011cc0a:	89 c3                	mov    %eax,%ebx
f011cc0c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cc13:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cc18:	0f b6 d0             	movzbl %al,%edx
f011cc1b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cc1e:	01 d0                	add    %edx,%eax
f011cc20:	48                   	dec    %eax
f011cc21:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cc24:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc27:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc2c:	f7 75 b4             	divl   -0x4c(%ebp)
f011cc2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cc32:	29 d0                	sub    %edx,%eax
f011cc34:	01 c3                	add    %eax,%ebx
f011cc36:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011cc3d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cc42:	0f b6 c0             	movzbl %al,%eax
f011cc45:	c1 e0 04             	shl    $0x4,%eax
f011cc48:	89 c2                	mov    %eax,%edx
f011cc4a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cc4d:	01 d0                	add    %edx,%eax
f011cc4f:	48                   	dec    %eax
f011cc50:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cc53:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc56:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc5b:	f7 75 ac             	divl   -0x54(%ebp)
f011cc5e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cc61:	29 d0                	sub    %edx,%eax
f011cc63:	01 d8                	add    %ebx,%eax
f011cc65:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cc6a:	39 c1                	cmp    %eax,%ecx
f011cc6c:	74 17                	je     f011cc85 <test_kmalloc_firstfit2+0x2e9>
f011cc6e:	83 ec 04             	sub    $0x4,%esp
f011cc71:	68 94 a6 13 f0       	push   $0xf013a694
f011cc76:	68 a9 03 00 00       	push   $0x3a9
f011cc7b:	68 7a a2 13 f0       	push   $0xf013a27a
f011cc80:	e8 21 35 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc85:	e8 02 70 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cc8a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cc8d:	74 17                	je     f011cca6 <test_kmalloc_firstfit2+0x30a>
f011cc8f:	83 ec 04             	sub    $0x4,%esp
f011cc92:	68 94 a2 13 f0       	push   $0xf013a294
f011cc97:	68 aa 03 00 00       	push   $0x3aa
f011cc9c:	68 7a a2 13 f0       	push   $0xf013a27a
f011cca1:	e8 00 35 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cca6:	e8 ed f0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ccab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ccae:	29 c2                	sub    %eax,%edx
f011ccb0:	89 d0                	mov    %edx,%eax
f011ccb2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ccb7:	74 17                	je     f011ccd0 <test_kmalloc_firstfit2+0x334>
f011ccb9:	83 ec 04             	sub    $0x4,%esp
f011ccbc:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011ccc1:	68 ab 03 00 00       	push   $0x3ab
f011ccc6:	68 7a a2 13 f0       	push   $0xf013a27a
f011cccb:	e8 d6 34 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ccd0:	e8 c3 f0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ccd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccd8:	e8 af 6f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ccdd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011cce0:	83 ec 0c             	sub    $0xc,%esp
f011cce3:	68 00 08 00 00       	push   $0x800
f011cce8:	e8 ef a6 fe ff       	call   f01073dc <kmalloc>
f011cced:	83 c4 10             	add    $0x10,%esp
f011ccf0:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011ccf6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ccfc:	89 c1                	mov    %eax,%ecx
f011ccfe:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cd05:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cd08:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd0d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cd10:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd13:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd18:	f7 75 a4             	divl   -0x5c(%ebp)
f011cd1b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cd1e:	29 d0                	sub    %edx,%eax
f011cd20:	89 c3                	mov    %eax,%ebx
f011cd22:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cd29:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cd2e:	0f b6 d0             	movzbl %al,%edx
f011cd31:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cd34:	01 d0                	add    %edx,%eax
f011cd36:	48                   	dec    %eax
f011cd37:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cd3a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd42:	f7 75 9c             	divl   -0x64(%ebp)
f011cd45:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cd48:	29 d0                	sub    %edx,%eax
f011cd4a:	01 c3                	add    %eax,%ebx
f011cd4c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cd53:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cd58:	0f b6 c0             	movzbl %al,%eax
f011cd5b:	c1 e0 04             	shl    $0x4,%eax
f011cd5e:	89 c2                	mov    %eax,%edx
f011cd60:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cd63:	01 d0                	add    %edx,%eax
f011cd65:	48                   	dec    %eax
f011cd66:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cd69:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd71:	f7 75 94             	divl   -0x6c(%ebp)
f011cd74:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cd77:	29 d0                	sub    %edx,%eax
f011cd79:	01 d8                	add    %ebx,%eax
f011cd7b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cd80:	39 c1                	cmp    %eax,%ecx
f011cd82:	73 17                	jae    f011cd9b <test_kmalloc_firstfit2+0x3ff>
f011cd84:	83 ec 04             	sub    $0x4,%esp
f011cd87:	68 94 a6 13 f0       	push   $0xf013a694
f011cd8c:	68 b1 03 00 00       	push   $0x3b1
f011cd91:	68 7a a2 13 f0       	push   $0xf013a27a
f011cd96:	e8 0b 34 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd9b:	e8 ec 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cda0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cda3:	74 17                	je     f011cdbc <test_kmalloc_firstfit2+0x420>
f011cda5:	83 ec 04             	sub    $0x4,%esp
f011cda8:	68 94 a2 13 f0       	push   $0xf013a294
f011cdad:	68 b2 03 00 00       	push   $0x3b2
f011cdb2:	68 7a a2 13 f0       	push   $0xf013a27a
f011cdb7:	e8 ea 33 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011cdbc:	e8 d7 ef fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cdc1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cdc4:	29 c2                	sub    %eax,%edx
f011cdc6:	89 d0                	mov    %edx,%eax
f011cdc8:	83 f8 01             	cmp    $0x1,%eax
f011cdcb:	74 17                	je     f011cde4 <test_kmalloc_firstfit2+0x448>
f011cdcd:	83 ec 04             	sub    $0x4,%esp
f011cdd0:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011cdd5:	68 b3 03 00 00       	push   $0x3b3
f011cdda:	68 7a a2 13 f0       	push   $0xf013a27a
f011cddf:	e8 c2 33 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011cde4:	e8 af ef fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cde9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdec:	e8 9b 6e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cdf1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011cdf4:	83 ec 0c             	sub    $0xc,%esp
f011cdf7:	68 00 08 00 00       	push   $0x800
f011cdfc:	e8 db a5 fe ff       	call   f01073dc <kmalloc>
f011ce01:	83 c4 10             	add    $0x10,%esp
f011ce04:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ce0a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ce10:	89 c1                	mov    %eax,%ecx
f011ce12:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ce19:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ce1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce21:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ce24:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce27:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce2c:	f7 75 8c             	divl   -0x74(%ebp)
f011ce2f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ce32:	29 d0                	sub    %edx,%eax
f011ce34:	89 c3                	mov    %eax,%ebx
f011ce36:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ce3d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ce42:	0f b6 d0             	movzbl %al,%edx
f011ce45:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ce48:	01 d0                	add    %edx,%eax
f011ce4a:	48                   	dec    %eax
f011ce4b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ce4e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce51:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce56:	f7 75 84             	divl   -0x7c(%ebp)
f011ce59:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ce5c:	29 d0                	sub    %edx,%eax
f011ce5e:	01 c3                	add    %eax,%ebx
f011ce60:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ce67:	10 00 00 
f011ce6a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ce6f:	0f b6 c0             	movzbl %al,%eax
f011ce72:	c1 e0 04             	shl    $0x4,%eax
f011ce75:	89 c2                	mov    %eax,%edx
f011ce77:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ce7d:	01 d0                	add    %edx,%eax
f011ce7f:	48                   	dec    %eax
f011ce80:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ce86:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce91:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ce97:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce9d:	29 d0                	sub    %edx,%eax
f011ce9f:	01 d8                	add    %ebx,%eax
f011cea1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011cea6:	39 c1                	cmp    %eax,%ecx
f011cea8:	74 17                	je     f011cec1 <test_kmalloc_firstfit2+0x525>
f011ceaa:	83 ec 04             	sub    $0x4,%esp
f011cead:	68 94 a6 13 f0       	push   $0xf013a694
f011ceb2:	68 b9 03 00 00       	push   $0x3b9
f011ceb7:	68 7a a2 13 f0       	push   $0xf013a27a
f011cebc:	e8 e5 32 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cec1:	e8 c6 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cec6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cec9:	74 17                	je     f011cee2 <test_kmalloc_firstfit2+0x546>
f011cecb:	83 ec 04             	sub    $0x4,%esp
f011cece:	68 94 a2 13 f0       	push   $0xf013a294
f011ced3:	68 ba 03 00 00       	push   $0x3ba
f011ced8:	68 7a a2 13 f0       	push   $0xf013a27a
f011cedd:	e8 c4 32 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011cee2:	e8 b1 ee fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cee7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ceea:	29 c2                	sub    %eax,%edx
f011ceec:	89 d0                	mov    %edx,%eax
f011ceee:	83 f8 01             	cmp    $0x1,%eax
f011cef1:	74 17                	je     f011cf0a <test_kmalloc_firstfit2+0x56e>
f011cef3:	83 ec 04             	sub    $0x4,%esp
f011cef6:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011cefb:	68 bb 03 00 00       	push   $0x3bb
f011cf00:	68 7a a2 13 f0       	push   $0xf013a27a
f011cf05:	e8 9c 32 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf0a:	e8 89 ee fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cf0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf12:	e8 75 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf17:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011cf1a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cf20:	83 ec 0c             	sub    $0xc,%esp
f011cf23:	50                   	push   %eax
f011cf24:	e8 cd a4 fe ff       	call   f01073f6 <kfree>
f011cf29:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf2c:	e8 5b 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf31:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cf34:	74 17                	je     f011cf4d <test_kmalloc_firstfit2+0x5b1>
f011cf36:	83 ec 04             	sub    $0x4,%esp
f011cf39:	68 94 a2 13 f0       	push   $0xf013a294
f011cf3e:	68 c1 03 00 00       	push   $0x3c1
f011cf43:	68 7a a2 13 f0       	push   $0xf013a27a
f011cf48:	e8 59 32 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011cf4d:	e8 46 ee fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cf52:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011cf55:	83 f8 01             	cmp    $0x1,%eax
f011cf58:	74 17                	je     f011cf71 <test_kmalloc_firstfit2+0x5d5>
f011cf5a:	83 ec 04             	sub    $0x4,%esp
f011cf5d:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011cf62:	68 c2 03 00 00       	push   $0x3c2
f011cf67:	68 7a a2 13 f0       	push   $0xf013a27a
f011cf6c:	e8 35 32 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011cf71:	e8 22 ee fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011cf76:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf79:	e8 0e 6d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011cf7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011cf81:	83 ec 0c             	sub    $0xc,%esp
f011cf84:	68 00 1c 00 00       	push   $0x1c00
f011cf89:	e8 4e a4 fe ff       	call   f01073dc <kmalloc>
f011cf8e:	83 c4 10             	add    $0x10,%esp
f011cf91:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011cf97:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cf9d:	89 c1                	mov    %eax,%ecx
f011cf9f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011cfa6:	10 00 00 
f011cfa9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011cfaf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfb4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011cfba:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cfc0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfc5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011cfcb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011cfd1:	29 d0                	sub    %edx,%eax
f011cfd3:	89 c3                	mov    %eax,%ebx
f011cfd5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011cfdc:	10 00 00 
f011cfdf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011cfe4:	0f b6 d0             	movzbl %al,%edx
f011cfe7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011cfed:	01 d0                	add    %edx,%eax
f011cfef:	48                   	dec    %eax
f011cff0:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011cff6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011cffc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d001:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d007:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d00d:	29 d0                	sub    %edx,%eax
f011d00f:	01 c3                	add    %eax,%ebx
f011d011:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d018:	10 00 00 
f011d01b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d020:	0f b6 c0             	movzbl %al,%eax
f011d023:	c1 e0 04             	shl    $0x4,%eax
f011d026:	89 c2                	mov    %eax,%edx
f011d028:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d02e:	01 d0                	add    %edx,%eax
f011d030:	48                   	dec    %eax
f011d031:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d037:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d03d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d042:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d048:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d04e:	29 d0                	sub    %edx,%eax
f011d050:	01 d8                	add    %ebx,%eax
f011d052:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d057:	39 c1                	cmp    %eax,%ecx
f011d059:	74 17                	je     f011d072 <test_kmalloc_firstfit2+0x6d6>
f011d05b:	83 ec 04             	sub    $0x4,%esp
f011d05e:	68 94 a6 13 f0       	push   $0xf013a694
f011d063:	68 c8 03 00 00       	push   $0x3c8
f011d068:	68 7a a2 13 f0       	push   $0xf013a27a
f011d06d:	e8 34 31 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d072:	e8 15 6c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d077:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d07a:	74 17                	je     f011d093 <test_kmalloc_firstfit2+0x6f7>
f011d07c:	83 ec 04             	sub    $0x4,%esp
f011d07f:	68 94 a2 13 f0       	push   $0xf013a294
f011d084:	68 c9 03 00 00       	push   $0x3c9
f011d089:	68 7a a2 13 f0       	push   $0xf013a27a
f011d08e:	e8 13 31 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d093:	e8 00 ed fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d098:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d09b:	29 c2                	sub    %eax,%edx
f011d09d:	89 d0                	mov    %edx,%eax
f011d09f:	83 f8 02             	cmp    $0x2,%eax
f011d0a2:	74 17                	je     f011d0bb <test_kmalloc_firstfit2+0x71f>
f011d0a4:	83 ec 04             	sub    $0x4,%esp
f011d0a7:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011d0ac:	68 ca 03 00 00       	push   $0x3ca
f011d0b1:	68 7a a2 13 f0       	push   $0xf013a27a
f011d0b6:	e8 eb 30 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d0bb:	e8 d8 ec fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d0c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0c3:	e8 c4 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d0c8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d0cb:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d0d1:	83 ec 0c             	sub    $0xc,%esp
f011d0d4:	50                   	push   %eax
f011d0d5:	e8 1c a3 fe ff       	call   f01073f6 <kfree>
f011d0da:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0dd:	e8 aa 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d0e2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d0e5:	74 17                	je     f011d0fe <test_kmalloc_firstfit2+0x762>
f011d0e7:	83 ec 04             	sub    $0x4,%esp
f011d0ea:	68 94 a2 13 f0       	push   $0xf013a294
f011d0ef:	68 d0 03 00 00       	push   $0x3d0
f011d0f4:	68 7a a2 13 f0       	push   $0xf013a27a
f011d0f9:	e8 a8 30 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d0fe:	e8 95 ec fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d103:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d106:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d10b:	74 17                	je     f011d124 <test_kmalloc_firstfit2+0x788>
f011d10d:	83 ec 04             	sub    $0x4,%esp
f011d110:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011d115:	68 d1 03 00 00       	push   $0x3d1
f011d11a:	68 7a a2 13 f0       	push   $0xf013a27a
f011d11f:	e8 82 30 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d124:	e8 6f ec fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d129:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d12c:	e8 5b 6b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d131:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d134:	83 ec 0c             	sub    $0xc,%esp
f011d137:	68 00 fc 2f 00       	push   $0x2ffc00
f011d13c:	e8 9b a2 fe ff       	call   f01073dc <kmalloc>
f011d141:	83 c4 10             	add    $0x10,%esp
f011d144:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d14a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d150:	89 c1                	mov    %eax,%ecx
f011d152:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d159:	10 00 00 
f011d15c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d162:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d167:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d16d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d173:	ba 00 00 00 00       	mov    $0x0,%edx
f011d178:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d17e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d184:	29 d0                	sub    %edx,%eax
f011d186:	89 c3                	mov    %eax,%ebx
f011d188:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d18f:	10 00 00 
f011d192:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d197:	0f b6 d0             	movzbl %al,%edx
f011d19a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d1a0:	01 d0                	add    %edx,%eax
f011d1a2:	48                   	dec    %eax
f011d1a3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d1a9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1af:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1b4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d1ba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1c0:	29 d0                	sub    %edx,%eax
f011d1c2:	01 c3                	add    %eax,%ebx
f011d1c4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d1cb:	10 00 00 
f011d1ce:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d1d3:	0f b6 c0             	movzbl %al,%eax
f011d1d6:	c1 e0 04             	shl    $0x4,%eax
f011d1d9:	89 c2                	mov    %eax,%edx
f011d1db:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d1e1:	01 d0                	add    %edx,%eax
f011d1e3:	48                   	dec    %eax
f011d1e4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d1ea:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d1f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1f5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d1fb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d201:	29 d0                	sub    %edx,%eax
f011d203:	01 d8                	add    %ebx,%eax
f011d205:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d20a:	39 c1                	cmp    %eax,%ecx
f011d20c:	74 17                	je     f011d225 <test_kmalloc_firstfit2+0x889>
f011d20e:	83 ec 04             	sub    $0x4,%esp
f011d211:	68 94 a6 13 f0       	push   $0xf013a694
f011d216:	68 d7 03 00 00       	push   $0x3d7
f011d21b:	68 7a a2 13 f0       	push   $0xf013a27a
f011d220:	e8 81 2f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d225:	e8 62 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d22a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d22d:	74 17                	je     f011d246 <test_kmalloc_firstfit2+0x8aa>
f011d22f:	83 ec 04             	sub    $0x4,%esp
f011d232:	68 94 a2 13 f0       	push   $0xf013a294
f011d237:	68 d8 03 00 00       	push   $0x3d8
f011d23c:	68 7a a2 13 f0       	push   $0xf013a27a
f011d241:	e8 60 2f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d246:	e8 4d eb fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d24b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d24e:	29 c2                	sub    %eax,%edx
f011d250:	89 d0                	mov    %edx,%eax
f011d252:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d257:	74 17                	je     f011d270 <test_kmalloc_firstfit2+0x8d4>
f011d259:	83 ec 04             	sub    $0x4,%esp
f011d25c:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011d261:	68 d9 03 00 00       	push   $0x3d9
f011d266:	68 7a a2 13 f0       	push   $0xf013a27a
f011d26b:	e8 36 2f fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011d270:	e8 23 eb fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d275:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d278:	e8 0f 6a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d27d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011d280:	83 ec 0c             	sub    $0xc,%esp
f011d283:	68 00 18 20 00       	push   $0x201800
f011d288:	e8 4f a1 fe ff       	call   f01073dc <kmalloc>
f011d28d:	83 c4 10             	add    $0x10,%esp
f011d290:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d296:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d29c:	89 c1                	mov    %eax,%ecx
f011d29e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d2a5:	10 00 00 
f011d2a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d2ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2b3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d2b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2bf:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2c4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d2ca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2d0:	29 d0                	sub    %edx,%eax
f011d2d2:	89 c3                	mov    %eax,%ebx
f011d2d4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d2db:	10 00 00 
f011d2de:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d2e3:	0f b6 d0             	movzbl %al,%edx
f011d2e6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d2ec:	01 d0                	add    %edx,%eax
f011d2ee:	48                   	dec    %eax
f011d2ef:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d2f5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d2fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d300:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d306:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d30c:	29 d0                	sub    %edx,%eax
f011d30e:	01 c3                	add    %eax,%ebx
f011d310:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d317:	10 00 00 
f011d31a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d31f:	0f b6 c0             	movzbl %al,%eax
f011d322:	c1 e0 04             	shl    $0x4,%eax
f011d325:	89 c2                	mov    %eax,%edx
f011d327:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d32d:	01 d0                	add    %edx,%eax
f011d32f:	48                   	dec    %eax
f011d330:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d336:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d33c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d341:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d347:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d34d:	29 d0                	sub    %edx,%eax
f011d34f:	01 d8                	add    %ebx,%eax
f011d351:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011d356:	39 c1                	cmp    %eax,%ecx
f011d358:	74 17                	je     f011d371 <test_kmalloc_firstfit2+0x9d5>
f011d35a:	83 ec 04             	sub    $0x4,%esp
f011d35d:	68 94 a6 13 f0       	push   $0xf013a694
f011d362:	68 df 03 00 00       	push   $0x3df
f011d367:	68 7a a2 13 f0       	push   $0xf013a27a
f011d36c:	e8 35 2e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d371:	e8 16 69 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d376:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d379:	74 17                	je     f011d392 <test_kmalloc_firstfit2+0x9f6>
f011d37b:	83 ec 04             	sub    $0x4,%esp
f011d37e:	68 94 a2 13 f0       	push   $0xf013a294
f011d383:	68 e0 03 00 00       	push   $0x3e0
f011d388:	68 7a a2 13 f0       	push   $0xf013a27a
f011d38d:	e8 14 2e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011d392:	e8 01 ea fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d397:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d39a:	29 c2                	sub    %eax,%edx
f011d39c:	89 d0                	mov    %edx,%eax
f011d39e:	3d 02 02 00 00       	cmp    $0x202,%eax
f011d3a3:	74 17                	je     f011d3bc <test_kmalloc_firstfit2+0xa20>
f011d3a5:	83 ec 04             	sub    $0x4,%esp
f011d3a8:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011d3ad:	68 e1 03 00 00       	push   $0x3e1
f011d3b2:	68 7a a2 13 f0       	push   $0xf013a27a
f011d3b7:	e8 ea 2d fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d3bc:	e8 d7 e9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d3c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3c4:	e8 c3 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011d3cc:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d3d2:	83 ec 0c             	sub    $0xc,%esp
f011d3d5:	50                   	push   %eax
f011d3d6:	e8 1b a0 fe ff       	call   f01073f6 <kfree>
f011d3db:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d3de:	e8 a9 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d3e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d3e6:	74 17                	je     f011d3ff <test_kmalloc_firstfit2+0xa63>
f011d3e8:	83 ec 04             	sub    $0x4,%esp
f011d3eb:	68 94 a2 13 f0       	push   $0xf013a294
f011d3f0:	68 e7 03 00 00       	push   $0x3e7
f011d3f5:	68 7a a2 13 f0       	push   $0xf013a27a
f011d3fa:	e8 a7 2d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d3ff:	e8 94 e9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d404:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d407:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d40c:	74 17                	je     f011d425 <test_kmalloc_firstfit2+0xa89>
f011d40e:	83 ec 04             	sub    $0x4,%esp
f011d411:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011d416:	68 e8 03 00 00       	push   $0x3e8
f011d41b:	68 7a a2 13 f0       	push   $0xf013a27a
f011d420:	e8 81 2d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011d425:	e8 6e e9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d42a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d42d:	e8 5a 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d432:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011d435:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d43b:	83 ec 0c             	sub    $0xc,%esp
f011d43e:	50                   	push   %eax
f011d43f:	e8 b2 9f fe ff       	call   f01073f6 <kfree>
f011d444:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d447:	e8 4c e9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d44c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d44f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d454:	74 17                	je     f011d46d <test_kmalloc_firstfit2+0xad1>
f011d456:	83 ec 04             	sub    $0x4,%esp
f011d459:	68 d7 a6 13 f0       	push   $0xf013a6d7
f011d45e:	68 ee 03 00 00       	push   $0x3ee
f011d463:	68 7a a2 13 f0       	push   $0xf013a27a
f011d468:	e8 39 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d46d:	e8 1a 68 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d472:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d475:	74 17                	je     f011d48e <test_kmalloc_firstfit2+0xaf2>
f011d477:	83 ec 04             	sub    $0x4,%esp
f011d47a:	68 94 a2 13 f0       	push   $0xf013a294
f011d47f:	68 ef 03 00 00       	push   $0x3ef
f011d484:	68 7a a2 13 f0       	push   $0xf013a27a
f011d489:	e8 18 2d fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011d48e:	e8 05 e9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d493:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d496:	e8 f1 67 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d49b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011d49e:	83 ec 0c             	sub    $0xc,%esp
f011d4a1:	68 00 fc 4f 00       	push   $0x4ffc00
f011d4a6:	e8 31 9f fe ff       	call   f01073dc <kmalloc>
f011d4ab:	83 c4 10             	add    $0x10,%esp
f011d4ae:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011d4b4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d4ba:	89 c1                	mov    %eax,%ecx
f011d4bc:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d4c3:	10 00 00 
f011d4c6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d4cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4d1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d4d7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d4dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4e2:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d4e8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d4ee:	29 d0                	sub    %edx,%eax
f011d4f0:	89 c3                	mov    %eax,%ebx
f011d4f2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d4f9:	10 00 00 
f011d4fc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d501:	0f b6 d0             	movzbl %al,%edx
f011d504:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d50a:	01 d0                	add    %edx,%eax
f011d50c:	48                   	dec    %eax
f011d50d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d513:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d519:	ba 00 00 00 00       	mov    $0x0,%edx
f011d51e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d524:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d52a:	29 d0                	sub    %edx,%eax
f011d52c:	01 c3                	add    %eax,%ebx
f011d52e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d535:	10 00 00 
f011d538:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d53d:	0f b6 c0             	movzbl %al,%eax
f011d540:	c1 e0 04             	shl    $0x4,%eax
f011d543:	89 c2                	mov    %eax,%edx
f011d545:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d54b:	01 d0                	add    %edx,%eax
f011d54d:	48                   	dec    %eax
f011d54e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d554:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d55a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d55f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d565:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d56b:	29 d0                	sub    %edx,%eax
f011d56d:	01 d8                	add    %ebx,%eax
f011d56f:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011d574:	39 c1                	cmp    %eax,%ecx
f011d576:	74 17                	je     f011d58f <test_kmalloc_firstfit2+0xbf3>
f011d578:	83 ec 04             	sub    $0x4,%esp
f011d57b:	68 94 a6 13 f0       	push   $0xf013a694
f011d580:	68 f5 03 00 00       	push   $0x3f5
f011d585:	68 7a a2 13 f0       	push   $0xf013a27a
f011d58a:	e8 17 2c fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d58f:	e8 f8 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d594:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d597:	74 17                	je     f011d5b0 <test_kmalloc_firstfit2+0xc14>
f011d599:	83 ec 04             	sub    $0x4,%esp
f011d59c:	68 94 a2 13 f0       	push   $0xf013a294
f011d5a1:	68 f6 03 00 00       	push   $0x3f6
f011d5a6:	68 7a a2 13 f0       	push   $0xf013a27a
f011d5ab:	e8 f6 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d5b0:	e8 e3 e7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d5b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d5b8:	29 c2                	sub    %eax,%edx
f011d5ba:	89 d0                	mov    %edx,%eax
f011d5bc:	3d 00 05 00 00       	cmp    $0x500,%eax
f011d5c1:	74 17                	je     f011d5da <test_kmalloc_firstfit2+0xc3e>
f011d5c3:	83 ec 04             	sub    $0x4,%esp
f011d5c6:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011d5cb:	68 f7 03 00 00       	push   $0x3f7
f011d5d0:	68 7a a2 13 f0       	push   $0xf013a27a
f011d5d5:	e8 cc 2b fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5da:	e8 b9 e7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d5df:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5e2:	e8 a5 66 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d5e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011d5ea:	83 ec 0c             	sub    $0xc,%esp
f011d5ed:	68 00 fc 2f 00       	push   $0x2ffc00
f011d5f2:	e8 e5 9d fe ff       	call   f01073dc <kmalloc>
f011d5f7:	83 c4 10             	add    $0x10,%esp
f011d5fa:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d600:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d606:	89 c1                	mov    %eax,%ecx
f011d608:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d60f:	10 00 00 
f011d612:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d618:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d61d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d623:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d629:	ba 00 00 00 00       	mov    $0x0,%edx
f011d62e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d634:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d63a:	29 d0                	sub    %edx,%eax
f011d63c:	89 c3                	mov    %eax,%ebx
f011d63e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011d645:	10 00 00 
f011d648:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d64d:	0f b6 d0             	movzbl %al,%edx
f011d650:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d656:	01 d0                	add    %edx,%eax
f011d658:	48                   	dec    %eax
f011d659:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011d65f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d665:	ba 00 00 00 00       	mov    $0x0,%edx
f011d66a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011d670:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d676:	29 d0                	sub    %edx,%eax
f011d678:	01 c3                	add    %eax,%ebx
f011d67a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011d681:	10 00 00 
f011d684:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d689:	0f b6 c0             	movzbl %al,%eax
f011d68c:	c1 e0 04             	shl    $0x4,%eax
f011d68f:	89 c2                	mov    %eax,%edx
f011d691:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d697:	01 d0                	add    %edx,%eax
f011d699:	48                   	dec    %eax
f011d69a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011d6a0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d6a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ab:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011d6b1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011d6b7:	29 d0                	sub    %edx,%eax
f011d6b9:	01 d8                	add    %ebx,%eax
f011d6bb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d6c0:	39 c1                	cmp    %eax,%ecx
f011d6c2:	74 17                	je     f011d6db <test_kmalloc_firstfit2+0xd3f>
f011d6c4:	83 ec 04             	sub    $0x4,%esp
f011d6c7:	68 94 a6 13 f0       	push   $0xf013a694
f011d6cc:	68 05 04 00 00       	push   $0x405
f011d6d1:	68 7a a2 13 f0       	push   $0xf013a27a
f011d6d6:	e8 cb 2a fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6db:	e8 ac 65 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d6e0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d6e3:	74 17                	je     f011d6fc <test_kmalloc_firstfit2+0xd60>
f011d6e5:	83 ec 04             	sub    $0x4,%esp
f011d6e8:	68 94 a2 13 f0       	push   $0xf013a294
f011d6ed:	68 06 04 00 00       	push   $0x406
f011d6f2:	68 7a a2 13 f0       	push   $0xf013a27a
f011d6f7:	e8 aa 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d6fc:	e8 97 e6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d701:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d704:	29 c2                	sub    %eax,%edx
f011d706:	89 d0                	mov    %edx,%eax
f011d708:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d70d:	74 17                	je     f011d726 <test_kmalloc_firstfit2+0xd8a>
f011d70f:	83 ec 04             	sub    $0x4,%esp
f011d712:	68 c4 a6 13 f0       	push   $0xf013a6c4
f011d717:	68 07 04 00 00       	push   $0x407
f011d71c:	68 7a a2 13 f0       	push   $0xf013a27a
f011d721:	e8 80 2a fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011d726:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011d72d:	10 00 00 
f011d730:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d736:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d73b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011d741:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d747:	ba 00 00 00 00       	mov    $0x0,%edx
f011d74c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011d752:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d758:	29 d0                	sub    %edx,%eax
f011d75a:	89 c1                	mov    %eax,%ecx
f011d75c:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011d763:	10 00 00 
f011d766:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d76b:	0f b6 d0             	movzbl %al,%edx
f011d76e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d774:	01 d0                	add    %edx,%eax
f011d776:	48                   	dec    %eax
f011d777:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011d77d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d783:	ba 00 00 00 00       	mov    $0x0,%edx
f011d788:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011d78e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d794:	29 d0                	sub    %edx,%eax
f011d796:	01 c1                	add    %eax,%ecx
f011d798:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011d79f:	10 00 00 
f011d7a2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d7a7:	0f b6 c0             	movzbl %al,%eax
f011d7aa:	c1 e0 04             	shl    $0x4,%eax
f011d7ad:	89 c2                	mov    %eax,%edx
f011d7af:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d7b5:	01 d0                	add    %edx,%eax
f011d7b7:	48                   	dec    %eax
f011d7b8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011d7be:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d7c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7c9:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011d7cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d7d5:	29 d0                	sub    %edx,%eax
f011d7d7:	01 c8                	add    %ecx,%eax
f011d7d9:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011d7de:	29 c2                	sub    %eax,%edx
f011d7e0:	89 d0                	mov    %edx,%eax
f011d7e2:	83 ec 0c             	sub    $0xc,%esp
f011d7e5:	50                   	push   %eax
f011d7e6:	e8 f1 9b fe ff       	call   f01073dc <kmalloc>
f011d7eb:	83 c4 10             	add    $0x10,%esp
f011d7ee:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011d7f4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d7fa:	85 c0                	test   %eax,%eax
f011d7fc:	74 17                	je     f011d815 <test_kmalloc_firstfit2+0xe79>
f011d7fe:	83 ec 04             	sub    $0x4,%esp
f011d801:	68 c4 a7 13 f0       	push   $0xf013a7c4
f011d806:	68 0d 04 00 00       	push   $0x40d
f011d80b:	68 7a a2 13 f0       	push   $0xf013a27a
f011d810:	e8 91 29 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011d815:	83 ec 0c             	sub    $0xc,%esp
f011d818:	68 04 a9 13 f0       	push   $0xf013a904
f011d81d:	e8 0b 34 fe ff       	call   f0100c2d <cprintf>
f011d822:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011d825:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d82a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d82d:	5b                   	pop    %ebx
f011d82e:	5f                   	pop    %edi
f011d82f:	5d                   	pop    %ebp
f011d830:	c3                   	ret    

f011d831 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011d831:	55                   	push   %ebp
f011d832:	89 e5                	mov    %esp,%ebp
f011d834:	57                   	push   %edi
f011d835:	53                   	push   %ebx
f011d836:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011d83c:	83 ec 0c             	sub    $0xc,%esp
f011d83f:	68 bc a1 13 f0       	push   $0xf013a1bc
f011d844:	e8 e4 33 fe ff       	call   f0100c2d <cprintf>
f011d849:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d84c:	83 ec 0c             	sub    $0xc,%esp
f011d84f:	68 ec a1 13 f0       	push   $0xf013a1ec
f011d854:	e8 d4 33 fe ff       	call   f0100c2d <cprintf>
f011d859:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d85c:	83 ec 0c             	sub    $0xc,%esp
f011d85f:	68 bc a1 13 f0       	push   $0xf013a1bc
f011d864:	e8 c4 33 fe ff       	call   f0100c2d <cprintf>
f011d869:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011d86c:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011d872:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011d877:	b8 00 00 00 00       	mov    $0x0,%eax
f011d87c:	89 d7                	mov    %edx,%edi
f011d87e:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011d880:	e8 13 e5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011d885:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011d888:	e8 ff 63 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011d88d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011d890:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011d897:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d89e:	eb 1f                	jmp    f011d8bf <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011d8a0:	83 ec 0c             	sub    $0xc,%esp
f011d8a3:	68 00 00 20 00       	push   $0x200000
f011d8a8:	e8 2f 9b fe ff       	call   f01073dc <kmalloc>
f011d8ad:	83 c4 10             	add    $0x10,%esp
f011d8b0:	89 c2                	mov    %eax,%edx
f011d8b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d8b5:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011d8bc:	ff 45 f4             	incl   -0xc(%ebp)
f011d8bf:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011d8c3:	7e db                	jle    f011d8a0 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011d8c5:	83 ec 0c             	sub    $0xc,%esp
f011d8c8:	68 00 b0 1f 00       	push   $0x1fb000
f011d8cd:	e8 0a 9b fe ff       	call   f01073dc <kmalloc>
f011d8d2:	83 c4 10             	add    $0x10,%esp
f011d8d5:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011d8db:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011d8e1:	89 c1                	mov    %eax,%ecx
f011d8e3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d8ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d8ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d8f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d8f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d8f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8fd:	f7 75 e4             	divl   -0x1c(%ebp)
f011d900:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d903:	29 d0                	sub    %edx,%eax
f011d905:	89 c3                	mov    %eax,%ebx
f011d907:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d90e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d913:	0f b6 d0             	movzbl %al,%edx
f011d916:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d919:	01 d0                	add    %edx,%eax
f011d91b:	48                   	dec    %eax
f011d91c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d91f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d922:	ba 00 00 00 00       	mov    $0x0,%edx
f011d927:	f7 75 dc             	divl   -0x24(%ebp)
f011d92a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d92d:	29 d0                	sub    %edx,%eax
f011d92f:	01 c3                	add    %eax,%ebx
f011d931:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d938:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d93d:	0f b6 c0             	movzbl %al,%eax
f011d940:	c1 e0 04             	shl    $0x4,%eax
f011d943:	89 c2                	mov    %eax,%edx
f011d945:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d948:	01 d0                	add    %edx,%eax
f011d94a:	48                   	dec    %eax
f011d94b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d94e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d951:	ba 00 00 00 00       	mov    $0x0,%edx
f011d956:	f7 75 d4             	divl   -0x2c(%ebp)
f011d959:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d95c:	29 d0                	sub    %edx,%eax
f011d95e:	01 d8                	add    %ebx,%eax
f011d960:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d965:	39 c1                	cmp    %eax,%ecx
f011d967:	0f 85 c0 04 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011d96d:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011d973:	89 c1                	mov    %eax,%ecx
f011d975:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d97c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d97f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d984:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d987:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d98a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d98f:	f7 75 cc             	divl   -0x34(%ebp)
f011d992:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d995:	29 d0                	sub    %edx,%eax
f011d997:	89 c3                	mov    %eax,%ebx
f011d999:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d9a0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d9a5:	0f b6 d0             	movzbl %al,%edx
f011d9a8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d9ab:	01 d0                	add    %edx,%eax
f011d9ad:	48                   	dec    %eax
f011d9ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d9b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9b4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9b9:	f7 75 c4             	divl   -0x3c(%ebp)
f011d9bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9bf:	29 d0                	sub    %edx,%eax
f011d9c1:	01 c3                	add    %eax,%ebx
f011d9c3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d9ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011d9cf:	0f b6 c0             	movzbl %al,%eax
f011d9d2:	c1 e0 04             	shl    $0x4,%eax
f011d9d5:	89 c2                	mov    %eax,%edx
f011d9d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d9da:	01 d0                	add    %edx,%eax
f011d9dc:	48                   	dec    %eax
f011d9dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d9e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d9e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9e8:	f7 75 bc             	divl   -0x44(%ebp)
f011d9eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d9ee:	29 d0                	sub    %edx,%eax
f011d9f0:	01 d8                	add    %ebx,%eax
f011d9f2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011d9f7:	39 c1                	cmp    %eax,%ecx
f011d9f9:	0f 85 2e 04 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011d9ff:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011da05:	89 c1                	mov    %eax,%ecx
f011da07:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011da0e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da16:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da1c:	ba 00 00 00 00       	mov    $0x0,%edx
f011da21:	f7 75 b4             	divl   -0x4c(%ebp)
f011da24:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011da27:	29 d0                	sub    %edx,%eax
f011da29:	89 c3                	mov    %eax,%ebx
f011da2b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011da32:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011da37:	0f b6 d0             	movzbl %al,%edx
f011da3a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011da3d:	01 d0                	add    %edx,%eax
f011da3f:	48                   	dec    %eax
f011da40:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011da43:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011da46:	ba 00 00 00 00       	mov    $0x0,%edx
f011da4b:	f7 75 ac             	divl   -0x54(%ebp)
f011da4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011da51:	29 d0                	sub    %edx,%eax
f011da53:	01 c3                	add    %eax,%ebx
f011da55:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011da5c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011da61:	0f b6 c0             	movzbl %al,%eax
f011da64:	c1 e0 04             	shl    $0x4,%eax
f011da67:	89 c2                	mov    %eax,%edx
f011da69:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011da6c:	01 d0                	add    %edx,%eax
f011da6e:	48                   	dec    %eax
f011da6f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011da72:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011da75:	ba 00 00 00 00       	mov    $0x0,%edx
f011da7a:	f7 75 a4             	divl   -0x5c(%ebp)
f011da7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011da80:	29 d0                	sub    %edx,%eax
f011da82:	01 d8                	add    %ebx,%eax
f011da84:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011da89:	39 c1                	cmp    %eax,%ecx
f011da8b:	0f 85 9c 03 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011da91:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011da97:	89 c1                	mov    %eax,%ecx
f011da99:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011daa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011daa3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011daa8:	89 45 98             	mov    %eax,-0x68(%ebp)
f011daab:	8b 45 98             	mov    -0x68(%ebp),%eax
f011daae:	ba 00 00 00 00       	mov    $0x0,%edx
f011dab3:	f7 75 9c             	divl   -0x64(%ebp)
f011dab6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dab9:	29 d0                	sub    %edx,%eax
f011dabb:	89 c3                	mov    %eax,%ebx
f011dabd:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dac4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dac9:	0f b6 d0             	movzbl %al,%edx
f011dacc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dacf:	01 d0                	add    %edx,%eax
f011dad1:	48                   	dec    %eax
f011dad2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dad5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dad8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dadd:	f7 75 94             	divl   -0x6c(%ebp)
f011dae0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dae3:	29 d0                	sub    %edx,%eax
f011dae5:	01 c3                	add    %eax,%ebx
f011dae7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011daee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011daf3:	0f b6 c0             	movzbl %al,%eax
f011daf6:	c1 e0 04             	shl    $0x4,%eax
f011daf9:	89 c2                	mov    %eax,%edx
f011dafb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011dafe:	01 d0                	add    %edx,%eax
f011db00:	48                   	dec    %eax
f011db01:	89 45 88             	mov    %eax,-0x78(%ebp)
f011db04:	8b 45 88             	mov    -0x78(%ebp),%eax
f011db07:	ba 00 00 00 00       	mov    $0x0,%edx
f011db0c:	f7 75 8c             	divl   -0x74(%ebp)
f011db0f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011db12:	29 d0                	sub    %edx,%eax
f011db14:	01 d8                	add    %ebx,%eax
f011db16:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011db1b:	39 c1                	cmp    %eax,%ecx
f011db1d:	0f 85 0a 03 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011db23:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011db29:	89 c1                	mov    %eax,%ecx
f011db2b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011db32:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011db35:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db3a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011db3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011db40:	ba 00 00 00 00       	mov    $0x0,%edx
f011db45:	f7 75 84             	divl   -0x7c(%ebp)
f011db48:	8b 45 80             	mov    -0x80(%ebp),%eax
f011db4b:	29 d0                	sub    %edx,%eax
f011db4d:	89 c3                	mov    %eax,%ebx
f011db4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011db56:	10 00 00 
f011db59:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011db5e:	0f b6 d0             	movzbl %al,%edx
f011db61:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011db67:	01 d0                	add    %edx,%eax
f011db69:	48                   	dec    %eax
f011db6a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011db70:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db76:	ba 00 00 00 00       	mov    $0x0,%edx
f011db7b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011db81:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011db87:	29 d0                	sub    %edx,%eax
f011db89:	01 c3                	add    %eax,%ebx
f011db8b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011db92:	10 00 00 
f011db95:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011db9a:	0f b6 c0             	movzbl %al,%eax
f011db9d:	c1 e0 04             	shl    $0x4,%eax
f011dba0:	89 c2                	mov    %eax,%edx
f011dba2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011dba8:	01 d0                	add    %edx,%eax
f011dbaa:	48                   	dec    %eax
f011dbab:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011dbb1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dbb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbbc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011dbc2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dbc8:	29 d0                	sub    %edx,%eax
f011dbca:	01 d8                	add    %ebx,%eax
f011dbcc:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011dbd1:	39 c1                	cmp    %eax,%ecx
f011dbd3:	0f 85 54 02 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011dbd9:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011dbdf:	89 c1                	mov    %eax,%ecx
f011dbe1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dbe8:	10 00 00 
f011dbeb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dbf1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dbf6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dbfc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc02:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc07:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dc0d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dc13:	29 d0                	sub    %edx,%eax
f011dc15:	89 c3                	mov    %eax,%ebx
f011dc17:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dc1e:	10 00 00 
f011dc21:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dc26:	0f b6 d0             	movzbl %al,%edx
f011dc29:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011dc2f:	01 d0                	add    %edx,%eax
f011dc31:	48                   	dec    %eax
f011dc32:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011dc38:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc43:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011dc49:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011dc4f:	29 d0                	sub    %edx,%eax
f011dc51:	01 c3                	add    %eax,%ebx
f011dc53:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dc5a:	10 00 00 
f011dc5d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dc62:	0f b6 c0             	movzbl %al,%eax
f011dc65:	c1 e0 04             	shl    $0x4,%eax
f011dc68:	89 c2                	mov    %eax,%edx
f011dc6a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dc70:	01 d0                	add    %edx,%eax
f011dc72:	48                   	dec    %eax
f011dc73:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011dc79:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dc7f:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc84:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011dc8a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dc90:	29 d0                	sub    %edx,%eax
f011dc92:	01 d8                	add    %ebx,%eax
f011dc94:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011dc99:	39 c1                	cmp    %eax,%ecx
f011dc9b:	0f 85 8c 01 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011dca1:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011dca7:	89 c1                	mov    %eax,%ecx
f011dca9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011dcb0:	10 00 00 
f011dcb3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011dcb9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcbe:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011dcc4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dcca:	ba 00 00 00 00       	mov    $0x0,%edx
f011dccf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011dcd5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011dcdb:	29 d0                	sub    %edx,%eax
f011dcdd:	89 c3                	mov    %eax,%ebx
f011dcdf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011dce6:	10 00 00 
f011dce9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dcee:	0f b6 d0             	movzbl %al,%edx
f011dcf1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011dcf7:	01 d0                	add    %edx,%eax
f011dcf9:	48                   	dec    %eax
f011dcfa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011dd00:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dd06:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd0b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011dd11:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011dd17:	29 d0                	sub    %edx,%eax
f011dd19:	01 c3                	add    %eax,%ebx
f011dd1b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dd22:	10 00 00 
f011dd25:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011dd2a:	0f b6 c0             	movzbl %al,%eax
f011dd2d:	c1 e0 04             	shl    $0x4,%eax
f011dd30:	89 c2                	mov    %eax,%edx
f011dd32:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dd38:	01 d0                	add    %edx,%eax
f011dd3a:	48                   	dec    %eax
f011dd3b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dd41:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dd47:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd4c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dd52:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dd58:	29 d0                	sub    %edx,%eax
f011dd5a:	01 d8                	add    %ebx,%eax
f011dd5c:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011dd61:	39 c1                	cmp    %eax,%ecx
f011dd63:	0f 85 c4 00 00 00    	jne    f011de2d <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011dd69:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011dd6f:	89 c1                	mov    %eax,%ecx
f011dd71:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dd78:	10 00 00 
f011dd7b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dd81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd86:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dd8c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dd92:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd97:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011dd9d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dda3:	29 d0                	sub    %edx,%eax
f011dda5:	89 c3                	mov    %eax,%ebx
f011dda7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ddae:	10 00 00 
f011ddb1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ddb6:	0f b6 d0             	movzbl %al,%edx
f011ddb9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ddbf:	01 d0                	add    %edx,%eax
f011ddc1:	48                   	dec    %eax
f011ddc2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ddc8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ddce:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddd3:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ddd9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dddf:	29 d0                	sub    %edx,%eax
f011dde1:	01 c3                	add    %eax,%ebx
f011dde3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ddea:	10 00 00 
f011dded:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ddf2:	0f b6 c0             	movzbl %al,%eax
f011ddf5:	c1 e0 04             	shl    $0x4,%eax
f011ddf8:	89 c2                	mov    %eax,%edx
f011ddfa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011de00:	01 d0                	add    %edx,%eax
f011de02:	48                   	dec    %eax
f011de03:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011de09:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011de14:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011de1a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de20:	29 d0                	sub    %edx,%eax
f011de22:	01 d8                	add    %ebx,%eax
f011de24:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011de29:	39 c1                	cmp    %eax,%ecx
f011de2b:	74 17                	je     f011de44 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011de2d:	83 ec 04             	sub    $0x4,%esp
f011de30:	68 50 a9 13 f0       	push   $0xf013a950
f011de35:	68 31 04 00 00       	push   $0x431
f011de3a:	68 7a a2 13 f0       	push   $0xf013a27a
f011de3f:	e8 62 23 fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de44:	e8 43 5e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011de49:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011de4c:	74 17                	je     f011de65 <test_kmalloc_worstfit+0x634>
f011de4e:	83 ec 04             	sub    $0x4,%esp
f011de51:	68 94 a2 13 f0       	push   $0xf013a294
f011de56:	68 33 04 00 00       	push   $0x433
f011de5b:	68 7a a2 13 f0       	push   $0xf013a27a
f011de60:	e8 41 23 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011de65:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011de68:	e8 2b df fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011de6d:	29 c3                	sub    %eax,%ebx
f011de6f:	89 d8                	mov    %ebx,%eax
f011de71:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011de76:	74 17                	je     f011de8f <test_kmalloc_worstfit+0x65e>
f011de78:	83 ec 04             	sub    $0x4,%esp
f011de7b:	68 37 a5 13 f0       	push   $0xf013a537
f011de80:	68 34 04 00 00       	push   $0x434
f011de85:	68 7a a2 13 f0       	push   $0xf013a27a
f011de8a:	e8 17 23 fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011de8f:	e8 04 df fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011de94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011de97:	e8 f0 5d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011de9c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011de9f:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011dea5:	83 ec 0c             	sub    $0xc,%esp
f011dea8:	50                   	push   %eax
f011dea9:	e8 48 95 fe ff       	call   f01073f6 <kfree>
f011deae:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011deb1:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011deb7:	83 ec 0c             	sub    $0xc,%esp
f011deba:	50                   	push   %eax
f011debb:	e8 36 95 fe ff       	call   f01073f6 <kfree>
f011dec0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011dec3:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011dec9:	83 ec 0c             	sub    $0xc,%esp
f011decc:	50                   	push   %eax
f011decd:	e8 24 95 fe ff       	call   f01073f6 <kfree>
f011ded2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011ded5:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011dedb:	83 ec 0c             	sub    $0xc,%esp
f011dede:	50                   	push   %eax
f011dedf:	e8 12 95 fe ff       	call   f01073f6 <kfree>
f011dee4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011dee7:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011deed:	83 ec 0c             	sub    $0xc,%esp
f011def0:	50                   	push   %eax
f011def1:	e8 00 95 fe ff       	call   f01073f6 <kfree>
f011def6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011def9:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011deff:	83 ec 0c             	sub    $0xc,%esp
f011df02:	50                   	push   %eax
f011df03:	e8 ee 94 fe ff       	call   f01073f6 <kfree>
f011df08:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011df0b:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011df11:	83 ec 0c             	sub    $0xc,%esp
f011df14:	50                   	push   %eax
f011df15:	e8 dc 94 fe ff       	call   f01073f6 <kfree>
f011df1a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011df1d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011df23:	83 ec 0c             	sub    $0xc,%esp
f011df26:	50                   	push   %eax
f011df27:	e8 ca 94 fe ff       	call   f01073f6 <kfree>
f011df2c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011df2f:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011df35:	83 ec 0c             	sub    $0xc,%esp
f011df38:	50                   	push   %eax
f011df39:	e8 b8 94 fe ff       	call   f01073f6 <kfree>
f011df3e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011df41:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011df47:	83 ec 0c             	sub    $0xc,%esp
f011df4a:	50                   	push   %eax
f011df4b:	e8 a6 94 fe ff       	call   f01073f6 <kfree>
f011df50:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011df53:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011df59:	83 ec 0c             	sub    $0xc,%esp
f011df5c:	50                   	push   %eax
f011df5d:	e8 94 94 fe ff       	call   f01073f6 <kfree>
f011df62:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011df65:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011df6b:	83 ec 0c             	sub    $0xc,%esp
f011df6e:	50                   	push   %eax
f011df6f:	e8 82 94 fe ff       	call   f01073f6 <kfree>
f011df74:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011df77:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011df7d:	83 ec 0c             	sub    $0xc,%esp
f011df80:	50                   	push   %eax
f011df81:	e8 70 94 fe ff       	call   f01073f6 <kfree>
f011df86:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011df89:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011df8f:	83 ec 0c             	sub    $0xc,%esp
f011df92:	50                   	push   %eax
f011df93:	e8 5e 94 fe ff       	call   f01073f6 <kfree>
f011df98:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011df9b:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011dfa1:	83 ec 0c             	sub    $0xc,%esp
f011dfa4:	50                   	push   %eax
f011dfa5:	e8 4c 94 fe ff       	call   f01073f6 <kfree>
f011dfaa:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfad:	e8 da 5c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011dfb2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011dfb5:	74 17                	je     f011dfce <test_kmalloc_worstfit+0x79d>
f011dfb7:	83 ec 04             	sub    $0x4,%esp
f011dfba:	68 94 a2 13 f0       	push   $0xf013a294
f011dfbf:	68 4a 04 00 00       	push   $0x44a
f011dfc4:	68 7a a2 13 f0       	push   $0xf013a27a
f011dfc9:	e8 d8 21 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011dfce:	e8 c5 dd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011dfd3:	89 c2                	mov    %eax,%edx
f011dfd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011dfd8:	29 c2                	sub    %eax,%edx
f011dfda:	89 d0                	mov    %edx,%eax
f011dfdc:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011dfe1:	74 17                	je     f011dffa <test_kmalloc_worstfit+0x7c9>
f011dfe3:	83 ec 04             	sub    $0x4,%esp
f011dfe6:	68 48 a5 13 f0       	push   $0xf013a548
f011dfeb:	68 4b 04 00 00       	push   $0x44b
f011dff0:	68 7a a2 13 f0       	push   $0xf013a27a
f011dff5:	e8 ac 21 fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011dffa:	e8 99 dd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011dfff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e002:	e8 85 5c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e007:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e00a:	83 ec 0c             	sub    $0xc,%esp
f011e00d:	68 00 00 10 00       	push   $0x100000
f011e012:	e8 c5 93 fe ff       	call   f01073dc <kmalloc>
f011e017:	83 c4 10             	add    $0x10,%esp
f011e01a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e020:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e027:	10 00 00 
f011e02a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e030:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e035:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e03b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e041:	ba 00 00 00 00       	mov    $0x0,%edx
f011e046:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e04c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e052:	29 d0                	sub    %edx,%eax
f011e054:	89 c1                	mov    %eax,%ecx
f011e056:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e05d:	10 00 00 
f011e060:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e065:	0f b6 d0             	movzbl %al,%edx
f011e068:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e06e:	01 d0                	add    %edx,%eax
f011e070:	48                   	dec    %eax
f011e071:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e077:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e07d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e082:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e088:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e08e:	29 d0                	sub    %edx,%eax
f011e090:	01 c1                	add    %eax,%ecx
f011e092:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e099:	10 00 00 
f011e09c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e0a1:	0f b6 c0             	movzbl %al,%eax
f011e0a4:	c1 e0 04             	shl    $0x4,%eax
f011e0a7:	89 c2                	mov    %eax,%edx
f011e0a9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e0af:	01 d0                	add    %edx,%eax
f011e0b1:	48                   	dec    %eax
f011e0b2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e0b8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e0be:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0c3:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e0c9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e0cf:	29 d0                	sub    %edx,%eax
f011e0d1:	01 c8                	add    %ecx,%eax
f011e0d3:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e0d9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e0df:	39 c2                	cmp    %eax,%edx
f011e0e1:	74 17                	je     f011e0fa <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e0e3:	83 ec 04             	sub    $0x4,%esp
f011e0e6:	68 94 a9 13 f0       	push   $0xf013a994
f011e0eb:	68 52 04 00 00       	push   $0x452
f011e0f0:	68 7a a2 13 f0       	push   $0xf013a27a
f011e0f5:	e8 ac 20 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0fa:	e8 8d 5b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e0ff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e102:	74 17                	je     f011e11b <test_kmalloc_worstfit+0x8ea>
f011e104:	83 ec 04             	sub    $0x4,%esp
f011e107:	68 94 a2 13 f0       	push   $0xf013a294
f011e10c:	68 53 04 00 00       	push   $0x453
f011e111:	68 7a a2 13 f0       	push   $0xf013a27a
f011e116:	e8 8b 20 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e11b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e11e:	e8 75 dc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e123:	29 c3                	sub    %eax,%ebx
f011e125:	89 d8                	mov    %ebx,%eax
f011e127:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e12c:	74 17                	je     f011e145 <test_kmalloc_worstfit+0x914>
f011e12e:	83 ec 04             	sub    $0x4,%esp
f011e131:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e136:	68 54 04 00 00       	push   $0x454
f011e13b:	68 7a a2 13 f0       	push   $0xf013a27a
f011e140:	e8 61 20 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e145:	ff 45 e8             	incl   -0x18(%ebp)
f011e148:	83 ec 08             	sub    $0x8,%esp
f011e14b:	ff 75 e8             	pushl  -0x18(%ebp)
f011e14e:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e153:	e8 d5 2a fe ff       	call   f0100c2d <cprintf>
f011e158:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e15b:	e8 38 dc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e160:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e163:	e8 24 5b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e168:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e16b:	83 ec 0c             	sub    $0xc,%esp
f011e16e:	68 00 00 40 00       	push   $0x400000
f011e173:	e8 64 92 fe ff       	call   f01073dc <kmalloc>
f011e178:	83 c4 10             	add    $0x10,%esp
f011e17b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e181:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e188:	10 00 00 
f011e18b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e191:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e196:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e19c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e1a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a7:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e1ad:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e1b3:	29 d0                	sub    %edx,%eax
f011e1b5:	89 c1                	mov    %eax,%ecx
f011e1b7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e1be:	10 00 00 
f011e1c1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e1c6:	0f b6 d0             	movzbl %al,%edx
f011e1c9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e1cf:	01 d0                	add    %edx,%eax
f011e1d1:	48                   	dec    %eax
f011e1d2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e1d8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e1de:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1e3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e1e9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e1ef:	29 d0                	sub    %edx,%eax
f011e1f1:	01 c1                	add    %eax,%ecx
f011e1f3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e1fa:	10 00 00 
f011e1fd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e202:	0f b6 c0             	movzbl %al,%eax
f011e205:	c1 e0 04             	shl    $0x4,%eax
f011e208:	89 c2                	mov    %eax,%edx
f011e20a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e210:	01 d0                	add    %edx,%eax
f011e212:	48                   	dec    %eax
f011e213:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011e219:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e21f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e224:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011e22a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e230:	29 d0                	sub    %edx,%eax
f011e232:	01 c8                	add    %ecx,%eax
f011e234:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e23a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e240:	39 c2                	cmp    %eax,%edx
f011e242:	74 17                	je     f011e25b <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011e244:	83 ec 04             	sub    $0x4,%esp
f011e247:	68 94 a9 13 f0       	push   $0xf013a994
f011e24c:	68 5b 04 00 00       	push   $0x45b
f011e251:	68 7a a2 13 f0       	push   $0xf013a27a
f011e256:	e8 4b 1f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e25b:	e8 2c 5a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e260:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e263:	74 17                	je     f011e27c <test_kmalloc_worstfit+0xa4b>
f011e265:	83 ec 04             	sub    $0x4,%esp
f011e268:	68 94 a2 13 f0       	push   $0xf013a294
f011e26d:	68 5c 04 00 00       	push   $0x45c
f011e272:	68 7a a2 13 f0       	push   $0xf013a27a
f011e277:	e8 2a 1f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e27c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e27f:	e8 14 db fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e284:	29 c3                	sub    %eax,%ebx
f011e286:	89 d8                	mov    %ebx,%eax
f011e288:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e28d:	74 17                	je     f011e2a6 <test_kmalloc_worstfit+0xa75>
f011e28f:	83 ec 04             	sub    $0x4,%esp
f011e292:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e297:	68 5d 04 00 00       	push   $0x45d
f011e29c:	68 7a a2 13 f0       	push   $0xf013a27a
f011e2a1:	e8 00 1f fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e2a6:	ff 45 e8             	incl   -0x18(%ebp)
f011e2a9:	83 ec 08             	sub    $0x8,%esp
f011e2ac:	ff 75 e8             	pushl  -0x18(%ebp)
f011e2af:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e2b4:	e8 74 29 fe ff       	call   f0100c2d <cprintf>
f011e2b9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e2bc:	e8 d7 da fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e2c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e2c4:	e8 c3 59 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e2c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e2cc:	83 ec 0c             	sub    $0xc,%esp
f011e2cf:	68 00 00 60 00       	push   $0x600000
f011e2d4:	e8 03 91 fe ff       	call   f01073dc <kmalloc>
f011e2d9:	83 c4 10             	add    $0x10,%esp
f011e2dc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e2e2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011e2e9:	10 00 00 
f011e2ec:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e2f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2f7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011e2fd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e303:	ba 00 00 00 00       	mov    $0x0,%edx
f011e308:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011e30e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e314:	29 d0                	sub    %edx,%eax
f011e316:	89 c1                	mov    %eax,%ecx
f011e318:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011e31f:	10 00 00 
f011e322:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e327:	0f b6 d0             	movzbl %al,%edx
f011e32a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e330:	01 d0                	add    %edx,%eax
f011e332:	48                   	dec    %eax
f011e333:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011e339:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e33f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e344:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011e34a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e350:	29 d0                	sub    %edx,%eax
f011e352:	01 c1                	add    %eax,%ecx
f011e354:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011e35b:	10 00 00 
f011e35e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e363:	0f b6 c0             	movzbl %al,%eax
f011e366:	c1 e0 04             	shl    $0x4,%eax
f011e369:	89 c2                	mov    %eax,%edx
f011e36b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e371:	01 d0                	add    %edx,%eax
f011e373:	48                   	dec    %eax
f011e374:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011e37a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e380:	ba 00 00 00 00       	mov    $0x0,%edx
f011e385:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011e38b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e391:	29 d0                	sub    %edx,%eax
f011e393:	01 c8                	add    %ecx,%eax
f011e395:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e39b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e3a1:	39 c2                	cmp    %eax,%edx
f011e3a3:	74 17                	je     f011e3bc <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011e3a5:	83 ec 04             	sub    $0x4,%esp
f011e3a8:	68 94 a9 13 f0       	push   $0xf013a994
f011e3ad:	68 64 04 00 00       	push   $0x464
f011e3b2:	68 7a a2 13 f0       	push   $0xf013a27a
f011e3b7:	e8 ea 1d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3bc:	e8 cb 58 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e3c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e3c4:	74 17                	je     f011e3dd <test_kmalloc_worstfit+0xbac>
f011e3c6:	83 ec 04             	sub    $0x4,%esp
f011e3c9:	68 94 a2 13 f0       	push   $0xf013a294
f011e3ce:	68 65 04 00 00       	push   $0x465
f011e3d3:	68 7a a2 13 f0       	push   $0xf013a27a
f011e3d8:	e8 c9 1d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e3dd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e3e0:	e8 b3 d9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e3e5:	29 c3                	sub    %eax,%ebx
f011e3e7:	89 d8                	mov    %ebx,%eax
f011e3e9:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e3ee:	74 17                	je     f011e407 <test_kmalloc_worstfit+0xbd6>
f011e3f0:	83 ec 04             	sub    $0x4,%esp
f011e3f3:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e3f8:	68 66 04 00 00       	push   $0x466
f011e3fd:	68 7a a2 13 f0       	push   $0xf013a27a
f011e402:	e8 9f 1d fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e407:	ff 45 e8             	incl   -0x18(%ebp)
f011e40a:	83 ec 08             	sub    $0x8,%esp
f011e40d:	ff 75 e8             	pushl  -0x18(%ebp)
f011e410:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e415:	e8 13 28 fe ff       	call   f0100c2d <cprintf>
f011e41a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e41d:	e8 76 d9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e422:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e425:	e8 62 58 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e42a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e42d:	83 ec 0c             	sub    $0xc,%esp
f011e430:	68 00 00 50 00       	push   $0x500000
f011e435:	e8 a2 8f fe ff       	call   f01073dc <kmalloc>
f011e43a:	83 c4 10             	add    $0x10,%esp
f011e43d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e443:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011e44a:	10 00 00 
f011e44d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e453:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e458:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011e45e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e464:	ba 00 00 00 00       	mov    $0x0,%edx
f011e469:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011e46f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e475:	29 d0                	sub    %edx,%eax
f011e477:	89 c1                	mov    %eax,%ecx
f011e479:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011e480:	10 00 00 
f011e483:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e488:	0f b6 d0             	movzbl %al,%edx
f011e48b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e491:	01 d0                	add    %edx,%eax
f011e493:	48                   	dec    %eax
f011e494:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011e49a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4a5:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011e4ab:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e4b1:	29 d0                	sub    %edx,%eax
f011e4b3:	01 c1                	add    %eax,%ecx
f011e4b5:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011e4bc:	10 00 00 
f011e4bf:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e4c4:	0f b6 c0             	movzbl %al,%eax
f011e4c7:	c1 e0 04             	shl    $0x4,%eax
f011e4ca:	89 c2                	mov    %eax,%edx
f011e4cc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e4d2:	01 d0                	add    %edx,%eax
f011e4d4:	48                   	dec    %eax
f011e4d5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011e4db:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e4e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e6:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011e4ec:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e4f2:	29 d0                	sub    %edx,%eax
f011e4f4:	01 c8                	add    %ecx,%eax
f011e4f6:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011e4fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e502:	39 c2                	cmp    %eax,%edx
f011e504:	74 17                	je     f011e51d <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011e506:	83 ec 04             	sub    $0x4,%esp
f011e509:	68 94 a9 13 f0       	push   $0xf013a994
f011e50e:	68 6d 04 00 00       	push   $0x46d
f011e513:	68 7a a2 13 f0       	push   $0xf013a27a
f011e518:	e8 89 1c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e51d:	e8 6a 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e522:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e525:	74 17                	je     f011e53e <test_kmalloc_worstfit+0xd0d>
f011e527:	83 ec 04             	sub    $0x4,%esp
f011e52a:	68 94 a2 13 f0       	push   $0xf013a294
f011e52f:	68 6e 04 00 00       	push   $0x46e
f011e534:	68 7a a2 13 f0       	push   $0xf013a27a
f011e539:	e8 68 1c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e53e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e541:	e8 52 d8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e546:	29 c3                	sub    %eax,%ebx
f011e548:	89 d8                	mov    %ebx,%eax
f011e54a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e54f:	74 17                	je     f011e568 <test_kmalloc_worstfit+0xd37>
f011e551:	83 ec 04             	sub    $0x4,%esp
f011e554:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e559:	68 6f 04 00 00       	push   $0x46f
f011e55e:	68 7a a2 13 f0       	push   $0xf013a27a
f011e563:	e8 3e 1c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e568:	ff 45 e8             	incl   -0x18(%ebp)
f011e56b:	83 ec 08             	sub    $0x8,%esp
f011e56e:	ff 75 e8             	pushl  -0x18(%ebp)
f011e571:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e576:	e8 b2 26 fe ff       	call   f0100c2d <cprintf>
f011e57b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e57e:	e8 15 d8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e583:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e586:	e8 01 57 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e58b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011e58e:	83 ec 0c             	sub    $0xc,%esp
f011e591:	68 00 00 40 00       	push   $0x400000
f011e596:	e8 41 8e fe ff       	call   f01073dc <kmalloc>
f011e59b:	83 c4 10             	add    $0x10,%esp
f011e59e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011e5a4:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011e5ab:	10 00 00 
f011e5ae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e5b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5b9:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011e5bf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e5c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5ca:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011e5d0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e5d6:	29 d0                	sub    %edx,%eax
f011e5d8:	89 c1                	mov    %eax,%ecx
f011e5da:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011e5e1:	10 00 00 
f011e5e4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e5e9:	0f b6 d0             	movzbl %al,%edx
f011e5ec:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e5f2:	01 d0                	add    %edx,%eax
f011e5f4:	48                   	dec    %eax
f011e5f5:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011e5fb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e601:	ba 00 00 00 00       	mov    $0x0,%edx
f011e606:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011e60c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e612:	29 d0                	sub    %edx,%eax
f011e614:	01 c1                	add    %eax,%ecx
f011e616:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011e61d:	10 00 00 
f011e620:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e625:	0f b6 c0             	movzbl %al,%eax
f011e628:	c1 e0 04             	shl    $0x4,%eax
f011e62b:	89 c2                	mov    %eax,%edx
f011e62d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e633:	01 d0                	add    %edx,%eax
f011e635:	48                   	dec    %eax
f011e636:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011e63c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e642:	ba 00 00 00 00       	mov    $0x0,%edx
f011e647:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011e64d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e653:	29 d0                	sub    %edx,%eax
f011e655:	01 c8                	add    %ecx,%eax
f011e657:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011e65d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e663:	39 c2                	cmp    %eax,%edx
f011e665:	74 17                	je     f011e67e <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011e667:	83 ec 04             	sub    $0x4,%esp
f011e66a:	68 94 a9 13 f0       	push   $0xf013a994
f011e66f:	68 76 04 00 00       	push   $0x476
f011e674:	68 7a a2 13 f0       	push   $0xf013a27a
f011e679:	e8 28 1b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e67e:	e8 09 56 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e683:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e686:	74 17                	je     f011e69f <test_kmalloc_worstfit+0xe6e>
f011e688:	83 ec 04             	sub    $0x4,%esp
f011e68b:	68 94 a2 13 f0       	push   $0xf013a294
f011e690:	68 77 04 00 00       	push   $0x477
f011e695:	68 7a a2 13 f0       	push   $0xf013a27a
f011e69a:	e8 07 1b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e69f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e6a2:	e8 f1 d6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e6a7:	29 c3                	sub    %eax,%ebx
f011e6a9:	89 d8                	mov    %ebx,%eax
f011e6ab:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e6b0:	74 17                	je     f011e6c9 <test_kmalloc_worstfit+0xe98>
f011e6b2:	83 ec 04             	sub    $0x4,%esp
f011e6b5:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e6ba:	68 78 04 00 00       	push   $0x478
f011e6bf:	68 7a a2 13 f0       	push   $0xf013a27a
f011e6c4:	e8 dd 1a fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e6c9:	ff 45 e8             	incl   -0x18(%ebp)
f011e6cc:	83 ec 08             	sub    $0x8,%esp
f011e6cf:	ff 75 e8             	pushl  -0x18(%ebp)
f011e6d2:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e6d7:	e8 51 25 fe ff       	call   f0100c2d <cprintf>
f011e6dc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e6df:	e8 b4 d6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e6e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e6e7:	e8 a0 55 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e6ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011e6ef:	83 ec 0c             	sub    $0xc,%esp
f011e6f2:	68 00 00 20 00       	push   $0x200000
f011e6f7:	e8 e0 8c fe ff       	call   f01073dc <kmalloc>
f011e6fc:	83 c4 10             	add    $0x10,%esp
f011e6ff:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011e705:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011e70c:	10 00 00 
f011e70f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e715:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e71a:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011e720:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e726:	ba 00 00 00 00       	mov    $0x0,%edx
f011e72b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011e731:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e737:	29 d0                	sub    %edx,%eax
f011e739:	89 c1                	mov    %eax,%ecx
f011e73b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011e742:	10 00 00 
f011e745:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e74a:	0f b6 d0             	movzbl %al,%edx
f011e74d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e753:	01 d0                	add    %edx,%eax
f011e755:	48                   	dec    %eax
f011e756:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011e75c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e762:	ba 00 00 00 00       	mov    $0x0,%edx
f011e767:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011e76d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e773:	29 d0                	sub    %edx,%eax
f011e775:	01 c1                	add    %eax,%ecx
f011e777:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011e77e:	10 00 00 
f011e781:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e786:	0f b6 c0             	movzbl %al,%eax
f011e789:	c1 e0 04             	shl    $0x4,%eax
f011e78c:	89 c2                	mov    %eax,%edx
f011e78e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e794:	01 d0                	add    %edx,%eax
f011e796:	48                   	dec    %eax
f011e797:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011e79d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011e7a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7a8:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011e7ae:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011e7b4:	29 d0                	sub    %edx,%eax
f011e7b6:	01 c8                	add    %ecx,%eax
f011e7b8:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011e7be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e7c4:	39 c2                	cmp    %eax,%edx
f011e7c6:	74 17                	je     f011e7df <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011e7c8:	83 ec 04             	sub    $0x4,%esp
f011e7cb:	68 94 a9 13 f0       	push   $0xf013a994
f011e7d0:	68 7f 04 00 00       	push   $0x47f
f011e7d5:	68 7a a2 13 f0       	push   $0xf013a27a
f011e7da:	e8 c7 19 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7df:	e8 a8 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e7e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7e7:	74 17                	je     f011e800 <test_kmalloc_worstfit+0xfcf>
f011e7e9:	83 ec 04             	sub    $0x4,%esp
f011e7ec:	68 94 a2 13 f0       	push   $0xf013a294
f011e7f1:	68 80 04 00 00       	push   $0x480
f011e7f6:	68 7a a2 13 f0       	push   $0xf013a27a
f011e7fb:	e8 a6 19 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e800:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e803:	e8 90 d5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e808:	29 c3                	sub    %eax,%ebx
f011e80a:	89 d8                	mov    %ebx,%eax
f011e80c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e811:	74 17                	je     f011e82a <test_kmalloc_worstfit+0xff9>
f011e813:	83 ec 04             	sub    $0x4,%esp
f011e816:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e81b:	68 81 04 00 00       	push   $0x481
f011e820:	68 7a a2 13 f0       	push   $0xf013a27a
f011e825:	e8 7c 19 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e82a:	ff 45 e8             	incl   -0x18(%ebp)
f011e82d:	83 ec 08             	sub    $0x8,%esp
f011e830:	ff 75 e8             	pushl  -0x18(%ebp)
f011e833:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e838:	e8 f0 23 fe ff       	call   f0100c2d <cprintf>
f011e83d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e840:	e8 53 d5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e845:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e848:	e8 3f 54 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e84d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011e850:	83 ec 0c             	sub    $0xc,%esp
f011e853:	68 00 00 18 00       	push   $0x180000
f011e858:	e8 7f 8b fe ff       	call   f01073dc <kmalloc>
f011e85d:	83 c4 10             	add    $0x10,%esp
f011e860:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011e866:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011e86d:	10 00 00 
f011e870:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011e876:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e87b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011e881:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e887:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88c:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011e892:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e898:	29 d0                	sub    %edx,%eax
f011e89a:	89 c1                	mov    %eax,%ecx
f011e89c:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011e8a3:	10 00 00 
f011e8a6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e8ab:	0f b6 d0             	movzbl %al,%edx
f011e8ae:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e8b4:	01 d0                	add    %edx,%eax
f011e8b6:	48                   	dec    %eax
f011e8b7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011e8bd:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e8c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8c8:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011e8ce:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e8d4:	29 d0                	sub    %edx,%eax
f011e8d6:	01 c1                	add    %eax,%ecx
f011e8d8:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011e8df:	10 00 00 
f011e8e2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011e8e7:	0f b6 c0             	movzbl %al,%eax
f011e8ea:	c1 e0 04             	shl    $0x4,%eax
f011e8ed:	89 c2                	mov    %eax,%edx
f011e8ef:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e8f5:	01 d0                	add    %edx,%eax
f011e8f7:	48                   	dec    %eax
f011e8f8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011e8fe:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e904:	ba 00 00 00 00       	mov    $0x0,%edx
f011e909:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011e90f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e915:	29 d0                	sub    %edx,%eax
f011e917:	01 c8                	add    %ecx,%eax
f011e919:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011e91f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e925:	39 c2                	cmp    %eax,%edx
f011e927:	74 17                	je     f011e940 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011e929:	83 ec 04             	sub    $0x4,%esp
f011e92c:	68 94 a9 13 f0       	push   $0xf013a994
f011e931:	68 88 04 00 00       	push   $0x488
f011e936:	68 7a a2 13 f0       	push   $0xf013a27a
f011e93b:	e8 66 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e940:	e8 47 53 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e945:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e948:	74 17                	je     f011e961 <test_kmalloc_worstfit+0x1130>
f011e94a:	83 ec 04             	sub    $0x4,%esp
f011e94d:	68 94 a2 13 f0       	push   $0xf013a294
f011e952:	68 89 04 00 00       	push   $0x489
f011e957:	68 7a a2 13 f0       	push   $0xf013a27a
f011e95c:	e8 45 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011e961:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e964:	e8 2f d4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e969:	29 c3                	sub    %eax,%ebx
f011e96b:	89 d8                	mov    %ebx,%eax
f011e96d:	3d 80 01 00 00       	cmp    $0x180,%eax
f011e972:	74 17                	je     f011e98b <test_kmalloc_worstfit+0x115a>
f011e974:	83 ec 04             	sub    $0x4,%esp
f011e977:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011e97c:	68 8a 04 00 00       	push   $0x48a
f011e981:	68 7a a2 13 f0       	push   $0xf013a27a
f011e986:	e8 1b 18 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e98b:	ff 45 e8             	incl   -0x18(%ebp)
f011e98e:	83 ec 08             	sub    $0x8,%esp
f011e991:	ff 75 e8             	pushl  -0x18(%ebp)
f011e994:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011e999:	e8 8f 22 fe ff       	call   f0100c2d <cprintf>
f011e99e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e9a1:	e8 f2 d3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011e9a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e9a9:	e8 de 52 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011e9ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011e9b1:	83 ec 0c             	sub    $0xc,%esp
f011e9b4:	68 00 00 08 00       	push   $0x80000
f011e9b9:	e8 1e 8a fe ff       	call   f01073dc <kmalloc>
f011e9be:	83 c4 10             	add    $0x10,%esp
f011e9c1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011e9c7:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011e9ce:	10 00 00 
f011e9d1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e9d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9dc:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011e9e2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e9e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9ed:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011e9f3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e9f9:	29 d0                	sub    %edx,%eax
f011e9fb:	89 c1                	mov    %eax,%ecx
f011e9fd:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011ea04:	10 00 00 
f011ea07:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ea0c:	0f b6 d0             	movzbl %al,%edx
f011ea0f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ea15:	01 d0                	add    %edx,%eax
f011ea17:	48                   	dec    %eax
f011ea18:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011ea1e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ea24:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea29:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011ea2f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ea35:	29 d0                	sub    %edx,%eax
f011ea37:	01 c1                	add    %eax,%ecx
f011ea39:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011ea40:	10 00 00 
f011ea43:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ea48:	0f b6 c0             	movzbl %al,%eax
f011ea4b:	c1 e0 04             	shl    $0x4,%eax
f011ea4e:	89 c2                	mov    %eax,%edx
f011ea50:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ea56:	01 d0                	add    %edx,%eax
f011ea58:	48                   	dec    %eax
f011ea59:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011ea5f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ea65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea6a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011ea70:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ea76:	29 d0                	sub    %edx,%eax
f011ea78:	01 c8                	add    %ecx,%eax
f011ea7a:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011ea80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea86:	39 c2                	cmp    %eax,%edx
f011ea88:	74 17                	je     f011eaa1 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011ea8a:	83 ec 04             	sub    $0x4,%esp
f011ea8d:	68 94 a9 13 f0       	push   $0xf013a994
f011ea92:	68 91 04 00 00       	push   $0x491
f011ea97:	68 7a a2 13 f0       	push   $0xf013a27a
f011ea9c:	e8 05 17 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eaa1:	e8 e6 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eaa6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eaa9:	74 17                	je     f011eac2 <test_kmalloc_worstfit+0x1291>
f011eaab:	83 ec 04             	sub    $0x4,%esp
f011eaae:	68 94 a2 13 f0       	push   $0xf013a294
f011eab3:	68 92 04 00 00       	push   $0x492
f011eab8:	68 7a a2 13 f0       	push   $0xf013a27a
f011eabd:	e8 e4 16 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011eac2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eac5:	e8 ce d2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011eaca:	29 c3                	sub    %eax,%ebx
f011eacc:	89 d8                	mov    %ebx,%eax
f011eace:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ead3:	74 17                	je     f011eaec <test_kmalloc_worstfit+0x12bb>
f011ead5:	83 ec 04             	sub    $0x4,%esp
f011ead8:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011eadd:	68 93 04 00 00       	push   $0x493
f011eae2:	68 7a a2 13 f0       	push   $0xf013a27a
f011eae7:	e8 ba 16 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eaec:	ff 45 e8             	incl   -0x18(%ebp)
f011eaef:	83 ec 08             	sub    $0x8,%esp
f011eaf2:	ff 75 e8             	pushl  -0x18(%ebp)
f011eaf5:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011eafa:	e8 2e 21 fe ff       	call   f0100c2d <cprintf>
f011eaff:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eb02:	e8 91 d2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011eb07:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eb0a:	e8 7d 51 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eb0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011eb12:	83 ec 0c             	sub    $0xc,%esp
f011eb15:	68 00 04 00 00       	push   $0x400
f011eb1a:	e8 bd 88 fe ff       	call   f01073dc <kmalloc>
f011eb1f:	83 c4 10             	add    $0x10,%esp
f011eb22:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011eb28:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011eb2f:	10 00 00 
f011eb32:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011eb38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb3d:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011eb43:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011eb49:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4e:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011eb54:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011eb5a:	29 d0                	sub    %edx,%eax
f011eb5c:	89 c1                	mov    %eax,%ecx
f011eb5e:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011eb65:	10 00 00 
f011eb68:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011eb6d:	0f b6 d0             	movzbl %al,%edx
f011eb70:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011eb76:	01 d0                	add    %edx,%eax
f011eb78:	48                   	dec    %eax
f011eb79:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011eb7f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011eb85:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb8a:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011eb90:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011eb96:	29 d0                	sub    %edx,%eax
f011eb98:	01 c1                	add    %eax,%ecx
f011eb9a:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011eba1:	10 00 00 
f011eba4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011eba9:	0f b6 c0             	movzbl %al,%eax
f011ebac:	c1 e0 04             	shl    $0x4,%eax
f011ebaf:	89 c2                	mov    %eax,%edx
f011ebb1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ebb7:	01 d0                	add    %edx,%eax
f011ebb9:	48                   	dec    %eax
f011ebba:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ebc0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ebc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebcb:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011ebd1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ebd7:	29 d0                	sub    %edx,%eax
f011ebd9:	01 c8                	add    %ecx,%eax
f011ebdb:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011ebe1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ebe7:	39 c2                	cmp    %eax,%edx
f011ebe9:	74 17                	je     f011ec02 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011ebeb:	83 ec 04             	sub    $0x4,%esp
f011ebee:	68 94 a9 13 f0       	push   $0xf013a994
f011ebf3:	68 9a 04 00 00       	push   $0x49a
f011ebf8:	68 7a a2 13 f0       	push   $0xf013a27a
f011ebfd:	e8 a4 15 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec02:	e8 85 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec07:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ec0a:	74 17                	je     f011ec23 <test_kmalloc_worstfit+0x13f2>
f011ec0c:	83 ec 04             	sub    $0x4,%esp
f011ec0f:	68 94 a2 13 f0       	push   $0xf013a294
f011ec14:	68 9b 04 00 00       	push   $0x49b
f011ec19:	68 7a a2 13 f0       	push   $0xf013a27a
f011ec1e:	e8 83 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ec23:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ec26:	e8 6d d1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ec2b:	29 c3                	sub    %eax,%ebx
f011ec2d:	89 d8                	mov    %ebx,%eax
f011ec2f:	83 f8 01             	cmp    $0x1,%eax
f011ec32:	74 17                	je     f011ec4b <test_kmalloc_worstfit+0x141a>
f011ec34:	83 ec 04             	sub    $0x4,%esp
f011ec37:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011ec3c:	68 9c 04 00 00       	push   $0x49c
f011ec41:	68 7a a2 13 f0       	push   $0xf013a27a
f011ec46:	e8 5b 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec4b:	ff 45 e8             	incl   -0x18(%ebp)
f011ec4e:	83 ec 08             	sub    $0x8,%esp
f011ec51:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec54:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011ec59:	e8 cf 1f fe ff       	call   f0100c2d <cprintf>
f011ec5e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec61:	e8 32 d1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ec66:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec69:	e8 1e 50 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ec6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011ec71:	83 ec 0c             	sub    $0xc,%esp
f011ec74:	68 00 f0 1f 00       	push   $0x1ff000
f011ec79:	e8 5e 87 fe ff       	call   f01073dc <kmalloc>
f011ec7e:	83 c4 10             	add    $0x10,%esp
f011ec81:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011ec87:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011ec8e:	10 00 00 
f011ec91:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011ec97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec9c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011eca2:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011eca8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecad:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011ecb3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011ecb9:	29 d0                	sub    %edx,%eax
f011ecbb:	89 c1                	mov    %eax,%ecx
f011ecbd:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011ecc4:	10 00 00 
f011ecc7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011eccc:	0f b6 d0             	movzbl %al,%edx
f011eccf:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011ecd5:	01 d0                	add    %edx,%eax
f011ecd7:	48                   	dec    %eax
f011ecd8:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011ecde:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011ece4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece9:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011ecef:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011ecf5:	29 d0                	sub    %edx,%eax
f011ecf7:	01 c1                	add    %eax,%ecx
f011ecf9:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011ed00:	10 00 00 
f011ed03:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ed08:	0f b6 c0             	movzbl %al,%eax
f011ed0b:	c1 e0 04             	shl    $0x4,%eax
f011ed0e:	89 c2                	mov    %eax,%edx
f011ed10:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011ed16:	01 d0                	add    %edx,%eax
f011ed18:	48                   	dec    %eax
f011ed19:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011ed1f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ed25:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed2a:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011ed30:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011ed36:	29 d0                	sub    %edx,%eax
f011ed38:	01 c8                	add    %ecx,%eax
f011ed3a:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011ed40:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed46:	39 c2                	cmp    %eax,%edx
f011ed48:	74 17                	je     f011ed61 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011ed4a:	83 ec 04             	sub    $0x4,%esp
f011ed4d:	68 94 a9 13 f0       	push   $0xf013a994
f011ed52:	68 a3 04 00 00       	push   $0x4a3
f011ed57:	68 7a a2 13 f0       	push   $0xf013a27a
f011ed5c:	e8 45 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed61:	e8 26 4f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ed66:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed69:	74 17                	je     f011ed82 <test_kmalloc_worstfit+0x1551>
f011ed6b:	83 ec 04             	sub    $0x4,%esp
f011ed6e:	68 94 a2 13 f0       	push   $0xf013a294
f011ed73:	68 a4 04 00 00       	push   $0x4a4
f011ed78:	68 7a a2 13 f0       	push   $0xf013a27a
f011ed7d:	e8 24 14 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ed82:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed85:	e8 0e d0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ed8a:	29 c3                	sub    %eax,%ebx
f011ed8c:	89 d8                	mov    %ebx,%eax
f011ed8e:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ed93:	74 17                	je     f011edac <test_kmalloc_worstfit+0x157b>
f011ed95:	83 ec 04             	sub    $0x4,%esp
f011ed98:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011ed9d:	68 a5 04 00 00       	push   $0x4a5
f011eda2:	68 7a a2 13 f0       	push   $0xf013a27a
f011eda7:	e8 fa 13 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011edac:	ff 45 e8             	incl   -0x18(%ebp)
f011edaf:	83 ec 08             	sub    $0x8,%esp
f011edb2:	ff 75 e8             	pushl  -0x18(%ebp)
f011edb5:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011edba:	e8 6e 1e fe ff       	call   f0100c2d <cprintf>
f011edbf:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011edc2:	e8 d1 cf fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011edc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011edca:	e8 bd 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011edcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011edd2:	83 ec 0c             	sub    $0xc,%esp
f011edd5:	68 00 00 40 00       	push   $0x400000
f011edda:	e8 fd 85 fe ff       	call   f01073dc <kmalloc>
f011eddf:	83 c4 10             	add    $0x10,%esp
f011ede2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011ede8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011edee:	85 c0                	test   %eax,%eax
f011edf0:	74 17                	je     f011ee09 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011edf2:	83 ec 04             	sub    $0x4,%esp
f011edf5:	68 94 a9 13 f0       	push   $0xf013a994
f011edfa:	68 ad 04 00 00       	push   $0x4ad
f011edff:	68 7a a2 13 f0       	push   $0xf013a27a
f011ee04:	e8 9d 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee09:	e8 7e 4e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ee0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee11:	74 17                	je     f011ee2a <test_kmalloc_worstfit+0x15f9>
f011ee13:	83 ec 04             	sub    $0x4,%esp
f011ee16:	68 94 a2 13 f0       	push   $0xf013a294
f011ee1b:	68 ae 04 00 00       	push   $0x4ae
f011ee20:	68 7a a2 13 f0       	push   $0xf013a27a
f011ee25:	e8 7c 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011ee2a:	e8 69 cf fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ee2f:	89 c2                	mov    %eax,%edx
f011ee31:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ee34:	39 c2                	cmp    %eax,%edx
f011ee36:	74 17                	je     f011ee4f <test_kmalloc_worstfit+0x161e>
f011ee38:	83 ec 04             	sub    $0x4,%esp
f011ee3b:	68 b2 a7 13 f0       	push   $0xf013a7b2
f011ee40:	68 af 04 00 00       	push   $0x4af
f011ee45:	68 7a a2 13 f0       	push   $0xf013a27a
f011ee4a:	e8 57 13 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee4f:	ff 45 e8             	incl   -0x18(%ebp)
f011ee52:	83 ec 08             	sub    $0x8,%esp
f011ee55:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee58:	68 b4 a9 13 f0       	push   $0xf013a9b4
f011ee5d:	e8 cb 1d fe ff       	call   f0100c2d <cprintf>
f011ee62:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011ee65:	83 ec 0c             	sub    $0xc,%esp
f011ee68:	68 c8 a9 13 f0       	push   $0xf013a9c8
f011ee6d:	e8 bb 1d fe ff       	call   f0100c2d <cprintf>
f011ee72:	83 c4 10             	add    $0x10,%esp


	return 1;
f011ee75:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011ee7a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ee7d:	5b                   	pop    %ebx
f011ee7e:	5f                   	pop    %edi
f011ee7f:	5d                   	pop    %ebp
f011ee80:	c3                   	ret    

f011ee81 <test_kfree>:

int test_kfree()
{
f011ee81:	55                   	push   %ebp
f011ee82:	89 e5                	mov    %esp,%ebp
f011ee84:	57                   	push   %edi
f011ee85:	53                   	push   %ebx
f011ee86:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011ee8c:	83 ec 0c             	sub    $0xc,%esp
f011ee8f:	68 bc a1 13 f0       	push   $0xf013a1bc
f011ee94:	e8 94 1d fe ff       	call   f0100c2d <cprintf>
f011ee99:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ee9c:	83 ec 0c             	sub    $0xc,%esp
f011ee9f:	68 ec a1 13 f0       	push   $0xf013a1ec
f011eea4:	e8 84 1d fe ff       	call   f0100c2d <cprintf>
f011eea9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011eeac:	83 ec 0c             	sub    $0xc,%esp
f011eeaf:	68 bc a1 13 f0       	push   $0xf013a1bc
f011eeb4:	e8 74 1d fe ff       	call   f0100c2d <cprintf>
f011eeb9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011eebc:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011eec0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011eec4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011eeca:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011eed0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011eed7:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011eede:	e8 b5 ce fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011eee3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011eee6:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011eeec:	b9 14 00 00 00       	mov    $0x14,%ecx
f011eef1:	b8 00 00 00 00       	mov    $0x0,%eax
f011eef6:	89 d7                	mov    %edx,%edi
f011eef8:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011eefa:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011ef00:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef05:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef0a:	89 d7                	mov    %edx,%edi
f011ef0c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011ef0e:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011ef14:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ef19:	b8 00 00 00 00       	mov    $0x0,%eax
f011ef1e:	89 d7                	mov    %edx,%edi
f011ef20:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ef22:	e8 71 ce fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ef27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ef2a:	e8 5d 4d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ef2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ef32:	83 ec 0c             	sub    $0xc,%esp
f011ef35:	68 00 fc 1f 00       	push   $0x1ffc00
f011ef3a:	e8 9d 84 fe ff       	call   f01073dc <kmalloc>
f011ef3f:	83 c4 10             	add    $0x10,%esp
f011ef42:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ef48:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011ef4e:	89 c1                	mov    %eax,%ecx
f011ef50:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011ef57:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ef5a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef5f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011ef62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ef65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef6a:	f7 75 c8             	divl   -0x38(%ebp)
f011ef6d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ef70:	29 d0                	sub    %edx,%eax
f011ef72:	89 c3                	mov    %eax,%ebx
f011ef74:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011ef7b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ef80:	0f b6 d0             	movzbl %al,%edx
f011ef83:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ef86:	01 d0                	add    %edx,%eax
f011ef88:	48                   	dec    %eax
f011ef89:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011ef8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ef8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef94:	f7 75 c0             	divl   -0x40(%ebp)
f011ef97:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ef9a:	29 d0                	sub    %edx,%eax
f011ef9c:	01 c3                	add    %eax,%ebx
f011ef9e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011efa5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011efaa:	0f b6 c0             	movzbl %al,%eax
f011efad:	c1 e0 04             	shl    $0x4,%eax
f011efb0:	89 c2                	mov    %eax,%edx
f011efb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011efb5:	01 d0                	add    %edx,%eax
f011efb7:	48                   	dec    %eax
f011efb8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011efbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011efbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011efc3:	f7 75 b8             	divl   -0x48(%ebp)
f011efc6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011efc9:	29 d0                	sub    %edx,%eax
f011efcb:	01 d8                	add    %ebx,%eax
f011efcd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011efd2:	39 c1                	cmp    %eax,%ecx
f011efd4:	74 17                	je     f011efed <test_kfree+0x16c>
f011efd6:	83 ec 04             	sub    $0x4,%esp
f011efd9:	68 60 a3 13 f0       	push   $0xf013a360
f011efde:	68 d7 04 00 00       	push   $0x4d7
f011efe3:	68 7a a2 13 f0       	push   $0xf013a27a
f011efe8:	e8 b9 11 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efed:	e8 9a 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011eff2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011eff5:	74 17                	je     f011f00e <test_kfree+0x18d>
f011eff7:	83 ec 04             	sub    $0x4,%esp
f011effa:	68 94 a2 13 f0       	push   $0xf013a294
f011efff:	68 d8 04 00 00       	push   $0x4d8
f011f004:	68 7a a2 13 f0       	push   $0xf013a27a
f011f009:	e8 98 11 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f00e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f011:	e8 82 cd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f016:	29 c3                	sub    %eax,%ebx
f011f018:	89 d8                	mov    %ebx,%eax
f011f01a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f01f:	74 17                	je     f011f038 <test_kfree+0x1b7>
f011f021:	83 ec 04             	sub    $0x4,%esp
f011f024:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f029:	68 d9 04 00 00       	push   $0x4d9
f011f02e:	68 7a a2 13 f0       	push   $0xf013a27a
f011f033:	e8 6e 11 fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f038:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f03f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f042:	e8 51 cd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f047:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f04a:	e8 3d 4c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f04f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f052:	83 ec 0c             	sub    $0xc,%esp
f011f055:	68 00 fc 1f 00       	push   $0x1ffc00
f011f05a:	e8 7d 83 fe ff       	call   f01073dc <kmalloc>
f011f05f:	83 c4 10             	add    $0x10,%esp
f011f062:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f068:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f06e:	89 c1                	mov    %eax,%ecx
f011f070:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f077:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f07a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f07f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f082:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f085:	ba 00 00 00 00       	mov    $0x0,%edx
f011f08a:	f7 75 b0             	divl   -0x50(%ebp)
f011f08d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f090:	29 d0                	sub    %edx,%eax
f011f092:	89 c3                	mov    %eax,%ebx
f011f094:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f09b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f0a0:	0f b6 d0             	movzbl %al,%edx
f011f0a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f0a6:	01 d0                	add    %edx,%eax
f011f0a8:	48                   	dec    %eax
f011f0a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f0ac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f0af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0b4:	f7 75 a8             	divl   -0x58(%ebp)
f011f0b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f0ba:	29 d0                	sub    %edx,%eax
f011f0bc:	01 c3                	add    %eax,%ebx
f011f0be:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f0c5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f0ca:	0f b6 c0             	movzbl %al,%eax
f011f0cd:	c1 e0 04             	shl    $0x4,%eax
f011f0d0:	89 c2                	mov    %eax,%edx
f011f0d2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f0d5:	01 d0                	add    %edx,%eax
f011f0d7:	48                   	dec    %eax
f011f0d8:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f0db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f0de:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e3:	f7 75 a0             	divl   -0x60(%ebp)
f011f0e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f0e9:	29 d0                	sub    %edx,%eax
f011f0eb:	01 d8                	add    %ebx,%eax
f011f0ed:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f0f2:	39 c1                	cmp    %eax,%ecx
f011f0f4:	74 17                	je     f011f10d <test_kfree+0x28c>
f011f0f6:	83 ec 04             	sub    $0x4,%esp
f011f0f9:	68 60 a3 13 f0       	push   $0xf013a360
f011f0fe:	68 e0 04 00 00       	push   $0x4e0
f011f103:	68 7a a2 13 f0       	push   $0xf013a27a
f011f108:	e8 99 10 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f10d:	e8 7a 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f112:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f115:	74 17                	je     f011f12e <test_kfree+0x2ad>
f011f117:	83 ec 04             	sub    $0x4,%esp
f011f11a:	68 94 a2 13 f0       	push   $0xf013a294
f011f11f:	68 e1 04 00 00       	push   $0x4e1
f011f124:	68 7a a2 13 f0       	push   $0xf013a27a
f011f129:	e8 78 10 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f12e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f131:	e8 62 cc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f136:	29 c3                	sub    %eax,%ebx
f011f138:	89 d8                	mov    %ebx,%eax
f011f13a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f13f:	74 17                	je     f011f158 <test_kfree+0x2d7>
f011f141:	83 ec 04             	sub    $0x4,%esp
f011f144:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f149:	68 e2 04 00 00       	push   $0x4e2
f011f14e:	68 7a a2 13 f0       	push   $0xf013a27a
f011f153:	e8 4e 10 fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f158:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f15f:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f162:	e8 31 cc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f167:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f16a:	e8 1d 4b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f16f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f172:	83 ec 0c             	sub    $0xc,%esp
f011f175:	68 00 08 00 00       	push   $0x800
f011f17a:	e8 5d 82 fe ff       	call   f01073dc <kmalloc>
f011f17f:	83 c4 10             	add    $0x10,%esp
f011f182:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f188:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f18e:	89 c1                	mov    %eax,%ecx
f011f190:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f197:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f19a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f19f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f1a2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f1a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1aa:	f7 75 98             	divl   -0x68(%ebp)
f011f1ad:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f1b0:	29 d0                	sub    %edx,%eax
f011f1b2:	89 c3                	mov    %eax,%ebx
f011f1b4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f1bb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f1c0:	0f b6 d0             	movzbl %al,%edx
f011f1c3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f1c6:	01 d0                	add    %edx,%eax
f011f1c8:	48                   	dec    %eax
f011f1c9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f1cc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f1cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1d4:	f7 75 90             	divl   -0x70(%ebp)
f011f1d7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f1da:	29 d0                	sub    %edx,%eax
f011f1dc:	01 c3                	add    %eax,%ebx
f011f1de:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f1e5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f1ea:	0f b6 c0             	movzbl %al,%eax
f011f1ed:	c1 e0 04             	shl    $0x4,%eax
f011f1f0:	89 c2                	mov    %eax,%edx
f011f1f2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f1f5:	01 d0                	add    %edx,%eax
f011f1f7:	48                   	dec    %eax
f011f1f8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f1fb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f1fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011f203:	f7 75 88             	divl   -0x78(%ebp)
f011f206:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f209:	29 d0                	sub    %edx,%eax
f011f20b:	01 d8                	add    %ebx,%eax
f011f20d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f212:	39 c1                	cmp    %eax,%ecx
f011f214:	74 17                	je     f011f22d <test_kfree+0x3ac>
f011f216:	83 ec 04             	sub    $0x4,%esp
f011f219:	68 60 a3 13 f0       	push   $0xf013a360
f011f21e:	68 e9 04 00 00       	push   $0x4e9
f011f223:	68 7a a2 13 f0       	push   $0xf013a27a
f011f228:	e8 79 0f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f22d:	e8 5a 4a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f232:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f235:	74 17                	je     f011f24e <test_kfree+0x3cd>
f011f237:	83 ec 04             	sub    $0x4,%esp
f011f23a:	68 94 a2 13 f0       	push   $0xf013a294
f011f23f:	68 ea 04 00 00       	push   $0x4ea
f011f244:	68 7a a2 13 f0       	push   $0xf013a27a
f011f249:	e8 58 0f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f24e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f251:	e8 42 cb fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f256:	29 c3                	sub    %eax,%ebx
f011f258:	89 d8                	mov    %ebx,%eax
f011f25a:	83 f8 01             	cmp    $0x1,%eax
f011f25d:	74 17                	je     f011f276 <test_kfree+0x3f5>
f011f25f:	83 ec 04             	sub    $0x4,%esp
f011f262:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f267:	68 eb 04 00 00       	push   $0x4eb
f011f26c:	68 7a a2 13 f0       	push   $0xf013a27a
f011f271:	e8 30 0f fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f276:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011f27d:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f280:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f286:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f289:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f290:	eb 0e                	jmp    f011f2a0 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011f292:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f295:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f298:	01 d0                	add    %edx,%eax
f011f29a:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f29d:	ff 45 f4             	incl   -0xc(%ebp)
f011f2a0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011f2a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f2a9:	7f e7                	jg     f011f292 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f2ab:	e8 e8 ca fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f2b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f2b3:	e8 d4 49 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f2b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f2bb:	83 ec 0c             	sub    $0xc,%esp
f011f2be:	68 00 08 00 00       	push   $0x800
f011f2c3:	e8 14 81 fe ff       	call   f01073dc <kmalloc>
f011f2c8:	83 c4 10             	add    $0x10,%esp
f011f2cb:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f2d1:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f2d7:	89 c1                	mov    %eax,%ecx
f011f2d9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f2e0:	10 00 00 
f011f2e3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f2e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f2ee:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f2f4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2ff:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f305:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f30b:	29 d0                	sub    %edx,%eax
f011f30d:	89 c3                	mov    %eax,%ebx
f011f30f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f316:	10 00 00 
f011f319:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f31e:	0f b6 d0             	movzbl %al,%edx
f011f321:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f327:	01 d0                	add    %edx,%eax
f011f329:	48                   	dec    %eax
f011f32a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f330:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f336:	ba 00 00 00 00       	mov    $0x0,%edx
f011f33b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f341:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f347:	29 d0                	sub    %edx,%eax
f011f349:	01 c3                	add    %eax,%ebx
f011f34b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f352:	10 00 00 
f011f355:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f35a:	0f b6 c0             	movzbl %al,%eax
f011f35d:	c1 e0 04             	shl    $0x4,%eax
f011f360:	89 c2                	mov    %eax,%edx
f011f362:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f368:	01 d0                	add    %edx,%eax
f011f36a:	48                   	dec    %eax
f011f36b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f371:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f377:	ba 00 00 00 00       	mov    $0x0,%edx
f011f37c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f382:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f388:	29 d0                	sub    %edx,%eax
f011f38a:	01 d8                	add    %ebx,%eax
f011f38c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f391:	39 c1                	cmp    %eax,%ecx
f011f393:	74 17                	je     f011f3ac <test_kfree+0x52b>
f011f395:	83 ec 04             	sub    $0x4,%esp
f011f398:	68 60 a3 13 f0       	push   $0xf013a360
f011f39d:	68 f7 04 00 00       	push   $0x4f7
f011f3a2:	68 7a a2 13 f0       	push   $0xf013a27a
f011f3a7:	e8 fa 0d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3ac:	e8 db 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f3b1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f3b4:	74 17                	je     f011f3cd <test_kfree+0x54c>
f011f3b6:	83 ec 04             	sub    $0x4,%esp
f011f3b9:	68 94 a2 13 f0       	push   $0xf013a294
f011f3be:	68 f8 04 00 00       	push   $0x4f8
f011f3c3:	68 7a a2 13 f0       	push   $0xf013a27a
f011f3c8:	e8 d9 0d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3cd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f3d0:	e8 c3 c9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f3d5:	29 c3                	sub    %eax,%ebx
f011f3d7:	89 d8                	mov    %ebx,%eax
f011f3d9:	83 f8 01             	cmp    $0x1,%eax
f011f3dc:	74 17                	je     f011f3f5 <test_kfree+0x574>
f011f3de:	83 ec 04             	sub    $0x4,%esp
f011f3e1:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f3e6:	68 f9 04 00 00       	push   $0x4f9
f011f3eb:	68 7a a2 13 f0       	push   $0xf013a27a
f011f3f0:	e8 b1 0d fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f3f5:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011f3fc:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f3ff:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f405:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f40f:	eb 0e                	jmp    f011f41f <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011f411:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f414:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f417:	01 d0                	add    %edx,%eax
f011f419:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f41c:	ff 45 f4             	incl   -0xc(%ebp)
f011f41f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011f425:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f428:	7f e7                	jg     f011f411 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f42a:	e8 69 c9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f42f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f432:	e8 55 48 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f437:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f43a:	83 ec 0c             	sub    $0xc,%esp
f011f43d:	68 00 1c 00 00       	push   $0x1c00
f011f442:	e8 95 7f fe ff       	call   f01073dc <kmalloc>
f011f447:	83 c4 10             	add    $0x10,%esp
f011f44a:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f450:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f456:	89 c1                	mov    %eax,%ecx
f011f458:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f45f:	10 00 00 
f011f462:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f468:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f46d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f473:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f479:	ba 00 00 00 00       	mov    $0x0,%edx
f011f47e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f484:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f48a:	29 d0                	sub    %edx,%eax
f011f48c:	89 c3                	mov    %eax,%ebx
f011f48e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f495:	10 00 00 
f011f498:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f49d:	0f b6 d0             	movzbl %al,%edx
f011f4a0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f4a6:	01 d0                	add    %edx,%eax
f011f4a8:	48                   	dec    %eax
f011f4a9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f4af:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ba:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f4c0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f4c6:	29 d0                	sub    %edx,%eax
f011f4c8:	01 c3                	add    %eax,%ebx
f011f4ca:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f4d1:	10 00 00 
f011f4d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f4d9:	0f b6 c0             	movzbl %al,%eax
f011f4dc:	c1 e0 04             	shl    $0x4,%eax
f011f4df:	89 c2                	mov    %eax,%edx
f011f4e1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f4e7:	01 d0                	add    %edx,%eax
f011f4e9:	48                   	dec    %eax
f011f4ea:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f4f0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f4f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4fb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f501:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f507:	29 d0                	sub    %edx,%eax
f011f509:	01 d8                	add    %ebx,%eax
f011f50b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f510:	39 c1                	cmp    %eax,%ecx
f011f512:	74 17                	je     f011f52b <test_kfree+0x6aa>
f011f514:	83 ec 04             	sub    $0x4,%esp
f011f517:	68 60 a3 13 f0       	push   $0xf013a360
f011f51c:	68 05 05 00 00       	push   $0x505
f011f521:	68 7a a2 13 f0       	push   $0xf013a27a
f011f526:	e8 7b 0c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f52b:	e8 5c 47 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f530:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f533:	74 17                	je     f011f54c <test_kfree+0x6cb>
f011f535:	83 ec 04             	sub    $0x4,%esp
f011f538:	68 94 a2 13 f0       	push   $0xf013a294
f011f53d:	68 06 05 00 00       	push   $0x506
f011f542:	68 7a a2 13 f0       	push   $0xf013a27a
f011f547:	e8 5a 0c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f54c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f54f:	e8 44 c8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f554:	29 c3                	sub    %eax,%ebx
f011f556:	89 d8                	mov    %ebx,%eax
f011f558:	83 f8 02             	cmp    $0x2,%eax
f011f55b:	74 17                	je     f011f574 <test_kfree+0x6f3>
f011f55d:	83 ec 04             	sub    $0x4,%esp
f011f560:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f565:	68 07 05 00 00       	push   $0x507
f011f56a:	68 7a a2 13 f0       	push   $0xf013a27a
f011f56f:	e8 32 0c fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f574:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011f57b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f57e:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f584:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f587:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f58e:	eb 0e                	jmp    f011f59e <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011f590:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f593:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f596:	01 d0                	add    %edx,%eax
f011f598:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f59b:	ff 45 f4             	incl   -0xc(%ebp)
f011f59e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011f5a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f5a7:	7f e7                	jg     f011f590 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f5a9:	e8 ea c7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f5ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f5b1:	e8 d6 46 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f5b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f5b9:	83 ec 0c             	sub    $0xc,%esp
f011f5bc:	68 00 fc 2f 00       	push   $0x2ffc00
f011f5c1:	e8 16 7e fe ff       	call   f01073dc <kmalloc>
f011f5c6:	83 c4 10             	add    $0x10,%esp
f011f5c9:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f5cf:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f5d5:	89 c1                	mov    %eax,%ecx
f011f5d7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f5de:	10 00 00 
f011f5e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f5e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f5ec:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f5f2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f5f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5fd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f603:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f609:	29 d0                	sub    %edx,%eax
f011f60b:	89 c3                	mov    %eax,%ebx
f011f60d:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f614:	10 00 00 
f011f617:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f61c:	0f b6 d0             	movzbl %al,%edx
f011f61f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f625:	01 d0                	add    %edx,%eax
f011f627:	48                   	dec    %eax
f011f628:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f62e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f634:	ba 00 00 00 00       	mov    $0x0,%edx
f011f639:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f63f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f645:	29 d0                	sub    %edx,%eax
f011f647:	01 c3                	add    %eax,%ebx
f011f649:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f650:	10 00 00 
f011f653:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f658:	0f b6 c0             	movzbl %al,%eax
f011f65b:	c1 e0 04             	shl    $0x4,%eax
f011f65e:	89 c2                	mov    %eax,%edx
f011f660:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f666:	01 d0                	add    %edx,%eax
f011f668:	48                   	dec    %eax
f011f669:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f66f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f675:	ba 00 00 00 00       	mov    $0x0,%edx
f011f67a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f680:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f686:	29 d0                	sub    %edx,%eax
f011f688:	01 d8                	add    %ebx,%eax
f011f68a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011f68f:	39 c1                	cmp    %eax,%ecx
f011f691:	74 17                	je     f011f6aa <test_kfree+0x829>
f011f693:	83 ec 04             	sub    $0x4,%esp
f011f696:	68 60 a3 13 f0       	push   $0xf013a360
f011f69b:	68 13 05 00 00       	push   $0x513
f011f6a0:	68 7a a2 13 f0       	push   $0xf013a27a
f011f6a5:	e8 fc 0a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6aa:	e8 dd 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f6af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f6b2:	74 17                	je     f011f6cb <test_kfree+0x84a>
f011f6b4:	83 ec 04             	sub    $0x4,%esp
f011f6b7:	68 94 a2 13 f0       	push   $0xf013a294
f011f6bc:	68 14 05 00 00       	push   $0x514
f011f6c1:	68 7a a2 13 f0       	push   $0xf013a27a
f011f6c6:	e8 db 0a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f6cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f6ce:	e8 c5 c6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f6d3:	29 c3                	sub    %eax,%ebx
f011f6d5:	89 d8                	mov    %ebx,%eax
f011f6d7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011f6dc:	74 17                	je     f011f6f5 <test_kfree+0x874>
f011f6de:	83 ec 04             	sub    $0x4,%esp
f011f6e1:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f6e6:	68 15 05 00 00       	push   $0x515
f011f6eb:	68 7a a2 13 f0       	push   $0xf013a27a
f011f6f0:	e8 b1 0a fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011f6f5:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011f6fc:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011f6ff:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f705:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011f708:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f70f:	eb 0e                	jmp    f011f71f <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011f711:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f714:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f717:	01 d0                	add    %edx,%eax
f011f719:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011f71c:	ff 45 f4             	incl   -0xc(%ebp)
f011f71f:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011f725:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f728:	7f e7                	jg     f011f711 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011f72a:	e8 69 c6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f72f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f732:	e8 55 45 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f737:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011f73a:	83 ec 0c             	sub    $0xc,%esp
f011f73d:	68 00 fc 5f 00       	push   $0x5ffc00
f011f742:	e8 95 7c fe ff       	call   f01073dc <kmalloc>
f011f747:	83 c4 10             	add    $0x10,%esp
f011f74a:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f750:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011f756:	89 c1                	mov    %eax,%ecx
f011f758:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f75f:	10 00 00 
f011f762:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f768:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f76d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f773:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f779:	ba 00 00 00 00       	mov    $0x0,%edx
f011f77e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f784:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f78a:	29 d0                	sub    %edx,%eax
f011f78c:	89 c3                	mov    %eax,%ebx
f011f78e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f795:	10 00 00 
f011f798:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f79d:	0f b6 d0             	movzbl %al,%edx
f011f7a0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f7a6:	01 d0                	add    %edx,%eax
f011f7a8:	48                   	dec    %eax
f011f7a9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f7af:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f7b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7ba:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f7c0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f7c6:	29 d0                	sub    %edx,%eax
f011f7c8:	01 c3                	add    %eax,%ebx
f011f7ca:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011f7d1:	10 00 00 
f011f7d4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f7d9:	0f b6 c0             	movzbl %al,%eax
f011f7dc:	c1 e0 04             	shl    $0x4,%eax
f011f7df:	89 c2                	mov    %eax,%edx
f011f7e1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f7e7:	01 d0                	add    %edx,%eax
f011f7e9:	48                   	dec    %eax
f011f7ea:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011f7f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f7f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7fb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011f801:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f807:	29 d0                	sub    %edx,%eax
f011f809:	01 d8                	add    %ebx,%eax
f011f80b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011f810:	39 c1                	cmp    %eax,%ecx
f011f812:	74 17                	je     f011f82b <test_kfree+0x9aa>
f011f814:	83 ec 04             	sub    $0x4,%esp
f011f817:	68 60 a3 13 f0       	push   $0xf013a360
f011f81c:	68 21 05 00 00       	push   $0x521
f011f821:	68 7a a2 13 f0       	push   $0xf013a27a
f011f826:	e8 7b 09 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f82b:	e8 5c 44 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f830:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f833:	74 17                	je     f011f84c <test_kfree+0x9cb>
f011f835:	83 ec 04             	sub    $0x4,%esp
f011f838:	68 94 a2 13 f0       	push   $0xf013a294
f011f83d:	68 22 05 00 00       	push   $0x522
f011f842:	68 7a a2 13 f0       	push   $0xf013a27a
f011f847:	e8 5a 09 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f84c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f84f:	e8 44 c5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f854:	29 c3                	sub    %eax,%ebx
f011f856:	89 d8                	mov    %ebx,%eax
f011f858:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f85d:	74 17                	je     f011f876 <test_kfree+0x9f5>
f011f85f:	83 ec 04             	sub    $0x4,%esp
f011f862:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f867:	68 23 05 00 00       	push   $0x523
f011f86c:	68 7a a2 13 f0       	push   $0xf013a27a
f011f871:	e8 30 09 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011f876:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f011f87d:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011f880:	e8 13 c5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f885:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f888:	e8 ff 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f88d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011f890:	83 ec 0c             	sub    $0xc,%esp
f011f893:	68 00 38 00 00       	push   $0x3800
f011f898:	e8 3f 7b fe ff       	call   f01073dc <kmalloc>
f011f89d:	83 c4 10             	add    $0x10,%esp
f011f8a0:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8a6:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011f8ac:	89 c1                	mov    %eax,%ecx
f011f8ae:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011f8b5:	10 00 00 
f011f8b8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f8be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8c3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011f8c9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f8cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8d4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011f8da:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f8e0:	29 d0                	sub    %edx,%eax
f011f8e2:	89 c3                	mov    %eax,%ebx
f011f8e4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011f8eb:	10 00 00 
f011f8ee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f8f3:	0f b6 d0             	movzbl %al,%edx
f011f8f6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f8fc:	01 d0                	add    %edx,%eax
f011f8fe:	48                   	dec    %eax
f011f8ff:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011f905:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f90b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f910:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011f916:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f91c:	29 d0                	sub    %edx,%eax
f011f91e:	01 c3                	add    %eax,%ebx
f011f920:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011f927:	10 00 00 
f011f92a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011f92f:	0f b6 c0             	movzbl %al,%eax
f011f932:	c1 e0 04             	shl    $0x4,%eax
f011f935:	89 c2                	mov    %eax,%edx
f011f937:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f93d:	01 d0                	add    %edx,%eax
f011f93f:	48                   	dec    %eax
f011f940:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011f946:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f94c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f951:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011f957:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f95d:	29 d0                	sub    %edx,%eax
f011f95f:	01 d8                	add    %ebx,%eax
f011f961:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011f966:	39 c1                	cmp    %eax,%ecx
f011f968:	74 17                	je     f011f981 <test_kfree+0xb00>
f011f96a:	83 ec 04             	sub    $0x4,%esp
f011f96d:	68 60 a3 13 f0       	push   $0xf013a360
f011f972:	68 2a 05 00 00       	push   $0x52a
f011f977:	68 7a a2 13 f0       	push   $0xf013a27a
f011f97c:	e8 25 08 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f981:	e8 06 43 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011f986:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f989:	74 17                	je     f011f9a2 <test_kfree+0xb21>
f011f98b:	83 ec 04             	sub    $0x4,%esp
f011f98e:	68 94 a2 13 f0       	push   $0xf013a294
f011f993:	68 2b 05 00 00       	push   $0x52b
f011f998:	68 7a a2 13 f0       	push   $0xf013a27a
f011f99d:	e8 04 08 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f9a2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f9a5:	e8 ee c3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011f9aa:	29 c3                	sub    %eax,%ebx
f011f9ac:	89 d8                	mov    %ebx,%eax
f011f9ae:	83 f8 04             	cmp    $0x4,%eax
f011f9b1:	74 17                	je     f011f9ca <test_kfree+0xb49>
f011f9b3:	83 ec 04             	sub    $0x4,%esp
f011f9b6:	68 fc a2 13 f0       	push   $0xf013a2fc
f011f9bb:	68 2c 05 00 00       	push   $0x52c
f011f9c0:	68 7a a2 13 f0       	push   $0xf013a27a
f011f9c5:	e8 dc 07 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011f9ca:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f011f9d1:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011f9d4:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011f9da:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011f9dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f9e4:	eb 0e                	jmp    f011f9f4 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f011f9e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f9e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f9ec:	01 d0                	add    %edx,%eax
f011f9ee:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011f9f1:	ff 45 f4             	incl   -0xc(%ebp)
f011f9f4:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011f9fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f9fd:	7f e7                	jg     f011f9e6 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011f9ff:	e8 94 c3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fa04:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fa0a:	e8 7d 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa0f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011fa15:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fa1b:	83 ec 0c             	sub    $0xc,%esp
f011fa1e:	50                   	push   %eax
f011fa1f:	e8 d2 79 fe ff       	call   f01073f6 <kfree>
f011fa24:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa27:	e8 60 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa2c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fa32:	74 17                	je     f011fa4b <test_kfree+0xbca>
f011fa34:	83 ec 04             	sub    $0x4,%esp
f011fa37:	68 94 a2 13 f0       	push   $0xf013a294
f011fa3c:	68 3b 05 00 00       	push   $0x53b
f011fa41:	68 7a a2 13 f0       	push   $0xf013a27a
f011fa46:	e8 5b 07 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fa4b:	e8 48 c3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fa50:	89 c2                	mov    %eax,%edx
f011fa52:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fa58:	29 c2                	sub    %eax,%edx
f011fa5a:	89 d0                	mov    %edx,%eax
f011fa5c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fa61:	74 17                	je     f011fa7a <test_kfree+0xbf9>
f011fa63:	83 ec 04             	sub    $0x4,%esp
f011fa66:	68 04 aa 13 f0       	push   $0xf013aa04
f011fa6b:	68 3c 05 00 00       	push   $0x53c
f011fa70:	68 7a a2 13 f0       	push   $0xf013a27a
f011fa75:	e8 2c 07 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fa7a:	e8 19 c3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fa7f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fa85:	e8 02 42 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fa8a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f011fa90:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fa96:	83 ec 0c             	sub    $0xc,%esp
f011fa99:	50                   	push   %eax
f011fa9a:	e8 57 79 fe ff       	call   f01073f6 <kfree>
f011fa9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011faa2:	e8 e5 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011faa7:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011faad:	74 17                	je     f011fac6 <test_kfree+0xc45>
f011faaf:	83 ec 04             	sub    $0x4,%esp
f011fab2:	68 94 a2 13 f0       	push   $0xf013a294
f011fab7:	68 42 05 00 00       	push   $0x542
f011fabc:	68 7a a2 13 f0       	push   $0xf013a27a
f011fac1:	e8 e0 06 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fac6:	e8 cd c2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011facb:	89 c2                	mov    %eax,%edx
f011facd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fad3:	29 c2                	sub    %eax,%edx
f011fad5:	89 d0                	mov    %edx,%eax
f011fad7:	83 f8 01             	cmp    $0x1,%eax
f011fada:	74 17                	je     f011faf3 <test_kfree+0xc72>
f011fadc:	83 ec 04             	sub    $0x4,%esp
f011fadf:	68 04 aa 13 f0       	push   $0xf013aa04
f011fae4:	68 43 05 00 00       	push   $0x543
f011fae9:	68 7a a2 13 f0       	push   $0xf013a27a
f011faee:	e8 b3 06 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011faf3:	e8 a0 c2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011faf8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fafe:	e8 89 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb03:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011fb09:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fb0f:	83 ec 0c             	sub    $0xc,%esp
f011fb12:	50                   	push   %eax
f011fb13:	e8 de 78 fe ff       	call   f01073f6 <kfree>
f011fb18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb1b:	e8 6c 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb20:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fb26:	74 17                	je     f011fb3f <test_kfree+0xcbe>
f011fb28:	83 ec 04             	sub    $0x4,%esp
f011fb2b:	68 94 a2 13 f0       	push   $0xf013a294
f011fb30:	68 49 05 00 00       	push   $0x549
f011fb35:	68 7a a2 13 f0       	push   $0xf013a27a
f011fb3a:	e8 67 06 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011fb3f:	e8 54 c2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fb44:	89 c2                	mov    %eax,%edx
f011fb46:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fb4c:	29 c2                	sub    %eax,%edx
f011fb4e:	89 d0                	mov    %edx,%eax
f011fb50:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fb55:	74 17                	je     f011fb6e <test_kfree+0xced>
f011fb57:	83 ec 04             	sub    $0x4,%esp
f011fb5a:	68 04 aa 13 f0       	push   $0xf013aa04
f011fb5f:	68 4a 05 00 00       	push   $0x54a
f011fb64:	68 7a a2 13 f0       	push   $0xf013a27a
f011fb69:	e8 38 06 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fb6e:	e8 25 c2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fb73:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb79:	e8 0e 41 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb7e:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011fb84:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011fb8a:	83 ec 0c             	sub    $0xc,%esp
f011fb8d:	50                   	push   %eax
f011fb8e:	e8 63 78 fe ff       	call   f01073f6 <kfree>
f011fb93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb96:	e8 f1 40 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fb9b:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fba1:	74 17                	je     f011fbba <test_kfree+0xd39>
f011fba3:	83 ec 04             	sub    $0x4,%esp
f011fba6:	68 94 a2 13 f0       	push   $0xf013a294
f011fbab:	68 50 05 00 00       	push   $0x550
f011fbb0:	68 7a a2 13 f0       	push   $0xf013a27a
f011fbb5:	e8 ec 05 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011fbba:	e8 d9 c1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fbbf:	89 c2                	mov    %eax,%edx
f011fbc1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fbc7:	29 c2                	sub    %eax,%edx
f011fbc9:	89 d0                	mov    %edx,%eax
f011fbcb:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fbd0:	74 17                	je     f011fbe9 <test_kfree+0xd68>
f011fbd2:	83 ec 04             	sub    $0x4,%esp
f011fbd5:	68 04 aa 13 f0       	push   $0xf013aa04
f011fbda:	68 51 05 00 00       	push   $0x551
f011fbdf:	68 7a a2 13 f0       	push   $0xf013a27a
f011fbe4:	e8 bd 05 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011fbe9:	83 ec 0c             	sub    $0xc,%esp
f011fbec:	68 3c aa 13 f0       	push   $0xf013aa3c
f011fbf1:	e8 37 10 fe ff       	call   f0100c2d <cprintf>
f011fbf6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011fbf9:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fbff:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fc02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc09:	eb 1e                	jmp    f011fc29 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f011fc0b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011fc11:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fc14:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc17:	01 c8                	add    %ecx,%eax
f011fc19:	8a 00                	mov    (%eax),%al
f011fc1b:	0f be c0             	movsbl %al,%eax
f011fc1e:	01 d0                	add    %edx,%eax
f011fc20:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fc26:	ff 45 f4             	incl   -0xc(%ebp)
f011fc29:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fc2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc32:	7f d7                	jg     f011fc0b <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f011fc34:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011fc3a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fc40:	89 c1                	mov    %eax,%ecx
f011fc42:	01 c9                	add    %ecx,%ecx
f011fc44:	01 c8                	add    %ecx,%eax
f011fc46:	39 c2                	cmp    %eax,%edx
f011fc48:	74 17                	je     f011fc61 <test_kfree+0xde0>
f011fc4a:	83 ec 04             	sub    $0x4,%esp
f011fc4d:	68 60 aa 13 f0       	push   $0xf013aa60
f011fc52:	68 5e 05 00 00       	push   $0x55e
f011fc57:	68 7a a2 13 f0       	push   $0xf013a27a
f011fc5c:	e8 45 05 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011fc61:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fc67:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fc6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc71:	eb 1e                	jmp    f011fc91 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f011fc73:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f011fc79:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fc7c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc7f:	01 c8                	add    %ecx,%eax
f011fc81:	8a 00                	mov    (%eax),%al
f011fc83:	0f be c0             	movsbl %al,%eax
f011fc86:	01 d0                	add    %edx,%eax
f011fc88:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fc8e:	ff 45 f4             	incl   -0xc(%ebp)
f011fc91:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011fc97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc9a:	7f d7                	jg     f011fc73 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011fc9c:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f011fca2:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f011fca8:	c1 e2 02             	shl    $0x2,%edx
f011fcab:	39 d0                	cmp    %edx,%eax
f011fcad:	74 17                	je     f011fcc6 <test_kfree+0xe45>
f011fcaf:	83 ec 04             	sub    $0x4,%esp
f011fcb2:	68 60 aa 13 f0       	push   $0xf013aa60
f011fcb7:	68 66 05 00 00       	push   $0x566
f011fcbc:	68 7a a2 13 f0       	push   $0xf013a27a
f011fcc1:	e8 e0 04 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011fcc6:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fccc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fccf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fcd6:	eb 1e                	jmp    f011fcf6 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f011fcd8:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f011fcde:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fce1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fce4:	01 c8                	add    %ecx,%eax
f011fce6:	8a 00                	mov    (%eax),%al
f011fce8:	0f be c0             	movsbl %al,%eax
f011fceb:	01 d0                	add    %edx,%eax
f011fced:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fcf3:	ff 45 f4             	incl   -0xc(%ebp)
f011fcf6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011fcfc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fcff:	7f d7                	jg     f011fcd8 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011fd01:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f011fd07:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f011fd0d:	89 d0                	mov    %edx,%eax
f011fd0f:	c1 e0 02             	shl    $0x2,%eax
f011fd12:	01 d0                	add    %edx,%eax
f011fd14:	39 c1                	cmp    %eax,%ecx
f011fd16:	74 17                	je     f011fd2f <test_kfree+0xeae>
f011fd18:	83 ec 04             	sub    $0x4,%esp
f011fd1b:	68 60 aa 13 f0       	push   $0xf013aa60
f011fd20:	68 6e 05 00 00       	push   $0x56e
f011fd25:	68 7a a2 13 f0       	push   $0xf013a27a
f011fd2a:	e8 77 04 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011fd2f:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fd35:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fd38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd3f:	eb 1e                	jmp    f011fd5f <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f011fd41:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f011fd47:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011fd4a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd4d:	01 c8                	add    %ecx,%eax
f011fd4f:	8a 00                	mov    (%eax),%al
f011fd51:	0f be c0             	movsbl %al,%eax
f011fd54:	01 d0                	add    %edx,%eax
f011fd56:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fd5c:	ff 45 f4             	incl   -0xc(%ebp)
f011fd5f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011fd65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd68:	7f d7                	jg     f011fd41 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011fd6a:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f011fd70:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f011fd76:	89 d0                	mov    %edx,%eax
f011fd78:	01 c0                	add    %eax,%eax
f011fd7a:	01 d0                	add    %edx,%eax
f011fd7c:	01 c0                	add    %eax,%eax
f011fd7e:	01 d0                	add    %edx,%eax
f011fd80:	39 c1                	cmp    %eax,%ecx
f011fd82:	74 17                	je     f011fd9b <test_kfree+0xf1a>
f011fd84:	83 ec 04             	sub    $0x4,%esp
f011fd87:	68 60 aa 13 f0       	push   $0xf013aa60
f011fd8c:	68 76 05 00 00       	push   $0x576
f011fd91:	68 7a a2 13 f0       	push   $0xf013a27a
f011fd96:	e8 0b 04 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f011fd9b:	83 ec 0c             	sub    $0xc,%esp
f011fd9e:	68 93 aa 13 f0       	push   $0xf013aa93
f011fda3:	e8 85 0e fe ff       	call   f0100c2d <cprintf>
f011fda8:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f011fdab:	e8 e8 bf fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fdb0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fdb3:	e8 d4 3e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011fdb8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f011fdbb:	83 ec 0c             	sub    $0xc,%esp
f011fdbe:	68 00 50 00 00       	push   $0x5000
f011fdc3:	e8 14 76 fe ff       	call   f01073dc <kmalloc>
f011fdc8:	83 c4 10             	add    $0x10,%esp
f011fdcb:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdd1:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011fdd7:	89 c1                	mov    %eax,%ecx
f011fdd9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011fde0:	10 00 00 
f011fde3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011fde9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fdee:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011fdf4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fdfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdff:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011fe05:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fe0b:	29 d0                	sub    %edx,%eax
f011fe0d:	89 c3                	mov    %eax,%ebx
f011fe0f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011fe16:	10 00 00 
f011fe19:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011fe1e:	0f b6 d0             	movzbl %al,%edx
f011fe21:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011fe27:	01 d0                	add    %edx,%eax
f011fe29:	48                   	dec    %eax
f011fe2a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011fe30:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fe36:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe3b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011fe41:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fe47:	29 d0                	sub    %edx,%eax
f011fe49:	01 c3                	add    %eax,%ebx
f011fe4b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011fe52:	10 00 00 
f011fe55:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011fe5a:	0f b6 c0             	movzbl %al,%eax
f011fe5d:	c1 e0 04             	shl    $0x4,%eax
f011fe60:	89 c2                	mov    %eax,%edx
f011fe62:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fe68:	01 d0                	add    %edx,%eax
f011fe6a:	48                   	dec    %eax
f011fe6b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011fe71:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fe77:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011fe82:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fe88:	29 d0                	sub    %edx,%eax
f011fe8a:	01 d8                	add    %ebx,%eax
f011fe8c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011fe91:	39 c1                	cmp    %eax,%ecx
f011fe93:	74 17                	je     f011feac <test_kfree+0x102b>
f011fe95:	83 ec 04             	sub    $0x4,%esp
f011fe98:	68 60 a3 13 f0       	push   $0xf013a360
f011fe9d:	68 80 05 00 00       	push   $0x580
f011fea2:	68 7a a2 13 f0       	push   $0xf013a27a
f011fea7:	e8 fa 02 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011feac:	e8 db 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011feb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011feb4:	74 17                	je     f011fecd <test_kfree+0x104c>
f011feb6:	83 ec 04             	sub    $0x4,%esp
f011feb9:	68 94 a2 13 f0       	push   $0xf013a294
f011febe:	68 81 05 00 00       	push   $0x581
f011fec3:	68 7a a2 13 f0       	push   $0xf013a27a
f011fec8:	e8 d9 02 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fecd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fed0:	e8 c3 be fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011fed5:	29 c3                	sub    %eax,%ebx
f011fed7:	89 d8                	mov    %ebx,%eax
f011fed9:	83 f8 05             	cmp    $0x5,%eax
f011fedc:	74 17                	je     f011fef5 <test_kfree+0x1074>
f011fede:	83 ec 04             	sub    $0x4,%esp
f011fee1:	68 fc a2 13 f0       	push   $0xf013a2fc
f011fee6:	68 82 05 00 00       	push   $0x582
f011feeb:	68 7a a2 13 f0       	push   $0xf013a27a
f011fef0:	e8 b1 02 fe ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011fef5:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f011fefc:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011feff:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011ff05:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011ff08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff0f:	eb 0e                	jmp    f011ff1f <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f011ff11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff14:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff17:	01 d0                	add    %edx,%eax
f011ff19:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011ff1c:	ff 45 f4             	incl   -0xc(%ebp)
f011ff1f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011ff25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff28:	7f e7                	jg     f011ff11 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff2a:	e8 69 be fe ff       	call   f010bd98 <sys_calculate_free_frames>
f011ff2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff32:	e8 55 3d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f011ff37:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011ff3a:	83 ec 0c             	sub    $0xc,%esp
f011ff3d:	68 00 00 10 00       	push   $0x100000
f011ff42:	e8 95 74 fe ff       	call   f01073dc <kmalloc>
f011ff47:	83 c4 10             	add    $0x10,%esp
f011ff4a:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff50:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f011ff56:	89 c1                	mov    %eax,%ecx
f011ff58:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ff5f:	10 00 00 
f011ff62:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ff68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff6d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ff73:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ff79:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff7e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ff84:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ff8a:	29 d0                	sub    %edx,%eax
f011ff8c:	89 c3                	mov    %eax,%ebx
f011ff8e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ff95:	10 00 00 
f011ff98:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ff9d:	0f b6 d0             	movzbl %al,%edx
f011ffa0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ffa6:	01 d0                	add    %edx,%eax
f011ffa8:	48                   	dec    %eax
f011ffa9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ffaf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ffb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffba:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ffc0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ffc6:	29 d0                	sub    %edx,%eax
f011ffc8:	01 c3                	add    %eax,%ebx
f011ffca:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ffd1:	10 00 00 
f011ffd4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f011ffd9:	0f b6 c0             	movzbl %al,%eax
f011ffdc:	c1 e0 04             	shl    $0x4,%eax
f011ffdf:	89 c2                	mov    %eax,%edx
f011ffe1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ffe7:	01 d0                	add    %edx,%eax
f011ffe9:	48                   	dec    %eax
f011ffea:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011fff0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fff6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fffb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0120001:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120007:	29 d0                	sub    %edx,%eax
f0120009:	01 d8                	add    %ebx,%eax
f012000b:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120010:	39 c1                	cmp    %eax,%ecx
f0120012:	74 17                	je     f012002b <test_kfree+0x11aa>
f0120014:	83 ec 04             	sub    $0x4,%esp
f0120017:	68 60 a3 13 f0       	push   $0xf013a360
f012001c:	68 8e 05 00 00       	push   $0x58e
f0120021:	68 7a a2 13 f0       	push   $0xf013a27a
f0120026:	e8 7b 01 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012002b:	e8 5c 3c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120030:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120033:	74 17                	je     f012004c <test_kfree+0x11cb>
f0120035:	83 ec 04             	sub    $0x4,%esp
f0120038:	68 94 a2 13 f0       	push   $0xf013a294
f012003d:	68 8f 05 00 00       	push   $0x58f
f0120042:	68 7a a2 13 f0       	push   $0xf013a27a
f0120047:	e8 5a 01 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012004c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012004f:	e8 44 bd fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120054:	29 c3                	sub    %eax,%ebx
f0120056:	89 d8                	mov    %ebx,%eax
f0120058:	3d 00 01 00 00       	cmp    $0x100,%eax
f012005d:	74 17                	je     f0120076 <test_kfree+0x11f5>
f012005f:	83 ec 04             	sub    $0x4,%esp
f0120062:	68 fc a2 13 f0       	push   $0xf013a2fc
f0120067:	68 90 05 00 00       	push   $0x590
f012006c:	68 7a a2 13 f0       	push   $0xf013a27a
f0120071:	e8 30 01 fe ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120076:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f012007d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120080:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120086:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120090:	eb 0e                	jmp    f01200a0 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0120092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120095:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120098:	01 d0                	add    %edx,%eax
f012009a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012009d:	ff 45 f4             	incl   -0xc(%ebp)
f01200a0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01200a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200a9:	7f e7                	jg     f0120092 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f01200ab:	e8 ac 66 ff ff       	call   f011675c <isKHeapPlacementStrategyNEXTFIT>
f01200b0:	84 c0                	test   %al,%al
f01200b2:	0f 84 ac 06 00 00    	je     f0120764 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01200b8:	e8 db bc fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01200bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01200c0:	e8 c7 3b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01200c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01200c8:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01200cf:	10 00 00 
f01200d2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01200d8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200dd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01200e3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01200e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01200ee:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01200f4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01200fa:	29 d0                	sub    %edx,%eax
f01200fc:	89 c1                	mov    %eax,%ecx
f01200fe:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120105:	10 00 00 
f0120108:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012010d:	0f b6 d0             	movzbl %al,%edx
f0120110:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120116:	01 d0                	add    %edx,%eax
f0120118:	48                   	dec    %eax
f0120119:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012011f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120125:	ba 00 00 00 00       	mov    $0x0,%edx
f012012a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120130:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120136:	29 d0                	sub    %edx,%eax
f0120138:	01 c1                	add    %eax,%ecx
f012013a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120141:	10 00 00 
f0120144:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120149:	0f b6 c0             	movzbl %al,%eax
f012014c:	c1 e0 04             	shl    $0x4,%eax
f012014f:	89 c2                	mov    %eax,%edx
f0120151:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120157:	01 d0                	add    %edx,%eax
f0120159:	48                   	dec    %eax
f012015a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120160:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120166:	ba 00 00 00 00       	mov    $0x0,%edx
f012016b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120171:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120177:	29 d0                	sub    %edx,%eax
f0120179:	01 c8                	add    %ecx,%eax
f012017b:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120180:	29 c2                	sub    %eax,%edx
f0120182:	89 d0                	mov    %edx,%eax
f0120184:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f012018a:	83 ec 0c             	sub    $0xc,%esp
f012018d:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120193:	e8 44 72 fe ff       	call   f01073dc <kmalloc>
f0120198:	83 c4 10             	add    $0x10,%esp
f012019b:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01201a1:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01201a7:	89 c1                	mov    %eax,%ecx
f01201a9:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01201b0:	10 00 00 
f01201b3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01201b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201be:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01201c4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01201ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01201cf:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01201d5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01201db:	29 d0                	sub    %edx,%eax
f01201dd:	89 c3                	mov    %eax,%ebx
f01201df:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01201e6:	10 00 00 
f01201e9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01201ee:	0f b6 d0             	movzbl %al,%edx
f01201f1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01201f7:	01 d0                	add    %edx,%eax
f01201f9:	48                   	dec    %eax
f01201fa:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120200:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120206:	ba 00 00 00 00       	mov    $0x0,%edx
f012020b:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120211:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120217:	29 d0                	sub    %edx,%eax
f0120219:	01 c3                	add    %eax,%ebx
f012021b:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120222:	10 00 00 
f0120225:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012022a:	0f b6 c0             	movzbl %al,%eax
f012022d:	c1 e0 04             	shl    $0x4,%eax
f0120230:	89 c2                	mov    %eax,%edx
f0120232:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120238:	01 d0                	add    %edx,%eax
f012023a:	48                   	dec    %eax
f012023b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120241:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120247:	ba 00 00 00 00       	mov    $0x0,%edx
f012024c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120252:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120258:	29 d0                	sub    %edx,%eax
f012025a:	01 d8                	add    %ebx,%eax
f012025c:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120261:	39 c1                	cmp    %eax,%ecx
f0120263:	74 17                	je     f012027c <test_kfree+0x13fb>
f0120265:	83 ec 04             	sub    $0x4,%esp
f0120268:	68 60 a3 13 f0       	push   $0xf013a360
f012026d:	68 9f 05 00 00       	push   $0x59f
f0120272:	68 7a a2 13 f0       	push   $0xf013a27a
f0120277:	e8 2a ff fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012027c:	e8 0b 3a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120281:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120284:	74 17                	je     f012029d <test_kfree+0x141c>
f0120286:	83 ec 04             	sub    $0x4,%esp
f0120289:	68 94 a2 13 f0       	push   $0xf013a294
f012028e:	68 a0 05 00 00       	push   $0x5a0
f0120293:	68 7a a2 13 f0       	push   $0xf013a27a
f0120298:	e8 09 ff fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012029d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01202a0:	e8 f3 ba fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01202a5:	29 c3                	sub    %eax,%ebx
f01202a7:	89 da                	mov    %ebx,%edx
f01202a9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01202af:	c1 e8 0c             	shr    $0xc,%eax
f01202b2:	39 c2                	cmp    %eax,%edx
f01202b4:	74 17                	je     f01202cd <test_kfree+0x144c>
f01202b6:	83 ec 04             	sub    $0x4,%esp
f01202b9:	68 fc a2 13 f0       	push   $0xf013a2fc
f01202be:	68 a1 05 00 00       	push   $0x5a1
f01202c3:	68 7a a2 13 f0       	push   $0xf013a27a
f01202c8:	e8 d9 fe fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01202cd:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01202d3:	48                   	dec    %eax
f01202d4:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01202da:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01202e0:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01202e3:	e8 b0 ba fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01202e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01202eb:	e8 9c 39 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01202f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01202f3:	83 ec 0c             	sub    $0xc,%esp
f01202f6:	68 00 00 30 00       	push   $0x300000
f01202fb:	e8 dc 70 fe ff       	call   f01073dc <kmalloc>
f0120300:	83 c4 10             	add    $0x10,%esp
f0120303:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120309:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012030f:	89 c1                	mov    %eax,%ecx
f0120311:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120318:	10 00 00 
f012031b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120321:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120326:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012032c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120332:	ba 00 00 00 00       	mov    $0x0,%edx
f0120337:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012033d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120343:	29 d0                	sub    %edx,%eax
f0120345:	89 c3                	mov    %eax,%ebx
f0120347:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012034e:	10 00 00 
f0120351:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120356:	0f b6 d0             	movzbl %al,%edx
f0120359:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012035f:	01 d0                	add    %edx,%eax
f0120361:	48                   	dec    %eax
f0120362:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120368:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012036e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120373:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120379:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012037f:	29 d0                	sub    %edx,%eax
f0120381:	01 c3                	add    %eax,%ebx
f0120383:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012038a:	10 00 00 
f012038d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120392:	0f b6 c0             	movzbl %al,%eax
f0120395:	c1 e0 04             	shl    $0x4,%eax
f0120398:	89 c2                	mov    %eax,%edx
f012039a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01203a0:	01 d0                	add    %edx,%eax
f01203a2:	48                   	dec    %eax
f01203a3:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01203a9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01203af:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b4:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01203ba:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01203c0:	29 d0                	sub    %edx,%eax
f01203c2:	01 d8                	add    %ebx,%eax
f01203c4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01203c9:	39 c1                	cmp    %eax,%ecx
f01203cb:	74 17                	je     f01203e4 <test_kfree+0x1563>
f01203cd:	83 ec 04             	sub    $0x4,%esp
f01203d0:	68 60 a3 13 f0       	push   $0xf013a360
f01203d5:	68 ae 05 00 00       	push   $0x5ae
f01203da:	68 7a a2 13 f0       	push   $0xf013a27a
f01203df:	e8 c2 fd fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203e4:	e8 a3 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01203e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01203ec:	74 17                	je     f0120405 <test_kfree+0x1584>
f01203ee:	83 ec 04             	sub    $0x4,%esp
f01203f1:	68 94 a2 13 f0       	push   $0xf013a294
f01203f6:	68 af 05 00 00       	push   $0x5af
f01203fb:	68 7a a2 13 f0       	push   $0xf013a27a
f0120400:	e8 a1 fd fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120405:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120408:	e8 8b b9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012040d:	29 c3                	sub    %eax,%ebx
f012040f:	89 d8                	mov    %ebx,%eax
f0120411:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120416:	74 17                	je     f012042f <test_kfree+0x15ae>
f0120418:	83 ec 04             	sub    $0x4,%esp
f012041b:	68 fc a2 13 f0       	push   $0xf013a2fc
f0120420:	68 b0 05 00 00       	push   $0x5b0
f0120425:	68 7a a2 13 f0       	push   $0xf013a27a
f012042a:	e8 77 fd fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f012042f:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120436:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120439:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012043f:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120449:	eb 0e                	jmp    f0120459 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f012044b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012044e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120451:	01 d0                	add    %edx,%eax
f0120453:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120456:	ff 45 f4             	incl   -0xc(%ebp)
f0120459:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012045f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120462:	7f e7                	jg     f012044b <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120464:	e8 2f b9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120469:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012046c:	e8 1b 38 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120471:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120474:	83 ec 0c             	sub    $0xc,%esp
f0120477:	68 00 08 00 00       	push   $0x800
f012047c:	e8 5b 6f fe ff       	call   f01073dc <kmalloc>
f0120481:	83 c4 10             	add    $0x10,%esp
f0120484:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012048a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120490:	89 c1                	mov    %eax,%ecx
f0120492:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120499:	10 00 00 
f012049c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01204a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204a7:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01204ad:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01204b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01204b8:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01204be:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01204c4:	29 d0                	sub    %edx,%eax
f01204c6:	89 c3                	mov    %eax,%ebx
f01204c8:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01204cf:	10 00 00 
f01204d2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01204d7:	0f b6 d0             	movzbl %al,%edx
f01204da:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01204e0:	01 d0                	add    %edx,%eax
f01204e2:	48                   	dec    %eax
f01204e3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01204e9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01204ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01204f4:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01204fa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120500:	29 d0                	sub    %edx,%eax
f0120502:	01 c3                	add    %eax,%ebx
f0120504:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012050b:	10 00 00 
f012050e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120513:	0f b6 c0             	movzbl %al,%eax
f0120516:	c1 e0 04             	shl    $0x4,%eax
f0120519:	89 c2                	mov    %eax,%edx
f012051b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120521:	01 d0                	add    %edx,%eax
f0120523:	48                   	dec    %eax
f0120524:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012052a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120530:	ba 00 00 00 00       	mov    $0x0,%edx
f0120535:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012053b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120541:	29 d0                	sub    %edx,%eax
f0120543:	01 d8                	add    %ebx,%eax
f0120545:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012054a:	39 c1                	cmp    %eax,%ecx
f012054c:	74 17                	je     f0120565 <test_kfree+0x16e4>
f012054e:	83 ec 04             	sub    $0x4,%esp
f0120551:	68 60 a3 13 f0       	push   $0xf013a360
f0120556:	68 bc 05 00 00       	push   $0x5bc
f012055b:	68 7a a2 13 f0       	push   $0xf013a27a
f0120560:	e8 41 fc fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120565:	e8 22 37 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012056a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012056d:	74 17                	je     f0120586 <test_kfree+0x1705>
f012056f:	83 ec 04             	sub    $0x4,%esp
f0120572:	68 94 a2 13 f0       	push   $0xf013a294
f0120577:	68 bd 05 00 00       	push   $0x5bd
f012057c:	68 7a a2 13 f0       	push   $0xf013a27a
f0120581:	e8 20 fc fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120586:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120589:	e8 0a b8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012058e:	29 c3                	sub    %eax,%ebx
f0120590:	89 d8                	mov    %ebx,%eax
f0120592:	83 f8 01             	cmp    $0x1,%eax
f0120595:	74 17                	je     f01205ae <test_kfree+0x172d>
f0120597:	83 ec 04             	sub    $0x4,%esp
f012059a:	68 fc a2 13 f0       	push   $0xf013a2fc
f012059f:	68 be 05 00 00       	push   $0x5be
f01205a4:	68 7a a2 13 f0       	push   $0xf013a27a
f01205a9:	e8 f8 fb fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f01205ae:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01205b5:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01205b8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01205be:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01205c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205c8:	eb 0e                	jmp    f01205d8 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01205ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01205cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205d0:	01 d0                	add    %edx,%eax
f01205d2:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01205d5:	ff 45 f4             	incl   -0xc(%ebp)
f01205d8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01205de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01205e1:	7f e7                	jg     f01205ca <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01205e3:	e8 b0 b7 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01205e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01205eb:	e8 9c 36 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01205f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01205f3:	83 ec 0c             	sub    $0xc,%esp
f01205f6:	68 00 00 10 00       	push   $0x100000
f01205fb:	e8 dc 6d fe ff       	call   f01073dc <kmalloc>
f0120600:	83 c4 10             	add    $0x10,%esp
f0120603:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120609:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012060f:	89 c1                	mov    %eax,%ecx
f0120611:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120618:	10 00 00 
f012061b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120621:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120626:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012062c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120632:	ba 00 00 00 00       	mov    $0x0,%edx
f0120637:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012063d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120643:	29 d0                	sub    %edx,%eax
f0120645:	89 c3                	mov    %eax,%ebx
f0120647:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012064e:	10 00 00 
f0120651:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120656:	0f b6 d0             	movzbl %al,%edx
f0120659:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012065f:	01 d0                	add    %edx,%eax
f0120661:	48                   	dec    %eax
f0120662:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120668:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012066e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120673:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120679:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012067f:	29 d0                	sub    %edx,%eax
f0120681:	01 c3                	add    %eax,%ebx
f0120683:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f012068a:	10 00 00 
f012068d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120692:	0f b6 c0             	movzbl %al,%eax
f0120695:	c1 e0 04             	shl    $0x4,%eax
f0120698:	89 c2                	mov    %eax,%edx
f012069a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01206a0:	01 d0                	add    %edx,%eax
f01206a2:	48                   	dec    %eax
f01206a3:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f01206a9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01206af:	ba 00 00 00 00       	mov    $0x0,%edx
f01206b4:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f01206ba:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01206c0:	29 d0                	sub    %edx,%eax
f01206c2:	01 d8                	add    %ebx,%eax
f01206c4:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01206c9:	39 c1                	cmp    %eax,%ecx
f01206cb:	74 17                	je     f01206e4 <test_kfree+0x1863>
f01206cd:	83 ec 04             	sub    $0x4,%esp
f01206d0:	68 60 a3 13 f0       	push   $0xf013a360
f01206d5:	68 ca 05 00 00       	push   $0x5ca
f01206da:	68 7a a2 13 f0       	push   $0xf013a27a
f01206df:	e8 c2 fa fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206e4:	e8 a3 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01206e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01206ec:	74 17                	je     f0120705 <test_kfree+0x1884>
f01206ee:	83 ec 04             	sub    $0x4,%esp
f01206f1:	68 94 a2 13 f0       	push   $0xf013a294
f01206f6:	68 cb 05 00 00       	push   $0x5cb
f01206fb:	68 7a a2 13 f0       	push   $0xf013a27a
f0120700:	e8 a1 fa fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120705:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120708:	e8 8b b6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012070d:	29 c3                	sub    %eax,%ebx
f012070f:	89 d8                	mov    %ebx,%eax
f0120711:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120716:	74 17                	je     f012072f <test_kfree+0x18ae>
f0120718:	83 ec 04             	sub    $0x4,%esp
f012071b:	68 fc a2 13 f0       	push   $0xf013a2fc
f0120720:	68 cc 05 00 00       	push   $0x5cc
f0120725:	68 7a a2 13 f0       	push   $0xf013a27a
f012072a:	e8 77 fa fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f012072f:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120736:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120739:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012073f:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120742:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120749:	eb 0e                	jmp    f0120759 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f012074b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012074e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120751:	01 d0                	add    %edx,%eax
f0120753:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120756:	ff 45 f4             	incl   -0xc(%ebp)
f0120759:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012075f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120762:	7f e7                	jg     f012074b <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120764:	83 ec 0c             	sub    $0xc,%esp
f0120767:	68 9a aa 13 f0       	push   $0xf013aa9a
f012076c:	e8 bc 04 fe ff       	call   f0100c2d <cprintf>
f0120771:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120774:	e8 1f b6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120779:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012077c:	e8 0b 35 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120781:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120784:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012078a:	83 ec 0c             	sub    $0xc,%esp
f012078d:	50                   	push   %eax
f012078e:	e8 63 6c fe ff       	call   f01073f6 <kfree>
f0120793:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120796:	e8 f1 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012079b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012079e:	74 17                	je     f01207b7 <test_kfree+0x1936>
f01207a0:	83 ec 04             	sub    $0x4,%esp
f01207a3:	68 94 a2 13 f0       	push   $0xf013a294
f01207a8:	68 dd 05 00 00       	push   $0x5dd
f01207ad:	68 7a a2 13 f0       	push   $0xf013a27a
f01207b2:	e8 ef f9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01207b7:	e8 dc b5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01207bc:	89 c2                	mov    %eax,%edx
f01207be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01207c1:	29 c2                	sub    %eax,%edx
f01207c3:	89 d0                	mov    %edx,%eax
f01207c5:	83 f8 02             	cmp    $0x2,%eax
f01207c8:	74 17                	je     f01207e1 <test_kfree+0x1960>
f01207ca:	83 ec 04             	sub    $0x4,%esp
f01207cd:	68 04 aa 13 f0       	push   $0xf013aa04
f01207d2:	68 de 05 00 00       	push   $0x5de
f01207d7:	68 7a a2 13 f0       	push   $0xf013a27a
f01207dc:	e8 c5 f9 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01207e1:	e8 b2 b5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01207e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207e9:	e8 9e 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01207ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01207f1:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01207f7:	83 ec 0c             	sub    $0xc,%esp
f01207fa:	50                   	push   %eax
f01207fb:	e8 f6 6b fe ff       	call   f01073f6 <kfree>
f0120800:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120803:	e8 84 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120808:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012080b:	74 17                	je     f0120824 <test_kfree+0x19a3>
f012080d:	83 ec 04             	sub    $0x4,%esp
f0120810:	68 94 a2 13 f0       	push   $0xf013a294
f0120815:	68 e4 05 00 00       	push   $0x5e4
f012081a:	68 7a a2 13 f0       	push   $0xf013a27a
f012081f:	e8 82 f9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120824:	e8 6f b5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120829:	89 c2                	mov    %eax,%edx
f012082b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012082e:	29 c2                	sub    %eax,%edx
f0120830:	89 d0                	mov    %edx,%eax
f0120832:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120837:	74 17                	je     f0120850 <test_kfree+0x19cf>
f0120839:	83 ec 04             	sub    $0x4,%esp
f012083c:	68 04 aa 13 f0       	push   $0xf013aa04
f0120841:	68 e5 05 00 00       	push   $0x5e5
f0120846:	68 7a a2 13 f0       	push   $0xf013a27a
f012084b:	e8 56 f9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120850:	e8 43 b5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120855:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120858:	e8 2f 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012085d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120860:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120866:	83 ec 0c             	sub    $0xc,%esp
f0120869:	50                   	push   %eax
f012086a:	e8 87 6b fe ff       	call   f01073f6 <kfree>
f012086f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120872:	e8 15 34 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120877:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012087a:	74 17                	je     f0120893 <test_kfree+0x1a12>
f012087c:	83 ec 04             	sub    $0x4,%esp
f012087f:	68 94 a2 13 f0       	push   $0xf013a294
f0120884:	68 eb 05 00 00       	push   $0x5eb
f0120889:	68 7a a2 13 f0       	push   $0xf013a27a
f012088e:	e8 13 f9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120893:	e8 00 b5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120898:	89 c2                	mov    %eax,%edx
f012089a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012089d:	29 c2                	sub    %eax,%edx
f012089f:	89 d0                	mov    %edx,%eax
f01208a1:	83 f8 01             	cmp    $0x1,%eax
f01208a4:	74 17                	je     f01208bd <test_kfree+0x1a3c>
f01208a6:	83 ec 04             	sub    $0x4,%esp
f01208a9:	68 04 aa 13 f0       	push   $0xf013aa04
f01208ae:	68 ec 05 00 00       	push   $0x5ec
f01208b3:	68 7a a2 13 f0       	push   $0xf013a27a
f01208b8:	e8 e9 f8 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01208bd:	e8 d6 b4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01208c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208c5:	e8 c2 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01208ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01208cd:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01208d3:	83 ec 0c             	sub    $0xc,%esp
f01208d6:	50                   	push   %eax
f01208d7:	e8 1a 6b fe ff       	call   f01073f6 <kfree>
f01208dc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208df:	e8 a8 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01208e4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208e7:	74 17                	je     f0120900 <test_kfree+0x1a7f>
f01208e9:	83 ec 04             	sub    $0x4,%esp
f01208ec:	68 94 a2 13 f0       	push   $0xf013a294
f01208f1:	68 f2 05 00 00       	push   $0x5f2
f01208f6:	68 7a a2 13 f0       	push   $0xf013a27a
f01208fb:	e8 a6 f8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120900:	e8 93 b4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120905:	89 c2                	mov    %eax,%edx
f0120907:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012090a:	29 c2                	sub    %eax,%edx
f012090c:	89 d0                	mov    %edx,%eax
f012090e:	83 f8 04             	cmp    $0x4,%eax
f0120911:	74 17                	je     f012092a <test_kfree+0x1aa9>
f0120913:	83 ec 04             	sub    $0x4,%esp
f0120916:	68 04 aa 13 f0       	push   $0xf013aa04
f012091b:	68 f3 05 00 00       	push   $0x5f3
f0120920:	68 7a a2 13 f0       	push   $0xf013a27a
f0120925:	e8 7c f8 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012092a:	e8 69 b4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012092f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120932:	e8 55 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120937:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012093a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120940:	83 ec 0c             	sub    $0xc,%esp
f0120943:	50                   	push   %eax
f0120944:	e8 ad 6a fe ff       	call   f01073f6 <kfree>
f0120949:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012094c:	e8 3b 33 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120951:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120954:	74 17                	je     f012096d <test_kfree+0x1aec>
f0120956:	83 ec 04             	sub    $0x4,%esp
f0120959:	68 94 a2 13 f0       	push   $0xf013a294
f012095e:	68 f9 05 00 00       	push   $0x5f9
f0120963:	68 7a a2 13 f0       	push   $0xf013a27a
f0120968:	e8 39 f8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f012096d:	e8 26 b4 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120972:	89 c2                	mov    %eax,%edx
f0120974:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120977:	29 c2                	sub    %eax,%edx
f0120979:	89 d0                	mov    %edx,%eax
f012097b:	83 f8 05             	cmp    $0x5,%eax
f012097e:	74 17                	je     f0120997 <test_kfree+0x1b16>
f0120980:	83 ec 04             	sub    $0x4,%esp
f0120983:	68 04 aa 13 f0       	push   $0xf013aa04
f0120988:	68 fa 05 00 00       	push   $0x5fa
f012098d:	68 7a a2 13 f0       	push   $0xf013a27a
f0120992:	e8 0f f8 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120997:	e8 fc b3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012099c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012099f:	e8 e8 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01209a7:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01209ad:	83 ec 0c             	sub    $0xc,%esp
f01209b0:	50                   	push   %eax
f01209b1:	e8 40 6a fe ff       	call   f01073f6 <kfree>
f01209b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209b9:	e8 ce 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01209be:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209c1:	74 17                	je     f01209da <test_kfree+0x1b59>
f01209c3:	83 ec 04             	sub    $0x4,%esp
f01209c6:	68 94 a2 13 f0       	push   $0xf013a294
f01209cb:	68 00 06 00 00       	push   $0x600
f01209d0:	68 7a a2 13 f0       	push   $0xf013a27a
f01209d5:	e8 cc f7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01209da:	e8 b9 b3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01209df:	89 c2                	mov    %eax,%edx
f01209e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01209e4:	29 c2                	sub    %eax,%edx
f01209e6:	89 d0                	mov    %edx,%eax
f01209e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01209ed:	74 17                	je     f0120a06 <test_kfree+0x1b85>
f01209ef:	83 ec 04             	sub    $0x4,%esp
f01209f2:	68 04 aa 13 f0       	push   $0xf013aa04
f01209f7:	68 01 06 00 00       	push   $0x601
f01209fc:	68 7a a2 13 f0       	push   $0xf013a27a
f0120a01:	e8 a0 f7 fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120a06:	e8 51 5d ff ff       	call   f011675c <isKHeapPlacementStrategyNEXTFIT>
f0120a0b:	84 c0                	test   %al,%al
f0120a0d:	0f 84 80 02 00 00    	je     f0120c93 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120a13:	e8 80 b3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120a18:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a1b:	e8 6c 32 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120a20:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120a23:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120a29:	83 ec 0c             	sub    $0xc,%esp
f0120a2c:	50                   	push   %eax
f0120a2d:	e8 c4 69 fe ff       	call   f01073f6 <kfree>
f0120a32:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120a35:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120a3c:	10 00 00 
f0120a3f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120a45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a4a:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120a50:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120a56:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a5b:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120a61:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120a67:	29 d0                	sub    %edx,%eax
f0120a69:	89 c1                	mov    %eax,%ecx
f0120a6b:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120a72:	10 00 00 
f0120a75:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120a7a:	0f b6 d0             	movzbl %al,%edx
f0120a7d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0120a83:	01 d0                	add    %edx,%eax
f0120a85:	48                   	dec    %eax
f0120a86:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120a8c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120a92:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a97:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120a9d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120aa3:	29 d0                	sub    %edx,%eax
f0120aa5:	01 c1                	add    %eax,%ecx
f0120aa7:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120aae:	10 00 00 
f0120ab1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0120ab6:	0f b6 c0             	movzbl %al,%eax
f0120ab9:	c1 e0 04             	shl    $0x4,%eax
f0120abc:	89 c2                	mov    %eax,%edx
f0120abe:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120ac4:	01 d0                	add    %edx,%eax
f0120ac6:	48                   	dec    %eax
f0120ac7:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120acd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ad8:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120ade:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120ae4:	29 d0                	sub    %edx,%eax
f0120ae6:	01 c8                	add    %ecx,%eax
f0120ae8:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120aed:	29 c2                	sub    %eax,%edx
f0120aef:	89 d0                	mov    %edx,%eax
f0120af1:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120af7:	e8 90 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120afc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120aff:	74 17                	je     f0120b18 <test_kfree+0x1c97>
f0120b01:	83 ec 04             	sub    $0x4,%esp
f0120b04:	68 94 a2 13 f0       	push   $0xf013a294
f0120b09:	68 0b 06 00 00       	push   $0x60b
f0120b0e:	68 7a a2 13 f0       	push   $0xf013a27a
f0120b13:	e8 8e f6 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b18:	e8 7b b2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120b1d:	89 c2                	mov    %eax,%edx
f0120b1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b22:	29 c2                	sub    %eax,%edx
f0120b24:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120b2a:	c1 e8 0c             	shr    $0xc,%eax
f0120b2d:	39 c2                	cmp    %eax,%edx
f0120b2f:	74 17                	je     f0120b48 <test_kfree+0x1cc7>
f0120b31:	83 ec 04             	sub    $0x4,%esp
f0120b34:	68 04 aa 13 f0       	push   $0xf013aa04
f0120b39:	68 0c 06 00 00       	push   $0x60c
f0120b3e:	68 7a a2 13 f0       	push   $0xf013a27a
f0120b43:	e8 5e f6 fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120b48:	e8 4b b2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120b4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120b50:	e8 37 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b55:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120b58:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120b5e:	83 ec 0c             	sub    $0xc,%esp
f0120b61:	50                   	push   %eax
f0120b62:	e8 8f 68 fe ff       	call   f01073f6 <kfree>
f0120b67:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b6a:	e8 1d 31 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120b6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b72:	74 17                	je     f0120b8b <test_kfree+0x1d0a>
f0120b74:	83 ec 04             	sub    $0x4,%esp
f0120b77:	68 94 a2 13 f0       	push   $0xf013a294
f0120b7c:	68 12 06 00 00       	push   $0x612
f0120b81:	68 7a a2 13 f0       	push   $0xf013a27a
f0120b86:	e8 1b f6 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b8b:	e8 08 b2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120b90:	89 c2                	mov    %eax,%edx
f0120b92:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b95:	29 c2                	sub    %eax,%edx
f0120b97:	89 d0                	mov    %edx,%eax
f0120b99:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120b9e:	74 17                	je     f0120bb7 <test_kfree+0x1d36>
f0120ba0:	83 ec 04             	sub    $0x4,%esp
f0120ba3:	68 04 aa 13 f0       	push   $0xf013aa04
f0120ba8:	68 13 06 00 00       	push   $0x613
f0120bad:	68 7a a2 13 f0       	push   $0xf013a27a
f0120bb2:	e8 ef f5 fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120bb7:	e8 dc b1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120bbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120bbf:	e8 c8 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120bc4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120bc7:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120bcd:	83 ec 0c             	sub    $0xc,%esp
f0120bd0:	50                   	push   %eax
f0120bd1:	e8 20 68 fe ff       	call   f01073f6 <kfree>
f0120bd6:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bd9:	e8 ae 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120bde:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120be1:	74 17                	je     f0120bfa <test_kfree+0x1d79>
f0120be3:	83 ec 04             	sub    $0x4,%esp
f0120be6:	68 94 a2 13 f0       	push   $0xf013a294
f0120beb:	68 19 06 00 00       	push   $0x619
f0120bf0:	68 7a a2 13 f0       	push   $0xf013a27a
f0120bf5:	e8 ac f5 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bfa:	e8 99 b1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120bff:	89 c2                	mov    %eax,%edx
f0120c01:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c04:	29 c2                	sub    %eax,%edx
f0120c06:	89 d0                	mov    %edx,%eax
f0120c08:	83 f8 01             	cmp    $0x1,%eax
f0120c0b:	74 17                	je     f0120c24 <test_kfree+0x1da3>
f0120c0d:	83 ec 04             	sub    $0x4,%esp
f0120c10:	68 04 aa 13 f0       	push   $0xf013aa04
f0120c15:	68 1a 06 00 00       	push   $0x61a
f0120c1a:	68 7a a2 13 f0       	push   $0xf013a27a
f0120c1f:	e8 82 f5 fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c24:	e8 6f b1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120c29:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c2c:	e8 5b 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c31:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0120c34:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120c3a:	83 ec 0c             	sub    $0xc,%esp
f0120c3d:	50                   	push   %eax
f0120c3e:	e8 b3 67 fe ff       	call   f01073f6 <kfree>
f0120c43:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c46:	e8 41 30 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120c4b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c4e:	74 17                	je     f0120c67 <test_kfree+0x1de6>
f0120c50:	83 ec 04             	sub    $0x4,%esp
f0120c53:	68 94 a2 13 f0       	push   $0xf013a294
f0120c58:	68 20 06 00 00       	push   $0x620
f0120c5d:	68 7a a2 13 f0       	push   $0xf013a27a
f0120c62:	e8 3f f5 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c67:	e8 2c b1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120c6c:	89 c2                	mov    %eax,%edx
f0120c6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c71:	29 c2                	sub    %eax,%edx
f0120c73:	89 d0                	mov    %edx,%eax
f0120c75:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120c7a:	74 17                	je     f0120c93 <test_kfree+0x1e12>
f0120c7c:	83 ec 04             	sub    $0x4,%esp
f0120c7f:	68 04 aa 13 f0       	push   $0xf013aa04
f0120c84:	68 21 06 00 00       	push   $0x621
f0120c89:	68 7a a2 13 f0       	push   $0xf013a27a
f0120c8e:	e8 13 f5 fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0120c93:	e8 00 b1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120c98:	89 c2                	mov    %eax,%edx
f0120c9a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120c9d:	39 c2                	cmp    %eax,%edx
f0120c9f:	74 17                	je     f0120cb8 <test_kfree+0x1e37>
f0120ca1:	83 ec 04             	sub    $0x4,%esp
f0120ca4:	68 a4 aa 13 f0       	push   $0xf013aaa4
f0120ca9:	68 24 06 00 00       	push   $0x624
f0120cae:	68 7a a2 13 f0       	push   $0xf013a27a
f0120cb3:	e8 ee f4 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0120cb8:	83 ec 0c             	sub    $0xc,%esp
f0120cbb:	68 d8 aa 13 f0       	push   $0xf013aad8
f0120cc0:	e8 68 ff fd ff       	call   f0100c2d <cprintf>
f0120cc5:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0120cc8:	83 ec 0c             	sub    $0xc,%esp
f0120ccb:	6a 03                	push   $0x3
f0120ccd:	e8 6f b5 fe ff       	call   f010c241 <sys_bypassPageFault>
f0120cd2:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0120cd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120cdc:	e9 82 00 00 00       	jmp    f0120d63 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0120ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120ce4:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0120ceb:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0120cee:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120cf1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120cf4:	e8 36 b5 fe ff       	call   f010c22f <sys_rcr2>
f0120cf9:	89 c2                	mov    %eax,%edx
f0120cfb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120cfe:	39 c2                	cmp    %eax,%edx
f0120d00:	74 17                	je     f0120d19 <test_kfree+0x1e98>
f0120d02:	83 ec 04             	sub    $0x4,%esp
f0120d05:	68 e0 aa 13 f0       	push   $0xf013aae0
f0120d0a:	68 33 06 00 00       	push   $0x633
f0120d0f:	68 7a a2 13 f0       	push   $0xf013a27a
f0120d14:	e8 8d f4 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0120d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d1c:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0120d23:	89 c2                	mov    %eax,%edx
f0120d25:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d28:	01 d0                	add    %edx,%eax
f0120d2a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0120d2d:	e8 fd b4 fe ff       	call   f010c22f <sys_rcr2>
f0120d32:	89 c2                	mov    %eax,%edx
f0120d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d37:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0120d3e:	89 c1                	mov    %eax,%ecx
f0120d40:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d43:	01 c8                	add    %ecx,%eax
f0120d45:	39 c2                	cmp    %eax,%edx
f0120d47:	74 17                	je     f0120d60 <test_kfree+0x1edf>
f0120d49:	83 ec 04             	sub    $0x4,%esp
f0120d4c:	68 e0 aa 13 f0       	push   $0xf013aae0
f0120d51:	68 35 06 00 00       	push   $0x635
f0120d56:	68 7a a2 13 f0       	push   $0xf013a27a
f0120d5b:	e8 46 f4 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0120d60:	ff 45 f4             	incl   -0xc(%ebp)
f0120d63:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0120d67:	0f 8e 74 ff ff ff    	jle    f0120ce1 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0120d6d:	83 ec 0c             	sub    $0xc,%esp
f0120d70:	6a 00                	push   $0x0
f0120d72:	e8 ca b4 fe ff       	call   f010c241 <sys_bypassPageFault>
f0120d77:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0120d7a:	83 ec 0c             	sub    $0xc,%esp
f0120d7d:	68 25 ab 13 f0       	push   $0xf013ab25
f0120d82:	e8 a6 fe fd ff       	call   f0100c2d <cprintf>
f0120d87:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d8a:	e8 09 b0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120d8f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d92:	e8 f5 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120d97:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0120d9a:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120da0:	83 ec 0c             	sub    $0xc,%esp
f0120da3:	50                   	push   %eax
f0120da4:	e8 4d 66 fe ff       	call   f01073f6 <kfree>
f0120da9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dac:	e8 db 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120db1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120db4:	74 17                	je     f0120dcd <test_kfree+0x1f4c>
f0120db6:	83 ec 04             	sub    $0x4,%esp
f0120db9:	68 94 a2 13 f0       	push   $0xf013a294
f0120dbe:	68 43 06 00 00       	push   $0x643
f0120dc3:	68 7a a2 13 f0       	push   $0xf013a27a
f0120dc8:	e8 d9 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120dcd:	e8 c6 af fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120dd2:	89 c2                	mov    %eax,%edx
f0120dd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120dd7:	39 c2                	cmp    %eax,%edx
f0120dd9:	74 17                	je     f0120df2 <test_kfree+0x1f71>
f0120ddb:	83 ec 04             	sub    $0x4,%esp
f0120dde:	68 2c ab 13 f0       	push   $0xf013ab2c
f0120de3:	68 44 06 00 00       	push   $0x644
f0120de8:	68 7a a2 13 f0       	push   $0xf013a27a
f0120ded:	e8 b4 f3 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120df2:	e8 a1 af fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120df7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120dfa:	e8 8d 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120dff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0120e02:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120e08:	83 ec 0c             	sub    $0xc,%esp
f0120e0b:	50                   	push   %eax
f0120e0c:	e8 e5 65 fe ff       	call   f01073f6 <kfree>
f0120e11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e14:	e8 73 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e19:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e1c:	74 17                	je     f0120e35 <test_kfree+0x1fb4>
f0120e1e:	83 ec 04             	sub    $0x4,%esp
f0120e21:	68 94 a2 13 f0       	push   $0xf013a294
f0120e26:	68 4a 06 00 00       	push   $0x64a
f0120e2b:	68 7a a2 13 f0       	push   $0xf013a27a
f0120e30:	e8 71 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e35:	e8 5e af fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120e3a:	89 c2                	mov    %eax,%edx
f0120e3c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e3f:	39 c2                	cmp    %eax,%edx
f0120e41:	74 17                	je     f0120e5a <test_kfree+0x1fd9>
f0120e43:	83 ec 04             	sub    $0x4,%esp
f0120e46:	68 2c ab 13 f0       	push   $0xf013ab2c
f0120e4b:	68 4b 06 00 00       	push   $0x64b
f0120e50:	68 7a a2 13 f0       	push   $0xf013a27a
f0120e55:	e8 4c f3 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120e5a:	e8 39 af fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120e5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e62:	e8 25 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120e6a:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120e70:	83 ec 0c             	sub    $0xc,%esp
f0120e73:	50                   	push   %eax
f0120e74:	e8 7d 65 fe ff       	call   f01073f6 <kfree>
f0120e79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e7c:	e8 0b 2e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120e81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e84:	74 17                	je     f0120e9d <test_kfree+0x201c>
f0120e86:	83 ec 04             	sub    $0x4,%esp
f0120e89:	68 94 a2 13 f0       	push   $0xf013a294
f0120e8e:	68 51 06 00 00       	push   $0x651
f0120e93:	68 7a a2 13 f0       	push   $0xf013a27a
f0120e98:	e8 09 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120e9d:	e8 f6 ae fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120ea2:	89 c2                	mov    %eax,%edx
f0120ea4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ea7:	39 c2                	cmp    %eax,%edx
f0120ea9:	74 17                	je     f0120ec2 <test_kfree+0x2041>
f0120eab:	83 ec 04             	sub    $0x4,%esp
f0120eae:	68 2c ab 13 f0       	push   $0xf013ab2c
f0120eb3:	68 52 06 00 00       	push   $0x652
f0120eb8:	68 7a a2 13 f0       	push   $0xf013a27a
f0120ebd:	e8 e4 f2 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ec2:	e8 d1 ae fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120ec7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eca:	e8 bd 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ecf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120ed2:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120ed8:	83 ec 0c             	sub    $0xc,%esp
f0120edb:	50                   	push   %eax
f0120edc:	e8 15 65 fe ff       	call   f01073f6 <kfree>
f0120ee1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ee4:	e8 a3 2d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0120ee9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120eec:	74 17                	je     f0120f05 <test_kfree+0x2084>
f0120eee:	83 ec 04             	sub    $0x4,%esp
f0120ef1:	68 94 a2 13 f0       	push   $0xf013a294
f0120ef6:	68 58 06 00 00       	push   $0x658
f0120efb:	68 7a a2 13 f0       	push   $0xf013a27a
f0120f00:	e8 a1 f2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0120f05:	e8 8e ae fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0120f0a:	89 c2                	mov    %eax,%edx
f0120f0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f0f:	39 c2                	cmp    %eax,%edx
f0120f11:	74 17                	je     f0120f2a <test_kfree+0x20a9>
f0120f13:	83 ec 04             	sub    $0x4,%esp
f0120f16:	68 2c ab 13 f0       	push   $0xf013ab2c
f0120f1b:	68 59 06 00 00       	push   $0x659
f0120f20:	68 7a a2 13 f0       	push   $0xf013a27a
f0120f25:	e8 7c f2 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0120f2a:	83 ec 0c             	sub    $0xc,%esp
f0120f2d:	68 73 ab 13 f0       	push   $0xf013ab73
f0120f32:	e8 f6 fc fd ff       	call   f0100c2d <cprintf>
f0120f37:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120f3a:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0120f41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120f48:	eb 48                	jmp    f0120f92 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0120f4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0120f4d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0120f52:	83 ec 04             	sub    $0x4,%esp
f0120f55:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0120f5b:	51                   	push   %ecx
f0120f5c:	52                   	push   %edx
f0120f5d:	50                   	push   %eax
f0120f5e:	e8 06 5a fe ff       	call   f0106969 <get_page_table>
f0120f63:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0120f66:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0120f6c:	85 c0                	test   %eax,%eax
f0120f6e:	75 17                	jne    f0120f87 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0120f70:	83 ec 04             	sub    $0x4,%esp
f0120f73:	68 7c ab 13 f0       	push   $0xf013ab7c
f0120f78:	68 67 06 00 00       	push   $0x667
f0120f7d:	68 7a a2 13 f0       	push   $0xf013a27a
f0120f82:	e8 1f f2 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0120f87:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0120f8e:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0120f92:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120f96:	78 b2                	js     f0120f4a <test_kfree+0x20c9>
f0120f98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0120f9c:	7f 09                	jg     f0120fa7 <test_kfree+0x2126>
f0120f9e:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0120fa5:	76 a3                	jbe    f0120f4a <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0120fa7:	83 ec 0c             	sub    $0xc,%esp
f0120faa:	68 5e a4 13 f0       	push   $0xf013a45e
f0120faf:	e8 79 fc fd ff       	call   f0100c2d <cprintf>
f0120fb4:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0120fb7:	83 ec 0c             	sub    $0xc,%esp
f0120fba:	68 e4 ab 13 f0       	push   $0xf013abe4
f0120fbf:	e8 69 fc fd ff       	call   f0100c2d <cprintf>
f0120fc4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0120fc7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0120fcc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120fcf:	5b                   	pop    %ebx
f0120fd0:	5f                   	pop    %edi
f0120fd1:	5d                   	pop    %ebp
f0120fd2:	c3                   	ret    

f0120fd3 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0120fd3:	55                   	push   %ebp
f0120fd4:	89 e5                	mov    %esp,%ebp
f0120fd6:	57                   	push   %edi
f0120fd7:	53                   	push   %ebx
f0120fd8:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0120fde:	83 ec 0c             	sub    $0xc,%esp
f0120fe1:	68 bc a1 13 f0       	push   $0xf013a1bc
f0120fe6:	e8 42 fc fd ff       	call   f0100c2d <cprintf>
f0120feb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0120fee:	83 ec 0c             	sub    $0xc,%esp
f0120ff1:	68 ec a1 13 f0       	push   $0xf013a1ec
f0120ff6:	e8 32 fc fd ff       	call   f0100c2d <cprintf>
f0120ffb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0120ffe:	83 ec 0c             	sub    $0xc,%esp
f0121001:	68 bc a1 13 f0       	push   $0xf013a1bc
f0121006:	e8 22 fc fd ff       	call   f0100c2d <cprintf>
f012100b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012100e:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121012:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121016:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012101c:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121022:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121029:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121030:	e8 63 ad fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121035:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121038:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f012103e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121043:	b8 00 00 00 00       	mov    $0x0,%eax
f0121048:	89 d7                	mov    %edx,%edi
f012104a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012104c:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0121052:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121057:	b8 00 00 00 00       	mov    $0x0,%eax
f012105c:	89 d7                	mov    %edx,%edi
f012105e:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121060:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0121066:	b9 14 00 00 00       	mov    $0x14,%ecx
f012106b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121070:	89 d7                	mov    %edx,%edi
f0121072:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121074:	e8 1f ad fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121079:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012107c:	e8 0b 2c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121081:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121084:	83 ec 0c             	sub    $0xc,%esp
f0121087:	68 00 fc 1f 00       	push   $0x1ffc00
f012108c:	e8 4b 63 fe ff       	call   f01073dc <kmalloc>
f0121091:	83 c4 10             	add    $0x10,%esp
f0121094:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012109a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01210a0:	89 c1                	mov    %eax,%ecx
f01210a2:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01210a9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01210ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210b1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01210b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01210b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01210bc:	f7 75 c8             	divl   -0x38(%ebp)
f01210bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01210c2:	29 d0                	sub    %edx,%eax
f01210c4:	89 c3                	mov    %eax,%ebx
f01210c6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01210cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01210d2:	0f b6 d0             	movzbl %al,%edx
f01210d5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01210d8:	01 d0                	add    %edx,%eax
f01210da:	48                   	dec    %eax
f01210db:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01210de:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01210e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01210e6:	f7 75 c0             	divl   -0x40(%ebp)
f01210e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01210ec:	29 d0                	sub    %edx,%eax
f01210ee:	01 c3                	add    %eax,%ebx
f01210f0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01210f7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01210fc:	0f b6 c0             	movzbl %al,%eax
f01210ff:	c1 e0 04             	shl    $0x4,%eax
f0121102:	89 c2                	mov    %eax,%edx
f0121104:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121107:	01 d0                	add    %edx,%eax
f0121109:	48                   	dec    %eax
f012110a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012110d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121110:	ba 00 00 00 00       	mov    $0x0,%edx
f0121115:	f7 75 b8             	divl   -0x48(%ebp)
f0121118:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012111b:	29 d0                	sub    %edx,%eax
f012111d:	01 d8                	add    %ebx,%eax
f012111f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121124:	39 c1                	cmp    %eax,%ecx
f0121126:	74 17                	je     f012113f <test_kfree_bestfirstfit+0x16c>
f0121128:	83 ec 04             	sub    $0x4,%esp
f012112b:	68 60 a3 13 f0       	push   $0xf013a360
f0121130:	68 95 06 00 00       	push   $0x695
f0121135:	68 7a a2 13 f0       	push   $0xf013a27a
f012113a:	e8 67 f0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012113f:	e8 48 2b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121144:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121147:	74 17                	je     f0121160 <test_kfree_bestfirstfit+0x18d>
f0121149:	83 ec 04             	sub    $0x4,%esp
f012114c:	68 94 a2 13 f0       	push   $0xf013a294
f0121151:	68 96 06 00 00       	push   $0x696
f0121156:	68 7a a2 13 f0       	push   $0xf013a27a
f012115b:	e8 46 f0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121160:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121163:	e8 30 ac fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121168:	29 c3                	sub    %eax,%ebx
f012116a:	89 d8                	mov    %ebx,%eax
f012116c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121171:	74 17                	je     f012118a <test_kfree_bestfirstfit+0x1b7>
f0121173:	83 ec 04             	sub    $0x4,%esp
f0121176:	68 fc a2 13 f0       	push   $0xf013a2fc
f012117b:	68 97 06 00 00       	push   $0x697
f0121180:	68 7a a2 13 f0       	push   $0xf013a27a
f0121185:	e8 1c f0 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012118a:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121191:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121194:	e8 ff ab fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121199:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012119c:	e8 eb 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01211a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01211a4:	83 ec 0c             	sub    $0xc,%esp
f01211a7:	68 00 fc 1f 00       	push   $0x1ffc00
f01211ac:	e8 2b 62 fe ff       	call   f01073dc <kmalloc>
f01211b1:	83 c4 10             	add    $0x10,%esp
f01211b4:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01211ba:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01211c0:	89 c1                	mov    %eax,%ecx
f01211c2:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01211c9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01211cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01211d1:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01211d4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01211d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01211dc:	f7 75 b0             	divl   -0x50(%ebp)
f01211df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01211e2:	29 d0                	sub    %edx,%eax
f01211e4:	89 c3                	mov    %eax,%ebx
f01211e6:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01211ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01211f2:	0f b6 d0             	movzbl %al,%edx
f01211f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01211f8:	01 d0                	add    %edx,%eax
f01211fa:	48                   	dec    %eax
f01211fb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01211fe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121201:	ba 00 00 00 00       	mov    $0x0,%edx
f0121206:	f7 75 a8             	divl   -0x58(%ebp)
f0121209:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012120c:	29 d0                	sub    %edx,%eax
f012120e:	01 c3                	add    %eax,%ebx
f0121210:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121217:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012121c:	0f b6 c0             	movzbl %al,%eax
f012121f:	c1 e0 04             	shl    $0x4,%eax
f0121222:	89 c2                	mov    %eax,%edx
f0121224:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121227:	01 d0                	add    %edx,%eax
f0121229:	48                   	dec    %eax
f012122a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012122d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121230:	ba 00 00 00 00       	mov    $0x0,%edx
f0121235:	f7 75 a0             	divl   -0x60(%ebp)
f0121238:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012123b:	29 d0                	sub    %edx,%eax
f012123d:	01 d8                	add    %ebx,%eax
f012123f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121244:	39 c1                	cmp    %eax,%ecx
f0121246:	74 17                	je     f012125f <test_kfree_bestfirstfit+0x28c>
f0121248:	83 ec 04             	sub    $0x4,%esp
f012124b:	68 60 a3 13 f0       	push   $0xf013a360
f0121250:	68 9e 06 00 00       	push   $0x69e
f0121255:	68 7a a2 13 f0       	push   $0xf013a27a
f012125a:	e8 47 ef fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012125f:	e8 28 2a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121264:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121267:	74 17                	je     f0121280 <test_kfree_bestfirstfit+0x2ad>
f0121269:	83 ec 04             	sub    $0x4,%esp
f012126c:	68 94 a2 13 f0       	push   $0xf013a294
f0121271:	68 9f 06 00 00       	push   $0x69f
f0121276:	68 7a a2 13 f0       	push   $0xf013a27a
f012127b:	e8 26 ef fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121280:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121283:	e8 10 ab fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121288:	29 c3                	sub    %eax,%ebx
f012128a:	89 d8                	mov    %ebx,%eax
f012128c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121291:	74 17                	je     f01212aa <test_kfree_bestfirstfit+0x2d7>
f0121293:	83 ec 04             	sub    $0x4,%esp
f0121296:	68 fc a2 13 f0       	push   $0xf013a2fc
f012129b:	68 a0 06 00 00       	push   $0x6a0
f01212a0:	68 7a a2 13 f0       	push   $0xf013a27a
f01212a5:	e8 fc ee fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01212aa:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01212b1:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01212b4:	e8 df aa fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01212b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212bc:	e8 cb 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01212c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01212c4:	83 ec 0c             	sub    $0xc,%esp
f01212c7:	68 00 08 00 00       	push   $0x800
f01212cc:	e8 0b 61 fe ff       	call   f01073dc <kmalloc>
f01212d1:	83 c4 10             	add    $0x10,%esp
f01212d4:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01212da:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01212e0:	89 c1                	mov    %eax,%ecx
f01212e2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01212e9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01212ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01212f1:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01212f4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01212f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01212fc:	f7 75 98             	divl   -0x68(%ebp)
f01212ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121302:	29 d0                	sub    %edx,%eax
f0121304:	89 c3                	mov    %eax,%ebx
f0121306:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012130d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121312:	0f b6 d0             	movzbl %al,%edx
f0121315:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121318:	01 d0                	add    %edx,%eax
f012131a:	48                   	dec    %eax
f012131b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012131e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121321:	ba 00 00 00 00       	mov    $0x0,%edx
f0121326:	f7 75 90             	divl   -0x70(%ebp)
f0121329:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012132c:	29 d0                	sub    %edx,%eax
f012132e:	01 c3                	add    %eax,%ebx
f0121330:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121337:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012133c:	0f b6 c0             	movzbl %al,%eax
f012133f:	c1 e0 04             	shl    $0x4,%eax
f0121342:	89 c2                	mov    %eax,%edx
f0121344:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121347:	01 d0                	add    %edx,%eax
f0121349:	48                   	dec    %eax
f012134a:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012134d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121350:	ba 00 00 00 00       	mov    $0x0,%edx
f0121355:	f7 75 88             	divl   -0x78(%ebp)
f0121358:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012135b:	29 d0                	sub    %edx,%eax
f012135d:	01 d8                	add    %ebx,%eax
f012135f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121364:	39 c1                	cmp    %eax,%ecx
f0121366:	74 17                	je     f012137f <test_kfree_bestfirstfit+0x3ac>
f0121368:	83 ec 04             	sub    $0x4,%esp
f012136b:	68 60 a3 13 f0       	push   $0xf013a360
f0121370:	68 a7 06 00 00       	push   $0x6a7
f0121375:	68 7a a2 13 f0       	push   $0xf013a27a
f012137a:	e8 27 ee fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012137f:	e8 08 29 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121384:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121387:	74 17                	je     f01213a0 <test_kfree_bestfirstfit+0x3cd>
f0121389:	83 ec 04             	sub    $0x4,%esp
f012138c:	68 94 a2 13 f0       	push   $0xf013a294
f0121391:	68 a8 06 00 00       	push   $0x6a8
f0121396:	68 7a a2 13 f0       	push   $0xf013a27a
f012139b:	e8 06 ee fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01213a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01213a3:	e8 f0 a9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01213a8:	29 c3                	sub    %eax,%ebx
f01213aa:	89 d8                	mov    %ebx,%eax
f01213ac:	83 f8 01             	cmp    $0x1,%eax
f01213af:	74 17                	je     f01213c8 <test_kfree_bestfirstfit+0x3f5>
f01213b1:	83 ec 04             	sub    $0x4,%esp
f01213b4:	68 fc a2 13 f0       	push   $0xf013a2fc
f01213b9:	68 a9 06 00 00       	push   $0x6a9
f01213be:	68 7a a2 13 f0       	push   $0xf013a27a
f01213c3:	e8 de ed fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01213c8:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01213cf:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01213d2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01213d8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01213db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213e2:	eb 0e                	jmp    f01213f2 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f01213e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01213e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213ea:	01 d0                	add    %edx,%eax
f01213ec:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01213ef:	ff 45 f4             	incl   -0xc(%ebp)
f01213f2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01213f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213fb:	7f e7                	jg     f01213e4 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01213fd:	e8 96 a9 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121402:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121405:	e8 82 28 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012140a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012140d:	83 ec 0c             	sub    $0xc,%esp
f0121410:	68 00 08 00 00       	push   $0x800
f0121415:	e8 c2 5f fe ff       	call   f01073dc <kmalloc>
f012141a:	83 c4 10             	add    $0x10,%esp
f012141d:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121423:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121429:	89 c1                	mov    %eax,%ecx
f012142b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121432:	10 00 00 
f0121435:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012143b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121440:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121446:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012144c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121451:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121457:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012145d:	29 d0                	sub    %edx,%eax
f012145f:	89 c3                	mov    %eax,%ebx
f0121461:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121468:	10 00 00 
f012146b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121470:	0f b6 d0             	movzbl %al,%edx
f0121473:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121479:	01 d0                	add    %edx,%eax
f012147b:	48                   	dec    %eax
f012147c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121482:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121488:	ba 00 00 00 00       	mov    $0x0,%edx
f012148d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121493:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121499:	29 d0                	sub    %edx,%eax
f012149b:	01 c3                	add    %eax,%ebx
f012149d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01214a4:	10 00 00 
f01214a7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01214ac:	0f b6 c0             	movzbl %al,%eax
f01214af:	c1 e0 04             	shl    $0x4,%eax
f01214b2:	89 c2                	mov    %eax,%edx
f01214b4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01214ba:	01 d0                	add    %edx,%eax
f01214bc:	48                   	dec    %eax
f01214bd:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01214c3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01214c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01214ce:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01214d4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01214da:	29 d0                	sub    %edx,%eax
f01214dc:	01 d8                	add    %ebx,%eax
f01214de:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01214e3:	39 c1                	cmp    %eax,%ecx
f01214e5:	74 17                	je     f01214fe <test_kfree_bestfirstfit+0x52b>
f01214e7:	83 ec 04             	sub    $0x4,%esp
f01214ea:	68 60 a3 13 f0       	push   $0xf013a360
f01214ef:	68 b5 06 00 00       	push   $0x6b5
f01214f4:	68 7a a2 13 f0       	push   $0xf013a27a
f01214f9:	e8 a8 ec fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214fe:	e8 89 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121503:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121506:	74 17                	je     f012151f <test_kfree_bestfirstfit+0x54c>
f0121508:	83 ec 04             	sub    $0x4,%esp
f012150b:	68 94 a2 13 f0       	push   $0xf013a294
f0121510:	68 b6 06 00 00       	push   $0x6b6
f0121515:	68 7a a2 13 f0       	push   $0xf013a27a
f012151a:	e8 87 ec fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012151f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121522:	e8 71 a8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121527:	29 c3                	sub    %eax,%ebx
f0121529:	89 d8                	mov    %ebx,%eax
f012152b:	83 f8 01             	cmp    $0x1,%eax
f012152e:	74 17                	je     f0121547 <test_kfree_bestfirstfit+0x574>
f0121530:	83 ec 04             	sub    $0x4,%esp
f0121533:	68 fc a2 13 f0       	push   $0xf013a2fc
f0121538:	68 b7 06 00 00       	push   $0x6b7
f012153d:	68 7a a2 13 f0       	push   $0xf013a27a
f0121542:	e8 5f ec fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121547:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012154e:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121551:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121557:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012155a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121561:	eb 0e                	jmp    f0121571 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121563:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121566:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121569:	01 d0                	add    %edx,%eax
f012156b:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012156e:	ff 45 f4             	incl   -0xc(%ebp)
f0121571:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121577:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012157a:	7f e7                	jg     f0121563 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012157c:	e8 17 a8 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121581:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121584:	e8 03 27 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121589:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012158c:	83 ec 0c             	sub    $0xc,%esp
f012158f:	68 00 1c 00 00       	push   $0x1c00
f0121594:	e8 43 5e fe ff       	call   f01073dc <kmalloc>
f0121599:	83 c4 10             	add    $0x10,%esp
f012159c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215a2:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01215a8:	89 c1                	mov    %eax,%ecx
f01215aa:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01215b1:	10 00 00 
f01215b4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01215ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215bf:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01215c5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01215cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01215d0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01215d6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01215dc:	29 d0                	sub    %edx,%eax
f01215de:	89 c3                	mov    %eax,%ebx
f01215e0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01215e7:	10 00 00 
f01215ea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01215ef:	0f b6 d0             	movzbl %al,%edx
f01215f2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01215f8:	01 d0                	add    %edx,%eax
f01215fa:	48                   	dec    %eax
f01215fb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121601:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121607:	ba 00 00 00 00       	mov    $0x0,%edx
f012160c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121612:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121618:	29 d0                	sub    %edx,%eax
f012161a:	01 c3                	add    %eax,%ebx
f012161c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121623:	10 00 00 
f0121626:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012162b:	0f b6 c0             	movzbl %al,%eax
f012162e:	c1 e0 04             	shl    $0x4,%eax
f0121631:	89 c2                	mov    %eax,%edx
f0121633:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121639:	01 d0                	add    %edx,%eax
f012163b:	48                   	dec    %eax
f012163c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121642:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121648:	ba 00 00 00 00       	mov    $0x0,%edx
f012164d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121653:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121659:	29 d0                	sub    %edx,%eax
f012165b:	01 d8                	add    %ebx,%eax
f012165d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121662:	39 c1                	cmp    %eax,%ecx
f0121664:	74 17                	je     f012167d <test_kfree_bestfirstfit+0x6aa>
f0121666:	83 ec 04             	sub    $0x4,%esp
f0121669:	68 60 a3 13 f0       	push   $0xf013a360
f012166e:	68 c3 06 00 00       	push   $0x6c3
f0121673:	68 7a a2 13 f0       	push   $0xf013a27a
f0121678:	e8 29 eb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012167d:	e8 0a 26 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121682:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121685:	74 17                	je     f012169e <test_kfree_bestfirstfit+0x6cb>
f0121687:	83 ec 04             	sub    $0x4,%esp
f012168a:	68 94 a2 13 f0       	push   $0xf013a294
f012168f:	68 c4 06 00 00       	push   $0x6c4
f0121694:	68 7a a2 13 f0       	push   $0xf013a27a
f0121699:	e8 08 eb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012169e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216a1:	e8 f2 a6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01216a6:	29 c3                	sub    %eax,%ebx
f01216a8:	89 d8                	mov    %ebx,%eax
f01216aa:	83 f8 02             	cmp    $0x2,%eax
f01216ad:	74 17                	je     f01216c6 <test_kfree_bestfirstfit+0x6f3>
f01216af:	83 ec 04             	sub    $0x4,%esp
f01216b2:	68 fc a2 13 f0       	push   $0xf013a2fc
f01216b7:	68 c5 06 00 00       	push   $0x6c5
f01216bc:	68 7a a2 13 f0       	push   $0xf013a27a
f01216c1:	e8 e0 ea fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01216c6:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01216cd:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01216d0:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01216d6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01216d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216e0:	eb 0e                	jmp    f01216f0 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f01216e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216e5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216e8:	01 d0                	add    %edx,%eax
f01216ea:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01216ed:	ff 45 f4             	incl   -0xc(%ebp)
f01216f0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01216f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01216f9:	7f e7                	jg     f01216e2 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01216fb:	e8 98 a6 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121700:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121703:	e8 84 25 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121708:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012170b:	83 ec 0c             	sub    $0xc,%esp
f012170e:	68 00 fc 2f 00       	push   $0x2ffc00
f0121713:	e8 c4 5c fe ff       	call   f01073dc <kmalloc>
f0121718:	83 c4 10             	add    $0x10,%esp
f012171b:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121721:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121727:	89 c1                	mov    %eax,%ecx
f0121729:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121730:	10 00 00 
f0121733:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121739:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012173e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121744:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012174a:	ba 00 00 00 00       	mov    $0x0,%edx
f012174f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121755:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012175b:	29 d0                	sub    %edx,%eax
f012175d:	89 c3                	mov    %eax,%ebx
f012175f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121766:	10 00 00 
f0121769:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012176e:	0f b6 d0             	movzbl %al,%edx
f0121771:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121777:	01 d0                	add    %edx,%eax
f0121779:	48                   	dec    %eax
f012177a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0121780:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121786:	ba 00 00 00 00       	mov    $0x0,%edx
f012178b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0121791:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121797:	29 d0                	sub    %edx,%eax
f0121799:	01 c3                	add    %eax,%ebx
f012179b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01217a2:	10 00 00 
f01217a5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01217aa:	0f b6 c0             	movzbl %al,%eax
f01217ad:	c1 e0 04             	shl    $0x4,%eax
f01217b0:	89 c2                	mov    %eax,%edx
f01217b2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01217b8:	01 d0                	add    %edx,%eax
f01217ba:	48                   	dec    %eax
f01217bb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01217c1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01217c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01217cc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01217d2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01217d8:	29 d0                	sub    %edx,%eax
f01217da:	01 d8                	add    %ebx,%eax
f01217dc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01217e1:	39 c1                	cmp    %eax,%ecx
f01217e3:	74 17                	je     f01217fc <test_kfree_bestfirstfit+0x829>
f01217e5:	83 ec 04             	sub    $0x4,%esp
f01217e8:	68 60 a3 13 f0       	push   $0xf013a360
f01217ed:	68 d1 06 00 00       	push   $0x6d1
f01217f2:	68 7a a2 13 f0       	push   $0xf013a27a
f01217f7:	e8 aa e9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217fc:	e8 8b 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121801:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121804:	74 17                	je     f012181d <test_kfree_bestfirstfit+0x84a>
f0121806:	83 ec 04             	sub    $0x4,%esp
f0121809:	68 94 a2 13 f0       	push   $0xf013a294
f012180e:	68 d2 06 00 00       	push   $0x6d2
f0121813:	68 7a a2 13 f0       	push   $0xf013a27a
f0121818:	e8 89 e9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012181d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121820:	e8 73 a5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121825:	29 c3                	sub    %eax,%ebx
f0121827:	89 d8                	mov    %ebx,%eax
f0121829:	3d 00 03 00 00       	cmp    $0x300,%eax
f012182e:	74 17                	je     f0121847 <test_kfree_bestfirstfit+0x874>
f0121830:	83 ec 04             	sub    $0x4,%esp
f0121833:	68 fc a2 13 f0       	push   $0xf013a2fc
f0121838:	68 d3 06 00 00       	push   $0x6d3
f012183d:	68 7a a2 13 f0       	push   $0xf013a27a
f0121842:	e8 5f e9 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121847:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012184e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121851:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121857:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012185a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121861:	eb 0e                	jmp    f0121871 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0121863:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121866:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121869:	01 d0                	add    %edx,%eax
f012186b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012186e:	ff 45 f4             	incl   -0xc(%ebp)
f0121871:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121877:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012187a:	7f e7                	jg     f0121863 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012187c:	e8 17 a5 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121881:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121884:	e8 03 24 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121889:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012188c:	83 ec 0c             	sub    $0xc,%esp
f012188f:	68 00 fc 5f 00       	push   $0x5ffc00
f0121894:	e8 43 5b fe ff       	call   f01073dc <kmalloc>
f0121899:	83 c4 10             	add    $0x10,%esp
f012189c:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01218a2:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01218a8:	89 c1                	mov    %eax,%ecx
f01218aa:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01218b1:	10 00 00 
f01218b4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01218ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218bf:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01218c5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01218cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01218d0:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01218d6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01218dc:	29 d0                	sub    %edx,%eax
f01218de:	89 c3                	mov    %eax,%ebx
f01218e0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01218e7:	10 00 00 
f01218ea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01218ef:	0f b6 d0             	movzbl %al,%edx
f01218f2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01218f8:	01 d0                	add    %edx,%eax
f01218fa:	48                   	dec    %eax
f01218fb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121901:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121907:	ba 00 00 00 00       	mov    $0x0,%edx
f012190c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121912:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121918:	29 d0                	sub    %edx,%eax
f012191a:	01 c3                	add    %eax,%ebx
f012191c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121923:	10 00 00 
f0121926:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012192b:	0f b6 c0             	movzbl %al,%eax
f012192e:	c1 e0 04             	shl    $0x4,%eax
f0121931:	89 c2                	mov    %eax,%edx
f0121933:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121939:	01 d0                	add    %edx,%eax
f012193b:	48                   	dec    %eax
f012193c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121942:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121948:	ba 00 00 00 00       	mov    $0x0,%edx
f012194d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121953:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121959:	29 d0                	sub    %edx,%eax
f012195b:	01 d8                	add    %ebx,%eax
f012195d:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121962:	39 c1                	cmp    %eax,%ecx
f0121964:	74 17                	je     f012197d <test_kfree_bestfirstfit+0x9aa>
f0121966:	83 ec 04             	sub    $0x4,%esp
f0121969:	68 60 a3 13 f0       	push   $0xf013a360
f012196e:	68 df 06 00 00       	push   $0x6df
f0121973:	68 7a a2 13 f0       	push   $0xf013a27a
f0121978:	e8 29 e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012197d:	e8 0a 23 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121982:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121985:	74 17                	je     f012199e <test_kfree_bestfirstfit+0x9cb>
f0121987:	83 ec 04             	sub    $0x4,%esp
f012198a:	68 94 a2 13 f0       	push   $0xf013a294
f012198f:	68 e0 06 00 00       	push   $0x6e0
f0121994:	68 7a a2 13 f0       	push   $0xf013a27a
f0121999:	e8 08 e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012199e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219a1:	e8 f2 a3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01219a6:	29 c3                	sub    %eax,%ebx
f01219a8:	89 d8                	mov    %ebx,%eax
f01219aa:	3d 00 06 00 00       	cmp    $0x600,%eax
f01219af:	74 17                	je     f01219c8 <test_kfree_bestfirstfit+0x9f5>
f01219b1:	83 ec 04             	sub    $0x4,%esp
f01219b4:	68 fc a2 13 f0       	push   $0xf013a2fc
f01219b9:	68 e1 06 00 00       	push   $0x6e1
f01219be:	68 7a a2 13 f0       	push   $0xf013a27a
f01219c3:	e8 de e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01219c8:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01219cf:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01219d2:	e8 c1 a3 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01219d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219da:	e8 ad 22 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01219df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01219e2:	83 ec 0c             	sub    $0xc,%esp
f01219e5:	68 00 38 00 00       	push   $0x3800
f01219ea:	e8 ed 59 fe ff       	call   f01073dc <kmalloc>
f01219ef:	83 c4 10             	add    $0x10,%esp
f01219f2:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01219f8:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01219fe:	89 c1                	mov    %eax,%ecx
f0121a00:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121a07:	10 00 00 
f0121a0a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121a10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a15:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0121a1b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a26:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0121a2c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121a32:	29 d0                	sub    %edx,%eax
f0121a34:	89 c3                	mov    %eax,%ebx
f0121a36:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0121a3d:	10 00 00 
f0121a40:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121a45:	0f b6 d0             	movzbl %al,%edx
f0121a48:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121a4e:	01 d0                	add    %edx,%eax
f0121a50:	48                   	dec    %eax
f0121a51:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121a57:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a62:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121a68:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121a6e:	29 d0                	sub    %edx,%eax
f0121a70:	01 c3                	add    %eax,%ebx
f0121a72:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0121a79:	10 00 00 
f0121a7c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121a81:	0f b6 c0             	movzbl %al,%eax
f0121a84:	c1 e0 04             	shl    $0x4,%eax
f0121a87:	89 c2                	mov    %eax,%edx
f0121a89:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121a8f:	01 d0                	add    %edx,%eax
f0121a91:	48                   	dec    %eax
f0121a92:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0121a98:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aa3:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0121aa9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121aaf:	29 d0                	sub    %edx,%eax
f0121ab1:	01 d8                	add    %ebx,%eax
f0121ab3:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121ab8:	39 c1                	cmp    %eax,%ecx
f0121aba:	74 17                	je     f0121ad3 <test_kfree_bestfirstfit+0xb00>
f0121abc:	83 ec 04             	sub    $0x4,%esp
f0121abf:	68 60 a3 13 f0       	push   $0xf013a360
f0121ac4:	68 e8 06 00 00       	push   $0x6e8
f0121ac9:	68 7a a2 13 f0       	push   $0xf013a27a
f0121ace:	e8 d3 e6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ad3:	e8 b4 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ad8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121adb:	74 17                	je     f0121af4 <test_kfree_bestfirstfit+0xb21>
f0121add:	83 ec 04             	sub    $0x4,%esp
f0121ae0:	68 94 a2 13 f0       	push   $0xf013a294
f0121ae5:	68 e9 06 00 00       	push   $0x6e9
f0121aea:	68 7a a2 13 f0       	push   $0xf013a27a
f0121aef:	e8 b2 e6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121af4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121af7:	e8 9c a2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121afc:	29 c3                	sub    %eax,%ebx
f0121afe:	89 d8                	mov    %ebx,%eax
f0121b00:	83 f8 04             	cmp    $0x4,%eax
f0121b03:	74 17                	je     f0121b1c <test_kfree_bestfirstfit+0xb49>
f0121b05:	83 ec 04             	sub    $0x4,%esp
f0121b08:	68 fc a2 13 f0       	push   $0xf013a2fc
f0121b0d:	68 ea 06 00 00       	push   $0x6ea
f0121b12:	68 7a a2 13 f0       	push   $0xf013a27a
f0121b17:	e8 8a e6 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121b1c:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0121b23:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121b26:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121b2c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121b2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b36:	eb 0e                	jmp    f0121b46 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0121b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b3b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121b3e:	01 d0                	add    %edx,%eax
f0121b40:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121b43:	ff 45 f4             	incl   -0xc(%ebp)
f0121b46:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b4f:	7f e7                	jg     f0121b38 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121b51:	e8 42 a2 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121b56:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121b5c:	e8 2b 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121b61:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121b67:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121b6d:	83 ec 0c             	sub    $0xc,%esp
f0121b70:	50                   	push   %eax
f0121b71:	e8 80 58 fe ff       	call   f01073f6 <kfree>
f0121b76:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b79:	e8 0e 21 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121b7e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121b84:	74 17                	je     f0121b9d <test_kfree_bestfirstfit+0xbca>
f0121b86:	83 ec 04             	sub    $0x4,%esp
f0121b89:	68 94 a2 13 f0       	push   $0xf013a294
f0121b8e:	68 f9 06 00 00       	push   $0x6f9
f0121b93:	68 7a a2 13 f0       	push   $0xf013a27a
f0121b98:	e8 09 e6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121b9d:	e8 f6 a1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121ba2:	89 c2                	mov    %eax,%edx
f0121ba4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121baa:	29 c2                	sub    %eax,%edx
f0121bac:	89 d0                	mov    %edx,%eax
f0121bae:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121bb3:	74 17                	je     f0121bcc <test_kfree_bestfirstfit+0xbf9>
f0121bb5:	83 ec 04             	sub    $0x4,%esp
f0121bb8:	68 04 aa 13 f0       	push   $0xf013aa04
f0121bbd:	68 fa 06 00 00       	push   $0x6fa
f0121bc2:	68 7a a2 13 f0       	push   $0xf013a27a
f0121bc7:	e8 da e5 fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121bcc:	e8 c7 a1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121bd1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bd7:	e8 b0 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bdc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121be2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121be8:	83 ec 0c             	sub    $0xc,%esp
f0121beb:	50                   	push   %eax
f0121bec:	e8 05 58 fe ff       	call   f01073f6 <kfree>
f0121bf1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bf4:	e8 93 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121bf9:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121bff:	74 17                	je     f0121c18 <test_kfree_bestfirstfit+0xc45>
f0121c01:	83 ec 04             	sub    $0x4,%esp
f0121c04:	68 94 a2 13 f0       	push   $0xf013a294
f0121c09:	68 00 07 00 00       	push   $0x700
f0121c0e:	68 7a a2 13 f0       	push   $0xf013a27a
f0121c13:	e8 8e e5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c18:	e8 7b a1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121c1d:	89 c2                	mov    %eax,%edx
f0121c1f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121c25:	29 c2                	sub    %eax,%edx
f0121c27:	89 d0                	mov    %edx,%eax
f0121c29:	83 f8 01             	cmp    $0x1,%eax
f0121c2c:	74 17                	je     f0121c45 <test_kfree_bestfirstfit+0xc72>
f0121c2e:	83 ec 04             	sub    $0x4,%esp
f0121c31:	68 04 aa 13 f0       	push   $0xf013aa04
f0121c36:	68 01 07 00 00       	push   $0x701
f0121c3b:	68 7a a2 13 f0       	push   $0xf013a27a
f0121c40:	e8 61 e5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c45:	e8 4e a1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121c4a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c50:	e8 37 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c55:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0121c5b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121c61:	83 ec 0c             	sub    $0xc,%esp
f0121c64:	50                   	push   %eax
f0121c65:	e8 8c 57 fe ff       	call   f01073f6 <kfree>
f0121c6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c6d:	e8 1a 20 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121c72:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121c78:	74 17                	je     f0121c91 <test_kfree_bestfirstfit+0xcbe>
f0121c7a:	83 ec 04             	sub    $0x4,%esp
f0121c7d:	68 94 a2 13 f0       	push   $0xf013a294
f0121c82:	68 07 07 00 00       	push   $0x707
f0121c87:	68 7a a2 13 f0       	push   $0xf013a27a
f0121c8c:	e8 15 e5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121c91:	e8 02 a1 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121c96:	89 c2                	mov    %eax,%edx
f0121c98:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121c9e:	29 c2                	sub    %eax,%edx
f0121ca0:	89 d0                	mov    %edx,%eax
f0121ca2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121ca7:	74 17                	je     f0121cc0 <test_kfree_bestfirstfit+0xced>
f0121ca9:	83 ec 04             	sub    $0x4,%esp
f0121cac:	68 04 aa 13 f0       	push   $0xf013aa04
f0121cb1:	68 08 07 00 00       	push   $0x708
f0121cb6:	68 7a a2 13 f0       	push   $0xf013a27a
f0121cbb:	e8 e6 e4 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121cc0:	e8 d3 a0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121cc5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ccb:	e8 bc 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121cd0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0121cd6:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0121cdc:	83 ec 0c             	sub    $0xc,%esp
f0121cdf:	50                   	push   %eax
f0121ce0:	e8 11 57 fe ff       	call   f01073f6 <kfree>
f0121ce5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ce8:	e8 9f 1f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121ced:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121cf3:	74 17                	je     f0121d0c <test_kfree_bestfirstfit+0xd39>
f0121cf5:	83 ec 04             	sub    $0x4,%esp
f0121cf8:	68 94 a2 13 f0       	push   $0xf013a294
f0121cfd:	68 0e 07 00 00       	push   $0x70e
f0121d02:	68 7a a2 13 f0       	push   $0xf013a27a
f0121d07:	e8 9a e4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121d0c:	e8 87 a0 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121d11:	89 c2                	mov    %eax,%edx
f0121d13:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121d19:	29 c2                	sub    %eax,%edx
f0121d1b:	89 d0                	mov    %edx,%eax
f0121d1d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121d22:	74 17                	je     f0121d3b <test_kfree_bestfirstfit+0xd68>
f0121d24:	83 ec 04             	sub    $0x4,%esp
f0121d27:	68 04 aa 13 f0       	push   $0xf013aa04
f0121d2c:	68 0f 07 00 00       	push   $0x70f
f0121d31:	68 7a a2 13 f0       	push   $0xf013a27a
f0121d36:	e8 6b e4 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121d3b:	83 ec 0c             	sub    $0xc,%esp
f0121d3e:	68 3c aa 13 f0       	push   $0xf013aa3c
f0121d43:	e8 e5 ee fd ff       	call   f0100c2d <cprintf>
f0121d48:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121d4b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121d51:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121d54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d5b:	eb 1e                	jmp    f0121d7b <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0121d5d:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0121d63:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121d66:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d69:	01 c8                	add    %ecx,%eax
f0121d6b:	8a 00                	mov    (%eax),%al
f0121d6d:	0f be c0             	movsbl %al,%eax
f0121d70:	01 d0                	add    %edx,%eax
f0121d72:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121d78:	ff 45 f4             	incl   -0xc(%ebp)
f0121d7b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121d81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d84:	7f d7                	jg     f0121d5d <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121d86:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0121d8c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121d92:	89 c1                	mov    %eax,%ecx
f0121d94:	01 c9                	add    %ecx,%ecx
f0121d96:	01 c8                	add    %ecx,%eax
f0121d98:	39 c2                	cmp    %eax,%edx
f0121d9a:	74 17                	je     f0121db3 <test_kfree_bestfirstfit+0xde0>
f0121d9c:	83 ec 04             	sub    $0x4,%esp
f0121d9f:	68 60 aa 13 f0       	push   $0xf013aa60
f0121da4:	68 1c 07 00 00       	push   $0x71c
f0121da9:	68 7a a2 13 f0       	push   $0xf013a27a
f0121dae:	e8 f3 e3 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121db3:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121db9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121dbc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121dc3:	eb 1e                	jmp    f0121de3 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0121dc5:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0121dcb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121dce:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121dd1:	01 c8                	add    %ecx,%eax
f0121dd3:	8a 00                	mov    (%eax),%al
f0121dd5:	0f be c0             	movsbl %al,%eax
f0121dd8:	01 d0                	add    %edx,%eax
f0121dda:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121de0:	ff 45 f4             	incl   -0xc(%ebp)
f0121de3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121de9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121dec:	7f d7                	jg     f0121dc5 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121dee:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121df4:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0121dfa:	c1 e2 02             	shl    $0x2,%edx
f0121dfd:	39 d0                	cmp    %edx,%eax
f0121dff:	74 17                	je     f0121e18 <test_kfree_bestfirstfit+0xe45>
f0121e01:	83 ec 04             	sub    $0x4,%esp
f0121e04:	68 60 aa 13 f0       	push   $0xf013aa60
f0121e09:	68 24 07 00 00       	push   $0x724
f0121e0e:	68 7a a2 13 f0       	push   $0xf013a27a
f0121e13:	e8 8e e3 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121e18:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121e1e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121e21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121e28:	eb 1e                	jmp    f0121e48 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0121e2a:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0121e30:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121e33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121e36:	01 c8                	add    %ecx,%eax
f0121e38:	8a 00                	mov    (%eax),%al
f0121e3a:	0f be c0             	movsbl %al,%eax
f0121e3d:	01 d0                	add    %edx,%eax
f0121e3f:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121e45:	ff 45 f4             	incl   -0xc(%ebp)
f0121e48:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121e4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121e51:	7f d7                	jg     f0121e2a <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121e53:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0121e59:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121e5f:	89 d0                	mov    %edx,%eax
f0121e61:	c1 e0 02             	shl    $0x2,%eax
f0121e64:	01 d0                	add    %edx,%eax
f0121e66:	39 c1                	cmp    %eax,%ecx
f0121e68:	74 17                	je     f0121e81 <test_kfree_bestfirstfit+0xeae>
f0121e6a:	83 ec 04             	sub    $0x4,%esp
f0121e6d:	68 60 aa 13 f0       	push   $0xf013aa60
f0121e72:	68 2c 07 00 00       	push   $0x72c
f0121e77:	68 7a a2 13 f0       	push   $0xf013a27a
f0121e7c:	e8 25 e3 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121e81:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121e87:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121e8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121e91:	eb 1e                	jmp    f0121eb1 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0121e93:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0121e99:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121e9c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121e9f:	01 c8                	add    %ecx,%eax
f0121ea1:	8a 00                	mov    (%eax),%al
f0121ea3:	0f be c0             	movsbl %al,%eax
f0121ea6:	01 d0                	add    %edx,%eax
f0121ea8:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121eae:	ff 45 f4             	incl   -0xc(%ebp)
f0121eb1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121eb7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121eba:	7f d7                	jg     f0121e93 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0121ebc:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0121ec2:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0121ec8:	89 d0                	mov    %edx,%eax
f0121eca:	01 c0                	add    %eax,%eax
f0121ecc:	01 d0                	add    %edx,%eax
f0121ece:	01 c0                	add    %eax,%eax
f0121ed0:	01 d0                	add    %edx,%eax
f0121ed2:	39 c1                	cmp    %eax,%ecx
f0121ed4:	74 17                	je     f0121eed <test_kfree_bestfirstfit+0xf1a>
f0121ed6:	83 ec 04             	sub    $0x4,%esp
f0121ed9:	68 60 aa 13 f0       	push   $0xf013aa60
f0121ede:	68 34 07 00 00       	push   $0x734
f0121ee3:	68 7a a2 13 f0       	push   $0xf013a27a
f0121ee8:	e8 b9 e2 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f0121eed:	83 ec 0c             	sub    $0xc,%esp
f0121ef0:	68 93 aa 13 f0       	push   $0xf013aa93
f0121ef5:	e8 33 ed fd ff       	call   f0100c2d <cprintf>
f0121efa:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121efd:	e8 96 9e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0121f02:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f05:	e8 82 1d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0121f0a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0121f0d:	83 ec 0c             	sub    $0xc,%esp
f0121f10:	68 00 00 30 00       	push   $0x300000
f0121f15:	e8 c2 54 fe ff       	call   f01073dc <kmalloc>
f0121f1a:	83 c4 10             	add    $0x10,%esp
f0121f1d:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f23:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0121f29:	89 c1                	mov    %eax,%ecx
f0121f2b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121f32:	10 00 00 
f0121f35:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0121f3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f40:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121f46:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121f4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f51:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121f57:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0121f5d:	29 d0                	sub    %edx,%eax
f0121f5f:	89 c3                	mov    %eax,%ebx
f0121f61:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121f68:	10 00 00 
f0121f6b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121f70:	0f b6 d0             	movzbl %al,%edx
f0121f73:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0121f79:	01 d0                	add    %edx,%eax
f0121f7b:	48                   	dec    %eax
f0121f7c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121f82:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121f88:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f8d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0121f93:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0121f99:	29 d0                	sub    %edx,%eax
f0121f9b:	01 c3                	add    %eax,%ebx
f0121f9d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0121fa4:	10 00 00 
f0121fa7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0121fac:	0f b6 c0             	movzbl %al,%eax
f0121faf:	c1 e0 04             	shl    $0x4,%eax
f0121fb2:	89 c2                	mov    %eax,%edx
f0121fb4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0121fba:	01 d0                	add    %edx,%eax
f0121fbc:	48                   	dec    %eax
f0121fbd:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0121fc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121fc9:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fce:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0121fd4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0121fda:	29 d0                	sub    %edx,%eax
f0121fdc:	01 d8                	add    %ebx,%eax
f0121fde:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121fe3:	39 c1                	cmp    %eax,%ecx
f0121fe5:	74 17                	je     f0121ffe <test_kfree_bestfirstfit+0x102b>
f0121fe7:	83 ec 04             	sub    $0x4,%esp
f0121fea:	68 60 a3 13 f0       	push   $0xf013a360
f0121fef:	68 3f 07 00 00       	push   $0x73f
f0121ff4:	68 7a a2 13 f0       	push   $0xf013a27a
f0121ff9:	e8 a8 e1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ffe:	e8 89 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122003:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122006:	74 17                	je     f012201f <test_kfree_bestfirstfit+0x104c>
f0122008:	83 ec 04             	sub    $0x4,%esp
f012200b:	68 94 a2 13 f0       	push   $0xf013a294
f0122010:	68 40 07 00 00       	push   $0x740
f0122015:	68 7a a2 13 f0       	push   $0xf013a27a
f012201a:	e8 87 e1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012201f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122022:	e8 71 9d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122027:	29 c3                	sub    %eax,%ebx
f0122029:	89 d8                	mov    %ebx,%eax
f012202b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122030:	74 17                	je     f0122049 <test_kfree_bestfirstfit+0x1076>
f0122032:	83 ec 04             	sub    $0x4,%esp
f0122035:	68 fc a2 13 f0       	push   $0xf013a2fc
f012203a:	68 41 07 00 00       	push   $0x741
f012203f:	68 7a a2 13 f0       	push   $0xf013a27a
f0122044:	e8 5d e1 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122049:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122050:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0122053:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122059:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012205c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122063:	eb 0e                	jmp    f0122073 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f0122065:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122068:	8b 45 80             	mov    -0x80(%ebp),%eax
f012206b:	01 d0                	add    %edx,%eax
f012206d:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122070:	ff 45 f4             	incl   -0xc(%ebp)
f0122073:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122079:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012207c:	7f e7                	jg     f0122065 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012207e:	e8 15 9d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122083:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122086:	e8 01 1c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012208b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f012208e:	83 ec 0c             	sub    $0xc,%esp
f0122091:	68 00 08 00 00       	push   $0x800
f0122096:	e8 41 53 fe ff       	call   f01073dc <kmalloc>
f012209b:	83 c4 10             	add    $0x10,%esp
f012209e:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01220a4:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01220aa:	89 c1                	mov    %eax,%ecx
f01220ac:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01220b3:	10 00 00 
f01220b6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01220bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220c1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01220c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01220cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01220d2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01220d8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01220de:	29 d0                	sub    %edx,%eax
f01220e0:	89 c3                	mov    %eax,%ebx
f01220e2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01220e9:	10 00 00 
f01220ec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01220f1:	0f b6 d0             	movzbl %al,%edx
f01220f4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01220fa:	01 d0                	add    %edx,%eax
f01220fc:	48                   	dec    %eax
f01220fd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122103:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122109:	ba 00 00 00 00       	mov    $0x0,%edx
f012210e:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122114:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012211a:	29 d0                	sub    %edx,%eax
f012211c:	01 c3                	add    %eax,%ebx
f012211e:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122125:	10 00 00 
f0122128:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012212d:	0f b6 c0             	movzbl %al,%eax
f0122130:	c1 e0 04             	shl    $0x4,%eax
f0122133:	89 c2                	mov    %eax,%edx
f0122135:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012213b:	01 d0                	add    %edx,%eax
f012213d:	48                   	dec    %eax
f012213e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122144:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012214a:	ba 00 00 00 00       	mov    $0x0,%edx
f012214f:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122155:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012215b:	29 d0                	sub    %edx,%eax
f012215d:	01 d8                	add    %ebx,%eax
f012215f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122164:	39 c1                	cmp    %eax,%ecx
f0122166:	74 17                	je     f012217f <test_kfree_bestfirstfit+0x11ac>
f0122168:	83 ec 04             	sub    $0x4,%esp
f012216b:	68 60 a3 13 f0       	push   $0xf013a360
f0122170:	68 4d 07 00 00       	push   $0x74d
f0122175:	68 7a a2 13 f0       	push   $0xf013a27a
f012217a:	e8 27 e0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012217f:	e8 08 1b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122184:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122187:	74 17                	je     f01221a0 <test_kfree_bestfirstfit+0x11cd>
f0122189:	83 ec 04             	sub    $0x4,%esp
f012218c:	68 94 a2 13 f0       	push   $0xf013a294
f0122191:	68 4e 07 00 00       	push   $0x74e
f0122196:	68 7a a2 13 f0       	push   $0xf013a27a
f012219b:	e8 06 e0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01221a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01221a3:	e8 f0 9b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01221a8:	29 c3                	sub    %eax,%ebx
f01221aa:	89 d8                	mov    %ebx,%eax
f01221ac:	83 f8 01             	cmp    $0x1,%eax
f01221af:	74 17                	je     f01221c8 <test_kfree_bestfirstfit+0x11f5>
f01221b1:	83 ec 04             	sub    $0x4,%esp
f01221b4:	68 fc a2 13 f0       	push   $0xf013a2fc
f01221b9:	68 4f 07 00 00       	push   $0x74f
f01221be:	68 7a a2 13 f0       	push   $0xf013a27a
f01221c3:	e8 de df fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01221c8:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01221cf:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01221d2:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01221d8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01221db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221e2:	eb 0e                	jmp    f01221f2 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01221e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221ea:	01 d0                	add    %edx,%eax
f01221ec:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01221ef:	ff 45 f4             	incl   -0xc(%ebp)
f01221f2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01221f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221fb:	7f e7                	jg     f01221e4 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01221fd:	e8 96 9b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122202:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122205:	e8 82 1a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012220a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f012220d:	83 ec 0c             	sub    $0xc,%esp
f0122210:	68 00 00 10 00       	push   $0x100000
f0122215:	e8 c2 51 fe ff       	call   f01073dc <kmalloc>
f012221a:	83 c4 10             	add    $0x10,%esp
f012221d:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122223:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122229:	89 c1                	mov    %eax,%ecx
f012222b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122232:	10 00 00 
f0122235:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012223b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122240:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122246:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012224c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122251:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122257:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012225d:	29 d0                	sub    %edx,%eax
f012225f:	89 c3                	mov    %eax,%ebx
f0122261:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122268:	10 00 00 
f012226b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122270:	0f b6 d0             	movzbl %al,%edx
f0122273:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122279:	01 d0                	add    %edx,%eax
f012227b:	48                   	dec    %eax
f012227c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122282:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122288:	ba 00 00 00 00       	mov    $0x0,%edx
f012228d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122293:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122299:	29 d0                	sub    %edx,%eax
f012229b:	01 c3                	add    %eax,%ebx
f012229d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01222a4:	10 00 00 
f01222a7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01222ac:	0f b6 c0             	movzbl %al,%eax
f01222af:	c1 e0 04             	shl    $0x4,%eax
f01222b2:	89 c2                	mov    %eax,%edx
f01222b4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01222ba:	01 d0                	add    %edx,%eax
f01222bc:	48                   	dec    %eax
f01222bd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01222c3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01222c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01222ce:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01222d4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01222da:	29 d0                	sub    %edx,%eax
f01222dc:	01 d8                	add    %ebx,%eax
f01222de:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01222e3:	39 c1                	cmp    %eax,%ecx
f01222e5:	74 17                	je     f01222fe <test_kfree_bestfirstfit+0x132b>
f01222e7:	83 ec 04             	sub    $0x4,%esp
f01222ea:	68 60 a3 13 f0       	push   $0xf013a360
f01222ef:	68 5b 07 00 00       	push   $0x75b
f01222f4:	68 7a a2 13 f0       	push   $0xf013a27a
f01222f9:	e8 a8 de fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222fe:	e8 89 19 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122303:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122306:	74 17                	je     f012231f <test_kfree_bestfirstfit+0x134c>
f0122308:	83 ec 04             	sub    $0x4,%esp
f012230b:	68 94 a2 13 f0       	push   $0xf013a294
f0122310:	68 5c 07 00 00       	push   $0x75c
f0122315:	68 7a a2 13 f0       	push   $0xf013a27a
f012231a:	e8 87 de fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012231f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122322:	e8 71 9a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122327:	29 c3                	sub    %eax,%ebx
f0122329:	89 d8                	mov    %ebx,%eax
f012232b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122330:	74 17                	je     f0122349 <test_kfree_bestfirstfit+0x1376>
f0122332:	83 ec 04             	sub    $0x4,%esp
f0122335:	68 fc a2 13 f0       	push   $0xf013a2fc
f012233a:	68 5d 07 00 00       	push   $0x75d
f012233f:	68 7a a2 13 f0       	push   $0xf013a27a
f0122344:	e8 5d de fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122349:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122350:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122353:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122359:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012235c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122363:	eb 0e                	jmp    f0122373 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122368:	8b 45 80             	mov    -0x80(%ebp),%eax
f012236b:	01 d0                	add    %edx,%eax
f012236d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122370:	ff 45 f4             	incl   -0xc(%ebp)
f0122373:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122379:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012237c:	7f e7                	jg     f0122365 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f012237e:	83 ec 0c             	sub    $0xc,%esp
f0122381:	68 9a aa 13 f0       	push   $0xf013aa9a
f0122386:	e8 a2 e8 fd ff       	call   f0100c2d <cprintf>
f012238b:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012238e:	e8 05 9a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122393:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122396:	e8 f1 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012239b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012239e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01223a4:	83 ec 0c             	sub    $0xc,%esp
f01223a7:	50                   	push   %eax
f01223a8:	e8 49 50 fe ff       	call   f01073f6 <kfree>
f01223ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223b0:	e8 d7 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01223b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223b8:	74 17                	je     f01223d1 <test_kfree_bestfirstfit+0x13fe>
f01223ba:	83 ec 04             	sub    $0x4,%esp
f01223bd:	68 94 a2 13 f0       	push   $0xf013a294
f01223c2:	68 6d 07 00 00       	push   $0x76d
f01223c7:	68 7a a2 13 f0       	push   $0xf013a27a
f01223cc:	e8 d5 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01223d1:	e8 c2 99 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01223d6:	89 c2                	mov    %eax,%edx
f01223d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223db:	29 c2                	sub    %eax,%edx
f01223dd:	89 d0                	mov    %edx,%eax
f01223df:	83 f8 02             	cmp    $0x2,%eax
f01223e2:	74 17                	je     f01223fb <test_kfree_bestfirstfit+0x1428>
f01223e4:	83 ec 04             	sub    $0x4,%esp
f01223e7:	68 04 aa 13 f0       	push   $0xf013aa04
f01223ec:	68 6e 07 00 00       	push   $0x76e
f01223f1:	68 7a a2 13 f0       	push   $0xf013a27a
f01223f6:	e8 ab dd fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01223fb:	e8 98 99 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122400:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122403:	e8 84 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122408:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012240b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122411:	83 ec 0c             	sub    $0xc,%esp
f0122414:	50                   	push   %eax
f0122415:	e8 dc 4f fe ff       	call   f01073f6 <kfree>
f012241a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012241d:	e8 6a 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122422:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122425:	74 17                	je     f012243e <test_kfree_bestfirstfit+0x146b>
f0122427:	83 ec 04             	sub    $0x4,%esp
f012242a:	68 94 a2 13 f0       	push   $0xf013a294
f012242f:	68 74 07 00 00       	push   $0x774
f0122434:	68 7a a2 13 f0       	push   $0xf013a27a
f0122439:	e8 68 dd fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012243e:	e8 55 99 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122443:	89 c2                	mov    %eax,%edx
f0122445:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122448:	29 c2                	sub    %eax,%edx
f012244a:	89 d0                	mov    %edx,%eax
f012244c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122451:	74 17                	je     f012246a <test_kfree_bestfirstfit+0x1497>
f0122453:	83 ec 04             	sub    $0x4,%esp
f0122456:	68 04 aa 13 f0       	push   $0xf013aa04
f012245b:	68 75 07 00 00       	push   $0x775
f0122460:	68 7a a2 13 f0       	push   $0xf013a27a
f0122465:	e8 3c dd fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012246a:	e8 29 99 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012246f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122472:	e8 15 18 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122477:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f012247a:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122480:	83 ec 0c             	sub    $0xc,%esp
f0122483:	50                   	push   %eax
f0122484:	e8 6d 4f fe ff       	call   f01073f6 <kfree>
f0122489:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012248c:	e8 fb 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122491:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122494:	74 17                	je     f01224ad <test_kfree_bestfirstfit+0x14da>
f0122496:	83 ec 04             	sub    $0x4,%esp
f0122499:	68 94 a2 13 f0       	push   $0xf013a294
f012249e:	68 7b 07 00 00       	push   $0x77b
f01224a3:	68 7a a2 13 f0       	push   $0xf013a27a
f01224a8:	e8 f9 dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01224ad:	e8 e6 98 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01224b2:	89 c2                	mov    %eax,%edx
f01224b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01224b7:	29 c2                	sub    %eax,%edx
f01224b9:	89 d0                	mov    %edx,%eax
f01224bb:	83 f8 01             	cmp    $0x1,%eax
f01224be:	74 17                	je     f01224d7 <test_kfree_bestfirstfit+0x1504>
f01224c0:	83 ec 04             	sub    $0x4,%esp
f01224c3:	68 04 aa 13 f0       	push   $0xf013aa04
f01224c8:	68 7c 07 00 00       	push   $0x77c
f01224cd:	68 7a a2 13 f0       	push   $0xf013a27a
f01224d2:	e8 cf dc fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01224d7:	e8 bc 98 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01224dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224df:	e8 a8 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01224e7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01224ed:	83 ec 0c             	sub    $0xc,%esp
f01224f0:	50                   	push   %eax
f01224f1:	e8 00 4f fe ff       	call   f01073f6 <kfree>
f01224f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224f9:	e8 8e 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01224fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122501:	74 17                	je     f012251a <test_kfree_bestfirstfit+0x1547>
f0122503:	83 ec 04             	sub    $0x4,%esp
f0122506:	68 94 a2 13 f0       	push   $0xf013a294
f012250b:	68 82 07 00 00       	push   $0x782
f0122510:	68 7a a2 13 f0       	push   $0xf013a27a
f0122515:	e8 8c dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012251a:	e8 79 98 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012251f:	89 c2                	mov    %eax,%edx
f0122521:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122524:	29 c2                	sub    %eax,%edx
f0122526:	89 d0                	mov    %edx,%eax
f0122528:	83 f8 04             	cmp    $0x4,%eax
f012252b:	74 17                	je     f0122544 <test_kfree_bestfirstfit+0x1571>
f012252d:	83 ec 04             	sub    $0x4,%esp
f0122530:	68 04 aa 13 f0       	push   $0xf013aa04
f0122535:	68 83 07 00 00       	push   $0x783
f012253a:	68 7a a2 13 f0       	push   $0xf013a27a
f012253f:	e8 62 dc fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122544:	e8 4f 98 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122549:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012254c:	e8 3b 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122551:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122554:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012255a:	83 ec 0c             	sub    $0xc,%esp
f012255d:	50                   	push   %eax
f012255e:	e8 93 4e fe ff       	call   f01073f6 <kfree>
f0122563:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122566:	e8 21 17 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012256b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012256e:	74 17                	je     f0122587 <test_kfree_bestfirstfit+0x15b4>
f0122570:	83 ec 04             	sub    $0x4,%esp
f0122573:	68 94 a2 13 f0       	push   $0xf013a294
f0122578:	68 89 07 00 00       	push   $0x789
f012257d:	68 7a a2 13 f0       	push   $0xf013a27a
f0122582:	e8 1f dc fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122587:	e8 0c 98 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012258c:	89 c2                	mov    %eax,%edx
f012258e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122591:	29 c2                	sub    %eax,%edx
f0122593:	89 d0                	mov    %edx,%eax
f0122595:	3d 00 03 00 00       	cmp    $0x300,%eax
f012259a:	74 17                	je     f01225b3 <test_kfree_bestfirstfit+0x15e0>
f012259c:	83 ec 04             	sub    $0x4,%esp
f012259f:	68 04 aa 13 f0       	push   $0xf013aa04
f01225a4:	68 8a 07 00 00       	push   $0x78a
f01225a9:	68 7a a2 13 f0       	push   $0xf013a27a
f01225ae:	e8 f3 db fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225b3:	e8 e0 97 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01225b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225bb:	e8 cc 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01225c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01225c3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01225c9:	83 ec 0c             	sub    $0xc,%esp
f01225cc:	50                   	push   %eax
f01225cd:	e8 24 4e fe ff       	call   f01073f6 <kfree>
f01225d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225d5:	e8 b2 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01225da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225dd:	74 17                	je     f01225f6 <test_kfree_bestfirstfit+0x1623>
f01225df:	83 ec 04             	sub    $0x4,%esp
f01225e2:	68 94 a2 13 f0       	push   $0xf013a294
f01225e7:	68 90 07 00 00       	push   $0x790
f01225ec:	68 7a a2 13 f0       	push   $0xf013a27a
f01225f1:	e8 b0 db fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01225f6:	e8 9d 97 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01225fb:	89 c2                	mov    %eax,%edx
f01225fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122600:	29 c2                	sub    %eax,%edx
f0122602:	89 d0                	mov    %edx,%eax
f0122604:	83 f8 01             	cmp    $0x1,%eax
f0122607:	74 17                	je     f0122620 <test_kfree_bestfirstfit+0x164d>
f0122609:	83 ec 04             	sub    $0x4,%esp
f012260c:	68 04 aa 13 f0       	push   $0xf013aa04
f0122611:	68 91 07 00 00       	push   $0x791
f0122616:	68 7a a2 13 f0       	push   $0xf013a27a
f012261b:	e8 86 db fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122620:	e8 73 97 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122625:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122628:	e8 5f 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012262d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122630:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122636:	83 ec 0c             	sub    $0xc,%esp
f0122639:	50                   	push   %eax
f012263a:	e8 b7 4d fe ff       	call   f01073f6 <kfree>
f012263f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122642:	e8 45 16 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122647:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012264a:	74 17                	je     f0122663 <test_kfree_bestfirstfit+0x1690>
f012264c:	83 ec 04             	sub    $0x4,%esp
f012264f:	68 94 a2 13 f0       	push   $0xf013a294
f0122654:	68 97 07 00 00       	push   $0x797
f0122659:	68 7a a2 13 f0       	push   $0xf013a27a
f012265e:	e8 43 db fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122663:	e8 30 97 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122668:	89 c2                	mov    %eax,%edx
f012266a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012266d:	29 c2                	sub    %eax,%edx
f012266f:	89 d0                	mov    %edx,%eax
f0122671:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122676:	74 17                	je     f012268f <test_kfree_bestfirstfit+0x16bc>
f0122678:	83 ec 04             	sub    $0x4,%esp
f012267b:	68 04 aa 13 f0       	push   $0xf013aa04
f0122680:	68 98 07 00 00       	push   $0x798
f0122685:	68 7a a2 13 f0       	push   $0xf013a27a
f012268a:	e8 17 db fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012268f:	e8 04 97 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122694:	89 c2                	mov    %eax,%edx
f0122696:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122699:	39 c2                	cmp    %eax,%edx
f012269b:	74 17                	je     f01226b4 <test_kfree_bestfirstfit+0x16e1>
f012269d:	83 ec 04             	sub    $0x4,%esp
f01226a0:	68 a4 aa 13 f0       	push   $0xf013aaa4
f01226a5:	68 9a 07 00 00       	push   $0x79a
f01226aa:	68 7a a2 13 f0       	push   $0xf013a27a
f01226af:	e8 f2 da fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f01226b4:	83 ec 0c             	sub    $0xc,%esp
f01226b7:	68 d8 aa 13 f0       	push   $0xf013aad8
f01226bc:	e8 6c e5 fd ff       	call   f0100c2d <cprintf>
f01226c1:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01226c4:	83 ec 0c             	sub    $0xc,%esp
f01226c7:	6a 03                	push   $0x3
f01226c9:	e8 73 9b fe ff       	call   f010c241 <sys_bypassPageFault>
f01226ce:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01226d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226d8:	e9 82 00 00 00       	jmp    f012275f <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f01226dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01226e0:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01226e7:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01226ea:	8b 45 80             	mov    -0x80(%ebp),%eax
f01226ed:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01226f0:	e8 3a 9b fe ff       	call   f010c22f <sys_rcr2>
f01226f5:	89 c2                	mov    %eax,%edx
f01226f7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01226fa:	39 c2                	cmp    %eax,%edx
f01226fc:	74 17                	je     f0122715 <test_kfree_bestfirstfit+0x1742>
f01226fe:	83 ec 04             	sub    $0x4,%esp
f0122701:	68 e0 aa 13 f0       	push   $0xf013aae0
f0122706:	68 a9 07 00 00       	push   $0x7a9
f012270b:	68 7a a2 13 f0       	push   $0xf013a27a
f0122710:	e8 91 da fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122715:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122718:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012271f:	89 c2                	mov    %eax,%edx
f0122721:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122724:	01 d0                	add    %edx,%eax
f0122726:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122729:	e8 01 9b fe ff       	call   f010c22f <sys_rcr2>
f012272e:	89 c2                	mov    %eax,%edx
f0122730:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122733:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012273a:	89 c1                	mov    %eax,%ecx
f012273c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012273f:	01 c8                	add    %ecx,%eax
f0122741:	39 c2                	cmp    %eax,%edx
f0122743:	74 17                	je     f012275c <test_kfree_bestfirstfit+0x1789>
f0122745:	83 ec 04             	sub    $0x4,%esp
f0122748:	68 e0 aa 13 f0       	push   $0xf013aae0
f012274d:	68 ab 07 00 00       	push   $0x7ab
f0122752:	68 7a a2 13 f0       	push   $0xf013a27a
f0122757:	e8 4a da fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012275c:	ff 45 f4             	incl   -0xc(%ebp)
f012275f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122763:	0f 8e 74 ff ff ff    	jle    f01226dd <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122769:	83 ec 0c             	sub    $0xc,%esp
f012276c:	6a 00                	push   $0x0
f012276e:	e8 ce 9a fe ff       	call   f010c241 <sys_bypassPageFault>
f0122773:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122776:	83 ec 0c             	sub    $0xc,%esp
f0122779:	68 25 ab 13 f0       	push   $0xf013ab25
f012277e:	e8 aa e4 fd ff       	call   f0100c2d <cprintf>
f0122783:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122786:	e8 0d 96 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012278b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012278e:	e8 f9 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122793:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122796:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012279c:	83 ec 0c             	sub    $0xc,%esp
f012279f:	50                   	push   %eax
f01227a0:	e8 51 4c fe ff       	call   f01073f6 <kfree>
f01227a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227a8:	e8 df 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227b0:	74 17                	je     f01227c9 <test_kfree_bestfirstfit+0x17f6>
f01227b2:	83 ec 04             	sub    $0x4,%esp
f01227b5:	68 94 a2 13 f0       	push   $0xf013a294
f01227ba:	68 b9 07 00 00       	push   $0x7b9
f01227bf:	68 7a a2 13 f0       	push   $0xf013a27a
f01227c4:	e8 dd d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01227c9:	e8 ca 95 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01227ce:	89 c2                	mov    %eax,%edx
f01227d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227d3:	39 c2                	cmp    %eax,%edx
f01227d5:	74 17                	je     f01227ee <test_kfree_bestfirstfit+0x181b>
f01227d7:	83 ec 04             	sub    $0x4,%esp
f01227da:	68 2c ab 13 f0       	push   $0xf013ab2c
f01227df:	68 ba 07 00 00       	push   $0x7ba
f01227e4:	68 7a a2 13 f0       	push   $0xf013a27a
f01227e9:	e8 b8 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01227ee:	e8 a5 95 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01227f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227f6:	e8 91 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01227fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01227fe:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122804:	83 ec 0c             	sub    $0xc,%esp
f0122807:	50                   	push   %eax
f0122808:	e8 e9 4b fe ff       	call   f01073f6 <kfree>
f012280d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122810:	e8 77 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122815:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122818:	74 17                	je     f0122831 <test_kfree_bestfirstfit+0x185e>
f012281a:	83 ec 04             	sub    $0x4,%esp
f012281d:	68 94 a2 13 f0       	push   $0xf013a294
f0122822:	68 c0 07 00 00       	push   $0x7c0
f0122827:	68 7a a2 13 f0       	push   $0xf013a27a
f012282c:	e8 75 d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122831:	e8 62 95 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122836:	89 c2                	mov    %eax,%edx
f0122838:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012283b:	39 c2                	cmp    %eax,%edx
f012283d:	74 17                	je     f0122856 <test_kfree_bestfirstfit+0x1883>
f012283f:	83 ec 04             	sub    $0x4,%esp
f0122842:	68 2c ab 13 f0       	push   $0xf013ab2c
f0122847:	68 c1 07 00 00       	push   $0x7c1
f012284c:	68 7a a2 13 f0       	push   $0xf013a27a
f0122851:	e8 50 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122856:	e8 3d 95 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012285b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012285e:	e8 29 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122863:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122866:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012286c:	83 ec 0c             	sub    $0xc,%esp
f012286f:	50                   	push   %eax
f0122870:	e8 81 4b fe ff       	call   f01073f6 <kfree>
f0122875:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122878:	e8 0f 14 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012287d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122880:	74 17                	je     f0122899 <test_kfree_bestfirstfit+0x18c6>
f0122882:	83 ec 04             	sub    $0x4,%esp
f0122885:	68 94 a2 13 f0       	push   $0xf013a294
f012288a:	68 c7 07 00 00       	push   $0x7c7
f012288f:	68 7a a2 13 f0       	push   $0xf013a27a
f0122894:	e8 0d d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122899:	e8 fa 94 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012289e:	89 c2                	mov    %eax,%edx
f01228a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01228a3:	39 c2                	cmp    %eax,%edx
f01228a5:	74 17                	je     f01228be <test_kfree_bestfirstfit+0x18eb>
f01228a7:	83 ec 04             	sub    $0x4,%esp
f01228aa:	68 2c ab 13 f0       	push   $0xf013ab2c
f01228af:	68 c8 07 00 00       	push   $0x7c8
f01228b4:	68 7a a2 13 f0       	push   $0xf013a27a
f01228b9:	e8 e8 d8 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01228be:	e8 d5 94 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01228c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228c6:	e8 c1 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01228ce:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01228d4:	83 ec 0c             	sub    $0xc,%esp
f01228d7:	50                   	push   %eax
f01228d8:	e8 19 4b fe ff       	call   f01073f6 <kfree>
f01228dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228e0:	e8 a7 13 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01228e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228e8:	74 17                	je     f0122901 <test_kfree_bestfirstfit+0x192e>
f01228ea:	83 ec 04             	sub    $0x4,%esp
f01228ed:	68 94 a2 13 f0       	push   $0xf013a294
f01228f2:	68 ce 07 00 00       	push   $0x7ce
f01228f7:	68 7a a2 13 f0       	push   $0xf013a27a
f01228fc:	e8 a5 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122901:	e8 92 94 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122906:	89 c2                	mov    %eax,%edx
f0122908:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012290b:	39 c2                	cmp    %eax,%edx
f012290d:	74 17                	je     f0122926 <test_kfree_bestfirstfit+0x1953>
f012290f:	83 ec 04             	sub    $0x4,%esp
f0122912:	68 2c ab 13 f0       	push   $0xf013ab2c
f0122917:	68 cf 07 00 00       	push   $0x7cf
f012291c:	68 7a a2 13 f0       	push   $0xf013a27a
f0122921:	e8 80 d8 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0122926:	83 ec 0c             	sub    $0xc,%esp
f0122929:	68 73 ab 13 f0       	push   $0xf013ab73
f012292e:	e8 fa e2 fd ff       	call   f0100c2d <cprintf>
f0122933:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122936:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012293d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122944:	eb 48                	jmp    f012298e <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122946:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122949:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012294e:	83 ec 04             	sub    $0x4,%esp
f0122951:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0122957:	51                   	push   %ecx
f0122958:	52                   	push   %edx
f0122959:	50                   	push   %eax
f012295a:	e8 0a 40 fe ff       	call   f0106969 <get_page_table>
f012295f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122962:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0122968:	85 c0                	test   %eax,%eax
f012296a:	75 17                	jne    f0122983 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012296c:	83 ec 04             	sub    $0x4,%esp
f012296f:	68 7c ab 13 f0       	push   $0xf013ab7c
f0122974:	68 dd 07 00 00       	push   $0x7dd
f0122979:	68 7a a2 13 f0       	push   $0xf013a27a
f012297e:	e8 23 d8 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122983:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012298a:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012298e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122992:	78 b2                	js     f0122946 <test_kfree_bestfirstfit+0x1973>
f0122994:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122998:	7f 09                	jg     f01229a3 <test_kfree_bestfirstfit+0x19d0>
f012299a:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01229a1:	76 a3                	jbe    f0122946 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01229a3:	83 ec 0c             	sub    $0xc,%esp
f01229a6:	68 5e a4 13 f0       	push   $0xf013a45e
f01229ab:	e8 7d e2 fd ff       	call   f0100c2d <cprintf>
f01229b0:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01229b3:	83 ec 0c             	sub    $0xc,%esp
f01229b6:	68 e4 ab 13 f0       	push   $0xf013abe4
f01229bb:	e8 6d e2 fd ff       	call   f0100c2d <cprintf>
f01229c0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01229c3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01229c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01229cb:	5b                   	pop    %ebx
f01229cc:	5f                   	pop    %edi
f01229cd:	5d                   	pop    %ebp
f01229ce:	c3                   	ret    

f01229cf <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01229cf:	55                   	push   %ebp
f01229d0:	89 e5                	mov    %esp,%ebp
f01229d2:	57                   	push   %edi
f01229d3:	56                   	push   %esi
f01229d4:	53                   	push   %ebx
f01229d5:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01229db:	83 ec 0c             	sub    $0xc,%esp
f01229de:	68 bc a1 13 f0       	push   $0xf013a1bc
f01229e3:	e8 45 e2 fd ff       	call   f0100c2d <cprintf>
f01229e8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01229eb:	83 ec 0c             	sub    $0xc,%esp
f01229ee:	68 ec a1 13 f0       	push   $0xf013a1ec
f01229f3:	e8 35 e2 fd ff       	call   f0100c2d <cprintf>
f01229f8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01229fb:	83 ec 0c             	sub    $0xc,%esp
f01229fe:	68 bc a1 13 f0       	push   $0xf013a1bc
f0122a03:	e8 25 e2 fd ff       	call   f0100c2d <cprintf>
f0122a08:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122a0b:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122a0f:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122a13:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122a19:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122a1f:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122a26:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122a2d:	e8 66 93 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122a32:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122a35:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0122a3b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a45:	89 d7                	mov    %edx,%edi
f0122a47:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122a49:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0122a4f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a54:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a59:	89 d7                	mov    %edx,%edi
f0122a5b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122a5d:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0122a63:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122a68:	b8 00 00 00 00       	mov    $0x0,%eax
f0122a6d:	89 d7                	mov    %edx,%edi
f0122a6f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a71:	e8 22 93 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122a76:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a79:	e8 0e 12 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122a7e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122a81:	83 ec 0c             	sub    $0xc,%esp
f0122a84:	68 00 fc 1f 00       	push   $0x1ffc00
f0122a89:	e8 4e 49 fe ff       	call   f01073dc <kmalloc>
f0122a8e:	83 c4 10             	add    $0x10,%esp
f0122a91:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a97:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0122a9d:	89 c1                	mov    %eax,%ecx
f0122a9f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122aa6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122aa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122aae:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122ab1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122ab4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ab9:	f7 75 a0             	divl   -0x60(%ebp)
f0122abc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122abf:	29 d0                	sub    %edx,%eax
f0122ac1:	89 c3                	mov    %eax,%ebx
f0122ac3:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122aca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122acf:	0f b6 d0             	movzbl %al,%edx
f0122ad2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122ad5:	01 d0                	add    %edx,%eax
f0122ad7:	48                   	dec    %eax
f0122ad8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122adb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ade:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ae3:	f7 75 98             	divl   -0x68(%ebp)
f0122ae6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ae9:	29 d0                	sub    %edx,%eax
f0122aeb:	01 c3                	add    %eax,%ebx
f0122aed:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122af4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122af9:	0f b6 c0             	movzbl %al,%eax
f0122afc:	c1 e0 04             	shl    $0x4,%eax
f0122aff:	89 c2                	mov    %eax,%edx
f0122b01:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122b04:	01 d0                	add    %edx,%eax
f0122b06:	48                   	dec    %eax
f0122b07:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122b0a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b12:	f7 75 90             	divl   -0x70(%ebp)
f0122b15:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b18:	29 d0                	sub    %edx,%eax
f0122b1a:	01 d8                	add    %ebx,%eax
f0122b1c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122b21:	39 c1                	cmp    %eax,%ecx
f0122b23:	74 17                	je     f0122b3c <test_kheap_phys_addr+0x16d>
f0122b25:	83 ec 04             	sub    $0x4,%esp
f0122b28:	68 60 a3 13 f0       	push   $0xf013a360
f0122b2d:	68 0a 08 00 00       	push   $0x80a
f0122b32:	68 7a a2 13 f0       	push   $0xf013a27a
f0122b37:	e8 6a d6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b3c:	e8 4b 11 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b41:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122b44:	74 17                	je     f0122b5d <test_kheap_phys_addr+0x18e>
f0122b46:	83 ec 04             	sub    $0x4,%esp
f0122b49:	68 94 a2 13 f0       	push   $0xf013a294
f0122b4e:	68 0b 08 00 00       	push   $0x80b
f0122b53:	68 7a a2 13 f0       	push   $0xf013a27a
f0122b58:	e8 49 d6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b5d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122b60:	e8 33 92 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122b65:	29 c3                	sub    %eax,%ebx
f0122b67:	89 d8                	mov    %ebx,%eax
f0122b69:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122b6e:	74 17                	je     f0122b87 <test_kheap_phys_addr+0x1b8>
f0122b70:	83 ec 04             	sub    $0x4,%esp
f0122b73:	68 fc a2 13 f0       	push   $0xf013a2fc
f0122b78:	68 0c 08 00 00       	push   $0x80c
f0122b7d:	68 7a a2 13 f0       	push   $0xf013a27a
f0122b82:	e8 1f d6 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b87:	e8 0c 92 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122b8c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b8f:	e8 f8 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122b94:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122b97:	83 ec 0c             	sub    $0xc,%esp
f0122b9a:	68 00 fc 1f 00       	push   $0x1ffc00
f0122b9f:	e8 38 48 fe ff       	call   f01073dc <kmalloc>
f0122ba4:	83 c4 10             	add    $0x10,%esp
f0122ba7:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122bad:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0122bb3:	89 c1                	mov    %eax,%ecx
f0122bb5:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122bbc:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122bbf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bc4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122bc7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122bca:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bcf:	f7 75 88             	divl   -0x78(%ebp)
f0122bd2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122bd5:	29 d0                	sub    %edx,%eax
f0122bd7:	89 c3                	mov    %eax,%ebx
f0122bd9:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122be0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122be5:	0f b6 d0             	movzbl %al,%edx
f0122be8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122beb:	01 d0                	add    %edx,%eax
f0122bed:	48                   	dec    %eax
f0122bee:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122bf4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122bfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bff:	f7 75 80             	divl   -0x80(%ebp)
f0122c02:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122c08:	29 d0                	sub    %edx,%eax
f0122c0a:	01 c3                	add    %eax,%ebx
f0122c0c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122c13:	10 00 00 
f0122c16:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122c1b:	0f b6 c0             	movzbl %al,%eax
f0122c1e:	c1 e0 04             	shl    $0x4,%eax
f0122c21:	89 c2                	mov    %eax,%edx
f0122c23:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122c29:	01 d0                	add    %edx,%eax
f0122c2b:	48                   	dec    %eax
f0122c2c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122c32:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c3d:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122c43:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122c49:	29 d0                	sub    %edx,%eax
f0122c4b:	01 d8                	add    %ebx,%eax
f0122c4d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122c52:	39 c1                	cmp    %eax,%ecx
f0122c54:	74 17                	je     f0122c6d <test_kheap_phys_addr+0x29e>
f0122c56:	83 ec 04             	sub    $0x4,%esp
f0122c59:	68 60 a3 13 f0       	push   $0xf013a360
f0122c5e:	68 12 08 00 00       	push   $0x812
f0122c63:	68 7a a2 13 f0       	push   $0xf013a27a
f0122c68:	e8 39 d5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c6d:	e8 1a 10 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122c72:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122c75:	74 17                	je     f0122c8e <test_kheap_phys_addr+0x2bf>
f0122c77:	83 ec 04             	sub    $0x4,%esp
f0122c7a:	68 94 a2 13 f0       	push   $0xf013a294
f0122c7f:	68 13 08 00 00       	push   $0x813
f0122c84:	68 7a a2 13 f0       	push   $0xf013a27a
f0122c89:	e8 18 d5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c8e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122c91:	e8 02 91 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122c96:	29 c3                	sub    %eax,%ebx
f0122c98:	89 d8                	mov    %ebx,%eax
f0122c9a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122c9f:	74 17                	je     f0122cb8 <test_kheap_phys_addr+0x2e9>
f0122ca1:	83 ec 04             	sub    $0x4,%esp
f0122ca4:	68 fc a2 13 f0       	push   $0xf013a2fc
f0122ca9:	68 14 08 00 00       	push   $0x814
f0122cae:	68 7a a2 13 f0       	push   $0xf013a27a
f0122cb3:	e8 ee d4 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cb8:	e8 db 90 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122cbd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122cc0:	e8 c7 0f fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122cc5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122cc8:	83 ec 0c             	sub    $0xc,%esp
f0122ccb:	68 00 08 00 00       	push   $0x800
f0122cd0:	e8 07 47 fe ff       	call   f01073dc <kmalloc>
f0122cd5:	83 c4 10             	add    $0x10,%esp
f0122cd8:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122cde:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0122ce4:	89 c1                	mov    %eax,%ecx
f0122ce6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122ced:	10 00 00 
f0122cf0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122cf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122cfb:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122d01:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122d07:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d0c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122d12:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122d18:	29 d0                	sub    %edx,%eax
f0122d1a:	89 c3                	mov    %eax,%ebx
f0122d1c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122d23:	10 00 00 
f0122d26:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122d2b:	0f b6 d0             	movzbl %al,%edx
f0122d2e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122d34:	01 d0                	add    %edx,%eax
f0122d36:	48                   	dec    %eax
f0122d37:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122d3d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d48:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122d4e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d54:	29 d0                	sub    %edx,%eax
f0122d56:	01 c3                	add    %eax,%ebx
f0122d58:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0122d5f:	10 00 00 
f0122d62:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122d67:	0f b6 c0             	movzbl %al,%eax
f0122d6a:	c1 e0 04             	shl    $0x4,%eax
f0122d6d:	89 c2                	mov    %eax,%edx
f0122d6f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d75:	01 d0                	add    %edx,%eax
f0122d77:	48                   	dec    %eax
f0122d78:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0122d7e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d84:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d89:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0122d8f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d95:	29 d0                	sub    %edx,%eax
f0122d97:	01 d8                	add    %ebx,%eax
f0122d99:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122d9e:	39 c1                	cmp    %eax,%ecx
f0122da0:	74 17                	je     f0122db9 <test_kheap_phys_addr+0x3ea>
f0122da2:	83 ec 04             	sub    $0x4,%esp
f0122da5:	68 60 a3 13 f0       	push   $0xf013a360
f0122daa:	68 1a 08 00 00       	push   $0x81a
f0122daf:	68 7a a2 13 f0       	push   $0xf013a27a
f0122db4:	e8 ed d3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122db9:	e8 ce 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122dbe:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122dc1:	74 17                	je     f0122dda <test_kheap_phys_addr+0x40b>
f0122dc3:	83 ec 04             	sub    $0x4,%esp
f0122dc6:	68 94 a2 13 f0       	push   $0xf013a294
f0122dcb:	68 1b 08 00 00       	push   $0x81b
f0122dd0:	68 7a a2 13 f0       	push   $0xf013a27a
f0122dd5:	e8 cc d3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122dda:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122ddd:	e8 b6 8f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122de2:	29 c3                	sub    %eax,%ebx
f0122de4:	89 d8                	mov    %ebx,%eax
f0122de6:	83 f8 01             	cmp    $0x1,%eax
f0122de9:	74 17                	je     f0122e02 <test_kheap_phys_addr+0x433>
f0122deb:	83 ec 04             	sub    $0x4,%esp
f0122dee:	68 fc a2 13 f0       	push   $0xf013a2fc
f0122df3:	68 1c 08 00 00       	push   $0x81c
f0122df8:	68 7a a2 13 f0       	push   $0xf013a27a
f0122dfd:	e8 a4 d3 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e02:	e8 91 8f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122e07:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e0a:	e8 7d 0e fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122e0f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122e12:	83 ec 0c             	sub    $0xc,%esp
f0122e15:	68 00 08 00 00       	push   $0x800
f0122e1a:	e8 bd 45 fe ff       	call   f01073dc <kmalloc>
f0122e1f:	83 c4 10             	add    $0x10,%esp
f0122e22:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e28:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0122e2e:	89 c1                	mov    %eax,%ecx
f0122e30:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0122e37:	10 00 00 
f0122e3a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122e40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e45:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0122e4b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122e51:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e56:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0122e5c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122e62:	29 d0                	sub    %edx,%eax
f0122e64:	89 c3                	mov    %eax,%ebx
f0122e66:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0122e6d:	10 00 00 
f0122e70:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122e75:	0f b6 d0             	movzbl %al,%edx
f0122e78:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122e7e:	01 d0                	add    %edx,%eax
f0122e80:	48                   	dec    %eax
f0122e81:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0122e87:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e92:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0122e98:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122e9e:	29 d0                	sub    %edx,%eax
f0122ea0:	01 c3                	add    %eax,%ebx
f0122ea2:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0122ea9:	10 00 00 
f0122eac:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122eb1:	0f b6 c0             	movzbl %al,%eax
f0122eb4:	c1 e0 04             	shl    $0x4,%eax
f0122eb7:	89 c2                	mov    %eax,%edx
f0122eb9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ebf:	01 d0                	add    %edx,%eax
f0122ec1:	48                   	dec    %eax
f0122ec2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0122ec8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ed3:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0122ed9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122edf:	29 d0                	sub    %edx,%eax
f0122ee1:	01 d8                	add    %ebx,%eax
f0122ee3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122ee8:	39 c1                	cmp    %eax,%ecx
f0122eea:	74 17                	je     f0122f03 <test_kheap_phys_addr+0x534>
f0122eec:	83 ec 04             	sub    $0x4,%esp
f0122eef:	68 60 a3 13 f0       	push   $0xf013a360
f0122ef4:	68 22 08 00 00       	push   $0x822
f0122ef9:	68 7a a2 13 f0       	push   $0xf013a27a
f0122efe:	e8 a3 d2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f03:	e8 84 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f08:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f0b:	74 17                	je     f0122f24 <test_kheap_phys_addr+0x555>
f0122f0d:	83 ec 04             	sub    $0x4,%esp
f0122f10:	68 94 a2 13 f0       	push   $0xf013a294
f0122f15:	68 23 08 00 00       	push   $0x823
f0122f1a:	68 7a a2 13 f0       	push   $0xf013a27a
f0122f1f:	e8 82 d2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f24:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f27:	e8 6c 8e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122f2c:	29 c3                	sub    %eax,%ebx
f0122f2e:	89 d8                	mov    %ebx,%eax
f0122f30:	83 f8 01             	cmp    $0x1,%eax
f0122f33:	74 17                	je     f0122f4c <test_kheap_phys_addr+0x57d>
f0122f35:	83 ec 04             	sub    $0x4,%esp
f0122f38:	68 fc a2 13 f0       	push   $0xf013a2fc
f0122f3d:	68 24 08 00 00       	push   $0x824
f0122f42:	68 7a a2 13 f0       	push   $0xf013a27a
f0122f47:	e8 5a d2 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f4c:	e8 47 8e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0122f51:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f54:	e8 33 0d fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0122f59:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122f5c:	83 ec 0c             	sub    $0xc,%esp
f0122f5f:	68 00 1c 00 00       	push   $0x1c00
f0122f64:	e8 73 44 fe ff       	call   f01073dc <kmalloc>
f0122f69:	83 c4 10             	add    $0x10,%esp
f0122f6c:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f72:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0122f78:	89 c1                	mov    %eax,%ecx
f0122f7a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0122f81:	10 00 00 
f0122f84:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f8a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f8f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0122f95:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fa0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0122fa6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122fac:	29 d0                	sub    %edx,%eax
f0122fae:	89 c3                	mov    %eax,%ebx
f0122fb0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0122fb7:	10 00 00 
f0122fba:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122fbf:	0f b6 d0             	movzbl %al,%edx
f0122fc2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122fc8:	01 d0                	add    %edx,%eax
f0122fca:	48                   	dec    %eax
f0122fcb:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0122fd1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122fd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fdc:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0122fe2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122fe8:	29 d0                	sub    %edx,%eax
f0122fea:	01 c3                	add    %eax,%ebx
f0122fec:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0122ff3:	10 00 00 
f0122ff6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0122ffb:	0f b6 c0             	movzbl %al,%eax
f0122ffe:	c1 e0 04             	shl    $0x4,%eax
f0123001:	89 c2                	mov    %eax,%edx
f0123003:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123009:	01 d0                	add    %edx,%eax
f012300b:	48                   	dec    %eax
f012300c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123012:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123018:	ba 00 00 00 00       	mov    $0x0,%edx
f012301d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123023:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123029:	29 d0                	sub    %edx,%eax
f012302b:	01 d8                	add    %ebx,%eax
f012302d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123032:	39 c1                	cmp    %eax,%ecx
f0123034:	74 17                	je     f012304d <test_kheap_phys_addr+0x67e>
f0123036:	83 ec 04             	sub    $0x4,%esp
f0123039:	68 60 a3 13 f0       	push   $0xf013a360
f012303e:	68 2a 08 00 00       	push   $0x82a
f0123043:	68 7a a2 13 f0       	push   $0xf013a27a
f0123048:	e8 59 d1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012304d:	e8 3a 0c fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123052:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123055:	74 17                	je     f012306e <test_kheap_phys_addr+0x69f>
f0123057:	83 ec 04             	sub    $0x4,%esp
f012305a:	68 94 a2 13 f0       	push   $0xf013a294
f012305f:	68 2b 08 00 00       	push   $0x82b
f0123064:	68 7a a2 13 f0       	push   $0xf013a27a
f0123069:	e8 38 d1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012306e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123071:	e8 22 8d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123076:	29 c3                	sub    %eax,%ebx
f0123078:	89 d8                	mov    %ebx,%eax
f012307a:	83 f8 02             	cmp    $0x2,%eax
f012307d:	74 17                	je     f0123096 <test_kheap_phys_addr+0x6c7>
f012307f:	83 ec 04             	sub    $0x4,%esp
f0123082:	68 fc a2 13 f0       	push   $0xf013a2fc
f0123087:	68 2c 08 00 00       	push   $0x82c
f012308c:	68 7a a2 13 f0       	push   $0xf013a27a
f0123091:	e8 10 d1 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123096:	e8 fd 8c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012309b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012309e:	e8 e9 0b fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01230a3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01230a6:	83 ec 0c             	sub    $0xc,%esp
f01230a9:	68 00 fc 2f 00       	push   $0x2ffc00
f01230ae:	e8 29 43 fe ff       	call   f01073dc <kmalloc>
f01230b3:	83 c4 10             	add    $0x10,%esp
f01230b6:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230bc:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01230c2:	89 c1                	mov    %eax,%ecx
f01230c4:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01230cb:	10 00 00 
f01230ce:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01230d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230d9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01230df:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01230e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01230ea:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01230f0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01230f6:	29 d0                	sub    %edx,%eax
f01230f8:	89 c3                	mov    %eax,%ebx
f01230fa:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123101:	10 00 00 
f0123104:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123109:	0f b6 d0             	movzbl %al,%edx
f012310c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123112:	01 d0                	add    %edx,%eax
f0123114:	48                   	dec    %eax
f0123115:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012311b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123121:	ba 00 00 00 00       	mov    $0x0,%edx
f0123126:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012312c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123132:	29 d0                	sub    %edx,%eax
f0123134:	01 c3                	add    %eax,%ebx
f0123136:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012313d:	10 00 00 
f0123140:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123145:	0f b6 c0             	movzbl %al,%eax
f0123148:	c1 e0 04             	shl    $0x4,%eax
f012314b:	89 c2                	mov    %eax,%edx
f012314d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123153:	01 d0                	add    %edx,%eax
f0123155:	48                   	dec    %eax
f0123156:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012315c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123162:	ba 00 00 00 00       	mov    $0x0,%edx
f0123167:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012316d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123173:	29 d0                	sub    %edx,%eax
f0123175:	01 d8                	add    %ebx,%eax
f0123177:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012317c:	39 c1                	cmp    %eax,%ecx
f012317e:	74 17                	je     f0123197 <test_kheap_phys_addr+0x7c8>
f0123180:	83 ec 04             	sub    $0x4,%esp
f0123183:	68 60 a3 13 f0       	push   $0xf013a360
f0123188:	68 32 08 00 00       	push   $0x832
f012318d:	68 7a a2 13 f0       	push   $0xf013a27a
f0123192:	e8 0f d0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123197:	e8 f0 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012319c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012319f:	74 17                	je     f01231b8 <test_kheap_phys_addr+0x7e9>
f01231a1:	83 ec 04             	sub    $0x4,%esp
f01231a4:	68 94 a2 13 f0       	push   $0xf013a294
f01231a9:	68 33 08 00 00       	push   $0x833
f01231ae:	68 7a a2 13 f0       	push   $0xf013a27a
f01231b3:	e8 ee cf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231b8:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01231bb:	e8 d8 8b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01231c0:	29 c3                	sub    %eax,%ebx
f01231c2:	89 d8                	mov    %ebx,%eax
f01231c4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01231c9:	74 17                	je     f01231e2 <test_kheap_phys_addr+0x813>
f01231cb:	83 ec 04             	sub    $0x4,%esp
f01231ce:	68 fc a2 13 f0       	push   $0xf013a2fc
f01231d3:	68 34 08 00 00       	push   $0x834
f01231d8:	68 7a a2 13 f0       	push   $0xf013a27a
f01231dd:	e8 c4 cf fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01231e2:	e8 b1 8b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01231e7:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231ea:	e8 9d 0a fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01231ef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01231f2:	83 ec 0c             	sub    $0xc,%esp
f01231f5:	68 00 fc 5f 00       	push   $0x5ffc00
f01231fa:	e8 dd 41 fe ff       	call   f01073dc <kmalloc>
f01231ff:	83 c4 10             	add    $0x10,%esp
f0123202:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123208:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f012320e:	89 c1                	mov    %eax,%ecx
f0123210:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123217:	10 00 00 
f012321a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123220:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123225:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012322b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123231:	ba 00 00 00 00       	mov    $0x0,%edx
f0123236:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012323c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123242:	29 d0                	sub    %edx,%eax
f0123244:	89 c3                	mov    %eax,%ebx
f0123246:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012324d:	10 00 00 
f0123250:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123255:	0f b6 d0             	movzbl %al,%edx
f0123258:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012325e:	01 d0                	add    %edx,%eax
f0123260:	48                   	dec    %eax
f0123261:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123267:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012326d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123272:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123278:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012327e:	29 d0                	sub    %edx,%eax
f0123280:	01 c3                	add    %eax,%ebx
f0123282:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123289:	10 00 00 
f012328c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123291:	0f b6 c0             	movzbl %al,%eax
f0123294:	c1 e0 04             	shl    $0x4,%eax
f0123297:	89 c2                	mov    %eax,%edx
f0123299:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012329f:	01 d0                	add    %edx,%eax
f01232a1:	48                   	dec    %eax
f01232a2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01232a8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01232ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01232b3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01232b9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01232bf:	29 d0                	sub    %edx,%eax
f01232c1:	01 d8                	add    %ebx,%eax
f01232c3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01232c8:	39 c1                	cmp    %eax,%ecx
f01232ca:	74 17                	je     f01232e3 <test_kheap_phys_addr+0x914>
f01232cc:	83 ec 04             	sub    $0x4,%esp
f01232cf:	68 60 a3 13 f0       	push   $0xf013a360
f01232d4:	68 3a 08 00 00       	push   $0x83a
f01232d9:	68 7a a2 13 f0       	push   $0xf013a27a
f01232de:	e8 c3 ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232e3:	e8 a4 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01232e8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01232eb:	74 17                	je     f0123304 <test_kheap_phys_addr+0x935>
f01232ed:	83 ec 04             	sub    $0x4,%esp
f01232f0:	68 94 a2 13 f0       	push   $0xf013a294
f01232f5:	68 3b 08 00 00       	push   $0x83b
f01232fa:	68 7a a2 13 f0       	push   $0xf013a27a
f01232ff:	e8 a2 ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123304:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123307:	e8 8c 8a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012330c:	29 c3                	sub    %eax,%ebx
f012330e:	89 d8                	mov    %ebx,%eax
f0123310:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123315:	74 17                	je     f012332e <test_kheap_phys_addr+0x95f>
f0123317:	83 ec 04             	sub    $0x4,%esp
f012331a:	68 fc a2 13 f0       	push   $0xf013a2fc
f012331f:	68 3c 08 00 00       	push   $0x83c
f0123324:	68 7a a2 13 f0       	push   $0xf013a27a
f0123329:	e8 78 ce fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012332e:	e8 65 8a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123333:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123336:	e8 51 09 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012333b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012333e:	83 ec 0c             	sub    $0xc,%esp
f0123341:	68 00 38 00 00       	push   $0x3800
f0123346:	e8 91 40 fe ff       	call   f01073dc <kmalloc>
f012334b:	83 c4 10             	add    $0x10,%esp
f012334e:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123354:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012335a:	89 c1                	mov    %eax,%ecx
f012335c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123363:	10 00 00 
f0123366:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012336c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123371:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123377:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012337d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123382:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123388:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012338e:	29 d0                	sub    %edx,%eax
f0123390:	89 c3                	mov    %eax,%ebx
f0123392:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123399:	10 00 00 
f012339c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01233a1:	0f b6 d0             	movzbl %al,%edx
f01233a4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01233aa:	01 d0                	add    %edx,%eax
f01233ac:	48                   	dec    %eax
f01233ad:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01233b3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01233b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01233be:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01233c4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01233ca:	29 d0                	sub    %edx,%eax
f01233cc:	01 c3                	add    %eax,%ebx
f01233ce:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01233d5:	10 00 00 
f01233d8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01233dd:	0f b6 c0             	movzbl %al,%eax
f01233e0:	c1 e0 04             	shl    $0x4,%eax
f01233e3:	89 c2                	mov    %eax,%edx
f01233e5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01233eb:	01 d0                	add    %edx,%eax
f01233ed:	48                   	dec    %eax
f01233ee:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01233f4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01233fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01233ff:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123405:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012340b:	29 d0                	sub    %edx,%eax
f012340d:	01 d8                	add    %ebx,%eax
f012340f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123414:	39 c1                	cmp    %eax,%ecx
f0123416:	74 17                	je     f012342f <test_kheap_phys_addr+0xa60>
f0123418:	83 ec 04             	sub    $0x4,%esp
f012341b:	68 60 a3 13 f0       	push   $0xf013a360
f0123420:	68 42 08 00 00       	push   $0x842
f0123425:	68 7a a2 13 f0       	push   $0xf013a27a
f012342a:	e8 77 cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012342f:	e8 58 08 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f0123434:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123437:	74 17                	je     f0123450 <test_kheap_phys_addr+0xa81>
f0123439:	83 ec 04             	sub    $0x4,%esp
f012343c:	68 94 a2 13 f0       	push   $0xf013a294
f0123441:	68 43 08 00 00       	push   $0x843
f0123446:	68 7a a2 13 f0       	push   $0xf013a27a
f012344b:	e8 56 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123450:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123453:	e8 40 89 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123458:	29 c3                	sub    %eax,%ebx
f012345a:	89 d8                	mov    %ebx,%eax
f012345c:	83 f8 04             	cmp    $0x4,%eax
f012345f:	74 17                	je     f0123478 <test_kheap_phys_addr+0xaa9>
f0123461:	83 ec 04             	sub    $0x4,%esp
f0123464:	68 fc a2 13 f0       	push   $0xf013a2fc
f0123469:	68 44 08 00 00       	push   $0x844
f012346e:	68 7a a2 13 f0       	push   $0xf013a27a
f0123473:	e8 2e cd fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123478:	89 e0                	mov    %esp,%eax
f012347a:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012347c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123483:	10 00 00 
f0123486:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012348c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123491:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123497:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012349d:	ba 00 00 00 00       	mov    $0x0,%edx
f01234a2:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01234a8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01234ae:	29 d0                	sub    %edx,%eax
f01234b0:	89 c1                	mov    %eax,%ecx
f01234b2:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01234b9:	10 00 00 
f01234bc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01234c1:	0f b6 d0             	movzbl %al,%edx
f01234c4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01234ca:	01 d0                	add    %edx,%eax
f01234cc:	48                   	dec    %eax
f01234cd:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01234d3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01234d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01234de:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01234e4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01234ea:	29 d0                	sub    %edx,%eax
f01234ec:	01 c1                	add    %eax,%ecx
f01234ee:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f01234f5:	10 00 00 
f01234f8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01234fd:	0f b6 c0             	movzbl %al,%eax
f0123500:	c1 e0 04             	shl    $0x4,%eax
f0123503:	89 c2                	mov    %eax,%edx
f0123505:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012350b:	01 d0                	add    %edx,%eax
f012350d:	48                   	dec    %eax
f012350e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123514:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012351a:	ba 00 00 00 00       	mov    $0x0,%edx
f012351f:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123525:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012352b:	29 d0                	sub    %edx,%eax
f012352d:	01 c8                	add    %ecx,%eax
f012352f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123534:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012353a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123541:	10 00 00 
f0123544:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012354a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012354f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123555:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012355b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123560:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123566:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012356c:	29 d0                	sub    %edx,%eax
f012356e:	89 c1                	mov    %eax,%ecx
f0123570:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123577:	10 00 00 
f012357a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012357f:	0f b6 d0             	movzbl %al,%edx
f0123582:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123588:	01 d0                	add    %edx,%eax
f012358a:	48                   	dec    %eax
f012358b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123591:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123597:	ba 00 00 00 00       	mov    $0x0,%edx
f012359c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01235a2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01235a8:	29 d0                	sub    %edx,%eax
f01235aa:	01 c1                	add    %eax,%ecx
f01235ac:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01235b3:	10 00 00 
f01235b6:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01235bb:	0f b6 c0             	movzbl %al,%eax
f01235be:	c1 e0 04             	shl    $0x4,%eax
f01235c1:	89 c2                	mov    %eax,%edx
f01235c3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01235c9:	01 d0                	add    %edx,%eax
f01235cb:	48                   	dec    %eax
f01235cc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01235d2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01235d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01235dd:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01235e3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01235e9:	29 d0                	sub    %edx,%eax
f01235eb:	01 c8                	add    %ecx,%eax
f01235ed:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01235f2:	c1 e8 0c             	shr    $0xc,%eax
f01235f5:	89 c2                	mov    %eax,%edx
f01235f7:	4a                   	dec    %edx
f01235f8:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f01235fe:	c1 e0 02             	shl    $0x2,%eax
f0123601:	8d 50 03             	lea    0x3(%eax),%edx
f0123604:	b8 10 00 00 00       	mov    $0x10,%eax
f0123609:	48                   	dec    %eax
f012360a:	01 d0                	add    %edx,%eax
f012360c:	bf 10 00 00 00       	mov    $0x10,%edi
f0123611:	ba 00 00 00 00       	mov    $0x0,%edx
f0123616:	f7 f7                	div    %edi
f0123618:	6b c0 10             	imul   $0x10,%eax,%eax
f012361b:	29 c4                	sub    %eax,%esp
f012361d:	89 e0                	mov    %esp,%eax
f012361f:	83 c0 03             	add    $0x3,%eax
f0123622:	c1 e8 02             	shr    $0x2,%eax
f0123625:	c1 e0 02             	shl    $0x2,%eax
f0123628:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f012362e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123635:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012363c:	10 00 00 
f012363f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123645:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012364a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123650:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123656:	ba 00 00 00 00       	mov    $0x0,%edx
f012365b:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123661:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123667:	29 d0                	sub    %edx,%eax
f0123669:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012366e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123671:	eb 29                	jmp    f012369c <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123673:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123676:	8d 43 01             	lea    0x1(%ebx),%eax
f0123679:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012367c:	83 ec 0c             	sub    $0xc,%esp
f012367f:	ff 75 e0             	pushl  -0x20(%ebp)
f0123682:	e8 a3 3d fe ff       	call   f010742a <kheap_physical_address>
f0123687:	83 c4 10             	add    $0x10,%esp
f012368a:	89 c2                	mov    %eax,%edx
f012368c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123692:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123695:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f012369c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012369f:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01236a5:	72 cc                	jb     f0123673 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01236a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01236aa:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f01236b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01236b7:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01236be:	10 00 00 
f01236c1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01236c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236cc:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01236d2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01236d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01236dd:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01236e3:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01236e9:	29 d0                	sub    %edx,%eax
f01236eb:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01236f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01236f3:	e9 ab 00 00 00       	jmp    f01237a3 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01236f8:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f01236fd:	83 ec 04             	sub    $0x4,%esp
f0123700:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123706:	52                   	push   %edx
f0123707:	ff 75 e0             	pushl  -0x20(%ebp)
f012370a:	50                   	push   %eax
f012370b:	e8 59 32 fe ff       	call   f0106969 <get_page_table>
f0123710:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123713:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123719:	85 c0                	test   %eax,%eax
f012371b:	75 17                	jne    f0123734 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012371d:	83 ec 04             	sub    $0x4,%esp
f0123720:	68 1c ac 13 f0       	push   $0xf013ac1c
f0123725:	68 59 08 00 00       	push   $0x859
f012372a:	68 7a a2 13 f0       	push   $0xf013a27a
f012372f:	e8 72 ca fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123734:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123737:	c1 e8 0c             	shr    $0xc,%eax
f012373a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012373f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123742:	eb 4b                	jmp    f012378f <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123744:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f012374a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012374d:	c1 e2 02             	shl    $0x2,%edx
f0123750:	01 d0                	add    %edx,%eax
f0123752:	8b 00                	mov    (%eax),%eax
f0123754:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123759:	89 c1                	mov    %eax,%ecx
f012375b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123761:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123764:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123767:	39 c1                	cmp    %eax,%ecx
f0123769:	74 17                	je     f0123782 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012376b:	83 ec 04             	sub    $0x4,%esp
f012376e:	68 75 ac 13 f0       	push   $0xf013ac75
f0123773:	68 60 08 00 00       	push   $0x860
f0123778:	68 7a a2 13 f0       	push   $0xf013a27a
f012377d:	e8 24 ca fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0123782:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123789:	ff 45 dc             	incl   -0x24(%ebp)
f012378c:	ff 45 e4             	incl   -0x1c(%ebp)
f012378f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123792:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123798:	7d 09                	jge    f01237a3 <test_kheap_phys_addr+0xdd4>
f012379a:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01237a1:	7e a1                	jle    f0123744 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01237a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01237a6:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f01237ac:	0f 82 46 ff ff ff    	jb     f01236f8 <test_kheap_phys_addr+0xd29>
f01237b2:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01237b4:	83 ec 0c             	sub    $0xc,%esp
f01237b7:	68 94 ac 13 f0       	push   $0xf013ac94
f01237bc:	e8 6c d4 fd ff       	call   f0100c2d <cprintf>
f01237c1:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01237c4:	e8 cf 85 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01237c9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01237cf:	e8 b8 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01237d4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f01237da:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01237e0:	83 ec 0c             	sub    $0xc,%esp
f01237e3:	50                   	push   %eax
f01237e4:	e8 0d 3c fe ff       	call   f01073f6 <kfree>
f01237e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237ec:	e8 9b 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01237f1:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01237f7:	74 17                	je     f0123810 <test_kheap_phys_addr+0xe41>
f01237f9:	83 ec 04             	sub    $0x4,%esp
f01237fc:	68 94 a2 13 f0       	push   $0xf013a294
f0123801:	68 6e 08 00 00       	push   $0x86e
f0123806:	68 7a a2 13 f0       	push   $0xf013a27a
f012380b:	e8 96 c9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123810:	e8 83 85 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123815:	89 c2                	mov    %eax,%edx
f0123817:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012381d:	29 c2                	sub    %eax,%edx
f012381f:	89 d0                	mov    %edx,%eax
f0123821:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123826:	74 17                	je     f012383f <test_kheap_phys_addr+0xe70>
f0123828:	83 ec 04             	sub    $0x4,%esp
f012382b:	68 04 aa 13 f0       	push   $0xf013aa04
f0123830:	68 6f 08 00 00       	push   $0x86f
f0123835:	68 7a a2 13 f0       	push   $0xf013a27a
f012383a:	e8 67 c9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012383f:	e8 54 85 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123844:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012384a:	e8 3d 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012384f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0123855:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012385b:	83 ec 0c             	sub    $0xc,%esp
f012385e:	50                   	push   %eax
f012385f:	e8 92 3b fe ff       	call   f01073f6 <kfree>
f0123864:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123867:	e8 20 04 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f012386c:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123872:	74 17                	je     f012388b <test_kheap_phys_addr+0xebc>
f0123874:	83 ec 04             	sub    $0x4,%esp
f0123877:	68 94 a2 13 f0       	push   $0xf013a294
f012387c:	68 75 08 00 00       	push   $0x875
f0123881:	68 7a a2 13 f0       	push   $0xf013a27a
f0123886:	e8 1b c9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012388b:	e8 08 85 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123890:	89 c2                	mov    %eax,%edx
f0123892:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123898:	29 c2                	sub    %eax,%edx
f012389a:	89 d0                	mov    %edx,%eax
f012389c:	3d 00 02 00 00       	cmp    $0x200,%eax
f01238a1:	74 17                	je     f01238ba <test_kheap_phys_addr+0xeeb>
f01238a3:	83 ec 04             	sub    $0x4,%esp
f01238a6:	68 04 aa 13 f0       	push   $0xf013aa04
f01238ab:	68 76 08 00 00       	push   $0x876
f01238b0:	68 7a a2 13 f0       	push   $0xf013a27a
f01238b5:	e8 ec c8 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01238ba:	e8 d9 84 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01238bf:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238c5:	e8 c2 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01238ca:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01238d0:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01238d6:	83 ec 0c             	sub    $0xc,%esp
f01238d9:	50                   	push   %eax
f01238da:	e8 17 3b fe ff       	call   f01073f6 <kfree>
f01238df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01238e2:	e8 a5 03 fe ff       	call   f0103c8c <pf_calculate_free_frames>
f01238e7:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01238ed:	74 17                	je     f0123906 <test_kheap_phys_addr+0xf37>
f01238ef:	83 ec 04             	sub    $0x4,%esp
f01238f2:	68 94 a2 13 f0       	push   $0xf013a294
f01238f7:	68 7c 08 00 00       	push   $0x87c
f01238fc:	68 7a a2 13 f0       	push   $0xf013a27a
f0123901:	e8 a0 c8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123906:	e8 8d 84 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012390b:	89 c2                	mov    %eax,%edx
f012390d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123913:	29 c2                	sub    %eax,%edx
f0123915:	89 d0                	mov    %edx,%eax
f0123917:	3d 00 06 00 00       	cmp    $0x600,%eax
f012391c:	74 17                	je     f0123935 <test_kheap_phys_addr+0xf66>
f012391e:	83 ec 04             	sub    $0x4,%esp
f0123921:	68 04 aa 13 f0       	push   $0xf013aa04
f0123926:	68 7d 08 00 00       	push   $0x87d
f012392b:	68 7a a2 13 f0       	push   $0xf013a27a
f0123930:	e8 71 c8 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123935:	89 e0                	mov    %esp,%eax
f0123937:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123939:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0123940:	10 00 00 
f0123943:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0123949:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012394e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0123954:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012395a:	ba 00 00 00 00       	mov    $0x0,%edx
f012395f:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0123965:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012396b:	29 d0                	sub    %edx,%eax
f012396d:	89 c1                	mov    %eax,%ecx
f012396f:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0123976:	10 00 00 
f0123979:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012397e:	0f b6 d0             	movzbl %al,%edx
f0123981:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0123987:	01 d0                	add    %edx,%eax
f0123989:	48                   	dec    %eax
f012398a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0123990:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123996:	ba 00 00 00 00       	mov    $0x0,%edx
f012399b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01239a1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01239a7:	29 d0                	sub    %edx,%eax
f01239a9:	01 c1                	add    %eax,%ecx
f01239ab:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01239b2:	10 00 00 
f01239b5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01239ba:	0f b6 c0             	movzbl %al,%eax
f01239bd:	c1 e0 04             	shl    $0x4,%eax
f01239c0:	89 c2                	mov    %eax,%edx
f01239c2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01239c8:	01 d0                	add    %edx,%eax
f01239ca:	48                   	dec    %eax
f01239cb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01239d1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01239d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01239dc:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01239e2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01239e8:	29 d0                	sub    %edx,%eax
f01239ea:	01 c8                	add    %ecx,%eax
f01239ec:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01239f1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01239f7:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01239fe:	10 00 00 
f0123a01:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123a07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a0c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0123a12:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a1d:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0123a23:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123a29:	29 d0                	sub    %edx,%eax
f0123a2b:	89 c1                	mov    %eax,%ecx
f0123a2d:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0123a34:	10 00 00 
f0123a37:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123a3c:	0f b6 d0             	movzbl %al,%edx
f0123a3f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123a45:	01 d0                	add    %edx,%eax
f0123a47:	48                   	dec    %eax
f0123a48:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0123a4e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123a54:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a59:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0123a5f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123a65:	29 d0                	sub    %edx,%eax
f0123a67:	01 c1                	add    %eax,%ecx
f0123a69:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0123a70:	10 00 00 
f0123a73:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123a78:	0f b6 c0             	movzbl %al,%eax
f0123a7b:	c1 e0 04             	shl    $0x4,%eax
f0123a7e:	89 c2                	mov    %eax,%edx
f0123a80:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123a86:	01 d0                	add    %edx,%eax
f0123a88:	48                   	dec    %eax
f0123a89:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0123a8f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123a95:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a9a:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0123aa0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123aa6:	29 d0                	sub    %edx,%eax
f0123aa8:	01 c8                	add    %ecx,%eax
f0123aaa:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123aaf:	c1 e8 0c             	shr    $0xc,%eax
f0123ab2:	89 c2                	mov    %eax,%edx
f0123ab4:	4a                   	dec    %edx
f0123ab5:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0123abb:	c1 e0 02             	shl    $0x2,%eax
f0123abe:	8d 50 03             	lea    0x3(%eax),%edx
f0123ac1:	b8 10 00 00 00       	mov    $0x10,%eax
f0123ac6:	48                   	dec    %eax
f0123ac7:	01 d0                	add    %edx,%eax
f0123ac9:	bf 10 00 00 00       	mov    $0x10,%edi
f0123ace:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ad3:	f7 f7                	div    %edi
f0123ad5:	6b c0 10             	imul   $0x10,%eax,%eax
f0123ad8:	29 c4                	sub    %eax,%esp
f0123ada:	89 e0                	mov    %esp,%eax
f0123adc:	83 c0 03             	add    $0x3,%eax
f0123adf:	c1 e8 02             	shr    $0x2,%eax
f0123ae2:	c1 e0 02             	shl    $0x2,%eax
f0123ae5:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0123aeb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123af2:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0123af9:	10 00 00 
f0123afc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0123b02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b07:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0123b0d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123b13:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b18:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0123b1e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123b24:	29 d0                	sub    %edx,%eax
f0123b26:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123b2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123b2e:	eb 29                	jmp    f0123b59 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123b30:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123b33:	8d 43 01             	lea    0x1(%ebx),%eax
f0123b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123b39:	83 ec 0c             	sub    $0xc,%esp
f0123b3c:	ff 75 d8             	pushl  -0x28(%ebp)
f0123b3f:	e8 e6 38 fe ff       	call   f010742a <kheap_physical_address>
f0123b44:	83 c4 10             	add    $0x10,%esp
f0123b47:	89 c2                	mov    %eax,%edx
f0123b49:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123b4f:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123b52:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123b59:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123b5c:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123b62:	72 cc                	jb     f0123b30 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123b64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b67:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0123b6d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123b74:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0123b7b:	10 00 00 
f0123b7e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0123b84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b89:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0123b8f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123b95:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b9a:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0123ba0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123ba6:	29 d0                	sub    %edx,%eax
f0123ba8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123bad:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123bb0:	e9 ab 00 00 00       	jmp    f0123c60 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123bb5:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0123bba:	83 ec 04             	sub    $0x4,%esp
f0123bbd:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0123bc3:	52                   	push   %edx
f0123bc4:	ff 75 d8             	pushl  -0x28(%ebp)
f0123bc7:	50                   	push   %eax
f0123bc8:	e8 9c 2d fe ff       	call   f0106969 <get_page_table>
f0123bcd:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123bd0:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123bd6:	85 c0                	test   %eax,%eax
f0123bd8:	75 17                	jne    f0123bf1 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123bda:	83 ec 04             	sub    $0x4,%esp
f0123bdd:	68 1c ac 13 f0       	push   $0xf013ac1c
f0123be2:	68 93 08 00 00       	push   $0x893
f0123be7:	68 7a a2 13 f0       	push   $0xf013a27a
f0123bec:	e8 b5 c5 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123bf1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123bf4:	c1 e8 0c             	shr    $0xc,%eax
f0123bf7:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123bfc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123bff:	eb 4b                	jmp    f0123c4c <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123c01:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123c07:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123c0a:	c1 e2 02             	shl    $0x2,%edx
f0123c0d:	01 d0                	add    %edx,%eax
f0123c0f:	8b 00                	mov    (%eax),%eax
f0123c11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c16:	89 c1                	mov    %eax,%ecx
f0123c18:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123c1e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123c21:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123c24:	39 c1                	cmp    %eax,%ecx
f0123c26:	74 17                	je     f0123c3f <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c28:	83 ec 04             	sub    $0x4,%esp
f0123c2b:	68 75 ac 13 f0       	push   $0xf013ac75
f0123c30:	68 9a 08 00 00       	push   $0x89a
f0123c35:	68 7a a2 13 f0       	push   $0xf013a27a
f0123c3a:	e8 67 c5 fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f0123c3f:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123c46:	ff 45 d4             	incl   -0x2c(%ebp)
f0123c49:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c4f:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f0123c55:	7d 09                	jge    f0123c60 <test_kheap_phys_addr+0x1291>
f0123c57:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123c5e:	7e a1                	jle    f0123c01 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123c60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123c63:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123c69:	0f 82 46 ff ff ff    	jb     f0123bb5 <test_kheap_phys_addr+0x11e6>
f0123c6f:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123c71:	83 ec 0c             	sub    $0xc,%esp
f0123c74:	68 05 a4 13 f0       	push   $0xf013a405
f0123c79:	e8 af cf fd ff       	call   f0100c2d <cprintf>
f0123c7e:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123c81:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0123c88:	10 00 00 
f0123c8b:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0123c91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123c96:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0123c9c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0123ca2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ca7:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0123cad:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0123cb3:	29 d0                	sub    %edx,%eax
f0123cb5:	89 c1                	mov    %eax,%ecx
f0123cb7:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0123cbe:	10 00 00 
f0123cc1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123cc6:	0f b6 d0             	movzbl %al,%edx
f0123cc9:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0123ccf:	01 d0                	add    %edx,%eax
f0123cd1:	48                   	dec    %eax
f0123cd2:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0123cd8:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0123cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ce3:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0123ce9:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0123cef:	29 d0                	sub    %edx,%eax
f0123cf1:	01 c1                	add    %eax,%ecx
f0123cf3:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0123cfa:	10 00 00 
f0123cfd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123d02:	0f b6 c0             	movzbl %al,%eax
f0123d05:	c1 e0 04             	shl    $0x4,%eax
f0123d08:	89 c2                	mov    %eax,%edx
f0123d0a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123d10:	01 d0                	add    %edx,%eax
f0123d12:	48                   	dec    %eax
f0123d13:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0123d19:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0123d1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d24:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0123d2a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0123d30:	29 d0                	sub    %edx,%eax
f0123d32:	01 c8                	add    %ecx,%eax
f0123d34:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123d39:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0123d3f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d46:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123d4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123d4f:	eb 0a                	jmp    f0123d5b <test_kheap_phys_addr+0x138c>
		{
			i++;
f0123d51:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123d54:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123d5b:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123d62:	76 ed                	jbe    f0123d51 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0123d64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d67:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0123d6d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123d74:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123d7a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123d7d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123d84:	e9 cc 00 00 00       	jmp    f0123e55 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123d89:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123d8c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0123d91:	83 ec 04             	sub    $0x4,%esp
f0123d94:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0123d9a:	51                   	push   %ecx
f0123d9b:	52                   	push   %edx
f0123d9c:	50                   	push   %eax
f0123d9d:	e8 c7 2b fe ff       	call   f0106969 <get_page_table>
f0123da2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123da5:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0123dab:	85 c0                	test   %eax,%eax
f0123dad:	75 17                	jne    f0123dc6 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123daf:	83 ec 04             	sub    $0x4,%esp
f0123db2:	68 1c ac 13 f0       	push   $0xf013ac1c
f0123db7:	68 b6 08 00 00       	push   $0x8b6
f0123dbc:	68 7a a2 13 f0       	push   $0xf013a27a
f0123dc1:	e8 e0 c3 fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123dc6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123dcd:	eb 67                	jmp    f0123e36 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123dcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123dd2:	c1 e0 0c             	shl    $0xc,%eax
f0123dd5:	89 c2                	mov    %eax,%edx
f0123dd7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0123ddd:	01 d0                	add    %edx,%eax
f0123ddf:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123de5:	83 ec 0c             	sub    $0xc,%esp
f0123de8:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0123dee:	e8 37 36 fe ff       	call   f010742a <kheap_physical_address>
f0123df3:	83 c4 10             	add    $0x10,%esp
f0123df6:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123dfc:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0123e02:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123e05:	c1 e2 02             	shl    $0x2,%edx
f0123e08:	01 d0                	add    %edx,%eax
f0123e0a:	8b 00                	mov    (%eax),%eax
f0123e0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123e11:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0123e17:	74 17                	je     f0123e30 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123e19:	83 ec 04             	sub    $0x4,%esp
f0123e1c:	68 75 ac 13 f0       	push   $0xf013ac75
f0123e21:	68 c0 08 00 00       	push   $0x8c0
f0123e26:	68 7a a2 13 f0       	push   $0xf013a27a
f0123e2b:	e8 76 c3 fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123e30:	ff 45 cc             	incl   -0x34(%ebp)
f0123e33:	ff 45 e4             	incl   -0x1c(%ebp)
f0123e36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123e39:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0123e3f:	7d 09                	jge    f0123e4a <test_kheap_phys_addr+0x147b>
f0123e41:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123e48:	7e 85                	jle    f0123dcf <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123e4a:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123e51:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123e55:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e59:	0f 88 2a ff ff ff    	js     f0123d89 <test_kheap_phys_addr+0x13ba>
f0123e5f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123e63:	7f 0d                	jg     f0123e72 <test_kheap_phys_addr+0x14a3>
f0123e65:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123e6c:	0f 86 17 ff ff ff    	jbe    f0123d89 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123e72:	83 ec 0c             	sub    $0xc,%esp
f0123e75:	68 5e a4 13 f0       	push   $0xf013a45e
f0123e7a:	e8 ae cd fd ff       	call   f0100c2d <cprintf>
f0123e7f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123e82:	83 ec 0c             	sub    $0xc,%esp
f0123e85:	68 c8 ac 13 f0       	push   $0xf013acc8
f0123e8a:	e8 9e cd fd ff       	call   f0100c2d <cprintf>
f0123e8f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123e92:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123e97:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123e9a:	5b                   	pop    %ebx
f0123e9b:	5e                   	pop    %esi
f0123e9c:	5f                   	pop    %edi
f0123e9d:	5d                   	pop    %ebp
f0123e9e:	c3                   	ret    

f0123e9f <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123e9f:	55                   	push   %ebp
f0123ea0:	89 e5                	mov    %esp,%ebp
f0123ea2:	57                   	push   %edi
f0123ea3:	56                   	push   %esi
f0123ea4:	53                   	push   %ebx
f0123ea5:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0123eab:	89 e0                	mov    %esp,%eax
f0123ead:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123eaf:	83 ec 0c             	sub    $0xc,%esp
f0123eb2:	68 bc a1 13 f0       	push   $0xf013a1bc
f0123eb7:	e8 71 cd fd ff       	call   f0100c2d <cprintf>
f0123ebc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123ebf:	83 ec 0c             	sub    $0xc,%esp
f0123ec2:	68 ec a1 13 f0       	push   $0xf013a1ec
f0123ec7:	e8 61 cd fd ff       	call   f0100c2d <cprintf>
f0123ecc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123ecf:	83 ec 0c             	sub    $0xc,%esp
f0123ed2:	68 bc a1 13 f0       	push   $0xf013a1bc
f0123ed7:	e8 51 cd fd ff       	call   f0100c2d <cprintf>
f0123edc:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123edf:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123ee3:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123ee7:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123eed:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123ef3:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123efa:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123f01:	e8 92 7e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123f06:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123f09:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0123f0f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f14:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f19:	89 d7                	mov    %edx,%edi
f0123f1b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123f1d:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0123f23:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f28:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f2d:	89 d7                	mov    %edx,%edi
f0123f2f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123f31:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f0123f37:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123f3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0123f41:	89 d7                	mov    %edx,%edi
f0123f43:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f45:	e8 4e 7e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0123f4a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f4d:	e8 3a fd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0123f52:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123f55:	83 ec 0c             	sub    $0xc,%esp
f0123f58:	68 00 fc 1f 00       	push   $0x1ffc00
f0123f5d:	e8 7a 34 fe ff       	call   f01073dc <kmalloc>
f0123f62:	83 c4 10             	add    $0x10,%esp
f0123f65:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123f6b:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123f71:	89 c1                	mov    %eax,%ecx
f0123f73:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123f7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123f7d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f82:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123f85:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123f88:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f8d:	f7 75 b4             	divl   -0x4c(%ebp)
f0123f90:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123f93:	29 d0                	sub    %edx,%eax
f0123f95:	89 c3                	mov    %eax,%ebx
f0123f97:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123f9e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123fa3:	0f b6 d0             	movzbl %al,%edx
f0123fa6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123fa9:	01 d0                	add    %edx,%eax
f0123fab:	48                   	dec    %eax
f0123fac:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123faf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fb7:	f7 75 ac             	divl   -0x54(%ebp)
f0123fba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123fbd:	29 d0                	sub    %edx,%eax
f0123fbf:	01 c3                	add    %eax,%ebx
f0123fc1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123fc8:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0123fcd:	0f b6 c0             	movzbl %al,%eax
f0123fd0:	c1 e0 04             	shl    $0x4,%eax
f0123fd3:	89 c2                	mov    %eax,%edx
f0123fd5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123fd8:	01 d0                	add    %edx,%eax
f0123fda:	48                   	dec    %eax
f0123fdb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123fde:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123fe1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fe6:	f7 75 a4             	divl   -0x5c(%ebp)
f0123fe9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123fec:	29 d0                	sub    %edx,%eax
f0123fee:	01 d8                	add    %ebx,%eax
f0123ff0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123ff5:	39 c1                	cmp    %eax,%ecx
f0123ff7:	74 17                	je     f0124010 <test_kheap_virt_addr+0x171>
f0123ff9:	83 ec 04             	sub    $0x4,%esp
f0123ffc:	68 60 a3 13 f0       	push   $0xf013a360
f0124001:	68 ed 08 00 00       	push   $0x8ed
f0124006:	68 7a a2 13 f0       	push   $0xf013a27a
f012400b:	e8 96 c1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124010:	e8 77 fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124015:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124018:	74 17                	je     f0124031 <test_kheap_virt_addr+0x192>
f012401a:	83 ec 04             	sub    $0x4,%esp
f012401d:	68 94 a2 13 f0       	push   $0xf013a294
f0124022:	68 ee 08 00 00       	push   $0x8ee
f0124027:	68 7a a2 13 f0       	push   $0xf013a27a
f012402c:	e8 75 c1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124031:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124034:	e8 5f 7d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124039:	29 c3                	sub    %eax,%ebx
f012403b:	89 d8                	mov    %ebx,%eax
f012403d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124042:	74 17                	je     f012405b <test_kheap_virt_addr+0x1bc>
f0124044:	83 ec 04             	sub    $0x4,%esp
f0124047:	68 fc a2 13 f0       	push   $0xf013a2fc
f012404c:	68 ef 08 00 00       	push   $0x8ef
f0124051:	68 7a a2 13 f0       	push   $0xf013a27a
f0124056:	e8 4b c1 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012405b:	e8 38 7d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124060:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124063:	e8 24 fc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124068:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012406b:	83 ec 0c             	sub    $0xc,%esp
f012406e:	68 00 fc 1f 00       	push   $0x1ffc00
f0124073:	e8 64 33 fe ff       	call   f01073dc <kmalloc>
f0124078:	83 c4 10             	add    $0x10,%esp
f012407b:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124081:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124087:	89 c1                	mov    %eax,%ecx
f0124089:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124090:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124093:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124098:	89 45 98             	mov    %eax,-0x68(%ebp)
f012409b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012409e:	ba 00 00 00 00       	mov    $0x0,%edx
f01240a3:	f7 75 9c             	divl   -0x64(%ebp)
f01240a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01240a9:	29 d0                	sub    %edx,%eax
f01240ab:	89 c3                	mov    %eax,%ebx
f01240ad:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01240b4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01240b9:	0f b6 d0             	movzbl %al,%edx
f01240bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01240bf:	01 d0                	add    %edx,%eax
f01240c1:	48                   	dec    %eax
f01240c2:	89 45 90             	mov    %eax,-0x70(%ebp)
f01240c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01240c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01240cd:	f7 75 94             	divl   -0x6c(%ebp)
f01240d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01240d3:	29 d0                	sub    %edx,%eax
f01240d5:	01 c3                	add    %eax,%ebx
f01240d7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01240de:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01240e3:	0f b6 c0             	movzbl %al,%eax
f01240e6:	c1 e0 04             	shl    $0x4,%eax
f01240e9:	89 c2                	mov    %eax,%edx
f01240eb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01240ee:	01 d0                	add    %edx,%eax
f01240f0:	48                   	dec    %eax
f01240f1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01240f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01240f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01240fc:	f7 75 8c             	divl   -0x74(%ebp)
f01240ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124102:	29 d0                	sub    %edx,%eax
f0124104:	01 d8                	add    %ebx,%eax
f0124106:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012410b:	39 c1                	cmp    %eax,%ecx
f012410d:	74 17                	je     f0124126 <test_kheap_virt_addr+0x287>
f012410f:	83 ec 04             	sub    $0x4,%esp
f0124112:	68 60 a3 13 f0       	push   $0xf013a360
f0124117:	68 f5 08 00 00       	push   $0x8f5
f012411c:	68 7a a2 13 f0       	push   $0xf013a27a
f0124121:	e8 80 c0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124126:	e8 61 fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012412b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012412e:	74 17                	je     f0124147 <test_kheap_virt_addr+0x2a8>
f0124130:	83 ec 04             	sub    $0x4,%esp
f0124133:	68 94 a2 13 f0       	push   $0xf013a294
f0124138:	68 f6 08 00 00       	push   $0x8f6
f012413d:	68 7a a2 13 f0       	push   $0xf013a27a
f0124142:	e8 5f c0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124147:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012414a:	e8 49 7c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012414f:	29 c3                	sub    %eax,%ebx
f0124151:	89 d8                	mov    %ebx,%eax
f0124153:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124158:	74 17                	je     f0124171 <test_kheap_virt_addr+0x2d2>
f012415a:	83 ec 04             	sub    $0x4,%esp
f012415d:	68 fc a2 13 f0       	push   $0xf013a2fc
f0124162:	68 f7 08 00 00       	push   $0x8f7
f0124167:	68 7a a2 13 f0       	push   $0xf013a27a
f012416c:	e8 35 c0 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124171:	e8 22 7c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124176:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124179:	e8 0e fb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012417e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124181:	83 ec 0c             	sub    $0xc,%esp
f0124184:	68 00 08 00 00       	push   $0x800
f0124189:	e8 4e 32 fe ff       	call   f01073dc <kmalloc>
f012418e:	83 c4 10             	add    $0x10,%esp
f0124191:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124197:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012419d:	89 c1                	mov    %eax,%ecx
f012419f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01241a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01241a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01241ae:	89 45 80             	mov    %eax,-0x80(%ebp)
f01241b1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01241b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01241b9:	f7 75 84             	divl   -0x7c(%ebp)
f01241bc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01241bf:	29 d0                	sub    %edx,%eax
f01241c1:	89 c3                	mov    %eax,%ebx
f01241c3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01241ca:	10 00 00 
f01241cd:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01241d2:	0f b6 d0             	movzbl %al,%edx
f01241d5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01241db:	01 d0                	add    %edx,%eax
f01241dd:	48                   	dec    %eax
f01241de:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01241e4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01241ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01241ef:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01241f5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01241fb:	29 d0                	sub    %edx,%eax
f01241fd:	01 c3                	add    %eax,%ebx
f01241ff:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124206:	10 00 00 
f0124209:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012420e:	0f b6 c0             	movzbl %al,%eax
f0124211:	c1 e0 04             	shl    $0x4,%eax
f0124214:	89 c2                	mov    %eax,%edx
f0124216:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012421c:	01 d0                	add    %edx,%eax
f012421e:	48                   	dec    %eax
f012421f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124225:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012422b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124230:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124236:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012423c:	29 d0                	sub    %edx,%eax
f012423e:	01 d8                	add    %ebx,%eax
f0124240:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124245:	39 c1                	cmp    %eax,%ecx
f0124247:	74 17                	je     f0124260 <test_kheap_virt_addr+0x3c1>
f0124249:	83 ec 04             	sub    $0x4,%esp
f012424c:	68 60 a3 13 f0       	push   $0xf013a360
f0124251:	68 fd 08 00 00       	push   $0x8fd
f0124256:	68 7a a2 13 f0       	push   $0xf013a27a
f012425b:	e8 46 bf fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124260:	e8 27 fa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124265:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124268:	74 17                	je     f0124281 <test_kheap_virt_addr+0x3e2>
f012426a:	83 ec 04             	sub    $0x4,%esp
f012426d:	68 94 a2 13 f0       	push   $0xf013a294
f0124272:	68 fe 08 00 00       	push   $0x8fe
f0124277:	68 7a a2 13 f0       	push   $0xf013a27a
f012427c:	e8 25 bf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124281:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124284:	e8 0f 7b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124289:	29 c3                	sub    %eax,%ebx
f012428b:	89 d8                	mov    %ebx,%eax
f012428d:	83 f8 01             	cmp    $0x1,%eax
f0124290:	74 17                	je     f01242a9 <test_kheap_virt_addr+0x40a>
f0124292:	83 ec 04             	sub    $0x4,%esp
f0124295:	68 fc a2 13 f0       	push   $0xf013a2fc
f012429a:	68 ff 08 00 00       	push   $0x8ff
f012429f:	68 7a a2 13 f0       	push   $0xf013a27a
f01242a4:	e8 fd be fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01242a9:	e8 ea 7a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01242ae:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01242b1:	e8 d6 f9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01242b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01242b9:	83 ec 0c             	sub    $0xc,%esp
f01242bc:	68 00 08 00 00       	push   $0x800
f01242c1:	e8 16 31 fe ff       	call   f01073dc <kmalloc>
f01242c6:	83 c4 10             	add    $0x10,%esp
f01242c9:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01242cf:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01242d5:	89 c1                	mov    %eax,%ecx
f01242d7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01242de:	10 00 00 
f01242e1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01242e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242ec:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01242f2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01242f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01242fd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124303:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124309:	29 d0                	sub    %edx,%eax
f012430b:	89 c3                	mov    %eax,%ebx
f012430d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124314:	10 00 00 
f0124317:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012431c:	0f b6 d0             	movzbl %al,%edx
f012431f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124325:	01 d0                	add    %edx,%eax
f0124327:	48                   	dec    %eax
f0124328:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012432e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124334:	ba 00 00 00 00       	mov    $0x0,%edx
f0124339:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012433f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124345:	29 d0                	sub    %edx,%eax
f0124347:	01 c3                	add    %eax,%ebx
f0124349:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124350:	10 00 00 
f0124353:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124358:	0f b6 c0             	movzbl %al,%eax
f012435b:	c1 e0 04             	shl    $0x4,%eax
f012435e:	89 c2                	mov    %eax,%edx
f0124360:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124366:	01 d0                	add    %edx,%eax
f0124368:	48                   	dec    %eax
f0124369:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012436f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124375:	ba 00 00 00 00       	mov    $0x0,%edx
f012437a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124380:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124386:	29 d0                	sub    %edx,%eax
f0124388:	01 d8                	add    %ebx,%eax
f012438a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012438f:	39 c1                	cmp    %eax,%ecx
f0124391:	74 17                	je     f01243aa <test_kheap_virt_addr+0x50b>
f0124393:	83 ec 04             	sub    $0x4,%esp
f0124396:	68 60 a3 13 f0       	push   $0xf013a360
f012439b:	68 05 09 00 00       	push   $0x905
f01243a0:	68 7a a2 13 f0       	push   $0xf013a27a
f01243a5:	e8 fc bd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243aa:	e8 dd f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01243af:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01243b2:	74 17                	je     f01243cb <test_kheap_virt_addr+0x52c>
f01243b4:	83 ec 04             	sub    $0x4,%esp
f01243b7:	68 94 a2 13 f0       	push   $0xf013a294
f01243bc:	68 06 09 00 00       	push   $0x906
f01243c1:	68 7a a2 13 f0       	push   $0xf013a27a
f01243c6:	e8 db bd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01243cb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01243ce:	e8 c5 79 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01243d3:	29 c3                	sub    %eax,%ebx
f01243d5:	89 d8                	mov    %ebx,%eax
f01243d7:	83 f8 01             	cmp    $0x1,%eax
f01243da:	74 17                	je     f01243f3 <test_kheap_virt_addr+0x554>
f01243dc:	83 ec 04             	sub    $0x4,%esp
f01243df:	68 fc a2 13 f0       	push   $0xf013a2fc
f01243e4:	68 07 09 00 00       	push   $0x907
f01243e9:	68 7a a2 13 f0       	push   $0xf013a27a
f01243ee:	e8 b3 bd fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01243f3:	e8 a0 79 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01243f8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243fb:	e8 8c f8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124400:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124403:	83 ec 0c             	sub    $0xc,%esp
f0124406:	68 00 1c 00 00       	push   $0x1c00
f012440b:	e8 cc 2f fe ff       	call   f01073dc <kmalloc>
f0124410:	83 c4 10             	add    $0x10,%esp
f0124413:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124419:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012441f:	89 c1                	mov    %eax,%ecx
f0124421:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124428:	10 00 00 
f012442b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124431:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124436:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012443c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124442:	ba 00 00 00 00       	mov    $0x0,%edx
f0124447:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012444d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124453:	29 d0                	sub    %edx,%eax
f0124455:	89 c3                	mov    %eax,%ebx
f0124457:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012445e:	10 00 00 
f0124461:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124466:	0f b6 d0             	movzbl %al,%edx
f0124469:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012446f:	01 d0                	add    %edx,%eax
f0124471:	48                   	dec    %eax
f0124472:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124478:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012447e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124483:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124489:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012448f:	29 d0                	sub    %edx,%eax
f0124491:	01 c3                	add    %eax,%ebx
f0124493:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012449a:	10 00 00 
f012449d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01244a2:	0f b6 c0             	movzbl %al,%eax
f01244a5:	c1 e0 04             	shl    $0x4,%eax
f01244a8:	89 c2                	mov    %eax,%edx
f01244aa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01244b0:	01 d0                	add    %edx,%eax
f01244b2:	48                   	dec    %eax
f01244b3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01244b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01244c4:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01244ca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01244d0:	29 d0                	sub    %edx,%eax
f01244d2:	01 d8                	add    %ebx,%eax
f01244d4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01244d9:	39 c1                	cmp    %eax,%ecx
f01244db:	74 17                	je     f01244f4 <test_kheap_virt_addr+0x655>
f01244dd:	83 ec 04             	sub    $0x4,%esp
f01244e0:	68 60 a3 13 f0       	push   $0xf013a360
f01244e5:	68 0d 09 00 00       	push   $0x90d
f01244ea:	68 7a a2 13 f0       	push   $0xf013a27a
f01244ef:	e8 b2 bc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244f4:	e8 93 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01244f9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01244fc:	74 17                	je     f0124515 <test_kheap_virt_addr+0x676>
f01244fe:	83 ec 04             	sub    $0x4,%esp
f0124501:	68 94 a2 13 f0       	push   $0xf013a294
f0124506:	68 0e 09 00 00       	push   $0x90e
f012450b:	68 7a a2 13 f0       	push   $0xf013a27a
f0124510:	e8 91 bc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124515:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124518:	e8 7b 78 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012451d:	29 c3                	sub    %eax,%ebx
f012451f:	89 d8                	mov    %ebx,%eax
f0124521:	83 f8 02             	cmp    $0x2,%eax
f0124524:	74 17                	je     f012453d <test_kheap_virt_addr+0x69e>
f0124526:	83 ec 04             	sub    $0x4,%esp
f0124529:	68 fc a2 13 f0       	push   $0xf013a2fc
f012452e:	68 0f 09 00 00       	push   $0x90f
f0124533:	68 7a a2 13 f0       	push   $0xf013a27a
f0124538:	e8 69 bc fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012453d:	e8 56 78 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124542:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124545:	e8 42 f7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012454a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012454d:	83 ec 0c             	sub    $0xc,%esp
f0124550:	68 00 fc 2f 00       	push   $0x2ffc00
f0124555:	e8 82 2e fe ff       	call   f01073dc <kmalloc>
f012455a:	83 c4 10             	add    $0x10,%esp
f012455d:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124563:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124569:	89 c1                	mov    %eax,%ecx
f012456b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124572:	10 00 00 
f0124575:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012457b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124580:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124586:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012458c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124591:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124597:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012459d:	29 d0                	sub    %edx,%eax
f012459f:	89 c3                	mov    %eax,%ebx
f01245a1:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01245a8:	10 00 00 
f01245ab:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01245b0:	0f b6 d0             	movzbl %al,%edx
f01245b3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01245b9:	01 d0                	add    %edx,%eax
f01245bb:	48                   	dec    %eax
f01245bc:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01245c2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01245cd:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01245d3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245d9:	29 d0                	sub    %edx,%eax
f01245db:	01 c3                	add    %eax,%ebx
f01245dd:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01245e4:	10 00 00 
f01245e7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01245ec:	0f b6 c0             	movzbl %al,%eax
f01245ef:	c1 e0 04             	shl    $0x4,%eax
f01245f2:	89 c2                	mov    %eax,%edx
f01245f4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01245fa:	01 d0                	add    %edx,%eax
f01245fc:	48                   	dec    %eax
f01245fd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124603:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124609:	ba 00 00 00 00       	mov    $0x0,%edx
f012460e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124614:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012461a:	29 d0                	sub    %edx,%eax
f012461c:	01 d8                	add    %ebx,%eax
f012461e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124623:	39 c1                	cmp    %eax,%ecx
f0124625:	74 17                	je     f012463e <test_kheap_virt_addr+0x79f>
f0124627:	83 ec 04             	sub    $0x4,%esp
f012462a:	68 60 a3 13 f0       	push   $0xf013a360
f012462f:	68 15 09 00 00       	push   $0x915
f0124634:	68 7a a2 13 f0       	push   $0xf013a27a
f0124639:	e8 68 bb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012463e:	e8 49 f6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124643:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124646:	74 17                	je     f012465f <test_kheap_virt_addr+0x7c0>
f0124648:	83 ec 04             	sub    $0x4,%esp
f012464b:	68 94 a2 13 f0       	push   $0xf013a294
f0124650:	68 16 09 00 00       	push   $0x916
f0124655:	68 7a a2 13 f0       	push   $0xf013a27a
f012465a:	e8 47 bb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012465f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124662:	e8 31 77 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124667:	29 c3                	sub    %eax,%ebx
f0124669:	89 d8                	mov    %ebx,%eax
f012466b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124670:	74 17                	je     f0124689 <test_kheap_virt_addr+0x7ea>
f0124672:	83 ec 04             	sub    $0x4,%esp
f0124675:	68 fc a2 13 f0       	push   $0xf013a2fc
f012467a:	68 17 09 00 00       	push   $0x917
f012467f:	68 7a a2 13 f0       	push   $0xf013a27a
f0124684:	e8 1d bb fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124689:	e8 0a 77 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012468e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124691:	e8 f6 f5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124696:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124699:	83 ec 0c             	sub    $0xc,%esp
f012469c:	68 00 fc 5f 00       	push   $0x5ffc00
f01246a1:	e8 36 2d fe ff       	call   f01073dc <kmalloc>
f01246a6:	83 c4 10             	add    $0x10,%esp
f01246a9:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246af:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01246b5:	89 c1                	mov    %eax,%ecx
f01246b7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01246be:	10 00 00 
f01246c1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01246c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246cc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01246d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01246d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01246dd:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01246e3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01246e9:	29 d0                	sub    %edx,%eax
f01246eb:	89 c3                	mov    %eax,%ebx
f01246ed:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01246f4:	10 00 00 
f01246f7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01246fc:	0f b6 d0             	movzbl %al,%edx
f01246ff:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124705:	01 d0                	add    %edx,%eax
f0124707:	48                   	dec    %eax
f0124708:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012470e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124714:	ba 00 00 00 00       	mov    $0x0,%edx
f0124719:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012471f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124725:	29 d0                	sub    %edx,%eax
f0124727:	01 c3                	add    %eax,%ebx
f0124729:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124730:	10 00 00 
f0124733:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124738:	0f b6 c0             	movzbl %al,%eax
f012473b:	c1 e0 04             	shl    $0x4,%eax
f012473e:	89 c2                	mov    %eax,%edx
f0124740:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124746:	01 d0                	add    %edx,%eax
f0124748:	48                   	dec    %eax
f0124749:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012474f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124755:	ba 00 00 00 00       	mov    $0x0,%edx
f012475a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124760:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124766:	29 d0                	sub    %edx,%eax
f0124768:	01 d8                	add    %ebx,%eax
f012476a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012476f:	39 c1                	cmp    %eax,%ecx
f0124771:	74 17                	je     f012478a <test_kheap_virt_addr+0x8eb>
f0124773:	83 ec 04             	sub    $0x4,%esp
f0124776:	68 60 a3 13 f0       	push   $0xf013a360
f012477b:	68 1d 09 00 00       	push   $0x91d
f0124780:	68 7a a2 13 f0       	push   $0xf013a27a
f0124785:	e8 1c ba fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012478a:	e8 fd f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012478f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124792:	74 17                	je     f01247ab <test_kheap_virt_addr+0x90c>
f0124794:	83 ec 04             	sub    $0x4,%esp
f0124797:	68 94 a2 13 f0       	push   $0xf013a294
f012479c:	68 1e 09 00 00       	push   $0x91e
f01247a1:	68 7a a2 13 f0       	push   $0xf013a27a
f01247a6:	e8 fb b9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247ab:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01247ae:	e8 e5 75 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01247b3:	29 c3                	sub    %eax,%ebx
f01247b5:	89 d8                	mov    %ebx,%eax
f01247b7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01247bc:	74 17                	je     f01247d5 <test_kheap_virt_addr+0x936>
f01247be:	83 ec 04             	sub    $0x4,%esp
f01247c1:	68 fc a2 13 f0       	push   $0xf013a2fc
f01247c6:	68 1f 09 00 00       	push   $0x91f
f01247cb:	68 7a a2 13 f0       	push   $0xf013a27a
f01247d0:	e8 d1 b9 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01247d5:	e8 be 75 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01247da:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247dd:	e8 aa f4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01247e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01247e5:	83 ec 0c             	sub    $0xc,%esp
f01247e8:	68 00 38 00 00       	push   $0x3800
f01247ed:	e8 ea 2b fe ff       	call   f01073dc <kmalloc>
f01247f2:	83 c4 10             	add    $0x10,%esp
f01247f5:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01247fb:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124801:	89 c1                	mov    %eax,%ecx
f0124803:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012480a:	10 00 00 
f012480d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124813:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124818:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012481e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124824:	ba 00 00 00 00       	mov    $0x0,%edx
f0124829:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012482f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124835:	29 d0                	sub    %edx,%eax
f0124837:	89 c3                	mov    %eax,%ebx
f0124839:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124840:	10 00 00 
f0124843:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124848:	0f b6 d0             	movzbl %al,%edx
f012484b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124851:	01 d0                	add    %edx,%eax
f0124853:	48                   	dec    %eax
f0124854:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012485a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124860:	ba 00 00 00 00       	mov    $0x0,%edx
f0124865:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012486b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124871:	29 d0                	sub    %edx,%eax
f0124873:	01 c3                	add    %eax,%ebx
f0124875:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012487c:	10 00 00 
f012487f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124884:	0f b6 c0             	movzbl %al,%eax
f0124887:	c1 e0 04             	shl    $0x4,%eax
f012488a:	89 c2                	mov    %eax,%edx
f012488c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124892:	01 d0                	add    %edx,%eax
f0124894:	48                   	dec    %eax
f0124895:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012489b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01248a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01248a6:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01248ac:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01248b2:	29 d0                	sub    %edx,%eax
f01248b4:	01 d8                	add    %ebx,%eax
f01248b6:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01248bb:	39 c1                	cmp    %eax,%ecx
f01248bd:	74 17                	je     f01248d6 <test_kheap_virt_addr+0xa37>
f01248bf:	83 ec 04             	sub    $0x4,%esp
f01248c2:	68 60 a3 13 f0       	push   $0xf013a360
f01248c7:	68 25 09 00 00       	push   $0x925
f01248cc:	68 7a a2 13 f0       	push   $0xf013a27a
f01248d1:	e8 d0 b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248d6:	e8 b1 f3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01248db:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01248de:	74 17                	je     f01248f7 <test_kheap_virt_addr+0xa58>
f01248e0:	83 ec 04             	sub    $0x4,%esp
f01248e3:	68 94 a2 13 f0       	push   $0xf013a294
f01248e8:	68 26 09 00 00       	push   $0x926
f01248ed:	68 7a a2 13 f0       	push   $0xf013a27a
f01248f2:	e8 af b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01248f7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01248fa:	e8 99 74 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01248ff:	29 c3                	sub    %eax,%ebx
f0124901:	89 d8                	mov    %ebx,%eax
f0124903:	83 f8 04             	cmp    $0x4,%eax
f0124906:	74 17                	je     f012491f <test_kheap_virt_addr+0xa80>
f0124908:	83 ec 04             	sub    $0x4,%esp
f012490b:	68 fc a2 13 f0       	push   $0xf013a2fc
f0124910:	68 27 09 00 00       	push   $0x927
f0124915:	68 7a a2 13 f0       	push   $0xf013a27a
f012491a:	e8 87 b8 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012491f:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0124926:	10 00 00 
f0124929:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012492f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124934:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012493a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124940:	ba 00 00 00 00       	mov    $0x0,%edx
f0124945:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012494b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124951:	29 d0                	sub    %edx,%eax
f0124953:	89 c1                	mov    %eax,%ecx
f0124955:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012495c:	10 00 00 
f012495f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124964:	0f b6 d0             	movzbl %al,%edx
f0124967:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012496d:	01 d0                	add    %edx,%eax
f012496f:	48                   	dec    %eax
f0124970:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0124976:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012497c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124981:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0124987:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012498d:	29 d0                	sub    %edx,%eax
f012498f:	01 c1                	add    %eax,%ecx
f0124991:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0124998:	10 00 00 
f012499b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01249a0:	0f b6 c0             	movzbl %al,%eax
f01249a3:	c1 e0 04             	shl    $0x4,%eax
f01249a6:	89 c2                	mov    %eax,%edx
f01249a8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01249ae:	01 d0                	add    %edx,%eax
f01249b0:	48                   	dec    %eax
f01249b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01249b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01249bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01249c2:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01249c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01249ce:	29 d0                	sub    %edx,%eax
f01249d0:	01 c1                	add    %eax,%ecx
f01249d2:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01249d9:	10 00 00 
f01249dc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01249e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249e7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01249ed:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01249f3:	ba 00 00 00 00       	mov    $0x0,%edx
f01249f8:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01249fe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124a04:	29 d0                	sub    %edx,%eax
f0124a06:	29 c1                	sub    %eax,%ecx
f0124a08:	89 c8                	mov    %ecx,%eax
f0124a0a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124a0f:	c1 e8 0c             	shr    $0xc,%eax
f0124a12:	89 c2                	mov    %eax,%edx
f0124a14:	4a                   	dec    %edx
f0124a15:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0124a1b:	c1 e0 02             	shl    $0x2,%eax
f0124a1e:	8d 50 03             	lea    0x3(%eax),%edx
f0124a21:	b8 10 00 00 00       	mov    $0x10,%eax
f0124a26:	48                   	dec    %eax
f0124a27:	01 d0                	add    %edx,%eax
f0124a29:	bf 10 00 00 00       	mov    $0x10,%edi
f0124a2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a33:	f7 f7                	div    %edi
f0124a35:	6b c0 10             	imul   $0x10,%eax,%eax
f0124a38:	29 c4                	sub    %eax,%esp
f0124a3a:	89 e0                	mov    %esp,%eax
f0124a3c:	83 c0 03             	add    $0x3,%eax
f0124a3f:	c1 e8 02             	shr    $0x2,%eax
f0124a42:	c1 e0 02             	shl    $0x2,%eax
f0124a45:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124a4b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124a52:	10 00 00 
f0124a55:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124a5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a60:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124a66:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124a6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a71:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124a77:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124a7d:	29 d0                	sub    %edx,%eax
f0124a7f:	89 c1                	mov    %eax,%ecx
f0124a81:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124a88:	10 00 00 
f0124a8b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124a90:	0f b6 d0             	movzbl %al,%edx
f0124a93:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124a99:	01 d0                	add    %edx,%eax
f0124a9b:	48                   	dec    %eax
f0124a9c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124aa2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124aa8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aad:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124ab3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124ab9:	29 d0                	sub    %edx,%eax
f0124abb:	01 c1                	add    %eax,%ecx
f0124abd:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124ac4:	10 00 00 
f0124ac7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124acc:	0f b6 c0             	movzbl %al,%eax
f0124acf:	c1 e0 04             	shl    $0x4,%eax
f0124ad2:	89 c2                	mov    %eax,%edx
f0124ad4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124ada:	01 d0                	add    %edx,%eax
f0124adc:	48                   	dec    %eax
f0124add:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124ae3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124ae9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124aee:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124af4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124afa:	29 d0                	sub    %edx,%eax
f0124afc:	01 c1                	add    %eax,%ecx
f0124afe:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124b05:	10 00 00 
f0124b08:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124b0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b13:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124b19:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124b1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b24:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124b2a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124b30:	29 d0                	sub    %edx,%eax
f0124b32:	29 c1                	sub    %eax,%ecx
f0124b34:	89 c8                	mov    %ecx,%eax
f0124b36:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124b3b:	c1 e8 0c             	shr    $0xc,%eax
f0124b3e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124b44:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0124b4b:	10 00 00 
f0124b4e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124b54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b59:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0124b5f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b6a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0124b70:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124b76:	29 d0                	sub    %edx,%eax
f0124b78:	89 c1                	mov    %eax,%ecx
f0124b7a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0124b81:	10 00 00 
f0124b84:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124b89:	0f b6 d0             	movzbl %al,%edx
f0124b8c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124b92:	01 d0                	add    %edx,%eax
f0124b94:	48                   	dec    %eax
f0124b95:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0124b9b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124ba1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ba6:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0124bac:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124bb2:	29 d0                	sub    %edx,%eax
f0124bb4:	01 c1                	add    %eax,%ecx
f0124bb6:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124bbd:	10 00 00 
f0124bc0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124bc5:	0f b6 c0             	movzbl %al,%eax
f0124bc8:	c1 e0 04             	shl    $0x4,%eax
f0124bcb:	89 c2                	mov    %eax,%edx
f0124bcd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124bd3:	01 d0                	add    %edx,%eax
f0124bd5:	48                   	dec    %eax
f0124bd6:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124bdc:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124be2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124be7:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124bed:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124bf3:	29 d0                	sub    %edx,%eax
f0124bf5:	01 c8                	add    %ecx,%eax
f0124bf7:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124bfc:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0124c02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124c09:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0124c10:	10 00 00 
f0124c13:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0124c19:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c1e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0124c24:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c2f:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0124c35:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0124c3b:	29 d0                	sub    %edx,%eax
f0124c3d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124c42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124c45:	e9 21 01 00 00       	jmp    f0124d6b <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124c4a:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0124c4f:	83 ec 04             	sub    $0x4,%esp
f0124c52:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0124c58:	52                   	push   %edx
f0124c59:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124c5c:	50                   	push   %eax
f0124c5d:	e8 07 1d fe ff       	call   f0106969 <get_page_table>
f0124c62:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124c65:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124c6b:	85 c0                	test   %eax,%eax
f0124c6d:	75 17                	jne    f0124c86 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124c6f:	83 ec 04             	sub    $0x4,%esp
f0124c72:	68 1c ac 13 f0       	push   $0xf013ac1c
f0124c77:	68 38 09 00 00       	push   $0x938
f0124c7c:	68 7a a2 13 f0       	push   $0xf013a27a
f0124c81:	e8 20 b5 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124c89:	c1 e8 0c             	shr    $0xc,%eax
f0124c8c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124c91:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124c94:	e9 ba 00 00 00       	jmp    f0124d53 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124c99:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124c9f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ca2:	c1 e2 02             	shl    $0x2,%edx
f0124ca5:	01 d0                	add    %edx,%eax
f0124ca7:	8b 00                	mov    (%eax),%eax
f0124ca9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124cae:	89 c1                	mov    %eax,%ecx
f0124cb0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124cb6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124cb9:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124cbc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124cc2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124cc5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124cc8:	83 ec 0c             	sub    $0xc,%esp
f0124ccb:	50                   	push   %eax
f0124ccc:	e8 3f 27 fe ff       	call   f0107410 <kheap_virtual_address>
f0124cd1:	83 c4 10             	add    $0x10,%esp
f0124cd4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124cda:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0124ce0:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124ce3:	74 61                	je     f0124d46 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124ce5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124ceb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124cee:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124cf1:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0124cf7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124cfa:	c1 e1 02             	shl    $0x2,%ecx
f0124cfd:	01 ca                	add    %ecx,%edx
f0124cff:	8b 12                	mov    (%edx),%edx
f0124d01:	89 d1                	mov    %edx,%ecx
f0124d03:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124d09:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124d0c:	c1 e2 0c             	shl    $0xc,%edx
f0124d0f:	89 d3                	mov    %edx,%ebx
f0124d11:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124d14:	01 da                	add    %ebx,%edx
f0124d16:	83 ec 0c             	sub    $0xc,%esp
f0124d19:	50                   	push   %eax
f0124d1a:	51                   	push   %ecx
f0124d1b:	52                   	push   %edx
f0124d1c:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0124d22:	68 10 ad 13 f0       	push   $0xf013ad10
f0124d27:	e8 01 bf fd ff       	call   f0100c2d <cprintf>
f0124d2c:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0124d2f:	83 ec 04             	sub    $0x4,%esp
f0124d32:	68 53 ad 13 f0       	push   $0xf013ad53
f0124d37:	68 42 09 00 00       	push   $0x942
f0124d3c:	68 7a a2 13 f0       	push   $0xf013a27a
f0124d41:	e8 60 b4 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0124d46:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124d4d:	ff 45 dc             	incl   -0x24(%ebp)
f0124d50:	ff 45 e0             	incl   -0x20(%ebp)
f0124d53:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124d56:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0124d5c:	7d 0d                	jge    f0124d6b <test_kheap_virt_addr+0xecc>
f0124d5e:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124d65:	0f 8e 2e ff ff ff    	jle    f0124c99 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124d6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124d6e:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0124d74:	0f 82 d0 fe ff ff    	jb     f0124c4a <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124d7a:	83 ec 0c             	sub    $0xc,%esp
f0124d7d:	68 70 ad 13 f0       	push   $0xf013ad70
f0124d82:	e8 a6 be fd ff       	call   f0100c2d <cprintf>
f0124d87:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124d8a:	e8 09 70 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124d8f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124d95:	e8 f2 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124d9a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0124da0:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124da6:	83 ec 0c             	sub    $0xc,%esp
f0124da9:	50                   	push   %eax
f0124daa:	e8 47 26 fe ff       	call   f01073f6 <kfree>
f0124daf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124db2:	e8 d5 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124db7:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124dbd:	74 17                	je     f0124dd6 <test_kheap_virt_addr+0xf37>
f0124dbf:	83 ec 04             	sub    $0x4,%esp
f0124dc2:	68 94 a2 13 f0       	push   $0xf013a294
f0124dc7:	68 50 09 00 00       	push   $0x950
f0124dcc:	68 7a a2 13 f0       	push   $0xf013a27a
f0124dd1:	e8 d0 b3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124dd6:	e8 bd 6f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124ddb:	89 c2                	mov    %eax,%edx
f0124ddd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124de3:	29 c2                	sub    %eax,%edx
f0124de5:	89 d0                	mov    %edx,%eax
f0124de7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124dec:	74 17                	je     f0124e05 <test_kheap_virt_addr+0xf66>
f0124dee:	83 ec 04             	sub    $0x4,%esp
f0124df1:	68 04 aa 13 f0       	push   $0xf013aa04
f0124df6:	68 51 09 00 00       	push   $0x951
f0124dfb:	68 7a a2 13 f0       	push   $0xf013a27a
f0124e00:	e8 a1 b3 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124e05:	e8 8e 6f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124e0a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e10:	e8 77 ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e15:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0124e1b:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124e21:	83 ec 0c             	sub    $0xc,%esp
f0124e24:	50                   	push   %eax
f0124e25:	e8 cc 25 fe ff       	call   f01073f6 <kfree>
f0124e2a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e2d:	e8 5a ee fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e32:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124e38:	74 17                	je     f0124e51 <test_kheap_virt_addr+0xfb2>
f0124e3a:	83 ec 04             	sub    $0x4,%esp
f0124e3d:	68 94 a2 13 f0       	push   $0xf013a294
f0124e42:	68 57 09 00 00       	push   $0x957
f0124e47:	68 7a a2 13 f0       	push   $0xf013a27a
f0124e4c:	e8 55 b3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124e51:	e8 42 6f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124e56:	89 c2                	mov    %eax,%edx
f0124e58:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124e5e:	29 c2                	sub    %eax,%edx
f0124e60:	89 d0                	mov    %edx,%eax
f0124e62:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124e67:	74 17                	je     f0124e80 <test_kheap_virt_addr+0xfe1>
f0124e69:	83 ec 04             	sub    $0x4,%esp
f0124e6c:	68 04 aa 13 f0       	push   $0xf013aa04
f0124e71:	68 58 09 00 00       	push   $0x958
f0124e76:	68 7a a2 13 f0       	push   $0xf013a27a
f0124e7b:	e8 26 b3 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124e80:	e8 13 6f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124e85:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124e8b:	e8 fc ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124e90:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0124e96:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124e9c:	83 ec 0c             	sub    $0xc,%esp
f0124e9f:	50                   	push   %eax
f0124ea0:	e8 51 25 fe ff       	call   f01073f6 <kfree>
f0124ea5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ea8:	e8 df ed fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0124ead:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0124eb3:	74 17                	je     f0124ecc <test_kheap_virt_addr+0x102d>
f0124eb5:	83 ec 04             	sub    $0x4,%esp
f0124eb8:	68 94 a2 13 f0       	push   $0xf013a294
f0124ebd:	68 5e 09 00 00       	push   $0x95e
f0124ec2:	68 7a a2 13 f0       	push   $0xf013a27a
f0124ec7:	e8 da b2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124ecc:	e8 c7 6e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0124ed1:	89 c2                	mov    %eax,%edx
f0124ed3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0124ed9:	29 c2                	sub    %eax,%edx
f0124edb:	89 d0                	mov    %edx,%eax
f0124edd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124ee2:	74 17                	je     f0124efb <test_kheap_virt_addr+0x105c>
f0124ee4:	83 ec 04             	sub    $0x4,%esp
f0124ee7:	68 04 aa 13 f0       	push   $0xf013aa04
f0124eec:	68 5f 09 00 00       	push   $0x95f
f0124ef1:	68 7a a2 13 f0       	push   $0xf013a27a
f0124ef6:	e8 ab b2 fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124efb:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0124f02:	10 00 00 
f0124f05:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124f0b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f10:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0124f16:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f21:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0124f27:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124f2d:	29 d0                	sub    %edx,%eax
f0124f2f:	89 c1                	mov    %eax,%ecx
f0124f31:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0124f38:	10 00 00 
f0124f3b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124f40:	0f b6 d0             	movzbl %al,%edx
f0124f43:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0124f49:	01 d0                	add    %edx,%eax
f0124f4b:	48                   	dec    %eax
f0124f4c:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0124f52:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124f58:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f5d:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0124f63:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124f69:	29 d0                	sub    %edx,%eax
f0124f6b:	01 c1                	add    %eax,%ecx
f0124f6d:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0124f74:	10 00 00 
f0124f77:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0124f7c:	0f b6 c0             	movzbl %al,%eax
f0124f7f:	c1 e0 04             	shl    $0x4,%eax
f0124f82:	89 c2                	mov    %eax,%edx
f0124f84:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124f8a:	01 d0                	add    %edx,%eax
f0124f8c:	48                   	dec    %eax
f0124f8d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0124f93:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124f99:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f9e:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0124fa4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0124faa:	29 d0                	sub    %edx,%eax
f0124fac:	01 c8                	add    %ecx,%eax
f0124fae:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124fb3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0124fb9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124fc0:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0124fc7:	10 00 00 
f0124fca:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0124fd0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124fd5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0124fdb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124fe1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fe6:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0124fec:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124ff2:	29 d0                	sub    %edx,%eax
f0124ff4:	89 c1                	mov    %eax,%ecx
f0124ff6:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0124ffd:	10 00 00 
f0125000:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125005:	0f b6 d0             	movzbl %al,%edx
f0125008:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012500e:	01 d0                	add    %edx,%eax
f0125010:	48                   	dec    %eax
f0125011:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125017:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012501d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125022:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125028:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012502e:	29 d0                	sub    %edx,%eax
f0125030:	01 c1                	add    %eax,%ecx
f0125032:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125039:	10 00 00 
f012503c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125041:	0f b6 c0             	movzbl %al,%eax
f0125044:	c1 e0 04             	shl    $0x4,%eax
f0125047:	89 c2                	mov    %eax,%edx
f0125049:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012504f:	01 d0                	add    %edx,%eax
f0125051:	48                   	dec    %eax
f0125052:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125058:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012505e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125063:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125069:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012506f:	29 d0                	sub    %edx,%eax
f0125071:	01 c1                	add    %eax,%ecx
f0125073:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f012507a:	10 00 00 
f012507d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125083:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125088:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f012508e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125094:	ba 00 00 00 00       	mov    $0x0,%edx
f0125099:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f012509f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01250a5:	29 d0                	sub    %edx,%eax
f01250a7:	29 c1                	sub    %eax,%ecx
f01250a9:	89 c8                	mov    %ecx,%eax
f01250ab:	05 00 40 00 00       	add    $0x4000,%eax
f01250b0:	c1 e8 0c             	shr    $0xc,%eax
f01250b3:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01250b9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01250bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01250c2:	eb 41                	jmp    f0125105 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01250c4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01250ca:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01250cd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01250d0:	83 ec 0c             	sub    $0xc,%esp
f01250d3:	50                   	push   %eax
f01250d4:	e8 37 23 fe ff       	call   f0107410 <kheap_virtual_address>
f01250d9:	83 c4 10             	add    $0x10,%esp
f01250dc:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01250e2:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01250e9:	74 17                	je     f0125102 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01250eb:	83 ec 04             	sub    $0x4,%esp
f01250ee:	68 53 ad 13 f0       	push   $0xf013ad53
f01250f3:	68 70 09 00 00       	push   $0x970
f01250f8:	68 7a a2 13 f0       	push   $0xf013a27a
f01250fd:	e8 a4 b0 fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125102:	ff 45 d8             	incl   -0x28(%ebp)
f0125105:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012510b:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125111:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125114:	39 c2                	cmp    %eax,%edx
f0125116:	77 ac                	ja     f01250c4 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125118:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012511e:	05 00 04 00 00       	add    $0x400,%eax
f0125123:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125126:	e9 83 00 00 00       	jmp    f01251ae <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012512b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125131:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125134:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125137:	83 ec 0c             	sub    $0xc,%esp
f012513a:	50                   	push   %eax
f012513b:	e8 d0 22 fe ff       	call   f0107410 <kheap_virtual_address>
f0125140:	83 c4 10             	add    $0x10,%esp
f0125143:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125149:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125150:	10 00 00 
f0125153:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125159:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012515e:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125164:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012516a:	ba 00 00 00 00       	mov    $0x0,%edx
f012516f:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125175:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012517b:	29 d0                	sub    %edx,%eax
f012517d:	89 c2                	mov    %eax,%edx
f012517f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125182:	c1 e0 0c             	shl    $0xc,%eax
f0125185:	01 d0                	add    %edx,%eax
f0125187:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012518c:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125192:	74 17                	je     f01251ab <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125194:	83 ec 04             	sub    $0x4,%esp
f0125197:	68 53 ad 13 f0       	push   $0xf013ad53
f012519c:	68 7a 09 00 00       	push   $0x97a
f01251a1:	68 7a a2 13 f0       	push   $0xf013a27a
f01251a6:	e8 fb af fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01251ab:	ff 45 d8             	incl   -0x28(%ebp)
f01251ae:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01251b4:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f01251ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01251bd:	39 c2                	cmp    %eax,%edx
f01251bf:	0f 87 66 ff ff ff    	ja     f012512b <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01251c5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01251cb:	05 04 07 00 00       	add    $0x704,%eax
f01251d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01251d3:	eb 41                	jmp    f0125216 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01251d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01251db:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01251de:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01251e1:	83 ec 0c             	sub    $0xc,%esp
f01251e4:	50                   	push   %eax
f01251e5:	e8 26 22 fe ff       	call   f0107410 <kheap_virtual_address>
f01251ea:	83 c4 10             	add    $0x10,%esp
f01251ed:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01251f3:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01251fa:	74 17                	je     f0125213 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01251fc:	83 ec 04             	sub    $0x4,%esp
f01251ff:	68 53 ad 13 f0       	push   $0xf013ad53
f0125204:	68 83 09 00 00       	push   $0x983
f0125209:	68 7a a2 13 f0       	push   $0xf013a27a
f012520e:	e8 93 af fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125213:	ff 45 d8             	incl   -0x28(%ebp)
f0125216:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012521c:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125222:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125225:	39 c2                	cmp    %eax,%edx
f0125227:	77 ac                	ja     f01251d5 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125229:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012522f:	05 04 0d 00 00       	add    $0xd04,%eax
f0125234:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125237:	e9 83 00 00 00       	jmp    f01252bf <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012523c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125242:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125245:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125248:	83 ec 0c             	sub    $0xc,%esp
f012524b:	50                   	push   %eax
f012524c:	e8 bf 21 fe ff       	call   f0107410 <kheap_virtual_address>
f0125251:	83 c4 10             	add    $0x10,%esp
f0125254:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012525a:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125261:	10 00 00 
f0125264:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012526a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012526f:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125275:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012527b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125280:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125286:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012528c:	29 d0                	sub    %edx,%eax
f012528e:	89 c2                	mov    %eax,%edx
f0125290:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125293:	c1 e0 0c             	shl    $0xc,%eax
f0125296:	01 d0                	add    %edx,%eax
f0125298:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012529d:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f01252a3:	74 17                	je     f01252bc <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f01252a5:	83 ec 04             	sub    $0x4,%esp
f01252a8:	68 53 ad 13 f0       	push   $0xf013ad53
f01252ad:	68 8c 09 00 00       	push   $0x98c
f01252b2:	68 7a a2 13 f0       	push   $0xf013a27a
f01252b7:	e8 ea ae fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01252bc:	ff 45 d8             	incl   -0x28(%ebp)
f01252bf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01252c5:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01252cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252ce:	39 c2                	cmp    %eax,%edx
f01252d0:	0f 87 66 ff ff ff    	ja     f012523c <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f01252d6:	83 ec 0c             	sub    $0xc,%esp
f01252d9:	68 05 a4 13 f0       	push   $0xf013a405
f01252de:	e8 4a b9 fd ff       	call   f0100c2d <cprintf>
f01252e3:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01252e6:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f01252ed:	eb 54                	jmp    f0125343 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01252ef:	83 ec 0c             	sub    $0xc,%esp
f01252f2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01252f5:	e8 16 21 fe ff       	call   f0107410 <kheap_virtual_address>
f01252fa:	83 c4 10             	add    $0x10,%esp
f01252fd:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125303:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f012530a:	74 30                	je     f012533c <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f012530c:	83 ec 04             	sub    $0x4,%esp
f012530f:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125315:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125318:	68 a1 ad 13 f0       	push   $0xf013ada1
f012531d:	e8 0b b9 fd ff       	call   f0100c2d <cprintf>
f0125322:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125325:	83 ec 04             	sub    $0x4,%esp
f0125328:	68 53 ad 13 f0       	push   $0xf013ad53
f012532d:	68 9c 09 00 00       	push   $0x99c
f0125332:	68 7a a2 13 f0       	push   $0xf013a27a
f0125337:	e8 6a ae fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012533c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125343:	b8 1c 76 6e 00       	mov    $0x6e761c,%eax
f0125348:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f012534b:	72 a2                	jb     f01252ef <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012534d:	83 ec 0c             	sub    $0xc,%esp
f0125350:	68 5e a4 13 f0       	push   $0xf013a45e
f0125355:	e8 d3 b8 fd ff       	call   f0100c2d <cprintf>
f012535a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f012535d:	83 ec 0c             	sub    $0xc,%esp
f0125360:	68 c0 ad 13 f0       	push   $0xf013adc0
f0125365:	e8 c3 b8 fd ff       	call   f0100c2d <cprintf>
f012536a:	83 c4 10             	add    $0x10,%esp

	return 1;
f012536d:	b8 01 00 00 00       	mov    $0x1,%eax
f0125372:	89 f4                	mov    %esi,%esp

}
f0125374:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125377:	5b                   	pop    %ebx
f0125378:	5e                   	pop    %esi
f0125379:	5f                   	pop    %edi
f012537a:	5d                   	pop    %ebp
f012537b:	c3                   	ret    

f012537c <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f012537c:	55                   	push   %ebp
f012537d:	89 e5                	mov    %esp,%ebp
f012537f:	57                   	push   %edi
f0125380:	56                   	push   %esi
f0125381:	53                   	push   %ebx
f0125382:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125388:	a0 cf fc 18 f0       	mov    0xf018fccf,%al
f012538d:	84 c0                	test   %al,%al
f012538f:	74 56                	je     f01253e7 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125391:	c6 05 cf fc 18 f0 00 	movb   $0x0,0xf018fccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125398:	e8 fb 69 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012539d:	a3 18 76 6e f0       	mov    %eax,0xf06e7618
		initFreeDiskFrames = pf_calculate_free_frames() ;
f01253a2:	e8 e5 e8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01253a7:	a3 14 76 6e f0       	mov    %eax,0xf06e7614
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f01253ac:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01253b2:	bb 1d af 13 f0       	mov    $0xf013af1d,%ebx
f01253b7:	ba 11 00 00 00       	mov    $0x11,%edx
f01253bc:	89 c7                	mov    %eax,%edi
f01253be:	89 de                	mov    %ebx,%esi
f01253c0:	89 d1                	mov    %edx,%ecx
f01253c2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01253c4:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01253ca:	b9 53 00 00 00       	mov    $0x53,%ecx
f01253cf:	b0 00                	mov    $0x0,%al
f01253d1:	89 d7                	mov    %edx,%edi
f01253d3:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f01253d5:	83 ec 0c             	sub    $0xc,%esp
f01253d8:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01253de:	50                   	push   %eax
f01253df:	e8 ab b8 fd ff       	call   f0100c8f <execute_command>
f01253e4:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f01253e7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f01253ee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01253f5:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f01253fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01253fd:	eb 2d                	jmp    f012542c <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f01253ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125402:	05 18 da 01 00       	add    $0x1da18,%eax
f0125407:	83 ec 08             	sub    $0x8,%esp
f012540a:	68 07 ae 13 f0       	push   $0xf013ae07
f012540f:	50                   	push   %eax
f0125410:	e8 5c ad 00 00       	call   f0130171 <strcmp>
f0125415:	83 c4 10             	add    $0x10,%esp
f0125418:	85 c0                	test   %eax,%eax
f012541a:	75 08                	jne    f0125424 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f012541c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012541f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125422:	eb 2f                	jmp    f0125453 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125424:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0125429:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012542c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125430:	74 08                	je     f012543a <test_three_creation_functions+0xbe>
f0125432:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125435:	8b 40 44             	mov    0x44(%eax),%eax
f0125438:	eb 05                	jmp    f012543f <test_three_creation_functions+0xc3>
f012543a:	b8 00 00 00 00       	mov    $0x0,%eax
f012543f:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f0125444:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f0125449:	85 c0                	test   %eax,%eax
f012544b:	75 b2                	jne    f01253ff <test_three_creation_functions+0x83>
f012544d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125451:	75 ac                	jne    f01253ff <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125453:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125456:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f012545c:	85 c0                	test   %eax,%eax
f012545e:	74 17                	je     f0125477 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125460:	83 ec 04             	sub    $0x4,%esp
f0125463:	68 10 ae 13 f0       	push   $0xf013ae10
f0125468:	68 c6 09 00 00       	push   $0x9c6
f012546d:	68 7a a2 13 f0       	push   $0xf013a27a
f0125472:	e8 2f ad fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125477:	83 ec 0c             	sub    $0xc,%esp
f012547a:	ff 75 e4             	pushl  -0x1c(%ebp)
f012547d:	e8 28 21 fe ff       	call   f01075aa <env_page_ws_get_size>
f0125482:	83 c4 10             	add    $0x10,%esp
f0125485:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125488:	e8 0b 69 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012548d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125490:	e8 f7 e7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125495:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125498:	a1 14 76 6e f0       	mov    0xf06e7614,%eax
f012549d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f01254a0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01254a3:	74 17                	je     f01254bc <test_three_creation_functions+0x140>
f01254a5:	83 ec 04             	sub    $0x4,%esp
f01254a8:	68 94 a2 13 f0       	push   $0xf013a294
f01254ad:	68 cc 09 00 00       	push   $0x9cc
f01254b2:	68 7a a2 13 f0       	push   $0xf013a27a
f01254b7:	e8 ea ac fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f01254bc:	a1 18 76 6e f0       	mov    0xf06e7618,%eax
f01254c1:	2b 45 d8             	sub    -0x28(%ebp),%eax
f01254c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01254c7:	83 c2 15             	add    $0x15,%edx
f01254ca:	39 d0                	cmp    %edx,%eax
f01254cc:	74 17                	je     f01254e5 <test_three_creation_functions+0x169>
f01254ce:	83 ec 04             	sub    $0x4,%esp
f01254d1:	68 fc a2 13 f0       	push   $0xf013a2fc
f01254d6:	68 ce 09 00 00       	push   $0x9ce
f01254db:	68 7a a2 13 f0       	push   $0xf013a27a
f01254e0:	e8 c1 ac fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f01254e5:	83 ec 0c             	sub    $0xc,%esp
f01254e8:	68 00 10 00 00       	push   $0x1000
f01254ed:	e8 ea 1e fe ff       	call   f01073dc <kmalloc>
f01254f2:	83 c4 10             	add    $0x10,%esp
f01254f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f01254f8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01254ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125502:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125507:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012550a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012550d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125512:	f7 75 cc             	divl   -0x34(%ebp)
f0125515:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125518:	29 d0                	sub    %edx,%eax
f012551a:	89 c1                	mov    %eax,%ecx
f012551c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125523:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125528:	0f b6 d0             	movzbl %al,%edx
f012552b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012552e:	01 d0                	add    %edx,%eax
f0125530:	48                   	dec    %eax
f0125531:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125534:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125537:	ba 00 00 00 00       	mov    $0x0,%edx
f012553c:	f7 75 c4             	divl   -0x3c(%ebp)
f012553f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125542:	29 d0                	sub    %edx,%eax
f0125544:	01 c1                	add    %eax,%ecx
f0125546:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012554d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125552:	0f b6 c0             	movzbl %al,%eax
f0125555:	c1 e0 04             	shl    $0x4,%eax
f0125558:	89 c2                	mov    %eax,%edx
f012555a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012555d:	01 d0                	add    %edx,%eax
f012555f:	48                   	dec    %eax
f0125560:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125563:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125566:	ba 00 00 00 00       	mov    $0x0,%edx
f012556b:	f7 75 bc             	divl   -0x44(%ebp)
f012556e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125571:	29 d0                	sub    %edx,%eax
f0125573:	01 c8                	add    %ecx,%eax
f0125575:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f012557b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012557e:	39 c2                	cmp    %eax,%edx
f0125580:	74 17                	je     f0125599 <test_three_creation_functions+0x21d>
f0125582:	83 ec 04             	sub    $0x4,%esp
f0125585:	68 60 ae 13 f0       	push   $0xf013ae60
f012558a:	68 d2 09 00 00       	push   $0x9d2
f012558f:	68 7a a2 13 f0       	push   $0xf013a27a
f0125594:	e8 0d ac fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125599:	83 ec 0c             	sub    $0xc,%esp
f012559c:	68 d0 ae 13 f0       	push   $0xf013aed0
f01255a1:	e8 87 b6 fd ff       	call   f0100c2d <cprintf>
f01255a6:	83 c4 10             	add    $0x10,%esp

	return 1;
f01255a9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01255ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01255b1:	5b                   	pop    %ebx
f01255b2:	5e                   	pop    %esi
f01255b3:	5f                   	pop    %edi
f01255b4:	5d                   	pop    %ebp
f01255b5:	c3                   	ret    

f01255b6 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f01255b6:	55                   	push   %ebp
f01255b7:	89 e5                	mov    %esp,%ebp
f01255b9:	57                   	push   %edi
f01255ba:	53                   	push   %ebx
f01255bb:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f01255c1:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01255c5:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01255c9:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01255cf:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01255d5:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01255dc:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01255e3:	e8 b0 67 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01255e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01255eb:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01255f1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01255f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01255fb:	89 d7                	mov    %edx,%edi
f01255fd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01255ff:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125605:	b9 14 00 00 00       	mov    $0x14,%ecx
f012560a:	b8 00 00 00 00       	mov    $0x0,%eax
f012560f:	89 d7                	mov    %edx,%edi
f0125611:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125613:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125619:	b9 14 00 00 00       	mov    $0x14,%ecx
f012561e:	b8 00 00 00 00       	mov    $0x0,%eax
f0125623:	89 d7                	mov    %edx,%edi
f0125625:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125627:	e8 6c 67 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012562c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012562f:	e8 58 e6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125634:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125637:	83 ec 0c             	sub    $0xc,%esp
f012563a:	68 00 fc 1f 00       	push   $0x1ffc00
f012563f:	e8 98 1d fe ff       	call   f01073dc <kmalloc>
f0125644:	83 c4 10             	add    $0x10,%esp
f0125647:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012564d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125653:	89 c1                	mov    %eax,%ecx
f0125655:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012565c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012565f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125664:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125667:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012566a:	ba 00 00 00 00       	mov    $0x0,%edx
f012566f:	f7 75 c8             	divl   -0x38(%ebp)
f0125672:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125675:	29 d0                	sub    %edx,%eax
f0125677:	89 c3                	mov    %eax,%ebx
f0125679:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125680:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125685:	0f b6 d0             	movzbl %al,%edx
f0125688:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012568b:	01 d0                	add    %edx,%eax
f012568d:	48                   	dec    %eax
f012568e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125691:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125694:	ba 00 00 00 00       	mov    $0x0,%edx
f0125699:	f7 75 c0             	divl   -0x40(%ebp)
f012569c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012569f:	29 d0                	sub    %edx,%eax
f01256a1:	01 c3                	add    %eax,%ebx
f01256a3:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01256aa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01256af:	0f b6 c0             	movzbl %al,%eax
f01256b2:	c1 e0 04             	shl    $0x4,%eax
f01256b5:	89 c2                	mov    %eax,%edx
f01256b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01256ba:	01 d0                	add    %edx,%eax
f01256bc:	48                   	dec    %eax
f01256bd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01256c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01256c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01256c8:	f7 75 b8             	divl   -0x48(%ebp)
f01256cb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01256ce:	29 d0                	sub    %edx,%eax
f01256d0:	01 d8                	add    %ebx,%eax
f01256d2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01256d7:	39 c1                	cmp    %eax,%ecx
f01256d9:	74 17                	je     f01256f2 <test_kfreeall+0x13c>
f01256db:	83 ec 04             	sub    $0x4,%esp
f01256de:	68 60 a3 13 f0       	push   $0xf013a360
f01256e3:	68 f9 09 00 00       	push   $0x9f9
f01256e8:	68 7a a2 13 f0       	push   $0xf013a27a
f01256ed:	e8 b4 aa fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01256f2:	e8 95 e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01256f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01256fa:	74 17                	je     f0125713 <test_kfreeall+0x15d>
f01256fc:	83 ec 04             	sub    $0x4,%esp
f01256ff:	68 94 a2 13 f0       	push   $0xf013a294
f0125704:	68 fa 09 00 00       	push   $0x9fa
f0125709:	68 7a a2 13 f0       	push   $0xf013a27a
f012570e:	e8 93 aa fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125713:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125716:	e8 7d 66 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012571b:	29 c3                	sub    %eax,%ebx
f012571d:	89 d8                	mov    %ebx,%eax
f012571f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125724:	74 17                	je     f012573d <test_kfreeall+0x187>
f0125726:	83 ec 04             	sub    $0x4,%esp
f0125729:	68 fc a2 13 f0       	push   $0xf013a2fc
f012572e:	68 fb 09 00 00       	push   $0x9fb
f0125733:	68 7a a2 13 f0       	push   $0xf013a27a
f0125738:	e8 69 aa fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012573d:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125744:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125747:	e8 4c 66 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012574c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012574f:	e8 38 e5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125754:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125757:	83 ec 0c             	sub    $0xc,%esp
f012575a:	68 00 fc 1f 00       	push   $0x1ffc00
f012575f:	e8 78 1c fe ff       	call   f01073dc <kmalloc>
f0125764:	83 c4 10             	add    $0x10,%esp
f0125767:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012576d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0125773:	89 c1                	mov    %eax,%ecx
f0125775:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012577c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012577f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125784:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0125787:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012578a:	ba 00 00 00 00       	mov    $0x0,%edx
f012578f:	f7 75 b0             	divl   -0x50(%ebp)
f0125792:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125795:	29 d0                	sub    %edx,%eax
f0125797:	89 c3                	mov    %eax,%ebx
f0125799:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01257a0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01257a5:	0f b6 d0             	movzbl %al,%edx
f01257a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01257ab:	01 d0                	add    %edx,%eax
f01257ad:	48                   	dec    %eax
f01257ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01257b1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01257b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01257b9:	f7 75 a8             	divl   -0x58(%ebp)
f01257bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01257bf:	29 d0                	sub    %edx,%eax
f01257c1:	01 c3                	add    %eax,%ebx
f01257c3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01257ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01257cf:	0f b6 c0             	movzbl %al,%eax
f01257d2:	c1 e0 04             	shl    $0x4,%eax
f01257d5:	89 c2                	mov    %eax,%edx
f01257d7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01257da:	01 d0                	add    %edx,%eax
f01257dc:	48                   	dec    %eax
f01257dd:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01257e0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01257e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01257e8:	f7 75 a0             	divl   -0x60(%ebp)
f01257eb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01257ee:	29 d0                	sub    %edx,%eax
f01257f0:	01 d8                	add    %ebx,%eax
f01257f2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01257f7:	39 c1                	cmp    %eax,%ecx
f01257f9:	74 17                	je     f0125812 <test_kfreeall+0x25c>
f01257fb:	83 ec 04             	sub    $0x4,%esp
f01257fe:	68 60 a3 13 f0       	push   $0xf013a360
f0125803:	68 02 0a 00 00       	push   $0xa02
f0125808:	68 7a a2 13 f0       	push   $0xf013a27a
f012580d:	e8 94 a9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125812:	e8 75 e4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125817:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012581a:	74 17                	je     f0125833 <test_kfreeall+0x27d>
f012581c:	83 ec 04             	sub    $0x4,%esp
f012581f:	68 94 a2 13 f0       	push   $0xf013a294
f0125824:	68 03 0a 00 00       	push   $0xa03
f0125829:	68 7a a2 13 f0       	push   $0xf013a27a
f012582e:	e8 73 a9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125833:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125836:	e8 5d 65 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012583b:	29 c3                	sub    %eax,%ebx
f012583d:	89 d8                	mov    %ebx,%eax
f012583f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125844:	74 17                	je     f012585d <test_kfreeall+0x2a7>
f0125846:	83 ec 04             	sub    $0x4,%esp
f0125849:	68 fc a2 13 f0       	push   $0xf013a2fc
f012584e:	68 04 0a 00 00       	push   $0xa04
f0125853:	68 7a a2 13 f0       	push   $0xf013a27a
f0125858:	e8 49 a9 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012585d:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0125864:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125867:	e8 2c 65 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012586c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012586f:	e8 18 e4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125874:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125877:	83 ec 0c             	sub    $0xc,%esp
f012587a:	68 00 08 00 00       	push   $0x800
f012587f:	e8 58 1b fe ff       	call   f01073dc <kmalloc>
f0125884:	83 c4 10             	add    $0x10,%esp
f0125887:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012588d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125893:	89 c1                	mov    %eax,%ecx
f0125895:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012589c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012589f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258a4:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01258a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01258aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01258af:	f7 75 98             	divl   -0x68(%ebp)
f01258b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01258b5:	29 d0                	sub    %edx,%eax
f01258b7:	89 c3                	mov    %eax,%ebx
f01258b9:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01258c0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01258c5:	0f b6 d0             	movzbl %al,%edx
f01258c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01258cb:	01 d0                	add    %edx,%eax
f01258cd:	48                   	dec    %eax
f01258ce:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01258d1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01258d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01258d9:	f7 75 90             	divl   -0x70(%ebp)
f01258dc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01258df:	29 d0                	sub    %edx,%eax
f01258e1:	01 c3                	add    %eax,%ebx
f01258e3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01258ea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01258ef:	0f b6 c0             	movzbl %al,%eax
f01258f2:	c1 e0 04             	shl    $0x4,%eax
f01258f5:	89 c2                	mov    %eax,%edx
f01258f7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01258fa:	01 d0                	add    %edx,%eax
f01258fc:	48                   	dec    %eax
f01258fd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0125900:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125903:	ba 00 00 00 00       	mov    $0x0,%edx
f0125908:	f7 75 88             	divl   -0x78(%ebp)
f012590b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012590e:	29 d0                	sub    %edx,%eax
f0125910:	01 d8                	add    %ebx,%eax
f0125912:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125917:	39 c1                	cmp    %eax,%ecx
f0125919:	74 17                	je     f0125932 <test_kfreeall+0x37c>
f012591b:	83 ec 04             	sub    $0x4,%esp
f012591e:	68 60 a3 13 f0       	push   $0xf013a360
f0125923:	68 0b 0a 00 00       	push   $0xa0b
f0125928:	68 7a a2 13 f0       	push   $0xf013a27a
f012592d:	e8 74 a8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125932:	e8 55 e3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125937:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012593a:	74 17                	je     f0125953 <test_kfreeall+0x39d>
f012593c:	83 ec 04             	sub    $0x4,%esp
f012593f:	68 94 a2 13 f0       	push   $0xf013a294
f0125944:	68 0c 0a 00 00       	push   $0xa0c
f0125949:	68 7a a2 13 f0       	push   $0xf013a27a
f012594e:	e8 53 a8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125953:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125956:	e8 3d 64 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012595b:	29 c3                	sub    %eax,%ebx
f012595d:	89 d8                	mov    %ebx,%eax
f012595f:	83 f8 01             	cmp    $0x1,%eax
f0125962:	74 17                	je     f012597b <test_kfreeall+0x3c5>
f0125964:	83 ec 04             	sub    $0x4,%esp
f0125967:	68 fc a2 13 f0       	push   $0xf013a2fc
f012596c:	68 0d 0a 00 00       	push   $0xa0d
f0125971:	68 7a a2 13 f0       	push   $0xf013a27a
f0125976:	e8 2b a8 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012597b:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0125982:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0125985:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012598b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012598e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125995:	eb 0e                	jmp    f01259a5 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0125997:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012599a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012599d:	01 d0                	add    %edx,%eax
f012599f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01259a2:	ff 45 f4             	incl   -0xc(%ebp)
f01259a5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01259ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01259ae:	7f e7                	jg     f0125997 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01259b0:	e8 e3 63 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01259b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259b8:	e8 cf e2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01259bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01259c0:	83 ec 0c             	sub    $0xc,%esp
f01259c3:	68 00 08 00 00       	push   $0x800
f01259c8:	e8 0f 1a fe ff       	call   f01073dc <kmalloc>
f01259cd:	83 c4 10             	add    $0x10,%esp
f01259d0:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01259d6:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01259dc:	89 c1                	mov    %eax,%ecx
f01259de:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01259e5:	10 00 00 
f01259e8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01259ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259f3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01259f9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01259ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a04:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125a10:	29 d0                	sub    %edx,%eax
f0125a12:	89 c3                	mov    %eax,%ebx
f0125a14:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125a1b:	10 00 00 
f0125a1e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125a23:	0f b6 d0             	movzbl %al,%edx
f0125a26:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125a2c:	01 d0                	add    %edx,%eax
f0125a2e:	48                   	dec    %eax
f0125a2f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125a35:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a40:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125a46:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a4c:	29 d0                	sub    %edx,%eax
f0125a4e:	01 c3                	add    %eax,%ebx
f0125a50:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125a57:	10 00 00 
f0125a5a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125a5f:	0f b6 c0             	movzbl %al,%eax
f0125a62:	c1 e0 04             	shl    $0x4,%eax
f0125a65:	89 c2                	mov    %eax,%edx
f0125a67:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125a6d:	01 d0                	add    %edx,%eax
f0125a6f:	48                   	dec    %eax
f0125a70:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125a76:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a81:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125a87:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a8d:	29 d0                	sub    %edx,%eax
f0125a8f:	01 d8                	add    %ebx,%eax
f0125a91:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125a96:	39 c1                	cmp    %eax,%ecx
f0125a98:	74 17                	je     f0125ab1 <test_kfreeall+0x4fb>
f0125a9a:	83 ec 04             	sub    $0x4,%esp
f0125a9d:	68 60 a3 13 f0       	push   $0xf013a360
f0125aa2:	68 19 0a 00 00       	push   $0xa19
f0125aa7:	68 7a a2 13 f0       	push   $0xf013a27a
f0125aac:	e8 f5 a6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125ab1:	e8 d6 e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125ab6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ab9:	74 17                	je     f0125ad2 <test_kfreeall+0x51c>
f0125abb:	83 ec 04             	sub    $0x4,%esp
f0125abe:	68 94 a2 13 f0       	push   $0xf013a294
f0125ac3:	68 1a 0a 00 00       	push   $0xa1a
f0125ac8:	68 7a a2 13 f0       	push   $0xf013a27a
f0125acd:	e8 d4 a6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ad2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ad5:	e8 be 62 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125ada:	29 c3                	sub    %eax,%ebx
f0125adc:	89 d8                	mov    %ebx,%eax
f0125ade:	83 f8 01             	cmp    $0x1,%eax
f0125ae1:	74 17                	je     f0125afa <test_kfreeall+0x544>
f0125ae3:	83 ec 04             	sub    $0x4,%esp
f0125ae6:	68 fc a2 13 f0       	push   $0xf013a2fc
f0125aeb:	68 1b 0a 00 00       	push   $0xa1b
f0125af0:	68 7a a2 13 f0       	push   $0xf013a27a
f0125af5:	e8 ac a6 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125afa:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0125b01:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125b04:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125b0a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125b0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b14:	eb 0e                	jmp    f0125b24 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0125b16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125b19:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125b1c:	01 d0                	add    %edx,%eax
f0125b1e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125b21:	ff 45 f4             	incl   -0xc(%ebp)
f0125b24:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125b2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b2d:	7f e7                	jg     f0125b16 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b2f:	e8 64 62 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125b34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b37:	e8 50 e1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125b3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125b3f:	83 ec 0c             	sub    $0xc,%esp
f0125b42:	68 00 1c 00 00       	push   $0x1c00
f0125b47:	e8 90 18 fe ff       	call   f01073dc <kmalloc>
f0125b4c:	83 c4 10             	add    $0x10,%esp
f0125b4f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b55:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125b5b:	89 c1                	mov    %eax,%ecx
f0125b5d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125b64:	10 00 00 
f0125b67:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125b6d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b72:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125b78:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125b7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b83:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125b89:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125b8f:	29 d0                	sub    %edx,%eax
f0125b91:	89 c3                	mov    %eax,%ebx
f0125b93:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125b9a:	10 00 00 
f0125b9d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125ba2:	0f b6 d0             	movzbl %al,%edx
f0125ba5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125bab:	01 d0                	add    %edx,%eax
f0125bad:	48                   	dec    %eax
f0125bae:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125bb4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125bba:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bbf:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125bc5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125bcb:	29 d0                	sub    %edx,%eax
f0125bcd:	01 c3                	add    %eax,%ebx
f0125bcf:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125bd6:	10 00 00 
f0125bd9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125bde:	0f b6 c0             	movzbl %al,%eax
f0125be1:	c1 e0 04             	shl    $0x4,%eax
f0125be4:	89 c2                	mov    %eax,%edx
f0125be6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125bec:	01 d0                	add    %edx,%eax
f0125bee:	48                   	dec    %eax
f0125bef:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125bf5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125bfb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c00:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125c06:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125c0c:	29 d0                	sub    %edx,%eax
f0125c0e:	01 d8                	add    %ebx,%eax
f0125c10:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125c15:	39 c1                	cmp    %eax,%ecx
f0125c17:	74 17                	je     f0125c30 <test_kfreeall+0x67a>
f0125c19:	83 ec 04             	sub    $0x4,%esp
f0125c1c:	68 60 a3 13 f0       	push   $0xf013a360
f0125c21:	68 27 0a 00 00       	push   $0xa27
f0125c26:	68 7a a2 13 f0       	push   $0xf013a27a
f0125c2b:	e8 76 a5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c30:	e8 57 e0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125c35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125c38:	74 17                	je     f0125c51 <test_kfreeall+0x69b>
f0125c3a:	83 ec 04             	sub    $0x4,%esp
f0125c3d:	68 94 a2 13 f0       	push   $0xf013a294
f0125c42:	68 28 0a 00 00       	push   $0xa28
f0125c47:	68 7a a2 13 f0       	push   $0xf013a27a
f0125c4c:	e8 55 a5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c51:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125c54:	e8 3f 61 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125c59:	29 c3                	sub    %eax,%ebx
f0125c5b:	89 d8                	mov    %ebx,%eax
f0125c5d:	83 f8 02             	cmp    $0x2,%eax
f0125c60:	74 17                	je     f0125c79 <test_kfreeall+0x6c3>
f0125c62:	83 ec 04             	sub    $0x4,%esp
f0125c65:	68 fc a2 13 f0       	push   $0xf013a2fc
f0125c6a:	68 29 0a 00 00       	push   $0xa29
f0125c6f:	68 7a a2 13 f0       	push   $0xf013a27a
f0125c74:	e8 2d a5 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125c79:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0125c80:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0125c83:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125c89:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125c8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c93:	eb 0e                	jmp    f0125ca3 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0125c95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125c98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125c9b:	01 d0                	add    %edx,%eax
f0125c9d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125ca0:	ff 45 f4             	incl   -0xc(%ebp)
f0125ca3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125ca9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125cac:	7f e7                	jg     f0125c95 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125cae:	e8 e5 60 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125cb3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cb6:	e8 d1 df fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125cbb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125cbe:	83 ec 0c             	sub    $0xc,%esp
f0125cc1:	68 00 fc 2f 00       	push   $0x2ffc00
f0125cc6:	e8 11 17 fe ff       	call   f01073dc <kmalloc>
f0125ccb:	83 c4 10             	add    $0x10,%esp
f0125cce:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125cd4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0125cda:	89 c1                	mov    %eax,%ecx
f0125cdc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125ce3:	10 00 00 
f0125ce6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125cec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125cf1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125cf7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125cfd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d02:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125d08:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125d0e:	29 d0                	sub    %edx,%eax
f0125d10:	89 c3                	mov    %eax,%ebx
f0125d12:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125d19:	10 00 00 
f0125d1c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125d21:	0f b6 d0             	movzbl %al,%edx
f0125d24:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125d2a:	01 d0                	add    %edx,%eax
f0125d2c:	48                   	dec    %eax
f0125d2d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125d33:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125d39:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d3e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125d44:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125d4a:	29 d0                	sub    %edx,%eax
f0125d4c:	01 c3                	add    %eax,%ebx
f0125d4e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125d55:	10 00 00 
f0125d58:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125d5d:	0f b6 c0             	movzbl %al,%eax
f0125d60:	c1 e0 04             	shl    $0x4,%eax
f0125d63:	89 c2                	mov    %eax,%edx
f0125d65:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125d6b:	01 d0                	add    %edx,%eax
f0125d6d:	48                   	dec    %eax
f0125d6e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125d74:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d7f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d85:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d8b:	29 d0                	sub    %edx,%eax
f0125d8d:	01 d8                	add    %ebx,%eax
f0125d8f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125d94:	39 c1                	cmp    %eax,%ecx
f0125d96:	74 17                	je     f0125daf <test_kfreeall+0x7f9>
f0125d98:	83 ec 04             	sub    $0x4,%esp
f0125d9b:	68 60 a3 13 f0       	push   $0xf013a360
f0125da0:	68 35 0a 00 00       	push   $0xa35
f0125da5:	68 7a a2 13 f0       	push   $0xf013a27a
f0125daa:	e8 f7 a3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125daf:	e8 d8 de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125db4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125db7:	74 17                	je     f0125dd0 <test_kfreeall+0x81a>
f0125db9:	83 ec 04             	sub    $0x4,%esp
f0125dbc:	68 94 a2 13 f0       	push   $0xf013a294
f0125dc1:	68 36 0a 00 00       	push   $0xa36
f0125dc6:	68 7a a2 13 f0       	push   $0xf013a27a
f0125dcb:	e8 d6 a3 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125dd0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125dd3:	e8 c0 5f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125dd8:	29 c3                	sub    %eax,%ebx
f0125dda:	89 d8                	mov    %ebx,%eax
f0125ddc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125de1:	74 17                	je     f0125dfa <test_kfreeall+0x844>
f0125de3:	83 ec 04             	sub    $0x4,%esp
f0125de6:	68 fc a2 13 f0       	push   $0xf013a2fc
f0125deb:	68 37 0a 00 00       	push   $0xa37
f0125df0:	68 7a a2 13 f0       	push   $0xf013a27a
f0125df5:	e8 ac a3 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0125dfa:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0125e01:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125e04:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0125e0a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125e0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e14:	eb 0e                	jmp    f0125e24 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0125e16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125e19:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125e1c:	01 d0                	add    %edx,%eax
f0125e1e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125e21:	ff 45 f4             	incl   -0xc(%ebp)
f0125e24:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125e2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e2d:	7f e7                	jg     f0125e16 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e2f:	e8 64 5f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125e34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e37:	e8 50 de fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125e3c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125e3f:	83 ec 0c             	sub    $0xc,%esp
f0125e42:	68 00 fc 5f 00       	push   $0x5ffc00
f0125e47:	e8 90 15 fe ff       	call   f01073dc <kmalloc>
f0125e4c:	83 c4 10             	add    $0x10,%esp
f0125e4f:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e55:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0125e5b:	89 c1                	mov    %eax,%ecx
f0125e5d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125e64:	10 00 00 
f0125e67:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125e6d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e72:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125e78:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125e7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e83:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125e89:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125e8f:	29 d0                	sub    %edx,%eax
f0125e91:	89 c3                	mov    %eax,%ebx
f0125e93:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125e9a:	10 00 00 
f0125e9d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125ea2:	0f b6 d0             	movzbl %al,%edx
f0125ea5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125eab:	01 d0                	add    %edx,%eax
f0125ead:	48                   	dec    %eax
f0125eae:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125eb4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125eba:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ebf:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125ec5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125ecb:	29 d0                	sub    %edx,%eax
f0125ecd:	01 c3                	add    %eax,%ebx
f0125ecf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125ed6:	10 00 00 
f0125ed9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125ede:	0f b6 c0             	movzbl %al,%eax
f0125ee1:	c1 e0 04             	shl    $0x4,%eax
f0125ee4:	89 c2                	mov    %eax,%edx
f0125ee6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125eec:	01 d0                	add    %edx,%eax
f0125eee:	48                   	dec    %eax
f0125eef:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125ef5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125efb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f00:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125f06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125f0c:	29 d0                	sub    %edx,%eax
f0125f0e:	01 d8                	add    %ebx,%eax
f0125f10:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125f15:	39 c1                	cmp    %eax,%ecx
f0125f17:	74 17                	je     f0125f30 <test_kfreeall+0x97a>
f0125f19:	83 ec 04             	sub    $0x4,%esp
f0125f1c:	68 60 a3 13 f0       	push   $0xf013a360
f0125f21:	68 43 0a 00 00       	push   $0xa43
f0125f26:	68 7a a2 13 f0       	push   $0xf013a27a
f0125f2b:	e8 76 a2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f30:	e8 57 dd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125f35:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f38:	74 17                	je     f0125f51 <test_kfreeall+0x99b>
f0125f3a:	83 ec 04             	sub    $0x4,%esp
f0125f3d:	68 94 a2 13 f0       	push   $0xf013a294
f0125f42:	68 44 0a 00 00       	push   $0xa44
f0125f47:	68 7a a2 13 f0       	push   $0xf013a27a
f0125f4c:	e8 55 a2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f51:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125f54:	e8 3f 5e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125f59:	29 c3                	sub    %eax,%ebx
f0125f5b:	89 d8                	mov    %ebx,%eax
f0125f5d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125f62:	74 17                	je     f0125f7b <test_kfreeall+0x9c5>
f0125f64:	83 ec 04             	sub    $0x4,%esp
f0125f67:	68 fc a2 13 f0       	push   $0xf013a2fc
f0125f6c:	68 45 0a 00 00       	push   $0xa45
f0125f71:	68 7a a2 13 f0       	push   $0xf013a27a
f0125f76:	e8 2b a2 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125f7b:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0125f82:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f85:	e8 0e 5e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0125f8a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f8d:	e8 fa dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0125f92:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125f95:	83 ec 0c             	sub    $0xc,%esp
f0125f98:	68 00 38 00 00       	push   $0x3800
f0125f9d:	e8 3a 14 fe ff       	call   f01073dc <kmalloc>
f0125fa2:	83 c4 10             	add    $0x10,%esp
f0125fa5:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125fab:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0125fb1:	89 c1                	mov    %eax,%ecx
f0125fb3:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125fba:	10 00 00 
f0125fbd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125fc3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125fc8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125fce:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125fdf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fe5:	29 d0                	sub    %edx,%eax
f0125fe7:	89 c3                	mov    %eax,%ebx
f0125fe9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125ff0:	10 00 00 
f0125ff3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0125ff8:	0f b6 d0             	movzbl %al,%edx
f0125ffb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126001:	01 d0                	add    %edx,%eax
f0126003:	48                   	dec    %eax
f0126004:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012600a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126010:	ba 00 00 00 00       	mov    $0x0,%edx
f0126015:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012601b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126021:	29 d0                	sub    %edx,%eax
f0126023:	01 c3                	add    %eax,%ebx
f0126025:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012602c:	10 00 00 
f012602f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126034:	0f b6 c0             	movzbl %al,%eax
f0126037:	c1 e0 04             	shl    $0x4,%eax
f012603a:	89 c2                	mov    %eax,%edx
f012603c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126042:	01 d0                	add    %edx,%eax
f0126044:	48                   	dec    %eax
f0126045:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012604b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126051:	ba 00 00 00 00       	mov    $0x0,%edx
f0126056:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012605c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126062:	29 d0                	sub    %edx,%eax
f0126064:	01 d8                	add    %ebx,%eax
f0126066:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012606b:	39 c1                	cmp    %eax,%ecx
f012606d:	74 17                	je     f0126086 <test_kfreeall+0xad0>
f012606f:	83 ec 04             	sub    $0x4,%esp
f0126072:	68 60 a3 13 f0       	push   $0xf013a360
f0126077:	68 4c 0a 00 00       	push   $0xa4c
f012607c:	68 7a a2 13 f0       	push   $0xf013a27a
f0126081:	e8 20 a1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126086:	e8 01 dc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012608b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012608e:	74 17                	je     f01260a7 <test_kfreeall+0xaf1>
f0126090:	83 ec 04             	sub    $0x4,%esp
f0126093:	68 94 a2 13 f0       	push   $0xf013a294
f0126098:	68 4d 0a 00 00       	push   $0xa4d
f012609d:	68 7a a2 13 f0       	push   $0xf013a27a
f01260a2:	e8 ff a0 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01260a7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01260aa:	e8 e9 5c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01260af:	29 c3                	sub    %eax,%ebx
f01260b1:	89 d8                	mov    %ebx,%eax
f01260b3:	83 f8 04             	cmp    $0x4,%eax
f01260b6:	74 17                	je     f01260cf <test_kfreeall+0xb19>
f01260b8:	83 ec 04             	sub    $0x4,%esp
f01260bb:	68 fc a2 13 f0       	push   $0xf013a2fc
f01260c0:	68 4e 0a 00 00       	push   $0xa4e
f01260c5:	68 7a a2 13 f0       	push   $0xf013a27a
f01260ca:	e8 d7 a0 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01260cf:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01260d6:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01260d9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01260df:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01260e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01260e9:	eb 0e                	jmp    f01260f9 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01260eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01260ee:	8b 45 80             	mov    -0x80(%ebp),%eax
f01260f1:	01 d0                	add    %edx,%eax
f01260f3:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01260f6:	ff 45 f4             	incl   -0xc(%ebp)
f01260f9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01260ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126102:	7f e7                	jg     f01260eb <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126104:	e8 8f 5c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126109:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012610f:	e8 78 db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126114:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012611a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126120:	83 ec 0c             	sub    $0xc,%esp
f0126123:	50                   	push   %eax
f0126124:	e8 cd 12 fe ff       	call   f01073f6 <kfree>
f0126129:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012612c:	e8 5b db fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126131:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126137:	74 17                	je     f0126150 <test_kfreeall+0xb9a>
f0126139:	83 ec 04             	sub    $0x4,%esp
f012613c:	68 94 a2 13 f0       	push   $0xf013a294
f0126141:	68 5d 0a 00 00       	push   $0xa5d
f0126146:	68 7a a2 13 f0       	push   $0xf013a27a
f012614b:	e8 56 a0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126150:	e8 43 5c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126155:	89 c2                	mov    %eax,%edx
f0126157:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012615d:	29 c2                	sub    %eax,%edx
f012615f:	89 d0                	mov    %edx,%eax
f0126161:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126166:	74 17                	je     f012617f <test_kfreeall+0xbc9>
f0126168:	83 ec 04             	sub    $0x4,%esp
f012616b:	68 04 aa 13 f0       	push   $0xf013aa04
f0126170:	68 5e 0a 00 00       	push   $0xa5e
f0126175:	68 7a a2 13 f0       	push   $0xf013a27a
f012617a:	e8 27 a0 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012617f:	e8 14 5c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126184:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012618a:	e8 fd da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012618f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126195:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012619b:	83 ec 0c             	sub    $0xc,%esp
f012619e:	50                   	push   %eax
f012619f:	e8 52 12 fe ff       	call   f01073f6 <kfree>
f01261a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261a7:	e8 e0 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01261ac:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01261b2:	74 17                	je     f01261cb <test_kfreeall+0xc15>
f01261b4:	83 ec 04             	sub    $0x4,%esp
f01261b7:	68 94 a2 13 f0       	push   $0xf013a294
f01261bc:	68 64 0a 00 00       	push   $0xa64
f01261c1:	68 7a a2 13 f0       	push   $0xf013a27a
f01261c6:	e8 db 9f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01261cb:	e8 c8 5b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01261d0:	89 c2                	mov    %eax,%edx
f01261d2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01261d8:	29 c2                	sub    %eax,%edx
f01261da:	89 d0                	mov    %edx,%eax
f01261dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261e1:	74 17                	je     f01261fa <test_kfreeall+0xc44>
f01261e3:	83 ec 04             	sub    $0x4,%esp
f01261e6:	68 04 aa 13 f0       	push   $0xf013aa04
f01261eb:	68 65 0a 00 00       	push   $0xa65
f01261f0:	68 7a a2 13 f0       	push   $0xf013a27a
f01261f5:	e8 ac 9f fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01261fa:	e8 99 5b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01261ff:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126205:	e8 82 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012620a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126210:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126216:	83 ec 0c             	sub    $0xc,%esp
f0126219:	50                   	push   %eax
f012621a:	e8 d7 11 fe ff       	call   f01073f6 <kfree>
f012621f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126222:	e8 65 da fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126227:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012622d:	74 17                	je     f0126246 <test_kfreeall+0xc90>
f012622f:	83 ec 04             	sub    $0x4,%esp
f0126232:	68 94 a2 13 f0       	push   $0xf013a294
f0126237:	68 6b 0a 00 00       	push   $0xa6b
f012623c:	68 7a a2 13 f0       	push   $0xf013a27a
f0126241:	e8 60 9f fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126246:	e8 4d 5b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012624b:	89 c2                	mov    %eax,%edx
f012624d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126253:	29 c2                	sub    %eax,%edx
f0126255:	89 d0                	mov    %edx,%eax
f0126257:	3d 00 06 00 00       	cmp    $0x600,%eax
f012625c:	74 17                	je     f0126275 <test_kfreeall+0xcbf>
f012625e:	83 ec 04             	sub    $0x4,%esp
f0126261:	68 04 aa 13 f0       	push   $0xf013aa04
f0126266:	68 6c 0a 00 00       	push   $0xa6c
f012626b:	68 7a a2 13 f0       	push   $0xf013a27a
f0126270:	e8 31 9f fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126275:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012627b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012627e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126285:	eb 1e                	jmp    f01262a5 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126287:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012628d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126290:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126293:	01 c8                	add    %ecx,%eax
f0126295:	8a 00                	mov    (%eax),%al
f0126297:	0f be c0             	movsbl %al,%eax
f012629a:	01 d0                	add    %edx,%eax
f012629c:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01262a2:	ff 45 f4             	incl   -0xc(%ebp)
f01262a5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01262ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01262ae:	7f d7                	jg     f0126287 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01262b0:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f01262b6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01262bc:	01 c0                	add    %eax,%eax
f01262be:	39 c2                	cmp    %eax,%edx
f01262c0:	74 17                	je     f01262d9 <test_kfreeall+0xd23>
f01262c2:	83 ec 04             	sub    $0x4,%esp
f01262c5:	68 60 aa 13 f0       	push   $0xf013aa60
f01262ca:	68 78 0a 00 00       	push   $0xa78
f01262cf:	68 7a a2 13 f0       	push   $0xf013a27a
f01262d4:	e8 cd 9e fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01262d9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01262df:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01262e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01262e9:	eb 1e                	jmp    f0126309 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f01262eb:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01262f1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01262f4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01262f7:	01 c8                	add    %ecx,%eax
f01262f9:	8a 00                	mov    (%eax),%al
f01262fb:	0f be c0             	movsbl %al,%eax
f01262fe:	01 d0                	add    %edx,%eax
f0126300:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126306:	ff 45 f4             	incl   -0xc(%ebp)
f0126309:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012630f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126312:	7f d7                	jg     f01262eb <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126314:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012631a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126320:	89 c1                	mov    %eax,%ecx
f0126322:	01 c9                	add    %ecx,%ecx
f0126324:	01 c8                	add    %ecx,%eax
f0126326:	39 c2                	cmp    %eax,%edx
f0126328:	74 17                	je     f0126341 <test_kfreeall+0xd8b>
f012632a:	83 ec 04             	sub    $0x4,%esp
f012632d:	68 60 aa 13 f0       	push   $0xf013aa60
f0126332:	68 80 0a 00 00       	push   $0xa80
f0126337:	68 7a a2 13 f0       	push   $0xf013a27a
f012633c:	e8 65 9e fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126341:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126347:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012634a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126351:	eb 1e                	jmp    f0126371 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126353:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126359:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012635c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012635f:	01 c8                	add    %ecx,%eax
f0126361:	8a 00                	mov    (%eax),%al
f0126363:	0f be c0             	movsbl %al,%eax
f0126366:	01 d0                	add    %edx,%eax
f0126368:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012636e:	ff 45 f4             	incl   -0xc(%ebp)
f0126371:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126377:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012637a:	7f d7                	jg     f0126353 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012637c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126382:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126388:	c1 e2 02             	shl    $0x2,%edx
f012638b:	39 d0                	cmp    %edx,%eax
f012638d:	74 17                	je     f01263a6 <test_kfreeall+0xdf0>
f012638f:	83 ec 04             	sub    $0x4,%esp
f0126392:	68 60 aa 13 f0       	push   $0xf013aa60
f0126397:	68 88 0a 00 00       	push   $0xa88
f012639c:	68 7a a2 13 f0       	push   $0xf013a27a
f01263a1:	e8 00 9e fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01263a6:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01263ac:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01263af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01263b6:	eb 1e                	jmp    f01263d6 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f01263b8:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01263be:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01263c1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01263c4:	01 c8                	add    %ecx,%eax
f01263c6:	8a 00                	mov    (%eax),%al
f01263c8:	0f be c0             	movsbl %al,%eax
f01263cb:	01 d0                	add    %edx,%eax
f01263cd:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01263d3:	ff 45 f4             	incl   -0xc(%ebp)
f01263d6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01263dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01263df:	7f d7                	jg     f01263b8 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01263e1:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01263e7:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01263ed:	89 d0                	mov    %edx,%eax
f01263ef:	c1 e0 02             	shl    $0x2,%eax
f01263f2:	01 d0                	add    %edx,%eax
f01263f4:	39 c1                	cmp    %eax,%ecx
f01263f6:	74 17                	je     f012640f <test_kfreeall+0xe59>
f01263f8:	83 ec 04             	sub    $0x4,%esp
f01263fb:	68 60 aa 13 f0       	push   $0xf013aa60
f0126400:	68 90 0a 00 00       	push   $0xa90
f0126405:	68 7a a2 13 f0       	push   $0xf013a27a
f012640a:	e8 97 9d fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012640f:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126415:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126418:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012641f:	eb 1e                	jmp    f012643f <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126421:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126427:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012642a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012642d:	01 c8                	add    %ecx,%eax
f012642f:	8a 00                	mov    (%eax),%al
f0126431:	0f be c0             	movsbl %al,%eax
f0126434:	01 d0                	add    %edx,%eax
f0126436:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012643c:	ff 45 f4             	incl   -0xc(%ebp)
f012643f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126445:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126448:	7f d7                	jg     f0126421 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012644a:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126450:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126456:	89 d0                	mov    %edx,%eax
f0126458:	01 c0                	add    %eax,%eax
f012645a:	01 d0                	add    %edx,%eax
f012645c:	01 c0                	add    %eax,%eax
f012645e:	01 d0                	add    %edx,%eax
f0126460:	39 c1                	cmp    %eax,%ecx
f0126462:	74 17                	je     f012647b <test_kfreeall+0xec5>
f0126464:	83 ec 04             	sub    $0x4,%esp
f0126467:	68 60 aa 13 f0       	push   $0xf013aa60
f012646c:	68 98 0a 00 00       	push   $0xa98
f0126471:	68 7a a2 13 f0       	push   $0xf013a27a
f0126476:	e8 2b 9d fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012647b:	e8 18 59 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126480:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126483:	e8 04 d8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126488:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012648b:	83 ec 0c             	sub    $0xc,%esp
f012648e:	68 00 50 00 00       	push   $0x5000
f0126493:	e8 44 0f fe ff       	call   f01073dc <kmalloc>
f0126498:	83 c4 10             	add    $0x10,%esp
f012649b:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264a1:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01264a7:	89 c1                	mov    %eax,%ecx
f01264a9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01264b0:	10 00 00 
f01264b3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01264b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264be:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01264c4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01264ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01264cf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01264d5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01264db:	29 d0                	sub    %edx,%eax
f01264dd:	89 c3                	mov    %eax,%ebx
f01264df:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01264e6:	10 00 00 
f01264e9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01264ee:	0f b6 d0             	movzbl %al,%edx
f01264f1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01264f7:	01 d0                	add    %edx,%eax
f01264f9:	48                   	dec    %eax
f01264fa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126500:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126506:	ba 00 00 00 00       	mov    $0x0,%edx
f012650b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126511:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126517:	29 d0                	sub    %edx,%eax
f0126519:	01 c3                	add    %eax,%ebx
f012651b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126522:	10 00 00 
f0126525:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012652a:	0f b6 c0             	movzbl %al,%eax
f012652d:	c1 e0 04             	shl    $0x4,%eax
f0126530:	89 c2                	mov    %eax,%edx
f0126532:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126538:	01 d0                	add    %edx,%eax
f012653a:	48                   	dec    %eax
f012653b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126541:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126547:	ba 00 00 00 00       	mov    $0x0,%edx
f012654c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126552:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126558:	29 d0                	sub    %edx,%eax
f012655a:	01 d8                	add    %ebx,%eax
f012655c:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126561:	39 c1                	cmp    %eax,%ecx
f0126563:	74 17                	je     f012657c <test_kfreeall+0xfc6>
f0126565:	83 ec 04             	sub    $0x4,%esp
f0126568:	68 60 a3 13 f0       	push   $0xf013a360
f012656d:	68 a1 0a 00 00       	push   $0xaa1
f0126572:	68 7a a2 13 f0       	push   $0xf013a27a
f0126577:	e8 2a 9c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012657c:	e8 0b d7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126581:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126584:	74 17                	je     f012659d <test_kfreeall+0xfe7>
f0126586:	83 ec 04             	sub    $0x4,%esp
f0126589:	68 94 a2 13 f0       	push   $0xf013a294
f012658e:	68 a2 0a 00 00       	push   $0xaa2
f0126593:	68 7a a2 13 f0       	push   $0xf013a27a
f0126598:	e8 09 9c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012659d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265a0:	e8 f3 57 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01265a5:	29 c3                	sub    %eax,%ebx
f01265a7:	89 d8                	mov    %ebx,%eax
f01265a9:	83 f8 05             	cmp    $0x5,%eax
f01265ac:	74 17                	je     f01265c5 <test_kfreeall+0x100f>
f01265ae:	83 ec 04             	sub    $0x4,%esp
f01265b1:	68 fc a2 13 f0       	push   $0xf013a2fc
f01265b6:	68 a3 0a 00 00       	push   $0xaa3
f01265bb:	68 7a a2 13 f0       	push   $0xf013a27a
f01265c0:	e8 e1 9b fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01265c5:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01265cc:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01265cf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01265d5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01265d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01265df:	eb 0e                	jmp    f01265ef <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f01265e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01265e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01265e7:	01 d0                	add    %edx,%eax
f01265e9:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01265ec:	ff 45 f4             	incl   -0xc(%ebp)
f01265ef:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01265f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01265f8:	7f e7                	jg     f01265e1 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01265fa:	e8 99 57 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01265ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126602:	e8 85 d6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126607:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012660a:	83 ec 0c             	sub    $0xc,%esp
f012660d:	68 00 00 10 00       	push   $0x100000
f0126612:	e8 c5 0d fe ff       	call   f01073dc <kmalloc>
f0126617:	83 c4 10             	add    $0x10,%esp
f012661a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126620:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126626:	89 c1                	mov    %eax,%ecx
f0126628:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012662f:	10 00 00 
f0126632:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012663d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126643:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126649:	ba 00 00 00 00       	mov    $0x0,%edx
f012664e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126654:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012665a:	29 d0                	sub    %edx,%eax
f012665c:	89 c3                	mov    %eax,%ebx
f012665e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126665:	10 00 00 
f0126668:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012666d:	0f b6 d0             	movzbl %al,%edx
f0126670:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126676:	01 d0                	add    %edx,%eax
f0126678:	48                   	dec    %eax
f0126679:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012667f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126685:	ba 00 00 00 00       	mov    $0x0,%edx
f012668a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126690:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126696:	29 d0                	sub    %edx,%eax
f0126698:	01 c3                	add    %eax,%ebx
f012669a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01266a1:	10 00 00 
f01266a4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01266a9:	0f b6 c0             	movzbl %al,%eax
f01266ac:	c1 e0 04             	shl    $0x4,%eax
f01266af:	89 c2                	mov    %eax,%edx
f01266b1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01266b7:	01 d0                	add    %edx,%eax
f01266b9:	48                   	dec    %eax
f01266ba:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01266c0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01266c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266cb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01266d1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01266d7:	29 d0                	sub    %edx,%eax
f01266d9:	01 d8                	add    %ebx,%eax
f01266db:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01266e0:	39 c1                	cmp    %eax,%ecx
f01266e2:	74 17                	je     f01266fb <test_kfreeall+0x1145>
f01266e4:	83 ec 04             	sub    $0x4,%esp
f01266e7:	68 60 a3 13 f0       	push   $0xf013a360
f01266ec:	68 af 0a 00 00       	push   $0xaaf
f01266f1:	68 7a a2 13 f0       	push   $0xf013a27a
f01266f6:	e8 ab 9a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01266fb:	e8 8c d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126700:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126703:	74 17                	je     f012671c <test_kfreeall+0x1166>
f0126705:	83 ec 04             	sub    $0x4,%esp
f0126708:	68 94 a2 13 f0       	push   $0xf013a294
f012670d:	68 b0 0a 00 00       	push   $0xab0
f0126712:	68 7a a2 13 f0       	push   $0xf013a27a
f0126717:	e8 8a 9a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012671c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012671f:	e8 74 56 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126724:	29 c3                	sub    %eax,%ebx
f0126726:	89 d8                	mov    %ebx,%eax
f0126728:	3d 00 01 00 00       	cmp    $0x100,%eax
f012672d:	74 17                	je     f0126746 <test_kfreeall+0x1190>
f012672f:	83 ec 04             	sub    $0x4,%esp
f0126732:	68 fc a2 13 f0       	push   $0xf013a2fc
f0126737:	68 b1 0a 00 00       	push   $0xab1
f012673c:	68 7a a2 13 f0       	push   $0xf013a27a
f0126741:	e8 60 9a fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126746:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f012674d:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126750:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126756:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126760:	eb 0e                	jmp    f0126770 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126762:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126765:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126768:	01 d0                	add    %edx,%eax
f012676a:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012676d:	ff 45 f4             	incl   -0xc(%ebp)
f0126770:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126776:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126779:	7f e7                	jg     f0126762 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f012677b:	e8 18 56 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126780:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126783:	e8 04 d5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126788:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f012678b:	e8 b4 0c fe ff       	call   f0107444 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126790:	e8 f7 d4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126795:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126798:	74 17                	je     f01267b1 <test_kfreeall+0x11fb>
f012679a:	83 ec 04             	sub    $0x4,%esp
f012679d:	68 94 a2 13 f0       	push   $0xf013a294
f01267a2:	68 c1 0a 00 00       	push   $0xac1
f01267a7:	68 7a a2 13 f0       	push   $0xf013a27a
f01267ac:	e8 f5 99 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01267b1:	e8 e2 55 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01267b6:	89 c2                	mov    %eax,%edx
f01267b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01267bb:	89 d1                	mov    %edx,%ecx
f01267bd:	29 c1                	sub    %eax,%ecx
f01267bf:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01267c6:	10 00 00 
f01267c9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01267cf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267d4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01267da:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01267e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01267e5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01267eb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01267f1:	29 d0                	sub    %edx,%eax
f01267f3:	89 c3                	mov    %eax,%ebx
f01267f5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01267fc:	10 00 00 
f01267ff:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126804:	0f b6 d0             	movzbl %al,%edx
f0126807:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012680d:	01 d0                	add    %edx,%eax
f012680f:	48                   	dec    %eax
f0126810:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126816:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012681c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126821:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126827:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012682d:	29 d0                	sub    %edx,%eax
f012682f:	01 c3                	add    %eax,%ebx
f0126831:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126838:	10 00 00 
f012683b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126840:	0f b6 c0             	movzbl %al,%eax
f0126843:	c1 e0 04             	shl    $0x4,%eax
f0126846:	89 c2                	mov    %eax,%edx
f0126848:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012684e:	01 d0                	add    %edx,%eax
f0126850:	48                   	dec    %eax
f0126851:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126857:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012685d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126862:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126868:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012686e:	29 d0                	sub    %edx,%eax
f0126870:	01 d8                	add    %ebx,%eax
f0126872:	05 00 40 00 00       	add    $0x4000,%eax
f0126877:	c1 e8 0c             	shr    $0xc,%eax
f012687a:	05 0d 04 00 00       	add    $0x40d,%eax
f012687f:	39 c1                	cmp    %eax,%ecx
f0126881:	74 17                	je     f012689a <test_kfreeall+0x12e4>
f0126883:	83 ec 04             	sub    $0x4,%esp
f0126886:	68 04 aa 13 f0       	push   $0xf013aa04
f012688b:	68 c2 0a 00 00       	push   $0xac2
f0126890:	68 7a a2 13 f0       	push   $0xf013a27a
f0126895:	e8 0c 99 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012689a:	83 ec 0c             	sub    $0xc,%esp
f012689d:	6a 03                	push   $0x3
f012689f:	e8 9d 59 fe ff       	call   f010c241 <sys_bypassPageFault>
f01268a4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01268a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268ae:	e9 82 00 00 00       	jmp    f0126935 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f01268b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01268b6:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01268bd:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01268c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268c3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01268c6:	e8 64 59 fe ff       	call   f010c22f <sys_rcr2>
f01268cb:	89 c2                	mov    %eax,%edx
f01268cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268d0:	39 c2                	cmp    %eax,%edx
f01268d2:	74 17                	je     f01268eb <test_kfreeall+0x1335>
f01268d4:	83 ec 04             	sub    $0x4,%esp
f01268d7:	68 e0 aa 13 f0       	push   $0xf013aae0
f01268dc:	68 d0 0a 00 00       	push   $0xad0
f01268e1:	68 7a a2 13 f0       	push   $0xf013a27a
f01268e6:	e8 bb 98 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f01268eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01268ee:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01268f5:	89 c2                	mov    %eax,%edx
f01268f7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01268fa:	01 d0                	add    %edx,%eax
f01268fc:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01268ff:	e8 2b 59 fe ff       	call   f010c22f <sys_rcr2>
f0126904:	89 c2                	mov    %eax,%edx
f0126906:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126909:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126910:	89 c1                	mov    %eax,%ecx
f0126912:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126915:	01 c8                	add    %ecx,%eax
f0126917:	39 c2                	cmp    %eax,%edx
f0126919:	74 17                	je     f0126932 <test_kfreeall+0x137c>
f012691b:	83 ec 04             	sub    $0x4,%esp
f012691e:	68 e0 aa 13 f0       	push   $0xf013aae0
f0126923:	68 d2 0a 00 00       	push   $0xad2
f0126928:	68 7a a2 13 f0       	push   $0xf013a27a
f012692d:	e8 74 98 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126932:	ff 45 f4             	incl   -0xc(%ebp)
f0126935:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0126939:	0f 8e 74 ff ff ff    	jle    f01268b3 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012693f:	83 ec 0c             	sub    $0xc,%esp
f0126942:	6a 00                	push   $0x0
f0126944:	e8 f8 58 fe ff       	call   f010c241 <sys_bypassPageFault>
f0126949:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012694c:	e8 47 54 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126951:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126954:	e8 33 d3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126959:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012695c:	83 ec 0c             	sub    $0xc,%esp
f012695f:	68 00 00 40 00       	push   $0x400000
f0126964:	e8 73 0a fe ff       	call   f01073dc <kmalloc>
f0126969:	83 c4 10             	add    $0x10,%esp
f012696c:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126972:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0126978:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f012697d:	74 17                	je     f0126996 <test_kfreeall+0x13e0>
f012697f:	83 ec 04             	sub    $0x4,%esp
f0126982:	68 84 af 13 f0       	push   $0xf013af84
f0126987:	68 de 0a 00 00       	push   $0xade
f012698c:	68 7a a2 13 f0       	push   $0xf013a27a
f0126991:	e8 10 98 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126996:	e8 f1 d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012699b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012699e:	74 17                	je     f01269b7 <test_kfreeall+0x1401>
f01269a0:	83 ec 04             	sub    $0x4,%esp
f01269a3:	68 94 a2 13 f0       	push   $0xf013a294
f01269a8:	68 df 0a 00 00       	push   $0xadf
f01269ad:	68 7a a2 13 f0       	push   $0xf013a27a
f01269b2:	e8 ef 97 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01269b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01269ba:	e8 d9 53 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01269bf:	29 c3                	sub    %eax,%ebx
f01269c1:	89 d8                	mov    %ebx,%eax
f01269c3:	3d 00 04 00 00       	cmp    $0x400,%eax
f01269c8:	74 17                	je     f01269e1 <test_kfreeall+0x142b>
f01269ca:	83 ec 04             	sub    $0x4,%esp
f01269cd:	68 fc a2 13 f0       	push   $0xf013a2fc
f01269d2:	68 e0 0a 00 00       	push   $0xae0
f01269d7:	68 7a a2 13 f0       	push   $0xf013a27a
f01269dc:	e8 c5 97 fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01269e1:	e8 b2 53 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01269e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269e9:	e8 9e d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01269ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01269f1:	83 ec 0c             	sub    $0xc,%esp
f01269f4:	68 00 30 00 00       	push   $0x3000
f01269f9:	e8 de 09 fe ff       	call   f01073dc <kmalloc>
f01269fe:	83 c4 10             	add    $0x10,%esp
f0126a01:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126a07:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126a0d:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126a12:	74 17                	je     f0126a2b <test_kfreeall+0x1475>
f0126a14:	83 ec 04             	sub    $0x4,%esp
f0126a17:	68 84 af 13 f0       	push   $0xf013af84
f0126a1c:	68 e6 0a 00 00       	push   $0xae6
f0126a21:	68 7a a2 13 f0       	push   $0xf013a27a
f0126a26:	e8 7b 97 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a2b:	e8 5c d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a33:	74 17                	je     f0126a4c <test_kfreeall+0x1496>
f0126a35:	83 ec 04             	sub    $0x4,%esp
f0126a38:	68 94 a2 13 f0       	push   $0xf013a294
f0126a3d:	68 e7 0a 00 00       	push   $0xae7
f0126a42:	68 7a a2 13 f0       	push   $0xf013a27a
f0126a47:	e8 5a 97 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a4c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a4f:	e8 44 53 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126a54:	29 c3                	sub    %eax,%ebx
f0126a56:	89 d8                	mov    %ebx,%eax
f0126a58:	83 f8 03             	cmp    $0x3,%eax
f0126a5b:	74 17                	je     f0126a74 <test_kfreeall+0x14be>
f0126a5d:	83 ec 04             	sub    $0x4,%esp
f0126a60:	68 fc a2 13 f0       	push   $0xf013a2fc
f0126a65:	68 e8 0a 00 00       	push   $0xae8
f0126a6a:	68 7a a2 13 f0       	push   $0xf013a27a
f0126a6f:	e8 32 97 fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126a74:	e8 1f 53 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126a79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a7c:	e8 0b d2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126a84:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126a8a:	83 ec 0c             	sub    $0xc,%esp
f0126a8d:	50                   	push   %eax
f0126a8e:	e8 63 09 fe ff       	call   f01073f6 <kfree>
f0126a93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a96:	e8 f1 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126a9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126a9e:	74 17                	je     f0126ab7 <test_kfreeall+0x1501>
f0126aa0:	83 ec 04             	sub    $0x4,%esp
f0126aa3:	68 94 a2 13 f0       	push   $0xf013a294
f0126aa8:	68 f2 0a 00 00       	push   $0xaf2
f0126aad:	68 7a a2 13 f0       	push   $0xf013a27a
f0126ab2:	e8 ef 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126ab7:	e8 dc 52 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126abc:	89 c2                	mov    %eax,%edx
f0126abe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126ac1:	29 c2                	sub    %eax,%edx
f0126ac3:	89 d0                	mov    %edx,%eax
f0126ac5:	83 f8 03             	cmp    $0x3,%eax
f0126ac8:	74 17                	je     f0126ae1 <test_kfreeall+0x152b>
f0126aca:	83 ec 04             	sub    $0x4,%esp
f0126acd:	68 2c ab 13 f0       	push   $0xf013ab2c
f0126ad2:	68 f3 0a 00 00       	push   $0xaf3
f0126ad7:	68 7a a2 13 f0       	push   $0xf013a27a
f0126adc:	e8 c5 96 fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126ae1:	e8 b2 52 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126ae6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ae9:	e8 9e d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126aee:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126af1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126af7:	83 ec 0c             	sub    $0xc,%esp
f0126afa:	50                   	push   %eax
f0126afb:	e8 f6 08 fe ff       	call   f01073f6 <kfree>
f0126b00:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b03:	e8 84 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b0b:	74 17                	je     f0126b24 <test_kfreeall+0x156e>
f0126b0d:	83 ec 04             	sub    $0x4,%esp
f0126b10:	68 94 a2 13 f0       	push   $0xf013a294
f0126b15:	68 fc 0a 00 00       	push   $0xafc
f0126b1a:	68 7a a2 13 f0       	push   $0xf013a27a
f0126b1f:	e8 82 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126b24:	e8 6f 52 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126b29:	89 c2                	mov    %eax,%edx
f0126b2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b2e:	39 c2                	cmp    %eax,%edx
f0126b30:	74 17                	je     f0126b49 <test_kfreeall+0x1593>
f0126b32:	83 ec 04             	sub    $0x4,%esp
f0126b35:	68 2c ab 13 f0       	push   $0xf013ab2c
f0126b3a:	68 fd 0a 00 00       	push   $0xafd
f0126b3f:	68 7a a2 13 f0       	push   $0xf013a27a
f0126b44:	e8 5d 96 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126b49:	e8 4a 52 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126b4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b51:	e8 36 d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b56:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0126b59:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126b5f:	83 ec 0c             	sub    $0xc,%esp
f0126b62:	50                   	push   %eax
f0126b63:	e8 8e 08 fe ff       	call   f01073f6 <kfree>
f0126b68:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b6b:	e8 1c d1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126b70:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b73:	74 17                	je     f0126b8c <test_kfreeall+0x15d6>
f0126b75:	83 ec 04             	sub    $0x4,%esp
f0126b78:	68 94 a2 13 f0       	push   $0xf013a294
f0126b7d:	68 03 0b 00 00       	push   $0xb03
f0126b82:	68 7a a2 13 f0       	push   $0xf013a27a
f0126b87:	e8 1a 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126b8c:	e8 07 52 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126b91:	89 c2                	mov    %eax,%edx
f0126b93:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b96:	39 c2                	cmp    %eax,%edx
f0126b98:	74 17                	je     f0126bb1 <test_kfreeall+0x15fb>
f0126b9a:	83 ec 04             	sub    $0x4,%esp
f0126b9d:	68 2c ab 13 f0       	push   $0xf013ab2c
f0126ba2:	68 04 0b 00 00       	push   $0xb04
f0126ba7:	68 7a a2 13 f0       	push   $0xf013a27a
f0126bac:	e8 f5 95 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126bb1:	e8 e2 51 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126bb6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126bb9:	e8 ce d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126bbe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126bc1:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126bc7:	83 ec 0c             	sub    $0xc,%esp
f0126bca:	50                   	push   %eax
f0126bcb:	e8 26 08 fe ff       	call   f01073f6 <kfree>
f0126bd0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126bd3:	e8 b4 d0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126bd8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126bdb:	74 17                	je     f0126bf4 <test_kfreeall+0x163e>
f0126bdd:	83 ec 04             	sub    $0x4,%esp
f0126be0:	68 94 a2 13 f0       	push   $0xf013a294
f0126be5:	68 0a 0b 00 00       	push   $0xb0a
f0126bea:	68 7a a2 13 f0       	push   $0xf013a27a
f0126bef:	e8 b2 95 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126bf4:	e8 9f 51 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126bf9:	89 c2                	mov    %eax,%edx
f0126bfb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126bfe:	39 c2                	cmp    %eax,%edx
f0126c00:	74 17                	je     f0126c19 <test_kfreeall+0x1663>
f0126c02:	83 ec 04             	sub    $0x4,%esp
f0126c05:	68 2c ab 13 f0       	push   $0xf013ab2c
f0126c0a:	68 0b 0b 00 00       	push   $0xb0b
f0126c0f:	68 7a a2 13 f0       	push   $0xf013a27a
f0126c14:	e8 8d 95 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126c19:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126c20:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126c27:	eb 48                	jmp    f0126c71 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0126c29:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126c2c:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f0126c31:	83 ec 04             	sub    $0x4,%esp
f0126c34:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0126c3a:	51                   	push   %ecx
f0126c3b:	52                   	push   %edx
f0126c3c:	50                   	push   %eax
f0126c3d:	e8 27 fd fd ff       	call   f0106969 <get_page_table>
f0126c42:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126c45:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0126c4b:	85 c0                	test   %eax,%eax
f0126c4d:	75 17                	jne    f0126c66 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126c4f:	83 ec 04             	sub    $0x4,%esp
f0126c52:	68 7c ab 13 f0       	push   $0xf013ab7c
f0126c57:	68 18 0b 00 00       	push   $0xb18
f0126c5c:	68 7a a2 13 f0       	push   $0xf013a27a
f0126c61:	e8 40 95 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126c66:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126c6d:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126c71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126c75:	78 b2                	js     f0126c29 <test_kfreeall+0x1673>
f0126c77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126c7b:	7f 09                	jg     f0126c86 <test_kfreeall+0x16d0>
f0126c7d:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126c84:	76 a3                	jbe    f0126c29 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126c86:	83 ec 0c             	sub    $0xc,%esp
f0126c89:	68 d8 af 13 f0       	push   $0xf013afd8
f0126c8e:	e8 9a 9f fd ff       	call   f0100c2d <cprintf>
f0126c93:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126c96:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126c9b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126c9e:	5b                   	pop    %ebx
f0126c9f:	5f                   	pop    %edi
f0126ca0:	5d                   	pop    %ebp
f0126ca1:	c3                   	ret    

f0126ca2 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126ca2:	55                   	push   %ebp
f0126ca3:	89 e5                	mov    %esp,%ebp
f0126ca5:	57                   	push   %edi
f0126ca6:	53                   	push   %ebx
f0126ca7:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0126cad:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126cb1:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126cb5:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126cbb:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126cc1:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126cc8:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126ccf:	e8 c4 50 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126cd4:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126cd7:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0126cdd:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126ce2:	b8 00 00 00 00       	mov    $0x0,%eax
f0126ce7:	89 d7                	mov    %edx,%edi
f0126ce9:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126ceb:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0126cf1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126cf6:	b8 00 00 00 00       	mov    $0x0,%eax
f0126cfb:	89 d7                	mov    %edx,%edi
f0126cfd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126cff:	e8 94 50 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126d04:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d07:	e8 80 cf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126d0c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126d0f:	83 ec 0c             	sub    $0xc,%esp
f0126d12:	68 00 fc 1f 00       	push   $0x1ffc00
f0126d17:	e8 c0 06 fe ff       	call   f01073dc <kmalloc>
f0126d1c:	83 c4 10             	add    $0x10,%esp
f0126d1f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d25:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0126d2b:	89 c1                	mov    %eax,%ecx
f0126d2d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126d34:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126d37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126d3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126d3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d42:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d47:	f7 75 d4             	divl   -0x2c(%ebp)
f0126d4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d4d:	29 d0                	sub    %edx,%eax
f0126d4f:	89 c3                	mov    %eax,%ebx
f0126d51:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126d58:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126d5d:	0f b6 d0             	movzbl %al,%edx
f0126d60:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126d63:	01 d0                	add    %edx,%eax
f0126d65:	48                   	dec    %eax
f0126d66:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126d69:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d71:	f7 75 cc             	divl   -0x34(%ebp)
f0126d74:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126d77:	29 d0                	sub    %edx,%eax
f0126d79:	01 c3                	add    %eax,%ebx
f0126d7b:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126d82:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126d87:	0f b6 c0             	movzbl %al,%eax
f0126d8a:	c1 e0 04             	shl    $0x4,%eax
f0126d8d:	89 c2                	mov    %eax,%edx
f0126d8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126d92:	01 d0                	add    %edx,%eax
f0126d94:	48                   	dec    %eax
f0126d95:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126d98:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126d9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126da0:	f7 75 c4             	divl   -0x3c(%ebp)
f0126da3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126da6:	29 d0                	sub    %edx,%eax
f0126da8:	01 d8                	add    %ebx,%eax
f0126daa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126daf:	39 c1                	cmp    %eax,%ecx
f0126db1:	74 17                	je     f0126dca <test_kexpand+0x128>
f0126db3:	83 ec 04             	sub    $0x4,%esp
f0126db6:	68 60 a3 13 f0       	push   $0xf013a360
f0126dbb:	68 43 0b 00 00       	push   $0xb43
f0126dc0:	68 7a a2 13 f0       	push   $0xf013a27a
f0126dc5:	e8 dc 93 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dca:	e8 bd ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126dcf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126dd2:	74 17                	je     f0126deb <test_kexpand+0x149>
f0126dd4:	83 ec 04             	sub    $0x4,%esp
f0126dd7:	68 94 a2 13 f0       	push   $0xf013a294
f0126ddc:	68 44 0b 00 00       	push   $0xb44
f0126de1:	68 7a a2 13 f0       	push   $0xf013a27a
f0126de6:	e8 bb 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126deb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126dee:	e8 a5 4f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126df3:	29 c3                	sub    %eax,%ebx
f0126df5:	89 d8                	mov    %ebx,%eax
f0126df7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126dfc:	74 17                	je     f0126e15 <test_kexpand+0x173>
f0126dfe:	83 ec 04             	sub    $0x4,%esp
f0126e01:	68 fc a2 13 f0       	push   $0xf013a2fc
f0126e06:	68 45 0b 00 00       	push   $0xb45
f0126e0b:	68 7a a2 13 f0       	push   $0xf013a27a
f0126e10:	e8 91 93 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126e15:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0126e1c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e1f:	e8 74 4f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126e24:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e27:	e8 60 ce fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126e2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126e2f:	83 ec 0c             	sub    $0xc,%esp
f0126e32:	68 00 fc 1f 00       	push   $0x1ffc00
f0126e37:	e8 a0 05 fe ff       	call   f01073dc <kmalloc>
f0126e3c:	83 c4 10             	add    $0x10,%esp
f0126e3f:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e45:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126e4b:	89 c1                	mov    %eax,%ecx
f0126e4d:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126e54:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e5c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126e5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e62:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e67:	f7 75 bc             	divl   -0x44(%ebp)
f0126e6a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e6d:	29 d0                	sub    %edx,%eax
f0126e6f:	89 c3                	mov    %eax,%ebx
f0126e71:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126e78:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126e7d:	0f b6 d0             	movzbl %al,%edx
f0126e80:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e83:	01 d0                	add    %edx,%eax
f0126e85:	48                   	dec    %eax
f0126e86:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126e89:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e91:	f7 75 b4             	divl   -0x4c(%ebp)
f0126e94:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126e97:	29 d0                	sub    %edx,%eax
f0126e99:	01 c3                	add    %eax,%ebx
f0126e9b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126ea2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126ea7:	0f b6 c0             	movzbl %al,%eax
f0126eaa:	c1 e0 04             	shl    $0x4,%eax
f0126ead:	89 c2                	mov    %eax,%edx
f0126eaf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126eb2:	01 d0                	add    %edx,%eax
f0126eb4:	48                   	dec    %eax
f0126eb5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126eb8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126ebb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ec0:	f7 75 ac             	divl   -0x54(%ebp)
f0126ec3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126ec6:	29 d0                	sub    %edx,%eax
f0126ec8:	01 d8                	add    %ebx,%eax
f0126eca:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126ecf:	39 c1                	cmp    %eax,%ecx
f0126ed1:	74 17                	je     f0126eea <test_kexpand+0x248>
f0126ed3:	83 ec 04             	sub    $0x4,%esp
f0126ed6:	68 60 a3 13 f0       	push   $0xf013a360
f0126edb:	68 4c 0b 00 00       	push   $0xb4c
f0126ee0:	68 7a a2 13 f0       	push   $0xf013a27a
f0126ee5:	e8 bc 92 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126eea:	e8 9d cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126eef:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ef2:	74 17                	je     f0126f0b <test_kexpand+0x269>
f0126ef4:	83 ec 04             	sub    $0x4,%esp
f0126ef7:	68 94 a2 13 f0       	push   $0xf013a294
f0126efc:	68 4d 0b 00 00       	push   $0xb4d
f0126f01:	68 7a a2 13 f0       	push   $0xf013a27a
f0126f06:	e8 9b 92 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f0b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f0e:	e8 85 4e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126f13:	29 c3                	sub    %eax,%ebx
f0126f15:	89 d8                	mov    %ebx,%eax
f0126f17:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126f1c:	74 17                	je     f0126f35 <test_kexpand+0x293>
f0126f1e:	83 ec 04             	sub    $0x4,%esp
f0126f21:	68 fc a2 13 f0       	push   $0xf013a2fc
f0126f26:	68 4e 0b 00 00       	push   $0xb4e
f0126f2b:	68 7a a2 13 f0       	push   $0xf013a27a
f0126f30:	e8 71 92 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126f35:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0126f3c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f3f:	e8 54 4e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0126f44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f47:	e8 40 cd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0126f4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126f4f:	83 ec 0c             	sub    $0xc,%esp
f0126f52:	68 00 08 00 00       	push   $0x800
f0126f57:	e8 80 04 fe ff       	call   f01073dc <kmalloc>
f0126f5c:	83 c4 10             	add    $0x10,%esp
f0126f5f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f65:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126f6b:	89 c1                	mov    %eax,%ecx
f0126f6d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0126f74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f7c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0126f7f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126f82:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f87:	f7 75 a4             	divl   -0x5c(%ebp)
f0126f8a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126f8d:	29 d0                	sub    %edx,%eax
f0126f8f:	89 c3                	mov    %eax,%ebx
f0126f91:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0126f98:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126f9d:	0f b6 d0             	movzbl %al,%edx
f0126fa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126fa3:	01 d0                	add    %edx,%eax
f0126fa5:	48                   	dec    %eax
f0126fa6:	89 45 98             	mov    %eax,-0x68(%ebp)
f0126fa9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126fac:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fb1:	f7 75 9c             	divl   -0x64(%ebp)
f0126fb4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126fb7:	29 d0                	sub    %edx,%eax
f0126fb9:	01 c3                	add    %eax,%ebx
f0126fbb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0126fc2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0126fc7:	0f b6 c0             	movzbl %al,%eax
f0126fca:	c1 e0 04             	shl    $0x4,%eax
f0126fcd:	89 c2                	mov    %eax,%edx
f0126fcf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126fd2:	01 d0                	add    %edx,%eax
f0126fd4:	48                   	dec    %eax
f0126fd5:	89 45 90             	mov    %eax,-0x70(%ebp)
f0126fd8:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126fdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fe0:	f7 75 94             	divl   -0x6c(%ebp)
f0126fe3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126fe6:	29 d0                	sub    %edx,%eax
f0126fe8:	01 d8                	add    %ebx,%eax
f0126fea:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126fef:	39 c1                	cmp    %eax,%ecx
f0126ff1:	74 17                	je     f012700a <test_kexpand+0x368>
f0126ff3:	83 ec 04             	sub    $0x4,%esp
f0126ff6:	68 60 a3 13 f0       	push   $0xf013a360
f0126ffb:	68 55 0b 00 00       	push   $0xb55
f0127000:	68 7a a2 13 f0       	push   $0xf013a27a
f0127005:	e8 9c 91 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012700a:	e8 7d cc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012700f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127012:	74 17                	je     f012702b <test_kexpand+0x389>
f0127014:	83 ec 04             	sub    $0x4,%esp
f0127017:	68 94 a2 13 f0       	push   $0xf013a294
f012701c:	68 56 0b 00 00       	push   $0xb56
f0127021:	68 7a a2 13 f0       	push   $0xf013a27a
f0127026:	e8 7b 91 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012702b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012702e:	e8 65 4d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127033:	29 c3                	sub    %eax,%ebx
f0127035:	89 d8                	mov    %ebx,%eax
f0127037:	83 f8 01             	cmp    $0x1,%eax
f012703a:	74 17                	je     f0127053 <test_kexpand+0x3b1>
f012703c:	83 ec 04             	sub    $0x4,%esp
f012703f:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127044:	68 57 0b 00 00       	push   $0xb57
f0127049:	68 7a a2 13 f0       	push   $0xf013a27a
f012704e:	e8 53 91 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127053:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012705a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012705d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127063:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127066:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012706d:	eb 0e                	jmp    f012707d <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f012706f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127072:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127075:	01 d0                	add    %edx,%eax
f0127077:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012707a:	ff 45 f4             	incl   -0xc(%ebp)
f012707d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127083:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127086:	7f e7                	jg     f012706f <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127088:	e8 0b 4d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012708d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127090:	e8 f7 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127095:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127098:	83 ec 0c             	sub    $0xc,%esp
f012709b:	68 00 08 00 00       	push   $0x800
f01270a0:	e8 37 03 fe ff       	call   f01073dc <kmalloc>
f01270a5:	83 c4 10             	add    $0x10,%esp
f01270a8:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270ae:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01270b4:	89 c1                	mov    %eax,%ecx
f01270b6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01270bd:	8b 45 88             	mov    -0x78(%ebp),%eax
f01270c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01270c5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01270c8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01270cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01270d0:	f7 75 88             	divl   -0x78(%ebp)
f01270d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01270d6:	29 d0                	sub    %edx,%eax
f01270d8:	89 c3                	mov    %eax,%ebx
f01270da:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01270e1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01270e6:	0f b6 d0             	movzbl %al,%edx
f01270e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270ec:	01 d0                	add    %edx,%eax
f01270ee:	48                   	dec    %eax
f01270ef:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01270f5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01270fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127100:	f7 75 80             	divl   -0x80(%ebp)
f0127103:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127109:	29 d0                	sub    %edx,%eax
f012710b:	01 c3                	add    %eax,%ebx
f012710d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127114:	10 00 00 
f0127117:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012711c:	0f b6 c0             	movzbl %al,%eax
f012711f:	c1 e0 04             	shl    $0x4,%eax
f0127122:	89 c2                	mov    %eax,%edx
f0127124:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012712a:	01 d0                	add    %edx,%eax
f012712c:	48                   	dec    %eax
f012712d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127133:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127139:	ba 00 00 00 00       	mov    $0x0,%edx
f012713e:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127144:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012714a:	29 d0                	sub    %edx,%eax
f012714c:	01 d8                	add    %ebx,%eax
f012714e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127153:	39 c1                	cmp    %eax,%ecx
f0127155:	74 17                	je     f012716e <test_kexpand+0x4cc>
f0127157:	83 ec 04             	sub    $0x4,%esp
f012715a:	68 60 a3 13 f0       	push   $0xf013a360
f012715f:	68 63 0b 00 00       	push   $0xb63
f0127164:	68 7a a2 13 f0       	push   $0xf013a27a
f0127169:	e8 38 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012716e:	e8 19 cb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127173:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127176:	74 17                	je     f012718f <test_kexpand+0x4ed>
f0127178:	83 ec 04             	sub    $0x4,%esp
f012717b:	68 94 a2 13 f0       	push   $0xf013a294
f0127180:	68 64 0b 00 00       	push   $0xb64
f0127185:	68 7a a2 13 f0       	push   $0xf013a27a
f012718a:	e8 17 90 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012718f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127192:	e8 01 4c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127197:	29 c3                	sub    %eax,%ebx
f0127199:	89 d8                	mov    %ebx,%eax
f012719b:	83 f8 01             	cmp    $0x1,%eax
f012719e:	74 17                	je     f01271b7 <test_kexpand+0x515>
f01271a0:	83 ec 04             	sub    $0x4,%esp
f01271a3:	68 fc a2 13 f0       	push   $0xf013a2fc
f01271a8:	68 65 0b 00 00       	push   $0xb65
f01271ad:	68 7a a2 13 f0       	push   $0xf013a27a
f01271b2:	e8 ef 8f fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01271b7:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01271be:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01271c1:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01271c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01271ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01271d1:	eb 0e                	jmp    f01271e1 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01271d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01271d6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01271d9:	01 d0                	add    %edx,%eax
f01271db:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01271de:	ff 45 f4             	incl   -0xc(%ebp)
f01271e1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01271e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01271ea:	7f e7                	jg     f01271d3 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01271ec:	e8 a7 4b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01271f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271f4:	e8 93 ca fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01271f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01271fc:	83 ec 0c             	sub    $0xc,%esp
f01271ff:	68 00 1c 00 00       	push   $0x1c00
f0127204:	e8 d3 01 fe ff       	call   f01073dc <kmalloc>
f0127209:	83 c4 10             	add    $0x10,%esp
f012720c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127212:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127218:	89 c1                	mov    %eax,%ecx
f012721a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127221:	10 00 00 
f0127224:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012722a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012722f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127235:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012723b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127240:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127246:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012724c:	29 d0                	sub    %edx,%eax
f012724e:	89 c3                	mov    %eax,%ebx
f0127250:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127257:	10 00 00 
f012725a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012725f:	0f b6 d0             	movzbl %al,%edx
f0127262:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127268:	01 d0                	add    %edx,%eax
f012726a:	48                   	dec    %eax
f012726b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127271:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127277:	ba 00 00 00 00       	mov    $0x0,%edx
f012727c:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127282:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127288:	29 d0                	sub    %edx,%eax
f012728a:	01 c3                	add    %eax,%ebx
f012728c:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127293:	10 00 00 
f0127296:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012729b:	0f b6 c0             	movzbl %al,%eax
f012729e:	c1 e0 04             	shl    $0x4,%eax
f01272a1:	89 c2                	mov    %eax,%edx
f01272a3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272a9:	01 d0                	add    %edx,%eax
f01272ab:	48                   	dec    %eax
f01272ac:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01272b2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01272b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01272bd:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01272c3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01272c9:	29 d0                	sub    %edx,%eax
f01272cb:	01 d8                	add    %ebx,%eax
f01272cd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01272d2:	39 c1                	cmp    %eax,%ecx
f01272d4:	74 17                	je     f01272ed <test_kexpand+0x64b>
f01272d6:	83 ec 04             	sub    $0x4,%esp
f01272d9:	68 60 a3 13 f0       	push   $0xf013a360
f01272de:	68 71 0b 00 00       	push   $0xb71
f01272e3:	68 7a a2 13 f0       	push   $0xf013a27a
f01272e8:	e8 b9 8e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272ed:	e8 9a c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01272f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272f5:	74 17                	je     f012730e <test_kexpand+0x66c>
f01272f7:	83 ec 04             	sub    $0x4,%esp
f01272fa:	68 94 a2 13 f0       	push   $0xf013a294
f01272ff:	68 72 0b 00 00       	push   $0xb72
f0127304:	68 7a a2 13 f0       	push   $0xf013a27a
f0127309:	e8 98 8e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012730e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127311:	e8 82 4a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127316:	29 c3                	sub    %eax,%ebx
f0127318:	89 d8                	mov    %ebx,%eax
f012731a:	83 f8 02             	cmp    $0x2,%eax
f012731d:	74 17                	je     f0127336 <test_kexpand+0x694>
f012731f:	83 ec 04             	sub    $0x4,%esp
f0127322:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127327:	68 73 0b 00 00       	push   $0xb73
f012732c:	68 7a a2 13 f0       	push   $0xf013a27a
f0127331:	e8 70 8e fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127336:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f012733d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127340:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127346:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127349:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127350:	eb 0e                	jmp    f0127360 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127352:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127355:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127358:	01 d0                	add    %edx,%eax
f012735a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012735d:	ff 45 f4             	incl   -0xc(%ebp)
f0127360:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127366:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127369:	7f e7                	jg     f0127352 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012736b:	e8 28 4a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127370:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127373:	e8 14 c9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127378:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012737b:	83 ec 0c             	sub    $0xc,%esp
f012737e:	68 00 fc 2f 00       	push   $0x2ffc00
f0127383:	e8 54 00 fe ff       	call   f01073dc <kmalloc>
f0127388:	83 c4 10             	add    $0x10,%esp
f012738b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127391:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127397:	89 c1                	mov    %eax,%ecx
f0127399:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01273a0:	10 00 00 
f01273a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01273a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01273ae:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01273b4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01273ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01273bf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01273c5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01273cb:	29 d0                	sub    %edx,%eax
f01273cd:	89 c3                	mov    %eax,%ebx
f01273cf:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01273d6:	10 00 00 
f01273d9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01273de:	0f b6 d0             	movzbl %al,%edx
f01273e1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01273e7:	01 d0                	add    %edx,%eax
f01273e9:	48                   	dec    %eax
f01273ea:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01273f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01273f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01273fb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127401:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127407:	29 d0                	sub    %edx,%eax
f0127409:	01 c3                	add    %eax,%ebx
f012740b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127412:	10 00 00 
f0127415:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012741a:	0f b6 c0             	movzbl %al,%eax
f012741d:	c1 e0 04             	shl    $0x4,%eax
f0127420:	89 c2                	mov    %eax,%edx
f0127422:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127428:	01 d0                	add    %edx,%eax
f012742a:	48                   	dec    %eax
f012742b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127431:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127437:	ba 00 00 00 00       	mov    $0x0,%edx
f012743c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127442:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127448:	29 d0                	sub    %edx,%eax
f012744a:	01 d8                	add    %ebx,%eax
f012744c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127451:	39 c1                	cmp    %eax,%ecx
f0127453:	74 17                	je     f012746c <test_kexpand+0x7ca>
f0127455:	83 ec 04             	sub    $0x4,%esp
f0127458:	68 60 a3 13 f0       	push   $0xf013a360
f012745d:	68 7f 0b 00 00       	push   $0xb7f
f0127462:	68 7a a2 13 f0       	push   $0xf013a27a
f0127467:	e8 3a 8d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012746c:	e8 1b c8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127471:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127474:	74 17                	je     f012748d <test_kexpand+0x7eb>
f0127476:	83 ec 04             	sub    $0x4,%esp
f0127479:	68 94 a2 13 f0       	push   $0xf013a294
f012747e:	68 80 0b 00 00       	push   $0xb80
f0127483:	68 7a a2 13 f0       	push   $0xf013a27a
f0127488:	e8 19 8d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012748d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127490:	e8 03 49 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127495:	29 c3                	sub    %eax,%ebx
f0127497:	89 d8                	mov    %ebx,%eax
f0127499:	3d 00 03 00 00       	cmp    $0x300,%eax
f012749e:	74 17                	je     f01274b7 <test_kexpand+0x815>
f01274a0:	83 ec 04             	sub    $0x4,%esp
f01274a3:	68 fc a2 13 f0       	push   $0xf013a2fc
f01274a8:	68 81 0b 00 00       	push   $0xb81
f01274ad:	68 7a a2 13 f0       	push   $0xf013a27a
f01274b2:	e8 ef 8c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01274b7:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f01274be:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01274c1:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01274c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01274ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01274d1:	eb 0e                	jmp    f01274e1 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01274d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01274d6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01274d9:	01 d0                	add    %edx,%eax
f01274db:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01274de:	ff 45 f4             	incl   -0xc(%ebp)
f01274e1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01274e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274ea:	7f e7                	jg     f01274d3 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01274ec:	e8 a7 48 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01274f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274f4:	e8 93 c7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01274f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01274fc:	83 ec 0c             	sub    $0xc,%esp
f01274ff:	68 00 00 60 00       	push   $0x600000
f0127504:	e8 d3 fe fd ff       	call   f01073dc <kmalloc>
f0127509:	83 c4 10             	add    $0x10,%esp
f012750c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127512:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127518:	89 c1                	mov    %eax,%ecx
f012751a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127521:	10 00 00 
f0127524:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012752a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012752f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127535:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012753b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127540:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127546:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012754c:	29 d0                	sub    %edx,%eax
f012754e:	89 c3                	mov    %eax,%ebx
f0127550:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127557:	10 00 00 
f012755a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012755f:	0f b6 d0             	movzbl %al,%edx
f0127562:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127568:	01 d0                	add    %edx,%eax
f012756a:	48                   	dec    %eax
f012756b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127571:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127577:	ba 00 00 00 00       	mov    $0x0,%edx
f012757c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127582:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127588:	29 d0                	sub    %edx,%eax
f012758a:	01 c3                	add    %eax,%ebx
f012758c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127593:	10 00 00 
f0127596:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012759b:	0f b6 c0             	movzbl %al,%eax
f012759e:	c1 e0 04             	shl    $0x4,%eax
f01275a1:	89 c2                	mov    %eax,%edx
f01275a3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01275a9:	01 d0                	add    %edx,%eax
f01275ab:	48                   	dec    %eax
f01275ac:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01275b2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01275b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01275bd:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01275c3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01275c9:	29 d0                	sub    %edx,%eax
f01275cb:	01 d8                	add    %ebx,%eax
f01275cd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01275d2:	39 c1                	cmp    %eax,%ecx
f01275d4:	74 17                	je     f01275ed <test_kexpand+0x94b>
f01275d6:	83 ec 04             	sub    $0x4,%esp
f01275d9:	68 60 a3 13 f0       	push   $0xf013a360
f01275de:	68 8d 0b 00 00       	push   $0xb8d
f01275e3:	68 7a a2 13 f0       	push   $0xf013a27a
f01275e8:	e8 b9 8b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275ed:	e8 9a c6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01275f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01275f5:	74 17                	je     f012760e <test_kexpand+0x96c>
f01275f7:	83 ec 04             	sub    $0x4,%esp
f01275fa:	68 94 a2 13 f0       	push   $0xf013a294
f01275ff:	68 8e 0b 00 00       	push   $0xb8e
f0127604:	68 7a a2 13 f0       	push   $0xf013a27a
f0127609:	e8 98 8b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012760e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127611:	e8 82 47 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127616:	29 c3                	sub    %eax,%ebx
f0127618:	89 d8                	mov    %ebx,%eax
f012761a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012761f:	74 17                	je     f0127638 <test_kexpand+0x996>
f0127621:	83 ec 04             	sub    $0x4,%esp
f0127624:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127629:	68 8f 0b 00 00       	push   $0xb8f
f012762e:	68 7a a2 13 f0       	push   $0xf013a27a
f0127633:	e8 6e 8b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127638:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f012763f:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127642:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127648:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f012764e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127655:	eb 1a                	jmp    f0127671 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127657:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012765a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127661:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127667:	01 c2                	add    %eax,%edx
f0127669:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012766c:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f012766e:	ff 45 f4             	incl   -0xc(%ebp)
f0127671:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127677:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012767a:	7d db                	jge    f0127657 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f012767c:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127683:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127686:	e8 0d 47 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012768b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012768e:	e8 f9 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127693:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127696:	83 ec 0c             	sub    $0xc,%esp
f0127699:	68 00 00 70 00       	push   $0x700000
f012769e:	e8 d5 fd fd ff       	call   f0107478 <kexpand>
f01276a3:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01276a6:	e8 e1 c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01276ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276ae:	74 19                	je     f01276c9 <test_kexpand+0xa27>
f01276b0:	68 14 b0 13 f0       	push   $0xf013b014
f01276b5:	68 45 b0 13 f0       	push   $0xf013b045
f01276ba:	68 a0 0b 00 00       	push   $0xba0
f01276bf:	68 7a a2 13 f0       	push   $0xf013a27a
f01276c4:	e8 dd 8a fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f01276c9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276cc:	e8 c7 46 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01276d1:	29 c3                	sub    %eax,%ebx
f01276d3:	89 d8                	mov    %ebx,%eax
f01276d5:	3d 00 01 00 00       	cmp    $0x100,%eax
f01276da:	74 19                	je     f01276f5 <test_kexpand+0xa53>
f01276dc:	68 5c b0 13 f0       	push   $0xf013b05c
f01276e1:	68 45 b0 13 f0       	push   $0xf013b045
f01276e6:	68 a1 0b 00 00       	push   $0xba1
f01276eb:	68 7a a2 13 f0       	push   $0xf013a27a
f01276f0:	e8 b1 8a fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01276f5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01276fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01276fe:	eb 1a                	jmp    f012771a <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127700:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127703:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012770a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127710:	01 c2                	add    %eax,%edx
f0127712:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127715:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127717:	ff 45 f4             	incl   -0xc(%ebp)
f012771a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012771d:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127723:	7c db                	jl     f0127700 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127725:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012772c:	eb 37                	jmp    f0127765 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f012772e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127731:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127738:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012773e:	01 d0                	add    %edx,%eax
f0127740:	8b 10                	mov    (%eax),%edx
f0127742:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127745:	39 c2                	cmp    %eax,%edx
f0127747:	74 19                	je     f0127762 <test_kexpand+0xac0>
f0127749:	68 8c b0 13 f0       	push   $0xf013b08c
f012774e:	68 45 b0 13 f0       	push   $0xf013b045
f0127753:	68 ad 0b 00 00       	push   $0xbad
f0127758:	68 7a a2 13 f0       	push   $0xf013a27a
f012775d:	e8 44 8a fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127762:	ff 45 f4             	incl   -0xc(%ebp)
f0127765:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127768:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012776e:	7c be                	jl     f012772e <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127770:	e8 23 46 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127775:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127778:	e8 0f c5 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012777d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127780:	83 ec 0c             	sub    $0xc,%esp
f0127783:	68 00 00 a0 00       	push   $0xa00000
f0127788:	e8 eb fc fd ff       	call   f0107478 <kexpand>
f012778d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127790:	e8 f7 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127795:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127798:	74 19                	je     f01277b3 <test_kexpand+0xb11>
f012779a:	68 14 b0 13 f0       	push   $0xf013b014
f012779f:	68 45 b0 13 f0       	push   $0xf013b045
f01277a4:	68 b8 0b 00 00       	push   $0xbb8
f01277a9:	68 7a a2 13 f0       	push   $0xf013a27a
f01277ae:	e8 f3 89 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f01277b3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277b6:	e8 dd 45 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01277bb:	29 c3                	sub    %eax,%ebx
f01277bd:	89 d8                	mov    %ebx,%eax
f01277bf:	3d 00 03 00 00       	cmp    $0x300,%eax
f01277c4:	74 19                	je     f01277df <test_kexpand+0xb3d>
f01277c6:	68 98 b0 13 f0       	push   $0xf013b098
f01277cb:	68 45 b0 13 f0       	push   $0xf013b045
f01277d0:	68 b9 0b 00 00       	push   $0xbb9
f01277d5:	68 7a a2 13 f0       	push   $0xf013a27a
f01277da:	e8 c7 89 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01277df:	e8 b4 45 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01277e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277e7:	e8 a0 c4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01277ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01277ef:	83 ec 0c             	sub    $0xc,%esp
f01277f2:	68 00 00 40 00       	push   $0x400000
f01277f7:	e8 e0 fb fd ff       	call   f01073dc <kmalloc>
f01277fc:	83 c4 10             	add    $0x10,%esp
f01277ff:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127805:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012780b:	89 c1                	mov    %eax,%ecx
f012780d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0127814:	10 00 00 
f0127817:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012781d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127822:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0127828:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012782e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127833:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0127839:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012783f:	29 d0                	sub    %edx,%eax
f0127841:	89 c3                	mov    %eax,%ebx
f0127843:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012784a:	10 00 00 
f012784d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127852:	0f b6 d0             	movzbl %al,%edx
f0127855:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012785b:	01 d0                	add    %edx,%eax
f012785d:	48                   	dec    %eax
f012785e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0127864:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012786a:	ba 00 00 00 00       	mov    $0x0,%edx
f012786f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0127875:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012787b:	29 d0                	sub    %edx,%eax
f012787d:	01 c3                	add    %eax,%ebx
f012787f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0127886:	10 00 00 
f0127889:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012788e:	0f b6 c0             	movzbl %al,%eax
f0127891:	c1 e0 04             	shl    $0x4,%eax
f0127894:	89 c2                	mov    %eax,%edx
f0127896:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012789c:	01 d0                	add    %edx,%eax
f012789e:	48                   	dec    %eax
f012789f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01278a5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01278ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01278b0:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01278b6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01278bc:	29 d0                	sub    %edx,%eax
f01278be:	01 d8                	add    %ebx,%eax
f01278c0:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01278c5:	39 c1                	cmp    %eax,%ecx
f01278c7:	74 17                	je     f01278e0 <test_kexpand+0xc3e>
f01278c9:	83 ec 04             	sub    $0x4,%esp
f01278cc:	68 c8 b0 13 f0       	push   $0xf013b0c8
f01278d1:	68 c4 0b 00 00       	push   $0xbc4
f01278d6:	68 7a a2 13 f0       	push   $0xf013a27a
f01278db:	e8 c6 88 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278e0:	e8 a7 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01278e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278e8:	74 17                	je     f0127901 <test_kexpand+0xc5f>
f01278ea:	83 ec 04             	sub    $0x4,%esp
f01278ed:	68 94 a2 13 f0       	push   $0xf013a294
f01278f2:	68 c5 0b 00 00       	push   $0xbc5
f01278f7:	68 7a a2 13 f0       	push   $0xf013a27a
f01278fc:	e8 a5 88 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127901:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127904:	e8 8f 44 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127909:	29 c3                	sub    %eax,%ebx
f012790b:	89 d8                	mov    %ebx,%eax
f012790d:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127912:	74 17                	je     f012792b <test_kexpand+0xc89>
f0127914:	83 ec 04             	sub    $0x4,%esp
f0127917:	68 fc a2 13 f0       	push   $0xf013a2fc
f012791c:	68 c6 0b 00 00       	push   $0xbc6
f0127921:	68 7a a2 13 f0       	push   $0xf013a27a
f0127926:	e8 7b 88 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f012792b:	e8 68 44 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127930:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127933:	e8 54 c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127938:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012793b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127941:	83 ec 0c             	sub    $0xc,%esp
f0127944:	50                   	push   %eax
f0127945:	e8 ac fa fd ff       	call   f01073f6 <kfree>
f012794a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012794d:	e8 3a c3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127952:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127955:	74 17                	je     f012796e <test_kexpand+0xccc>
f0127957:	83 ec 04             	sub    $0x4,%esp
f012795a:	68 94 a2 13 f0       	push   $0xf013a294
f012795f:	68 cf 0b 00 00       	push   $0xbcf
f0127964:	68 7a a2 13 f0       	push   $0xf013a27a
f0127969:	e8 38 88 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012796e:	e8 25 44 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127973:	89 c2                	mov    %eax,%edx
f0127975:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127978:	29 c2                	sub    %eax,%edx
f012797a:	89 d0                	mov    %edx,%eax
f012797c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0127981:	74 17                	je     f012799a <test_kexpand+0xcf8>
f0127983:	83 ec 04             	sub    $0x4,%esp
f0127986:	68 2c ab 13 f0       	push   $0xf013ab2c
f012798b:	68 d0 0b 00 00       	push   $0xbd0
f0127990:	68 7a a2 13 f0       	push   $0xf013a27a
f0127995:	e8 0c 88 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012799a:	e8 f9 43 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012799f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279a2:	e8 e5 c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279a7:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f01279aa:	83 ec 0c             	sub    $0xc,%esp
f01279ad:	68 00 50 40 00       	push   $0x405000
f01279b2:	e8 c1 fa fd ff       	call   f0107478 <kexpand>
f01279b7:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01279ba:	e8 cd c2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01279bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279c2:	74 19                	je     f01279dd <test_kexpand+0xd3b>
f01279c4:	68 14 b0 13 f0       	push   $0xf013b014
f01279c9:	68 45 b0 13 f0       	push   $0xf013b045
f01279ce:	68 da 0b 00 00       	push   $0xbda
f01279d3:	68 7a a2 13 f0       	push   $0xf013a27a
f01279d8:	e8 c9 87 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01279dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279e0:	e8 b3 43 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01279e5:	29 c3                	sub    %eax,%ebx
f01279e7:	89 d8                	mov    %ebx,%eax
f01279e9:	83 f8 05             	cmp    $0x5,%eax
f01279ec:	74 19                	je     f0127a07 <test_kexpand+0xd65>
f01279ee:	68 f0 b0 13 f0       	push   $0xf013b0f0
f01279f3:	68 45 b0 13 f0       	push   $0xf013b045
f01279f8:	68 db 0b 00 00       	push   $0xbdb
f01279fd:	68 7a a2 13 f0       	push   $0xf013a27a
f0127a02:	e8 9f 87 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127a07:	83 ec 0c             	sub    $0xc,%esp
f0127a0a:	68 d8 af 13 f0       	push   $0xf013afd8
f0127a0f:	e8 19 92 fd ff       	call   f0100c2d <cprintf>
f0127a14:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127a17:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127a1c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127a1f:	5b                   	pop    %ebx
f0127a20:	5f                   	pop    %edi
f0127a21:	5d                   	pop    %ebp
f0127a22:	c3                   	ret    

f0127a23 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127a23:	55                   	push   %ebp
f0127a24:	89 e5                	mov    %esp,%ebp
f0127a26:	57                   	push   %edi
f0127a27:	53                   	push   %ebx
f0127a28:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0127a2e:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127a32:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127a36:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127a3c:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127a42:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127a49:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127a50:	e8 43 43 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127a55:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127a58:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0127a5e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127a63:	b8 00 00 00 00       	mov    $0x0,%eax
f0127a68:	89 d7                	mov    %edx,%edi
f0127a6a:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127a6c:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0127a72:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127a77:	b8 00 00 00 00       	mov    $0x0,%eax
f0127a7c:	89 d7                	mov    %edx,%edi
f0127a7e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127a80:	e8 13 43 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127a85:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a88:	e8 ff c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127a8d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127a90:	83 ec 0c             	sub    $0xc,%esp
f0127a93:	68 00 fc 1f 00       	push   $0x1ffc00
f0127a98:	e8 3f f9 fd ff       	call   f01073dc <kmalloc>
f0127a9d:	83 c4 10             	add    $0x10,%esp
f0127aa0:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127aa6:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0127aac:	89 c1                	mov    %eax,%ecx
f0127aae:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127ab5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127ab8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127abd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127ac0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ac3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ac8:	f7 75 d4             	divl   -0x2c(%ebp)
f0127acb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ace:	29 d0                	sub    %edx,%eax
f0127ad0:	89 c3                	mov    %eax,%ebx
f0127ad2:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127ad9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127ade:	0f b6 d0             	movzbl %al,%edx
f0127ae1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127ae4:	01 d0                	add    %edx,%eax
f0127ae6:	48                   	dec    %eax
f0127ae7:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127aea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127aed:	ba 00 00 00 00       	mov    $0x0,%edx
f0127af2:	f7 75 cc             	divl   -0x34(%ebp)
f0127af5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127af8:	29 d0                	sub    %edx,%eax
f0127afa:	01 c3                	add    %eax,%ebx
f0127afc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127b03:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127b08:	0f b6 c0             	movzbl %al,%eax
f0127b0b:	c1 e0 04             	shl    $0x4,%eax
f0127b0e:	89 c2                	mov    %eax,%edx
f0127b10:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127b13:	01 d0                	add    %edx,%eax
f0127b15:	48                   	dec    %eax
f0127b16:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127b19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127b1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b21:	f7 75 c4             	divl   -0x3c(%ebp)
f0127b24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127b27:	29 d0                	sub    %edx,%eax
f0127b29:	01 d8                	add    %ebx,%eax
f0127b2b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127b30:	39 c1                	cmp    %eax,%ecx
f0127b32:	74 17                	je     f0127b4b <test_kshrink+0x128>
f0127b34:	83 ec 04             	sub    $0x4,%esp
f0127b37:	68 60 a3 13 f0       	push   $0xf013a360
f0127b3c:	68 01 0c 00 00       	push   $0xc01
f0127b41:	68 7a a2 13 f0       	push   $0xf013a27a
f0127b46:	e8 5b 86 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127b4b:	e8 3c c1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127b50:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b53:	74 17                	je     f0127b6c <test_kshrink+0x149>
f0127b55:	83 ec 04             	sub    $0x4,%esp
f0127b58:	68 94 a2 13 f0       	push   $0xf013a294
f0127b5d:	68 02 0c 00 00       	push   $0xc02
f0127b62:	68 7a a2 13 f0       	push   $0xf013a27a
f0127b67:	e8 3a 86 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127b6c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b6f:	e8 24 42 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127b74:	29 c3                	sub    %eax,%ebx
f0127b76:	89 d8                	mov    %ebx,%eax
f0127b78:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127b7d:	74 17                	je     f0127b96 <test_kshrink+0x173>
f0127b7f:	83 ec 04             	sub    $0x4,%esp
f0127b82:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127b87:	68 03 0c 00 00       	push   $0xc03
f0127b8c:	68 7a a2 13 f0       	push   $0xf013a27a
f0127b91:	e8 10 86 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127b96:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0127b9d:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ba0:	e8 f3 41 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127ba5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ba8:	e8 df c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127bad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127bb0:	83 ec 0c             	sub    $0xc,%esp
f0127bb3:	68 00 fc 1f 00       	push   $0x1ffc00
f0127bb8:	e8 1f f8 fd ff       	call   f01073dc <kmalloc>
f0127bbd:	83 c4 10             	add    $0x10,%esp
f0127bc0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127bc6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127bcc:	89 c1                	mov    %eax,%ecx
f0127bce:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127bd5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127bd8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bdd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127be0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127be8:	f7 75 bc             	divl   -0x44(%ebp)
f0127beb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127bee:	29 d0                	sub    %edx,%eax
f0127bf0:	89 c3                	mov    %eax,%ebx
f0127bf2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127bf9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127bfe:	0f b6 d0             	movzbl %al,%edx
f0127c01:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127c04:	01 d0                	add    %edx,%eax
f0127c06:	48                   	dec    %eax
f0127c07:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127c0a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127c0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c12:	f7 75 b4             	divl   -0x4c(%ebp)
f0127c15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127c18:	29 d0                	sub    %edx,%eax
f0127c1a:	01 c3                	add    %eax,%ebx
f0127c1c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127c23:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127c28:	0f b6 c0             	movzbl %al,%eax
f0127c2b:	c1 e0 04             	shl    $0x4,%eax
f0127c2e:	89 c2                	mov    %eax,%edx
f0127c30:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127c33:	01 d0                	add    %edx,%eax
f0127c35:	48                   	dec    %eax
f0127c36:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127c39:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c41:	f7 75 ac             	divl   -0x54(%ebp)
f0127c44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127c47:	29 d0                	sub    %edx,%eax
f0127c49:	01 d8                	add    %ebx,%eax
f0127c4b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127c50:	39 c1                	cmp    %eax,%ecx
f0127c52:	74 17                	je     f0127c6b <test_kshrink+0x248>
f0127c54:	83 ec 04             	sub    $0x4,%esp
f0127c57:	68 60 a3 13 f0       	push   $0xf013a360
f0127c5c:	68 0a 0c 00 00       	push   $0xc0a
f0127c61:	68 7a a2 13 f0       	push   $0xf013a27a
f0127c66:	e8 3b 85 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c6b:	e8 1c c0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127c70:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c73:	74 17                	je     f0127c8c <test_kshrink+0x269>
f0127c75:	83 ec 04             	sub    $0x4,%esp
f0127c78:	68 94 a2 13 f0       	push   $0xf013a294
f0127c7d:	68 0b 0c 00 00       	push   $0xc0b
f0127c82:	68 7a a2 13 f0       	push   $0xf013a27a
f0127c87:	e8 1a 85 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c8c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c8f:	e8 04 41 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127c94:	29 c3                	sub    %eax,%ebx
f0127c96:	89 d8                	mov    %ebx,%eax
f0127c98:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127c9d:	74 17                	je     f0127cb6 <test_kshrink+0x293>
f0127c9f:	83 ec 04             	sub    $0x4,%esp
f0127ca2:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127ca7:	68 0c 0c 00 00       	push   $0xc0c
f0127cac:	68 7a a2 13 f0       	push   $0xf013a27a
f0127cb1:	e8 f0 84 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127cb6:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0127cbd:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127cc0:	e8 d3 40 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127cc5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cc8:	e8 bf bf fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ccd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127cd0:	83 ec 0c             	sub    $0xc,%esp
f0127cd3:	68 00 08 00 00       	push   $0x800
f0127cd8:	e8 ff f6 fd ff       	call   f01073dc <kmalloc>
f0127cdd:	83 c4 10             	add    $0x10,%esp
f0127ce0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127ce6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127cec:	89 c1                	mov    %eax,%ecx
f0127cee:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0127cf5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127cf8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127cfd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127d00:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127d03:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d08:	f7 75 a4             	divl   -0x5c(%ebp)
f0127d0b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127d0e:	29 d0                	sub    %edx,%eax
f0127d10:	89 c3                	mov    %eax,%ebx
f0127d12:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127d19:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127d1e:	0f b6 d0             	movzbl %al,%edx
f0127d21:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127d24:	01 d0                	add    %edx,%eax
f0127d26:	48                   	dec    %eax
f0127d27:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127d2a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d32:	f7 75 9c             	divl   -0x64(%ebp)
f0127d35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127d38:	29 d0                	sub    %edx,%eax
f0127d3a:	01 c3                	add    %eax,%ebx
f0127d3c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0127d43:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127d48:	0f b6 c0             	movzbl %al,%eax
f0127d4b:	c1 e0 04             	shl    $0x4,%eax
f0127d4e:	89 c2                	mov    %eax,%edx
f0127d50:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127d53:	01 d0                	add    %edx,%eax
f0127d55:	48                   	dec    %eax
f0127d56:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127d59:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d61:	f7 75 94             	divl   -0x6c(%ebp)
f0127d64:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127d67:	29 d0                	sub    %edx,%eax
f0127d69:	01 d8                	add    %ebx,%eax
f0127d6b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127d70:	39 c1                	cmp    %eax,%ecx
f0127d72:	74 17                	je     f0127d8b <test_kshrink+0x368>
f0127d74:	83 ec 04             	sub    $0x4,%esp
f0127d77:	68 60 a3 13 f0       	push   $0xf013a360
f0127d7c:	68 13 0c 00 00       	push   $0xc13
f0127d81:	68 7a a2 13 f0       	push   $0xf013a27a
f0127d86:	e8 1b 84 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d8b:	e8 fc be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127d90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d93:	74 17                	je     f0127dac <test_kshrink+0x389>
f0127d95:	83 ec 04             	sub    $0x4,%esp
f0127d98:	68 94 a2 13 f0       	push   $0xf013a294
f0127d9d:	68 14 0c 00 00       	push   $0xc14
f0127da2:	68 7a a2 13 f0       	push   $0xf013a27a
f0127da7:	e8 fa 83 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127dac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127daf:	e8 e4 3f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127db4:	29 c3                	sub    %eax,%ebx
f0127db6:	89 d8                	mov    %ebx,%eax
f0127db8:	83 f8 01             	cmp    $0x1,%eax
f0127dbb:	74 17                	je     f0127dd4 <test_kshrink+0x3b1>
f0127dbd:	83 ec 04             	sub    $0x4,%esp
f0127dc0:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127dc5:	68 15 0c 00 00       	push   $0xc15
f0127dca:	68 7a a2 13 f0       	push   $0xf013a27a
f0127dcf:	e8 d2 83 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127dd4:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0127ddb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127dde:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0127de4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127de7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127dee:	eb 0e                	jmp    f0127dfe <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0127df0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127df3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127df6:	01 d0                	add    %edx,%eax
f0127df8:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127dfb:	ff 45 f4             	incl   -0xc(%ebp)
f0127dfe:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127e04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e07:	7f e7                	jg     f0127df0 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127e09:	e8 8a 3f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127e0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e11:	e8 76 be fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127e16:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127e19:	83 ec 0c             	sub    $0xc,%esp
f0127e1c:	68 00 08 00 00       	push   $0x800
f0127e21:	e8 b6 f5 fd ff       	call   f01073dc <kmalloc>
f0127e26:	83 c4 10             	add    $0x10,%esp
f0127e29:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e2f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0127e35:	89 c1                	mov    %eax,%ecx
f0127e37:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127e3e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127e41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e46:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127e49:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e51:	f7 75 88             	divl   -0x78(%ebp)
f0127e54:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127e57:	29 d0                	sub    %edx,%eax
f0127e59:	89 c3                	mov    %eax,%ebx
f0127e5b:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127e62:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127e67:	0f b6 d0             	movzbl %al,%edx
f0127e6a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127e6d:	01 d0                	add    %edx,%eax
f0127e6f:	48                   	dec    %eax
f0127e70:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127e76:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127e7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e81:	f7 75 80             	divl   -0x80(%ebp)
f0127e84:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127e8a:	29 d0                	sub    %edx,%eax
f0127e8c:	01 c3                	add    %eax,%ebx
f0127e8e:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127e95:	10 00 00 
f0127e98:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127e9d:	0f b6 c0             	movzbl %al,%eax
f0127ea0:	c1 e0 04             	shl    $0x4,%eax
f0127ea3:	89 c2                	mov    %eax,%edx
f0127ea5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127eab:	01 d0                	add    %edx,%eax
f0127ead:	48                   	dec    %eax
f0127eae:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127eb4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127eba:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ebf:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127ec5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127ecb:	29 d0                	sub    %edx,%eax
f0127ecd:	01 d8                	add    %ebx,%eax
f0127ecf:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127ed4:	39 c1                	cmp    %eax,%ecx
f0127ed6:	74 17                	je     f0127eef <test_kshrink+0x4cc>
f0127ed8:	83 ec 04             	sub    $0x4,%esp
f0127edb:	68 60 a3 13 f0       	push   $0xf013a360
f0127ee0:	68 21 0c 00 00       	push   $0xc21
f0127ee5:	68 7a a2 13 f0       	push   $0xf013a27a
f0127eea:	e8 b7 82 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127eef:	e8 98 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127ef4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ef7:	74 17                	je     f0127f10 <test_kshrink+0x4ed>
f0127ef9:	83 ec 04             	sub    $0x4,%esp
f0127efc:	68 94 a2 13 f0       	push   $0xf013a294
f0127f01:	68 22 0c 00 00       	push   $0xc22
f0127f06:	68 7a a2 13 f0       	push   $0xf013a27a
f0127f0b:	e8 96 82 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f10:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f13:	e8 80 3e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127f18:	29 c3                	sub    %eax,%ebx
f0127f1a:	89 d8                	mov    %ebx,%eax
f0127f1c:	83 f8 01             	cmp    $0x1,%eax
f0127f1f:	74 17                	je     f0127f38 <test_kshrink+0x515>
f0127f21:	83 ec 04             	sub    $0x4,%esp
f0127f24:	68 fc a2 13 f0       	push   $0xf013a2fc
f0127f29:	68 23 0c 00 00       	push   $0xc23
f0127f2e:	68 7a a2 13 f0       	push   $0xf013a27a
f0127f33:	e8 6e 82 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127f38:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0127f3f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127f42:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0127f48:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127f4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f52:	eb 0e                	jmp    f0127f62 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0127f54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f57:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127f5a:	01 d0                	add    %edx,%eax
f0127f5c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127f5f:	ff 45 f4             	incl   -0xc(%ebp)
f0127f62:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127f68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f6b:	7f e7                	jg     f0127f54 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127f6d:	e8 26 3e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0127f72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f75:	e8 12 bd fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0127f7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127f7d:	83 ec 0c             	sub    $0xc,%esp
f0127f80:	68 00 1c 00 00       	push   $0x1c00
f0127f85:	e8 52 f4 fd ff       	call   f01073dc <kmalloc>
f0127f8a:	83 c4 10             	add    $0x10,%esp
f0127f8d:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f93:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0127f99:	89 c1                	mov    %eax,%ecx
f0127f9b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127fa2:	10 00 00 
f0127fa5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127fab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127fb0:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127fb6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fc1:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127fc7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127fcd:	29 d0                	sub    %edx,%eax
f0127fcf:	89 c3                	mov    %eax,%ebx
f0127fd1:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127fd8:	10 00 00 
f0127fdb:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0127fe0:	0f b6 d0             	movzbl %al,%edx
f0127fe3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127fe9:	01 d0                	add    %edx,%eax
f0127feb:	48                   	dec    %eax
f0127fec:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127ff2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ffd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128003:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128009:	29 d0                	sub    %edx,%eax
f012800b:	01 c3                	add    %eax,%ebx
f012800d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128014:	10 00 00 
f0128017:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012801c:	0f b6 c0             	movzbl %al,%eax
f012801f:	c1 e0 04             	shl    $0x4,%eax
f0128022:	89 c2                	mov    %eax,%edx
f0128024:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012802a:	01 d0                	add    %edx,%eax
f012802c:	48                   	dec    %eax
f012802d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128033:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128039:	ba 00 00 00 00       	mov    $0x0,%edx
f012803e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128044:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012804a:	29 d0                	sub    %edx,%eax
f012804c:	01 d8                	add    %ebx,%eax
f012804e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128053:	39 c1                	cmp    %eax,%ecx
f0128055:	74 17                	je     f012806e <test_kshrink+0x64b>
f0128057:	83 ec 04             	sub    $0x4,%esp
f012805a:	68 60 a3 13 f0       	push   $0xf013a360
f012805f:	68 2f 0c 00 00       	push   $0xc2f
f0128064:	68 7a a2 13 f0       	push   $0xf013a27a
f0128069:	e8 38 81 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012806e:	e8 19 bc fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128073:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128076:	74 17                	je     f012808f <test_kshrink+0x66c>
f0128078:	83 ec 04             	sub    $0x4,%esp
f012807b:	68 94 a2 13 f0       	push   $0xf013a294
f0128080:	68 30 0c 00 00       	push   $0xc30
f0128085:	68 7a a2 13 f0       	push   $0xf013a27a
f012808a:	e8 17 81 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012808f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128092:	e8 01 3d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128097:	29 c3                	sub    %eax,%ebx
f0128099:	89 d8                	mov    %ebx,%eax
f012809b:	83 f8 02             	cmp    $0x2,%eax
f012809e:	74 17                	je     f01280b7 <test_kshrink+0x694>
f01280a0:	83 ec 04             	sub    $0x4,%esp
f01280a3:	68 fc a2 13 f0       	push   $0xf013a2fc
f01280a8:	68 31 0c 00 00       	push   $0xc31
f01280ad:	68 7a a2 13 f0       	push   $0xf013a27a
f01280b2:	e8 ef 80 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01280b7:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01280be:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01280c1:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01280c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01280ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01280d1:	eb 0e                	jmp    f01280e1 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01280d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01280d6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01280d9:	01 d0                	add    %edx,%eax
f01280db:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01280de:	ff 45 f4             	incl   -0xc(%ebp)
f01280e1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01280e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01280ea:	7f e7                	jg     f01280d3 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01280ec:	e8 a7 3c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01280f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280f4:	e8 93 bb fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01280f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01280fc:	83 ec 0c             	sub    $0xc,%esp
f01280ff:	68 00 fc 2f 00       	push   $0x2ffc00
f0128104:	e8 d3 f2 fd ff       	call   f01073dc <kmalloc>
f0128109:	83 c4 10             	add    $0x10,%esp
f012810c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128112:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128118:	89 c1                	mov    %eax,%ecx
f012811a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128121:	10 00 00 
f0128124:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012812a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012812f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128135:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012813b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128140:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128146:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012814c:	29 d0                	sub    %edx,%eax
f012814e:	89 c3                	mov    %eax,%ebx
f0128150:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128157:	10 00 00 
f012815a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012815f:	0f b6 d0             	movzbl %al,%edx
f0128162:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128168:	01 d0                	add    %edx,%eax
f012816a:	48                   	dec    %eax
f012816b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128171:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128177:	ba 00 00 00 00       	mov    $0x0,%edx
f012817c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128182:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128188:	29 d0                	sub    %edx,%eax
f012818a:	01 c3                	add    %eax,%ebx
f012818c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128193:	10 00 00 
f0128196:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012819b:	0f b6 c0             	movzbl %al,%eax
f012819e:	c1 e0 04             	shl    $0x4,%eax
f01281a1:	89 c2                	mov    %eax,%edx
f01281a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01281a9:	01 d0                	add    %edx,%eax
f01281ab:	48                   	dec    %eax
f01281ac:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01281b2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01281bd:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01281c3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281c9:	29 d0                	sub    %edx,%eax
f01281cb:	01 d8                	add    %ebx,%eax
f01281cd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01281d2:	39 c1                	cmp    %eax,%ecx
f01281d4:	74 17                	je     f01281ed <test_kshrink+0x7ca>
f01281d6:	83 ec 04             	sub    $0x4,%esp
f01281d9:	68 60 a3 13 f0       	push   $0xf013a360
f01281de:	68 3d 0c 00 00       	push   $0xc3d
f01281e3:	68 7a a2 13 f0       	push   $0xf013a27a
f01281e8:	e8 b9 7f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281ed:	e8 9a ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01281f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01281f5:	74 17                	je     f012820e <test_kshrink+0x7eb>
f01281f7:	83 ec 04             	sub    $0x4,%esp
f01281fa:	68 94 a2 13 f0       	push   $0xf013a294
f01281ff:	68 3e 0c 00 00       	push   $0xc3e
f0128204:	68 7a a2 13 f0       	push   $0xf013a27a
f0128209:	e8 98 7f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012820e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128211:	e8 82 3b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128216:	29 c3                	sub    %eax,%ebx
f0128218:	89 d8                	mov    %ebx,%eax
f012821a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012821f:	74 17                	je     f0128238 <test_kshrink+0x815>
f0128221:	83 ec 04             	sub    $0x4,%esp
f0128224:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128229:	68 3f 0c 00 00       	push   $0xc3f
f012822e:	68 7a a2 13 f0       	push   $0xf013a27a
f0128233:	e8 6e 7f fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128238:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f012823f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128242:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128248:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012824b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128252:	eb 0e                	jmp    f0128262 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128254:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128257:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012825a:	01 d0                	add    %edx,%eax
f012825c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012825f:	ff 45 f4             	incl   -0xc(%ebp)
f0128262:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128268:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012826b:	7f e7                	jg     f0128254 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012826d:	e8 26 3b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128272:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128275:	e8 12 ba fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012827a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012827d:	83 ec 0c             	sub    $0xc,%esp
f0128280:	68 00 00 60 00       	push   $0x600000
f0128285:	e8 52 f1 fd ff       	call   f01073dc <kmalloc>
f012828a:	83 c4 10             	add    $0x10,%esp
f012828d:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128293:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128299:	89 c1                	mov    %eax,%ecx
f012829b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01282a2:	10 00 00 
f01282a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01282ab:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01282b0:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01282b6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01282bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01282c1:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01282c7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01282cd:	29 d0                	sub    %edx,%eax
f01282cf:	89 c3                	mov    %eax,%ebx
f01282d1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01282d8:	10 00 00 
f01282db:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01282e0:	0f b6 d0             	movzbl %al,%edx
f01282e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01282e9:	01 d0                	add    %edx,%eax
f01282eb:	48                   	dec    %eax
f01282ec:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01282f2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01282f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01282fd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128303:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128309:	29 d0                	sub    %edx,%eax
f012830b:	01 c3                	add    %eax,%ebx
f012830d:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128314:	10 00 00 
f0128317:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012831c:	0f b6 c0             	movzbl %al,%eax
f012831f:	c1 e0 04             	shl    $0x4,%eax
f0128322:	89 c2                	mov    %eax,%edx
f0128324:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012832a:	01 d0                	add    %edx,%eax
f012832c:	48                   	dec    %eax
f012832d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128333:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128339:	ba 00 00 00 00       	mov    $0x0,%edx
f012833e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128344:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012834a:	29 d0                	sub    %edx,%eax
f012834c:	01 d8                	add    %ebx,%eax
f012834e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128353:	39 c1                	cmp    %eax,%ecx
f0128355:	74 17                	je     f012836e <test_kshrink+0x94b>
f0128357:	83 ec 04             	sub    $0x4,%esp
f012835a:	68 60 a3 13 f0       	push   $0xf013a360
f012835f:	68 4b 0c 00 00       	push   $0xc4b
f0128364:	68 7a a2 13 f0       	push   $0xf013a27a
f0128369:	e8 38 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012836e:	e8 19 b9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128373:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128376:	74 17                	je     f012838f <test_kshrink+0x96c>
f0128378:	83 ec 04             	sub    $0x4,%esp
f012837b:	68 94 a2 13 f0       	push   $0xf013a294
f0128380:	68 4c 0c 00 00       	push   $0xc4c
f0128385:	68 7a a2 13 f0       	push   $0xf013a27a
f012838a:	e8 17 7e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012838f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128392:	e8 01 3a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128397:	29 c3                	sub    %eax,%ebx
f0128399:	89 d8                	mov    %ebx,%eax
f012839b:	3d 00 06 00 00       	cmp    $0x600,%eax
f01283a0:	74 17                	je     f01283b9 <test_kshrink+0x996>
f01283a2:	83 ec 04             	sub    $0x4,%esp
f01283a5:	68 fc a2 13 f0       	push   $0xf013a2fc
f01283aa:	68 4d 0c 00 00       	push   $0xc4d
f01283af:	68 7a a2 13 f0       	push   $0xf013a27a
f01283b4:	e8 ed 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01283b9:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f01283c0:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01283c3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01283c9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01283cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01283d6:	eb 1a                	jmp    f01283f2 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01283d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01283db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01283e2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01283e8:	01 c2                	add    %eax,%edx
f01283ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01283ed:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01283ef:	ff 45 f4             	incl   -0xc(%ebp)
f01283f2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01283f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01283fb:	7d db                	jge    f01283d8 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01283fd:	e8 96 39 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128402:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128405:	e8 82 b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012840a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f012840d:	83 ec 0c             	sub    $0xc,%esp
f0128410:	68 00 00 50 00       	push   $0x500000
f0128415:	e8 44 f0 fd ff       	call   f010745e <kshrink>
f012841a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012841d:	e8 6a b8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128422:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128425:	74 19                	je     f0128440 <test_kshrink+0xa1d>
f0128427:	68 14 b0 13 f0       	push   $0xf013b014
f012842c:	68 45 b0 13 f0       	push   $0xf013b045
f0128431:	68 5d 0c 00 00       	push   $0xc5d
f0128436:	68 7a a2 13 f0       	push   $0xf013a27a
f012843b:	e8 66 7d fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128440:	e8 53 39 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128445:	89 c2                	mov    %eax,%edx
f0128447:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012844a:	29 c2                	sub    %eax,%edx
f012844c:	89 d0                	mov    %edx,%eax
f012844e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128453:	74 19                	je     f012846e <test_kshrink+0xa4b>
f0128455:	68 20 b1 13 f0       	push   $0xf013b120
f012845a:	68 45 b0 13 f0       	push   $0xf013b045
f012845f:	68 5e 0c 00 00       	push   $0xc5e
f0128464:	68 7a a2 13 f0       	push   $0xf013a27a
f0128469:	e8 38 7d fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f012846e:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128475:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128478:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012847f:	eb 37                	jmp    f01284b8 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128481:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128484:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012848b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128491:	01 d0                	add    %edx,%eax
f0128493:	8b 10                	mov    (%eax),%edx
f0128495:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128498:	39 c2                	cmp    %eax,%edx
f012849a:	74 19                	je     f01284b5 <test_kshrink+0xa92>
f012849c:	68 50 b1 13 f0       	push   $0xf013b150
f01284a1:	68 45 b0 13 f0       	push   $0xf013b045
f01284a6:	68 66 0c 00 00       	push   $0xc66
f01284ab:	68 7a a2 13 f0       	push   $0xf013a27a
f01284b0:	e8 f1 7c fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f01284b5:	ff 45 f4             	incl   -0xc(%ebp)
f01284b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01284bb:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01284c1:	7e be                	jle    f0128481 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01284c3:	83 ec 0c             	sub    $0xc,%esp
f01284c6:	6a 03                	push   $0x3
f01284c8:	e8 74 3d fe ff       	call   f010c241 <sys_bypassPageFault>
f01284cd:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01284d0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01284d6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f01284d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284dc:	05 00 00 50 00       	add    $0x500000,%eax
f01284e1:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01284e4:	e8 46 3d fe ff       	call   f010c22f <sys_rcr2>
f01284e9:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01284ec:	81 c2 00 00 50 00    	add    $0x500000,%edx
f01284f2:	39 d0                	cmp    %edx,%eax
f01284f4:	74 19                	je     f012850f <test_kshrink+0xaec>
f01284f6:	68 5c b1 13 f0       	push   $0xf013b15c
f01284fb:	68 45 b0 13 f0       	push   $0xf013b045
f0128500:	68 6f 0c 00 00       	push   $0xc6f
f0128505:	68 7a a2 13 f0       	push   $0xf013a27a
f012850a:	e8 97 7c fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f012850f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128512:	05 00 10 50 00       	add    $0x501000,%eax
f0128517:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f012851a:	e8 10 3d fe ff       	call   f010c22f <sys_rcr2>
f012851f:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128522:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128528:	39 d0                	cmp    %edx,%eax
f012852a:	74 19                	je     f0128545 <test_kshrink+0xb22>
f012852c:	68 84 b1 13 f0       	push   $0xf013b184
f0128531:	68 45 b0 13 f0       	push   $0xf013b045
f0128536:	68 72 0c 00 00       	push   $0xc72
f012853b:	68 7a a2 13 f0       	push   $0xf013a27a
f0128540:	e8 61 7c fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f0128545:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128548:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f012854d:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128550:	e8 da 3c fe ff       	call   f010c22f <sys_rcr2>
f0128555:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128558:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f012855e:	39 d0                	cmp    %edx,%eax
f0128560:	74 19                	je     f012857b <test_kshrink+0xb58>
f0128562:	68 b0 b1 13 f0       	push   $0xf013b1b0
f0128567:	68 45 b0 13 f0       	push   $0xf013b045
f012856c:	68 75 0c 00 00       	push   $0xc75
f0128571:	68 7a a2 13 f0       	push   $0xf013a27a
f0128576:	e8 2b 7c fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012857b:	83 ec 0c             	sub    $0xc,%esp
f012857e:	6a 00                	push   $0x0
f0128580:	e8 bc 3c fe ff       	call   f010c241 <sys_bypassPageFault>
f0128585:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128588:	e8 0b 38 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012858d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128590:	e8 f7 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128595:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128598:	83 ec 0c             	sub    $0xc,%esp
f012859b:	68 00 00 20 00       	push   $0x200000
f01285a0:	e8 b9 ee fd ff       	call   f010745e <kshrink>
f01285a5:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01285a8:	e8 df b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01285ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285b0:	74 19                	je     f01285cb <test_kshrink+0xba8>
f01285b2:	68 14 b0 13 f0       	push   $0xf013b014
f01285b7:	68 45 b0 13 f0       	push   $0xf013b045
f01285bc:	68 82 0c 00 00       	push   $0xc82
f01285c1:	68 7a a2 13 f0       	push   $0xf013a27a
f01285c6:	e8 db 7b fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01285cb:	e8 c8 37 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01285d0:	89 c2                	mov    %eax,%edx
f01285d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01285d5:	29 c2                	sub    %eax,%edx
f01285d7:	89 d0                	mov    %edx,%eax
f01285d9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01285de:	74 19                	je     f01285f9 <test_kshrink+0xbd6>
f01285e0:	68 dc b1 13 f0       	push   $0xf013b1dc
f01285e5:	68 45 b0 13 f0       	push   $0xf013b045
f01285ea:	68 83 0c 00 00       	push   $0xc83
f01285ef:	68 7a a2 13 f0       	push   $0xf013a27a
f01285f4:	e8 ad 7b fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01285f9:	e8 9a 37 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01285fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128601:	e8 86 b6 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128606:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128609:	83 ec 0c             	sub    $0xc,%esp
f012860c:	68 00 00 40 00       	push   $0x400000
f0128611:	e8 c6 ed fd ff       	call   f01073dc <kmalloc>
f0128616:	83 c4 10             	add    $0x10,%esp
f0128619:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f012861f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128626:	10 00 00 
f0128629:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012862f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128634:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012863a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128640:	ba 00 00 00 00       	mov    $0x0,%edx
f0128645:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012864b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128651:	29 d0                	sub    %edx,%eax
f0128653:	89 c1                	mov    %eax,%ecx
f0128655:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012865c:	10 00 00 
f012865f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128664:	0f b6 d0             	movzbl %al,%edx
f0128667:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012866d:	01 d0                	add    %edx,%eax
f012866f:	48                   	dec    %eax
f0128670:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128676:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012867c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128681:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128687:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012868d:	29 d0                	sub    %edx,%eax
f012868f:	01 c1                	add    %eax,%ecx
f0128691:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128698:	10 00 00 
f012869b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01286a0:	0f b6 c0             	movzbl %al,%eax
f01286a3:	c1 e0 04             	shl    $0x4,%eax
f01286a6:	89 c2                	mov    %eax,%edx
f01286a8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01286ae:	01 d0                	add    %edx,%eax
f01286b0:	48                   	dec    %eax
f01286b1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01286b7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01286bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01286c2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01286c8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01286ce:	29 d0                	sub    %edx,%eax
f01286d0:	01 c8                	add    %ecx,%eax
f01286d2:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f01286d8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01286de:	83 ec 04             	sub    $0x4,%esp
f01286e1:	52                   	push   %edx
f01286e2:	50                   	push   %eax
f01286e3:	68 0c b2 13 f0       	push   $0xf013b20c
f01286e8:	e8 40 85 fd ff       	call   f0100c2d <cprintf>
f01286ed:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f01286f0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01286f6:	89 c1                	mov    %eax,%ecx
f01286f8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01286ff:	10 00 00 
f0128702:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128708:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012870d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128713:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128719:	ba 00 00 00 00       	mov    $0x0,%edx
f012871e:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128724:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012872a:	29 d0                	sub    %edx,%eax
f012872c:	89 c3                	mov    %eax,%ebx
f012872e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128735:	10 00 00 
f0128738:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012873d:	0f b6 d0             	movzbl %al,%edx
f0128740:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128746:	01 d0                	add    %edx,%eax
f0128748:	48                   	dec    %eax
f0128749:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012874f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128755:	ba 00 00 00 00       	mov    $0x0,%edx
f012875a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128760:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128766:	29 d0                	sub    %edx,%eax
f0128768:	01 c3                	add    %eax,%ebx
f012876a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128771:	10 00 00 
f0128774:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128779:	0f b6 c0             	movzbl %al,%eax
f012877c:	c1 e0 04             	shl    $0x4,%eax
f012877f:	89 c2                	mov    %eax,%edx
f0128781:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128787:	01 d0                	add    %edx,%eax
f0128789:	48                   	dec    %eax
f012878a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128790:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128796:	ba 00 00 00 00       	mov    $0x0,%edx
f012879b:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01287a1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01287a7:	29 d0                	sub    %edx,%eax
f01287a9:	01 d8                	add    %ebx,%eax
f01287ab:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f01287b0:	39 c1                	cmp    %eax,%ecx
f01287b2:	74 17                	je     f01287cb <test_kshrink+0xda8>
f01287b4:	83 ec 04             	sub    $0x4,%esp
f01287b7:	68 28 b2 13 f0       	push   $0xf013b228
f01287bc:	68 8e 0c 00 00       	push   $0xc8e
f01287c1:	68 7a a2 13 f0       	push   $0xf013a27a
f01287c6:	e8 db 79 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287cb:	e8 bc b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01287d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287d3:	74 17                	je     f01287ec <test_kshrink+0xdc9>
f01287d5:	83 ec 04             	sub    $0x4,%esp
f01287d8:	68 94 a2 13 f0       	push   $0xf013a294
f01287dd:	68 8f 0c 00 00       	push   $0xc8f
f01287e2:	68 7a a2 13 f0       	push   $0xf013a27a
f01287e7:	e8 ba 79 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287ec:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287ef:	e8 a4 35 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01287f4:	29 c3                	sub    %eax,%ebx
f01287f6:	89 d8                	mov    %ebx,%eax
f01287f8:	3d 00 04 00 00       	cmp    $0x400,%eax
f01287fd:	74 17                	je     f0128816 <test_kshrink+0xdf3>
f01287ff:	83 ec 04             	sub    $0x4,%esp
f0128802:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128807:	68 90 0c 00 00       	push   $0xc90
f012880c:	68 7a a2 13 f0       	push   $0xf013a27a
f0128811:	e8 90 79 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0128816:	e8 7d 35 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012881b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012881e:	e8 69 b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128823:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128826:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012882c:	83 ec 0c             	sub    $0xc,%esp
f012882f:	50                   	push   %eax
f0128830:	e8 c1 eb fd ff       	call   f01073f6 <kfree>
f0128835:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128838:	e8 4f b4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012883d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128840:	74 17                	je     f0128859 <test_kshrink+0xe36>
f0128842:	83 ec 04             	sub    $0x4,%esp
f0128845:	68 94 a2 13 f0       	push   $0xf013a294
f012884a:	68 9a 0c 00 00       	push   $0xc9a
f012884f:	68 7a a2 13 f0       	push   $0xf013a27a
f0128854:	e8 4d 79 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128859:	e8 3a 35 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012885e:	89 c2                	mov    %eax,%edx
f0128860:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128863:	29 c2                	sub    %eax,%edx
f0128865:	89 d0                	mov    %edx,%eax
f0128867:	3d 00 02 00 00       	cmp    $0x200,%eax
f012886c:	74 17                	je     f0128885 <test_kshrink+0xe62>
f012886e:	83 ec 04             	sub    $0x4,%esp
f0128871:	68 2c ab 13 f0       	push   $0xf013ab2c
f0128876:	68 9b 0c 00 00       	push   $0xc9b
f012887b:	68 7a a2 13 f0       	push   $0xf013a27a
f0128880:	e8 21 79 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128885:	e8 0e 35 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012888a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012888d:	e8 fa b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128892:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0128895:	83 ec 0c             	sub    $0xc,%esp
f0128898:	68 00 b0 3f 00       	push   $0x3fb000
f012889d:	e8 bc eb fd ff       	call   f010745e <kshrink>
f01288a2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01288a5:	e8 e2 b3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01288aa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288ad:	74 19                	je     f01288c8 <test_kshrink+0xea5>
f01288af:	68 14 b0 13 f0       	push   $0xf013b014
f01288b4:	68 45 b0 13 f0       	push   $0xf013b045
f01288b9:	68 a5 0c 00 00       	push   $0xca5
f01288be:	68 7a a2 13 f0       	push   $0xf013a27a
f01288c3:	e8 de 78 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f01288c8:	e8 cb 34 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01288cd:	89 c2                	mov    %eax,%edx
f01288cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01288d2:	29 c2                	sub    %eax,%edx
f01288d4:	89 d0                	mov    %edx,%eax
f01288d6:	83 f8 05             	cmp    $0x5,%eax
f01288d9:	74 19                	je     f01288f4 <test_kshrink+0xed1>
f01288db:	68 7c b2 13 f0       	push   $0xf013b27c
f01288e0:	68 45 b0 13 f0       	push   $0xf013b045
f01288e5:	68 a6 0c 00 00       	push   $0xca6
f01288ea:	68 7a a2 13 f0       	push   $0xf013a27a
f01288ef:	e8 b2 78 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01288f4:	83 ec 0c             	sub    $0xc,%esp
f01288f7:	68 d8 af 13 f0       	push   $0xf013afd8
f01288fc:	e8 2c 83 fd ff       	call   f0100c2d <cprintf>
f0128901:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128904:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128909:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012890c:	5b                   	pop    %ebx
f012890d:	5f                   	pop    %edi
f012890e:	5d                   	pop    %ebp
f012890f:	c3                   	ret    

f0128910 <test_kfreelast>:


int test_kfreelast()
{
f0128910:	55                   	push   %ebp
f0128911:	89 e5                	mov    %esp,%ebp
f0128913:	57                   	push   %edi
f0128914:	53                   	push   %ebx
f0128915:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012891b:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012891f:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0128923:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0128929:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012892f:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128936:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012893d:	e8 56 34 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128942:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128945:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012894b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128950:	b8 00 00 00 00       	mov    $0x0,%eax
f0128955:	89 d7                	mov    %edx,%edi
f0128957:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0128959:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012895f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128964:	b8 00 00 00 00       	mov    $0x0,%eax
f0128969:	89 d7                	mov    %edx,%edi
f012896b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012896d:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0128973:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128978:	b8 00 00 00 00       	mov    $0x0,%eax
f012897d:	89 d7                	mov    %edx,%edi
f012897f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128981:	e8 12 34 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128986:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128989:	e8 fe b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012898e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128991:	83 ec 0c             	sub    $0xc,%esp
f0128994:	68 00 fc 1f 00       	push   $0x1ffc00
f0128999:	e8 3e ea fd ff       	call   f01073dc <kmalloc>
f012899e:	83 c4 10             	add    $0x10,%esp
f01289a1:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289a7:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01289ad:	89 c1                	mov    %eax,%ecx
f01289af:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01289b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01289b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01289be:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01289c1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01289c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c9:	f7 75 cc             	divl   -0x34(%ebp)
f01289cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01289cf:	29 d0                	sub    %edx,%eax
f01289d1:	89 c3                	mov    %eax,%ebx
f01289d3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01289da:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01289df:	0f b6 d0             	movzbl %al,%edx
f01289e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01289e5:	01 d0                	add    %edx,%eax
f01289e7:	48                   	dec    %eax
f01289e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01289eb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01289ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01289f3:	f7 75 c4             	divl   -0x3c(%ebp)
f01289f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01289f9:	29 d0                	sub    %edx,%eax
f01289fb:	01 c3                	add    %eax,%ebx
f01289fd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128a04:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128a09:	0f b6 c0             	movzbl %al,%eax
f0128a0c:	c1 e0 04             	shl    $0x4,%eax
f0128a0f:	89 c2                	mov    %eax,%edx
f0128a11:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128a14:	01 d0                	add    %edx,%eax
f0128a16:	48                   	dec    %eax
f0128a17:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128a1a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a22:	f7 75 bc             	divl   -0x44(%ebp)
f0128a25:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128a28:	29 d0                	sub    %edx,%eax
f0128a2a:	01 d8                	add    %ebx,%eax
f0128a2c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128a31:	39 c1                	cmp    %eax,%ecx
f0128a33:	74 17                	je     f0128a4c <test_kfreelast+0x13c>
f0128a35:	83 ec 04             	sub    $0x4,%esp
f0128a38:	68 60 a3 13 f0       	push   $0xf013a360
f0128a3d:	68 ca 0c 00 00       	push   $0xcca
f0128a42:	68 7a a2 13 f0       	push   $0xf013a27a
f0128a47:	e8 5a 77 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a4c:	e8 3b b2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128a51:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a54:	74 17                	je     f0128a6d <test_kfreelast+0x15d>
f0128a56:	83 ec 04             	sub    $0x4,%esp
f0128a59:	68 94 a2 13 f0       	push   $0xf013a294
f0128a5e:	68 cb 0c 00 00       	push   $0xccb
f0128a63:	68 7a a2 13 f0       	push   $0xf013a27a
f0128a68:	e8 39 77 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a6d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128a70:	e8 23 33 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128a75:	29 c3                	sub    %eax,%ebx
f0128a77:	89 d8                	mov    %ebx,%eax
f0128a79:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128a7e:	74 17                	je     f0128a97 <test_kfreelast+0x187>
f0128a80:	83 ec 04             	sub    $0x4,%esp
f0128a83:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128a88:	68 cc 0c 00 00       	push   $0xccc
f0128a8d:	68 7a a2 13 f0       	push   $0xf013a27a
f0128a92:	e8 0f 77 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128a97:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0128a9e:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128aa1:	e8 f2 32 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128aa6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128aa9:	e8 de b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128aae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128ab1:	83 ec 0c             	sub    $0xc,%esp
f0128ab4:	68 00 fc 1f 00       	push   $0x1ffc00
f0128ab9:	e8 1e e9 fd ff       	call   f01073dc <kmalloc>
f0128abe:	83 c4 10             	add    $0x10,%esp
f0128ac1:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ac7:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0128acd:	89 c1                	mov    %eax,%ecx
f0128acf:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128ad6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128ad9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ade:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128ae1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128ae4:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ae9:	f7 75 b4             	divl   -0x4c(%ebp)
f0128aec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128aef:	29 d0                	sub    %edx,%eax
f0128af1:	89 c3                	mov    %eax,%ebx
f0128af3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128afa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128aff:	0f b6 d0             	movzbl %al,%edx
f0128b02:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128b05:	01 d0                	add    %edx,%eax
f0128b07:	48                   	dec    %eax
f0128b08:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128b0b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128b0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b13:	f7 75 ac             	divl   -0x54(%ebp)
f0128b16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128b19:	29 d0                	sub    %edx,%eax
f0128b1b:	01 c3                	add    %eax,%ebx
f0128b1d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128b24:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128b29:	0f b6 c0             	movzbl %al,%eax
f0128b2c:	c1 e0 04             	shl    $0x4,%eax
f0128b2f:	89 c2                	mov    %eax,%edx
f0128b31:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128b34:	01 d0                	add    %edx,%eax
f0128b36:	48                   	dec    %eax
f0128b37:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128b3a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128b3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b42:	f7 75 a4             	divl   -0x5c(%ebp)
f0128b45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128b48:	29 d0                	sub    %edx,%eax
f0128b4a:	01 d8                	add    %ebx,%eax
f0128b4c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128b51:	39 c1                	cmp    %eax,%ecx
f0128b53:	74 17                	je     f0128b6c <test_kfreelast+0x25c>
f0128b55:	83 ec 04             	sub    $0x4,%esp
f0128b58:	68 60 a3 13 f0       	push   $0xf013a360
f0128b5d:	68 d3 0c 00 00       	push   $0xcd3
f0128b62:	68 7a a2 13 f0       	push   $0xf013a27a
f0128b67:	e8 3a 76 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b6c:	e8 1b b1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128b71:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128b74:	74 17                	je     f0128b8d <test_kfreelast+0x27d>
f0128b76:	83 ec 04             	sub    $0x4,%esp
f0128b79:	68 94 a2 13 f0       	push   $0xf013a294
f0128b7e:	68 d4 0c 00 00       	push   $0xcd4
f0128b83:	68 7a a2 13 f0       	push   $0xf013a27a
f0128b88:	e8 19 76 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b8d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128b90:	e8 03 32 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128b95:	29 c3                	sub    %eax,%ebx
f0128b97:	89 d8                	mov    %ebx,%eax
f0128b99:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128b9e:	74 17                	je     f0128bb7 <test_kfreelast+0x2a7>
f0128ba0:	83 ec 04             	sub    $0x4,%esp
f0128ba3:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128ba8:	68 d5 0c 00 00       	push   $0xcd5
f0128bad:	68 7a a2 13 f0       	push   $0xf013a27a
f0128bb2:	e8 ef 75 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128bb7:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0128bbe:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128bc1:	e8 d2 31 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128bc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bc9:	e8 be b0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128bce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128bd1:	83 ec 0c             	sub    $0xc,%esp
f0128bd4:	68 00 08 00 00       	push   $0x800
f0128bd9:	e8 fe e7 fd ff       	call   f01073dc <kmalloc>
f0128bde:	83 c4 10             	add    $0x10,%esp
f0128be1:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128be7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128bed:	89 c1                	mov    %eax,%ecx
f0128bef:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128bf6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128bf9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128bfe:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128c01:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128c04:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c09:	f7 75 9c             	divl   -0x64(%ebp)
f0128c0c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128c0f:	29 d0                	sub    %edx,%eax
f0128c11:	89 c3                	mov    %eax,%ebx
f0128c13:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128c1a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128c1f:	0f b6 d0             	movzbl %al,%edx
f0128c22:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128c25:	01 d0                	add    %edx,%eax
f0128c27:	48                   	dec    %eax
f0128c28:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128c2b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128c2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c33:	f7 75 94             	divl   -0x6c(%ebp)
f0128c36:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128c39:	29 d0                	sub    %edx,%eax
f0128c3b:	01 c3                	add    %eax,%ebx
f0128c3d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0128c44:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128c49:	0f b6 c0             	movzbl %al,%eax
f0128c4c:	c1 e0 04             	shl    $0x4,%eax
f0128c4f:	89 c2                	mov    %eax,%edx
f0128c51:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c54:	01 d0                	add    %edx,%eax
f0128c56:	48                   	dec    %eax
f0128c57:	89 45 88             	mov    %eax,-0x78(%ebp)
f0128c5a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128c5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c62:	f7 75 8c             	divl   -0x74(%ebp)
f0128c65:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128c68:	29 d0                	sub    %edx,%eax
f0128c6a:	01 d8                	add    %ebx,%eax
f0128c6c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128c71:	39 c1                	cmp    %eax,%ecx
f0128c73:	74 17                	je     f0128c8c <test_kfreelast+0x37c>
f0128c75:	83 ec 04             	sub    $0x4,%esp
f0128c78:	68 60 a3 13 f0       	push   $0xf013a360
f0128c7d:	68 dc 0c 00 00       	push   $0xcdc
f0128c82:	68 7a a2 13 f0       	push   $0xf013a27a
f0128c87:	e8 1a 75 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c8c:	e8 fb af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128c91:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c94:	74 17                	je     f0128cad <test_kfreelast+0x39d>
f0128c96:	83 ec 04             	sub    $0x4,%esp
f0128c99:	68 94 a2 13 f0       	push   $0xf013a294
f0128c9e:	68 dd 0c 00 00       	push   $0xcdd
f0128ca3:	68 7a a2 13 f0       	push   $0xf013a27a
f0128ca8:	e8 f9 74 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128cad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128cb0:	e8 e3 30 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128cb5:	29 c3                	sub    %eax,%ebx
f0128cb7:	89 d8                	mov    %ebx,%eax
f0128cb9:	83 f8 01             	cmp    $0x1,%eax
f0128cbc:	74 17                	je     f0128cd5 <test_kfreelast+0x3c5>
f0128cbe:	83 ec 04             	sub    $0x4,%esp
f0128cc1:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128cc6:	68 de 0c 00 00       	push   $0xcde
f0128ccb:	68 7a a2 13 f0       	push   $0xf013a27a
f0128cd0:	e8 d1 74 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128cd5:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0128cdc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128cdf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128ce5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128ce8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128cef:	eb 0e                	jmp    f0128cff <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f0128cf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128cf4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128cf7:	01 d0                	add    %edx,%eax
f0128cf9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128cfc:	ff 45 f4             	incl   -0xc(%ebp)
f0128cff:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0128d05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d08:	7f e7                	jg     f0128cf1 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d0a:	e8 89 30 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128d0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d12:	e8 75 af fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128d17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128d1a:	83 ec 0c             	sub    $0xc,%esp
f0128d1d:	68 00 08 00 00       	push   $0x800
f0128d22:	e8 b5 e6 fd ff       	call   f01073dc <kmalloc>
f0128d27:	83 c4 10             	add    $0x10,%esp
f0128d2a:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d30:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0128d36:	89 c1                	mov    %eax,%ecx
f0128d38:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128d3f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128d42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d47:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128d4d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d53:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d58:	f7 75 80             	divl   -0x80(%ebp)
f0128d5b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128d61:	29 d0                	sub    %edx,%eax
f0128d63:	89 c3                	mov    %eax,%ebx
f0128d65:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128d6c:	10 00 00 
f0128d6f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128d74:	0f b6 d0             	movzbl %al,%edx
f0128d77:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128d7d:	01 d0                	add    %edx,%eax
f0128d7f:	48                   	dec    %eax
f0128d80:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128d86:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128d8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d91:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128d97:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128d9d:	29 d0                	sub    %edx,%eax
f0128d9f:	01 c3                	add    %eax,%ebx
f0128da1:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128da8:	10 00 00 
f0128dab:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128db0:	0f b6 c0             	movzbl %al,%eax
f0128db3:	c1 e0 04             	shl    $0x4,%eax
f0128db6:	89 c2                	mov    %eax,%edx
f0128db8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128dbe:	01 d0                	add    %edx,%eax
f0128dc0:	48                   	dec    %eax
f0128dc1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128dc7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128dcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dd2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128dd8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128dde:	29 d0                	sub    %edx,%eax
f0128de0:	01 d8                	add    %ebx,%eax
f0128de2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128de7:	39 c1                	cmp    %eax,%ecx
f0128de9:	74 17                	je     f0128e02 <test_kfreelast+0x4f2>
f0128deb:	83 ec 04             	sub    $0x4,%esp
f0128dee:	68 60 a3 13 f0       	push   $0xf013a360
f0128df3:	68 ea 0c 00 00       	push   $0xcea
f0128df8:	68 7a a2 13 f0       	push   $0xf013a27a
f0128dfd:	e8 a4 73 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e02:	e8 85 ae fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e07:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e0a:	74 17                	je     f0128e23 <test_kfreelast+0x513>
f0128e0c:	83 ec 04             	sub    $0x4,%esp
f0128e0f:	68 94 a2 13 f0       	push   $0xf013a294
f0128e14:	68 eb 0c 00 00       	push   $0xceb
f0128e19:	68 7a a2 13 f0       	push   $0xf013a27a
f0128e1e:	e8 83 73 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e23:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e26:	e8 6d 2f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128e2b:	29 c3                	sub    %eax,%ebx
f0128e2d:	89 d8                	mov    %ebx,%eax
f0128e2f:	83 f8 01             	cmp    $0x1,%eax
f0128e32:	74 17                	je     f0128e4b <test_kfreelast+0x53b>
f0128e34:	83 ec 04             	sub    $0x4,%esp
f0128e37:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128e3c:	68 ec 0c 00 00       	push   $0xcec
f0128e41:	68 7a a2 13 f0       	push   $0xf013a27a
f0128e46:	e8 5b 73 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128e4b:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0128e52:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128e55:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0128e5b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128e5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e65:	eb 0e                	jmp    f0128e75 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f0128e67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e6a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128e6d:	01 d0                	add    %edx,%eax
f0128e6f:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128e72:	ff 45 f4             	incl   -0xc(%ebp)
f0128e75:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0128e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e7e:	7f e7                	jg     f0128e67 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128e80:	e8 13 2f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128e85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e88:	e8 ff ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128e8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128e90:	83 ec 0c             	sub    $0xc,%esp
f0128e93:	68 00 1c 00 00       	push   $0x1c00
f0128e98:	e8 3f e5 fd ff       	call   f01073dc <kmalloc>
f0128e9d:	83 c4 10             	add    $0x10,%esp
f0128ea0:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ea6:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0128eac:	89 c1                	mov    %eax,%ecx
f0128eae:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128eb5:	10 00 00 
f0128eb8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128ebe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ec3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128ec9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128ecf:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ed4:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128eda:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128ee0:	29 d0                	sub    %edx,%eax
f0128ee2:	89 c3                	mov    %eax,%ebx
f0128ee4:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128eeb:	10 00 00 
f0128eee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128ef3:	0f b6 d0             	movzbl %al,%edx
f0128ef6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128efc:	01 d0                	add    %edx,%eax
f0128efe:	48                   	dec    %eax
f0128eff:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128f05:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128f0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f10:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128f16:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128f1c:	29 d0                	sub    %edx,%eax
f0128f1e:	01 c3                	add    %eax,%ebx
f0128f20:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128f27:	10 00 00 
f0128f2a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0128f2f:	0f b6 c0             	movzbl %al,%eax
f0128f32:	c1 e0 04             	shl    $0x4,%eax
f0128f35:	89 c2                	mov    %eax,%edx
f0128f37:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128f3d:	01 d0                	add    %edx,%eax
f0128f3f:	48                   	dec    %eax
f0128f40:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128f46:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128f4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f51:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128f57:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128f5d:	29 d0                	sub    %edx,%eax
f0128f5f:	01 d8                	add    %ebx,%eax
f0128f61:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128f66:	39 c1                	cmp    %eax,%ecx
f0128f68:	74 17                	je     f0128f81 <test_kfreelast+0x671>
f0128f6a:	83 ec 04             	sub    $0x4,%esp
f0128f6d:	68 60 a3 13 f0       	push   $0xf013a360
f0128f72:	68 f8 0c 00 00       	push   $0xcf8
f0128f77:	68 7a a2 13 f0       	push   $0xf013a27a
f0128f7c:	e8 25 72 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f81:	e8 06 ad fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0128f86:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f89:	74 17                	je     f0128fa2 <test_kfreelast+0x692>
f0128f8b:	83 ec 04             	sub    $0x4,%esp
f0128f8e:	68 94 a2 13 f0       	push   $0xf013a294
f0128f93:	68 f9 0c 00 00       	push   $0xcf9
f0128f98:	68 7a a2 13 f0       	push   $0xf013a27a
f0128f9d:	e8 04 72 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128fa2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128fa5:	e8 ee 2d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0128faa:	29 c3                	sub    %eax,%ebx
f0128fac:	89 d8                	mov    %ebx,%eax
f0128fae:	83 f8 02             	cmp    $0x2,%eax
f0128fb1:	74 17                	je     f0128fca <test_kfreelast+0x6ba>
f0128fb3:	83 ec 04             	sub    $0x4,%esp
f0128fb6:	68 fc a2 13 f0       	push   $0xf013a2fc
f0128fbb:	68 fa 0c 00 00       	push   $0xcfa
f0128fc0:	68 7a a2 13 f0       	push   $0xf013a27a
f0128fc5:	e8 dc 71 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128fca:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f0128fd1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128fd4:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0128fda:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128fdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128fe4:	eb 0e                	jmp    f0128ff4 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0128fe6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128fe9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128fec:	01 d0                	add    %edx,%eax
f0128fee:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128ff1:	ff 45 f4             	incl   -0xc(%ebp)
f0128ff4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0128ffa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ffd:	7f e7                	jg     f0128fe6 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128fff:	e8 94 2d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129004:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129007:	e8 80 ac fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012900c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012900f:	83 ec 0c             	sub    $0xc,%esp
f0129012:	68 00 fc 2f 00       	push   $0x2ffc00
f0129017:	e8 c0 e3 fd ff       	call   f01073dc <kmalloc>
f012901c:	83 c4 10             	add    $0x10,%esp
f012901f:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129025:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012902b:	89 c1                	mov    %eax,%ecx
f012902d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0129034:	10 00 00 
f0129037:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012903d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129042:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129048:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012904e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129053:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129059:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012905f:	29 d0                	sub    %edx,%eax
f0129061:	89 c3                	mov    %eax,%ebx
f0129063:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012906a:	10 00 00 
f012906d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129072:	0f b6 d0             	movzbl %al,%edx
f0129075:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012907b:	01 d0                	add    %edx,%eax
f012907d:	48                   	dec    %eax
f012907e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129084:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012908a:	ba 00 00 00 00       	mov    $0x0,%edx
f012908f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129095:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012909b:	29 d0                	sub    %edx,%eax
f012909d:	01 c3                	add    %eax,%ebx
f012909f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01290a6:	10 00 00 
f01290a9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01290ae:	0f b6 c0             	movzbl %al,%eax
f01290b1:	c1 e0 04             	shl    $0x4,%eax
f01290b4:	89 c2                	mov    %eax,%edx
f01290b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01290bc:	01 d0                	add    %edx,%eax
f01290be:	48                   	dec    %eax
f01290bf:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01290c5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01290cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01290d0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01290d6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01290dc:	29 d0                	sub    %edx,%eax
f01290de:	01 d8                	add    %ebx,%eax
f01290e0:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01290e5:	39 c1                	cmp    %eax,%ecx
f01290e7:	74 17                	je     f0129100 <test_kfreelast+0x7f0>
f01290e9:	83 ec 04             	sub    $0x4,%esp
f01290ec:	68 60 a3 13 f0       	push   $0xf013a360
f01290f1:	68 06 0d 00 00       	push   $0xd06
f01290f6:	68 7a a2 13 f0       	push   $0xf013a27a
f01290fb:	e8 a6 70 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129100:	e8 87 ab fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129105:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129108:	74 17                	je     f0129121 <test_kfreelast+0x811>
f012910a:	83 ec 04             	sub    $0x4,%esp
f012910d:	68 94 a2 13 f0       	push   $0xf013a294
f0129112:	68 07 0d 00 00       	push   $0xd07
f0129117:	68 7a a2 13 f0       	push   $0xf013a27a
f012911c:	e8 85 70 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129121:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129124:	e8 6f 2c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129129:	29 c3                	sub    %eax,%ebx
f012912b:	89 d8                	mov    %ebx,%eax
f012912d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129132:	74 17                	je     f012914b <test_kfreelast+0x83b>
f0129134:	83 ec 04             	sub    $0x4,%esp
f0129137:	68 fc a2 13 f0       	push   $0xf013a2fc
f012913c:	68 08 0d 00 00       	push   $0xd08
f0129141:	68 7a a2 13 f0       	push   $0xf013a27a
f0129146:	e8 5b 70 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012914b:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129152:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129155:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012915b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012915e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129165:	eb 0e                	jmp    f0129175 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012916a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012916d:	01 d0                	add    %edx,%eax
f012916f:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129172:	ff 45 f4             	incl   -0xc(%ebp)
f0129175:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012917b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012917e:	7f e7                	jg     f0129167 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129180:	e8 13 2c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129185:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129188:	e8 ff aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012918d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129190:	83 ec 0c             	sub    $0xc,%esp
f0129193:	68 00 fc 5f 00       	push   $0x5ffc00
f0129198:	e8 3f e2 fd ff       	call   f01073dc <kmalloc>
f012919d:	83 c4 10             	add    $0x10,%esp
f01291a0:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01291a6:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f01291ac:	89 c1                	mov    %eax,%ecx
f01291ae:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01291b5:	10 00 00 
f01291b8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01291be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01291c3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01291c9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01291cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01291d4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01291da:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01291e0:	29 d0                	sub    %edx,%eax
f01291e2:	89 c3                	mov    %eax,%ebx
f01291e4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01291eb:	10 00 00 
f01291ee:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01291f3:	0f b6 d0             	movzbl %al,%edx
f01291f6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01291fc:	01 d0                	add    %edx,%eax
f01291fe:	48                   	dec    %eax
f01291ff:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129205:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012920b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129210:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129216:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012921c:	29 d0                	sub    %edx,%eax
f012921e:	01 c3                	add    %eax,%ebx
f0129220:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129227:	10 00 00 
f012922a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012922f:	0f b6 c0             	movzbl %al,%eax
f0129232:	c1 e0 04             	shl    $0x4,%eax
f0129235:	89 c2                	mov    %eax,%edx
f0129237:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012923d:	01 d0                	add    %edx,%eax
f012923f:	48                   	dec    %eax
f0129240:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129246:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012924c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129251:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129257:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012925d:	29 d0                	sub    %edx,%eax
f012925f:	01 d8                	add    %ebx,%eax
f0129261:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129266:	39 c1                	cmp    %eax,%ecx
f0129268:	74 17                	je     f0129281 <test_kfreelast+0x971>
f012926a:	83 ec 04             	sub    $0x4,%esp
f012926d:	68 60 a3 13 f0       	push   $0xf013a360
f0129272:	68 14 0d 00 00       	push   $0xd14
f0129277:	68 7a a2 13 f0       	push   $0xf013a27a
f012927c:	e8 25 6f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129281:	e8 06 aa fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129286:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129289:	74 17                	je     f01292a2 <test_kfreelast+0x992>
f012928b:	83 ec 04             	sub    $0x4,%esp
f012928e:	68 94 a2 13 f0       	push   $0xf013a294
f0129293:	68 15 0d 00 00       	push   $0xd15
f0129298:	68 7a a2 13 f0       	push   $0xf013a27a
f012929d:	e8 04 6f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292a2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01292a5:	e8 ee 2a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01292aa:	29 c3                	sub    %eax,%ebx
f01292ac:	89 d8                	mov    %ebx,%eax
f01292ae:	3d 00 06 00 00       	cmp    $0x600,%eax
f01292b3:	74 17                	je     f01292cc <test_kfreelast+0x9bc>
f01292b5:	83 ec 04             	sub    $0x4,%esp
f01292b8:	68 fc a2 13 f0       	push   $0xf013a2fc
f01292bd:	68 16 0d 00 00       	push   $0xd16
f01292c2:	68 7a a2 13 f0       	push   $0xf013a27a
f01292c7:	e8 da 6e fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01292cc:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f01292d3:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01292d6:	e8 bd 2a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01292db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292de:	e8 a9 a9 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01292e3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01292e6:	83 ec 0c             	sub    $0xc,%esp
f01292e9:	68 00 38 00 00       	push   $0x3800
f01292ee:	e8 e9 e0 fd ff       	call   f01073dc <kmalloc>
f01292f3:	83 c4 10             	add    $0x10,%esp
f01292f6:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01292fc:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129302:	89 c1                	mov    %eax,%ecx
f0129304:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012930b:	10 00 00 
f012930e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129314:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129319:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012931f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129325:	ba 00 00 00 00       	mov    $0x0,%edx
f012932a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129330:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129336:	29 d0                	sub    %edx,%eax
f0129338:	89 c3                	mov    %eax,%ebx
f012933a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129341:	10 00 00 
f0129344:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129349:	0f b6 d0             	movzbl %al,%edx
f012934c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129352:	01 d0                	add    %edx,%eax
f0129354:	48                   	dec    %eax
f0129355:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012935b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129361:	ba 00 00 00 00       	mov    $0x0,%edx
f0129366:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012936c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129372:	29 d0                	sub    %edx,%eax
f0129374:	01 c3                	add    %eax,%ebx
f0129376:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012937d:	10 00 00 
f0129380:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129385:	0f b6 c0             	movzbl %al,%eax
f0129388:	c1 e0 04             	shl    $0x4,%eax
f012938b:	89 c2                	mov    %eax,%edx
f012938d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129393:	01 d0                	add    %edx,%eax
f0129395:	48                   	dec    %eax
f0129396:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012939c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01293a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01293a7:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01293ad:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01293b3:	29 d0                	sub    %edx,%eax
f01293b5:	01 d8                	add    %ebx,%eax
f01293b7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01293bc:	39 c1                	cmp    %eax,%ecx
f01293be:	74 17                	je     f01293d7 <test_kfreelast+0xac7>
f01293c0:	83 ec 04             	sub    $0x4,%esp
f01293c3:	68 60 a3 13 f0       	push   $0xf013a360
f01293c8:	68 1d 0d 00 00       	push   $0xd1d
f01293cd:	68 7a a2 13 f0       	push   $0xf013a27a
f01293d2:	e8 cf 6d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293d7:	e8 b0 a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01293dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293df:	74 17                	je     f01293f8 <test_kfreelast+0xae8>
f01293e1:	83 ec 04             	sub    $0x4,%esp
f01293e4:	68 94 a2 13 f0       	push   $0xf013a294
f01293e9:	68 1e 0d 00 00       	push   $0xd1e
f01293ee:	68 7a a2 13 f0       	push   $0xf013a27a
f01293f3:	e8 ae 6d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293f8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01293fb:	e8 98 29 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129400:	29 c3                	sub    %eax,%ebx
f0129402:	89 d8                	mov    %ebx,%eax
f0129404:	83 f8 04             	cmp    $0x4,%eax
f0129407:	74 17                	je     f0129420 <test_kfreelast+0xb10>
f0129409:	83 ec 04             	sub    $0x4,%esp
f012940c:	68 fc a2 13 f0       	push   $0xf013a2fc
f0129411:	68 1f 0d 00 00       	push   $0xd1f
f0129416:	68 7a a2 13 f0       	push   $0xf013a27a
f012941b:	e8 86 6d fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129420:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129427:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012942a:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129430:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129433:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012943a:	eb 0e                	jmp    f012944a <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012943c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012943f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129442:	01 d0                	add    %edx,%eax
f0129444:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129447:	ff 45 f4             	incl   -0xc(%ebp)
f012944a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129450:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129453:	7f e7                	jg     f012943c <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129455:	e8 3e 29 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012945a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129460:	e8 27 a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129465:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012946b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129471:	83 ec 0c             	sub    $0xc,%esp
f0129474:	50                   	push   %eax
f0129475:	e8 7c df fd ff       	call   f01073f6 <kfree>
f012947a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012947d:	e8 0a a8 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129482:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129488:	74 17                	je     f01294a1 <test_kfreelast+0xb91>
f012948a:	83 ec 04             	sub    $0x4,%esp
f012948d:	68 94 a2 13 f0       	push   $0xf013a294
f0129492:	68 2e 0d 00 00       	push   $0xd2e
f0129497:	68 7a a2 13 f0       	push   $0xf013a27a
f012949c:	e8 05 6d fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01294a1:	e8 f2 28 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01294a6:	89 c2                	mov    %eax,%edx
f01294a8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01294ae:	29 c2                	sub    %eax,%edx
f01294b0:	89 d0                	mov    %edx,%eax
f01294b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f01294b7:	74 17                	je     f01294d0 <test_kfreelast+0xbc0>
f01294b9:	83 ec 04             	sub    $0x4,%esp
f01294bc:	68 04 aa 13 f0       	push   $0xf013aa04
f01294c1:	68 2f 0d 00 00       	push   $0xd2f
f01294c6:	68 7a a2 13 f0       	push   $0xf013a27a
f01294cb:	e8 d6 6c fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01294d0:	e8 c3 28 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01294d5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294db:	e8 ac a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01294e0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f01294e6:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01294ec:	83 ec 0c             	sub    $0xc,%esp
f01294ef:	50                   	push   %eax
f01294f0:	e8 01 df fd ff       	call   f01073f6 <kfree>
f01294f5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294f8:	e8 8f a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01294fd:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129503:	74 17                	je     f012951c <test_kfreelast+0xc0c>
f0129505:	83 ec 04             	sub    $0x4,%esp
f0129508:	68 94 a2 13 f0       	push   $0xf013a294
f012950d:	68 35 0d 00 00       	push   $0xd35
f0129512:	68 7a a2 13 f0       	push   $0xf013a27a
f0129517:	e8 8a 6c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012951c:	e8 77 28 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129521:	89 c2                	mov    %eax,%edx
f0129523:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129529:	29 c2                	sub    %eax,%edx
f012952b:	89 d0                	mov    %edx,%eax
f012952d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129532:	74 17                	je     f012954b <test_kfreelast+0xc3b>
f0129534:	83 ec 04             	sub    $0x4,%esp
f0129537:	68 04 aa 13 f0       	push   $0xf013aa04
f012953c:	68 36 0d 00 00       	push   $0xd36
f0129541:	68 7a a2 13 f0       	push   $0xf013a27a
f0129546:	e8 5b 6c fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012954b:	e8 48 28 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129550:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129556:	e8 31 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012955b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129561:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129567:	83 ec 0c             	sub    $0xc,%esp
f012956a:	50                   	push   %eax
f012956b:	e8 86 de fd ff       	call   f01073f6 <kfree>
f0129570:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129573:	e8 14 a7 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129578:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012957e:	74 17                	je     f0129597 <test_kfreelast+0xc87>
f0129580:	83 ec 04             	sub    $0x4,%esp
f0129583:	68 94 a2 13 f0       	push   $0xf013a294
f0129588:	68 3c 0d 00 00       	push   $0xd3c
f012958d:	68 7a a2 13 f0       	push   $0xf013a27a
f0129592:	e8 0f 6c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129597:	e8 fc 27 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012959c:	89 c2                	mov    %eax,%edx
f012959e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01295a4:	29 c2                	sub    %eax,%edx
f01295a6:	89 d0                	mov    %edx,%eax
f01295a8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01295ad:	74 17                	je     f01295c6 <test_kfreelast+0xcb6>
f01295af:	83 ec 04             	sub    $0x4,%esp
f01295b2:	68 04 aa 13 f0       	push   $0xf013aa04
f01295b7:	68 3d 0d 00 00       	push   $0xd3d
f01295bc:	68 7a a2 13 f0       	push   $0xf013a27a
f01295c1:	e8 e0 6b fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01295c6:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01295cc:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01295cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295d6:	eb 1e                	jmp    f01295f6 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f01295d8:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f01295de:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01295e1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295e4:	01 c8                	add    %ecx,%eax
f01295e6:	8a 00                	mov    (%eax),%al
f01295e8:	0f be c0             	movsbl %al,%eax
f01295eb:	01 d0                	add    %edx,%eax
f01295ed:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01295f3:	ff 45 f4             	incl   -0xc(%ebp)
f01295f6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01295fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01295ff:	7f d7                	jg     f01295d8 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129601:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129607:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012960d:	01 c0                	add    %eax,%eax
f012960f:	39 c2                	cmp    %eax,%edx
f0129611:	74 17                	je     f012962a <test_kfreelast+0xd1a>
f0129613:	83 ec 04             	sub    $0x4,%esp
f0129616:	68 60 aa 13 f0       	push   $0xf013aa60
f012961b:	68 48 0d 00 00       	push   $0xd48
f0129620:	68 7a a2 13 f0       	push   $0xf013a27a
f0129625:	e8 7c 6b fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012962a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129630:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129633:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012963a:	eb 1e                	jmp    f012965a <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012963c:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129642:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129645:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129648:	01 c8                	add    %ecx,%eax
f012964a:	8a 00                	mov    (%eax),%al
f012964c:	0f be c0             	movsbl %al,%eax
f012964f:	01 d0                	add    %edx,%eax
f0129651:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129657:	ff 45 f4             	incl   -0xc(%ebp)
f012965a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129660:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129663:	7f d7                	jg     f012963c <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129665:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012966b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129671:	89 c1                	mov    %eax,%ecx
f0129673:	01 c9                	add    %ecx,%ecx
f0129675:	01 c8                	add    %ecx,%eax
f0129677:	39 c2                	cmp    %eax,%edx
f0129679:	74 17                	je     f0129692 <test_kfreelast+0xd82>
f012967b:	83 ec 04             	sub    $0x4,%esp
f012967e:	68 60 aa 13 f0       	push   $0xf013aa60
f0129683:	68 50 0d 00 00       	push   $0xd50
f0129688:	68 7a a2 13 f0       	push   $0xf013a27a
f012968d:	e8 14 6b fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129692:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129698:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012969b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296a2:	eb 1e                	jmp    f01296c2 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f01296a4:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f01296aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01296ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01296b0:	01 c8                	add    %ecx,%eax
f01296b2:	8a 00                	mov    (%eax),%al
f01296b4:	0f be c0             	movsbl %al,%eax
f01296b7:	01 d0                	add    %edx,%eax
f01296b9:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01296bf:	ff 45 f4             	incl   -0xc(%ebp)
f01296c2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01296c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296cb:	7f d7                	jg     f01296a4 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01296cd:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01296d3:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f01296d9:	c1 e2 02             	shl    $0x2,%edx
f01296dc:	39 d0                	cmp    %edx,%eax
f01296de:	74 17                	je     f01296f7 <test_kfreelast+0xde7>
f01296e0:	83 ec 04             	sub    $0x4,%esp
f01296e3:	68 60 aa 13 f0       	push   $0xf013aa60
f01296e8:	68 58 0d 00 00       	push   $0xd58
f01296ed:	68 7a a2 13 f0       	push   $0xf013a27a
f01296f2:	e8 af 6a fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01296f7:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f01296fd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129700:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129707:	eb 1e                	jmp    f0129727 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0129709:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012970f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129712:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129715:	01 c8                	add    %ecx,%eax
f0129717:	8a 00                	mov    (%eax),%al
f0129719:	0f be c0             	movsbl %al,%eax
f012971c:	01 d0                	add    %edx,%eax
f012971e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129724:	ff 45 f4             	incl   -0xc(%ebp)
f0129727:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012972d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129730:	7f d7                	jg     f0129709 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129732:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0129738:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012973e:	89 d0                	mov    %edx,%eax
f0129740:	c1 e0 02             	shl    $0x2,%eax
f0129743:	01 d0                	add    %edx,%eax
f0129745:	39 c1                	cmp    %eax,%ecx
f0129747:	74 17                	je     f0129760 <test_kfreelast+0xe50>
f0129749:	83 ec 04             	sub    $0x4,%esp
f012974c:	68 60 aa 13 f0       	push   $0xf013aa60
f0129751:	68 60 0d 00 00       	push   $0xd60
f0129756:	68 7a a2 13 f0       	push   $0xf013a27a
f012975b:	e8 46 6a fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129760:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129766:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129769:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129770:	eb 1e                	jmp    f0129790 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0129772:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0129778:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012977b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012977e:	01 c8                	add    %ecx,%eax
f0129780:	8a 00                	mov    (%eax),%al
f0129782:	0f be c0             	movsbl %al,%eax
f0129785:	01 d0                	add    %edx,%eax
f0129787:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012978d:	ff 45 f4             	incl   -0xc(%ebp)
f0129790:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129796:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129799:	7f d7                	jg     f0129772 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012979b:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f01297a1:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01297a7:	89 d0                	mov    %edx,%eax
f01297a9:	01 c0                	add    %eax,%eax
f01297ab:	01 d0                	add    %edx,%eax
f01297ad:	01 c0                	add    %eax,%eax
f01297af:	01 d0                	add    %edx,%eax
f01297b1:	39 c1                	cmp    %eax,%ecx
f01297b3:	74 17                	je     f01297cc <test_kfreelast+0xebc>
f01297b5:	83 ec 04             	sub    $0x4,%esp
f01297b8:	68 60 aa 13 f0       	push   $0xf013aa60
f01297bd:	68 68 0d 00 00       	push   $0xd68
f01297c2:	68 7a a2 13 f0       	push   $0xf013a27a
f01297c7:	e8 da 69 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01297cc:	e8 c7 25 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01297d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297d4:	e8 b3 a4 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01297d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01297dc:	83 ec 0c             	sub    $0xc,%esp
f01297df:	68 00 50 00 00       	push   $0x5000
f01297e4:	e8 f3 db fd ff       	call   f01073dc <kmalloc>
f01297e9:	83 c4 10             	add    $0x10,%esp
f01297ec:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01297f2:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f01297f8:	89 c1                	mov    %eax,%ecx
f01297fa:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129801:	10 00 00 
f0129804:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012980a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012980f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129815:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012981b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129820:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129826:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012982c:	29 d0                	sub    %edx,%eax
f012982e:	89 c3                	mov    %eax,%ebx
f0129830:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129837:	10 00 00 
f012983a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012983f:	0f b6 d0             	movzbl %al,%edx
f0129842:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129848:	01 d0                	add    %edx,%eax
f012984a:	48                   	dec    %eax
f012984b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129851:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129857:	ba 00 00 00 00       	mov    $0x0,%edx
f012985c:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129862:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129868:	29 d0                	sub    %edx,%eax
f012986a:	01 c3                	add    %eax,%ebx
f012986c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129873:	10 00 00 
f0129876:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012987b:	0f b6 c0             	movzbl %al,%eax
f012987e:	c1 e0 04             	shl    $0x4,%eax
f0129881:	89 c2                	mov    %eax,%edx
f0129883:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129889:	01 d0                	add    %edx,%eax
f012988b:	48                   	dec    %eax
f012988c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129892:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129898:	ba 00 00 00 00       	mov    $0x0,%edx
f012989d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01298a3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01298a9:	29 d0                	sub    %edx,%eax
f01298ab:	01 d8                	add    %ebx,%eax
f01298ad:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01298b2:	39 c1                	cmp    %eax,%ecx
f01298b4:	74 17                	je     f01298cd <test_kfreelast+0xfbd>
f01298b6:	83 ec 04             	sub    $0x4,%esp
f01298b9:	68 60 a3 13 f0       	push   $0xf013a360
f01298be:	68 71 0d 00 00       	push   $0xd71
f01298c3:	68 7a a2 13 f0       	push   $0xf013a27a
f01298c8:	e8 d9 68 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298cd:	e8 ba a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f01298d2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298d5:	74 17                	je     f01298ee <test_kfreelast+0xfde>
f01298d7:	83 ec 04             	sub    $0x4,%esp
f01298da:	68 94 a2 13 f0       	push   $0xf013a294
f01298df:	68 72 0d 00 00       	push   $0xd72
f01298e4:	68 7a a2 13 f0       	push   $0xf013a27a
f01298e9:	e8 b8 68 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01298ee:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01298f1:	e8 a2 24 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f01298f6:	29 c3                	sub    %eax,%ebx
f01298f8:	89 d8                	mov    %ebx,%eax
f01298fa:	83 f8 05             	cmp    $0x5,%eax
f01298fd:	74 17                	je     f0129916 <test_kfreelast+0x1006>
f01298ff:	83 ec 04             	sub    $0x4,%esp
f0129902:	68 fc a2 13 f0       	push   $0xf013a2fc
f0129907:	68 73 0d 00 00       	push   $0xd73
f012990c:	68 7a a2 13 f0       	push   $0xf013a27a
f0129911:	e8 90 68 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0129916:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012991d:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0129920:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129926:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0129929:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129930:	eb 0e                	jmp    f0129940 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0129932:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129935:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129938:	01 d0                	add    %edx,%eax
f012993a:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012993d:	ff 45 f4             	incl   -0xc(%ebp)
f0129940:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0129946:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129949:	7f e7                	jg     f0129932 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012994b:	e8 48 24 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129950:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129953:	e8 34 a3 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129958:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012995b:	83 ec 0c             	sub    $0xc,%esp
f012995e:	68 00 00 10 00       	push   $0x100000
f0129963:	e8 74 da fd ff       	call   f01073dc <kmalloc>
f0129968:	83 c4 10             	add    $0x10,%esp
f012996b:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129971:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129977:	89 c1                	mov    %eax,%ecx
f0129979:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129980:	10 00 00 
f0129983:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129989:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012998e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129994:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012999a:	ba 00 00 00 00       	mov    $0x0,%edx
f012999f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01299a5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01299ab:	29 d0                	sub    %edx,%eax
f01299ad:	89 c3                	mov    %eax,%ebx
f01299af:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01299b6:	10 00 00 
f01299b9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01299be:	0f b6 d0             	movzbl %al,%edx
f01299c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01299c7:	01 d0                	add    %edx,%eax
f01299c9:	48                   	dec    %eax
f01299ca:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01299d0:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01299d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01299db:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01299e1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01299e7:	29 d0                	sub    %edx,%eax
f01299e9:	01 c3                	add    %eax,%ebx
f01299eb:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01299f2:	10 00 00 
f01299f5:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f01299fa:	0f b6 c0             	movzbl %al,%eax
f01299fd:	c1 e0 04             	shl    $0x4,%eax
f0129a00:	89 c2                	mov    %eax,%edx
f0129a02:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129a08:	01 d0                	add    %edx,%eax
f0129a0a:	48                   	dec    %eax
f0129a0b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129a11:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129a17:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a1c:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129a22:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129a28:	29 d0                	sub    %edx,%eax
f0129a2a:	01 d8                	add    %ebx,%eax
f0129a2c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129a31:	39 c1                	cmp    %eax,%ecx
f0129a33:	74 17                	je     f0129a4c <test_kfreelast+0x113c>
f0129a35:	83 ec 04             	sub    $0x4,%esp
f0129a38:	68 60 a3 13 f0       	push   $0xf013a360
f0129a3d:	68 7f 0d 00 00       	push   $0xd7f
f0129a42:	68 7a a2 13 f0       	push   $0xf013a27a
f0129a47:	e8 5a 67 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a4c:	e8 3b a2 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129a51:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a54:	74 17                	je     f0129a6d <test_kfreelast+0x115d>
f0129a56:	83 ec 04             	sub    $0x4,%esp
f0129a59:	68 94 a2 13 f0       	push   $0xf013a294
f0129a5e:	68 80 0d 00 00       	push   $0xd80
f0129a63:	68 7a a2 13 f0       	push   $0xf013a27a
f0129a68:	e8 39 67 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a6d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a70:	e8 23 23 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129a75:	29 c3                	sub    %eax,%ebx
f0129a77:	89 d8                	mov    %ebx,%eax
f0129a79:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129a7e:	74 17                	je     f0129a97 <test_kfreelast+0x1187>
f0129a80:	83 ec 04             	sub    $0x4,%esp
f0129a83:	68 fc a2 13 f0       	push   $0xf013a2fc
f0129a88:	68 81 0d 00 00       	push   $0xd81
f0129a8d:	68 7a a2 13 f0       	push   $0xf013a27a
f0129a92:	e8 0f 67 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0129a97:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f0129a9e:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0129aa1:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129aa7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0129aaa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ab1:	eb 0e                	jmp    f0129ac1 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f0129ab3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ab6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ab9:	01 d0                	add    %edx,%eax
f0129abb:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0129abe:	ff 45 f4             	incl   -0xc(%ebp)
f0129ac1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0129ac7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129aca:	7f e7                	jg     f0129ab3 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0129acc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ad3:	e8 c0 22 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129ad8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129adb:	e8 ac a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129ae0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129ae3:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129ae9:	83 ec 0c             	sub    $0xc,%esp
f0129aec:	50                   	push   %eax
f0129aed:	e8 04 d9 fd ff       	call   f01073f6 <kfree>
f0129af2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129af5:	e8 92 a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129afa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129afd:	74 17                	je     f0129b16 <test_kfreelast+0x1206>
f0129aff:	83 ec 04             	sub    $0x4,%esp
f0129b02:	68 94 a2 13 f0       	push   $0xf013a294
f0129b07:	68 91 0d 00 00       	push   $0xd91
f0129b0c:	68 7a a2 13 f0       	push   $0xf013a27a
f0129b11:	e8 90 66 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0129b16:	e8 7d 22 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129b1b:	89 c2                	mov    %eax,%edx
f0129b1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b20:	29 c2                	sub    %eax,%edx
f0129b22:	89 d0                	mov    %edx,%eax
f0129b24:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129b29:	74 17                	je     f0129b42 <test_kfreelast+0x1232>
f0129b2b:	83 ec 04             	sub    $0x4,%esp
f0129b2e:	68 04 aa 13 f0       	push   $0xf013aa04
f0129b33:	68 92 0d 00 00       	push   $0xd92
f0129b38:	68 7a a2 13 f0       	push   $0xf013a27a
f0129b3d:	e8 64 66 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b42:	e8 51 22 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129b47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b4a:	e8 3d a1 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129b4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0129b52:	83 ec 0c             	sub    $0xc,%esp
f0129b55:	68 00 78 00 00       	push   $0x7800
f0129b5a:	e8 7d d8 fd ff       	call   f01073dc <kmalloc>
f0129b5f:	83 c4 10             	add    $0x10,%esp
f0129b62:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b68:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129b6e:	89 c1                	mov    %eax,%ecx
f0129b70:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0129b77:	10 00 00 
f0129b7a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0129b80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b85:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0129b8b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129b91:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b96:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0129b9c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129ba2:	29 d0                	sub    %edx,%eax
f0129ba4:	89 c3                	mov    %eax,%ebx
f0129ba6:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0129bad:	10 00 00 
f0129bb0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129bb5:	0f b6 d0             	movzbl %al,%edx
f0129bb8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0129bbe:	01 d0                	add    %edx,%eax
f0129bc0:	48                   	dec    %eax
f0129bc1:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0129bc7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129bcd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bd2:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0129bd8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129bde:	29 d0                	sub    %edx,%eax
f0129be0:	01 c3                	add    %eax,%ebx
f0129be2:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0129be9:	10 00 00 
f0129bec:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129bf1:	0f b6 c0             	movzbl %al,%eax
f0129bf4:	c1 e0 04             	shl    $0x4,%eax
f0129bf7:	89 c2                	mov    %eax,%edx
f0129bf9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0129bff:	01 d0                	add    %edx,%eax
f0129c01:	48                   	dec    %eax
f0129c02:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0129c08:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129c0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c13:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0129c19:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129c1f:	29 d0                	sub    %edx,%eax
f0129c21:	01 d8                	add    %ebx,%eax
f0129c23:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129c28:	39 c1                	cmp    %eax,%ecx
f0129c2a:	74 17                	je     f0129c43 <test_kfreelast+0x1333>
f0129c2c:	83 ec 04             	sub    $0x4,%esp
f0129c2f:	68 60 a3 13 f0       	push   $0xf013a360
f0129c34:	68 9b 0d 00 00       	push   $0xd9b
f0129c39:	68 7a a2 13 f0       	push   $0xf013a27a
f0129c3e:	e8 63 65 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129c43:	e8 44 a0 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129c48:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c4b:	74 17                	je     f0129c64 <test_kfreelast+0x1354>
f0129c4d:	83 ec 04             	sub    $0x4,%esp
f0129c50:	68 94 a2 13 f0       	push   $0xf013a294
f0129c55:	68 9c 0d 00 00       	push   $0xd9c
f0129c5a:	68 7a a2 13 f0       	push   $0xf013a27a
f0129c5f:	e8 42 65 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c64:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c67:	e8 2c 21 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129c6c:	29 c3                	sub    %eax,%ebx
f0129c6e:	89 d8                	mov    %ebx,%eax
f0129c70:	83 f8 08             	cmp    $0x8,%eax
f0129c73:	74 17                	je     f0129c8c <test_kfreelast+0x137c>
f0129c75:	83 ec 04             	sub    $0x4,%esp
f0129c78:	68 fc a2 13 f0       	push   $0xf013a2fc
f0129c7d:	68 9d 0d 00 00       	push   $0xd9d
f0129c82:	68 7a a2 13 f0       	push   $0xf013a27a
f0129c87:	e8 1a 65 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0129c8c:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f0129c93:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0129c96:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129c9c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0129c9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ca6:	eb 0e                	jmp    f0129cb6 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f0129ca8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129cab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129cae:	01 d0                	add    %edx,%eax
f0129cb0:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0129cb3:	ff 45 f4             	incl   -0xc(%ebp)
f0129cb6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0129cbc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129cbf:	7f e7                	jg     f0129ca8 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129cc1:	e8 d2 20 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129cc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cc9:	e8 be 9f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129cce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0129cd1:	83 ec 0c             	sub    $0xc,%esp
f0129cd4:	68 00 00 10 00       	push   $0x100000
f0129cd9:	e8 fe d6 fd ff       	call   f01073dc <kmalloc>
f0129cde:	83 c4 10             	add    $0x10,%esp
f0129ce1:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129ce7:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129ced:	89 c1                	mov    %eax,%ecx
f0129cef:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0129cf6:	10 00 00 
f0129cf9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129cff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d04:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0129d0a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129d10:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d15:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0129d1b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129d21:	29 d0                	sub    %edx,%eax
f0129d23:	89 c3                	mov    %eax,%ebx
f0129d25:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0129d2c:	10 00 00 
f0129d2f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129d34:	0f b6 d0             	movzbl %al,%edx
f0129d37:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0129d3d:	01 d0                	add    %edx,%eax
f0129d3f:	48                   	dec    %eax
f0129d40:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0129d46:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129d4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d51:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0129d57:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129d5d:	29 d0                	sub    %edx,%eax
f0129d5f:	01 c3                	add    %eax,%ebx
f0129d61:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0129d68:	10 00 00 
f0129d6b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129d70:	0f b6 c0             	movzbl %al,%eax
f0129d73:	c1 e0 04             	shl    $0x4,%eax
f0129d76:	89 c2                	mov    %eax,%edx
f0129d78:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129d7e:	01 d0                	add    %edx,%eax
f0129d80:	48                   	dec    %eax
f0129d81:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0129d87:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0129d8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d92:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0129d98:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0129d9e:	29 d0                	sub    %edx,%eax
f0129da0:	01 d8                	add    %ebx,%eax
f0129da2:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0129da7:	39 c1                	cmp    %eax,%ecx
f0129da9:	74 17                	je     f0129dc2 <test_kfreelast+0x14b2>
f0129dab:	83 ec 04             	sub    $0x4,%esp
f0129dae:	68 60 a3 13 f0       	push   $0xf013a360
f0129db3:	68 a9 0d 00 00       	push   $0xda9
f0129db8:	68 7a a2 13 f0       	push   $0xf013a27a
f0129dbd:	e8 e4 63 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129dc2:	e8 c5 9e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129dc7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129dca:	74 17                	je     f0129de3 <test_kfreelast+0x14d3>
f0129dcc:	83 ec 04             	sub    $0x4,%esp
f0129dcf:	68 94 a2 13 f0       	push   $0xf013a294
f0129dd4:	68 aa 0d 00 00       	push   $0xdaa
f0129dd9:	68 7a a2 13 f0       	push   $0xf013a27a
f0129dde:	e8 c3 63 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129de3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129de6:	e8 ad 1f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129deb:	29 c3                	sub    %eax,%ebx
f0129ded:	89 d8                	mov    %ebx,%eax
f0129def:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129df4:	74 17                	je     f0129e0d <test_kfreelast+0x14fd>
f0129df6:	83 ec 04             	sub    $0x4,%esp
f0129df9:	68 fc a2 13 f0       	push   $0xf013a2fc
f0129dfe:	68 ab 0d 00 00       	push   $0xdab
f0129e03:	68 7a a2 13 f0       	push   $0xf013a27a
f0129e08:	e8 99 63 fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0129e0d:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f0129e14:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0129e17:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129e1d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0129e20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e27:	eb 0e                	jmp    f0129e37 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f0129e29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e2c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e2f:	01 d0                	add    %edx,%eax
f0129e31:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0129e34:	ff 45 f4             	incl   -0xc(%ebp)
f0129e37:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0129e3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129e40:	7f e7                	jg     f0129e29 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0129e42:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0129e46:	83 ec 08             	sub    $0x8,%esp
f0129e49:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e4c:	68 ac b2 13 f0       	push   $0xf013b2ac
f0129e51:	e8 d7 6d fd ff       	call   f0100c2d <cprintf>
f0129e56:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0129e59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e60:	e8 33 1f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129e65:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e68:	e8 1f 9e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e6d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0129e70:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0129e76:	83 ec 0c             	sub    $0xc,%esp
f0129e79:	50                   	push   %eax
f0129e7a:	e8 77 d5 fd ff       	call   f01073f6 <kfree>
f0129e7f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129e82:	e8 05 9e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129e87:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e8a:	74 1d                	je     f0129ea9 <test_kfreelast+0x1599>
f0129e8c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e90:	75 17                	jne    f0129ea9 <test_kfreelast+0x1599>
f0129e92:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e99:	83 ec 0c             	sub    $0xc,%esp
f0129e9c:	68 d4 b2 13 f0       	push   $0xf013b2d4
f0129ea1:	e8 87 6d fd ff       	call   f0100c2d <cprintf>
f0129ea6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129ea9:	e8 ea 1e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129eae:	89 c2                	mov    %eax,%edx
f0129eb0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129eb3:	29 c2                	sub    %eax,%edx
f0129eb5:	89 d0                	mov    %edx,%eax
f0129eb7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129ebc:	74 1d                	je     f0129edb <test_kfreelast+0x15cb>
f0129ebe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ec2:	75 17                	jne    f0129edb <test_kfreelast+0x15cb>
f0129ec4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ecb:	83 ec 0c             	sub    $0xc,%esp
f0129ece:	68 40 b3 13 f0       	push   $0xf013b340
f0129ed3:	e8 55 6d fd ff       	call   f0100c2d <cprintf>
f0129ed8:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129edb:	e8 b8 1e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129ee0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ee3:	e8 a4 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129ee8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f0129eeb:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129ef1:	83 ec 0c             	sub    $0xc,%esp
f0129ef4:	50                   	push   %eax
f0129ef5:	e8 fc d4 fd ff       	call   f01073f6 <kfree>
f0129efa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129efd:	e8 8a 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f02:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129f05:	74 1d                	je     f0129f24 <test_kfreelast+0x1614>
f0129f07:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f0b:	75 17                	jne    f0129f24 <test_kfreelast+0x1614>
f0129f0d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f14:	83 ec 0c             	sub    $0xc,%esp
f0129f17:	68 d4 b2 13 f0       	push   $0xf013b2d4
f0129f1c:	e8 0c 6d fd ff       	call   f0100c2d <cprintf>
f0129f21:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129f24:	e8 6f 1e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129f29:	89 c2                	mov    %eax,%edx
f0129f2b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129f2e:	29 c2                	sub    %eax,%edx
f0129f30:	89 d0                	mov    %edx,%eax
f0129f32:	83 f8 08             	cmp    $0x8,%eax
f0129f35:	74 1d                	je     f0129f54 <test_kfreelast+0x1644>
f0129f37:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f3b:	75 17                	jne    f0129f54 <test_kfreelast+0x1644>
f0129f3d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f44:	83 ec 0c             	sub    $0xc,%esp
f0129f47:	68 40 b3 13 f0       	push   $0xf013b340
f0129f4c:	e8 dc 6c fd ff       	call   f0100c2d <cprintf>
f0129f51:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f54:	e8 3f 1e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f0129f59:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f5c:	e8 2b 9d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f0129f61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0129f64:	83 ec 0c             	sub    $0xc,%esp
f0129f67:	68 00 28 00 00       	push   $0x2800
f0129f6c:	e8 6b d4 fd ff       	call   f01073dc <kmalloc>
f0129f71:	83 c4 10             	add    $0x10,%esp
f0129f74:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129f7a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f0129f80:	89 c1                	mov    %eax,%ecx
f0129f82:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0129f89:	10 00 00 
f0129f8c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0129f92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f97:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0129f9d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0129fa3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fa8:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0129fae:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0129fb4:	29 d0                	sub    %edx,%eax
f0129fb6:	89 c3                	mov    %eax,%ebx
f0129fb8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0129fbf:	10 00 00 
f0129fc2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f0129fc7:	0f b6 d0             	movzbl %al,%edx
f0129fca:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0129fd0:	01 d0                	add    %edx,%eax
f0129fd2:	48                   	dec    %eax
f0129fd3:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0129fd9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0129fdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fe4:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0129fea:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0129ff0:	29 d0                	sub    %edx,%eax
f0129ff2:	01 c3                	add    %eax,%ebx
f0129ff4:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0129ffb:	10 00 00 
f0129ffe:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a003:	0f b6 c0             	movzbl %al,%eax
f012a006:	c1 e0 04             	shl    $0x4,%eax
f012a009:	89 c2                	mov    %eax,%edx
f012a00b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a011:	01 d0                	add    %edx,%eax
f012a013:	48                   	dec    %eax
f012a014:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a01a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a020:	ba 00 00 00 00       	mov    $0x0,%edx
f012a025:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a02b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a031:	29 d0                	sub    %edx,%eax
f012a033:	01 d8                	add    %ebx,%eax
f012a035:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a03a:	39 c1                	cmp    %eax,%ecx
f012a03c:	74 1d                	je     f012a05b <test_kfreelast+0x174b>
f012a03e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a042:	75 17                	jne    f012a05b <test_kfreelast+0x174b>
f012a044:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a04b:	83 ec 0c             	sub    $0xc,%esp
f012a04e:	68 78 b3 13 f0       	push   $0xf013b378
f012a053:	e8 d5 6b fd ff       	call   f0100c2d <cprintf>
f012a058:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a05b:	e8 2c 9c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a060:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a063:	74 1d                	je     f012a082 <test_kfreelast+0x1772>
f012a065:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a069:	75 17                	jne    f012a082 <test_kfreelast+0x1772>
f012a06b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a072:	83 ec 0c             	sub    $0xc,%esp
f012a075:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a07a:	e8 ae 6b fd ff       	call   f0100c2d <cprintf>
f012a07f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a082:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a085:	e8 0e 1d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a08a:	29 c3                	sub    %eax,%ebx
f012a08c:	89 d8                	mov    %ebx,%eax
f012a08e:	83 f8 03             	cmp    $0x3,%eax
f012a091:	74 1d                	je     f012a0b0 <test_kfreelast+0x17a0>
f012a093:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a097:	75 17                	jne    f012a0b0 <test_kfreelast+0x17a0>
f012a099:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0a0:	83 ec 0c             	sub    $0xc,%esp
f012a0a3:	68 e0 b3 13 f0       	push   $0xf013b3e0
f012a0a8:	e8 80 6b fd ff       	call   f0100c2d <cprintf>
f012a0ad:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a0b0:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a0b7:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a0ba:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a0c0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a0c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0ca:	eb 0e                	jmp    f012a0da <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a0cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0d2:	01 d0                	add    %edx,%eax
f012a0d4:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a0d7:	ff 45 f4             	incl   -0xc(%ebp)
f012a0da:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a0e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a0e3:	7f e7                	jg     f012a0cc <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a0e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0e9:	75 17                	jne    f012a102 <test_kfreelast+0x17f2>
f012a0eb:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a0ef:	83 ec 08             	sub    $0x8,%esp
f012a0f2:	ff 75 f0             	pushl  -0x10(%ebp)
f012a0f5:	68 ac b2 13 f0       	push   $0xf013b2ac
f012a0fa:	e8 2e 6b fd ff       	call   f0100c2d <cprintf>
f012a0ff:	83 c4 10             	add    $0x10,%esp
f012a102:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a109:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a10f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a112:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a119:	eb 1e                	jmp    f012a139 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a11b:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a121:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a124:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a127:	01 c8                	add    %ecx,%eax
f012a129:	8a 00                	mov    (%eax),%al
f012a12b:	0f be c0             	movsbl %al,%eax
f012a12e:	01 d0                	add    %edx,%eax
f012a130:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a136:	ff 45 f4             	incl   -0xc(%ebp)
f012a139:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a13f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a142:	7f d7                	jg     f012a11b <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a144:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a14a:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a150:	89 d0                	mov    %edx,%eax
f012a152:	01 c0                	add    %eax,%eax
f012a154:	01 d0                	add    %edx,%eax
f012a156:	c1 e0 02             	shl    $0x2,%eax
f012a159:	39 c1                	cmp    %eax,%ecx
f012a15b:	74 1d                	je     f012a17a <test_kfreelast+0x186a>
f012a15d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a161:	75 17                	jne    f012a17a <test_kfreelast+0x186a>
f012a163:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a16a:	83 ec 0c             	sub    $0xc,%esp
f012a16d:	68 24 b4 13 f0       	push   $0xf013b424
f012a172:	e8 b6 6a fd ff       	call   f0100c2d <cprintf>
f012a177:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a17a:	83 ec 0c             	sub    $0xc,%esp
f012a17d:	6a 03                	push   $0x3
f012a17f:	e8 bd 20 fe ff       	call   f010c241 <sys_bypassPageFault>
f012a184:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a187:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a18d:	05 00 30 00 00       	add    $0x3000,%eax
f012a192:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a195:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a19c:	eb 3c                	jmp    f012a1da <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a19e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a1a1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a1a4:	01 d0                	add    %edx,%eax
f012a1a6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a1a9:	e8 81 20 fe ff       	call   f010c22f <sys_rcr2>
f012a1ae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a1b1:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a1b4:	01 ca                	add    %ecx,%edx
f012a1b6:	39 d0                	cmp    %edx,%eax
f012a1b8:	74 1d                	je     f012a1d7 <test_kfreelast+0x18c7>
f012a1ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a1be:	75 17                	jne    f012a1d7 <test_kfreelast+0x18c7>
f012a1c0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a1c7:	83 ec 0c             	sub    $0xc,%esp
f012a1ca:	68 58 b4 13 f0       	push   $0xf013b458
f012a1cf:	e8 59 6a fd ff       	call   f0100c2d <cprintf>
f012a1d4:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a1d7:	ff 45 f4             	incl   -0xc(%ebp)
f012a1da:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a1e1:	7e bb                	jle    f012a19e <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a1e3:	83 ec 0c             	sub    $0xc,%esp
f012a1e6:	6a 00                	push   $0x0
f012a1e8:	e8 54 20 fe ff       	call   f010c241 <sys_bypassPageFault>
f012a1ed:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a1f0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a1f4:	75 17                	jne    f012a20d <test_kfreelast+0x18fd>
f012a1f6:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a1fa:	83 ec 08             	sub    $0x8,%esp
f012a1fd:	ff 75 f0             	pushl  -0x10(%ebp)
f012a200:	68 ac b2 13 f0       	push   $0xf013b2ac
f012a205:	e8 23 6a fd ff       	call   f0100c2d <cprintf>
f012a20a:	83 c4 10             	add    $0x10,%esp
f012a20d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a214:	e8 7f 1b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a219:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a21c:	e8 6b 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a221:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012a224:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a22a:	83 ec 0c             	sub    $0xc,%esp
f012a22d:	50                   	push   %eax
f012a22e:	e8 c3 d1 fd ff       	call   f01073f6 <kfree>
f012a233:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a236:	e8 51 9a fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a23b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a23e:	74 1d                	je     f012a25d <test_kfreelast+0x194d>
f012a240:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a244:	75 17                	jne    f012a25d <test_kfreelast+0x194d>
f012a246:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a24d:	83 ec 0c             	sub    $0xc,%esp
f012a250:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a255:	e8 d3 69 fd ff       	call   f0100c2d <cprintf>
f012a25a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a25d:	e8 36 1b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a262:	89 c2                	mov    %eax,%edx
f012a264:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a267:	29 c2                	sub    %eax,%edx
f012a269:	89 d0                	mov    %edx,%eax
f012a26b:	83 f8 03             	cmp    $0x3,%eax
f012a26e:	74 1d                	je     f012a28d <test_kfreelast+0x197d>
f012a270:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a274:	75 17                	jne    f012a28d <test_kfreelast+0x197d>
f012a276:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a27d:	83 ec 0c             	sub    $0xc,%esp
f012a280:	68 40 b3 13 f0       	push   $0xf013b340
f012a285:	e8 a3 69 fd ff       	call   f0100c2d <cprintf>
f012a28a:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a28d:	e8 06 1b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a292:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a295:	e8 f2 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a29a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012a29d:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a2a3:	83 ec 0c             	sub    $0xc,%esp
f012a2a6:	50                   	push   %eax
f012a2a7:	e8 4a d1 fd ff       	call   f01073f6 <kfree>
f012a2ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a2af:	e8 d8 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a2b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2b7:	74 1d                	je     f012a2d6 <test_kfreelast+0x19c6>
f012a2b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2bd:	75 17                	jne    f012a2d6 <test_kfreelast+0x19c6>
f012a2bf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2c6:	83 ec 0c             	sub    $0xc,%esp
f012a2c9:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a2ce:	e8 5a 69 fd ff       	call   f0100c2d <cprintf>
f012a2d3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a2d6:	e8 bd 1a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a2db:	89 c2                	mov    %eax,%edx
f012a2dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a2e0:	29 c2                	sub    %eax,%edx
f012a2e2:	89 d0                	mov    %edx,%eax
f012a2e4:	83 f8 04             	cmp    $0x4,%eax
f012a2e7:	74 1d                	je     f012a306 <test_kfreelast+0x19f6>
f012a2e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2ed:	75 17                	jne    f012a306 <test_kfreelast+0x19f6>
f012a2ef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2f6:	83 ec 0c             	sub    $0xc,%esp
f012a2f9:	68 40 b3 13 f0       	push   $0xf013b340
f012a2fe:	e8 2a 69 fd ff       	call   f0100c2d <cprintf>
f012a303:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a306:	e8 8d 1a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a30b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a30e:	e8 79 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a313:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a316:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a31c:	83 ec 0c             	sub    $0xc,%esp
f012a31f:	50                   	push   %eax
f012a320:	e8 d1 d0 fd ff       	call   f01073f6 <kfree>
f012a325:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a328:	e8 5f 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a32d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a330:	74 1d                	je     f012a34f <test_kfreelast+0x1a3f>
f012a332:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a336:	75 17                	jne    f012a34f <test_kfreelast+0x1a3f>
f012a338:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a33f:	83 ec 0c             	sub    $0xc,%esp
f012a342:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a347:	e8 e1 68 fd ff       	call   f0100c2d <cprintf>
f012a34c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a34f:	e8 44 1a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a354:	89 c2                	mov    %eax,%edx
f012a356:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a359:	29 c2                	sub    %eax,%edx
f012a35b:	89 d0                	mov    %edx,%eax
f012a35d:	83 f8 05             	cmp    $0x5,%eax
f012a360:	74 1d                	je     f012a37f <test_kfreelast+0x1a6f>
f012a362:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a366:	75 17                	jne    f012a37f <test_kfreelast+0x1a6f>
f012a368:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a36f:	83 ec 0c             	sub    $0xc,%esp
f012a372:	68 40 b3 13 f0       	push   $0xf013b340
f012a377:	e8 b1 68 fd ff       	call   f0100c2d <cprintf>
f012a37c:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a37f:	e8 14 1a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a384:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a387:	e8 00 99 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a38c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012a38f:	83 ec 0c             	sub    $0xc,%esp
f012a392:	68 00 c8 00 00       	push   $0xc800
f012a397:	e8 40 d0 fd ff       	call   f01073dc <kmalloc>
f012a39c:	83 c4 10             	add    $0x10,%esp
f012a39f:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a3a5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a3ab:	89 c1                	mov    %eax,%ecx
f012a3ad:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012a3b4:	10 00 00 
f012a3b7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012a3bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3c2:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012a3c8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a3ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3d3:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012a3d9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a3df:	29 d0                	sub    %edx,%eax
f012a3e1:	89 c3                	mov    %eax,%ebx
f012a3e3:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012a3ea:	10 00 00 
f012a3ed:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a3f2:	0f b6 d0             	movzbl %al,%edx
f012a3f5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012a3fb:	01 d0                	add    %edx,%eax
f012a3fd:	48                   	dec    %eax
f012a3fe:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012a404:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a40a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a40f:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012a415:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a41b:	29 d0                	sub    %edx,%eax
f012a41d:	01 c3                	add    %eax,%ebx
f012a41f:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012a426:	10 00 00 
f012a429:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a42e:	0f b6 c0             	movzbl %al,%eax
f012a431:	c1 e0 04             	shl    $0x4,%eax
f012a434:	89 c2                	mov    %eax,%edx
f012a436:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012a43c:	01 d0                	add    %edx,%eax
f012a43e:	48                   	dec    %eax
f012a43f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012a445:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a44b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a450:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012a456:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a45c:	29 d0                	sub    %edx,%eax
f012a45e:	01 d8                	add    %ebx,%eax
f012a460:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a465:	39 c1                	cmp    %eax,%ecx
f012a467:	74 1d                	je     f012a486 <test_kfreelast+0x1b76>
f012a469:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a46d:	75 17                	jne    f012a486 <test_kfreelast+0x1b76>
f012a46f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a476:	83 ec 0c             	sub    $0xc,%esp
f012a479:	68 78 b3 13 f0       	push   $0xf013b378
f012a47e:	e8 aa 67 fd ff       	call   f0100c2d <cprintf>
f012a483:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a486:	e8 01 98 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a48b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a48e:	74 1d                	je     f012a4ad <test_kfreelast+0x1b9d>
f012a490:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a494:	75 17                	jne    f012a4ad <test_kfreelast+0x1b9d>
f012a496:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a49d:	83 ec 0c             	sub    $0xc,%esp
f012a4a0:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a4a5:	e8 83 67 fd ff       	call   f0100c2d <cprintf>
f012a4aa:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a4ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a4b0:	e8 e3 18 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a4b5:	29 c3                	sub    %eax,%ebx
f012a4b7:	89 d8                	mov    %ebx,%eax
f012a4b9:	83 f8 0d             	cmp    $0xd,%eax
f012a4bc:	74 1d                	je     f012a4db <test_kfreelast+0x1bcb>
f012a4be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4c2:	75 17                	jne    f012a4db <test_kfreelast+0x1bcb>
f012a4c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a4cb:	83 ec 0c             	sub    $0xc,%esp
f012a4ce:	68 e0 b3 13 f0       	push   $0xf013b3e0
f012a4d3:	e8 55 67 fd ff       	call   f0100c2d <cprintf>
f012a4d8:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012a4db:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012a4e2:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012a4e5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a4eb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012a4ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4f5:	eb 0e                	jmp    f012a505 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012a4f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4fa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4fd:	01 d0                	add    %edx,%eax
f012a4ff:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012a502:	ff 45 f4             	incl   -0xc(%ebp)
f012a505:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012a50b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a50e:	7f e7                	jg     f012a4f7 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a510:	e8 83 18 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a515:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a518:	e8 6f 97 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a51d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012a520:	83 ec 0c             	sub    $0xc,%esp
f012a523:	68 00 fc 2f 00       	push   $0x2ffc00
f012a528:	e8 af ce fd ff       	call   f01073dc <kmalloc>
f012a52d:	83 c4 10             	add    $0x10,%esp
f012a530:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a536:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a53c:	89 c1                	mov    %eax,%ecx
f012a53e:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012a545:	10 00 00 
f012a548:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a54e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a553:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012a559:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a55f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a564:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012a56a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a570:	29 d0                	sub    %edx,%eax
f012a572:	89 c3                	mov    %eax,%ebx
f012a574:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012a57b:	10 00 00 
f012a57e:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a583:	0f b6 d0             	movzbl %al,%edx
f012a586:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a58c:	01 d0                	add    %edx,%eax
f012a58e:	48                   	dec    %eax
f012a58f:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012a595:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a59b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5a0:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012a5a6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a5ac:	29 d0                	sub    %edx,%eax
f012a5ae:	01 c3                	add    %eax,%ebx
f012a5b0:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012a5b7:	10 00 00 
f012a5ba:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012a5bf:	0f b6 c0             	movzbl %al,%eax
f012a5c2:	c1 e0 04             	shl    $0x4,%eax
f012a5c5:	89 c2                	mov    %eax,%edx
f012a5c7:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a5cd:	01 d0                	add    %edx,%eax
f012a5cf:	48                   	dec    %eax
f012a5d0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012a5d6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a5dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5e1:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012a5e7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a5ed:	29 d0                	sub    %edx,%eax
f012a5ef:	01 d8                	add    %ebx,%eax
f012a5f1:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012a5f6:	39 c1                	cmp    %eax,%ecx
f012a5f8:	74 1d                	je     f012a617 <test_kfreelast+0x1d07>
f012a5fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a5fe:	75 17                	jne    f012a617 <test_kfreelast+0x1d07>
f012a600:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a607:	83 ec 0c             	sub    $0xc,%esp
f012a60a:	68 78 b3 13 f0       	push   $0xf013b378
f012a60f:	e8 19 66 fd ff       	call   f0100c2d <cprintf>
f012a614:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a617:	e8 70 96 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a61c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a61f:	74 1d                	je     f012a63e <test_kfreelast+0x1d2e>
f012a621:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a625:	75 17                	jne    f012a63e <test_kfreelast+0x1d2e>
f012a627:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a62e:	83 ec 0c             	sub    $0xc,%esp
f012a631:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a636:	e8 f2 65 fd ff       	call   f0100c2d <cprintf>
f012a63b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a63e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a641:	e8 52 17 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a646:	29 c3                	sub    %eax,%ebx
f012a648:	89 d8                	mov    %ebx,%eax
f012a64a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a64f:	74 1d                	je     f012a66e <test_kfreelast+0x1d5e>
f012a651:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a655:	75 17                	jne    f012a66e <test_kfreelast+0x1d5e>
f012a657:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a65e:	83 ec 0c             	sub    $0xc,%esp
f012a661:	68 e0 b3 13 f0       	push   $0xf013b3e0
f012a666:	e8 c2 65 fd ff       	call   f0100c2d <cprintf>
f012a66b:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012a66e:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012a675:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012a678:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a67e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012a681:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a688:	eb 0e                	jmp    f012a698 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012a68a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a68d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a690:	01 d0                	add    %edx,%eax
f012a692:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012a695:	ff 45 f4             	incl   -0xc(%ebp)
f012a698:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012a69e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a6a1:	7f e7                	jg     f012a68a <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a6a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6a7:	75 17                	jne    f012a6c0 <test_kfreelast+0x1db0>
f012a6a9:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012a6ad:	83 ec 08             	sub    $0x8,%esp
f012a6b0:	ff 75 f0             	pushl  -0x10(%ebp)
f012a6b3:	68 ac b2 13 f0       	push   $0xf013b2ac
f012a6b8:	e8 70 65 fd ff       	call   f0100c2d <cprintf>
f012a6bd:	83 c4 10             	add    $0x10,%esp
f012a6c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a6c7:	e8 cc 16 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a6cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6cf:	e8 b8 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012a6d7:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a6dd:	83 ec 0c             	sub    $0xc,%esp
f012a6e0:	50                   	push   %eax
f012a6e1:	e8 10 cd fd ff       	call   f01073f6 <kfree>
f012a6e6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a6e9:	e8 9e 95 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a6ee:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a6f1:	74 1d                	je     f012a710 <test_kfreelast+0x1e00>
f012a6f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6f7:	75 17                	jne    f012a710 <test_kfreelast+0x1e00>
f012a6f9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a700:	83 ec 0c             	sub    $0xc,%esp
f012a703:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a708:	e8 20 65 fd ff       	call   f0100c2d <cprintf>
f012a70d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a710:	e8 83 16 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a715:	89 c2                	mov    %eax,%edx
f012a717:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a71a:	29 c2                	sub    %eax,%edx
f012a71c:	89 d0                	mov    %edx,%eax
f012a71e:	83 f8 0d             	cmp    $0xd,%eax
f012a721:	74 1d                	je     f012a740 <test_kfreelast+0x1e30>
f012a723:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a727:	75 17                	jne    f012a740 <test_kfreelast+0x1e30>
f012a729:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a730:	83 ec 0c             	sub    $0xc,%esp
f012a733:	68 40 b3 13 f0       	push   $0xf013b340
f012a738:	e8 f0 64 fd ff       	call   f0100c2d <cprintf>
f012a73d:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a740:	83 ec 0c             	sub    $0xc,%esp
f012a743:	6a 03                	push   $0x3
f012a745:	e8 f7 1a fe ff       	call   f010c241 <sys_bypassPageFault>
f012a74a:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012a74d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a753:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012a756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a75d:	eb 3c                	jmp    f012a79b <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012a75f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a762:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a765:	01 d0                	add    %edx,%eax
f012a767:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a76a:	e8 c0 1a fe ff       	call   f010c22f <sys_rcr2>
f012a76f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a772:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a775:	01 ca                	add    %ecx,%edx
f012a777:	39 d0                	cmp    %edx,%eax
f012a779:	74 1d                	je     f012a798 <test_kfreelast+0x1e88>
f012a77b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a77f:	75 17                	jne    f012a798 <test_kfreelast+0x1e88>
f012a781:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a788:	83 ec 0c             	sub    $0xc,%esp
f012a78b:	68 58 b4 13 f0       	push   $0xf013b458
f012a790:	e8 98 64 fd ff       	call   f0100c2d <cprintf>
f012a795:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012a798:	ff 45 f4             	incl   -0xc(%ebp)
f012a79b:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012a7a2:	7e bb                	jle    f012a75f <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a7a4:	83 ec 0c             	sub    $0xc,%esp
f012a7a7:	6a 00                	push   $0x0
f012a7a9:	e8 93 1a fe ff       	call   f010c241 <sys_bypassPageFault>
f012a7ae:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012a7b1:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a7b7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012a7ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7c1:	eb 1e                	jmp    f012a7e1 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012a7c3:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012a7c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a7cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7cf:	01 c8                	add    %ecx,%eax
f012a7d1:	8a 00                	mov    (%eax),%al
f012a7d3:	0f be c0             	movsbl %al,%eax
f012a7d6:	01 d0                	add    %edx,%eax
f012a7d8:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012a7de:	ff 45 f4             	incl   -0xc(%ebp)
f012a7e1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012a7e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7ea:	7f d7                	jg     f012a7c3 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a7ec:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012a7f2:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012a7f8:	89 d0                	mov    %edx,%eax
f012a7fa:	01 c0                	add    %eax,%eax
f012a7fc:	01 d0                	add    %edx,%eax
f012a7fe:	01 c0                	add    %eax,%eax
f012a800:	01 d0                	add    %edx,%eax
f012a802:	01 c0                	add    %eax,%eax
f012a804:	39 c1                	cmp    %eax,%ecx
f012a806:	74 1d                	je     f012a825 <test_kfreelast+0x1f15>
f012a808:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a80c:	75 17                	jne    f012a825 <test_kfreelast+0x1f15>
f012a80e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a815:	83 ec 0c             	sub    $0xc,%esp
f012a818:	68 24 b4 13 f0       	push   $0xf013b424
f012a81d:	e8 0b 64 fd ff       	call   f0100c2d <cprintf>
f012a822:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a825:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a829:	75 17                	jne    f012a842 <test_kfreelast+0x1f32>
f012a82b:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a82f:	83 ec 08             	sub    $0x8,%esp
f012a832:	ff 75 f0             	pushl  -0x10(%ebp)
f012a835:	68 ac b2 13 f0       	push   $0xf013b2ac
f012a83a:	e8 ee 63 fd ff       	call   f0100c2d <cprintf>
f012a83f:	83 c4 10             	add    $0x10,%esp
f012a842:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a849:	e8 4a 15 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a84e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a851:	e8 36 94 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a856:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012a859:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a85f:	83 ec 0c             	sub    $0xc,%esp
f012a862:	50                   	push   %eax
f012a863:	e8 8e cb fd ff       	call   f01073f6 <kfree>
f012a868:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a86b:	e8 1c 94 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a870:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a873:	74 1d                	je     f012a892 <test_kfreelast+0x1f82>
f012a875:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a879:	75 17                	jne    f012a892 <test_kfreelast+0x1f82>
f012a87b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a882:	83 ec 0c             	sub    $0xc,%esp
f012a885:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a88a:	e8 9e 63 fd ff       	call   f0100c2d <cprintf>
f012a88f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a892:	e8 01 15 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a897:	89 c2                	mov    %eax,%edx
f012a899:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a89c:	29 c2                	sub    %eax,%edx
f012a89e:	89 d0                	mov    %edx,%eax
f012a8a0:	83 f8 02             	cmp    $0x2,%eax
f012a8a3:	74 1d                	je     f012a8c2 <test_kfreelast+0x1fb2>
f012a8a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8a9:	75 17                	jne    f012a8c2 <test_kfreelast+0x1fb2>
f012a8ab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8b2:	83 ec 0c             	sub    $0xc,%esp
f012a8b5:	68 40 b3 13 f0       	push   $0xf013b340
f012a8ba:	e8 6e 63 fd ff       	call   f0100c2d <cprintf>
f012a8bf:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8c2:	e8 d1 14 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a8c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8ca:	e8 bd 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a8cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012a8d2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a8d8:	83 ec 0c             	sub    $0xc,%esp
f012a8db:	50                   	push   %eax
f012a8dc:	e8 15 cb fd ff       	call   f01073f6 <kfree>
f012a8e1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a8e4:	e8 a3 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a8e9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8ec:	74 1d                	je     f012a90b <test_kfreelast+0x1ffb>
f012a8ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8f2:	75 17                	jne    f012a90b <test_kfreelast+0x1ffb>
f012a8f4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8fb:	83 ec 0c             	sub    $0xc,%esp
f012a8fe:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a903:	e8 25 63 fd ff       	call   f0100c2d <cprintf>
f012a908:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a90b:	e8 88 14 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a910:	89 c2                	mov    %eax,%edx
f012a912:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a915:	29 c2                	sub    %eax,%edx
f012a917:	89 d0                	mov    %edx,%eax
f012a919:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a91e:	74 1d                	je     f012a93d <test_kfreelast+0x202d>
f012a920:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a924:	75 17                	jne    f012a93d <test_kfreelast+0x202d>
f012a926:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a92d:	83 ec 0c             	sub    $0xc,%esp
f012a930:	68 40 b3 13 f0       	push   $0xf013b340
f012a935:	e8 f3 62 fd ff       	call   f0100c2d <cprintf>
f012a93a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a93d:	e8 56 14 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a942:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a945:	e8 42 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a94a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012a94d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a953:	83 ec 0c             	sub    $0xc,%esp
f012a956:	50                   	push   %eax
f012a957:	e8 9a ca fd ff       	call   f01073f6 <kfree>
f012a95c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a95f:	e8 28 93 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a964:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a967:	74 1d                	je     f012a986 <test_kfreelast+0x2076>
f012a969:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a96d:	75 17                	jne    f012a986 <test_kfreelast+0x2076>
f012a96f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a976:	83 ec 0c             	sub    $0xc,%esp
f012a979:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a97e:	e8 aa 62 fd ff       	call   f0100c2d <cprintf>
f012a983:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a986:	e8 0d 14 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a98b:	89 c2                	mov    %eax,%edx
f012a98d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a990:	29 c2                	sub    %eax,%edx
f012a992:	89 d0                	mov    %edx,%eax
f012a994:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a999:	74 1d                	je     f012a9b8 <test_kfreelast+0x20a8>
f012a99b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a99f:	75 17                	jne    f012a9b8 <test_kfreelast+0x20a8>
f012a9a1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9a8:	83 ec 0c             	sub    $0xc,%esp
f012a9ab:	68 40 b3 13 f0       	push   $0xf013b340
f012a9b0:	e8 78 62 fd ff       	call   f0100c2d <cprintf>
f012a9b5:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a9b8:	e8 db 13 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012a9bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a9c0:	e8 c7 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012a9c8:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a9ce:	83 ec 0c             	sub    $0xc,%esp
f012a9d1:	50                   	push   %eax
f012a9d2:	e8 1f ca fd ff       	call   f01073f6 <kfree>
f012a9d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9da:	e8 ad 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012a9df:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9e2:	74 1d                	je     f012aa01 <test_kfreelast+0x20f1>
f012a9e4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9e8:	75 17                	jne    f012aa01 <test_kfreelast+0x20f1>
f012a9ea:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9f1:	83 ec 0c             	sub    $0xc,%esp
f012a9f4:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012a9f9:	e8 2f 62 fd ff       	call   f0100c2d <cprintf>
f012a9fe:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa01:	e8 92 13 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012aa06:	89 c2                	mov    %eax,%edx
f012aa08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa0b:	29 c2                	sub    %eax,%edx
f012aa0d:	89 d0                	mov    %edx,%eax
f012aa0f:	83 f8 01             	cmp    $0x1,%eax
f012aa12:	74 1d                	je     f012aa31 <test_kfreelast+0x2121>
f012aa14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa18:	75 17                	jne    f012aa31 <test_kfreelast+0x2121>
f012aa1a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa21:	83 ec 0c             	sub    $0xc,%esp
f012aa24:	68 40 b3 13 f0       	push   $0xf013b340
f012aa29:	e8 ff 61 fd ff       	call   f0100c2d <cprintf>
f012aa2e:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa31:	e8 62 13 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012aa36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa39:	e8 4e 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012aa41:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012aa47:	83 ec 0c             	sub    $0xc,%esp
f012aa4a:	50                   	push   %eax
f012aa4b:	e8 a6 c9 fd ff       	call   f01073f6 <kfree>
f012aa50:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aa53:	e8 34 92 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aa58:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa5b:	74 1d                	je     f012aa7a <test_kfreelast+0x216a>
f012aa5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa61:	75 17                	jne    f012aa7a <test_kfreelast+0x216a>
f012aa63:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa6a:	83 ec 0c             	sub    $0xc,%esp
f012aa6d:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012aa72:	e8 b6 61 fd ff       	call   f0100c2d <cprintf>
f012aa77:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aa7a:	e8 19 13 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012aa7f:	89 c2                	mov    %eax,%edx
f012aa81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aa84:	29 c2                	sub    %eax,%edx
f012aa86:	89 d0                	mov    %edx,%eax
f012aa88:	83 f8 01             	cmp    $0x1,%eax
f012aa8b:	74 1d                	je     f012aaaa <test_kfreelast+0x219a>
f012aa8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa91:	75 17                	jne    f012aaaa <test_kfreelast+0x219a>
f012aa93:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa9a:	83 ec 0c             	sub    $0xc,%esp
f012aa9d:	68 40 b3 13 f0       	push   $0xf013b340
f012aaa2:	e8 86 61 fd ff       	call   f0100c2d <cprintf>
f012aaa7:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012aaaa:	e8 e9 12 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012aaaf:	89 c2                	mov    %eax,%edx
f012aab1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012aab4:	39 c2                	cmp    %eax,%edx
f012aab6:	74 1d                	je     f012aad5 <test_kfreelast+0x21c5>
f012aab8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aabc:	75 17                	jne    f012aad5 <test_kfreelast+0x21c5>
f012aabe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aac5:	83 ec 0c             	sub    $0xc,%esp
f012aac8:	68 a0 b4 13 f0       	push   $0xf013b4a0
f012aacd:	e8 5b 61 fd ff       	call   f0100c2d <cprintf>
f012aad2:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012aad5:	83 ec 0c             	sub    $0xc,%esp
f012aad8:	6a 03                	push   $0x3
f012aada:	e8 62 17 fe ff       	call   f010c241 <sys_bypassPageFault>
f012aadf:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012aae2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aae9:	e9 8e 00 00 00       	jmp    f012ab7c <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012aaee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012aaf1:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012aaf8:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012aafb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aafe:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab01:	e8 29 17 fe ff       	call   f010c22f <sys_rcr2>
f012ab06:	89 c2                	mov    %eax,%edx
f012ab08:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab0b:	39 c2                	cmp    %eax,%edx
f012ab0d:	74 1d                	je     f012ab2c <test_kfreelast+0x221c>
f012ab0f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab13:	75 17                	jne    f012ab2c <test_kfreelast+0x221c>
f012ab15:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab1c:	83 ec 0c             	sub    $0xc,%esp
f012ab1f:	68 58 b4 13 f0       	push   $0xf013b458
f012ab24:	e8 04 61 fd ff       	call   f0100c2d <cprintf>
f012ab29:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012ab2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ab2f:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012ab36:	89 c2                	mov    %eax,%edx
f012ab38:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab3b:	01 d0                	add    %edx,%eax
f012ab3d:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab40:	e8 ea 16 fe ff       	call   f010c22f <sys_rcr2>
f012ab45:	89 c2                	mov    %eax,%edx
f012ab47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ab4a:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012ab51:	89 c1                	mov    %eax,%ecx
f012ab53:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab56:	01 c8                	add    %ecx,%eax
f012ab58:	39 c2                	cmp    %eax,%edx
f012ab5a:	74 1d                	je     f012ab79 <test_kfreelast+0x2269>
f012ab5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab60:	75 17                	jne    f012ab79 <test_kfreelast+0x2269>
f012ab62:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab69:	83 ec 0c             	sub    $0xc,%esp
f012ab6c:	68 58 b4 13 f0       	push   $0xf013b458
f012ab71:	e8 b7 60 fd ff       	call   f0100c2d <cprintf>
f012ab76:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012ab79:	ff 45 f4             	incl   -0xc(%ebp)
f012ab7c:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012ab80:	0f 8e 68 ff ff ff    	jle    f012aaee <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ab86:	83 ec 0c             	sub    $0xc,%esp
f012ab89:	6a 00                	push   $0x0
f012ab8b:	e8 b1 16 fe ff       	call   f010c241 <sys_bypassPageFault>
f012ab90:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ab93:	e8 00 12 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ab98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab9b:	e8 ec 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aba0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012aba3:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012aba9:	83 ec 0c             	sub    $0xc,%esp
f012abac:	50                   	push   %eax
f012abad:	e8 44 c8 fd ff       	call   f01073f6 <kfree>
f012abb2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012abb5:	e8 d2 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012abba:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abbd:	74 1d                	je     f012abdc <test_kfreelast+0x22cc>
f012abbf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abc3:	75 17                	jne    f012abdc <test_kfreelast+0x22cc>
f012abc5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abcc:	83 ec 0c             	sub    $0xc,%esp
f012abcf:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012abd4:	e8 54 60 fd ff       	call   f0100c2d <cprintf>
f012abd9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012abdc:	e8 b7 11 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012abe1:	89 c2                	mov    %eax,%edx
f012abe3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012abe6:	39 c2                	cmp    %eax,%edx
f012abe8:	74 1d                	je     f012ac07 <test_kfreelast+0x22f7>
f012abea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abee:	75 17                	jne    f012ac07 <test_kfreelast+0x22f7>
f012abf0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abf7:	83 ec 0c             	sub    $0xc,%esp
f012abfa:	68 d8 b4 13 f0       	push   $0xf013b4d8
f012abff:	e8 29 60 fd ff       	call   f0100c2d <cprintf>
f012ac04:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac07:	e8 8c 11 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ac0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac0f:	e8 78 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012ac17:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ac1d:	83 ec 0c             	sub    $0xc,%esp
f012ac20:	50                   	push   %eax
f012ac21:	e8 d0 c7 fd ff       	call   f01073f6 <kfree>
f012ac26:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac29:	e8 5e 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac2e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac31:	74 1d                	je     f012ac50 <test_kfreelast+0x2340>
f012ac33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac37:	75 17                	jne    f012ac50 <test_kfreelast+0x2340>
f012ac39:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac40:	83 ec 0c             	sub    $0xc,%esp
f012ac43:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012ac48:	e8 e0 5f fd ff       	call   f0100c2d <cprintf>
f012ac4d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ac50:	e8 43 11 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ac55:	89 c2                	mov    %eax,%edx
f012ac57:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac5a:	39 c2                	cmp    %eax,%edx
f012ac5c:	74 1d                	je     f012ac7b <test_kfreelast+0x236b>
f012ac5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac62:	75 17                	jne    f012ac7b <test_kfreelast+0x236b>
f012ac64:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac6b:	83 ec 0c             	sub    $0xc,%esp
f012ac6e:	68 d8 b4 13 f0       	push   $0xf013b4d8
f012ac73:	e8 b5 5f fd ff       	call   f0100c2d <cprintf>
f012ac78:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac7b:	e8 18 11 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ac80:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac83:	e8 04 90 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ac88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ac8b:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac91:	83 ec 0c             	sub    $0xc,%esp
f012ac94:	50                   	push   %eax
f012ac95:	e8 5c c7 fd ff       	call   f01073f6 <kfree>
f012ac9a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac9d:	e8 ea 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012aca2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aca5:	74 1d                	je     f012acc4 <test_kfreelast+0x23b4>
f012aca7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acab:	75 17                	jne    f012acc4 <test_kfreelast+0x23b4>
f012acad:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acb4:	83 ec 0c             	sub    $0xc,%esp
f012acb7:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012acbc:	e8 6c 5f fd ff       	call   f0100c2d <cprintf>
f012acc1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012acc4:	e8 cf 10 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012acc9:	89 c2                	mov    %eax,%edx
f012accb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012acce:	39 c2                	cmp    %eax,%edx
f012acd0:	74 1d                	je     f012acef <test_kfreelast+0x23df>
f012acd2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acd6:	75 17                	jne    f012acef <test_kfreelast+0x23df>
f012acd8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acdf:	83 ec 0c             	sub    $0xc,%esp
f012ace2:	68 d8 b4 13 f0       	push   $0xf013b4d8
f012ace7:	e8 41 5f fd ff       	call   f0100c2d <cprintf>
f012acec:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012acef:	e8 a4 10 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012acf4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acf7:	e8 90 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012acfc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012acff:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012ad05:	83 ec 0c             	sub    $0xc,%esp
f012ad08:	50                   	push   %eax
f012ad09:	e8 e8 c6 fd ff       	call   f01073f6 <kfree>
f012ad0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad11:	e8 76 8f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ad16:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad19:	74 1d                	je     f012ad38 <test_kfreelast+0x2428>
f012ad1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad1f:	75 17                	jne    f012ad38 <test_kfreelast+0x2428>
f012ad21:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad28:	83 ec 0c             	sub    $0xc,%esp
f012ad2b:	68 d4 b2 13 f0       	push   $0xf013b2d4
f012ad30:	e8 f8 5e fd ff       	call   f0100c2d <cprintf>
f012ad35:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012ad38:	e8 5b 10 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ad3d:	89 c2                	mov    %eax,%edx
f012ad3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad42:	39 c2                	cmp    %eax,%edx
f012ad44:	74 1d                	je     f012ad63 <test_kfreelast+0x2453>
f012ad46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad4a:	75 17                	jne    f012ad63 <test_kfreelast+0x2453>
f012ad4c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad53:	83 ec 0c             	sub    $0xc,%esp
f012ad56:	68 d8 b4 13 f0       	push   $0xf013b4d8
f012ad5b:	e8 cd 5e fd ff       	call   f0100c2d <cprintf>
f012ad60:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ad63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad67:	75 17                	jne    f012ad80 <test_kfreelast+0x2470>
f012ad69:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012ad6d:	83 ec 08             	sub    $0x8,%esp
f012ad70:	ff 75 f0             	pushl  -0x10(%ebp)
f012ad73:	68 ac b2 13 f0       	push   $0xf013b2ac
f012ad78:	e8 b0 5e fd ff       	call   f0100c2d <cprintf>
f012ad7d:	83 c4 10             	add    $0x10,%esp
f012ad80:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012ad87:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012ad8c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012ad8f:	5b                   	pop    %ebx
f012ad90:	5f                   	pop    %edi
f012ad91:	5d                   	pop    %ebp
f012ad92:	c3                   	ret    

f012ad93 <test_krealloc>:

int test_krealloc() {
f012ad93:	55                   	push   %ebp
f012ad94:	89 e5                	mov    %esp,%ebp
f012ad96:	57                   	push   %edi
f012ad97:	53                   	push   %ebx
f012ad98:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012ad9e:	83 ec 0c             	sub    $0xc,%esp
f012ada1:	68 bc a1 13 f0       	push   $0xf013a1bc
f012ada6:	e8 82 5e fd ff       	call   f0100c2d <cprintf>
f012adab:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012adae:	83 ec 0c             	sub    $0xc,%esp
f012adb1:	68 ec a1 13 f0       	push   $0xf013a1ec
f012adb6:	e8 72 5e fd ff       	call   f0100c2d <cprintf>
f012adbb:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012adbe:	83 ec 0c             	sub    $0xc,%esp
f012adc1:	68 bc a1 13 f0       	push   $0xf013a1bc
f012adc6:	e8 62 5e fd ff       	call   f0100c2d <cprintf>
f012adcb:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012adce:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012add2:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012add6:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012addc:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012ade2:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012ade9:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012adf0:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012adf6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012adfb:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae00:	89 d7                	mov    %edx,%edi
f012ae02:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012ae04:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012ae0b:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012ae11:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ae16:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae1b:	89 d7                	mov    %edx,%edi
f012ae1d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012ae1f:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012ae25:	b9 14 00 00 00       	mov    $0x14,%ecx
f012ae2a:	b8 00 00 00 00       	mov    $0x0,%eax
f012ae2f:	89 d7                	mov    %edx,%edi
f012ae31:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012ae33:	e8 60 0f fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012ae38:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012ae3b:	83 ec 08             	sub    $0x8,%esp
f012ae3e:	68 00 fc 0f 00       	push   $0xffc00
f012ae43:	6a 00                	push   $0x0
f012ae45:	e8 48 c6 fd ff       	call   f0107492 <krealloc>
f012ae4a:	83 c4 10             	add    $0x10,%esp
f012ae4d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012ae53:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ae59:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ae5e:	77 17                	ja     f012ae77 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ae60:	83 ec 04             	sub    $0x4,%esp
f012ae63:	68 20 b5 13 f0       	push   $0xf013b520
f012ae68:	68 e2 0e 00 00       	push   $0xee2
f012ae6d:	68 7a a2 13 f0       	push   $0xf013a27a
f012ae72:	e8 2f 53 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012ae77:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ae7d:	89 c1                	mov    %eax,%ecx
f012ae7f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012ae86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012ae89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ae8e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012ae91:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ae94:	ba 00 00 00 00       	mov    $0x0,%edx
f012ae99:	f7 75 b4             	divl   -0x4c(%ebp)
f012ae9c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ae9f:	29 d0                	sub    %edx,%eax
f012aea1:	89 c3                	mov    %eax,%ebx
f012aea3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012aeaa:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012aeaf:	0f b6 d0             	movzbl %al,%edx
f012aeb2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012aeb5:	01 d0                	add    %edx,%eax
f012aeb7:	48                   	dec    %eax
f012aeb8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012aebb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012aebe:	ba 00 00 00 00       	mov    $0x0,%edx
f012aec3:	f7 75 ac             	divl   -0x54(%ebp)
f012aec6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012aec9:	29 d0                	sub    %edx,%eax
f012aecb:	01 c3                	add    %eax,%ebx
f012aecd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012aed4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012aed9:	0f b6 c0             	movzbl %al,%eax
f012aedc:	c1 e0 04             	shl    $0x4,%eax
f012aedf:	89 c2                	mov    %eax,%edx
f012aee1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012aee4:	01 d0                	add    %edx,%eax
f012aee6:	48                   	dec    %eax
f012aee7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012aeea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012aeed:	ba 00 00 00 00       	mov    $0x0,%edx
f012aef2:	f7 75 a4             	divl   -0x5c(%ebp)
f012aef5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012aef8:	29 d0                	sub    %edx,%eax
f012aefa:	01 d8                	add    %ebx,%eax
f012aefc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012af01:	39 c1                	cmp    %eax,%ecx
f012af03:	74 17                	je     f012af1c <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012af05:	83 ec 04             	sub    $0x4,%esp
f012af08:	68 5c b5 13 f0       	push   $0xf013b55c
f012af0d:	68 e4 0e 00 00       	push   $0xee4
f012af12:	68 7a a2 13 f0       	push   $0xf013a27a
f012af17:	e8 8a 52 fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012af1c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012af1f:	e8 74 0e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012af24:	29 c3                	sub    %eax,%ebx
f012af26:	89 d8                	mov    %ebx,%eax
f012af28:	3d 00 01 00 00       	cmp    $0x100,%eax
f012af2d:	74 17                	je     f012af46 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012af2f:	83 ec 04             	sub    $0x4,%esp
f012af32:	68 8e b5 13 f0       	push   $0xf013b58e
f012af37:	68 e7 0e 00 00       	push   $0xee7
f012af3c:	68 7a a2 13 f0       	push   $0xf013a27a
f012af41:	e8 60 52 fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012af46:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012af4d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012af50:	e8 43 0e fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012af55:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012af58:	83 ec 08             	sub    $0x8,%esp
f012af5b:	68 00 fc 0f 00       	push   $0xffc00
f012af60:	6a 00                	push   $0x0
f012af62:	e8 2b c5 fd ff       	call   f0107492 <krealloc>
f012af67:	83 c4 10             	add    $0x10,%esp
f012af6a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012af70:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af76:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012af7b:	77 17                	ja     f012af94 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012af7d:	83 ec 04             	sub    $0x4,%esp
f012af80:	68 20 b5 13 f0       	push   $0xf013b520
f012af85:	68 ef 0e 00 00       	push   $0xeef
f012af8a:	68 7a a2 13 f0       	push   $0xf013a27a
f012af8f:	e8 12 52 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012af94:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af9a:	89 c1                	mov    %eax,%ecx
f012af9c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012afa3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012afa6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012afab:	89 45 98             	mov    %eax,-0x68(%ebp)
f012afae:	8b 45 98             	mov    -0x68(%ebp),%eax
f012afb1:	ba 00 00 00 00       	mov    $0x0,%edx
f012afb6:	f7 75 9c             	divl   -0x64(%ebp)
f012afb9:	8b 45 98             	mov    -0x68(%ebp),%eax
f012afbc:	29 d0                	sub    %edx,%eax
f012afbe:	89 c3                	mov    %eax,%ebx
f012afc0:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012afc7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012afcc:	0f b6 d0             	movzbl %al,%edx
f012afcf:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012afd2:	01 d0                	add    %edx,%eax
f012afd4:	48                   	dec    %eax
f012afd5:	89 45 90             	mov    %eax,-0x70(%ebp)
f012afd8:	8b 45 90             	mov    -0x70(%ebp),%eax
f012afdb:	ba 00 00 00 00       	mov    $0x0,%edx
f012afe0:	f7 75 94             	divl   -0x6c(%ebp)
f012afe3:	8b 45 90             	mov    -0x70(%ebp),%eax
f012afe6:	29 d0                	sub    %edx,%eax
f012afe8:	01 c3                	add    %eax,%ebx
f012afea:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012aff1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012aff6:	0f b6 c0             	movzbl %al,%eax
f012aff9:	c1 e0 04             	shl    $0x4,%eax
f012affc:	89 c2                	mov    %eax,%edx
f012affe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b001:	01 d0                	add    %edx,%eax
f012b003:	48                   	dec    %eax
f012b004:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b007:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b00a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b00f:	f7 75 8c             	divl   -0x74(%ebp)
f012b012:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b015:	29 d0                	sub    %edx,%eax
f012b017:	01 d8                	add    %ebx,%eax
f012b019:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b01e:	39 c1                	cmp    %eax,%ecx
f012b020:	74 17                	je     f012b039 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b022:	83 ec 04             	sub    $0x4,%esp
f012b025:	68 5c b5 13 f0       	push   $0xf013b55c
f012b02a:	68 f1 0e 00 00       	push   $0xef1
f012b02f:	68 7a a2 13 f0       	push   $0xf013a27a
f012b034:	e8 6d 51 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b039:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b03c:	e8 57 0d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b041:	29 c3                	sub    %eax,%ebx
f012b043:	89 d8                	mov    %ebx,%eax
f012b045:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b04a:	74 17                	je     f012b063 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b04c:	83 ec 04             	sub    $0x4,%esp
f012b04f:	68 8e b5 13 f0       	push   $0xf013b58e
f012b054:	68 f3 0e 00 00       	push   $0xef3
f012b059:	68 7a a2 13 f0       	push   $0xf013a27a
f012b05e:	e8 43 51 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b063:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b06a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b06d:	e8 26 0d fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b072:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b075:	83 ec 08             	sub    $0x8,%esp
f012b078:	68 00 fc 0f 00       	push   $0xffc00
f012b07d:	6a 00                	push   $0x0
f012b07f:	e8 0e c4 fd ff       	call   f0107492 <krealloc>
f012b084:	83 c4 10             	add    $0x10,%esp
f012b087:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b08d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b093:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b098:	77 17                	ja     f012b0b1 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b09a:	83 ec 04             	sub    $0x4,%esp
f012b09d:	68 20 b5 13 f0       	push   $0xf013b520
f012b0a2:	68 fb 0e 00 00       	push   $0xefb
f012b0a7:	68 7a a2 13 f0       	push   $0xf013a27a
f012b0ac:	e8 f5 50 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b0b1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b0b7:	89 c1                	mov    %eax,%ecx
f012b0b9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b0c0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b0c8:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b0cb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b0ce:	ba 00 00 00 00       	mov    $0x0,%edx
f012b0d3:	f7 75 84             	divl   -0x7c(%ebp)
f012b0d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b0d9:	29 d0                	sub    %edx,%eax
f012b0db:	89 c3                	mov    %eax,%ebx
f012b0dd:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b0e4:	10 00 00 
f012b0e7:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b0ec:	0f b6 d0             	movzbl %al,%edx
f012b0ef:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b0f5:	01 d0                	add    %edx,%eax
f012b0f7:	48                   	dec    %eax
f012b0f8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b0fe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b104:	ba 00 00 00 00       	mov    $0x0,%edx
f012b109:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b10f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b115:	29 d0                	sub    %edx,%eax
f012b117:	01 c3                	add    %eax,%ebx
f012b119:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b120:	10 00 00 
f012b123:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b128:	0f b6 c0             	movzbl %al,%eax
f012b12b:	c1 e0 04             	shl    $0x4,%eax
f012b12e:	89 c2                	mov    %eax,%edx
f012b130:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b136:	01 d0                	add    %edx,%eax
f012b138:	48                   	dec    %eax
f012b139:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b13f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b145:	ba 00 00 00 00       	mov    $0x0,%edx
f012b14a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b150:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b156:	29 d0                	sub    %edx,%eax
f012b158:	01 d8                	add    %ebx,%eax
f012b15a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b15f:	39 c1                	cmp    %eax,%ecx
f012b161:	74 17                	je     f012b17a <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b163:	83 ec 04             	sub    $0x4,%esp
f012b166:	68 5c b5 13 f0       	push   $0xf013b55c
f012b16b:	68 fd 0e 00 00       	push   $0xefd
f012b170:	68 7a a2 13 f0       	push   $0xf013a27a
f012b175:	e8 2c 50 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b17a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b17d:	e8 16 0c fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b182:	29 c3                	sub    %eax,%ebx
f012b184:	89 d8                	mov    %ebx,%eax
f012b186:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b18b:	74 17                	je     f012b1a4 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b18d:	83 ec 04             	sub    $0x4,%esp
f012b190:	68 8e b5 13 f0       	push   $0xf013b58e
f012b195:	68 ff 0e 00 00       	push   $0xeff
f012b19a:	68 7a a2 13 f0       	push   $0xf013a27a
f012b19f:	e8 02 50 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b1a4:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b1ab:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b1ae:	e8 e5 0b fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b1b3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b1b6:	83 ec 08             	sub    $0x8,%esp
f012b1b9:	68 00 fc 0f 00       	push   $0xffc00
f012b1be:	6a 00                	push   $0x0
f012b1c0:	e8 cd c2 fd ff       	call   f0107492 <krealloc>
f012b1c5:	83 c4 10             	add    $0x10,%esp
f012b1c8:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b1ce:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b1d4:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b1d9:	77 17                	ja     f012b1f2 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b1db:	83 ec 04             	sub    $0x4,%esp
f012b1de:	68 20 b5 13 f0       	push   $0xf013b520
f012b1e3:	68 06 0f 00 00       	push   $0xf06
f012b1e8:	68 7a a2 13 f0       	push   $0xf013a27a
f012b1ed:	e8 b4 4f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b1f2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b1f8:	89 c1                	mov    %eax,%ecx
f012b1fa:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b201:	10 00 00 
f012b204:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b20a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b20f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012b215:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b21b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b220:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012b226:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b22c:	29 d0                	sub    %edx,%eax
f012b22e:	89 c3                	mov    %eax,%ebx
f012b230:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012b237:	10 00 00 
f012b23a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b23f:	0f b6 d0             	movzbl %al,%edx
f012b242:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012b248:	01 d0                	add    %edx,%eax
f012b24a:	48                   	dec    %eax
f012b24b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012b251:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b257:	ba 00 00 00 00       	mov    $0x0,%edx
f012b25c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012b262:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b268:	29 d0                	sub    %edx,%eax
f012b26a:	01 c3                	add    %eax,%ebx
f012b26c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012b273:	10 00 00 
f012b276:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b27b:	0f b6 c0             	movzbl %al,%eax
f012b27e:	c1 e0 04             	shl    $0x4,%eax
f012b281:	89 c2                	mov    %eax,%edx
f012b283:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012b289:	01 d0                	add    %edx,%eax
f012b28b:	48                   	dec    %eax
f012b28c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012b292:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b298:	ba 00 00 00 00       	mov    $0x0,%edx
f012b29d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012b2a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b2a9:	29 d0                	sub    %edx,%eax
f012b2ab:	01 d8                	add    %ebx,%eax
f012b2ad:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012b2b2:	39 c1                	cmp    %eax,%ecx
f012b2b4:	74 17                	je     f012b2cd <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012b2b6:	83 ec 04             	sub    $0x4,%esp
f012b2b9:	68 5c b5 13 f0       	push   $0xf013b55c
f012b2be:	68 08 0f 00 00       	push   $0xf08
f012b2c3:	68 7a a2 13 f0       	push   $0xf013a27a
f012b2c8:	e8 d9 4e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b2cd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b2d0:	e8 c3 0a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b2d5:	29 c3                	sub    %eax,%ebx
f012b2d7:	89 d8                	mov    %ebx,%eax
f012b2d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b2de:	74 17                	je     f012b2f7 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012b2e0:	83 ec 04             	sub    $0x4,%esp
f012b2e3:	68 8e b5 13 f0       	push   $0xf013b58e
f012b2e8:	68 0a 0f 00 00       	push   $0xf0a
f012b2ed:	68 7a a2 13 f0       	push   $0xf013a27a
f012b2f2:	e8 af 4e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b2f7:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012b2fe:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b301:	e8 92 0a fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b306:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012b309:	83 ec 08             	sub    $0x8,%esp
f012b30c:	68 00 fc 1f 00       	push   $0x1ffc00
f012b311:	6a 00                	push   $0x0
f012b313:	e8 7a c1 fd ff       	call   f0107492 <krealloc>
f012b318:	83 c4 10             	add    $0x10,%esp
f012b31b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012b321:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b327:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012b32c:	77 17                	ja     f012b345 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b32e:	83 ec 04             	sub    $0x4,%esp
f012b331:	68 20 b5 13 f0       	push   $0xf013b520
f012b336:	68 11 0f 00 00       	push   $0xf11
f012b33b:	68 7a a2 13 f0       	push   $0xf013a27a
f012b340:	e8 61 4e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012b345:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b34b:	89 c1                	mov    %eax,%ecx
f012b34d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012b354:	10 00 00 
f012b357:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012b35d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b362:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012b368:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b36e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b373:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012b379:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b37f:	29 d0                	sub    %edx,%eax
f012b381:	89 c3                	mov    %eax,%ebx
f012b383:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012b38a:	10 00 00 
f012b38d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b392:	0f b6 d0             	movzbl %al,%edx
f012b395:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012b39b:	01 d0                	add    %edx,%eax
f012b39d:	48                   	dec    %eax
f012b39e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012b3a4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3af:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012b3b5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b3bb:	29 d0                	sub    %edx,%eax
f012b3bd:	01 c3                	add    %eax,%ebx
f012b3bf:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012b3c6:	10 00 00 
f012b3c9:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b3ce:	0f b6 c0             	movzbl %al,%eax
f012b3d1:	c1 e0 04             	shl    $0x4,%eax
f012b3d4:	89 c2                	mov    %eax,%edx
f012b3d6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012b3dc:	01 d0                	add    %edx,%eax
f012b3de:	48                   	dec    %eax
f012b3df:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012b3e5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b3eb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3f0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012b3f6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b3fc:	29 d0                	sub    %edx,%eax
f012b3fe:	01 d8                	add    %ebx,%eax
f012b400:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012b405:	39 c1                	cmp    %eax,%ecx
f012b407:	74 17                	je     f012b420 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012b409:	83 ec 04             	sub    $0x4,%esp
f012b40c:	68 5c b5 13 f0       	push   $0xf013b55c
f012b411:	68 13 0f 00 00       	push   $0xf13
f012b416:	68 7a a2 13 f0       	push   $0xf013a27a
f012b41b:	e8 86 4d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b420:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b423:	e8 70 09 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b428:	29 c3                	sub    %eax,%ebx
f012b42a:	89 d8                	mov    %ebx,%eax
f012b42c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b431:	74 17                	je     f012b44a <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012b433:	83 ec 04             	sub    $0x4,%esp
f012b436:	68 8e b5 13 f0       	push   $0xf013b58e
f012b43b:	68 15 0f 00 00       	push   $0xf15
f012b440:	68 7a a2 13 f0       	push   $0xf013a27a
f012b445:	e8 5c 4d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b44a:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012b451:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b454:	e8 3f 09 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b459:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012b45c:	83 ec 08             	sub    $0x8,%esp
f012b45f:	68 00 fc 1f 00       	push   $0x1ffc00
f012b464:	6a 00                	push   $0x0
f012b466:	e8 27 c0 fd ff       	call   f0107492 <krealloc>
f012b46b:	83 c4 10             	add    $0x10,%esp
f012b46e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012b474:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b47a:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012b47f:	77 17                	ja     f012b498 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b481:	83 ec 04             	sub    $0x4,%esp
f012b484:	68 20 b5 13 f0       	push   $0xf013b520
f012b489:	68 1c 0f 00 00       	push   $0xf1c
f012b48e:	68 7a a2 13 f0       	push   $0xf013a27a
f012b493:	e8 0e 4d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012b498:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b49e:	89 c1                	mov    %eax,%ecx
f012b4a0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012b4a7:	10 00 00 
f012b4aa:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012b4b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b4b5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012b4bb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b4c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4c6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012b4cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b4d2:	29 d0                	sub    %edx,%eax
f012b4d4:	89 c3                	mov    %eax,%ebx
f012b4d6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012b4dd:	10 00 00 
f012b4e0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b4e5:	0f b6 d0             	movzbl %al,%edx
f012b4e8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012b4ee:	01 d0                	add    %edx,%eax
f012b4f0:	48                   	dec    %eax
f012b4f1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012b4f7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b4fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012b502:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012b508:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b50e:	29 d0                	sub    %edx,%eax
f012b510:	01 c3                	add    %eax,%ebx
f012b512:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012b519:	10 00 00 
f012b51c:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b521:	0f b6 c0             	movzbl %al,%eax
f012b524:	c1 e0 04             	shl    $0x4,%eax
f012b527:	89 c2                	mov    %eax,%edx
f012b529:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b52f:	01 d0                	add    %edx,%eax
f012b531:	48                   	dec    %eax
f012b532:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012b538:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b53e:	ba 00 00 00 00       	mov    $0x0,%edx
f012b543:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012b549:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b54f:	29 d0                	sub    %edx,%eax
f012b551:	01 d8                	add    %ebx,%eax
f012b553:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012b558:	39 c1                	cmp    %eax,%ecx
f012b55a:	74 17                	je     f012b573 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012b55c:	83 ec 04             	sub    $0x4,%esp
f012b55f:	68 5c b5 13 f0       	push   $0xf013b55c
f012b564:	68 1e 0f 00 00       	push   $0xf1e
f012b569:	68 7a a2 13 f0       	push   $0xf013a27a
f012b56e:	e8 33 4c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b573:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b576:	e8 1d 08 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b57b:	29 c3                	sub    %eax,%ebx
f012b57d:	89 d8                	mov    %ebx,%eax
f012b57f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b584:	74 17                	je     f012b59d <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012b586:	83 ec 04             	sub    $0x4,%esp
f012b589:	68 8e b5 13 f0       	push   $0xf013b58e
f012b58e:	68 20 0f 00 00       	push   $0xf20
f012b593:	68 7a a2 13 f0       	push   $0xf013a27a
f012b598:	e8 09 4c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b59d:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012b5a4:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b5a7:	e8 ec 07 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b5ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012b5af:	83 ec 08             	sub    $0x8,%esp
f012b5b2:	68 00 fc 2f 00       	push   $0x2ffc00
f012b5b7:	6a 00                	push   $0x0
f012b5b9:	e8 d4 be fd ff       	call   f0107492 <krealloc>
f012b5be:	83 c4 10             	add    $0x10,%esp
f012b5c1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012b5c7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5cd:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012b5d2:	77 17                	ja     f012b5eb <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b5d4:	83 ec 04             	sub    $0x4,%esp
f012b5d7:	68 20 b5 13 f0       	push   $0xf013b520
f012b5dc:	68 27 0f 00 00       	push   $0xf27
f012b5e1:	68 7a a2 13 f0       	push   $0xf013a27a
f012b5e6:	e8 bb 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012b5eb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b5f1:	89 c1                	mov    %eax,%ecx
f012b5f3:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012b5fa:	10 00 00 
f012b5fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b603:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b608:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012b60e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b614:	ba 00 00 00 00       	mov    $0x0,%edx
f012b619:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012b61f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b625:	29 d0                	sub    %edx,%eax
f012b627:	89 c3                	mov    %eax,%ebx
f012b629:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012b630:	10 00 00 
f012b633:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b638:	0f b6 d0             	movzbl %al,%edx
f012b63b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012b641:	01 d0                	add    %edx,%eax
f012b643:	48                   	dec    %eax
f012b644:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012b64a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b650:	ba 00 00 00 00       	mov    $0x0,%edx
f012b655:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012b65b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b661:	29 d0                	sub    %edx,%eax
f012b663:	01 c3                	add    %eax,%ebx
f012b665:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b66c:	10 00 00 
f012b66f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b674:	0f b6 c0             	movzbl %al,%eax
f012b677:	c1 e0 04             	shl    $0x4,%eax
f012b67a:	89 c2                	mov    %eax,%edx
f012b67c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b682:	01 d0                	add    %edx,%eax
f012b684:	48                   	dec    %eax
f012b685:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b68b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b691:	ba 00 00 00 00       	mov    $0x0,%edx
f012b696:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b69c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b6a2:	29 d0                	sub    %edx,%eax
f012b6a4:	01 d8                	add    %ebx,%eax
f012b6a6:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012b6ab:	39 c1                	cmp    %eax,%ecx
f012b6ad:	74 17                	je     f012b6c6 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012b6af:	83 ec 04             	sub    $0x4,%esp
f012b6b2:	68 5c b5 13 f0       	push   $0xf013b55c
f012b6b7:	68 29 0f 00 00       	push   $0xf29
f012b6bc:	68 7a a2 13 f0       	push   $0xf013a27a
f012b6c1:	e8 e0 4a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012b6c6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6c9:	e8 ca 06 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b6ce:	29 c3                	sub    %eax,%ebx
f012b6d0:	89 d8                	mov    %ebx,%eax
f012b6d2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b6d7:	74 17                	je     f012b6f0 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012b6d9:	83 ec 04             	sub    $0x4,%esp
f012b6dc:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012b6e1:	68 2b 0f 00 00       	push   $0xf2b
f012b6e6:	68 7a a2 13 f0       	push   $0xf013a27a
f012b6eb:	e8 b6 4a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012b6f0:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012b6f7:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b6fa:	e8 99 06 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b6ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012b702:	83 ec 08             	sub    $0x8,%esp
f012b705:	68 00 fc 2f 00       	push   $0x2ffc00
f012b70a:	6a 00                	push   $0x0
f012b70c:	e8 81 bd fd ff       	call   f0107492 <krealloc>
f012b711:	83 c4 10             	add    $0x10,%esp
f012b714:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012b71a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b720:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012b725:	77 17                	ja     f012b73e <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b727:	83 ec 04             	sub    $0x4,%esp
f012b72a:	68 20 b5 13 f0       	push   $0xf013b520
f012b72f:	68 32 0f 00 00       	push   $0xf32
f012b734:	68 7a a2 13 f0       	push   $0xf013a27a
f012b739:	e8 68 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012b73e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b744:	89 c1                	mov    %eax,%ecx
f012b746:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b74d:	10 00 00 
f012b750:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b756:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b75b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b761:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b767:	ba 00 00 00 00       	mov    $0x0,%edx
f012b76c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b772:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b778:	29 d0                	sub    %edx,%eax
f012b77a:	89 c3                	mov    %eax,%ebx
f012b77c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b783:	10 00 00 
f012b786:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b78b:	0f b6 d0             	movzbl %al,%edx
f012b78e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b794:	01 d0                	add    %edx,%eax
f012b796:	48                   	dec    %eax
f012b797:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b79d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7a8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b7ae:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7b4:	29 d0                	sub    %edx,%eax
f012b7b6:	01 c3                	add    %eax,%ebx
f012b7b8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b7bf:	10 00 00 
f012b7c2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012b7c7:	0f b6 c0             	movzbl %al,%eax
f012b7ca:	c1 e0 04             	shl    $0x4,%eax
f012b7cd:	89 c2                	mov    %eax,%edx
f012b7cf:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b7d5:	01 d0                	add    %edx,%eax
f012b7d7:	48                   	dec    %eax
f012b7d8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b7de:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7e9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b7ef:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b7f5:	29 d0                	sub    %edx,%eax
f012b7f7:	01 d8                	add    %ebx,%eax
f012b7f9:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012b7fe:	39 c1                	cmp    %eax,%ecx
f012b800:	74 17                	je     f012b819 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012b802:	83 ec 04             	sub    $0x4,%esp
f012b805:	68 5c b5 13 f0       	push   $0xf013b55c
f012b80a:	68 34 0f 00 00       	push   $0xf34
f012b80f:	68 7a a2 13 f0       	push   $0xf013a27a
f012b814:	e8 8d 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012b819:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b81c:	e8 77 05 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b821:	29 c3                	sub    %eax,%ebx
f012b823:	89 d8                	mov    %ebx,%eax
f012b825:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b82a:	74 17                	je     f012b843 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012b82c:	83 ec 04             	sub    $0x4,%esp
f012b82f:	68 8e b5 13 f0       	push   $0xf013b58e
f012b834:	68 36 0f 00 00       	push   $0xf36
f012b839:	68 7a a2 13 f0       	push   $0xf013a27a
f012b83e:	e8 63 49 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012b843:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012b84a:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012b84d:	e8 46 05 fe ff       	call   f010bd98 <sys_calculate_free_frames>
f012b852:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012b855:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012b85c:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012b85f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b865:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012b86b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b871:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012b874:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012b876:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012b87c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b882:	01 c2                	add    %eax,%edx
f012b884:	8a 45 ce             	mov    -0x32(%ebp),%al
f012b887:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b889:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b88f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012b895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b89c:	eb 11                	jmp    f012b8af <test_krealloc+0xb1c>
			ptr[i] = 2;
f012b89e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b8a1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b8a7:	01 d0                	add    %edx,%eax
f012b8a9:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012b8ac:	ff 45 f4             	incl   -0xc(%ebp)
f012b8af:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b8b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8b8:	7d e4                	jge    f012b89e <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012b8ba:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b8c0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012b8c6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b8cc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012b8d2:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012b8d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b8df:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b8e5:	01 d0                	add    %edx,%eax
f012b8e7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012b8ed:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b8f3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012b8f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012b900:	eb 1b                	jmp    f012b91d <test_krealloc+0xb8a>
			intArr[i] = 4;
f012b902:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012b905:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b90c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b912:	01 d0                	add    %edx,%eax
f012b914:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012b91a:	ff 45 f0             	incl   -0x10(%ebp)
f012b91d:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012b923:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012b926:	7d da                	jge    f012b902 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012b928:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b92e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012b934:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012b93b:	eb 17                	jmp    f012b954 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012b93d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012b940:	01 c0                	add    %eax,%eax
f012b942:	89 c2                	mov    %eax,%edx
f012b944:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b94a:	01 d0                	add    %edx,%eax
f012b94c:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012b951:	ff 45 ec             	incl   -0x14(%ebp)
f012b954:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012b95a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012b95d:	7d de                	jge    f012b93d <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012b95f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b965:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012b96b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b971:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012b976:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012b97c:	01 c0                	add    %eax,%eax
f012b97e:	89 c2                	mov    %eax,%edx
f012b980:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b986:	01 d0                	add    %edx,%eax
f012b988:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012b98d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b993:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012b999:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012b9a0:	eb 49                	jmp    f012b9eb <test_krealloc+0xc58>
			structArr[i].a = 7;
f012b9a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012b9a5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b9ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b9b2:	01 d0                	add    %edx,%eax
f012b9b4:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012b9b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012b9ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b9c1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b9c7:	01 d0                	add    %edx,%eax
f012b9c9:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012b9cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012b9d2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b9d9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b9df:	01 d0                	add    %edx,%eax
f012b9e1:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012b9e8:	ff 45 e8             	incl   -0x18(%ebp)
f012b9eb:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012b9f1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012b9f4:	7d ac                	jge    f012b9a2 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012b9f6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b9fc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012ba02:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba08:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012ba0b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012ba17:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba1d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ba24:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba2a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba31:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba37:	01 d0                	add    %edx,%eax
f012ba39:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ba3c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba4f:	01 d0                	add    %edx,%eax
f012ba51:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012ba57:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012ba5d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ba64:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ba6a:	01 d0                	add    %edx,%eax
f012ba6c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ba73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ba79:	8a 00                	mov    (%eax),%al
f012ba7b:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012ba7e:	75 17                	jne    f012ba97 <test_krealloc+0xd04>
f012ba80:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ba86:	89 c2                	mov    %eax,%edx
f012ba88:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012ba8e:	01 d0                	add    %edx,%eax
f012ba90:	8a 00                	mov    (%eax),%al
f012ba92:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012ba95:	74 17                	je     f012baae <test_krealloc+0xd1b>
			panic(
f012ba97:	83 ec 04             	sub    $0x4,%esp
f012ba9a:	68 ac b5 13 f0       	push   $0xf013b5ac
f012ba9f:	68 79 0f 00 00       	push   $0xf79
f012baa4:	68 7a a2 13 f0       	push   $0xf013a27a
f012baa9:	e8 f8 46 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012baae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bab4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012baba:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bac0:	8a 00                	mov    (%eax),%al
f012bac2:	3c 02                	cmp    $0x2,%al
f012bac4:	75 16                	jne    f012badc <test_krealloc+0xd49>
f012bac6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bacc:	89 c2                	mov    %eax,%edx
f012bace:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bad4:	01 d0                	add    %edx,%eax
f012bad6:	8a 00                	mov    (%eax),%al
f012bad8:	3c 02                	cmp    $0x2,%al
f012bada:	74 20                	je     f012bafc <test_krealloc+0xd69>
			panic(
f012badc:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bae2:	8a 00                	mov    (%eax),%al
f012bae4:	0f be c0             	movsbl %al,%eax
f012bae7:	50                   	push   %eax
f012bae8:	68 ec b5 13 f0       	push   $0xf013b5ec
f012baed:	68 7f 0f 00 00       	push   $0xf7f
f012baf2:	68 7a a2 13 f0       	push   $0xf013a27a
f012baf7:	e8 aa 46 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012bafc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bb02:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012bb08:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb0e:	8b 00                	mov    (%eax),%eax
f012bb10:	83 f8 03             	cmp    $0x3,%eax
f012bb13:	75 1c                	jne    f012bb31 <test_krealloc+0xd9e>
f012bb15:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bb1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bb22:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb28:	01 d0                	add    %edx,%eax
f012bb2a:	8b 00                	mov    (%eax),%eax
f012bb2c:	83 f8 03             	cmp    $0x3,%eax
f012bb2f:	74 17                	je     f012bb48 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012bb31:	83 ec 04             	sub    $0x4,%esp
f012bb34:	68 38 b6 13 f0       	push   $0xf013b638
f012bb39:	68 83 0f 00 00       	push   $0xf83
f012bb3e:	68 7a a2 13 f0       	push   $0xf013a27a
f012bb43:	e8 5e 46 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012bb48:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb4e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012bb54:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb5a:	8b 00                	mov    (%eax),%eax
f012bb5c:	83 f8 04             	cmp    $0x4,%eax
f012bb5f:	75 1c                	jne    f012bb7d <test_krealloc+0xdea>
f012bb61:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bb67:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bb6e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bb74:	01 d0                	add    %edx,%eax
f012bb76:	8b 00                	mov    (%eax),%eax
f012bb78:	83 f8 04             	cmp    $0x4,%eax
f012bb7b:	74 17                	je     f012bb94 <test_krealloc+0xe01>
			panic(
f012bb7d:	83 ec 04             	sub    $0x4,%esp
f012bb80:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bb85:	68 88 0f 00 00       	push   $0xf88
f012bb8a:	68 7a a2 13 f0       	push   $0xf013a27a
f012bb8f:	e8 12 46 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012bb94:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bb9a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012bba0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bba6:	66 8b 00             	mov    (%eax),%ax
f012bba9:	66 83 f8 05          	cmp    $0x5,%ax
f012bbad:	75 1b                	jne    f012bbca <test_krealloc+0xe37>
f012bbaf:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bbb5:	01 c0                	add    %eax,%eax
f012bbb7:	89 c2                	mov    %eax,%edx
f012bbb9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bbbf:	01 d0                	add    %edx,%eax
f012bbc1:	66 8b 00             	mov    (%eax),%ax
f012bbc4:	66 83 f8 05          	cmp    $0x5,%ax
f012bbc8:	74 17                	je     f012bbe1 <test_krealloc+0xe4e>
			panic(
f012bbca:	83 ec 04             	sub    $0x4,%esp
f012bbcd:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bbd2:	68 8d 0f 00 00       	push   $0xf8d
f012bbd7:	68 7a a2 13 f0       	push   $0xf013a27a
f012bbdc:	e8 c5 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012bbe1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bbe7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012bbed:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bbf3:	66 8b 00             	mov    (%eax),%ax
f012bbf6:	66 83 f8 06          	cmp    $0x6,%ax
f012bbfa:	75 1b                	jne    f012bc17 <test_krealloc+0xe84>
f012bbfc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bc02:	01 c0                	add    %eax,%eax
f012bc04:	89 c2                	mov    %eax,%edx
f012bc06:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bc0c:	01 d0                	add    %edx,%eax
f012bc0e:	66 8b 00             	mov    (%eax),%ax
f012bc11:	66 83 f8 06          	cmp    $0x6,%ax
f012bc15:	74 17                	je     f012bc2e <test_krealloc+0xe9b>
			panic(
f012bc17:	83 ec 04             	sub    $0x4,%esp
f012bc1a:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bc1f:	68 92 0f 00 00       	push   $0xf92
f012bc24:	68 7a a2 13 f0       	push   $0xf013a27a
f012bc29:	e8 78 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012bc2e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bc34:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012bc3a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc40:	8a 00                	mov    (%eax),%al
f012bc42:	3c 07                	cmp    $0x7,%al
f012bc44:	75 1b                	jne    f012bc61 <test_krealloc+0xece>
f012bc46:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bc4c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bc53:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc59:	01 d0                	add    %edx,%eax
f012bc5b:	8a 00                	mov    (%eax),%al
f012bc5d:	3c 07                	cmp    $0x7,%al
f012bc5f:	74 17                	je     f012bc78 <test_krealloc+0xee5>
			panic(
f012bc61:	83 ec 04             	sub    $0x4,%esp
f012bc64:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bc69:	68 97 0f 00 00       	push   $0xf97
f012bc6e:	68 7a a2 13 f0       	push   $0xf013a27a
f012bc73:	e8 2e 45 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012bc78:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc7e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bc82:	66 83 f8 07          	cmp    $0x7,%ax
f012bc86:	75 1f                	jne    f012bca7 <test_krealloc+0xf14>
f012bc88:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bc8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bc95:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bc9b:	01 d0                	add    %edx,%eax
f012bc9d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bca1:	66 83 f8 07          	cmp    $0x7,%ax
f012bca5:	74 17                	je     f012bcbe <test_krealloc+0xf2b>
			panic(
f012bca7:	83 ec 04             	sub    $0x4,%esp
f012bcaa:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bcaf:	68 9a 0f 00 00       	push   $0xf9a
f012bcb4:	68 7a a2 13 f0       	push   $0xf013a27a
f012bcb9:	e8 e8 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012bcbe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bcc4:	8b 40 04             	mov    0x4(%eax),%eax
f012bcc7:	83 f8 07             	cmp    $0x7,%eax
f012bcca:	75 1d                	jne    f012bce9 <test_krealloc+0xf56>
f012bccc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bcd2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bcd9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bcdf:	01 d0                	add    %edx,%eax
f012bce1:	8b 40 04             	mov    0x4(%eax),%eax
f012bce4:	83 f8 07             	cmp    $0x7,%eax
f012bce7:	74 17                	je     f012bd00 <test_krealloc+0xf6d>
			panic(
f012bce9:	83 ec 04             	sub    $0x4,%esp
f012bcec:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bcf1:	68 9d 0f 00 00       	push   $0xf9d
f012bcf6:	68 7a a2 13 f0       	push   $0xf013a27a
f012bcfb:	e8 a6 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012bd00:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bd06:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012bd0c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd12:	8a 00                	mov    (%eax),%al
f012bd14:	3c 08                	cmp    $0x8,%al
f012bd16:	75 1b                	jne    f012bd33 <test_krealloc+0xfa0>
f012bd18:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bd1e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd25:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd2b:	01 d0                	add    %edx,%eax
f012bd2d:	8a 00                	mov    (%eax),%al
f012bd2f:	3c 08                	cmp    $0x8,%al
f012bd31:	74 17                	je     f012bd4a <test_krealloc+0xfb7>
			panic(
f012bd33:	83 ec 04             	sub    $0x4,%esp
f012bd36:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bd3b:	68 a2 0f 00 00       	push   $0xfa2
f012bd40:	68 7a a2 13 f0       	push   $0xf013a27a
f012bd45:	e8 5c 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012bd4a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd50:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bd54:	66 83 f8 08          	cmp    $0x8,%ax
f012bd58:	75 1f                	jne    f012bd79 <test_krealloc+0xfe6>
f012bd5a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bd60:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd67:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd6d:	01 d0                	add    %edx,%eax
f012bd6f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bd73:	66 83 f8 08          	cmp    $0x8,%ax
f012bd77:	74 17                	je     f012bd90 <test_krealloc+0xffd>
			panic(
f012bd79:	83 ec 04             	sub    $0x4,%esp
f012bd7c:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bd81:	68 a5 0f 00 00       	push   $0xfa5
f012bd86:	68 7a a2 13 f0       	push   $0xf013a27a
f012bd8b:	e8 16 44 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012bd90:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd96:	8b 40 04             	mov    0x4(%eax),%eax
f012bd99:	83 f8 08             	cmp    $0x8,%eax
f012bd9c:	75 1d                	jne    f012bdbb <test_krealloc+0x1028>
f012bd9e:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012bda4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bdab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdb1:	01 d0                	add    %edx,%eax
f012bdb3:	8b 40 04             	mov    0x4(%eax),%eax
f012bdb6:	83 f8 08             	cmp    $0x8,%eax
f012bdb9:	74 17                	je     f012bdd2 <test_krealloc+0x103f>
			panic(
f012bdbb:	83 ec 04             	sub    $0x4,%esp
f012bdbe:	68 ac b5 13 f0       	push   $0xf013b5ac
f012bdc3:	68 a8 0f 00 00       	push   $0xfa8
f012bdc8:	68 7a a2 13 f0       	push   $0xf013a27a
f012bdcd:	e8 d4 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012bdd2:	e8 c1 ff fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012bdd7:	89 c2                	mov    %eax,%edx
f012bdd9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bddc:	39 c2                	cmp    %eax,%edx
f012bdde:	74 17                	je     f012bdf7 <test_krealloc+0x1064>
			panic(
f012bde0:	83 ec 04             	sub    $0x4,%esp
f012bde3:	68 6c b6 13 f0       	push   $0xf013b66c
f012bde8:	68 ac 0f 00 00       	push   $0xfac
f012bded:	68 7a a2 13 f0       	push   $0xf013a27a
f012bdf2:	e8 af 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012bdf7:	83 ec 0c             	sub    $0xc,%esp
f012bdfa:	68 b8 b6 13 f0       	push   $0xf013b6b8
f012bdff:	e8 29 4e fd ff       	call   f0100c2d <cprintf>
f012be04:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012be07:	e8 8c ff fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012be0c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012be0f:	e8 78 7e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012be14:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012be1a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012be20:	83 ec 08             	sub    $0x8,%esp
f012be23:	6a 00                	push   $0x0
f012be25:	50                   	push   %eax
f012be26:	e8 67 b6 fd ff       	call   f0107492 <krealloc>
f012be2b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012be2e:	e8 59 7e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012be33:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012be39:	74 17                	je     f012be52 <test_krealloc+0x10bf>
			panic(
f012be3b:	83 ec 04             	sub    $0x4,%esp
f012be3e:	68 dc b6 13 f0       	push   $0xf013b6dc
f012be43:	68 b9 0f 00 00       	push   $0xfb9
f012be48:	68 7a a2 13 f0       	push   $0xf013a27a
f012be4d:	e8 54 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012be52:	e8 41 ff fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012be57:	89 c2                	mov    %eax,%edx
f012be59:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012be5c:	29 c2                	sub    %eax,%edx
f012be5e:	89 d0                	mov    %edx,%eax
f012be60:	3d 00 01 00 00       	cmp    $0x100,%eax
f012be65:	74 17                	je     f012be7e <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012be67:	83 ec 04             	sub    $0x4,%esp
f012be6a:	68 50 b7 13 f0       	push   $0xf013b750
f012be6f:	68 bb 0f 00 00       	push   $0xfbb
f012be74:	68 7a a2 13 f0       	push   $0xf013a27a
f012be79:	e8 28 43 fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012be7e:	e8 15 ff fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012be83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012be86:	e8 01 7e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012be8b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012be91:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012be97:	83 ec 08             	sub    $0x8,%esp
f012be9a:	6a 00                	push   $0x0
f012be9c:	50                   	push   %eax
f012be9d:	e8 f0 b5 fd ff       	call   f0107492 <krealloc>
f012bea2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bea5:	e8 e2 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012beaa:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012beb0:	74 17                	je     f012bec9 <test_krealloc+0x1136>
			panic(
f012beb2:	83 ec 04             	sub    $0x4,%esp
f012beb5:	68 dc b6 13 f0       	push   $0xf013b6dc
f012beba:	68 c4 0f 00 00       	push   $0xfc4
f012bebf:	68 7a a2 13 f0       	push   $0xf013a27a
f012bec4:	e8 dd 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012bec9:	e8 ca fe fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012bece:	89 c2                	mov    %eax,%edx
f012bed0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bed3:	29 c2                	sub    %eax,%edx
f012bed5:	89 d0                	mov    %edx,%eax
f012bed7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bedc:	74 17                	je     f012bef5 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012bede:	83 ec 04             	sub    $0x4,%esp
f012bee1:	68 50 b7 13 f0       	push   $0xf013b750
f012bee6:	68 c6 0f 00 00       	push   $0xfc6
f012beeb:	68 7a a2 13 f0       	push   $0xf013a27a
f012bef0:	e8 b1 42 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012bef5:	e8 9e fe fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012befa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012befd:	e8 8a 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf02:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012bf08:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bf0e:	83 ec 08             	sub    $0x8,%esp
f012bf11:	6a 00                	push   $0x0
f012bf13:	50                   	push   %eax
f012bf14:	e8 79 b5 fd ff       	call   f0107492 <krealloc>
f012bf19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bf1c:	e8 6b 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf21:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012bf27:	74 17                	je     f012bf40 <test_krealloc+0x11ad>
			panic(
f012bf29:	83 ec 04             	sub    $0x4,%esp
f012bf2c:	68 94 a2 13 f0       	push   $0xf013a294
f012bf31:	68 ce 0f 00 00       	push   $0xfce
f012bf36:	68 7a a2 13 f0       	push   $0xf013a27a
f012bf3b:	e8 66 42 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012bf40:	e8 53 fe fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012bf45:	89 c2                	mov    %eax,%edx
f012bf47:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bf4a:	29 c2                	sub    %eax,%edx
f012bf4c:	89 d0                	mov    %edx,%eax
f012bf4e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bf53:	74 17                	je     f012bf6c <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012bf55:	83 ec 04             	sub    $0x4,%esp
f012bf58:	68 50 b7 13 f0       	push   $0xf013b750
f012bf5d:	68 d0 0f 00 00       	push   $0xfd0
f012bf62:	68 7a a2 13 f0       	push   $0xf013a27a
f012bf67:	e8 3a 42 fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf6c:	e8 27 fe fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012bf71:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bf74:	e8 13 7d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf79:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012bf7f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bf85:	83 ec 08             	sub    $0x8,%esp
f012bf88:	6a 00                	push   $0x0
f012bf8a:	50                   	push   %eax
f012bf8b:	e8 02 b5 fd ff       	call   f0107492 <krealloc>
f012bf90:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bf93:	e8 f4 7c fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012bf98:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012bf9e:	74 17                	je     f012bfb7 <test_krealloc+0x1224>
			panic(
f012bfa0:	83 ec 04             	sub    $0x4,%esp
f012bfa3:	68 dc b6 13 f0       	push   $0xf013b6dc
f012bfa8:	68 d8 0f 00 00       	push   $0xfd8
f012bfad:	68 7a a2 13 f0       	push   $0xf013a27a
f012bfb2:	e8 ef 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012bfb7:	e8 dc fd fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012bfbc:	89 c2                	mov    %eax,%edx
f012bfbe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bfc1:	29 c2                	sub    %eax,%edx
f012bfc3:	89 d0                	mov    %edx,%eax
f012bfc5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bfca:	74 17                	je     f012bfe3 <test_krealloc+0x1250>
			panic(
f012bfcc:	83 ec 04             	sub    $0x4,%esp
f012bfcf:	68 84 b7 13 f0       	push   $0xf013b784
f012bfd4:	68 db 0f 00 00       	push   $0xfdb
f012bfd9:	68 7a a2 13 f0       	push   $0xf013a27a
f012bfde:	e8 c3 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bfe3:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012bfea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012bff1:	eb 48                	jmp    f012c03b <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bff3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012bff6:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012bffb:	83 ec 04             	sub    $0x4,%esp
f012bffe:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c004:	51                   	push   %ecx
f012c005:	52                   	push   %edx
f012c006:	50                   	push   %eax
f012c007:	e8 5d a9 fd ff       	call   f0106969 <get_page_table>
f012c00c:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c00f:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c015:	85 c0                	test   %eax,%eax
f012c017:	75 17                	jne    f012c030 <test_krealloc+0x129d>
					panic(
f012c019:	83 ec 04             	sub    $0x4,%esp
f012c01c:	68 7c ab 13 f0       	push   $0xf013ab7c
f012c021:	68 e7 0f 00 00       	push   $0xfe7
f012c026:	68 7a a2 13 f0       	push   $0xf013a27a
f012c02b:	e8 76 41 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c030:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c037:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c03b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c03f:	78 b2                	js     f012bff3 <test_krealloc+0x1260>
f012c041:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c045:	7f 09                	jg     f012c050 <test_krealloc+0x12bd>
f012c047:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c04e:	76 a3                	jbe    f012bff3 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c050:	83 ec 0c             	sub    $0xc,%esp
f012c053:	68 c3 b7 13 f0       	push   $0xf013b7c3
f012c058:	e8 d0 4b fd ff       	call   f0100c2d <cprintf>
f012c05d:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c060:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c066:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c06c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c073:	eb 21                	jmp    f012c096 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c075:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c07b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c07e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c084:	01 c8                	add    %ecx,%eax
f012c086:	8a 00                	mov    (%eax),%al
f012c088:	0f be c0             	movsbl %al,%eax
f012c08b:	01 d0                	add    %edx,%eax
f012c08d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c093:	ff 45 dc             	incl   -0x24(%ebp)
f012c096:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c09c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c09f:	7d d4                	jge    f012c075 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c0a1:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c0a7:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c0ad:	42                   	inc    %edx
f012c0ae:	01 d2                	add    %edx,%edx
f012c0b0:	39 d0                	cmp    %edx,%eax
f012c0b2:	74 17                	je     f012c0cb <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c0b4:	83 ec 04             	sub    $0x4,%esp
f012c0b7:	68 cc b7 13 f0       	push   $0xf013b7cc
f012c0bc:	68 f9 0f 00 00       	push   $0xff9
f012c0c1:	68 7a a2 13 f0       	push   $0xf013a27a
f012c0c6:	e8 db 40 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c0cb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c0d1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c0d7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c0de:	eb 25                	jmp    f012c105 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c0e0:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c0e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c0e9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c0f0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c0f6:	01 c8                	add    %ecx,%eax
f012c0f8:	8b 00                	mov    (%eax),%eax
f012c0fa:	01 d0                	add    %edx,%eax
f012c0fc:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c102:	ff 45 dc             	incl   -0x24(%ebp)
f012c105:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c10b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c10e:	7d d0                	jge    f012c0e0 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c110:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c116:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c11c:	42                   	inc    %edx
f012c11d:	c1 e2 02             	shl    $0x2,%edx
f012c120:	39 d0                	cmp    %edx,%eax
f012c122:	74 17                	je     f012c13b <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c124:	83 ec 04             	sub    $0x4,%esp
f012c127:	68 cc b7 13 f0       	push   $0xf013b7cc
f012c12c:	68 03 10 00 00       	push   $0x1003
f012c131:	68 7a a2 13 f0       	push   $0xf013a27a
f012c136:	e8 6b 40 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c13b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c141:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c147:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c14e:	eb 24                	jmp    f012c174 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c150:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c156:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c159:	01 c0                	add    %eax,%eax
f012c15b:	89 c1                	mov    %eax,%ecx
f012c15d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c163:	01 c8                	add    %ecx,%eax
f012c165:	66 8b 00             	mov    (%eax),%ax
f012c168:	98                   	cwtl   
f012c169:	01 d0                	add    %edx,%eax
f012c16b:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c171:	ff 45 dc             	incl   -0x24(%ebp)
f012c174:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c17a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c17d:	7d d1                	jge    f012c150 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c17f:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c185:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c18b:	8d 48 01             	lea    0x1(%eax),%ecx
f012c18e:	89 c8                	mov    %ecx,%eax
f012c190:	c1 e0 02             	shl    $0x2,%eax
f012c193:	01 c8                	add    %ecx,%eax
f012c195:	39 c2                	cmp    %eax,%edx
f012c197:	74 17                	je     f012c1b0 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c199:	83 ec 04             	sub    $0x4,%esp
f012c19c:	68 cc b7 13 f0       	push   $0xf013b7cc
f012c1a1:	68 0d 10 00 00       	push   $0x100d
f012c1a6:	68 7a a2 13 f0       	push   $0xf013a27a
f012c1ab:	e8 f6 3f fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c1b0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c1b6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c1bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c1c3:	eb 70                	jmp    f012c235 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c1c5:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c1cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c1ce:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c1d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c1db:	01 c8                	add    %ecx,%eax
f012c1dd:	8a 00                	mov    (%eax),%al
f012c1df:	0f be c0             	movsbl %al,%eax
f012c1e2:	01 d0                	add    %edx,%eax
f012c1e4:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c1ea:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c1f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c1f3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c1fa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c200:	01 c8                	add    %ecx,%eax
f012c202:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c206:	98                   	cwtl   
f012c207:	01 d0                	add    %edx,%eax
f012c209:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c20f:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012c215:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c218:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c21f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c225:	01 c8                	add    %ecx,%eax
f012c227:	8b 40 04             	mov    0x4(%eax),%eax
f012c22a:	01 d0                	add    %edx,%eax
f012c22c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c232:	ff 45 dc             	incl   -0x24(%ebp)
f012c235:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c23b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c23e:	7d 85                	jge    f012c1c5 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012c240:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012c246:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c24c:	8d 50 01             	lea    0x1(%eax),%edx
f012c24f:	89 d0                	mov    %edx,%eax
f012c251:	01 c0                	add    %eax,%eax
f012c253:	01 d0                	add    %edx,%eax
f012c255:	01 c0                	add    %eax,%eax
f012c257:	01 d0                	add    %edx,%eax
f012c259:	39 c1                	cmp    %eax,%ecx
f012c25b:	75 3a                	jne    f012c297 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012c25d:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012c263:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c269:	8d 50 01             	lea    0x1(%eax),%edx
f012c26c:	89 d0                	mov    %edx,%eax
f012c26e:	01 c0                	add    %eax,%eax
f012c270:	01 d0                	add    %edx,%eax
f012c272:	01 c0                	add    %eax,%eax
f012c274:	01 d0                	add    %edx,%eax
f012c276:	39 c1                	cmp    %eax,%ecx
f012c278:	75 1d                	jne    f012c297 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012c27a:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012c280:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c286:	8d 50 01             	lea    0x1(%eax),%edx
f012c289:	89 d0                	mov    %edx,%eax
f012c28b:	01 c0                	add    %eax,%eax
f012c28d:	01 d0                	add    %edx,%eax
f012c28f:	01 c0                	add    %eax,%eax
f012c291:	01 d0                	add    %edx,%eax
f012c293:	39 c1                	cmp    %eax,%ecx
f012c295:	74 17                	je     f012c2ae <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012c297:	83 ec 04             	sub    $0x4,%esp
f012c29a:	68 cc b7 13 f0       	push   $0xf013b7cc
f012c29f:	68 1b 10 00 00       	push   $0x101b
f012c2a4:	68 7a a2 13 f0       	push   $0xf013a27a
f012c2a9:	e8 f8 3e fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012c2ae:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012c2b5:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c2b8:	e8 db fa fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c2bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012c2c0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c2c6:	83 ec 08             	sub    $0x8,%esp
f012c2c9:	68 00 3c 00 00       	push   $0x3c00
f012c2ce:	50                   	push   %eax
f012c2cf:	e8 be b1 fd ff       	call   f0107492 <krealloc>
f012c2d4:	83 c4 10             	add    $0x10,%esp
f012c2d7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c2dd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c2e3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c2e8:	77 17                	ja     f012c301 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c2ea:	83 ec 04             	sub    $0x4,%esp
f012c2ed:	68 20 b5 13 f0       	push   $0xf013b520
f012c2f2:	68 27 10 00 00       	push   $0x1027
f012c2f7:	68 7a a2 13 f0       	push   $0xf013a27a
f012c2fc:	e8 a5 3e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c301:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c307:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c30d:	74 17                	je     f012c326 <test_krealloc+0x1593>
			panic(
f012c30f:	83 ec 04             	sub    $0x4,%esp
f012c312:	68 04 b8 13 f0       	push   $0xf013b804
f012c317:	68 2a 10 00 00       	push   $0x102a
f012c31c:	68 7a a2 13 f0       	push   $0xf013a27a
f012c321:	e8 80 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c326:	e8 6d fa fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c32b:	89 c2                	mov    %eax,%edx
f012c32d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c330:	39 c2                	cmp    %eax,%edx
f012c332:	74 17                	je     f012c34b <test_krealloc+0x15b8>
			panic(
f012c334:	83 ec 04             	sub    $0x4,%esp
f012c337:	68 70 b8 13 f0       	push   $0xf013b870
f012c33c:	68 2d 10 00 00       	push   $0x102d
f012c341:	68 7a a2 13 f0       	push   $0xf013a27a
f012c346:	e8 5b 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c34b:	e8 48 fa fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c350:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012c353:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c359:	83 ec 08             	sub    $0x8,%esp
f012c35c:	68 00 fc 0f 00       	push   $0xffc00
f012c361:	50                   	push   %eax
f012c362:	e8 2b b1 fd ff       	call   f0107492 <krealloc>
f012c367:	83 c4 10             	add    $0x10,%esp
f012c36a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c370:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c376:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c37b:	77 17                	ja     f012c394 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c37d:	83 ec 04             	sub    $0x4,%esp
f012c380:	68 20 b5 13 f0       	push   $0xf013b520
f012c385:	68 33 10 00 00       	push   $0x1033
f012c38a:	68 7a a2 13 f0       	push   $0xf013a27a
f012c38f:	e8 12 3e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c394:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c39a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c3a0:	74 17                	je     f012c3b9 <test_krealloc+0x1626>
			panic(
f012c3a2:	83 ec 04             	sub    $0x4,%esp
f012c3a5:	68 04 b8 13 f0       	push   $0xf013b804
f012c3aa:	68 36 10 00 00       	push   $0x1036
f012c3af:	68 7a a2 13 f0       	push   $0xf013a27a
f012c3b4:	e8 ed 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c3b9:	e8 da f9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c3be:	89 c2                	mov    %eax,%edx
f012c3c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c3c3:	39 c2                	cmp    %eax,%edx
f012c3c5:	74 17                	je     f012c3de <test_krealloc+0x164b>
			panic(
f012c3c7:	83 ec 04             	sub    $0x4,%esp
f012c3ca:	68 70 b8 13 f0       	push   $0xf013b870
f012c3cf:	68 39 10 00 00       	push   $0x1039
f012c3d4:	68 7a a2 13 f0       	push   $0xf013a27a
f012c3d9:	e8 c8 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c3de:	e8 b5 f9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c3e3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012c3e6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c3ec:	83 ec 08             	sub    $0x8,%esp
f012c3ef:	68 00 fc 0f 00       	push   $0xffc00
f012c3f4:	50                   	push   %eax
f012c3f5:	e8 98 b0 fd ff       	call   f0107492 <krealloc>
f012c3fa:	83 c4 10             	add    $0x10,%esp
f012c3fd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c403:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c409:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c40e:	77 17                	ja     f012c427 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c410:	83 ec 04             	sub    $0x4,%esp
f012c413:	68 20 b5 13 f0       	push   $0xf013b520
f012c418:	68 3f 10 00 00       	push   $0x103f
f012c41d:	68 7a a2 13 f0       	push   $0xf013a27a
f012c422:	e8 7f 3d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c427:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c42d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c433:	74 17                	je     f012c44c <test_krealloc+0x16b9>
			panic(
f012c435:	83 ec 04             	sub    $0x4,%esp
f012c438:	68 04 b8 13 f0       	push   $0xf013b804
f012c43d:	68 42 10 00 00       	push   $0x1042
f012c442:	68 7a a2 13 f0       	push   $0xf013a27a
f012c447:	e8 5a 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c44c:	e8 47 f9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c451:	89 c2                	mov    %eax,%edx
f012c453:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c456:	39 c2                	cmp    %eax,%edx
f012c458:	74 17                	je     f012c471 <test_krealloc+0x16de>
			panic(
f012c45a:	83 ec 04             	sub    $0x4,%esp
f012c45d:	68 70 b8 13 f0       	push   $0xf013b870
f012c462:	68 45 10 00 00       	push   $0x1045
f012c467:	68 7a a2 13 f0       	push   $0xf013a27a
f012c46c:	e8 35 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c471:	e8 22 f9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c476:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012c479:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c47f:	83 ec 08             	sub    $0x8,%esp
f012c482:	68 00 fc 0f 00       	push   $0xffc00
f012c487:	50                   	push   %eax
f012c488:	e8 05 b0 fd ff       	call   f0107492 <krealloc>
f012c48d:	83 c4 10             	add    $0x10,%esp
f012c490:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c496:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c49c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c4a1:	77 17                	ja     f012c4ba <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c4a3:	83 ec 04             	sub    $0x4,%esp
f012c4a6:	68 20 b5 13 f0       	push   $0xf013b520
f012c4ab:	68 4d 10 00 00       	push   $0x104d
f012c4b0:	68 7a a2 13 f0       	push   $0xf013a27a
f012c4b5:	e8 ec 3c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012c4ba:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4c0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c4c6:	74 17                	je     f012c4df <test_krealloc+0x174c>
			panic(
f012c4c8:	83 ec 04             	sub    $0x4,%esp
f012c4cb:	68 b4 b8 13 f0       	push   $0xf013b8b4
f012c4d0:	68 50 10 00 00       	push   $0x1050
f012c4d5:	68 7a a2 13 f0       	push   $0xf013a27a
f012c4da:	e8 c7 3c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c4df:	e8 b4 f8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c4e4:	89 c2                	mov    %eax,%edx
f012c4e6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c4e9:	39 c2                	cmp    %eax,%edx
f012c4eb:	74 17                	je     f012c504 <test_krealloc+0x1771>
			panic(
f012c4ed:	83 ec 04             	sub    $0x4,%esp
f012c4f0:	68 70 b8 13 f0       	push   $0xf013b870
f012c4f5:	68 53 10 00 00       	push   $0x1053
f012c4fa:	68 7a a2 13 f0       	push   $0xf013a27a
f012c4ff:	e8 a2 3c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012c504:	83 ec 0c             	sub    $0xc,%esp
f012c507:	68 93 aa 13 f0       	push   $0xf013aa93
f012c50c:	e8 1c 47 fd ff       	call   f0100c2d <cprintf>
f012c511:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012c514:	e8 7f f8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c519:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012c51c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c522:	83 ec 08             	sub    $0x8,%esp
f012c525:	68 00 18 10 00       	push   $0x101800
f012c52a:	50                   	push   %eax
f012c52b:	e8 62 af fd ff       	call   f0107492 <krealloc>
f012c530:	83 c4 10             	add    $0x10,%esp
f012c533:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c536:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c539:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c53e:	77 17                	ja     f012c557 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c540:	83 ec 04             	sub    $0x4,%esp
f012c543:	68 20 b5 13 f0       	push   $0xf013b520
f012c548:	68 5c 10 00 00       	push   $0x105c
f012c54d:	68 7a a2 13 f0       	push   $0xf013a27a
f012c552:	e8 4f 3c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c557:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c55d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c560:	74 17                	je     f012c579 <test_krealloc+0x17e6>
			panic(
f012c562:	83 ec 04             	sub    $0x4,%esp
f012c565:	68 14 b9 13 f0       	push   $0xf013b914
f012c56a:	68 5f 10 00 00       	push   $0x105f
f012c56f:	68 7a a2 13 f0       	push   $0xf013a27a
f012c574:	e8 2d 3c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012c579:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c57c:	e8 17 f8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c581:	29 c3                	sub    %eax,%ebx
f012c583:	89 d8                	mov    %ebx,%eax
f012c585:	83 f8 02             	cmp    $0x2,%eax
f012c588:	74 17                	je     f012c5a1 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012c58a:	83 ec 04             	sub    $0x4,%esp
f012c58d:	68 90 b9 13 f0       	push   $0xf013b990
f012c592:	68 61 10 00 00       	push   $0x1061
f012c597:	68 7a a2 13 f0       	push   $0xf013a27a
f012c59c:	e8 05 3c fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012c5a1:	e8 f2 f7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c5a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012c5a9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c5af:	83 ec 08             	sub    $0x8,%esp
f012c5b2:	68 00 fc 3f 00       	push   $0x3ffc00
f012c5b7:	50                   	push   %eax
f012c5b8:	e8 d5 ae fd ff       	call   f0107492 <krealloc>
f012c5bd:	83 c4 10             	add    $0x10,%esp
f012c5c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c5c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c5c6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c5cb:	77 17                	ja     f012c5e4 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5cd:	83 ec 04             	sub    $0x4,%esp
f012c5d0:	68 20 b5 13 f0       	push   $0xf013b520
f012c5d5:	68 67 10 00 00       	push   $0x1067
f012c5da:	68 7a a2 13 f0       	push   $0xf013a27a
f012c5df:	e8 c2 3b fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c5e4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c5ea:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c5ed:	74 17                	je     f012c606 <test_krealloc+0x1873>
			panic(
f012c5ef:	83 ec 04             	sub    $0x4,%esp
f012c5f2:	68 14 b9 13 f0       	push   $0xf013b914
f012c5f7:	68 6a 10 00 00       	push   $0x106a
f012c5fc:	68 7a a2 13 f0       	push   $0xf013a27a
f012c601:	e8 a0 3b fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012c606:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c609:	e8 8a f7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c60e:	29 c3                	sub    %eax,%ebx
f012c610:	89 d8                	mov    %ebx,%eax
f012c612:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c617:	74 17                	je     f012c630 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012c619:	83 ec 04             	sub    $0x4,%esp
f012c61c:	68 90 b9 13 f0       	push   $0xf013b990
f012c621:	68 6d 10 00 00       	push   $0x106d
f012c626:	68 7a a2 13 f0       	push   $0xf013a27a
f012c62b:	e8 76 3b fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012c630:	83 ec 0c             	sub    $0xc,%esp
f012c633:	68 d8 aa 13 f0       	push   $0xf013aad8
f012c638:	e8 f0 45 fd ff       	call   f0100c2d <cprintf>
f012c63d:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012c640:	e8 53 f7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c645:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012c648:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c64e:	83 ec 08             	sub    $0x8,%esp
f012c651:	68 00 fc 9f 00       	push   $0x9ffc00
f012c656:	50                   	push   %eax
f012c657:	e8 36 ae fd ff       	call   f0107492 <krealloc>
f012c65c:	83 c4 10             	add    $0x10,%esp
f012c65f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c662:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c665:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c66a:	77 17                	ja     f012c683 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c66c:	83 ec 04             	sub    $0x4,%esp
f012c66f:	68 20 b5 13 f0       	push   $0xf013b520
f012c674:	68 78 10 00 00       	push   $0x1078
f012c679:	68 7a a2 13 f0       	push   $0xf013a27a
f012c67e:	e8 23 3b fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012c683:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012c68a:	10 00 00 
f012c68d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012c693:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c698:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012c69e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012c6a4:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6a9:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012c6af:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012c6b5:	29 d0                	sub    %edx,%eax
f012c6b7:	89 c1                	mov    %eax,%ecx
f012c6b9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012c6c0:	10 00 00 
f012c6c3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c6c8:	0f b6 d0             	movzbl %al,%edx
f012c6cb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012c6d1:	01 d0                	add    %edx,%eax
f012c6d3:	48                   	dec    %eax
f012c6d4:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012c6da:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012c6e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6e5:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012c6eb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012c6f1:	29 d0                	sub    %edx,%eax
f012c6f3:	01 c1                	add    %eax,%ecx
f012c6f5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012c6fc:	10 00 00 
f012c6ff:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c704:	0f b6 c0             	movzbl %al,%eax
f012c707:	c1 e0 04             	shl    $0x4,%eax
f012c70a:	89 c2                	mov    %eax,%edx
f012c70c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012c712:	01 d0                	add    %edx,%eax
f012c714:	48                   	dec    %eax
f012c715:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012c71b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012c721:	ba 00 00 00 00       	mov    $0x0,%edx
f012c726:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012c72c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012c732:	29 d0                	sub    %edx,%eax
f012c734:	01 c8                	add    %ecx,%eax
f012c736:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012c73c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c73f:	39 c2                	cmp    %eax,%edx
f012c741:	74 18                	je     f012c75b <test_krealloc+0x19c8>
			panic(
f012c743:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c746:	50                   	push   %eax
f012c747:	68 c4 b9 13 f0       	push   $0xf013b9c4
f012c74c:	68 7c 10 00 00       	push   $0x107c
f012c751:	68 7a a2 13 f0       	push   $0xf013a27a
f012c756:	e8 4b 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012c75b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c761:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c764:	75 17                	jne    f012c77d <test_krealloc+0x19ea>
			panic(
f012c766:	83 ec 04             	sub    $0x4,%esp
f012c769:	68 08 ba 13 f0       	push   $0xf013ba08
f012c76e:	68 7f 10 00 00       	push   $0x107f
f012c773:	68 7a a2 13 f0       	push   $0xf013a27a
f012c778:	e8 29 3a fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012c77d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c780:	e8 13 f6 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c785:	29 c3                	sub    %eax,%ebx
f012c787:	89 d8                	mov    %ebx,%eax
f012c789:	3d 00 06 00 00       	cmp    $0x600,%eax
f012c78e:	74 17                	je     f012c7a7 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012c790:	83 ec 04             	sub    $0x4,%esp
f012c793:	68 90 b9 13 f0       	push   $0xf013b990
f012c798:	68 82 10 00 00       	push   $0x1082
f012c79d:	68 7a a2 13 f0       	push   $0xf013a27a
f012c7a2:	e8 ff 39 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012c7a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c7aa:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012c7b0:	e8 e3 f5 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c7b5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012c7b8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c7be:	83 ec 08             	sub    $0x8,%esp
f012c7c1:	68 00 fc 5f 00       	push   $0x5ffc00
f012c7c6:	50                   	push   %eax
f012c7c7:	e8 c6 ac fd ff       	call   f0107492 <krealloc>
f012c7cc:	83 c4 10             	add    $0x10,%esp
f012c7cf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c7d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c7d5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c7da:	77 17                	ja     f012c7f3 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7dc:	83 ec 04             	sub    $0x4,%esp
f012c7df:	68 20 b5 13 f0       	push   $0xf013b520
f012c7e4:	68 8b 10 00 00       	push   $0x108b
f012c7e9:	68 7a a2 13 f0       	push   $0xf013a27a
f012c7ee:	e8 b3 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012c7f3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c7f9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c7fc:	74 17                	je     f012c815 <test_krealloc+0x1a82>
			panic(
f012c7fe:	83 ec 04             	sub    $0x4,%esp
f012c801:	68 14 b9 13 f0       	push   $0xf013b914
f012c806:	68 8e 10 00 00       	push   $0x108e
f012c80b:	68 7a a2 13 f0       	push   $0xf013a27a
f012c810:	e8 91 39 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012c815:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c818:	e8 7b f5 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c81d:	29 c3                	sub    %eax,%ebx
f012c81f:	89 d8                	mov    %ebx,%eax
f012c821:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c826:	74 17                	je     f012c83f <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012c828:	83 ec 04             	sub    $0x4,%esp
f012c82b:	68 90 b9 13 f0       	push   $0xf013b990
f012c830:	68 91 10 00 00       	push   $0x1091
f012c835:	68 7a a2 13 f0       	push   $0xf013a27a
f012c83a:	e8 67 39 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012c83f:	e8 54 f5 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c844:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012c847:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c84d:	83 ec 08             	sub    $0x8,%esp
f012c850:	68 00 fc 3f 01       	push   $0x13ffc00
f012c855:	50                   	push   %eax
f012c856:	e8 37 ac fd ff       	call   f0107492 <krealloc>
f012c85b:	83 c4 10             	add    $0x10,%esp
f012c85e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c861:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c864:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c869:	77 17                	ja     f012c882 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c86b:	83 ec 04             	sub    $0x4,%esp
f012c86e:	68 20 b5 13 f0       	push   $0xf013b520
f012c873:	68 98 10 00 00       	push   $0x1098
f012c878:	68 7a a2 13 f0       	push   $0xf013a27a
f012c87d:	e8 24 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012c882:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c888:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c88b:	75 17                	jne    f012c8a4 <test_krealloc+0x1b11>
			panic(
f012c88d:	83 ec 04             	sub    $0x4,%esp
f012c890:	68 08 ba 13 f0       	push   $0xf013ba08
f012c895:	68 9b 10 00 00       	push   $0x109b
f012c89a:	68 7a a2 13 f0       	push   $0xf013a27a
f012c89f:	e8 02 39 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012c8a4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012c8ab:	10 00 00 
f012c8ae:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012c8b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c8b9:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012c8bf:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c8c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8ca:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012c8d0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c8d6:	29 d0                	sub    %edx,%eax
f012c8d8:	89 c1                	mov    %eax,%ecx
f012c8da:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012c8e1:	10 00 00 
f012c8e4:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c8e9:	0f b6 d0             	movzbl %al,%edx
f012c8ec:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c8f2:	01 d0                	add    %edx,%eax
f012c8f4:	48                   	dec    %eax
f012c8f5:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012c8fb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c901:	ba 00 00 00 00       	mov    $0x0,%edx
f012c906:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012c90c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c912:	29 d0                	sub    %edx,%eax
f012c914:	01 c1                	add    %eax,%ecx
f012c916:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012c91d:	10 00 00 
f012c920:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012c925:	0f b6 c0             	movzbl %al,%eax
f012c928:	c1 e0 04             	shl    $0x4,%eax
f012c92b:	89 c2                	mov    %eax,%edx
f012c92d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c933:	01 d0                	add    %edx,%eax
f012c935:	48                   	dec    %eax
f012c936:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012c93c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c942:	ba 00 00 00 00       	mov    $0x0,%edx
f012c947:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012c94d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c953:	29 d0                	sub    %edx,%eax
f012c955:	01 c8                	add    %ecx,%eax
f012c957:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012c95d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c960:	39 c2                	cmp    %eax,%edx
f012c962:	74 17                	je     f012c97b <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012c964:	83 ec 04             	sub    $0x4,%esp
f012c967:	68 8c ba 13 f0       	push   $0xf013ba8c
f012c96c:	68 9d 10 00 00       	push   $0x109d
f012c971:	68 7a a2 13 f0       	push   $0xf013a27a
f012c976:	e8 2b 38 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012c97b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c97e:	e8 15 f4 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012c983:	29 c3                	sub    %eax,%ebx
f012c985:	89 d8                	mov    %ebx,%eax
f012c987:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012c98c:	74 17                	je     f012c9a5 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012c98e:	83 ec 04             	sub    $0x4,%esp
f012c991:	68 90 b9 13 f0       	push   $0xf013b990
f012c996:	68 a0 10 00 00       	push   $0x10a0
f012c99b:	68 7a a2 13 f0       	push   $0xf013a27a
f012c9a0:	e8 01 38 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012c9a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c9a8:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c9ae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c9b4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012c9ba:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012c9c1:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9c4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012c9cb:	eb 21                	jmp    f012c9ee <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012c9cd:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c9d3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012c9d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c9dc:	01 c8                	add    %ecx,%eax
f012c9de:	8a 00                	mov    (%eax),%al
f012c9e0:	0f be c0             	movsbl %al,%eax
f012c9e3:	01 d0                	add    %edx,%eax
f012c9e5:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9eb:	ff 45 d8             	incl   -0x28(%ebp)
f012c9ee:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c9f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012c9f7:	7d d4                	jge    f012c9cd <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c9f9:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c9ff:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ca05:	42                   	inc    %edx
f012ca06:	01 d2                	add    %edx,%edx
f012ca08:	39 d0                	cmp    %edx,%eax
f012ca0a:	74 17                	je     f012ca23 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012ca0c:	83 ec 04             	sub    $0x4,%esp
f012ca0f:	68 c0 ba 13 f0       	push   $0xf013bac0
f012ca14:	68 ae 10 00 00       	push   $0x10ae
f012ca19:	68 7a a2 13 f0       	push   $0xf013a27a
f012ca1e:	e8 83 37 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ca23:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ca29:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ca2f:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ca36:	00 00 00 
		sums[1] = 0;
f012ca39:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012ca40:	00 00 00 
		sums[2] = 0;
f012ca43:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012ca4a:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ca4d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ca54:	eb 70                	jmp    f012cac6 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012ca56:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ca5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ca5f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ca66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca6c:	01 c8                	add    %ecx,%eax
f012ca6e:	8a 00                	mov    (%eax),%al
f012ca70:	0f be c0             	movsbl %al,%eax
f012ca73:	01 d0                	add    %edx,%eax
f012ca75:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012ca7b:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ca81:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ca84:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ca8b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ca91:	01 c8                	add    %ecx,%eax
f012ca93:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca97:	98                   	cwtl   
f012ca98:	01 d0                	add    %edx,%eax
f012ca9a:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012caa0:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012caa6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012caa9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cab0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cab6:	01 c8                	add    %ecx,%eax
f012cab8:	8b 40 04             	mov    0x4(%eax),%eax
f012cabb:	01 d0                	add    %edx,%eax
f012cabd:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012cac3:	ff 45 d8             	incl   -0x28(%ebp)
f012cac6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cacc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cacf:	7d 85                	jge    f012ca56 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012cad1:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012cad7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cadd:	8d 50 01             	lea    0x1(%eax),%edx
f012cae0:	89 d0                	mov    %edx,%eax
f012cae2:	01 c0                	add    %eax,%eax
f012cae4:	01 d0                	add    %edx,%eax
f012cae6:	01 c0                	add    %eax,%eax
f012cae8:	01 d0                	add    %edx,%eax
f012caea:	39 c1                	cmp    %eax,%ecx
f012caec:	75 3a                	jne    f012cb28 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012caee:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012caf4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cafa:	8d 50 01             	lea    0x1(%eax),%edx
f012cafd:	89 d0                	mov    %edx,%eax
f012caff:	01 c0                	add    %eax,%eax
f012cb01:	01 d0                	add    %edx,%eax
f012cb03:	01 c0                	add    %eax,%eax
f012cb05:	01 d0                	add    %edx,%eax
f012cb07:	39 c1                	cmp    %eax,%ecx
f012cb09:	75 1d                	jne    f012cb28 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012cb0b:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012cb11:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cb17:	8d 50 01             	lea    0x1(%eax),%edx
f012cb1a:	89 d0                	mov    %edx,%eax
f012cb1c:	01 c0                	add    %eax,%eax
f012cb1e:	01 d0                	add    %edx,%eax
f012cb20:	01 c0                	add    %eax,%eax
f012cb22:	01 d0                	add    %edx,%eax
f012cb24:	39 c1                	cmp    %eax,%ecx
f012cb26:	74 17                	je     f012cb3f <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012cb28:	83 ec 04             	sub    $0x4,%esp
f012cb2b:	68 c0 ba 13 f0       	push   $0xf013bac0
f012cb30:	68 c0 10 00 00       	push   $0x10c0
f012cb35:	68 7a a2 13 f0       	push   $0xf013a27a
f012cb3a:	e8 67 36 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cb3f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb45:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012cb4b:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cb52:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cb55:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cb5c:	eb 24                	jmp    f012cb82 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012cb5e:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cb64:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cb67:	01 c0                	add    %eax,%eax
f012cb69:	89 c1                	mov    %eax,%ecx
f012cb6b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cb71:	01 c8                	add    %ecx,%eax
f012cb73:	66 8b 00             	mov    (%eax),%ax
f012cb76:	98                   	cwtl   
f012cb77:	01 d0                	add    %edx,%eax
f012cb79:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cb7f:	ff 45 d8             	incl   -0x28(%ebp)
f012cb82:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb88:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cb8b:	7d d1                	jge    f012cb5e <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012cb8d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cb93:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cb99:	8d 48 01             	lea    0x1(%eax),%ecx
f012cb9c:	89 c8                	mov    %ecx,%eax
f012cb9e:	c1 e0 02             	shl    $0x2,%eax
f012cba1:	01 c8                	add    %ecx,%eax
f012cba3:	39 c2                	cmp    %eax,%edx
f012cba5:	74 17                	je     f012cbbe <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012cba7:	83 ec 04             	sub    $0x4,%esp
f012cbaa:	68 c0 ba 13 f0       	push   $0xf013bac0
f012cbaf:	68 ca 10 00 00       	push   $0x10ca
f012cbb4:	68 7a a2 13 f0       	push   $0xf013a27a
f012cbb9:	e8 e8 35 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012cbbe:	e8 d5 f1 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cbc3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbc6:	e8 c1 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cbcb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012cbd1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cbd7:	83 ec 08             	sub    $0x8,%esp
f012cbda:	6a 00                	push   $0x0
f012cbdc:	50                   	push   %eax
f012cbdd:	e8 b0 a8 fd ff       	call   f0107492 <krealloc>
f012cbe2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cbe5:	e8 a2 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cbea:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cbf0:	74 17                	je     f012cc09 <test_krealloc+0x1e76>
			panic(
f012cbf2:	83 ec 04             	sub    $0x4,%esp
f012cbf5:	68 94 a2 13 f0       	push   $0xf013a294
f012cbfa:	68 d2 10 00 00       	push   $0x10d2
f012cbff:	68 7a a2 13 f0       	push   $0xf013a27a
f012cc04:	e8 9d 35 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012cc09:	e8 8a f1 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cc0e:	89 c2                	mov    %eax,%edx
f012cc10:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc13:	29 c2                	sub    %eax,%edx
f012cc15:	89 d0                	mov    %edx,%eax
f012cc17:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012cc1c:	74 17                	je     f012cc35 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012cc1e:	83 ec 04             	sub    $0x4,%esp
f012cc21:	68 50 b7 13 f0       	push   $0xf013b750
f012cc26:	68 d4 10 00 00       	push   $0x10d4
f012cc2b:	68 7a a2 13 f0       	push   $0xf013a27a
f012cc30:	e8 71 35 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012cc35:	e8 5e f1 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cc3a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cc3d:	e8 4a 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cc42:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012cc48:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cc4e:	83 ec 0c             	sub    $0xc,%esp
f012cc51:	50                   	push   %eax
f012cc52:	e8 9f a7 fd ff       	call   f01073f6 <kfree>
f012cc57:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc5a:	e8 2d 70 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012cc5f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cc65:	74 17                	je     f012cc7e <test_krealloc+0x1eeb>
			panic(
f012cc67:	83 ec 04             	sub    $0x4,%esp
f012cc6a:	68 94 a2 13 f0       	push   $0xf013a294
f012cc6f:	68 dc 10 00 00       	push   $0x10dc
f012cc74:	68 7a a2 13 f0       	push   $0xf013a27a
f012cc79:	e8 28 35 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012cc7e:	e8 15 f1 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cc83:	89 c2                	mov    %eax,%edx
f012cc85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc88:	29 c2                	sub    %eax,%edx
f012cc8a:	89 d0                	mov    %edx,%eax
f012cc8c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012cc91:	74 17                	je     f012ccaa <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012cc93:	83 ec 04             	sub    $0x4,%esp
f012cc96:	68 50 b7 13 f0       	push   $0xf013b750
f012cc9b:	68 de 10 00 00       	push   $0x10de
f012cca0:	68 7a a2 13 f0       	push   $0xf013a27a
f012cca5:	e8 fc 34 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccaa:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012ccb1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012ccb8:	eb 48                	jmp    f012cd02 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ccba:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012ccbd:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012ccc2:	83 ec 04             	sub    $0x4,%esp
f012ccc5:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012cccb:	51                   	push   %ecx
f012cccc:	52                   	push   %edx
f012cccd:	50                   	push   %eax
f012ccce:	e8 96 9c fd ff       	call   f0106969 <get_page_table>
f012ccd3:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ccd6:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012ccdc:	85 c0                	test   %eax,%eax
f012ccde:	75 17                	jne    f012ccf7 <test_krealloc+0x1f64>
					panic(
f012cce0:	83 ec 04             	sub    $0x4,%esp
f012cce3:	68 7c ab 13 f0       	push   $0xf013ab7c
f012cce8:	68 eb 10 00 00       	push   $0x10eb
f012cced:	68 7a a2 13 f0       	push   $0xf013a27a
f012ccf2:	e8 af 34 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccf7:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012ccfe:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012cd02:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012cd06:	78 b2                	js     f012ccba <test_krealloc+0x1f27>
f012cd08:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012cd0c:	7f 09                	jg     f012cd17 <test_krealloc+0x1f84>
f012cd0e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012cd15:	76 a3                	jbe    f012ccba <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012cd17:	83 ec 0c             	sub    $0xc,%esp
f012cd1a:	68 5e a4 13 f0       	push   $0xf013a45e
f012cd1f:	e8 09 3f fd ff       	call   f0100c2d <cprintf>
f012cd24:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012cd27:	83 ec 0c             	sub    $0xc,%esp
f012cd2a:	68 ec ba 13 f0       	push   $0xf013baec
f012cd2f:	e8 f9 3e fd ff       	call   f0100c2d <cprintf>
f012cd34:	83 c4 10             	add    $0x10,%esp
	return 0;
f012cd37:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012cd3c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012cd3f:	5b                   	pop    %ebx
f012cd40:	5f                   	pop    %edi
f012cd41:	5d                   	pop    %ebp
f012cd42:	c3                   	ret    

f012cd43 <test_krealloc_BF>:


int test_krealloc_BF() {
f012cd43:	55                   	push   %ebp
f012cd44:	89 e5                	mov    %esp,%ebp
f012cd46:	57                   	push   %edi
f012cd47:	53                   	push   %ebx
f012cd48:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012cd4e:	83 ec 0c             	sub    $0xc,%esp
f012cd51:	68 bc a1 13 f0       	push   $0xf013a1bc
f012cd56:	e8 d2 3e fd ff       	call   f0100c2d <cprintf>
f012cd5b:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012cd5e:	83 ec 0c             	sub    $0xc,%esp
f012cd61:	68 ec a1 13 f0       	push   $0xf013a1ec
f012cd66:	e8 c2 3e fd ff       	call   f0100c2d <cprintf>
f012cd6b:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012cd6e:	83 ec 0c             	sub    $0xc,%esp
f012cd71:	68 bc a1 13 f0       	push   $0xf013a1bc
f012cd76:	e8 b2 3e fd ff       	call   f0100c2d <cprintf>
f012cd7b:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012cd7e:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012cd82:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012cd86:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012cd8c:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012cd92:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012cd99:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012cda0:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012cda6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012cdab:	b8 00 00 00 00       	mov    $0x0,%eax
f012cdb0:	89 d7                	mov    %edx,%edi
f012cdb2:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012cdb4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012cdbb:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012cdc1:	b9 14 00 00 00       	mov    $0x14,%ecx
f012cdc6:	b8 00 00 00 00       	mov    $0x0,%eax
f012cdcb:	89 d7                	mov    %edx,%edi
f012cdcd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012cdcf:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012cdd5:	b9 14 00 00 00       	mov    $0x14,%ecx
f012cdda:	b8 00 00 00 00       	mov    $0x0,%eax
f012cddf:	89 d7                	mov    %edx,%edi
f012cde1:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012cde3:	e8 b0 ef fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cde8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012cdeb:	83 ec 08             	sub    $0x8,%esp
f012cdee:	68 00 fc 0f 00       	push   $0xffc00
f012cdf3:	6a 00                	push   $0x0
f012cdf5:	e8 98 a6 fd ff       	call   f0107492 <krealloc>
f012cdfa:	83 c4 10             	add    $0x10,%esp
f012cdfd:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012ce03:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ce09:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce0e:	77 17                	ja     f012ce27 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce10:	83 ec 04             	sub    $0x4,%esp
f012ce13:	68 20 b5 13 f0       	push   $0xf013b520
f012ce18:	68 1a 11 00 00       	push   $0x111a
f012ce1d:	68 7a a2 13 f0       	push   $0xf013a27a
f012ce22:	e8 7f 33 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012ce27:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ce2d:	89 c1                	mov    %eax,%ecx
f012ce2f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012ce36:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012ce39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ce3e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012ce41:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ce44:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce49:	f7 75 b4             	divl   -0x4c(%ebp)
f012ce4c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012ce4f:	29 d0                	sub    %edx,%eax
f012ce51:	89 c3                	mov    %eax,%ebx
f012ce53:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012ce5a:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012ce5f:	0f b6 d0             	movzbl %al,%edx
f012ce62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012ce65:	01 d0                	add    %edx,%eax
f012ce67:	48                   	dec    %eax
f012ce68:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012ce6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012ce6e:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce73:	f7 75 ac             	divl   -0x54(%ebp)
f012ce76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012ce79:	29 d0                	sub    %edx,%eax
f012ce7b:	01 c3                	add    %eax,%ebx
f012ce7d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012ce84:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012ce89:	0f b6 c0             	movzbl %al,%eax
f012ce8c:	c1 e0 04             	shl    $0x4,%eax
f012ce8f:	89 c2                	mov    %eax,%edx
f012ce91:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012ce94:	01 d0                	add    %edx,%eax
f012ce96:	48                   	dec    %eax
f012ce97:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012ce9a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012ce9d:	ba 00 00 00 00       	mov    $0x0,%edx
f012cea2:	f7 75 a4             	divl   -0x5c(%ebp)
f012cea5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012cea8:	29 d0                	sub    %edx,%eax
f012ceaa:	01 d8                	add    %ebx,%eax
f012ceac:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012ceb1:	39 c1                	cmp    %eax,%ecx
f012ceb3:	74 17                	je     f012cecc <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012ceb5:	83 ec 04             	sub    $0x4,%esp
f012ceb8:	68 5c b5 13 f0       	push   $0xf013b55c
f012cebd:	68 1c 11 00 00       	push   $0x111c
f012cec2:	68 7a a2 13 f0       	push   $0xf013a27a
f012cec7:	e8 da 32 fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012cecc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cecf:	e8 c4 ee fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ced4:	29 c3                	sub    %eax,%ebx
f012ced6:	89 d8                	mov    %ebx,%eax
f012ced8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cedd:	74 17                	je     f012cef6 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012cedf:	83 ec 04             	sub    $0x4,%esp
f012cee2:	68 8e b5 13 f0       	push   $0xf013b58e
f012cee7:	68 1f 11 00 00       	push   $0x111f
f012ceec:	68 7a a2 13 f0       	push   $0xf013a27a
f012cef1:	e8 b0 32 fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012cef6:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012cefd:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012cf00:	e8 93 ee fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cf05:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012cf08:	83 ec 08             	sub    $0x8,%esp
f012cf0b:	68 00 fc 0f 00       	push   $0xffc00
f012cf10:	6a 00                	push   $0x0
f012cf12:	e8 7b a5 fd ff       	call   f0107492 <krealloc>
f012cf17:	83 c4 10             	add    $0x10,%esp
f012cf1a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012cf20:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012cf26:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012cf2b:	77 17                	ja     f012cf44 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf2d:	83 ec 04             	sub    $0x4,%esp
f012cf30:	68 20 b5 13 f0       	push   $0xf013b520
f012cf35:	68 27 11 00 00       	push   $0x1127
f012cf3a:	68 7a a2 13 f0       	push   $0xf013a27a
f012cf3f:	e8 62 32 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012cf44:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012cf4a:	89 c1                	mov    %eax,%ecx
f012cf4c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012cf53:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012cf56:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cf5b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012cf5e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012cf61:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf66:	f7 75 9c             	divl   -0x64(%ebp)
f012cf69:	8b 45 98             	mov    -0x68(%ebp),%eax
f012cf6c:	29 d0                	sub    %edx,%eax
f012cf6e:	89 c3                	mov    %eax,%ebx
f012cf70:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012cf77:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012cf7c:	0f b6 d0             	movzbl %al,%edx
f012cf7f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012cf82:	01 d0                	add    %edx,%eax
f012cf84:	48                   	dec    %eax
f012cf85:	89 45 90             	mov    %eax,-0x70(%ebp)
f012cf88:	8b 45 90             	mov    -0x70(%ebp),%eax
f012cf8b:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf90:	f7 75 94             	divl   -0x6c(%ebp)
f012cf93:	8b 45 90             	mov    -0x70(%ebp),%eax
f012cf96:	29 d0                	sub    %edx,%eax
f012cf98:	01 c3                	add    %eax,%ebx
f012cf9a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012cfa1:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012cfa6:	0f b6 c0             	movzbl %al,%eax
f012cfa9:	c1 e0 04             	shl    $0x4,%eax
f012cfac:	89 c2                	mov    %eax,%edx
f012cfae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012cfb1:	01 d0                	add    %edx,%eax
f012cfb3:	48                   	dec    %eax
f012cfb4:	89 45 88             	mov    %eax,-0x78(%ebp)
f012cfb7:	8b 45 88             	mov    -0x78(%ebp),%eax
f012cfba:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfbf:	f7 75 8c             	divl   -0x74(%ebp)
f012cfc2:	8b 45 88             	mov    -0x78(%ebp),%eax
f012cfc5:	29 d0                	sub    %edx,%eax
f012cfc7:	01 d8                	add    %ebx,%eax
f012cfc9:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012cfce:	39 c1                	cmp    %eax,%ecx
f012cfd0:	74 17                	je     f012cfe9 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012cfd2:	83 ec 04             	sub    $0x4,%esp
f012cfd5:	68 5c b5 13 f0       	push   $0xf013b55c
f012cfda:	68 29 11 00 00       	push   $0x1129
f012cfdf:	68 7a a2 13 f0       	push   $0xf013a27a
f012cfe4:	e8 bd 31 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012cfe9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cfec:	e8 a7 ed fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012cff1:	29 c3                	sub    %eax,%ebx
f012cff3:	89 d8                	mov    %ebx,%eax
f012cff5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cffa:	74 17                	je     f012d013 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012cffc:	83 ec 04             	sub    $0x4,%esp
f012cfff:	68 8e b5 13 f0       	push   $0xf013b58e
f012d004:	68 2b 11 00 00       	push   $0x112b
f012d009:	68 7a a2 13 f0       	push   $0xf013a27a
f012d00e:	e8 93 31 fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d013:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d01a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d01d:	e8 76 ed fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d022:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d025:	83 ec 08             	sub    $0x8,%esp
f012d028:	68 00 fc 0f 00       	push   $0xffc00
f012d02d:	6a 00                	push   $0x0
f012d02f:	e8 5e a4 fd ff       	call   f0107492 <krealloc>
f012d034:	83 c4 10             	add    $0x10,%esp
f012d037:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d03d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d043:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d048:	77 17                	ja     f012d061 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d04a:	83 ec 04             	sub    $0x4,%esp
f012d04d:	68 20 b5 13 f0       	push   $0xf013b520
f012d052:	68 33 11 00 00       	push   $0x1133
f012d057:	68 7a a2 13 f0       	push   $0xf013a27a
f012d05c:	e8 45 31 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d061:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d067:	89 c1                	mov    %eax,%ecx
f012d069:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d070:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d073:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d078:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d07b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d07e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d083:	f7 75 84             	divl   -0x7c(%ebp)
f012d086:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d089:	29 d0                	sub    %edx,%eax
f012d08b:	89 c3                	mov    %eax,%ebx
f012d08d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d094:	10 00 00 
f012d097:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d09c:	0f b6 d0             	movzbl %al,%edx
f012d09f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d0a5:	01 d0                	add    %edx,%eax
f012d0a7:	48                   	dec    %eax
f012d0a8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d0ae:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d0b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0b9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d0bf:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d0c5:	29 d0                	sub    %edx,%eax
f012d0c7:	01 c3                	add    %eax,%ebx
f012d0c9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d0d0:	10 00 00 
f012d0d3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d0d8:	0f b6 c0             	movzbl %al,%eax
f012d0db:	c1 e0 04             	shl    $0x4,%eax
f012d0de:	89 c2                	mov    %eax,%edx
f012d0e0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d0e6:	01 d0                	add    %edx,%eax
f012d0e8:	48                   	dec    %eax
f012d0e9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d0ef:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d0f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012d0fa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d100:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d106:	29 d0                	sub    %edx,%eax
f012d108:	01 d8                	add    %ebx,%eax
f012d10a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d10f:	39 c1                	cmp    %eax,%ecx
f012d111:	74 17                	je     f012d12a <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d113:	83 ec 04             	sub    $0x4,%esp
f012d116:	68 5c b5 13 f0       	push   $0xf013b55c
f012d11b:	68 35 11 00 00       	push   $0x1135
f012d120:	68 7a a2 13 f0       	push   $0xf013a27a
f012d125:	e8 7c 30 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d12a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d12d:	e8 66 ec fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d132:	29 c3                	sub    %eax,%ebx
f012d134:	89 d8                	mov    %ebx,%eax
f012d136:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d13b:	74 17                	je     f012d154 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d13d:	83 ec 04             	sub    $0x4,%esp
f012d140:	68 8e b5 13 f0       	push   $0xf013b58e
f012d145:	68 37 11 00 00       	push   $0x1137
f012d14a:	68 7a a2 13 f0       	push   $0xf013a27a
f012d14f:	e8 52 30 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d154:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d15b:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d15e:	e8 35 ec fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d163:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d166:	83 ec 08             	sub    $0x8,%esp
f012d169:	68 00 fc 0f 00       	push   $0xffc00
f012d16e:	6a 00                	push   $0x0
f012d170:	e8 1d a3 fd ff       	call   f0107492 <krealloc>
f012d175:	83 c4 10             	add    $0x10,%esp
f012d178:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d17e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d184:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d189:	77 17                	ja     f012d1a2 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d18b:	83 ec 04             	sub    $0x4,%esp
f012d18e:	68 20 b5 13 f0       	push   $0xf013b520
f012d193:	68 3e 11 00 00       	push   $0x113e
f012d198:	68 7a a2 13 f0       	push   $0xf013a27a
f012d19d:	e8 04 30 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d1a2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d1a8:	89 c1                	mov    %eax,%ecx
f012d1aa:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d1b1:	10 00 00 
f012d1b4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d1ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d1bf:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d1c5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d1cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012d1d0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d1d6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d1dc:	29 d0                	sub    %edx,%eax
f012d1de:	89 c3                	mov    %eax,%ebx
f012d1e0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d1e7:	10 00 00 
f012d1ea:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d1ef:	0f b6 d0             	movzbl %al,%edx
f012d1f2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d1f8:	01 d0                	add    %edx,%eax
f012d1fa:	48                   	dec    %eax
f012d1fb:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d201:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d207:	ba 00 00 00 00       	mov    $0x0,%edx
f012d20c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012d212:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d218:	29 d0                	sub    %edx,%eax
f012d21a:	01 c3                	add    %eax,%ebx
f012d21c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012d223:	10 00 00 
f012d226:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d22b:	0f b6 c0             	movzbl %al,%eax
f012d22e:	c1 e0 04             	shl    $0x4,%eax
f012d231:	89 c2                	mov    %eax,%edx
f012d233:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012d239:	01 d0                	add    %edx,%eax
f012d23b:	48                   	dec    %eax
f012d23c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012d242:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d248:	ba 00 00 00 00       	mov    $0x0,%edx
f012d24d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012d253:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d259:	29 d0                	sub    %edx,%eax
f012d25b:	01 d8                	add    %ebx,%eax
f012d25d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012d262:	39 c1                	cmp    %eax,%ecx
f012d264:	74 17                	je     f012d27d <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012d266:	83 ec 04             	sub    $0x4,%esp
f012d269:	68 5c b5 13 f0       	push   $0xf013b55c
f012d26e:	68 40 11 00 00       	push   $0x1140
f012d273:	68 7a a2 13 f0       	push   $0xf013a27a
f012d278:	e8 29 2f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d27d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d280:	e8 13 eb fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d285:	29 c3                	sub    %eax,%ebx
f012d287:	89 d8                	mov    %ebx,%eax
f012d289:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d28e:	74 17                	je     f012d2a7 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012d290:	83 ec 04             	sub    $0x4,%esp
f012d293:	68 8e b5 13 f0       	push   $0xf013b58e
f012d298:	68 42 11 00 00       	push   $0x1142
f012d29d:	68 7a a2 13 f0       	push   $0xf013a27a
f012d2a2:	e8 ff 2e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d2a7:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012d2ae:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d2b1:	e8 e2 ea fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d2b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012d2b9:	83 ec 08             	sub    $0x8,%esp
f012d2bc:	68 00 fc 1f 00       	push   $0x1ffc00
f012d2c1:	6a 00                	push   $0x0
f012d2c3:	e8 ca a1 fd ff       	call   f0107492 <krealloc>
f012d2c8:	83 c4 10             	add    $0x10,%esp
f012d2cb:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012d2d1:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d2d7:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012d2dc:	77 17                	ja     f012d2f5 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2de:	83 ec 04             	sub    $0x4,%esp
f012d2e1:	68 20 b5 13 f0       	push   $0xf013b520
f012d2e6:	68 49 11 00 00       	push   $0x1149
f012d2eb:	68 7a a2 13 f0       	push   $0xf013a27a
f012d2f0:	e8 b1 2e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012d2f5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d2fb:	89 c1                	mov    %eax,%ecx
f012d2fd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012d304:	10 00 00 
f012d307:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012d30d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d312:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012d318:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d31e:	ba 00 00 00 00       	mov    $0x0,%edx
f012d323:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012d329:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d32f:	29 d0                	sub    %edx,%eax
f012d331:	89 c3                	mov    %eax,%ebx
f012d333:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012d33a:	10 00 00 
f012d33d:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d342:	0f b6 d0             	movzbl %al,%edx
f012d345:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012d34b:	01 d0                	add    %edx,%eax
f012d34d:	48                   	dec    %eax
f012d34e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012d354:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d35a:	ba 00 00 00 00       	mov    $0x0,%edx
f012d35f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012d365:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d36b:	29 d0                	sub    %edx,%eax
f012d36d:	01 c3                	add    %eax,%ebx
f012d36f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012d376:	10 00 00 
f012d379:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d37e:	0f b6 c0             	movzbl %al,%eax
f012d381:	c1 e0 04             	shl    $0x4,%eax
f012d384:	89 c2                	mov    %eax,%edx
f012d386:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012d38c:	01 d0                	add    %edx,%eax
f012d38e:	48                   	dec    %eax
f012d38f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012d395:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d39b:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3a0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012d3a6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d3ac:	29 d0                	sub    %edx,%eax
f012d3ae:	01 d8                	add    %ebx,%eax
f012d3b0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012d3b5:	39 c1                	cmp    %eax,%ecx
f012d3b7:	74 17                	je     f012d3d0 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012d3b9:	83 ec 04             	sub    $0x4,%esp
f012d3bc:	68 5c b5 13 f0       	push   $0xf013b55c
f012d3c1:	68 4b 11 00 00       	push   $0x114b
f012d3c6:	68 7a a2 13 f0       	push   $0xf013a27a
f012d3cb:	e8 d6 2d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d3d0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3d3:	e8 c0 e9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d3d8:	29 c3                	sub    %eax,%ebx
f012d3da:	89 d8                	mov    %ebx,%eax
f012d3dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d3e1:	74 17                	je     f012d3fa <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012d3e3:	83 ec 04             	sub    $0x4,%esp
f012d3e6:	68 8e b5 13 f0       	push   $0xf013b58e
f012d3eb:	68 4d 11 00 00       	push   $0x114d
f012d3f0:	68 7a a2 13 f0       	push   $0xf013a27a
f012d3f5:	e8 ac 2d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d3fa:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012d401:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d404:	e8 8f e9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d409:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012d40c:	83 ec 08             	sub    $0x8,%esp
f012d40f:	68 00 fc 1f 00       	push   $0x1ffc00
f012d414:	6a 00                	push   $0x0
f012d416:	e8 77 a0 fd ff       	call   f0107492 <krealloc>
f012d41b:	83 c4 10             	add    $0x10,%esp
f012d41e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012d424:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d42a:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012d42f:	77 17                	ja     f012d448 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d431:	83 ec 04             	sub    $0x4,%esp
f012d434:	68 20 b5 13 f0       	push   $0xf013b520
f012d439:	68 54 11 00 00       	push   $0x1154
f012d43e:	68 7a a2 13 f0       	push   $0xf013a27a
f012d443:	e8 5e 2d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012d448:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d44e:	89 c1                	mov    %eax,%ecx
f012d450:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012d457:	10 00 00 
f012d45a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012d460:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d465:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012d46b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d471:	ba 00 00 00 00       	mov    $0x0,%edx
f012d476:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012d47c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d482:	29 d0                	sub    %edx,%eax
f012d484:	89 c3                	mov    %eax,%ebx
f012d486:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012d48d:	10 00 00 
f012d490:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d495:	0f b6 d0             	movzbl %al,%edx
f012d498:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012d49e:	01 d0                	add    %edx,%eax
f012d4a0:	48                   	dec    %eax
f012d4a1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012d4a7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d4ad:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4b2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012d4b8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d4be:	29 d0                	sub    %edx,%eax
f012d4c0:	01 c3                	add    %eax,%ebx
f012d4c2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012d4c9:	10 00 00 
f012d4cc:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d4d1:	0f b6 c0             	movzbl %al,%eax
f012d4d4:	c1 e0 04             	shl    $0x4,%eax
f012d4d7:	89 c2                	mov    %eax,%edx
f012d4d9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d4df:	01 d0                	add    %edx,%eax
f012d4e1:	48                   	dec    %eax
f012d4e2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012d4e8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d4ee:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4f3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012d4f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d4ff:	29 d0                	sub    %edx,%eax
f012d501:	01 d8                	add    %ebx,%eax
f012d503:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012d508:	39 c1                	cmp    %eax,%ecx
f012d50a:	74 17                	je     f012d523 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012d50c:	83 ec 04             	sub    $0x4,%esp
f012d50f:	68 5c b5 13 f0       	push   $0xf013b55c
f012d514:	68 56 11 00 00       	push   $0x1156
f012d519:	68 7a a2 13 f0       	push   $0xf013a27a
f012d51e:	e8 83 2c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d523:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d526:	e8 6d e8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d52b:	29 c3                	sub    %eax,%ebx
f012d52d:	89 d8                	mov    %ebx,%eax
f012d52f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d534:	74 17                	je     f012d54d <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012d536:	83 ec 04             	sub    $0x4,%esp
f012d539:	68 8e b5 13 f0       	push   $0xf013b58e
f012d53e:	68 58 11 00 00       	push   $0x1158
f012d543:	68 7a a2 13 f0       	push   $0xf013a27a
f012d548:	e8 59 2c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d54d:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012d554:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d557:	e8 3c e8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d55c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012d55f:	83 ec 08             	sub    $0x8,%esp
f012d562:	68 00 fc 2f 00       	push   $0x2ffc00
f012d567:	6a 00                	push   $0x0
f012d569:	e8 24 9f fd ff       	call   f0107492 <krealloc>
f012d56e:	83 c4 10             	add    $0x10,%esp
f012d571:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012d577:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d57d:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012d582:	77 17                	ja     f012d59b <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d584:	83 ec 04             	sub    $0x4,%esp
f012d587:	68 20 b5 13 f0       	push   $0xf013b520
f012d58c:	68 5f 11 00 00       	push   $0x115f
f012d591:	68 7a a2 13 f0       	push   $0xf013a27a
f012d596:	e8 0b 2c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012d59b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d5a1:	89 c1                	mov    %eax,%ecx
f012d5a3:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012d5aa:	10 00 00 
f012d5ad:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d5b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d5b8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012d5be:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d5c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5c9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012d5cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d5d5:	29 d0                	sub    %edx,%eax
f012d5d7:	89 c3                	mov    %eax,%ebx
f012d5d9:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012d5e0:	10 00 00 
f012d5e3:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d5e8:	0f b6 d0             	movzbl %al,%edx
f012d5eb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012d5f1:	01 d0                	add    %edx,%eax
f012d5f3:	48                   	dec    %eax
f012d5f4:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012d5fa:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d600:	ba 00 00 00 00       	mov    $0x0,%edx
f012d605:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012d60b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d611:	29 d0                	sub    %edx,%eax
f012d613:	01 c3                	add    %eax,%ebx
f012d615:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d61c:	10 00 00 
f012d61f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d624:	0f b6 c0             	movzbl %al,%eax
f012d627:	c1 e0 04             	shl    $0x4,%eax
f012d62a:	89 c2                	mov    %eax,%edx
f012d62c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d632:	01 d0                	add    %edx,%eax
f012d634:	48                   	dec    %eax
f012d635:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d63b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d641:	ba 00 00 00 00       	mov    $0x0,%edx
f012d646:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d64c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d652:	29 d0                	sub    %edx,%eax
f012d654:	01 d8                	add    %ebx,%eax
f012d656:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012d65b:	39 c1                	cmp    %eax,%ecx
f012d65d:	74 17                	je     f012d676 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012d65f:	83 ec 04             	sub    $0x4,%esp
f012d662:	68 5c b5 13 f0       	push   $0xf013b55c
f012d667:	68 61 11 00 00       	push   $0x1161
f012d66c:	68 7a a2 13 f0       	push   $0xf013a27a
f012d671:	e8 30 2b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012d676:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d679:	e8 1a e7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d67e:	29 c3                	sub    %eax,%ebx
f012d680:	89 d8                	mov    %ebx,%eax
f012d682:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d687:	74 17                	je     f012d6a0 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012d689:	83 ec 04             	sub    $0x4,%esp
f012d68c:	68 c4 a6 13 f0       	push   $0xf013a6c4
f012d691:	68 63 11 00 00       	push   $0x1163
f012d696:	68 7a a2 13 f0       	push   $0xf013a27a
f012d69b:	e8 06 2b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012d6a0:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012d6a7:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d6aa:	e8 e9 e6 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d6af:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012d6b2:	83 ec 08             	sub    $0x8,%esp
f012d6b5:	68 00 fc 2f 00       	push   $0x2ffc00
f012d6ba:	6a 00                	push   $0x0
f012d6bc:	e8 d1 9d fd ff       	call   f0107492 <krealloc>
f012d6c1:	83 c4 10             	add    $0x10,%esp
f012d6c4:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012d6ca:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d6d0:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012d6d5:	77 17                	ja     f012d6ee <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6d7:	83 ec 04             	sub    $0x4,%esp
f012d6da:	68 20 b5 13 f0       	push   $0xf013b520
f012d6df:	68 6a 11 00 00       	push   $0x116a
f012d6e4:	68 7a a2 13 f0       	push   $0xf013a27a
f012d6e9:	e8 b8 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012d6ee:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d6f4:	89 c1                	mov    %eax,%ecx
f012d6f6:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d6fd:	10 00 00 
f012d700:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d706:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d70b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d711:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d717:	ba 00 00 00 00       	mov    $0x0,%edx
f012d71c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d722:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d728:	29 d0                	sub    %edx,%eax
f012d72a:	89 c3                	mov    %eax,%ebx
f012d72c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d733:	10 00 00 
f012d736:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d73b:	0f b6 d0             	movzbl %al,%edx
f012d73e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d744:	01 d0                	add    %edx,%eax
f012d746:	48                   	dec    %eax
f012d747:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d74d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d753:	ba 00 00 00 00       	mov    $0x0,%edx
f012d758:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d75e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d764:	29 d0                	sub    %edx,%eax
f012d766:	01 c3                	add    %eax,%ebx
f012d768:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d76f:	10 00 00 
f012d772:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012d777:	0f b6 c0             	movzbl %al,%eax
f012d77a:	c1 e0 04             	shl    $0x4,%eax
f012d77d:	89 c2                	mov    %eax,%edx
f012d77f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d785:	01 d0                	add    %edx,%eax
f012d787:	48                   	dec    %eax
f012d788:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d78e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d794:	ba 00 00 00 00       	mov    $0x0,%edx
f012d799:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d79f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d7a5:	29 d0                	sub    %edx,%eax
f012d7a7:	01 d8                	add    %ebx,%eax
f012d7a9:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012d7ae:	39 c1                	cmp    %eax,%ecx
f012d7b0:	74 17                	je     f012d7c9 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012d7b2:	83 ec 04             	sub    $0x4,%esp
f012d7b5:	68 5c b5 13 f0       	push   $0xf013b55c
f012d7ba:	68 6c 11 00 00       	push   $0x116c
f012d7bf:	68 7a a2 13 f0       	push   $0xf013a27a
f012d7c4:	e8 dd 29 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012d7c9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7cc:	e8 c7 e5 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d7d1:	29 c3                	sub    %eax,%ebx
f012d7d3:	89 d8                	mov    %ebx,%eax
f012d7d5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d7da:	74 17                	je     f012d7f3 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012d7dc:	83 ec 04             	sub    $0x4,%esp
f012d7df:	68 8e b5 13 f0       	push   $0xf013b58e
f012d7e4:	68 6e 11 00 00       	push   $0x116e
f012d7e9:	68 7a a2 13 f0       	push   $0xf013a27a
f012d7ee:	e8 b3 29 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012d7f3:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012d7fa:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012d7fd:	e8 96 e5 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012d802:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012d805:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012d80c:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012d80f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d815:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012d81b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d821:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012d824:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012d826:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012d82c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d832:	01 c2                	add    %eax,%edx
f012d834:	8a 45 ce             	mov    -0x32(%ebp),%al
f012d837:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d839:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d83f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d845:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012d84c:	eb 11                	jmp    f012d85f <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012d84e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012d851:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d857:	01 d0                	add    %edx,%eax
f012d859:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d85c:	ff 45 f4             	incl   -0xc(%ebp)
f012d85f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012d865:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d868:	7d e4                	jge    f012d84e <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d86a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d870:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d876:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d87c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d882:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d888:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d88f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d895:	01 d0                	add    %edx,%eax
f012d897:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d89d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d8a3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d8a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d8b0:	eb 1b                	jmp    f012d8cd <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012d8b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d8b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d8bc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8c2:	01 d0                	add    %edx,%eax
f012d8c4:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d8ca:	ff 45 f0             	incl   -0x10(%ebp)
f012d8cd:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012d8d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d8d6:	7d da                	jge    f012d8b2 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d8d8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d8de:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d8e4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d8eb:	eb 17                	jmp    f012d904 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012d8ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d8f0:	01 c0                	add    %eax,%eax
f012d8f2:	89 c2                	mov    %eax,%edx
f012d8f4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d8fa:	01 d0                	add    %edx,%eax
f012d8fc:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d901:	ff 45 ec             	incl   -0x14(%ebp)
f012d904:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012d90a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d90d:	7d de                	jge    f012d8ed <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d90f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d915:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d91b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d921:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d926:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012d92c:	01 c0                	add    %eax,%eax
f012d92e:	89 c2                	mov    %eax,%edx
f012d930:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d936:	01 d0                	add    %edx,%eax
f012d938:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d93d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d943:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d949:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d950:	eb 49                	jmp    f012d99b <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012d952:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d955:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d95c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d962:	01 d0                	add    %edx,%eax
f012d964:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d967:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d96a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d971:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d977:	01 d0                	add    %edx,%eax
f012d979:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d97f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d982:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d989:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d98f:	01 d0                	add    %edx,%eax
f012d991:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d998:	ff 45 e8             	incl   -0x18(%ebp)
f012d99b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d9a1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d9a4:	7d ac                	jge    f012d952 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d9a6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d9ac:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d9b2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9b8:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d9bb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d9c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9cd:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d9d4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d9da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d9e1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9e7:	01 d0                	add    %edx,%eax
f012d9e9:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d9ec:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d9f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d9f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9ff:	01 d0                	add    %edx,%eax
f012da01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012da07:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012da0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012da14:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da1a:	01 d0                	add    %edx,%eax
f012da1c:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012da23:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012da29:	8a 00                	mov    (%eax),%al
f012da2b:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012da2e:	75 17                	jne    f012da47 <test_krealloc_BF+0xd04>
f012da30:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012da36:	89 c2                	mov    %eax,%edx
f012da38:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012da3e:	01 d0                	add    %edx,%eax
f012da40:	8a 00                	mov    (%eax),%al
f012da42:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012da45:	74 17                	je     f012da5e <test_krealloc_BF+0xd1b>
			panic(
f012da47:	83 ec 04             	sub    $0x4,%esp
f012da4a:	68 ac b5 13 f0       	push   $0xf013b5ac
f012da4f:	68 b1 11 00 00       	push   $0x11b1
f012da54:	68 7a a2 13 f0       	push   $0xf013a27a
f012da59:	e8 48 27 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012da5e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012da64:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012da6a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012da70:	8a 00                	mov    (%eax),%al
f012da72:	3c 02                	cmp    $0x2,%al
f012da74:	75 16                	jne    f012da8c <test_krealloc_BF+0xd49>
f012da76:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012da7c:	89 c2                	mov    %eax,%edx
f012da7e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012da84:	01 d0                	add    %edx,%eax
f012da86:	8a 00                	mov    (%eax),%al
f012da88:	3c 02                	cmp    $0x2,%al
f012da8a:	74 20                	je     f012daac <test_krealloc_BF+0xd69>
			panic(
f012da8c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012da92:	8a 00                	mov    (%eax),%al
f012da94:	0f be c0             	movsbl %al,%eax
f012da97:	50                   	push   %eax
f012da98:	68 ec b5 13 f0       	push   $0xf013b5ec
f012da9d:	68 b7 11 00 00       	push   $0x11b7
f012daa2:	68 7a a2 13 f0       	push   $0xf013a27a
f012daa7:	e8 fa 26 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012daac:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dab2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012dab8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dabe:	8b 00                	mov    (%eax),%eax
f012dac0:	83 f8 03             	cmp    $0x3,%eax
f012dac3:	75 1c                	jne    f012dae1 <test_krealloc_BF+0xd9e>
f012dac5:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dacb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dad2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dad8:	01 d0                	add    %edx,%eax
f012dada:	8b 00                	mov    (%eax),%eax
f012dadc:	83 f8 03             	cmp    $0x3,%eax
f012dadf:	74 17                	je     f012daf8 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012dae1:	83 ec 04             	sub    $0x4,%esp
f012dae4:	68 38 b6 13 f0       	push   $0xf013b638
f012dae9:	68 bb 11 00 00       	push   $0x11bb
f012daee:	68 7a a2 13 f0       	push   $0xf013a27a
f012daf3:	e8 ae 26 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012daf8:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dafe:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012db04:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012db0a:	8b 00                	mov    (%eax),%eax
f012db0c:	83 f8 04             	cmp    $0x4,%eax
f012db0f:	75 1c                	jne    f012db2d <test_krealloc_BF+0xdea>
f012db11:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012db17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012db1e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012db24:	01 d0                	add    %edx,%eax
f012db26:	8b 00                	mov    (%eax),%eax
f012db28:	83 f8 04             	cmp    $0x4,%eax
f012db2b:	74 17                	je     f012db44 <test_krealloc_BF+0xe01>
			panic(
f012db2d:	83 ec 04             	sub    $0x4,%esp
f012db30:	68 ac b5 13 f0       	push   $0xf013b5ac
f012db35:	68 c0 11 00 00       	push   $0x11c0
f012db3a:	68 7a a2 13 f0       	push   $0xf013a27a
f012db3f:	e8 62 26 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012db44:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012db4a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012db50:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012db56:	66 8b 00             	mov    (%eax),%ax
f012db59:	66 83 f8 05          	cmp    $0x5,%ax
f012db5d:	75 1b                	jne    f012db7a <test_krealloc_BF+0xe37>
f012db5f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012db65:	01 c0                	add    %eax,%eax
f012db67:	89 c2                	mov    %eax,%edx
f012db69:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012db6f:	01 d0                	add    %edx,%eax
f012db71:	66 8b 00             	mov    (%eax),%ax
f012db74:	66 83 f8 05          	cmp    $0x5,%ax
f012db78:	74 17                	je     f012db91 <test_krealloc_BF+0xe4e>
			panic(
f012db7a:	83 ec 04             	sub    $0x4,%esp
f012db7d:	68 ac b5 13 f0       	push   $0xf013b5ac
f012db82:	68 c5 11 00 00       	push   $0x11c5
f012db87:	68 7a a2 13 f0       	push   $0xf013a27a
f012db8c:	e8 15 26 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012db91:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012db97:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012db9d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dba3:	66 8b 00             	mov    (%eax),%ax
f012dba6:	66 83 f8 06          	cmp    $0x6,%ax
f012dbaa:	75 1b                	jne    f012dbc7 <test_krealloc_BF+0xe84>
f012dbac:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012dbb2:	01 c0                	add    %eax,%eax
f012dbb4:	89 c2                	mov    %eax,%edx
f012dbb6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dbbc:	01 d0                	add    %edx,%eax
f012dbbe:	66 8b 00             	mov    (%eax),%ax
f012dbc1:	66 83 f8 06          	cmp    $0x6,%ax
f012dbc5:	74 17                	je     f012dbde <test_krealloc_BF+0xe9b>
			panic(
f012dbc7:	83 ec 04             	sub    $0x4,%esp
f012dbca:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dbcf:	68 ca 11 00 00       	push   $0x11ca
f012dbd4:	68 7a a2 13 f0       	push   $0xf013a27a
f012dbd9:	e8 c8 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012dbde:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dbe4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012dbea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dbf0:	8a 00                	mov    (%eax),%al
f012dbf2:	3c 07                	cmp    $0x7,%al
f012dbf4:	75 1b                	jne    f012dc11 <test_krealloc_BF+0xece>
f012dbf6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dbfc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dc03:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc09:	01 d0                	add    %edx,%eax
f012dc0b:	8a 00                	mov    (%eax),%al
f012dc0d:	3c 07                	cmp    $0x7,%al
f012dc0f:	74 17                	je     f012dc28 <test_krealloc_BF+0xee5>
			panic(
f012dc11:	83 ec 04             	sub    $0x4,%esp
f012dc14:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dc19:	68 cf 11 00 00       	push   $0x11cf
f012dc1e:	68 7a a2 13 f0       	push   $0xf013a27a
f012dc23:	e8 7e 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012dc28:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc2e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dc32:	66 83 f8 07          	cmp    $0x7,%ax
f012dc36:	75 1f                	jne    f012dc57 <test_krealloc_BF+0xf14>
f012dc38:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dc3e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dc45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc4b:	01 d0                	add    %edx,%eax
f012dc4d:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dc51:	66 83 f8 07          	cmp    $0x7,%ax
f012dc55:	74 17                	je     f012dc6e <test_krealloc_BF+0xf2b>
			panic(
f012dc57:	83 ec 04             	sub    $0x4,%esp
f012dc5a:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dc5f:	68 d2 11 00 00       	push   $0x11d2
f012dc64:	68 7a a2 13 f0       	push   $0xf013a27a
f012dc69:	e8 38 25 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012dc6e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc74:	8b 40 04             	mov    0x4(%eax),%eax
f012dc77:	83 f8 07             	cmp    $0x7,%eax
f012dc7a:	75 1d                	jne    f012dc99 <test_krealloc_BF+0xf56>
f012dc7c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dc82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dc89:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dc8f:	01 d0                	add    %edx,%eax
f012dc91:	8b 40 04             	mov    0x4(%eax),%eax
f012dc94:	83 f8 07             	cmp    $0x7,%eax
f012dc97:	74 17                	je     f012dcb0 <test_krealloc_BF+0xf6d>
			panic(
f012dc99:	83 ec 04             	sub    $0x4,%esp
f012dc9c:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dca1:	68 d5 11 00 00       	push   $0x11d5
f012dca6:	68 7a a2 13 f0       	push   $0xf013a27a
f012dcab:	e8 f6 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012dcb0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dcb6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012dcbc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dcc2:	8a 00                	mov    (%eax),%al
f012dcc4:	3c 08                	cmp    $0x8,%al
f012dcc6:	75 1b                	jne    f012dce3 <test_krealloc_BF+0xfa0>
f012dcc8:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dcce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dcd5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dcdb:	01 d0                	add    %edx,%eax
f012dcdd:	8a 00                	mov    (%eax),%al
f012dcdf:	3c 08                	cmp    $0x8,%al
f012dce1:	74 17                	je     f012dcfa <test_krealloc_BF+0xfb7>
			panic(
f012dce3:	83 ec 04             	sub    $0x4,%esp
f012dce6:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dceb:	68 da 11 00 00       	push   $0x11da
f012dcf0:	68 7a a2 13 f0       	push   $0xf013a27a
f012dcf5:	e8 ac 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012dcfa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd00:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dd04:	66 83 f8 08          	cmp    $0x8,%ax
f012dd08:	75 1f                	jne    f012dd29 <test_krealloc_BF+0xfe6>
f012dd0a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd17:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd1d:	01 d0                	add    %edx,%eax
f012dd1f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012dd23:	66 83 f8 08          	cmp    $0x8,%ax
f012dd27:	74 17                	je     f012dd40 <test_krealloc_BF+0xffd>
			panic(
f012dd29:	83 ec 04             	sub    $0x4,%esp
f012dd2c:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dd31:	68 dd 11 00 00       	push   $0x11dd
f012dd36:	68 7a a2 13 f0       	push   $0xf013a27a
f012dd3b:	e8 66 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012dd40:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd46:	8b 40 04             	mov    0x4(%eax),%eax
f012dd49:	83 f8 08             	cmp    $0x8,%eax
f012dd4c:	75 1d                	jne    f012dd6b <test_krealloc_BF+0x1028>
f012dd4e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dd54:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd5b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd61:	01 d0                	add    %edx,%eax
f012dd63:	8b 40 04             	mov    0x4(%eax),%eax
f012dd66:	83 f8 08             	cmp    $0x8,%eax
f012dd69:	74 17                	je     f012dd82 <test_krealloc_BF+0x103f>
			panic(
f012dd6b:	83 ec 04             	sub    $0x4,%esp
f012dd6e:	68 ac b5 13 f0       	push   $0xf013b5ac
f012dd73:	68 e0 11 00 00       	push   $0x11e0
f012dd78:	68 7a a2 13 f0       	push   $0xf013a27a
f012dd7d:	e8 24 24 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012dd82:	e8 11 e0 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012dd87:	89 c2                	mov    %eax,%edx
f012dd89:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dd8c:	39 c2                	cmp    %eax,%edx
f012dd8e:	74 17                	je     f012dda7 <test_krealloc_BF+0x1064>
			panic(
f012dd90:	83 ec 04             	sub    $0x4,%esp
f012dd93:	68 6c b6 13 f0       	push   $0xf013b66c
f012dd98:	68 e4 11 00 00       	push   $0x11e4
f012dd9d:	68 7a a2 13 f0       	push   $0xf013a27a
f012dda2:	e8 ff 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012dda7:	83 ec 0c             	sub    $0xc,%esp
f012ddaa:	68 b8 b6 13 f0       	push   $0xf013b6b8
f012ddaf:	e8 79 2e fd ff       	call   f0100c2d <cprintf>
f012ddb4:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ddb7:	e8 dc df fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ddbc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ddbf:	e8 c8 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ddc4:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ddca:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ddd0:	83 ec 08             	sub    $0x8,%esp
f012ddd3:	6a 00                	push   $0x0
f012ddd5:	50                   	push   %eax
f012ddd6:	e8 b7 96 fd ff       	call   f0107492 <krealloc>
f012dddb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ddde:	e8 a9 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012dde3:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012dde9:	74 17                	je     f012de02 <test_krealloc_BF+0x10bf>
			panic(
f012ddeb:	83 ec 04             	sub    $0x4,%esp
f012ddee:	68 dc b6 13 f0       	push   $0xf013b6dc
f012ddf3:	68 f1 11 00 00       	push   $0x11f1
f012ddf8:	68 7a a2 13 f0       	push   $0xf013a27a
f012ddfd:	e8 a4 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012de02:	e8 91 df fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012de07:	89 c2                	mov    %eax,%edx
f012de09:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012de0c:	29 c2                	sub    %eax,%edx
f012de0e:	89 d0                	mov    %edx,%eax
f012de10:	3d 00 01 00 00       	cmp    $0x100,%eax
f012de15:	74 17                	je     f012de2e <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012de17:	83 ec 04             	sub    $0x4,%esp
f012de1a:	68 50 b7 13 f0       	push   $0xf013b750
f012de1f:	68 f3 11 00 00       	push   $0x11f3
f012de24:	68 7a a2 13 f0       	push   $0xf013a27a
f012de29:	e8 78 23 fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012de2e:	e8 65 df fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012de33:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012de36:	e8 51 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012de3b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012de41:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012de47:	83 ec 08             	sub    $0x8,%esp
f012de4a:	6a 00                	push   $0x0
f012de4c:	50                   	push   %eax
f012de4d:	e8 40 96 fd ff       	call   f0107492 <krealloc>
f012de52:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012de55:	e8 32 5e fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012de5a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012de60:	74 17                	je     f012de79 <test_krealloc_BF+0x1136>
			panic(
f012de62:	83 ec 04             	sub    $0x4,%esp
f012de65:	68 dc b6 13 f0       	push   $0xf013b6dc
f012de6a:	68 fc 11 00 00       	push   $0x11fc
f012de6f:	68 7a a2 13 f0       	push   $0xf013a27a
f012de74:	e8 2d 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012de79:	e8 1a df fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012de7e:	89 c2                	mov    %eax,%edx
f012de80:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012de83:	29 c2                	sub    %eax,%edx
f012de85:	89 d0                	mov    %edx,%eax
f012de87:	3d 00 01 00 00       	cmp    $0x100,%eax
f012de8c:	74 17                	je     f012dea5 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012de8e:	83 ec 04             	sub    $0x4,%esp
f012de91:	68 50 b7 13 f0       	push   $0xf013b750
f012de96:	68 fe 11 00 00       	push   $0x11fe
f012de9b:	68 7a a2 13 f0       	push   $0xf013a27a
f012dea0:	e8 01 23 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012dea5:	e8 ee de fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012deaa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dead:	e8 da 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012deb2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012deb8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012debe:	83 ec 08             	sub    $0x8,%esp
f012dec1:	6a 00                	push   $0x0
f012dec3:	50                   	push   %eax
f012dec4:	e8 c9 95 fd ff       	call   f0107492 <krealloc>
f012dec9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012decc:	e8 bb 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ded1:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ded7:	74 17                	je     f012def0 <test_krealloc_BF+0x11ad>
			panic(
f012ded9:	83 ec 04             	sub    $0x4,%esp
f012dedc:	68 94 a2 13 f0       	push   $0xf013a294
f012dee1:	68 06 12 00 00       	push   $0x1206
f012dee6:	68 7a a2 13 f0       	push   $0xf013a27a
f012deeb:	e8 b6 22 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012def0:	e8 a3 de fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012def5:	89 c2                	mov    %eax,%edx
f012def7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012defa:	29 c2                	sub    %eax,%edx
f012defc:	89 d0                	mov    %edx,%eax
f012defe:	3d 00 02 00 00       	cmp    $0x200,%eax
f012df03:	74 17                	je     f012df1c <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012df05:	83 ec 04             	sub    $0x4,%esp
f012df08:	68 50 b7 13 f0       	push   $0xf013b750
f012df0d:	68 08 12 00 00       	push   $0x1208
f012df12:	68 7a a2 13 f0       	push   $0xf013a27a
f012df17:	e8 8a 22 fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012df1c:	e8 77 de fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012df21:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df24:	e8 63 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012df29:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012df2f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012df35:	83 ec 08             	sub    $0x8,%esp
f012df38:	6a 00                	push   $0x0
f012df3a:	50                   	push   %eax
f012df3b:	e8 52 95 fd ff       	call   f0107492 <krealloc>
f012df40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df43:	e8 44 5d fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012df48:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012df4e:	74 17                	je     f012df67 <test_krealloc_BF+0x1224>
			panic(
f012df50:	83 ec 04             	sub    $0x4,%esp
f012df53:	68 dc b6 13 f0       	push   $0xf013b6dc
f012df58:	68 10 12 00 00       	push   $0x1210
f012df5d:	68 7a a2 13 f0       	push   $0xf013a27a
f012df62:	e8 3f 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012df67:	e8 2c de fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012df6c:	89 c2                	mov    %eax,%edx
f012df6e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df71:	29 c2                	sub    %eax,%edx
f012df73:	89 d0                	mov    %edx,%eax
f012df75:	3d 00 03 00 00       	cmp    $0x300,%eax
f012df7a:	74 17                	je     f012df93 <test_krealloc_BF+0x1250>
			panic(
f012df7c:	83 ec 04             	sub    $0x4,%esp
f012df7f:	68 84 b7 13 f0       	push   $0xf013b784
f012df84:	68 13 12 00 00       	push   $0x1213
f012df89:	68 7a a2 13 f0       	push   $0xf013a27a
f012df8e:	e8 13 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012df93:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012df9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012dfa1:	eb 48                	jmp    f012dfeb <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012dfa3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012dfa6:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012dfab:	83 ec 04             	sub    $0x4,%esp
f012dfae:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012dfb4:	51                   	push   %ecx
f012dfb5:	52                   	push   %edx
f012dfb6:	50                   	push   %eax
f012dfb7:	e8 ad 89 fd ff       	call   f0106969 <get_page_table>
f012dfbc:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012dfbf:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012dfc5:	85 c0                	test   %eax,%eax
f012dfc7:	75 17                	jne    f012dfe0 <test_krealloc_BF+0x129d>
					panic(
f012dfc9:	83 ec 04             	sub    $0x4,%esp
f012dfcc:	68 7c ab 13 f0       	push   $0xf013ab7c
f012dfd1:	68 1f 12 00 00       	push   $0x121f
f012dfd6:	68 7a a2 13 f0       	push   $0xf013a27a
f012dfdb:	e8 c6 21 fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012dfe0:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012dfe7:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012dfeb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dfef:	78 b2                	js     f012dfa3 <test_krealloc_BF+0x1260>
f012dff1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012dff5:	7f 09                	jg     f012e000 <test_krealloc_BF+0x12bd>
f012dff7:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012dffe:	76 a3                	jbe    f012dfa3 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e000:	83 ec 0c             	sub    $0xc,%esp
f012e003:	68 c3 b7 13 f0       	push   $0xf013b7c3
f012e008:	e8 20 2c fd ff       	call   f0100c2d <cprintf>
f012e00d:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e010:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e016:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e01c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e023:	eb 21                	jmp    f012e046 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e025:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e02b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e02e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e034:	01 c8                	add    %ecx,%eax
f012e036:	8a 00                	mov    (%eax),%al
f012e038:	0f be c0             	movsbl %al,%eax
f012e03b:	01 d0                	add    %edx,%eax
f012e03d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e043:	ff 45 dc             	incl   -0x24(%ebp)
f012e046:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e04c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e04f:	7d d4                	jge    f012e025 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e051:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e057:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e05d:	42                   	inc    %edx
f012e05e:	01 d2                	add    %edx,%edx
f012e060:	39 d0                	cmp    %edx,%eax
f012e062:	74 17                	je     f012e07b <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e064:	83 ec 04             	sub    $0x4,%esp
f012e067:	68 cc b7 13 f0       	push   $0xf013b7cc
f012e06c:	68 31 12 00 00       	push   $0x1231
f012e071:	68 7a a2 13 f0       	push   $0xf013a27a
f012e076:	e8 2b 21 fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e07b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e081:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e087:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e08e:	eb 25                	jmp    f012e0b5 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e090:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e096:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e099:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e0a0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e0a6:	01 c8                	add    %ecx,%eax
f012e0a8:	8b 00                	mov    (%eax),%eax
f012e0aa:	01 d0                	add    %edx,%eax
f012e0ac:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e0b2:	ff 45 dc             	incl   -0x24(%ebp)
f012e0b5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e0bb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e0be:	7d d0                	jge    f012e090 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e0c0:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e0c6:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e0cc:	42                   	inc    %edx
f012e0cd:	c1 e2 02             	shl    $0x2,%edx
f012e0d0:	39 d0                	cmp    %edx,%eax
f012e0d2:	74 17                	je     f012e0eb <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e0d4:	83 ec 04             	sub    $0x4,%esp
f012e0d7:	68 cc b7 13 f0       	push   $0xf013b7cc
f012e0dc:	68 3b 12 00 00       	push   $0x123b
f012e0e1:	68 7a a2 13 f0       	push   $0xf013a27a
f012e0e6:	e8 bb 20 fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e0eb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e0f1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e0f7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e0fe:	eb 24                	jmp    f012e124 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e100:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e106:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e109:	01 c0                	add    %eax,%eax
f012e10b:	89 c1                	mov    %eax,%ecx
f012e10d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e113:	01 c8                	add    %ecx,%eax
f012e115:	66 8b 00             	mov    (%eax),%ax
f012e118:	98                   	cwtl   
f012e119:	01 d0                	add    %edx,%eax
f012e11b:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e121:	ff 45 dc             	incl   -0x24(%ebp)
f012e124:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e12a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e12d:	7d d1                	jge    f012e100 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e12f:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e135:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e13b:	8d 48 01             	lea    0x1(%eax),%ecx
f012e13e:	89 c8                	mov    %ecx,%eax
f012e140:	c1 e0 02             	shl    $0x2,%eax
f012e143:	01 c8                	add    %ecx,%eax
f012e145:	39 c2                	cmp    %eax,%edx
f012e147:	74 17                	je     f012e160 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e149:	83 ec 04             	sub    $0x4,%esp
f012e14c:	68 cc b7 13 f0       	push   $0xf013b7cc
f012e151:	68 45 12 00 00       	push   $0x1245
f012e156:	68 7a a2 13 f0       	push   $0xf013a27a
f012e15b:	e8 46 20 fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e160:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e166:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e16c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e173:	eb 70                	jmp    f012e1e5 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e175:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e17b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e17e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e185:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e18b:	01 c8                	add    %ecx,%eax
f012e18d:	8a 00                	mov    (%eax),%al
f012e18f:	0f be c0             	movsbl %al,%eax
f012e192:	01 d0                	add    %edx,%eax
f012e194:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e19a:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e1a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e1a3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1aa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1b0:	01 c8                	add    %ecx,%eax
f012e1b2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e1b6:	98                   	cwtl   
f012e1b7:	01 d0                	add    %edx,%eax
f012e1b9:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e1bf:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e1c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e1c8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1cf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1d5:	01 c8                	add    %ecx,%eax
f012e1d7:	8b 40 04             	mov    0x4(%eax),%eax
f012e1da:	01 d0                	add    %edx,%eax
f012e1dc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e1e2:	ff 45 dc             	incl   -0x24(%ebp)
f012e1e5:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e1eb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e1ee:	7d 85                	jge    f012e175 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e1f0:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e1f6:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e1fc:	8d 50 01             	lea    0x1(%eax),%edx
f012e1ff:	89 d0                	mov    %edx,%eax
f012e201:	01 c0                	add    %eax,%eax
f012e203:	01 d0                	add    %edx,%eax
f012e205:	01 c0                	add    %eax,%eax
f012e207:	01 d0                	add    %edx,%eax
f012e209:	39 c1                	cmp    %eax,%ecx
f012e20b:	75 3a                	jne    f012e247 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e20d:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012e213:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e219:	8d 50 01             	lea    0x1(%eax),%edx
f012e21c:	89 d0                	mov    %edx,%eax
f012e21e:	01 c0                	add    %eax,%eax
f012e220:	01 d0                	add    %edx,%eax
f012e222:	01 c0                	add    %eax,%eax
f012e224:	01 d0                	add    %edx,%eax
f012e226:	39 c1                	cmp    %eax,%ecx
f012e228:	75 1d                	jne    f012e247 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012e22a:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012e230:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e236:	8d 50 01             	lea    0x1(%eax),%edx
f012e239:	89 d0                	mov    %edx,%eax
f012e23b:	01 c0                	add    %eax,%eax
f012e23d:	01 d0                	add    %edx,%eax
f012e23f:	01 c0                	add    %eax,%eax
f012e241:	01 d0                	add    %edx,%eax
f012e243:	39 c1                	cmp    %eax,%ecx
f012e245:	74 17                	je     f012e25e <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012e247:	83 ec 04             	sub    $0x4,%esp
f012e24a:	68 cc b7 13 f0       	push   $0xf013b7cc
f012e24f:	68 53 12 00 00       	push   $0x1253
f012e254:	68 7a a2 13 f0       	push   $0xf013a27a
f012e259:	e8 48 1f fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012e25e:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012e265:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e268:	e8 2b db fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e26d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012e270:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e276:	83 ec 08             	sub    $0x8,%esp
f012e279:	68 00 3c 00 00       	push   $0x3c00
f012e27e:	50                   	push   %eax
f012e27f:	e8 0e 92 fd ff       	call   f0107492 <krealloc>
f012e284:	83 c4 10             	add    $0x10,%esp
f012e287:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e28d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e293:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e298:	77 17                	ja     f012e2b1 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e29a:	83 ec 04             	sub    $0x4,%esp
f012e29d:	68 20 b5 13 f0       	push   $0xf013b520
f012e2a2:	68 5f 12 00 00       	push   $0x125f
f012e2a7:	68 7a a2 13 f0       	push   $0xf013a27a
f012e2ac:	e8 f5 1e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e2b1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e2b7:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e2bd:	74 17                	je     f012e2d6 <test_krealloc_BF+0x1593>
			panic(
f012e2bf:	83 ec 04             	sub    $0x4,%esp
f012e2c2:	68 04 b8 13 f0       	push   $0xf013b804
f012e2c7:	68 62 12 00 00       	push   $0x1262
f012e2cc:	68 7a a2 13 f0       	push   $0xf013a27a
f012e2d1:	e8 d0 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e2d6:	e8 bd da fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e2db:	89 c2                	mov    %eax,%edx
f012e2dd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e2e0:	39 c2                	cmp    %eax,%edx
f012e2e2:	74 17                	je     f012e2fb <test_krealloc_BF+0x15b8>
			panic(
f012e2e4:	83 ec 04             	sub    $0x4,%esp
f012e2e7:	68 70 b8 13 f0       	push   $0xf013b870
f012e2ec:	68 65 12 00 00       	push   $0x1265
f012e2f1:	68 7a a2 13 f0       	push   $0xf013a27a
f012e2f6:	e8 ab 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e2fb:	e8 98 da fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e300:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012e303:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e309:	83 ec 08             	sub    $0x8,%esp
f012e30c:	68 00 fc 0f 00       	push   $0xffc00
f012e311:	50                   	push   %eax
f012e312:	e8 7b 91 fd ff       	call   f0107492 <krealloc>
f012e317:	83 c4 10             	add    $0x10,%esp
f012e31a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e320:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e326:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e32b:	77 17                	ja     f012e344 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e32d:	83 ec 04             	sub    $0x4,%esp
f012e330:	68 20 b5 13 f0       	push   $0xf013b520
f012e335:	68 6b 12 00 00       	push   $0x126b
f012e33a:	68 7a a2 13 f0       	push   $0xf013a27a
f012e33f:	e8 62 1e fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e344:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e34a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e350:	74 17                	je     f012e369 <test_krealloc_BF+0x1626>
			panic(
f012e352:	83 ec 04             	sub    $0x4,%esp
f012e355:	68 04 b8 13 f0       	push   $0xf013b804
f012e35a:	68 6e 12 00 00       	push   $0x126e
f012e35f:	68 7a a2 13 f0       	push   $0xf013a27a
f012e364:	e8 3d 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e369:	e8 2a da fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e36e:	89 c2                	mov    %eax,%edx
f012e370:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e373:	39 c2                	cmp    %eax,%edx
f012e375:	74 17                	je     f012e38e <test_krealloc_BF+0x164b>
			panic(
f012e377:	83 ec 04             	sub    $0x4,%esp
f012e37a:	68 70 b8 13 f0       	push   $0xf013b870
f012e37f:	68 71 12 00 00       	push   $0x1271
f012e384:	68 7a a2 13 f0       	push   $0xf013a27a
f012e389:	e8 18 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e38e:	e8 05 da fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e393:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012e396:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e39c:	83 ec 08             	sub    $0x8,%esp
f012e39f:	68 00 fc 0f 00       	push   $0xffc00
f012e3a4:	50                   	push   %eax
f012e3a5:	e8 e8 90 fd ff       	call   f0107492 <krealloc>
f012e3aa:	83 c4 10             	add    $0x10,%esp
f012e3ad:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e3b3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e3b9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e3be:	77 17                	ja     f012e3d7 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e3c0:	83 ec 04             	sub    $0x4,%esp
f012e3c3:	68 20 b5 13 f0       	push   $0xf013b520
f012e3c8:	68 77 12 00 00       	push   $0x1277
f012e3cd:	68 7a a2 13 f0       	push   $0xf013a27a
f012e3d2:	e8 cf 1d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e3d7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3dd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e3e3:	74 17                	je     f012e3fc <test_krealloc_BF+0x16b9>
			panic(
f012e3e5:	83 ec 04             	sub    $0x4,%esp
f012e3e8:	68 04 b8 13 f0       	push   $0xf013b804
f012e3ed:	68 7a 12 00 00       	push   $0x127a
f012e3f2:	68 7a a2 13 f0       	push   $0xf013a27a
f012e3f7:	e8 aa 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e3fc:	e8 97 d9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e401:	89 c2                	mov    %eax,%edx
f012e403:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e406:	39 c2                	cmp    %eax,%edx
f012e408:	74 17                	je     f012e421 <test_krealloc_BF+0x16de>
			panic(
f012e40a:	83 ec 04             	sub    $0x4,%esp
f012e40d:	68 70 b8 13 f0       	push   $0xf013b870
f012e412:	68 7d 12 00 00       	push   $0x127d
f012e417:	68 7a a2 13 f0       	push   $0xf013a27a
f012e41c:	e8 85 1d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e421:	e8 72 d9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e426:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012e429:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e42f:	83 ec 08             	sub    $0x8,%esp
f012e432:	68 00 fc 0f 00       	push   $0xffc00
f012e437:	50                   	push   %eax
f012e438:	e8 55 90 fd ff       	call   f0107492 <krealloc>
f012e43d:	83 c4 10             	add    $0x10,%esp
f012e440:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e446:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e44c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e451:	77 17                	ja     f012e46a <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e453:	83 ec 04             	sub    $0x4,%esp
f012e456:	68 20 b5 13 f0       	push   $0xf013b520
f012e45b:	68 85 12 00 00       	push   $0x1285
f012e460:	68 7a a2 13 f0       	push   $0xf013a27a
f012e465:	e8 3c 1d fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012e46a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e470:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e476:	74 17                	je     f012e48f <test_krealloc_BF+0x174c>
			panic(
f012e478:	83 ec 04             	sub    $0x4,%esp
f012e47b:	68 b4 b8 13 f0       	push   $0xf013b8b4
f012e480:	68 88 12 00 00       	push   $0x1288
f012e485:	68 7a a2 13 f0       	push   $0xf013a27a
f012e48a:	e8 17 1d fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e48f:	e8 04 d9 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e494:	89 c2                	mov    %eax,%edx
f012e496:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e499:	39 c2                	cmp    %eax,%edx
f012e49b:	74 17                	je     f012e4b4 <test_krealloc_BF+0x1771>
			panic(
f012e49d:	83 ec 04             	sub    $0x4,%esp
f012e4a0:	68 70 b8 13 f0       	push   $0xf013b870
f012e4a5:	68 8b 12 00 00       	push   $0x128b
f012e4aa:	68 7a a2 13 f0       	push   $0xf013a27a
f012e4af:	e8 f2 1c fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012e4b4:	83 ec 0c             	sub    $0xc,%esp
f012e4b7:	68 93 aa 13 f0       	push   $0xf013aa93
f012e4bc:	e8 6c 27 fd ff       	call   f0100c2d <cprintf>
f012e4c1:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012e4c4:	e8 cf d8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e4c9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012e4cc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e4d2:	83 ec 08             	sub    $0x8,%esp
f012e4d5:	68 00 18 10 00       	push   $0x101800
f012e4da:	50                   	push   %eax
f012e4db:	e8 b2 8f fd ff       	call   f0107492 <krealloc>
f012e4e0:	83 c4 10             	add    $0x10,%esp
f012e4e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e4e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e4e9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e4ee:	77 17                	ja     f012e507 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e4f0:	83 ec 04             	sub    $0x4,%esp
f012e4f3:	68 20 b5 13 f0       	push   $0xf013b520
f012e4f8:	68 93 12 00 00       	push   $0x1293
f012e4fd:	68 7a a2 13 f0       	push   $0xf013a27a
f012e502:	e8 9f 1c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e507:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e50d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e510:	74 17                	je     f012e529 <test_krealloc_BF+0x17e6>
			panic(
f012e512:	83 ec 04             	sub    $0x4,%esp
f012e515:	68 14 b9 13 f0       	push   $0xf013b914
f012e51a:	68 96 12 00 00       	push   $0x1296
f012e51f:	68 7a a2 13 f0       	push   $0xf013a27a
f012e524:	e8 7d 1c fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012e529:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e52c:	e8 67 d8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e531:	29 c3                	sub    %eax,%ebx
f012e533:	89 d8                	mov    %ebx,%eax
f012e535:	83 f8 02             	cmp    $0x2,%eax
f012e538:	74 17                	je     f012e551 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012e53a:	83 ec 04             	sub    $0x4,%esp
f012e53d:	68 90 b9 13 f0       	push   $0xf013b990
f012e542:	68 98 12 00 00       	push   $0x1298
f012e547:	68 7a a2 13 f0       	push   $0xf013a27a
f012e54c:	e8 55 1c fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012e551:	e8 42 d8 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e556:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012e559:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e55f:	83 ec 08             	sub    $0x8,%esp
f012e562:	68 00 fc 3f 00       	push   $0x3ffc00
f012e567:	50                   	push   %eax
f012e568:	e8 25 8f fd ff       	call   f0107492 <krealloc>
f012e56d:	83 c4 10             	add    $0x10,%esp
f012e570:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e573:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e576:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e57b:	77 17                	ja     f012e594 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e57d:	83 ec 04             	sub    $0x4,%esp
f012e580:	68 20 b5 13 f0       	push   $0xf013b520
f012e585:	68 9e 12 00 00       	push   $0x129e
f012e58a:	68 7a a2 13 f0       	push   $0xf013a27a
f012e58f:	e8 12 1c fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e594:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e59a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e59d:	74 17                	je     f012e5b6 <test_krealloc_BF+0x1873>
			panic(
f012e59f:	83 ec 04             	sub    $0x4,%esp
f012e5a2:	68 14 b9 13 f0       	push   $0xf013b914
f012e5a7:	68 a1 12 00 00       	push   $0x12a1
f012e5ac:	68 7a a2 13 f0       	push   $0xf013a27a
f012e5b1:	e8 f0 1b fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012e5b6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e5b9:	e8 da d7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e5be:	29 c3                	sub    %eax,%ebx
f012e5c0:	89 d8                	mov    %ebx,%eax
f012e5c2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e5c7:	74 17                	je     f012e5e0 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012e5c9:	83 ec 04             	sub    $0x4,%esp
f012e5cc:	68 90 b9 13 f0       	push   $0xf013b990
f012e5d1:	68 a4 12 00 00       	push   $0x12a4
f012e5d6:	68 7a a2 13 f0       	push   $0xf013a27a
f012e5db:	e8 c6 1b fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012e5e0:	83 ec 0c             	sub    $0xc,%esp
f012e5e3:	68 d8 aa 13 f0       	push   $0xf013aad8
f012e5e8:	e8 40 26 fd ff       	call   f0100c2d <cprintf>
f012e5ed:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e5f0:	e8 a3 d7 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e5f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012e5f8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e5fe:	83 ec 08             	sub    $0x8,%esp
f012e601:	68 00 fc 9f 00       	push   $0x9ffc00
f012e606:	50                   	push   %eax
f012e607:	e8 86 8e fd ff       	call   f0107492 <krealloc>
f012e60c:	83 c4 10             	add    $0x10,%esp
f012e60f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e612:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e615:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e61a:	77 17                	ja     f012e633 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e61c:	83 ec 04             	sub    $0x4,%esp
f012e61f:	68 20 b5 13 f0       	push   $0xf013b520
f012e624:	68 af 12 00 00       	push   $0x12af
f012e629:	68 7a a2 13 f0       	push   $0xf013a27a
f012e62e:	e8 73 1b fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012e633:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012e63a:	10 00 00 
f012e63d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012e643:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e648:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012e64e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012e654:	ba 00 00 00 00       	mov    $0x0,%edx
f012e659:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012e65f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012e665:	29 d0                	sub    %edx,%eax
f012e667:	89 c1                	mov    %eax,%ecx
f012e669:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012e670:	10 00 00 
f012e673:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e678:	0f b6 d0             	movzbl %al,%edx
f012e67b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012e681:	01 d0                	add    %edx,%eax
f012e683:	48                   	dec    %eax
f012e684:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012e68a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012e690:	ba 00 00 00 00       	mov    $0x0,%edx
f012e695:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012e69b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012e6a1:	29 d0                	sub    %edx,%eax
f012e6a3:	01 c1                	add    %eax,%ecx
f012e6a5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012e6ac:	10 00 00 
f012e6af:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e6b4:	0f b6 c0             	movzbl %al,%eax
f012e6b7:	c1 e0 04             	shl    $0x4,%eax
f012e6ba:	89 c2                	mov    %eax,%edx
f012e6bc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012e6c2:	01 d0                	add    %edx,%eax
f012e6c4:	48                   	dec    %eax
f012e6c5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012e6cb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012e6d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6d6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012e6dc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012e6e2:	29 d0                	sub    %edx,%eax
f012e6e4:	01 c8                	add    %ecx,%eax
f012e6e6:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012e6ec:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e6ef:	39 c2                	cmp    %eax,%edx
f012e6f1:	74 18                	je     f012e70b <test_krealloc_BF+0x19c8>
			panic(
f012e6f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e6f6:	50                   	push   %eax
f012e6f7:	68 c4 b9 13 f0       	push   $0xf013b9c4
f012e6fc:	68 b3 12 00 00       	push   $0x12b3
f012e701:	68 7a a2 13 f0       	push   $0xf013a27a
f012e706:	e8 9b 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012e70b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e711:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e714:	75 17                	jne    f012e72d <test_krealloc_BF+0x19ea>
			panic(
f012e716:	83 ec 04             	sub    $0x4,%esp
f012e719:	68 08 ba 13 f0       	push   $0xf013ba08
f012e71e:	68 b6 12 00 00       	push   $0x12b6
f012e723:	68 7a a2 13 f0       	push   $0xf013a27a
f012e728:	e8 79 1a fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012e72d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e730:	e8 63 d6 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e735:	29 c3                	sub    %eax,%ebx
f012e737:	89 d8                	mov    %ebx,%eax
f012e739:	3d 00 06 00 00       	cmp    $0x600,%eax
f012e73e:	74 17                	je     f012e757 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012e740:	83 ec 04             	sub    $0x4,%esp
f012e743:	68 90 b9 13 f0       	push   $0xf013b990
f012e748:	68 b9 12 00 00       	push   $0x12b9
f012e74d:	68 7a a2 13 f0       	push   $0xf013a27a
f012e752:	e8 4f 1a fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012e757:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e75a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012e760:	e8 33 d6 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e765:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012e768:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e76e:	83 ec 08             	sub    $0x8,%esp
f012e771:	68 00 fc 3f 00       	push   $0x3ffc00
f012e776:	50                   	push   %eax
f012e777:	e8 16 8d fd ff       	call   f0107492 <krealloc>
f012e77c:	83 c4 10             	add    $0x10,%esp
f012e77f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e782:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e785:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e78a:	77 17                	ja     f012e7a3 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e78c:	83 ec 04             	sub    $0x4,%esp
f012e78f:	68 20 b5 13 f0       	push   $0xf013b520
f012e794:	68 c2 12 00 00       	push   $0x12c2
f012e799:	68 7a a2 13 f0       	push   $0xf013a27a
f012e79e:	e8 03 1a fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012e7a3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e7a9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e7ac:	75 17                	jne    f012e7c5 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012e7ae:	83 ec 04             	sub    $0x4,%esp
f012e7b1:	68 08 ba 13 f0       	push   $0xf013ba08
f012e7b6:	68 c4 12 00 00       	push   $0x12c4
f012e7bb:	68 7a a2 13 f0       	push   $0xf013a27a
f012e7c0:	e8 e1 19 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012e7c5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012e7cc:	10 00 00 
f012e7cf:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e7d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7da:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e7e0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e7e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7eb:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e7f1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e7f7:	29 d0                	sub    %edx,%eax
f012e7f9:	89 c1                	mov    %eax,%ecx
f012e7fb:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e802:	10 00 00 
f012e805:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e80a:	0f b6 d0             	movzbl %al,%edx
f012e80d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e813:	01 d0                	add    %edx,%eax
f012e815:	48                   	dec    %eax
f012e816:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e81c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e822:	ba 00 00 00 00       	mov    $0x0,%edx
f012e827:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e82d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e833:	29 d0                	sub    %edx,%eax
f012e835:	01 c1                	add    %eax,%ecx
f012e837:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e83e:	10 00 00 
f012e841:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e846:	0f b6 c0             	movzbl %al,%eax
f012e849:	c1 e0 04             	shl    $0x4,%eax
f012e84c:	89 c2                	mov    %eax,%edx
f012e84e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e854:	01 d0                	add    %edx,%eax
f012e856:	48                   	dec    %eax
f012e857:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e85d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e863:	ba 00 00 00 00       	mov    $0x0,%edx
f012e868:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e86e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e874:	29 d0                	sub    %edx,%eax
f012e876:	01 c8                	add    %ecx,%eax
f012e878:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012e87e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e881:	39 c2                	cmp    %eax,%edx
f012e883:	74 17                	je     f012e89c <test_krealloc_BF+0x1b59>
f012e885:	83 ec 04             	sub    $0x4,%esp
f012e888:	68 5c b5 13 f0       	push   $0xf013b55c
f012e88d:	68 c5 12 00 00       	push   $0x12c5
f012e892:	68 7a a2 13 f0       	push   $0xf013a27a
f012e897:	e8 0a 19 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012e89c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e89f:	e8 f4 d4 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e8a4:	29 c3                	sub    %eax,%ebx
f012e8a6:	89 d8                	mov    %ebx,%eax
f012e8a8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e8ad:	74 17                	je     f012e8c6 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012e8af:	83 ec 04             	sub    $0x4,%esp
f012e8b2:	68 90 b9 13 f0       	push   $0xf013b990
f012e8b7:	68 c9 12 00 00       	push   $0x12c9
f012e8bc:	68 7a a2 13 f0       	push   $0xf013a27a
f012e8c1:	e8 e0 18 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012e8c6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8c9:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e8cf:	e8 c4 d4 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012e8d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012e8d7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e8dd:	83 ec 08             	sub    $0x8,%esp
f012e8e0:	68 00 fc 3f 01       	push   $0x13ffc00
f012e8e5:	50                   	push   %eax
f012e8e6:	e8 a7 8b fd ff       	call   f0107492 <krealloc>
f012e8eb:	83 c4 10             	add    $0x10,%esp
f012e8ee:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e8f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8f4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e8f9:	77 17                	ja     f012e912 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8fb:	83 ec 04             	sub    $0x4,%esp
f012e8fe:	68 20 b5 13 f0       	push   $0xf013b520
f012e903:	68 cf 12 00 00       	push   $0x12cf
f012e908:	68 7a a2 13 f0       	push   $0xf013a27a
f012e90d:	e8 94 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012e912:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e918:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e91b:	75 17                	jne    f012e934 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012e91d:	83 ec 04             	sub    $0x4,%esp
f012e920:	68 08 ba 13 f0       	push   $0xf013ba08
f012e925:	68 d1 12 00 00       	push   $0x12d1
f012e92a:	68 7a a2 13 f0       	push   $0xf013a27a
f012e92f:	e8 72 18 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012e934:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012e93b:	10 00 00 
f012e93e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012e944:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e949:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012e94f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012e955:	ba 00 00 00 00       	mov    $0x0,%edx
f012e95a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012e960:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012e966:	29 d0                	sub    %edx,%eax
f012e968:	89 c1                	mov    %eax,%ecx
f012e96a:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012e971:	10 00 00 
f012e974:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e979:	0f b6 d0             	movzbl %al,%edx
f012e97c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012e982:	01 d0                	add    %edx,%eax
f012e984:	48                   	dec    %eax
f012e985:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012e98b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012e991:	ba 00 00 00 00       	mov    $0x0,%edx
f012e996:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012e99c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012e9a2:	29 d0                	sub    %edx,%eax
f012e9a4:	01 c1                	add    %eax,%ecx
f012e9a6:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012e9ad:	10 00 00 
f012e9b0:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012e9b5:	0f b6 c0             	movzbl %al,%eax
f012e9b8:	c1 e0 04             	shl    $0x4,%eax
f012e9bb:	89 c2                	mov    %eax,%edx
f012e9bd:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012e9c3:	01 d0                	add    %edx,%eax
f012e9c5:	48                   	dec    %eax
f012e9c6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012e9cc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012e9d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9d7:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012e9dd:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012e9e3:	29 d0                	sub    %edx,%eax
f012e9e5:	01 c8                	add    %ecx,%eax
f012e9e7:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012e9ed:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e9f0:	39 c2                	cmp    %eax,%edx
f012e9f2:	74 17                	je     f012ea0b <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012e9f4:	83 ec 04             	sub    $0x4,%esp
f012e9f7:	68 28 bb 13 f0       	push   $0xf013bb28
f012e9fc:	68 d3 12 00 00       	push   $0x12d3
f012ea01:	68 7a a2 13 f0       	push   $0xf013a27a
f012ea06:	e8 9b 17 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012ea0b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ea0e:	e8 85 d3 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ea13:	29 c3                	sub    %eax,%ebx
f012ea15:	89 d8                	mov    %ebx,%eax
f012ea17:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012ea1c:	74 17                	je     f012ea35 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012ea1e:	83 ec 04             	sub    $0x4,%esp
f012ea21:	68 90 b9 13 f0       	push   $0xf013b990
f012ea26:	68 d6 12 00 00       	push   $0x12d6
f012ea2b:	68 7a a2 13 f0       	push   $0xf013a27a
f012ea30:	e8 71 17 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012ea35:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ea38:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ea3e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ea44:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012ea4a:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ea51:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ea54:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ea5b:	eb 21                	jmp    f012ea7e <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012ea5d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ea63:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ea66:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ea6c:	01 c8                	add    %ecx,%eax
f012ea6e:	8a 00                	mov    (%eax),%al
f012ea70:	0f be c0             	movsbl %al,%eax
f012ea73:	01 d0                	add    %edx,%eax
f012ea75:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ea7b:	ff 45 d8             	incl   -0x28(%ebp)
f012ea7e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ea84:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ea87:	7d d4                	jge    f012ea5d <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ea89:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ea8f:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ea95:	42                   	inc    %edx
f012ea96:	01 d2                	add    %edx,%edx
f012ea98:	39 d0                	cmp    %edx,%eax
f012ea9a:	74 17                	je     f012eab3 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012ea9c:	83 ec 04             	sub    $0x4,%esp
f012ea9f:	68 c0 ba 13 f0       	push   $0xf013bac0
f012eaa4:	68 e4 12 00 00       	push   $0x12e4
f012eaa9:	68 7a a2 13 f0       	push   $0xf013a27a
f012eaae:	e8 f3 16 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012eab3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eab9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012eabf:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012eac6:	00 00 00 
		sums[1] = 0;
f012eac9:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012ead0:	00 00 00 
		sums[2] = 0;
f012ead3:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012eada:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012eadd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012eae4:	eb 70                	jmp    f012eb56 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012eae6:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eaec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eaef:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eaf6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eafc:	01 c8                	add    %ecx,%eax
f012eafe:	8a 00                	mov    (%eax),%al
f012eb00:	0f be c0             	movsbl %al,%eax
f012eb03:	01 d0                	add    %edx,%eax
f012eb05:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012eb0b:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012eb11:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eb14:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb1b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb21:	01 c8                	add    %ecx,%eax
f012eb23:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eb27:	98                   	cwtl   
f012eb28:	01 d0                	add    %edx,%eax
f012eb2a:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012eb30:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eb36:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eb39:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb40:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb46:	01 c8                	add    %ecx,%eax
f012eb48:	8b 40 04             	mov    0x4(%eax),%eax
f012eb4b:	01 d0                	add    %edx,%eax
f012eb4d:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb53:	ff 45 d8             	incl   -0x28(%ebp)
f012eb56:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb5c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012eb5f:	7d 85                	jge    f012eae6 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012eb61:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012eb67:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb6d:	8d 50 01             	lea    0x1(%eax),%edx
f012eb70:	89 d0                	mov    %edx,%eax
f012eb72:	01 c0                	add    %eax,%eax
f012eb74:	01 d0                	add    %edx,%eax
f012eb76:	01 c0                	add    %eax,%eax
f012eb78:	01 d0                	add    %edx,%eax
f012eb7a:	39 c1                	cmp    %eax,%ecx
f012eb7c:	75 3a                	jne    f012ebb8 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012eb7e:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012eb84:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb8a:	8d 50 01             	lea    0x1(%eax),%edx
f012eb8d:	89 d0                	mov    %edx,%eax
f012eb8f:	01 c0                	add    %eax,%eax
f012eb91:	01 d0                	add    %edx,%eax
f012eb93:	01 c0                	add    %eax,%eax
f012eb95:	01 d0                	add    %edx,%eax
f012eb97:	39 c1                	cmp    %eax,%ecx
f012eb99:	75 1d                	jne    f012ebb8 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012eb9b:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012eba1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eba7:	8d 50 01             	lea    0x1(%eax),%edx
f012ebaa:	89 d0                	mov    %edx,%eax
f012ebac:	01 c0                	add    %eax,%eax
f012ebae:	01 d0                	add    %edx,%eax
f012ebb0:	01 c0                	add    %eax,%eax
f012ebb2:	01 d0                	add    %edx,%eax
f012ebb4:	39 c1                	cmp    %eax,%ecx
f012ebb6:	74 17                	je     f012ebcf <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ebb8:	83 ec 04             	sub    $0x4,%esp
f012ebbb:	68 c0 ba 13 f0       	push   $0xf013bac0
f012ebc0:	68 f6 12 00 00       	push   $0x12f6
f012ebc5:	68 7a a2 13 f0       	push   $0xf013a27a
f012ebca:	e8 d7 15 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ebcf:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ebd5:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012ebdb:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ebe2:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ebe5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ebec:	eb 24                	jmp    f012ec12 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012ebee:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ebf4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ebf7:	01 c0                	add    %eax,%eax
f012ebf9:	89 c1                	mov    %eax,%ecx
f012ebfb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ec01:	01 c8                	add    %ecx,%eax
f012ec03:	66 8b 00             	mov    (%eax),%ax
f012ec06:	98                   	cwtl   
f012ec07:	01 d0                	add    %edx,%eax
f012ec09:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ec0f:	ff 45 d8             	incl   -0x28(%ebp)
f012ec12:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ec1b:	7d d1                	jge    f012ebee <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ec1d:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ec23:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ec29:	8d 48 01             	lea    0x1(%eax),%ecx
f012ec2c:	89 c8                	mov    %ecx,%eax
f012ec2e:	c1 e0 02             	shl    $0x2,%eax
f012ec31:	01 c8                	add    %ecx,%eax
f012ec33:	39 c2                	cmp    %eax,%edx
f012ec35:	74 17                	je     f012ec4e <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012ec37:	83 ec 04             	sub    $0x4,%esp
f012ec3a:	68 c0 ba 13 f0       	push   $0xf013bac0
f012ec3f:	68 00 13 00 00       	push   $0x1300
f012ec44:	68 7a a2 13 f0       	push   $0xf013a27a
f012ec49:	e8 58 15 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012ec4e:	e8 45 d1 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ec53:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ec56:	e8 31 50 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ec5b:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012ec61:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ec67:	83 ec 08             	sub    $0x8,%esp
f012ec6a:	6a 00                	push   $0x0
f012ec6c:	50                   	push   %eax
f012ec6d:	e8 20 88 fd ff       	call   f0107492 <krealloc>
f012ec72:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ec75:	e8 12 50 fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ec7a:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ec80:	74 17                	je     f012ec99 <test_krealloc_BF+0x1f56>
			panic(
f012ec82:	83 ec 04             	sub    $0x4,%esp
f012ec85:	68 94 a2 13 f0       	push   $0xf013a294
f012ec8a:	68 08 13 00 00       	push   $0x1308
f012ec8f:	68 7a a2 13 f0       	push   $0xf013a27a
f012ec94:	e8 0d 15 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012ec99:	e8 fa d0 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ec9e:	89 c2                	mov    %eax,%edx
f012eca0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012eca3:	29 c2                	sub    %eax,%edx
f012eca5:	89 d0                	mov    %edx,%eax
f012eca7:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012ecac:	74 17                	je     f012ecc5 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012ecae:	83 ec 04             	sub    $0x4,%esp
f012ecb1:	68 50 b7 13 f0       	push   $0xf013b750
f012ecb6:	68 0a 13 00 00       	push   $0x130a
f012ecbb:	68 7a a2 13 f0       	push   $0xf013a27a
f012ecc0:	e8 e1 14 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012ecc5:	e8 ce d0 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ecca:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012eccd:	e8 ba 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ecd2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012ecd8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ecde:	83 ec 0c             	sub    $0xc,%esp
f012ece1:	50                   	push   %eax
f012ece2:	e8 0f 87 fd ff       	call   f01073f6 <kfree>
f012ece7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ecea:	e8 9d 4f fd ff       	call   f0103c8c <pf_calculate_free_frames>
f012ecef:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012ecf5:	74 17                	je     f012ed0e <test_krealloc_BF+0x1fcb>
			panic(
f012ecf7:	83 ec 04             	sub    $0x4,%esp
f012ecfa:	68 94 a2 13 f0       	push   $0xf013a294
f012ecff:	68 12 13 00 00       	push   $0x1312
f012ed04:	68 7a a2 13 f0       	push   $0xf013a27a
f012ed09:	e8 98 14 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012ed0e:	e8 85 d0 fd ff       	call   f010bd98 <sys_calculate_free_frames>
f012ed13:	89 c2                	mov    %eax,%edx
f012ed15:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed18:	29 c2                	sub    %eax,%edx
f012ed1a:	89 d0                	mov    %edx,%eax
f012ed1c:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012ed21:	74 17                	je     f012ed3a <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012ed23:	83 ec 04             	sub    $0x4,%esp
f012ed26:	68 50 b7 13 f0       	push   $0xf013b750
f012ed2b:	68 14 13 00 00       	push   $0x1314
f012ed30:	68 7a a2 13 f0       	push   $0xf013a27a
f012ed35:	e8 6c 14 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ed3a:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012ed41:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012ed48:	eb 48                	jmp    f012ed92 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012ed4a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012ed4d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012ed52:	83 ec 04             	sub    $0x4,%esp
f012ed55:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012ed5b:	51                   	push   %ecx
f012ed5c:	52                   	push   %edx
f012ed5d:	50                   	push   %eax
f012ed5e:	e8 06 7c fd ff       	call   f0106969 <get_page_table>
f012ed63:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012ed66:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012ed6c:	85 c0                	test   %eax,%eax
f012ed6e:	75 17                	jne    f012ed87 <test_krealloc_BF+0x2044>
					panic(
f012ed70:	83 ec 04             	sub    $0x4,%esp
f012ed73:	68 7c ab 13 f0       	push   $0xf013ab7c
f012ed78:	68 21 13 00 00       	push   $0x1321
f012ed7d:	68 7a a2 13 f0       	push   $0xf013a27a
f012ed82:	e8 1f 14 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ed87:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012ed8e:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012ed92:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012ed96:	78 b2                	js     f012ed4a <test_krealloc_BF+0x2007>
f012ed98:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012ed9c:	7f 09                	jg     f012eda7 <test_krealloc_BF+0x2064>
f012ed9e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012eda5:	76 a3                	jbe    f012ed4a <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012eda7:	83 ec 0c             	sub    $0xc,%esp
f012edaa:	68 5e a4 13 f0       	push   $0xf013a45e
f012edaf:	e8 79 1e fd ff       	call   f0100c2d <cprintf>
f012edb4:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012edb7:	83 ec 0c             	sub    $0xc,%esp
f012edba:	68 60 bb 13 f0       	push   $0xf013bb60
f012edbf:	e8 69 1e fd ff       	call   f0100c2d <cprintf>
f012edc4:	83 c4 10             	add    $0x10,%esp
	return 0;
f012edc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012edcc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012edcf:	5b                   	pop    %ebx
f012edd0:	5f                   	pop    %edi
f012edd1:	5d                   	pop    %ebp
f012edd2:	c3                   	ret    

f012edd3 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012edd3:	55                   	push   %ebp
f012edd4:	89 e5                	mov    %esp,%ebp
f012edd6:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012edd9:	83 ec 04             	sub    $0x4,%esp
f012eddc:	68 a0 bb 13 f0       	push   $0xf013bba0
f012ede1:	68 32 13 00 00       	push   $0x1332
f012ede6:	68 7a a2 13 f0       	push   $0xf013a27a
f012edeb:	e8 b6 13 fd ff       	call   f01001a6 <_panic>

f012edf0 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012edf0:	55                   	push   %ebp
f012edf1:	89 e5                	mov    %esp,%ebp
f012edf3:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012edf6:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012edfa:	77 07                	ja     f012ee03 <nearest_pow2_ceil+0x13>
f012edfc:	b8 01 00 00 00       	mov    $0x1,%eax
f012ee01:	eb 20                	jmp    f012ee23 <nearest_pow2_ceil+0x33>
    int power = 2;
f012ee03:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ee0a:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ee0d:	eb 08                	jmp    f012ee17 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012ee0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ee12:	01 c0                	add    %eax,%eax
f012ee14:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012ee17:	d1 6d 08             	shrl   0x8(%ebp)
f012ee1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee1e:	75 ef                	jne    f012ee0f <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012ee20:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee23:	c9                   	leave  
f012ee24:	c3                   	ret    

f012ee25 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012ee25:	55                   	push   %ebp
f012ee26:	89 e5                	mov    %esp,%ebp
f012ee28:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012ee2b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012ee2f:	77 07                	ja     f012ee38 <log2_ceil+0x13>
f012ee31:	b8 01 00 00 00       	mov    $0x1,%eax
f012ee36:	eb 1b                	jmp    f012ee53 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012ee38:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012ee3f:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012ee42:	eb 03                	jmp    f012ee47 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012ee44:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012ee47:	d1 6d 08             	shrl   0x8(%ebp)
f012ee4a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ee4e:	75 f4                	jne    f012ee44 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012ee50:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee53:	c9                   	leave  
f012ee54:	c3                   	ret    

f012ee55 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012ee55:	55                   	push   %ebp
f012ee56:	89 e5                	mov    %esp,%ebp
f012ee58:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012ee5b:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee5e:	8b 00                	mov    (%eax),%eax
f012ee60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012ee63:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee66:	8b 00                	mov    (%eax),%eax
f012ee68:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012ee6b:	eb 52                	jmp    f012eebf <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012ee6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ee70:	8b 00                	mov    (%eax),%eax
f012ee72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012ee75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ee78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ee7b:	75 12                	jne    f012ee8f <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012ee7d:	83 ec 0c             	sub    $0xc,%esp
f012ee80:	68 0c bc 13 f0       	push   $0xf013bc0c
f012ee85:	e8 a3 1d fd ff       	call   f0100c2d <cprintf>
f012ee8a:	83 c4 10             	add    $0x10,%esp
			break;
f012ee8d:	eb 3f                	jmp    f012eece <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012ee8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ee93:	74 38                	je     f012eecd <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012ee95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ee98:	8b 00                	mov    (%eax),%eax
f012ee9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012ee9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012eea0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012eea3:	75 12                	jne    f012eeb7 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012eea5:	83 ec 0c             	sub    $0xc,%esp
f012eea8:	68 28 bc 13 f0       	push   $0xf013bc28
f012eead:	e8 7b 1d fd ff       	call   f0100c2d <cprintf>
f012eeb2:	83 c4 10             	add    $0x10,%esp
			break;
f012eeb5:	eb 17                	jmp    f012eece <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012eeb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eeba:	8b 00                	mov    (%eax),%eax
f012eebc:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012eebf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012eec3:	74 09                	je     f012eece <detect_loop_in_FrameInfo_list+0x79>
f012eec5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012eec9:	75 a2                	jne    f012ee6d <detect_loop_in_FrameInfo_list+0x18>
f012eecb:	eb 01                	jmp    f012eece <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012eecd:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012eece:	83 ec 0c             	sub    $0xc,%esp
f012eed1:	68 3f bc 13 f0       	push   $0xf013bc3f
f012eed6:	e8 52 1d fd ff       	call   f0100c2d <cprintf>
f012eedb:	83 c4 10             	add    $0x10,%esp
}
f012eede:	90                   	nop
f012eedf:	c9                   	leave  
f012eee0:	c3                   	ret    

f012eee1 <scarce_memory>:

void scarce_memory()
{
f012eee1:	55                   	push   %ebp
f012eee2:	89 e5                	mov    %esp,%ebp
f012eee4:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012eee7:	a1 60 50 6e f0       	mov    0xf06e5060,%eax
f012eeec:	ba 64 00 00 00       	mov    $0x64,%edx
f012eef1:	29 c2                	sub    %eax,%edx
f012eef3:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012eef8:	0f af c2             	imul   %edx,%eax
f012eefb:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012ef00:	f7 e2                	mul    %edx
f012ef02:	89 d0                	mov    %edx,%eax
f012ef04:	c1 e8 05             	shr    $0x5,%eax
f012ef07:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012ef0a:	a1 60 50 6e f0       	mov    0xf06e5060,%eax
f012ef0f:	ba 64 00 00 00       	mov    $0x64,%edx
f012ef14:	29 c2                	sub    %eax,%edx
f012ef16:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012ef1b:	89 d1                	mov    %edx,%ecx
f012ef1d:	0f af c8             	imul   %eax,%ecx
f012ef20:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ef25:	f7 e1                	mul    %ecx
f012ef27:	c1 ea 05             	shr    $0x5,%edx
f012ef2a:	89 d0                	mov    %edx,%eax
f012ef2c:	c1 e0 02             	shl    $0x2,%eax
f012ef2f:	01 d0                	add    %edx,%eax
f012ef31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ef38:	01 d0                	add    %edx,%eax
f012ef3a:	c1 e0 02             	shl    $0x2,%eax
f012ef3d:	29 c1                	sub    %eax,%ecx
f012ef3f:	89 ca                	mov    %ecx,%edx
f012ef41:	85 d2                	test   %edx,%edx
f012ef43:	74 03                	je     f012ef48 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012ef45:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012ef48:	8b 15 70 74 6e f0    	mov    0xf06e7470,%edx
f012ef4e:	a1 84 74 6e f0       	mov    0xf06e7484,%eax
f012ef53:	29 c2                	sub    %eax,%edx
f012ef55:	89 d0                	mov    %edx,%eax
f012ef57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012ef5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ef5d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012ef60:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012ef63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012ef6a:	eb 12                	jmp    f012ef7e <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012ef6c:	83 ec 0c             	sub    $0xc,%esp
f012ef6f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012ef72:	50                   	push   %eax
f012ef73:	e8 32 78 fd ff       	call   f01067aa <allocate_frame>
f012ef78:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012ef7b:	ff 45 f0             	incl   -0x10(%ebp)
f012ef7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ef81:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012ef84:	76 e6                	jbe    f012ef6c <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012ef86:	90                   	nop
f012ef87:	c9                   	leave  
f012ef88:	c3                   	ret    

f012ef89 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012ef89:	55                   	push   %ebp
f012ef8a:	89 e5                	mov    %esp,%ebp
f012ef8c:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012ef8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012ef96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012ef9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012efa4:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012efa8:	0f 85 d3 01 00 00    	jne    f012f181 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012efae:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012efb5:	e9 e1 00 00 00       	jmp    f012f09b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012efba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012efc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012efc4:	c1 e0 04             	shl    $0x4,%eax
f012efc7:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012efcc:	8b 00                	mov    (%eax),%eax
f012efce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012efd1:	e9 82 00 00 00       	jmp    f012f058 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012efd6:	83 ec 0c             	sub    $0xc,%esp
f012efd9:	ff 75 e4             	pushl  -0x1c(%ebp)
f012efdc:	e8 c9 85 fd ff       	call   f01075aa <env_page_ws_get_size>
f012efe1:	83 c4 10             	add    $0x10,%esp
f012efe4:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012efe7:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012efec:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012eff2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012eff5:	0f af c2             	imul   %edx,%eax
f012eff8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012effd:	f7 e2                	mul    %edx
f012efff:	89 d0                	mov    %edx,%eax
f012f001:	c1 e8 05             	shr    $0x5,%eax
f012f004:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f007:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f00c:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f012:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f015:	89 d1                	mov    %edx,%ecx
f012f017:	0f af c8             	imul   %eax,%ecx
f012f01a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f01f:	f7 e1                	mul    %ecx
f012f021:	c1 ea 05             	shr    $0x5,%edx
f012f024:	89 d0                	mov    %edx,%eax
f012f026:	c1 e0 02             	shl    $0x2,%eax
f012f029:	01 d0                	add    %edx,%eax
f012f02b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f032:	01 d0                	add    %edx,%eax
f012f034:	c1 e0 02             	shl    $0x2,%eax
f012f037:	29 c1                	sub    %eax,%ecx
f012f039:	89 ca                	mov    %ecx,%edx
f012f03b:	85 d2                	test   %edx,%edx
f012f03d:	74 03                	je     f012f042 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f03f:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f042:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f045:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f048:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f04b:	c1 e0 04             	shl    $0x4,%eax
f012f04e:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f012f053:	8b 00                	mov    (%eax),%eax
f012f055:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f058:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f05c:	74 08                	je     f012f066 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f05e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f061:	8b 40 44             	mov    0x44(%eax),%eax
f012f064:	eb 05                	jmp    f012f06b <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f066:	b8 00 00 00 00       	mov    $0x0,%eax
f012f06b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f06e:	c1 e2 04             	shl    $0x4,%edx
f012f071:	81 c2 14 f1 67 f0    	add    $0xf067f114,%edx
f012f077:	89 02                	mov    %eax,(%edx)
f012f079:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f07c:	c1 e0 04             	shl    $0x4,%eax
f012f07f:	05 14 f1 67 f0       	add    $0xf067f114,%eax
f012f084:	8b 00                	mov    (%eax),%eax
f012f086:	85 c0                	test   %eax,%eax
f012f088:	0f 85 48 ff ff ff    	jne    f012efd6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f08e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f092:	0f 85 3e ff ff ff    	jne    f012efd6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f098:	ff 45 e8             	incl   -0x18(%ebp)
f012f09b:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f0a0:	0f b6 c0             	movzbl %al,%eax
f012f0a3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f0a6:	0f 8f 0e ff ff ff    	jg     f012efba <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f0ac:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f0b3:	a1 64 50 6e f0       	mov    0xf06e5064,%eax
f012f0b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f0bb:	eb 19                	jmp    f012f0d6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f0bd:	83 ec 0c             	sub    $0xc,%esp
f012f0c0:	ff 75 dc             	pushl  -0x24(%ebp)
f012f0c3:	e8 e2 84 fd ff       	call   f01075aa <env_page_ws_get_size>
f012f0c8:	83 c4 10             	add    $0x10,%esp
f012f0cb:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f0ce:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012f0d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f0d6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f0da:	74 08                	je     f012f0e4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f0dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f0df:	8b 40 44             	mov    0x44(%eax),%eax
f012f0e2:	eb 05                	jmp    f012f0e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f0e4:	b8 00 00 00 00       	mov    $0x0,%eax
f012f0e9:	a3 6c 50 6e f0       	mov    %eax,0xf06e506c
f012f0ee:	a1 6c 50 6e f0       	mov    0xf06e506c,%eax
f012f0f3:	85 c0                	test   %eax,%eax
f012f0f5:	75 c6                	jne    f012f0bd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f0f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f0fb:	75 c0                	jne    f012f0bd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f0fd:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f102:	85 c0                	test   %eax,%eax
f012f104:	0f 84 ec 00 00 00    	je     f012f1f6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f10a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f10f:	83 ec 0c             	sub    $0xc,%esp
f012f112:	50                   	push   %eax
f012f113:	e8 92 84 fd ff       	call   f01075aa <env_page_ws_get_size>
f012f118:	83 c4 10             	add    $0x10,%esp
f012f11b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f11e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f123:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f129:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f12c:	0f af c2             	imul   %edx,%eax
f012f12f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f134:	f7 e2                	mul    %edx
f012f136:	89 d0                	mov    %edx,%eax
f012f138:	c1 e8 05             	shr    $0x5,%eax
f012f13b:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f13e:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f143:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f149:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f14c:	89 d1                	mov    %edx,%ecx
f012f14e:	0f af c8             	imul   %eax,%ecx
f012f151:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f156:	f7 e1                	mul    %ecx
f012f158:	c1 ea 05             	shr    $0x5,%edx
f012f15b:	89 d0                	mov    %edx,%eax
f012f15d:	c1 e0 02             	shl    $0x2,%eax
f012f160:	01 d0                	add    %edx,%eax
f012f162:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f169:	01 d0                	add    %edx,%eax
f012f16b:	c1 e0 02             	shl    $0x2,%eax
f012f16e:	29 c1                	sub    %eax,%ecx
f012f170:	89 ca                	mov    %ecx,%edx
f012f172:	85 d2                	test   %edx,%edx
f012f174:	74 03                	je     f012f179 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f176:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f179:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f17c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f17f:	eb 75                	jmp    f012f1f6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f181:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f186:	83 ec 0c             	sub    $0xc,%esp
f012f189:	50                   	push   %eax
f012f18a:	e8 1b 84 fd ff       	call   f01075aa <env_page_ws_get_size>
f012f18f:	83 c4 10             	add    $0x10,%esp
f012f192:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f195:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f19a:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f1a0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f1a3:	0f af c2             	imul   %edx,%eax
f012f1a6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f1ab:	f7 e2                	mul    %edx
f012f1ad:	89 d0                	mov    %edx,%eax
f012f1af:	c1 e8 05             	shr    $0x5,%eax
f012f1b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f1b5:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f1ba:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f1c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f1c3:	89 d1                	mov    %edx,%ecx
f012f1c5:	0f af c8             	imul   %eax,%ecx
f012f1c8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f1cd:	f7 e1                	mul    %ecx
f012f1cf:	c1 ea 05             	shr    $0x5,%edx
f012f1d2:	89 d0                	mov    %edx,%eax
f012f1d4:	c1 e0 02             	shl    $0x2,%eax
f012f1d7:	01 d0                	add    %edx,%eax
f012f1d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f1e0:	01 d0                	add    %edx,%eax
f012f1e2:	c1 e0 02             	shl    $0x2,%eax
f012f1e5:	29 c1                	sub    %eax,%ecx
f012f1e7:	89 ca                	mov    %ecx,%edx
f012f1e9:	85 d2                	test   %edx,%edx
f012f1eb:	74 03                	je     f012f1f0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f1ed:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f1f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f1f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f1f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f1f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f1fc:	01 c2                	add    %eax,%edx
f012f1fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f201:	01 d0                	add    %edx,%eax
}
f012f203:	c9                   	leave  
f012f204:	c3                   	ret    

f012f205 <schenv>:


void schenv()
{
f012f205:	55                   	push   %ebp
f012f206:	89 e5                	mov    %esp,%ebp
f012f208:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f20b:	c6 05 04 75 6e f0 00 	movb   $0x0,0xf06e7504
	__ne = NULL;
f012f212:	c7 05 94 74 6e f0 00 	movl   $0x0,0xf06e7494
f012f219:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f21c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f223:	eb 3a                	jmp    f012f25f <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012f225:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f228:	c1 e0 04             	shl    $0x4,%eax
f012f22b:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f230:	83 ec 0c             	sub    $0xc,%esp
f012f233:	50                   	push   %eax
f012f234:	e8 66 51 fd ff       	call   f010439f <queue_size>
f012f239:	83 c4 10             	add    $0x10,%esp
f012f23c:	85 c0                	test   %eax,%eax
f012f23e:	74 1c                	je     f012f25c <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012f240:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f243:	c1 e0 04             	shl    $0x4,%eax
f012f246:	05 10 f1 67 f0       	add    $0xf067f110,%eax
f012f24b:	8b 00                	mov    (%eax),%eax
f012f24d:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
			__nl = i;
f012f252:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f255:	a2 04 75 6e f0       	mov    %al,0xf06e7504
			break;
f012f25a:	eb 10                	jmp    f012f26c <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f25c:	ff 45 f4             	incl   -0xc(%ebp)
f012f25f:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f264:	0f b6 c0             	movzbl %al,%eax
f012f267:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f26a:	7f b9                	jg     f012f225 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012f26c:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f271:	85 c0                	test   %eax,%eax
f012f273:	0f 84 86 00 00 00    	je     f012f2ff <schenv+0xfa>
	{
		if (__ne != NULL)
f012f279:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f27e:	85 c0                	test   %eax,%eax
f012f280:	74 4b                	je     f012f2cd <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012f282:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f287:	0f b6 c0             	movzbl %al,%eax
f012f28a:	8d 50 01             	lea    0x1(%eax),%edx
f012f28d:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f292:	0f b6 c0             	movzbl %al,%eax
f012f295:	39 c2                	cmp    %eax,%edx
f012f297:	7d 66                	jge    f012f2ff <schenv+0xfa>
			{
				__ne = curenv;
f012f299:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f29e:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f2a3:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2a8:	0f b6 c0             	movzbl %al,%eax
f012f2ab:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f2b1:	0f b6 d2             	movzbl %dl,%edx
f012f2b4:	4a                   	dec    %edx
f012f2b5:	39 d0                	cmp    %edx,%eax
f012f2b7:	7d 08                	jge    f012f2c1 <schenv+0xbc>
f012f2b9:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2be:	40                   	inc    %eax
f012f2bf:	eb 05                	jmp    f012f2c6 <schenv+0xc1>
f012f2c1:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2c6:	a2 04 75 6e f0       	mov    %al,0xf06e7504
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012f2cb:	eb 32                	jmp    f012f2ff <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012f2cd:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f2d2:	a3 94 74 6e f0       	mov    %eax,0xf06e7494
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f2d7:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2dc:	0f b6 c0             	movzbl %al,%eax
f012f2df:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f2e5:	0f b6 d2             	movzbl %dl,%edx
f012f2e8:	4a                   	dec    %edx
f012f2e9:	39 d0                	cmp    %edx,%eax
f012f2eb:	7d 08                	jge    f012f2f5 <schenv+0xf0>
f012f2ed:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2f2:	40                   	inc    %eax
f012f2f3:	eb 05                	jmp    f012f2fa <schenv+0xf5>
f012f2f5:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f2fa:	a2 04 75 6e f0       	mov    %al,0xf06e7504
		}
	}
}
f012f2ff:	90                   	nop
f012f300:	c9                   	leave  
f012f301:	c3                   	ret    

f012f302 <chksch>:

void chksch(uint8 onoff)
{
f012f302:	55                   	push   %ebp
f012f303:	89 e5                	mov    %esp,%ebp
f012f305:	83 ec 04             	sub    $0x4,%esp
f012f308:	8b 45 08             	mov    0x8(%ebp),%eax
f012f30b:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012f30e:	c7 05 f0 74 6e f0 00 	movl   $0x0,0xf06e74f0
f012f315:	00 00 00 
	__ne = NULL;
f012f318:	c7 05 94 74 6e f0 00 	movl   $0x0,0xf06e7494
f012f31f:	00 00 00 
	__pl = 0 ;
f012f322:	c6 05 04 f1 67 f0 00 	movb   $0x0,0xf067f104
	__nl = 0 ;
f012f329:	c6 05 04 75 6e f0 00 	movb   $0x0,0xf06e7504
	__chkstatus = onoff;
f012f330:	8a 45 fc             	mov    -0x4(%ebp),%al
f012f333:	a2 90 74 6e f0       	mov    %al,0xf06e7490
}
f012f338:	90                   	nop
f012f339:	c9                   	leave  
f012f33a:	c3                   	ret    

f012f33b <chk1>:
void chk1()
{
f012f33b:	55                   	push   %ebp
f012f33c:	89 e5                	mov    %esp,%ebp
f012f33e:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012f341:	a0 90 74 6e f0       	mov    0xf06e7490,%al
f012f346:	84 c0                	test   %al,%al
f012f348:	74 2b                	je     f012f375 <chk1+0x3a>
		return ;
	__pe = curenv;
f012f34a:	a1 34 77 65 f0       	mov    0xf0657734,%eax
f012f34f:	a3 f0 74 6e f0       	mov    %eax,0xf06e74f0
	__pl = __nl ;
f012f354:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f359:	a2 04 f1 67 f0       	mov    %al,0xf067f104
	if (__pe == NULL)
f012f35e:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f363:	85 c0                	test   %eax,%eax
f012f365:	75 07                	jne    f012f36e <chk1+0x33>
	{
		__pl = 0;
f012f367:	c6 05 04 f1 67 f0 00 	movb   $0x0,0xf067f104
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012f36e:	e8 92 fe ff ff       	call   f012f205 <schenv>
f012f373:	eb 01                	jmp    f012f376 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012f375:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012f376:	c9                   	leave  
f012f377:	c3                   	ret    

f012f378 <chk2>:
void chk2(struct Env* __se)
{
f012f378:	55                   	push   %ebp
f012f379:	89 e5                	mov    %esp,%ebp
f012f37b:	53                   	push   %ebx
f012f37c:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012f37f:	a0 90 74 6e f0       	mov    0xf06e7490,%al
f012f384:	84 c0                	test   %al,%al
f012f386:	0f 84 35 02 00 00    	je     f012f5c1 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012f38c:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f391:	39 45 08             	cmp    %eax,0x8(%ebp)
f012f394:	74 19                	je     f012f3af <chk2+0x37>
f012f396:	68 59 bc 13 f0       	push   $0xf013bc59
f012f39b:	68 66 bc 13 f0       	push   $0xf013bc66
f012f3a0:	68 c0 00 00 00       	push   $0xc0
f012f3a5:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f3aa:	e8 66 0e fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012f3af:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f3b4:	85 c0                	test   %eax,%eax
f012f3b6:	0f 84 1b 01 00 00    	je     f012f4d7 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012f3bc:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f3c1:	0f b6 c0             	movzbl %al,%eax
f012f3c4:	8a 80 88 74 6e f0    	mov    -0xf918b78(%eax),%al
f012f3ca:	0f b6 d8             	movzbl %al,%ebx
f012f3cd:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012f3d2:	99                   	cltd   
f012f3d3:	f7 fb                	idiv   %ebx
f012f3d5:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012f3db:	a0 04 75 6e f0       	mov    0xf06e7504,%al
f012f3e0:	0f b6 c0             	movzbl %al,%eax
f012f3e3:	8a 80 88 74 6e f0    	mov    -0xf918b78(%eax),%al
f012f3e9:	0f b6 d8             	movzbl %al,%ebx
f012f3ec:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012f3f1:	99                   	cltd   
f012f3f2:	f7 fb                	idiv   %ebx
f012f3f4:	89 c3                	mov    %eax,%ebx
f012f3f6:	89 c8                	mov    %ecx,%eax
f012f3f8:	99                   	cltd   
f012f3f9:	f7 fb                	idiv   %ebx
f012f3fb:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012f3ff:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f403:	83 e0 01             	and    $0x1,%eax
f012f406:	66 85 c0             	test   %ax,%ax
f012f409:	74 07                	je     f012f412 <chk2+0x9a>
f012f40b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f40f:	40                   	inc    %eax
f012f410:	eb 04                	jmp    f012f416 <chk2+0x9e>
f012f412:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f416:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012f41a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012f41e:	89 d0                	mov    %edx,%eax
f012f420:	c1 e0 02             	shl    $0x2,%eax
f012f423:	01 d0                	add    %edx,%eax
f012f425:	01 c0                	add    %eax,%eax
f012f427:	01 d0                	add    %edx,%eax
f012f429:	c1 e0 02             	shl    $0x2,%eax
f012f42c:	01 d0                	add    %edx,%eax
f012f42e:	01 c0                	add    %eax,%eax
f012f430:	89 c1                	mov    %eax,%ecx
f012f432:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f437:	f7 e9                	imul   %ecx
f012f439:	c1 fa 05             	sar    $0x5,%edx
f012f43c:	89 c8                	mov    %ecx,%eax
f012f43e:	c1 f8 1f             	sar    $0x1f,%eax
f012f441:	29 c2                	sub    %eax,%edx
f012f443:	89 d0                	mov    %edx,%eax
f012f445:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012f449:	e8 22 4e fd ff       	call   f0104270 <kclock_read_cnt0>
f012f44e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012f452:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f456:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012f45a:	76 0a                	jbe    f012f466 <chk2+0xee>
f012f45c:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f460:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012f464:	76 19                	jbe    f012f47f <chk2+0x107>
f012f466:	68 94 bc 13 f0       	push   $0xf013bc94
f012f46b:	68 66 bc 13 f0       	push   $0xf013bc66
f012f470:	68 ca 00 00 00       	push   $0xca
f012f475:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f47a:	e8 96 0d fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f47f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f486:	eb 42                	jmp    f012f4ca <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012f488:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f48d:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f490:	89 c2                	mov    %eax,%edx
f012f492:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f495:	c1 e0 04             	shl    $0x4,%eax
f012f498:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f49d:	83 ec 08             	sub    $0x8,%esp
f012f4a0:	52                   	push   %edx
f012f4a1:	50                   	push   %eax
f012f4a2:	e8 ca 50 fd ff       	call   f0104571 <find_env_in_queue>
f012f4a7:	83 c4 10             	add    $0x10,%esp
f012f4aa:	85 c0                	test   %eax,%eax
f012f4ac:	74 19                	je     f012f4c7 <chk2+0x14f>
f012f4ae:	68 b8 bc 13 f0       	push   $0xf013bcb8
f012f4b3:	68 66 bc 13 f0       	push   $0xf013bc66
f012f4b8:	68 ce 00 00 00       	push   $0xce
f012f4bd:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f4c2:	e8 4e 0d fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f4c7:	ff 45 f4             	incl   -0xc(%ebp)
f012f4ca:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f4cf:	0f b6 c0             	movzbl %al,%eax
f012f4d2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f4d5:	7f b1                	jg     f012f488 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012f4d7:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f4dc:	85 c0                	test   %eax,%eax
f012f4de:	0f 84 de 00 00 00    	je     f012f5c2 <chk2+0x24a>
f012f4e4:	8b 15 f0 74 6e f0    	mov    0xf06e74f0,%edx
f012f4ea:	a1 94 74 6e f0       	mov    0xf06e7494,%eax
f012f4ef:	39 c2                	cmp    %eax,%edx
f012f4f1:	0f 84 cb 00 00 00    	je     f012f5c2 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012f4f7:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f4fc:	0f b6 c0             	movzbl %al,%eax
f012f4ff:	8a 15 dc 74 6e f0    	mov    0xf06e74dc,%dl
f012f505:	0f b6 d2             	movzbl %dl,%edx
f012f508:	4a                   	dec    %edx
f012f509:	39 d0                	cmp    %edx,%eax
f012f50b:	74 08                	je     f012f515 <chk2+0x19d>
f012f50d:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f512:	40                   	inc    %eax
f012f513:	eb 05                	jmp    f012f51a <chk2+0x1a2>
f012f515:	a0 04 f1 67 f0       	mov    0xf067f104,%al
f012f51a:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012f51d:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f522:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f525:	89 c2                	mov    %eax,%edx
f012f527:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f52b:	c1 e0 04             	shl    $0x4,%eax
f012f52e:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f533:	83 ec 08             	sub    $0x8,%esp
f012f536:	52                   	push   %edx
f012f537:	50                   	push   %eax
f012f538:	e8 34 50 fd ff       	call   f0104571 <find_env_in_queue>
f012f53d:	83 c4 10             	add    $0x10,%esp
f012f540:	85 c0                	test   %eax,%eax
f012f542:	75 19                	jne    f012f55d <chk2+0x1e5>
f012f544:	68 f8 bc 13 f0       	push   $0xf013bcf8
f012f549:	68 66 bc 13 f0       	push   $0xf013bc66
f012f54e:	68 d4 00 00 00       	push   $0xd4
f012f553:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f558:	e8 b8 0c fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f55d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f564:	eb 4c                	jmp    f012f5b2 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012f566:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f56a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f56d:	74 3f                	je     f012f5ae <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012f56f:	a1 f0 74 6e f0       	mov    0xf06e74f0,%eax
f012f574:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f577:	89 c2                	mov    %eax,%edx
f012f579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f57c:	c1 e0 04             	shl    $0x4,%eax
f012f57f:	05 0c f1 67 f0       	add    $0xf067f10c,%eax
f012f584:	83 ec 08             	sub    $0x8,%esp
f012f587:	52                   	push   %edx
f012f588:	50                   	push   %eax
f012f589:	e8 e3 4f fd ff       	call   f0104571 <find_env_in_queue>
f012f58e:	83 c4 10             	add    $0x10,%esp
f012f591:	85 c0                	test   %eax,%eax
f012f593:	74 1a                	je     f012f5af <chk2+0x237>
f012f595:	68 3c bd 13 f0       	push   $0xf013bd3c
f012f59a:	68 66 bc 13 f0       	push   $0xf013bc66
f012f59f:	68 d8 00 00 00       	push   $0xd8
f012f5a4:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f5a9:	e8 67 0c fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012f5ae:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f5af:	ff 45 f0             	incl   -0x10(%ebp)
f012f5b2:	a0 dc 74 6e f0       	mov    0xf06e74dc,%al
f012f5b7:	0f b6 c0             	movzbl %al,%eax
f012f5ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f5bd:	7f a7                	jg     f012f566 <chk2+0x1ee>
f012f5bf:	eb 01                	jmp    f012f5c2 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012f5c1:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012f5c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f5c5:	c9                   	leave  
f012f5c6:	c3                   	ret    

f012f5c7 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012f5c7:	55                   	push   %ebp
f012f5c8:	89 e5                	mov    %esp,%ebp
f012f5ca:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f5cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f5d4:	eb 40                	jmp    f012f616 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012f5d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f5d9:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012f5df:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f5e4:	83 ec 08             	sub    $0x8,%esp
f012f5e7:	52                   	push   %edx
f012f5e8:	50                   	push   %eax
f012f5e9:	e8 92 01 00 00       	call   f012f780 <check_va2pa>
f012f5ee:	83 c4 10             	add    $0x10,%esp
f012f5f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f5f4:	74 19                	je     f012f60f <check_boot_pgdir+0x48>
f012f5f6:	68 7c bd 13 f0       	push   $0xf013bd7c
f012f5fb:	68 66 bc 13 f0       	push   $0xf013bc66
f012f600:	68 ff 00 00 00       	push   $0xff
f012f605:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f60a:	e8 97 0b fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f60f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f616:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012f61d:	75 b7                	jne    f012f5d6 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f61f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f626:	eb 74                	jmp    f012f69c <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012f628:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f62b:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012f631:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f636:	83 ec 08             	sub    $0x8,%esp
f012f639:	52                   	push   %edx
f012f63a:	50                   	push   %eax
f012f63b:	e8 40 01 00 00       	call   f012f780 <check_va2pa>
f012f640:	83 c4 10             	add    $0x10,%esp
f012f643:	c7 45 f0 00 70 18 f0 	movl   $0xf0187000,-0x10(%ebp)
f012f64a:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012f651:	77 17                	ja     f012f66a <check_boot_pgdir+0xa3>
f012f653:	ff 75 f0             	pushl  -0x10(%ebp)
f012f656:	68 b4 bd 13 f0       	push   $0xf013bdb4
f012f65b:	68 04 01 00 00       	push   $0x104
f012f660:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f665:	e8 3c 0b fd ff       	call   f01001a6 <_panic>
f012f66a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f66d:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012f673:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f676:	01 ca                	add    %ecx,%edx
f012f678:	39 d0                	cmp    %edx,%eax
f012f67a:	74 19                	je     f012f695 <check_boot_pgdir+0xce>
f012f67c:	68 e8 bd 13 f0       	push   $0xf013bde8
f012f681:	68 66 bc 13 f0       	push   $0xf013bc66
f012f686:	68 04 01 00 00       	push   $0x104
f012f68b:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f690:	e8 11 0b fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f695:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f69c:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012f6a3:	76 83                	jbe    f012f628 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012f6a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f6ac:	e9 af 00 00 00       	jmp    f012f760 <check_boot_pgdir+0x199>
		switch (i) {
f012f6b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f6b4:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012f6b9:	74 11                	je     f012f6cc <check_boot_pgdir+0x105>
f012f6bb:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012f6c0:	72 36                	jb     f012f6f8 <check_boot_pgdir+0x131>
f012f6c2:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012f6c7:	83 f8 02             	cmp    $0x2,%eax
f012f6ca:	77 2c                	ja     f012f6f8 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012f6cc:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f6d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f6d4:	c1 e2 02             	shl    $0x2,%edx
f012f6d7:	01 d0                	add    %edx,%eax
f012f6d9:	8b 00                	mov    (%eax),%eax
f012f6db:	85 c0                	test   %eax,%eax
f012f6dd:	75 7a                	jne    f012f759 <check_boot_pgdir+0x192>
f012f6df:	68 6a be 13 f0       	push   $0xf013be6a
f012f6e4:	68 66 bc 13 f0       	push   $0xf013bc66
f012f6e9:	68 0f 01 00 00       	push   $0x10f
f012f6ee:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f6f3:	e8 ae 0a fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012f6f8:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012f6ff:	76 2c                	jbe    f012f72d <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012f701:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f706:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f709:	c1 e2 02             	shl    $0x2,%edx
f012f70c:	01 d0                	add    %edx,%eax
f012f70e:	8b 00                	mov    (%eax),%eax
f012f710:	85 c0                	test   %eax,%eax
f012f712:	75 48                	jne    f012f75c <check_boot_pgdir+0x195>
f012f714:	68 6a be 13 f0       	push   $0xf013be6a
f012f719:	68 66 bc 13 f0       	push   $0xf013bc66
f012f71e:	68 13 01 00 00       	push   $0x113
f012f723:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f728:	e8 79 0a fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012f72d:	a1 d8 74 6e f0       	mov    0xf06e74d8,%eax
f012f732:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f735:	c1 e2 02             	shl    $0x2,%edx
f012f738:	01 d0                	add    %edx,%eax
f012f73a:	8b 00                	mov    (%eax),%eax
f012f73c:	85 c0                	test   %eax,%eax
f012f73e:	74 1c                	je     f012f75c <check_boot_pgdir+0x195>
f012f740:	68 80 be 13 f0       	push   $0xf013be80
f012f745:	68 66 bc 13 f0       	push   $0xf013bc66
f012f74a:	68 15 01 00 00       	push   $0x115
f012f74f:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f754:	e8 4d 0a fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012f759:	90                   	nop
f012f75a:	eb 01                	jmp    f012f75d <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012f75c:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012f75d:	ff 45 f4             	incl   -0xc(%ebp)
f012f760:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012f767:	0f 86 44 ff ff ff    	jbe    f012f6b1 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012f76d:	83 ec 0c             	sub    $0xc,%esp
f012f770:	68 9c be 13 f0       	push   $0xf013be9c
f012f775:	e8 b3 14 fd ff       	call   f0100c2d <cprintf>
f012f77a:	83 c4 10             	add    $0x10,%esp
}
f012f77d:	90                   	nop
f012f77e:	c9                   	leave  
f012f77f:	c3                   	ret    

f012f780 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012f780:	55                   	push   %ebp
f012f781:	89 e5                	mov    %esp,%ebp
f012f783:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012f786:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f789:	c1 e8 16             	shr    $0x16,%eax
f012f78c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f793:	8b 45 08             	mov    0x8(%ebp),%eax
f012f796:	01 d0                	add    %edx,%eax
f012f798:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012f79b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f79e:	8b 00                	mov    (%eax),%eax
f012f7a0:	83 e0 01             	and    $0x1,%eax
f012f7a3:	85 c0                	test   %eax,%eax
f012f7a5:	75 0a                	jne    f012f7b1 <check_va2pa+0x31>
		return ~0;
f012f7a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f7ac:	e9 87 00 00 00       	jmp    f012f838 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012f7b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f7b4:	8b 00                	mov    (%eax),%eax
f012f7b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012f7bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f7be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f7c1:	c1 e8 0c             	shr    $0xc,%eax
f012f7c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f7c7:	a1 70 74 6e f0       	mov    0xf06e7470,%eax
f012f7cc:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012f7cf:	72 17                	jb     f012f7e8 <check_va2pa+0x68>
f012f7d1:	ff 75 f0             	pushl  -0x10(%ebp)
f012f7d4:	68 bc be 13 f0       	push   $0xf013bebc
f012f7d9:	68 2b 01 00 00       	push   $0x12b
f012f7de:	68 7b bc 13 f0       	push   $0xf013bc7b
f012f7e3:	e8 be 09 fd ff       	call   f01001a6 <_panic>
f012f7e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f7eb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012f7f0:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012f7f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7f6:	c1 e8 0c             	shr    $0xc,%eax
f012f7f9:	25 ff 03 00 00       	and    $0x3ff,%eax
f012f7fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f805:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f808:	01 d0                	add    %edx,%eax
f012f80a:	8b 00                	mov    (%eax),%eax
f012f80c:	83 e0 01             	and    $0x1,%eax
f012f80f:	85 c0                	test   %eax,%eax
f012f811:	75 07                	jne    f012f81a <check_va2pa+0x9a>
		return ~0;
f012f813:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f818:	eb 1e                	jmp    f012f838 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012f81a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f81d:	c1 e8 0c             	shr    $0xc,%eax
f012f820:	25 ff 03 00 00       	and    $0x3ff,%eax
f012f825:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f82c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f82f:	01 d0                	add    %edx,%eax
f012f831:	8b 00                	mov    (%eax),%eax
f012f833:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012f838:	c9                   	leave  
f012f839:	c3                   	ret    

f012f83a <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012f83a:	55                   	push   %ebp
f012f83b:	89 e5                	mov    %esp,%ebp
f012f83d:	53                   	push   %ebx
f012f83e:	83 ec 14             	sub    $0x14,%esp
f012f841:	8b 45 10             	mov    0x10(%ebp),%eax
f012f844:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f847:	8b 45 14             	mov    0x14(%ebp),%eax
f012f84a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012f84d:	8b 45 18             	mov    0x18(%ebp),%eax
f012f850:	ba 00 00 00 00       	mov    $0x0,%edx
f012f855:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012f858:	77 55                	ja     f012f8af <printnum+0x75>
f012f85a:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012f85d:	72 05                	jb     f012f864 <printnum+0x2a>
f012f85f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f862:	77 4b                	ja     f012f8af <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012f864:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012f867:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012f86a:	8b 45 18             	mov    0x18(%ebp),%eax
f012f86d:	ba 00 00 00 00       	mov    $0x0,%edx
f012f872:	52                   	push   %edx
f012f873:	50                   	push   %eax
f012f874:	ff 75 f4             	pushl  -0xc(%ebp)
f012f877:	ff 75 f0             	pushl  -0x10(%ebp)
f012f87a:	e8 e1 27 00 00       	call   f0132060 <__udivdi3>
f012f87f:	83 c4 10             	add    $0x10,%esp
f012f882:	83 ec 04             	sub    $0x4,%esp
f012f885:	ff 75 20             	pushl  0x20(%ebp)
f012f888:	53                   	push   %ebx
f012f889:	ff 75 18             	pushl  0x18(%ebp)
f012f88c:	52                   	push   %edx
f012f88d:	50                   	push   %eax
f012f88e:	ff 75 0c             	pushl  0xc(%ebp)
f012f891:	ff 75 08             	pushl  0x8(%ebp)
f012f894:	e8 a1 ff ff ff       	call   f012f83a <printnum>
f012f899:	83 c4 20             	add    $0x20,%esp
f012f89c:	eb 1a                	jmp    f012f8b8 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012f89e:	83 ec 08             	sub    $0x8,%esp
f012f8a1:	ff 75 0c             	pushl  0xc(%ebp)
f012f8a4:	ff 75 20             	pushl  0x20(%ebp)
f012f8a7:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8aa:	ff d0                	call   *%eax
f012f8ac:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012f8af:	ff 4d 1c             	decl   0x1c(%ebp)
f012f8b2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012f8b6:	7f e6                	jg     f012f89e <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012f8b8:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012f8bb:	bb 00 00 00 00       	mov    $0x0,%ebx
f012f8c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f8c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f8c6:	53                   	push   %ebx
f012f8c7:	51                   	push   %ecx
f012f8c8:	52                   	push   %edx
f012f8c9:	50                   	push   %eax
f012f8ca:	e8 a1 28 00 00       	call   f0132170 <__umoddi3>
f012f8cf:	83 c4 10             	add    $0x10,%esp
f012f8d2:	05 14 c1 13 f0       	add    $0xf013c114,%eax
f012f8d7:	8a 00                	mov    (%eax),%al
f012f8d9:	0f be c0             	movsbl %al,%eax
f012f8dc:	83 ec 08             	sub    $0x8,%esp
f012f8df:	ff 75 0c             	pushl  0xc(%ebp)
f012f8e2:	50                   	push   %eax
f012f8e3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8e6:	ff d0                	call   *%eax
f012f8e8:	83 c4 10             	add    $0x10,%esp
}
f012f8eb:	90                   	nop
f012f8ec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f8ef:	c9                   	leave  
f012f8f0:	c3                   	ret    

f012f8f1 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012f8f1:	55                   	push   %ebp
f012f8f2:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012f8f4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012f8f8:	7e 1c                	jle    f012f916 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012f8fa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8fd:	8b 00                	mov    (%eax),%eax
f012f8ff:	8d 50 08             	lea    0x8(%eax),%edx
f012f902:	8b 45 08             	mov    0x8(%ebp),%eax
f012f905:	89 10                	mov    %edx,(%eax)
f012f907:	8b 45 08             	mov    0x8(%ebp),%eax
f012f90a:	8b 00                	mov    (%eax),%eax
f012f90c:	83 e8 08             	sub    $0x8,%eax
f012f90f:	8b 50 04             	mov    0x4(%eax),%edx
f012f912:	8b 00                	mov    (%eax),%eax
f012f914:	eb 40                	jmp    f012f956 <getuint+0x65>
	else if (lflag)
f012f916:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f91a:	74 1e                	je     f012f93a <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012f91c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f91f:	8b 00                	mov    (%eax),%eax
f012f921:	8d 50 04             	lea    0x4(%eax),%edx
f012f924:	8b 45 08             	mov    0x8(%ebp),%eax
f012f927:	89 10                	mov    %edx,(%eax)
f012f929:	8b 45 08             	mov    0x8(%ebp),%eax
f012f92c:	8b 00                	mov    (%eax),%eax
f012f92e:	83 e8 04             	sub    $0x4,%eax
f012f931:	8b 00                	mov    (%eax),%eax
f012f933:	ba 00 00 00 00       	mov    $0x0,%edx
f012f938:	eb 1c                	jmp    f012f956 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012f93a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f93d:	8b 00                	mov    (%eax),%eax
f012f93f:	8d 50 04             	lea    0x4(%eax),%edx
f012f942:	8b 45 08             	mov    0x8(%ebp),%eax
f012f945:	89 10                	mov    %edx,(%eax)
f012f947:	8b 45 08             	mov    0x8(%ebp),%eax
f012f94a:	8b 00                	mov    (%eax),%eax
f012f94c:	83 e8 04             	sub    $0x4,%eax
f012f94f:	8b 00                	mov    (%eax),%eax
f012f951:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012f956:	5d                   	pop    %ebp
f012f957:	c3                   	ret    

f012f958 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012f958:	55                   	push   %ebp
f012f959:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012f95b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012f95f:	7e 1c                	jle    f012f97d <getint+0x25>
		return va_arg(*ap, long long);
f012f961:	8b 45 08             	mov    0x8(%ebp),%eax
f012f964:	8b 00                	mov    (%eax),%eax
f012f966:	8d 50 08             	lea    0x8(%eax),%edx
f012f969:	8b 45 08             	mov    0x8(%ebp),%eax
f012f96c:	89 10                	mov    %edx,(%eax)
f012f96e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f971:	8b 00                	mov    (%eax),%eax
f012f973:	83 e8 08             	sub    $0x8,%eax
f012f976:	8b 50 04             	mov    0x4(%eax),%edx
f012f979:	8b 00                	mov    (%eax),%eax
f012f97b:	eb 38                	jmp    f012f9b5 <getint+0x5d>
	else if (lflag)
f012f97d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f981:	74 1a                	je     f012f99d <getint+0x45>
		return va_arg(*ap, long);
f012f983:	8b 45 08             	mov    0x8(%ebp),%eax
f012f986:	8b 00                	mov    (%eax),%eax
f012f988:	8d 50 04             	lea    0x4(%eax),%edx
f012f98b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f98e:	89 10                	mov    %edx,(%eax)
f012f990:	8b 45 08             	mov    0x8(%ebp),%eax
f012f993:	8b 00                	mov    (%eax),%eax
f012f995:	83 e8 04             	sub    $0x4,%eax
f012f998:	8b 00                	mov    (%eax),%eax
f012f99a:	99                   	cltd   
f012f99b:	eb 18                	jmp    f012f9b5 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012f99d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9a0:	8b 00                	mov    (%eax),%eax
f012f9a2:	8d 50 04             	lea    0x4(%eax),%edx
f012f9a5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9a8:	89 10                	mov    %edx,(%eax)
f012f9aa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9ad:	8b 00                	mov    (%eax),%eax
f012f9af:	83 e8 04             	sub    $0x4,%eax
f012f9b2:	8b 00                	mov    (%eax),%eax
f012f9b4:	99                   	cltd   
}
f012f9b5:	5d                   	pop    %ebp
f012f9b6:	c3                   	ret    

f012f9b7 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012f9b7:	55                   	push   %ebp
f012f9b8:	89 e5                	mov    %esp,%ebp
f012f9ba:	56                   	push   %esi
f012f9bb:	53                   	push   %ebx
f012f9bc:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012f9bf:	eb 17                	jmp    f012f9d8 <vprintfmt+0x21>
			if (ch == '\0')
f012f9c1:	85 db                	test   %ebx,%ebx
f012f9c3:	0f 84 af 03 00 00    	je     f012fd78 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012f9c9:	83 ec 08             	sub    $0x8,%esp
f012f9cc:	ff 75 0c             	pushl  0xc(%ebp)
f012f9cf:	53                   	push   %ebx
f012f9d0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9d3:	ff d0                	call   *%eax
f012f9d5:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012f9d8:	8b 45 10             	mov    0x10(%ebp),%eax
f012f9db:	8d 50 01             	lea    0x1(%eax),%edx
f012f9de:	89 55 10             	mov    %edx,0x10(%ebp)
f012f9e1:	8a 00                	mov    (%eax),%al
f012f9e3:	0f b6 d8             	movzbl %al,%ebx
f012f9e6:	83 fb 25             	cmp    $0x25,%ebx
f012f9e9:	75 d6                	jne    f012f9c1 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012f9eb:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012f9ef:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012f9f6:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012f9fd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012fa04:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012fa0b:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa0e:	8d 50 01             	lea    0x1(%eax),%edx
f012fa11:	89 55 10             	mov    %edx,0x10(%ebp)
f012fa14:	8a 00                	mov    (%eax),%al
f012fa16:	0f b6 d8             	movzbl %al,%ebx
f012fa19:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012fa1c:	83 f8 55             	cmp    $0x55,%eax
f012fa1f:	0f 87 2b 03 00 00    	ja     f012fd50 <vprintfmt+0x399>
f012fa25:	8b 04 85 38 c1 13 f0 	mov    -0xfec3ec8(,%eax,4),%eax
f012fa2c:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012fa2e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012fa32:	eb d7                	jmp    f012fa0b <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012fa34:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012fa38:	eb d1                	jmp    f012fa0b <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fa3a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012fa41:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fa44:	89 d0                	mov    %edx,%eax
f012fa46:	c1 e0 02             	shl    $0x2,%eax
f012fa49:	01 d0                	add    %edx,%eax
f012fa4b:	01 c0                	add    %eax,%eax
f012fa4d:	01 d8                	add    %ebx,%eax
f012fa4f:	83 e8 30             	sub    $0x30,%eax
f012fa52:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012fa55:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa58:	8a 00                	mov    (%eax),%al
f012fa5a:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012fa5d:	83 fb 2f             	cmp    $0x2f,%ebx
f012fa60:	7e 3e                	jle    f012faa0 <vprintfmt+0xe9>
f012fa62:	83 fb 39             	cmp    $0x39,%ebx
f012fa65:	7f 39                	jg     f012faa0 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fa67:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012fa6a:	eb d5                	jmp    f012fa41 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012fa6c:	8b 45 14             	mov    0x14(%ebp),%eax
f012fa6f:	83 c0 04             	add    $0x4,%eax
f012fa72:	89 45 14             	mov    %eax,0x14(%ebp)
f012fa75:	8b 45 14             	mov    0x14(%ebp),%eax
f012fa78:	83 e8 04             	sub    $0x4,%eax
f012fa7b:	8b 00                	mov    (%eax),%eax
f012fa7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012fa80:	eb 1f                	jmp    f012faa1 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012fa82:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fa86:	79 83                	jns    f012fa0b <vprintfmt+0x54>
				width = 0;
f012fa88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012fa8f:	e9 77 ff ff ff       	jmp    f012fa0b <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012fa94:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012fa9b:	e9 6b ff ff ff       	jmp    f012fa0b <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012faa0:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012faa1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012faa5:	0f 89 60 ff ff ff    	jns    f012fa0b <vprintfmt+0x54>
				width = precision, precision = -1;
f012faab:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012faae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fab1:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012fab8:	e9 4e ff ff ff       	jmp    f012fa0b <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012fabd:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012fac0:	e9 46 ff ff ff       	jmp    f012fa0b <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012fac5:	8b 45 14             	mov    0x14(%ebp),%eax
f012fac8:	83 c0 04             	add    $0x4,%eax
f012facb:	89 45 14             	mov    %eax,0x14(%ebp)
f012face:	8b 45 14             	mov    0x14(%ebp),%eax
f012fad1:	83 e8 04             	sub    $0x4,%eax
f012fad4:	8b 00                	mov    (%eax),%eax
f012fad6:	83 ec 08             	sub    $0x8,%esp
f012fad9:	ff 75 0c             	pushl  0xc(%ebp)
f012fadc:	50                   	push   %eax
f012fadd:	8b 45 08             	mov    0x8(%ebp),%eax
f012fae0:	ff d0                	call   *%eax
f012fae2:	83 c4 10             	add    $0x10,%esp
			break;
f012fae5:	e9 89 02 00 00       	jmp    f012fd73 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012faea:	8b 45 14             	mov    0x14(%ebp),%eax
f012faed:	83 c0 04             	add    $0x4,%eax
f012faf0:	89 45 14             	mov    %eax,0x14(%ebp)
f012faf3:	8b 45 14             	mov    0x14(%ebp),%eax
f012faf6:	83 e8 04             	sub    $0x4,%eax
f012faf9:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012fafb:	85 db                	test   %ebx,%ebx
f012fafd:	79 02                	jns    f012fb01 <vprintfmt+0x14a>
				err = -err;
f012faff:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012fb01:	83 fb 64             	cmp    $0x64,%ebx
f012fb04:	7f 0b                	jg     f012fb11 <vprintfmt+0x15a>
f012fb06:	8b 34 9d 80 bf 13 f0 	mov    -0xfec4080(,%ebx,4),%esi
f012fb0d:	85 f6                	test   %esi,%esi
f012fb0f:	75 19                	jne    f012fb2a <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012fb11:	53                   	push   %ebx
f012fb12:	68 25 c1 13 f0       	push   $0xf013c125
f012fb17:	ff 75 0c             	pushl  0xc(%ebp)
f012fb1a:	ff 75 08             	pushl  0x8(%ebp)
f012fb1d:	e8 5e 02 00 00       	call   f012fd80 <printfmt>
f012fb22:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012fb25:	e9 49 02 00 00       	jmp    f012fd73 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012fb2a:	56                   	push   %esi
f012fb2b:	68 2e c1 13 f0       	push   $0xf013c12e
f012fb30:	ff 75 0c             	pushl  0xc(%ebp)
f012fb33:	ff 75 08             	pushl  0x8(%ebp)
f012fb36:	e8 45 02 00 00       	call   f012fd80 <printfmt>
f012fb3b:	83 c4 10             	add    $0x10,%esp
			break;
f012fb3e:	e9 30 02 00 00       	jmp    f012fd73 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012fb43:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb46:	83 c0 04             	add    $0x4,%eax
f012fb49:	89 45 14             	mov    %eax,0x14(%ebp)
f012fb4c:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb4f:	83 e8 04             	sub    $0x4,%eax
f012fb52:	8b 30                	mov    (%eax),%esi
f012fb54:	85 f6                	test   %esi,%esi
f012fb56:	75 05                	jne    f012fb5d <vprintfmt+0x1a6>
				p = "(null)";
f012fb58:	be 31 c1 13 f0       	mov    $0xf013c131,%esi
			if (width > 0 && padc != '-')
f012fb5d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fb61:	7e 6d                	jle    f012fbd0 <vprintfmt+0x219>
f012fb63:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012fb67:	74 67                	je     f012fbd0 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012fb69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fb6c:	83 ec 08             	sub    $0x8,%esp
f012fb6f:	50                   	push   %eax
f012fb70:	56                   	push   %esi
f012fb71:	e8 12 05 00 00       	call   f0130088 <strnlen>
f012fb76:	83 c4 10             	add    $0x10,%esp
f012fb79:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012fb7c:	eb 16                	jmp    f012fb94 <vprintfmt+0x1dd>
					putch(padc, putdat);
f012fb7e:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012fb82:	83 ec 08             	sub    $0x8,%esp
f012fb85:	ff 75 0c             	pushl  0xc(%ebp)
f012fb88:	50                   	push   %eax
f012fb89:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb8c:	ff d0                	call   *%eax
f012fb8e:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012fb91:	ff 4d e4             	decl   -0x1c(%ebp)
f012fb94:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fb98:	7f e4                	jg     f012fb7e <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012fb9a:	eb 34                	jmp    f012fbd0 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012fb9c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fba0:	74 1c                	je     f012fbbe <vprintfmt+0x207>
f012fba2:	83 fb 1f             	cmp    $0x1f,%ebx
f012fba5:	7e 05                	jle    f012fbac <vprintfmt+0x1f5>
f012fba7:	83 fb 7e             	cmp    $0x7e,%ebx
f012fbaa:	7e 12                	jle    f012fbbe <vprintfmt+0x207>
					putch('?', putdat);
f012fbac:	83 ec 08             	sub    $0x8,%esp
f012fbaf:	ff 75 0c             	pushl  0xc(%ebp)
f012fbb2:	6a 3f                	push   $0x3f
f012fbb4:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbb7:	ff d0                	call   *%eax
f012fbb9:	83 c4 10             	add    $0x10,%esp
f012fbbc:	eb 0f                	jmp    f012fbcd <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012fbbe:	83 ec 08             	sub    $0x8,%esp
f012fbc1:	ff 75 0c             	pushl  0xc(%ebp)
f012fbc4:	53                   	push   %ebx
f012fbc5:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbc8:	ff d0                	call   *%eax
f012fbca:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012fbcd:	ff 4d e4             	decl   -0x1c(%ebp)
f012fbd0:	89 f0                	mov    %esi,%eax
f012fbd2:	8d 70 01             	lea    0x1(%eax),%esi
f012fbd5:	8a 00                	mov    (%eax),%al
f012fbd7:	0f be d8             	movsbl %al,%ebx
f012fbda:	85 db                	test   %ebx,%ebx
f012fbdc:	74 24                	je     f012fc02 <vprintfmt+0x24b>
f012fbde:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012fbe2:	78 b8                	js     f012fb9c <vprintfmt+0x1e5>
f012fbe4:	ff 4d e0             	decl   -0x20(%ebp)
f012fbe7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012fbeb:	79 af                	jns    f012fb9c <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012fbed:	eb 13                	jmp    f012fc02 <vprintfmt+0x24b>
				putch(' ', putdat);
f012fbef:	83 ec 08             	sub    $0x8,%esp
f012fbf2:	ff 75 0c             	pushl  0xc(%ebp)
f012fbf5:	6a 20                	push   $0x20
f012fbf7:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbfa:	ff d0                	call   *%eax
f012fbfc:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012fbff:	ff 4d e4             	decl   -0x1c(%ebp)
f012fc02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fc06:	7f e7                	jg     f012fbef <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012fc08:	e9 66 01 00 00       	jmp    f012fd73 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012fc0d:	83 ec 08             	sub    $0x8,%esp
f012fc10:	ff 75 e8             	pushl  -0x18(%ebp)
f012fc13:	8d 45 14             	lea    0x14(%ebp),%eax
f012fc16:	50                   	push   %eax
f012fc17:	e8 3c fd ff ff       	call   f012f958 <getint>
f012fc1c:	83 c4 10             	add    $0x10,%esp
f012fc1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc22:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012fc25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc2b:	85 d2                	test   %edx,%edx
f012fc2d:	79 23                	jns    f012fc52 <vprintfmt+0x29b>
				putch('-', putdat);
f012fc2f:	83 ec 08             	sub    $0x8,%esp
f012fc32:	ff 75 0c             	pushl  0xc(%ebp)
f012fc35:	6a 2d                	push   $0x2d
f012fc37:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc3a:	ff d0                	call   *%eax
f012fc3c:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012fc3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc45:	f7 d8                	neg    %eax
f012fc47:	83 d2 00             	adc    $0x0,%edx
f012fc4a:	f7 da                	neg    %edx
f012fc4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc4f:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012fc52:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012fc59:	e9 bc 00 00 00       	jmp    f012fd1a <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012fc5e:	83 ec 08             	sub    $0x8,%esp
f012fc61:	ff 75 e8             	pushl  -0x18(%ebp)
f012fc64:	8d 45 14             	lea    0x14(%ebp),%eax
f012fc67:	50                   	push   %eax
f012fc68:	e8 84 fc ff ff       	call   f012f8f1 <getuint>
f012fc6d:	83 c4 10             	add    $0x10,%esp
f012fc70:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc73:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012fc76:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012fc7d:	e9 98 00 00 00       	jmp    f012fd1a <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012fc82:	83 ec 08             	sub    $0x8,%esp
f012fc85:	ff 75 0c             	pushl  0xc(%ebp)
f012fc88:	6a 58                	push   $0x58
f012fc8a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc8d:	ff d0                	call   *%eax
f012fc8f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012fc92:	83 ec 08             	sub    $0x8,%esp
f012fc95:	ff 75 0c             	pushl  0xc(%ebp)
f012fc98:	6a 58                	push   $0x58
f012fc9a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc9d:	ff d0                	call   *%eax
f012fc9f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012fca2:	83 ec 08             	sub    $0x8,%esp
f012fca5:	ff 75 0c             	pushl  0xc(%ebp)
f012fca8:	6a 58                	push   $0x58
f012fcaa:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcad:	ff d0                	call   *%eax
f012fcaf:	83 c4 10             	add    $0x10,%esp
			break;
f012fcb2:	e9 bc 00 00 00       	jmp    f012fd73 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012fcb7:	83 ec 08             	sub    $0x8,%esp
f012fcba:	ff 75 0c             	pushl  0xc(%ebp)
f012fcbd:	6a 30                	push   $0x30
f012fcbf:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcc2:	ff d0                	call   *%eax
f012fcc4:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012fcc7:	83 ec 08             	sub    $0x8,%esp
f012fcca:	ff 75 0c             	pushl  0xc(%ebp)
f012fccd:	6a 78                	push   $0x78
f012fccf:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcd2:	ff d0                	call   *%eax
f012fcd4:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012fcd7:	8b 45 14             	mov    0x14(%ebp),%eax
f012fcda:	83 c0 04             	add    $0x4,%eax
f012fcdd:	89 45 14             	mov    %eax,0x14(%ebp)
f012fce0:	8b 45 14             	mov    0x14(%ebp),%eax
f012fce3:	83 e8 04             	sub    $0x4,%eax
f012fce6:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012fce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012fcf2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012fcf9:	eb 1f                	jmp    f012fd1a <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012fcfb:	83 ec 08             	sub    $0x8,%esp
f012fcfe:	ff 75 e8             	pushl  -0x18(%ebp)
f012fd01:	8d 45 14             	lea    0x14(%ebp),%eax
f012fd04:	50                   	push   %eax
f012fd05:	e8 e7 fb ff ff       	call   f012f8f1 <getuint>
f012fd0a:	83 c4 10             	add    $0x10,%esp
f012fd0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fd10:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012fd13:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012fd1a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012fd1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fd21:	83 ec 04             	sub    $0x4,%esp
f012fd24:	52                   	push   %edx
f012fd25:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fd28:	50                   	push   %eax
f012fd29:	ff 75 f4             	pushl  -0xc(%ebp)
f012fd2c:	ff 75 f0             	pushl  -0x10(%ebp)
f012fd2f:	ff 75 0c             	pushl  0xc(%ebp)
f012fd32:	ff 75 08             	pushl  0x8(%ebp)
f012fd35:	e8 00 fb ff ff       	call   f012f83a <printnum>
f012fd3a:	83 c4 20             	add    $0x20,%esp
			break;
f012fd3d:	eb 34                	jmp    f012fd73 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012fd3f:	83 ec 08             	sub    $0x8,%esp
f012fd42:	ff 75 0c             	pushl  0xc(%ebp)
f012fd45:	53                   	push   %ebx
f012fd46:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd49:	ff d0                	call   *%eax
f012fd4b:	83 c4 10             	add    $0x10,%esp
			break;
f012fd4e:	eb 23                	jmp    f012fd73 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012fd50:	83 ec 08             	sub    $0x8,%esp
f012fd53:	ff 75 0c             	pushl  0xc(%ebp)
f012fd56:	6a 25                	push   $0x25
f012fd58:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd5b:	ff d0                	call   *%eax
f012fd5d:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012fd60:	ff 4d 10             	decl   0x10(%ebp)
f012fd63:	eb 03                	jmp    f012fd68 <vprintfmt+0x3b1>
f012fd65:	ff 4d 10             	decl   0x10(%ebp)
f012fd68:	8b 45 10             	mov    0x10(%ebp),%eax
f012fd6b:	48                   	dec    %eax
f012fd6c:	8a 00                	mov    (%eax),%al
f012fd6e:	3c 25                	cmp    $0x25,%al
f012fd70:	75 f3                	jne    f012fd65 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012fd72:	90                   	nop
		}
	}
f012fd73:	e9 47 fc ff ff       	jmp    f012f9bf <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012fd78:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012fd79:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fd7c:	5b                   	pop    %ebx
f012fd7d:	5e                   	pop    %esi
f012fd7e:	5d                   	pop    %ebp
f012fd7f:	c3                   	ret    

f012fd80 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012fd80:	55                   	push   %ebp
f012fd81:	89 e5                	mov    %esp,%ebp
f012fd83:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012fd86:	8d 45 10             	lea    0x10(%ebp),%eax
f012fd89:	83 c0 04             	add    $0x4,%eax
f012fd8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012fd8f:	8b 45 10             	mov    0x10(%ebp),%eax
f012fd92:	ff 75 f4             	pushl  -0xc(%ebp)
f012fd95:	50                   	push   %eax
f012fd96:	ff 75 0c             	pushl  0xc(%ebp)
f012fd99:	ff 75 08             	pushl  0x8(%ebp)
f012fd9c:	e8 16 fc ff ff       	call   f012f9b7 <vprintfmt>
f012fda1:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012fda4:	90                   	nop
f012fda5:	c9                   	leave  
f012fda6:	c3                   	ret    

f012fda7 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012fda7:	55                   	push   %ebp
f012fda8:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012fdaa:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdad:	8b 40 08             	mov    0x8(%eax),%eax
f012fdb0:	8d 50 01             	lea    0x1(%eax),%edx
f012fdb3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdb6:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012fdb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdbc:	8b 10                	mov    (%eax),%edx
f012fdbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdc1:	8b 40 04             	mov    0x4(%eax),%eax
f012fdc4:	39 c2                	cmp    %eax,%edx
f012fdc6:	73 12                	jae    f012fdda <sprintputch+0x33>
		*b->buf++ = ch;
f012fdc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdcb:	8b 00                	mov    (%eax),%eax
f012fdcd:	8d 48 01             	lea    0x1(%eax),%ecx
f012fdd0:	8b 55 0c             	mov    0xc(%ebp),%edx
f012fdd3:	89 0a                	mov    %ecx,(%edx)
f012fdd5:	8b 55 08             	mov    0x8(%ebp),%edx
f012fdd8:	88 10                	mov    %dl,(%eax)
}
f012fdda:	90                   	nop
f012fddb:	5d                   	pop    %ebp
f012fddc:	c3                   	ret    

f012fddd <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012fddd:	55                   	push   %ebp
f012fdde:	89 e5                	mov    %esp,%ebp
f012fde0:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012fde3:	8b 45 08             	mov    0x8(%ebp),%eax
f012fde6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fde9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fdec:	8d 50 ff             	lea    -0x1(%eax),%edx
f012fdef:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdf2:	01 d0                	add    %edx,%eax
f012fdf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fdf7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012fdfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fe02:	74 06                	je     f012fe0a <vsnprintf+0x2d>
f012fe04:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fe08:	7f 07                	jg     f012fe11 <vsnprintf+0x34>
		return -E_INVAL;
f012fe0a:	b8 03 00 00 00       	mov    $0x3,%eax
f012fe0f:	eb 20                	jmp    f012fe31 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012fe11:	ff 75 14             	pushl  0x14(%ebp)
f012fe14:	ff 75 10             	pushl  0x10(%ebp)
f012fe17:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012fe1a:	50                   	push   %eax
f012fe1b:	68 a7 fd 12 f0       	push   $0xf012fda7
f012fe20:	e8 92 fb ff ff       	call   f012f9b7 <vprintfmt>
f012fe25:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012fe28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fe2b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012fe2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012fe31:	c9                   	leave  
f012fe32:	c3                   	ret    

f012fe33 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012fe33:	55                   	push   %ebp
f012fe34:	89 e5                	mov    %esp,%ebp
f012fe36:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012fe39:	8d 45 10             	lea    0x10(%ebp),%eax
f012fe3c:	83 c0 04             	add    $0x4,%eax
f012fe3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012fe42:	8b 45 10             	mov    0x10(%ebp),%eax
f012fe45:	ff 75 f4             	pushl  -0xc(%ebp)
f012fe48:	50                   	push   %eax
f012fe49:	ff 75 0c             	pushl  0xc(%ebp)
f012fe4c:	ff 75 08             	pushl  0x8(%ebp)
f012fe4f:	e8 89 ff ff ff       	call   f012fddd <vsnprintf>
f012fe54:	83 c4 10             	add    $0x10,%esp
f012fe57:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012fe5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012fe5d:	c9                   	leave  
f012fe5e:	c3                   	ret    

f012fe5f <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012fe5f:	55                   	push   %ebp
f012fe60:	89 e5                	mov    %esp,%ebp
f012fe62:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012fe65:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fe69:	74 13                	je     f012fe7e <readline+0x1f>
		cprintf("%s", prompt);
f012fe6b:	83 ec 08             	sub    $0x8,%esp
f012fe6e:	ff 75 08             	pushl  0x8(%ebp)
f012fe71:	68 90 c2 13 f0       	push   $0xf013c290
f012fe76:	e8 b2 0d fd ff       	call   f0100c2d <cprintf>
f012fe7b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012fe7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012fe85:	83 ec 0c             	sub    $0xc,%esp
f012fe88:	6a 00                	push   $0x0
f012fe8a:	e8 4b 0d fd ff       	call   f0100bda <iscons>
f012fe8f:	83 c4 10             	add    $0x10,%esp
f012fe92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012fe95:	e8 27 0d fd ff       	call   f0100bc1 <getchar>
f012fe9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012fe9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012fea1:	79 22                	jns    f012fec5 <readline+0x66>
			if (c != -E_EOF)
f012fea3:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012fea7:	0f 84 ad 00 00 00    	je     f012ff5a <readline+0xfb>
				cprintf("read error: %e\n", c);
f012fead:	83 ec 08             	sub    $0x8,%esp
f012feb0:	ff 75 ec             	pushl  -0x14(%ebp)
f012feb3:	68 93 c2 13 f0       	push   $0xf013c293
f012feb8:	e8 70 0d fd ff       	call   f0100c2d <cprintf>
f012febd:	83 c4 10             	add    $0x10,%esp
			return;
f012fec0:	e9 95 00 00 00       	jmp    f012ff5a <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012fec5:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012fec9:	7e 34                	jle    f012feff <readline+0xa0>
f012fecb:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012fed2:	7f 2b                	jg     f012feff <readline+0xa0>
			if (echoing)
f012fed4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fed8:	74 0e                	je     f012fee8 <readline+0x89>
				cputchar(c);
f012feda:	83 ec 0c             	sub    $0xc,%esp
f012fedd:	ff 75 ec             	pushl  -0x14(%ebp)
f012fee0:	e8 c5 0c fd ff       	call   f0100baa <cputchar>
f012fee5:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012fee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012feeb:	8d 50 01             	lea    0x1(%eax),%edx
f012feee:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012fef1:	89 c2                	mov    %eax,%edx
f012fef3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fef6:	01 d0                	add    %edx,%eax
f012fef8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fefb:	88 10                	mov    %dl,(%eax)
f012fefd:	eb 56                	jmp    f012ff55 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012feff:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ff03:	75 1f                	jne    f012ff24 <readline+0xc5>
f012ff05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ff09:	7e 19                	jle    f012ff24 <readline+0xc5>
			if (echoing)
f012ff0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff0f:	74 0e                	je     f012ff1f <readline+0xc0>
				cputchar(c);
f012ff11:	83 ec 0c             	sub    $0xc,%esp
f012ff14:	ff 75 ec             	pushl  -0x14(%ebp)
f012ff17:	e8 8e 0c fd ff       	call   f0100baa <cputchar>
f012ff1c:	83 c4 10             	add    $0x10,%esp

			i--;
f012ff1f:	ff 4d f4             	decl   -0xc(%ebp)
f012ff22:	eb 31                	jmp    f012ff55 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ff24:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ff28:	74 0a                	je     f012ff34 <readline+0xd5>
f012ff2a:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ff2e:	0f 85 61 ff ff ff    	jne    f012fe95 <readline+0x36>
			if (echoing)
f012ff34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff38:	74 0e                	je     f012ff48 <readline+0xe9>
				cputchar(c);
f012ff3a:	83 ec 0c             	sub    $0xc,%esp
f012ff3d:	ff 75 ec             	pushl  -0x14(%ebp)
f012ff40:	e8 65 0c fd ff       	call   f0100baa <cputchar>
f012ff45:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ff48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ff4e:	01 d0                	add    %edx,%eax
f012ff50:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ff53:	eb 06                	jmp    f012ff5b <readline+0xfc>
		}
	}
f012ff55:	e9 3b ff ff ff       	jmp    f012fe95 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ff5a:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ff5b:	c9                   	leave  
f012ff5c:	c3                   	ret    

f012ff5d <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ff5d:	55                   	push   %ebp
f012ff5e:	89 e5                	mov    %esp,%ebp
f012ff60:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ff63:	e8 b1 bf fd ff       	call   f010bf19 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ff68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ff6c:	74 13                	je     f012ff81 <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ff6e:	83 ec 08             	sub    $0x8,%esp
f012ff71:	ff 75 08             	pushl  0x8(%ebp)
f012ff74:	68 90 c2 13 f0       	push   $0xf013c290
f012ff79:	e8 af 0c fd ff       	call   f0100c2d <cprintf>
f012ff7e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ff81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ff88:	83 ec 0c             	sub    $0xc,%esp
f012ff8b:	6a 00                	push   $0x0
f012ff8d:	e8 48 0c fd ff       	call   f0100bda <iscons>
f012ff92:	83 c4 10             	add    $0x10,%esp
f012ff95:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ff98:	e8 24 0c fd ff       	call   f0100bc1 <getchar>
f012ff9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ffa0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ffa4:	79 23                	jns    f012ffc9 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ffa6:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ffaa:	74 13                	je     f012ffbf <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ffac:	83 ec 08             	sub    $0x8,%esp
f012ffaf:	ff 75 ec             	pushl  -0x14(%ebp)
f012ffb2:	68 93 c2 13 f0       	push   $0xf013c293
f012ffb7:	e8 71 0c fd ff       	call   f0100c2d <cprintf>
f012ffbc:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ffbf:	e8 6f bf fd ff       	call   f010bf33 <sys_enable_interrupt>
			return;
f012ffc4:	e9 9a 00 00 00       	jmp    f0130063 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ffc9:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012ffcd:	7e 34                	jle    f0130003 <atomic_readline+0xa6>
f012ffcf:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ffd6:	7f 2b                	jg     f0130003 <atomic_readline+0xa6>
			if (echoing)
f012ffd8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ffdc:	74 0e                	je     f012ffec <atomic_readline+0x8f>
				cputchar(c);
f012ffde:	83 ec 0c             	sub    $0xc,%esp
f012ffe1:	ff 75 ec             	pushl  -0x14(%ebp)
f012ffe4:	e8 c1 0b fd ff       	call   f0100baa <cputchar>
f012ffe9:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ffec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ffef:	8d 50 01             	lea    0x1(%eax),%edx
f012fff2:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012fff5:	89 c2                	mov    %eax,%edx
f012fff7:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fffa:	01 d0                	add    %edx,%eax
f012fffc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ffff:	88 10                	mov    %dl,(%eax)
f0130001:	eb 5b                	jmp    f013005e <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130003:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130007:	75 1f                	jne    f0130028 <atomic_readline+0xcb>
f0130009:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013000d:	7e 19                	jle    f0130028 <atomic_readline+0xcb>
			if (echoing)
f013000f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130013:	74 0e                	je     f0130023 <atomic_readline+0xc6>
				cputchar(c);
f0130015:	83 ec 0c             	sub    $0xc,%esp
f0130018:	ff 75 ec             	pushl  -0x14(%ebp)
f013001b:	e8 8a 0b fd ff       	call   f0100baa <cputchar>
f0130020:	83 c4 10             	add    $0x10,%esp
			i--;
f0130023:	ff 4d f4             	decl   -0xc(%ebp)
f0130026:	eb 36                	jmp    f013005e <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130028:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013002c:	74 0a                	je     f0130038 <atomic_readline+0xdb>
f013002e:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130032:	0f 85 60 ff ff ff    	jne    f012ff98 <atomic_readline+0x3b>
			if (echoing)
f0130038:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013003c:	74 0e                	je     f013004c <atomic_readline+0xef>
				cputchar(c);
f013003e:	83 ec 0c             	sub    $0xc,%esp
f0130041:	ff 75 ec             	pushl  -0x14(%ebp)
f0130044:	e8 61 0b fd ff       	call   f0100baa <cputchar>
f0130049:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f013004c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013004f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130052:	01 d0                	add    %edx,%eax
f0130054:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130057:	e8 d7 be fd ff       	call   f010bf33 <sys_enable_interrupt>
			return;
f013005c:	eb 05                	jmp    f0130063 <atomic_readline+0x106>
		}
	}
f013005e:	e9 35 ff ff ff       	jmp    f012ff98 <atomic_readline+0x3b>
}
f0130063:	c9                   	leave  
f0130064:	c3                   	ret    

f0130065 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130065:	55                   	push   %ebp
f0130066:	89 e5                	mov    %esp,%ebp
f0130068:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f013006b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130072:	eb 06                	jmp    f013007a <strlen+0x15>
		n++;
f0130074:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130077:	ff 45 08             	incl   0x8(%ebp)
f013007a:	8b 45 08             	mov    0x8(%ebp),%eax
f013007d:	8a 00                	mov    (%eax),%al
f013007f:	84 c0                	test   %al,%al
f0130081:	75 f1                	jne    f0130074 <strlen+0xf>
		n++;
	return n;
f0130083:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130086:	c9                   	leave  
f0130087:	c3                   	ret    

f0130088 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130088:	55                   	push   %ebp
f0130089:	89 e5                	mov    %esp,%ebp
f013008b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013008e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130095:	eb 09                	jmp    f01300a0 <strnlen+0x18>
		n++;
f0130097:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f013009a:	ff 45 08             	incl   0x8(%ebp)
f013009d:	ff 4d 0c             	decl   0xc(%ebp)
f01300a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01300a4:	74 09                	je     f01300af <strnlen+0x27>
f01300a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01300a9:	8a 00                	mov    (%eax),%al
f01300ab:	84 c0                	test   %al,%al
f01300ad:	75 e8                	jne    f0130097 <strnlen+0xf>
		n++;
	return n;
f01300af:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01300b2:	c9                   	leave  
f01300b3:	c3                   	ret    

f01300b4 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01300b4:	55                   	push   %ebp
f01300b5:	89 e5                	mov    %esp,%ebp
f01300b7:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01300ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01300bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01300c0:	90                   	nop
f01300c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01300c4:	8d 50 01             	lea    0x1(%eax),%edx
f01300c7:	89 55 08             	mov    %edx,0x8(%ebp)
f01300ca:	8b 55 0c             	mov    0xc(%ebp),%edx
f01300cd:	8d 4a 01             	lea    0x1(%edx),%ecx
f01300d0:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01300d3:	8a 12                	mov    (%edx),%dl
f01300d5:	88 10                	mov    %dl,(%eax)
f01300d7:	8a 00                	mov    (%eax),%al
f01300d9:	84 c0                	test   %al,%al
f01300db:	75 e4                	jne    f01300c1 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01300dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01300e0:	c9                   	leave  
f01300e1:	c3                   	ret    

f01300e2 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01300e2:	55                   	push   %ebp
f01300e3:	89 e5                	mov    %esp,%ebp
f01300e5:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01300e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01300eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01300ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01300f5:	eb 1f                	jmp    f0130116 <strncpy+0x34>
		*dst++ = *src;
f01300f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01300fa:	8d 50 01             	lea    0x1(%eax),%edx
f01300fd:	89 55 08             	mov    %edx,0x8(%ebp)
f0130100:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130103:	8a 12                	mov    (%edx),%dl
f0130105:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130107:	8b 45 0c             	mov    0xc(%ebp),%eax
f013010a:	8a 00                	mov    (%eax),%al
f013010c:	84 c0                	test   %al,%al
f013010e:	74 03                	je     f0130113 <strncpy+0x31>
			src++;
f0130110:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130113:	ff 45 fc             	incl   -0x4(%ebp)
f0130116:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130119:	3b 45 10             	cmp    0x10(%ebp),%eax
f013011c:	72 d9                	jb     f01300f7 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f013011e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130121:	c9                   	leave  
f0130122:	c3                   	ret    

f0130123 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130123:	55                   	push   %ebp
f0130124:	89 e5                	mov    %esp,%ebp
f0130126:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130129:	8b 45 08             	mov    0x8(%ebp),%eax
f013012c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f013012f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130133:	74 30                	je     f0130165 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130135:	eb 16                	jmp    f013014d <strlcpy+0x2a>
			*dst++ = *src++;
f0130137:	8b 45 08             	mov    0x8(%ebp),%eax
f013013a:	8d 50 01             	lea    0x1(%eax),%edx
f013013d:	89 55 08             	mov    %edx,0x8(%ebp)
f0130140:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130143:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130146:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130149:	8a 12                	mov    (%edx),%dl
f013014b:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f013014d:	ff 4d 10             	decl   0x10(%ebp)
f0130150:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130154:	74 09                	je     f013015f <strlcpy+0x3c>
f0130156:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130159:	8a 00                	mov    (%eax),%al
f013015b:	84 c0                	test   %al,%al
f013015d:	75 d8                	jne    f0130137 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f013015f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130162:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130165:	8b 55 08             	mov    0x8(%ebp),%edx
f0130168:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013016b:	29 c2                	sub    %eax,%edx
f013016d:	89 d0                	mov    %edx,%eax
}
f013016f:	c9                   	leave  
f0130170:	c3                   	ret    

f0130171 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130171:	55                   	push   %ebp
f0130172:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130174:	eb 06                	jmp    f013017c <strcmp+0xb>
		p++, q++;
f0130176:	ff 45 08             	incl   0x8(%ebp)
f0130179:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f013017c:	8b 45 08             	mov    0x8(%ebp),%eax
f013017f:	8a 00                	mov    (%eax),%al
f0130181:	84 c0                	test   %al,%al
f0130183:	74 0e                	je     f0130193 <strcmp+0x22>
f0130185:	8b 45 08             	mov    0x8(%ebp),%eax
f0130188:	8a 10                	mov    (%eax),%dl
f013018a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013018d:	8a 00                	mov    (%eax),%al
f013018f:	38 c2                	cmp    %al,%dl
f0130191:	74 e3                	je     f0130176 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130193:	8b 45 08             	mov    0x8(%ebp),%eax
f0130196:	8a 00                	mov    (%eax),%al
f0130198:	0f b6 d0             	movzbl %al,%edx
f013019b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013019e:	8a 00                	mov    (%eax),%al
f01301a0:	0f b6 c0             	movzbl %al,%eax
f01301a3:	29 c2                	sub    %eax,%edx
f01301a5:	89 d0                	mov    %edx,%eax
}
f01301a7:	5d                   	pop    %ebp
f01301a8:	c3                   	ret    

f01301a9 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01301a9:	55                   	push   %ebp
f01301aa:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01301ac:	eb 09                	jmp    f01301b7 <strncmp+0xe>
		n--, p++, q++;
f01301ae:	ff 4d 10             	decl   0x10(%ebp)
f01301b1:	ff 45 08             	incl   0x8(%ebp)
f01301b4:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01301b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01301bb:	74 17                	je     f01301d4 <strncmp+0x2b>
f01301bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01301c0:	8a 00                	mov    (%eax),%al
f01301c2:	84 c0                	test   %al,%al
f01301c4:	74 0e                	je     f01301d4 <strncmp+0x2b>
f01301c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01301c9:	8a 10                	mov    (%eax),%dl
f01301cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301ce:	8a 00                	mov    (%eax),%al
f01301d0:	38 c2                	cmp    %al,%dl
f01301d2:	74 da                	je     f01301ae <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01301d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01301d8:	75 07                	jne    f01301e1 <strncmp+0x38>
		return 0;
f01301da:	b8 00 00 00 00       	mov    $0x0,%eax
f01301df:	eb 14                	jmp    f01301f5 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01301e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01301e4:	8a 00                	mov    (%eax),%al
f01301e6:	0f b6 d0             	movzbl %al,%edx
f01301e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301ec:	8a 00                	mov    (%eax),%al
f01301ee:	0f b6 c0             	movzbl %al,%eax
f01301f1:	29 c2                	sub    %eax,%edx
f01301f3:	89 d0                	mov    %edx,%eax
}
f01301f5:	5d                   	pop    %ebp
f01301f6:	c3                   	ret    

f01301f7 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01301f7:	55                   	push   %ebp
f01301f8:	89 e5                	mov    %esp,%ebp
f01301fa:	83 ec 04             	sub    $0x4,%esp
f01301fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130200:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130203:	eb 12                	jmp    f0130217 <strchr+0x20>
		if (*s == c)
f0130205:	8b 45 08             	mov    0x8(%ebp),%eax
f0130208:	8a 00                	mov    (%eax),%al
f013020a:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013020d:	75 05                	jne    f0130214 <strchr+0x1d>
			return (char *) s;
f013020f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130212:	eb 11                	jmp    f0130225 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130214:	ff 45 08             	incl   0x8(%ebp)
f0130217:	8b 45 08             	mov    0x8(%ebp),%eax
f013021a:	8a 00                	mov    (%eax),%al
f013021c:	84 c0                	test   %al,%al
f013021e:	75 e5                	jne    f0130205 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130220:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130225:	c9                   	leave  
f0130226:	c3                   	ret    

f0130227 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130227:	55                   	push   %ebp
f0130228:	89 e5                	mov    %esp,%ebp
f013022a:	83 ec 04             	sub    $0x4,%esp
f013022d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130230:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130233:	eb 0d                	jmp    f0130242 <strfind+0x1b>
		if (*s == c)
f0130235:	8b 45 08             	mov    0x8(%ebp),%eax
f0130238:	8a 00                	mov    (%eax),%al
f013023a:	3a 45 fc             	cmp    -0x4(%ebp),%al
f013023d:	74 0e                	je     f013024d <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f013023f:	ff 45 08             	incl   0x8(%ebp)
f0130242:	8b 45 08             	mov    0x8(%ebp),%eax
f0130245:	8a 00                	mov    (%eax),%al
f0130247:	84 c0                	test   %al,%al
f0130249:	75 ea                	jne    f0130235 <strfind+0xe>
f013024b:	eb 01                	jmp    f013024e <strfind+0x27>
		if (*s == c)
			break;
f013024d:	90                   	nop
	return (char *) s;
f013024e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130251:	c9                   	leave  
f0130252:	c3                   	ret    

f0130253 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130253:	55                   	push   %ebp
f0130254:	89 e5                	mov    %esp,%ebp
f0130256:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130259:	8b 45 08             	mov    0x8(%ebp),%eax
f013025c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f013025f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130262:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130265:	eb 0e                	jmp    f0130275 <memset+0x22>
		*p++ = c;
f0130267:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013026a:	8d 50 01             	lea    0x1(%eax),%edx
f013026d:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130270:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130273:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130275:	ff 4d f8             	decl   -0x8(%ebp)
f0130278:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f013027c:	79 e9                	jns    f0130267 <memset+0x14>
		*p++ = c;

	return v;
f013027e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130281:	c9                   	leave  
f0130282:	c3                   	ret    

f0130283 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130283:	55                   	push   %ebp
f0130284:	89 e5                	mov    %esp,%ebp
f0130286:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130289:	8b 45 0c             	mov    0xc(%ebp),%eax
f013028c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f013028f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130292:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130295:	eb 16                	jmp    f01302ad <memcpy+0x2a>
		*d++ = *s++;
f0130297:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013029a:	8d 50 01             	lea    0x1(%eax),%edx
f013029d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01302a0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01302a3:	8d 4a 01             	lea    0x1(%edx),%ecx
f01302a6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01302a9:	8a 12                	mov    (%edx),%dl
f01302ab:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f01302ad:	8b 45 10             	mov    0x10(%ebp),%eax
f01302b0:	8d 50 ff             	lea    -0x1(%eax),%edx
f01302b3:	89 55 10             	mov    %edx,0x10(%ebp)
f01302b6:	85 c0                	test   %eax,%eax
f01302b8:	75 dd                	jne    f0130297 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f01302ba:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01302bd:	c9                   	leave  
f01302be:	c3                   	ret    

f01302bf <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f01302bf:	55                   	push   %ebp
f01302c0:	89 e5                	mov    %esp,%ebp
f01302c2:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f01302c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01302c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01302cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01302ce:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f01302d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01302d4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01302d7:	73 50                	jae    f0130329 <memmove+0x6a>
f01302d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01302dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01302df:	01 d0                	add    %edx,%eax
f01302e1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01302e4:	76 43                	jbe    f0130329 <memmove+0x6a>
		s += n;
f01302e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01302e9:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01302ec:	8b 45 10             	mov    0x10(%ebp),%eax
f01302ef:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01302f2:	eb 10                	jmp    f0130304 <memmove+0x45>
			*--d = *--s;
f01302f4:	ff 4d f8             	decl   -0x8(%ebp)
f01302f7:	ff 4d fc             	decl   -0x4(%ebp)
f01302fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01302fd:	8a 10                	mov    (%eax),%dl
f01302ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130302:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130304:	8b 45 10             	mov    0x10(%ebp),%eax
f0130307:	8d 50 ff             	lea    -0x1(%eax),%edx
f013030a:	89 55 10             	mov    %edx,0x10(%ebp)
f013030d:	85 c0                	test   %eax,%eax
f013030f:	75 e3                	jne    f01302f4 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130311:	eb 23                	jmp    f0130336 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130313:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130316:	8d 50 01             	lea    0x1(%eax),%edx
f0130319:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013031c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013031f:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130322:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130325:	8a 12                	mov    (%edx),%dl
f0130327:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130329:	8b 45 10             	mov    0x10(%ebp),%eax
f013032c:	8d 50 ff             	lea    -0x1(%eax),%edx
f013032f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130332:	85 c0                	test   %eax,%eax
f0130334:	75 dd                	jne    f0130313 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130336:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130339:	c9                   	leave  
f013033a:	c3                   	ret    

f013033b <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f013033b:	55                   	push   %ebp
f013033c:	89 e5                	mov    %esp,%ebp
f013033e:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130341:	8b 45 08             	mov    0x8(%ebp),%eax
f0130344:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130347:	8b 45 0c             	mov    0xc(%ebp),%eax
f013034a:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f013034d:	eb 2a                	jmp    f0130379 <memcmp+0x3e>
		if (*s1 != *s2)
f013034f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130352:	8a 10                	mov    (%eax),%dl
f0130354:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130357:	8a 00                	mov    (%eax),%al
f0130359:	38 c2                	cmp    %al,%dl
f013035b:	74 16                	je     f0130373 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f013035d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130360:	8a 00                	mov    (%eax),%al
f0130362:	0f b6 d0             	movzbl %al,%edx
f0130365:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130368:	8a 00                	mov    (%eax),%al
f013036a:	0f b6 c0             	movzbl %al,%eax
f013036d:	29 c2                	sub    %eax,%edx
f013036f:	89 d0                	mov    %edx,%eax
f0130371:	eb 18                	jmp    f013038b <memcmp+0x50>
		s1++, s2++;
f0130373:	ff 45 fc             	incl   -0x4(%ebp)
f0130376:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130379:	8b 45 10             	mov    0x10(%ebp),%eax
f013037c:	8d 50 ff             	lea    -0x1(%eax),%edx
f013037f:	89 55 10             	mov    %edx,0x10(%ebp)
f0130382:	85 c0                	test   %eax,%eax
f0130384:	75 c9                	jne    f013034f <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130386:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013038b:	c9                   	leave  
f013038c:	c3                   	ret    

f013038d <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f013038d:	55                   	push   %ebp
f013038e:	89 e5                	mov    %esp,%ebp
f0130390:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130393:	8b 55 08             	mov    0x8(%ebp),%edx
f0130396:	8b 45 10             	mov    0x10(%ebp),%eax
f0130399:	01 d0                	add    %edx,%eax
f013039b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f013039e:	eb 15                	jmp    f01303b5 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f01303a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01303a3:	8a 00                	mov    (%eax),%al
f01303a5:	0f b6 d0             	movzbl %al,%edx
f01303a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303ab:	0f b6 c0             	movzbl %al,%eax
f01303ae:	39 c2                	cmp    %eax,%edx
f01303b0:	74 0d                	je     f01303bf <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01303b2:	ff 45 08             	incl   0x8(%ebp)
f01303b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01303b8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f01303bb:	72 e3                	jb     f01303a0 <memfind+0x13>
f01303bd:	eb 01                	jmp    f01303c0 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f01303bf:	90                   	nop
	return (void *) s;
f01303c0:	8b 45 08             	mov    0x8(%ebp),%eax
}
f01303c3:	c9                   	leave  
f01303c4:	c3                   	ret    

f01303c5 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01303c5:	55                   	push   %ebp
f01303c6:	89 e5                	mov    %esp,%ebp
f01303c8:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01303cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01303d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01303d9:	eb 03                	jmp    f01303de <strtol+0x19>
		s++;
f01303db:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01303de:	8b 45 08             	mov    0x8(%ebp),%eax
f01303e1:	8a 00                	mov    (%eax),%al
f01303e3:	3c 20                	cmp    $0x20,%al
f01303e5:	74 f4                	je     f01303db <strtol+0x16>
f01303e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01303ea:	8a 00                	mov    (%eax),%al
f01303ec:	3c 09                	cmp    $0x9,%al
f01303ee:	74 eb                	je     f01303db <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01303f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01303f3:	8a 00                	mov    (%eax),%al
f01303f5:	3c 2b                	cmp    $0x2b,%al
f01303f7:	75 05                	jne    f01303fe <strtol+0x39>
		s++;
f01303f9:	ff 45 08             	incl   0x8(%ebp)
f01303fc:	eb 13                	jmp    f0130411 <strtol+0x4c>
	else if (*s == '-')
f01303fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130401:	8a 00                	mov    (%eax),%al
f0130403:	3c 2d                	cmp    $0x2d,%al
f0130405:	75 0a                	jne    f0130411 <strtol+0x4c>
		s++, neg = 1;
f0130407:	ff 45 08             	incl   0x8(%ebp)
f013040a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130411:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130415:	74 06                	je     f013041d <strtol+0x58>
f0130417:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f013041b:	75 20                	jne    f013043d <strtol+0x78>
f013041d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130420:	8a 00                	mov    (%eax),%al
f0130422:	3c 30                	cmp    $0x30,%al
f0130424:	75 17                	jne    f013043d <strtol+0x78>
f0130426:	8b 45 08             	mov    0x8(%ebp),%eax
f0130429:	40                   	inc    %eax
f013042a:	8a 00                	mov    (%eax),%al
f013042c:	3c 78                	cmp    $0x78,%al
f013042e:	75 0d                	jne    f013043d <strtol+0x78>
		s += 2, base = 16;
f0130430:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130434:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f013043b:	eb 28                	jmp    f0130465 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f013043d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130441:	75 15                	jne    f0130458 <strtol+0x93>
f0130443:	8b 45 08             	mov    0x8(%ebp),%eax
f0130446:	8a 00                	mov    (%eax),%al
f0130448:	3c 30                	cmp    $0x30,%al
f013044a:	75 0c                	jne    f0130458 <strtol+0x93>
		s++, base = 8;
f013044c:	ff 45 08             	incl   0x8(%ebp)
f013044f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130456:	eb 0d                	jmp    f0130465 <strtol+0xa0>
	else if (base == 0)
f0130458:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013045c:	75 07                	jne    f0130465 <strtol+0xa0>
		base = 10;
f013045e:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130465:	8b 45 08             	mov    0x8(%ebp),%eax
f0130468:	8a 00                	mov    (%eax),%al
f013046a:	3c 2f                	cmp    $0x2f,%al
f013046c:	7e 19                	jle    f0130487 <strtol+0xc2>
f013046e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130471:	8a 00                	mov    (%eax),%al
f0130473:	3c 39                	cmp    $0x39,%al
f0130475:	7f 10                	jg     f0130487 <strtol+0xc2>
			dig = *s - '0';
f0130477:	8b 45 08             	mov    0x8(%ebp),%eax
f013047a:	8a 00                	mov    (%eax),%al
f013047c:	0f be c0             	movsbl %al,%eax
f013047f:	83 e8 30             	sub    $0x30,%eax
f0130482:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130485:	eb 42                	jmp    f01304c9 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0130487:	8b 45 08             	mov    0x8(%ebp),%eax
f013048a:	8a 00                	mov    (%eax),%al
f013048c:	3c 60                	cmp    $0x60,%al
f013048e:	7e 19                	jle    f01304a9 <strtol+0xe4>
f0130490:	8b 45 08             	mov    0x8(%ebp),%eax
f0130493:	8a 00                	mov    (%eax),%al
f0130495:	3c 7a                	cmp    $0x7a,%al
f0130497:	7f 10                	jg     f01304a9 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0130499:	8b 45 08             	mov    0x8(%ebp),%eax
f013049c:	8a 00                	mov    (%eax),%al
f013049e:	0f be c0             	movsbl %al,%eax
f01304a1:	83 e8 57             	sub    $0x57,%eax
f01304a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01304a7:	eb 20                	jmp    f01304c9 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f01304a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ac:	8a 00                	mov    (%eax),%al
f01304ae:	3c 40                	cmp    $0x40,%al
f01304b0:	7e 39                	jle    f01304eb <strtol+0x126>
f01304b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b5:	8a 00                	mov    (%eax),%al
f01304b7:	3c 5a                	cmp    $0x5a,%al
f01304b9:	7f 30                	jg     f01304eb <strtol+0x126>
			dig = *s - 'A' + 10;
f01304bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01304be:	8a 00                	mov    (%eax),%al
f01304c0:	0f be c0             	movsbl %al,%eax
f01304c3:	83 e8 37             	sub    $0x37,%eax
f01304c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01304c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304cc:	3b 45 10             	cmp    0x10(%ebp),%eax
f01304cf:	7d 19                	jge    f01304ea <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01304d1:	ff 45 08             	incl   0x8(%ebp)
f01304d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01304d7:	0f af 45 10          	imul   0x10(%ebp),%eax
f01304db:	89 c2                	mov    %eax,%edx
f01304dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304e0:	01 d0                	add    %edx,%eax
f01304e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f01304e5:	e9 7b ff ff ff       	jmp    f0130465 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f01304ea:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01304eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01304ef:	74 08                	je     f01304f9 <strtol+0x134>
		*endptr = (char *) s;
f01304f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01304f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01304f7:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01304f9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01304fd:	74 07                	je     f0130506 <strtol+0x141>
f01304ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130502:	f7 d8                	neg    %eax
f0130504:	eb 03                	jmp    f0130509 <strtol+0x144>
f0130506:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130509:	c9                   	leave  
f013050a:	c3                   	ret    

f013050b <ltostr>:

void
ltostr(long value, char *str)
{
f013050b:	55                   	push   %ebp
f013050c:	89 e5                	mov    %esp,%ebp
f013050e:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0130511:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0130518:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f013051f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130523:	79 13                	jns    f0130538 <ltostr+0x2d>
	{
		neg = 1;
f0130525:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f013052c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013052f:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0130532:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0130535:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0130538:	8b 45 08             	mov    0x8(%ebp),%eax
f013053b:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0130540:	99                   	cltd   
f0130541:	f7 f9                	idiv   %ecx
f0130543:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0130546:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130549:	8d 50 01             	lea    0x1(%eax),%edx
f013054c:	89 55 f8             	mov    %edx,-0x8(%ebp)
f013054f:	89 c2                	mov    %eax,%edx
f0130551:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130554:	01 d0                	add    %edx,%eax
f0130556:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130559:	83 c2 30             	add    $0x30,%edx
f013055c:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f013055e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130561:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130566:	f7 e9                	imul   %ecx
f0130568:	c1 fa 02             	sar    $0x2,%edx
f013056b:	89 c8                	mov    %ecx,%eax
f013056d:	c1 f8 1f             	sar    $0x1f,%eax
f0130570:	29 c2                	sub    %eax,%edx
f0130572:	89 d0                	mov    %edx,%eax
f0130574:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0130577:	8b 4d 08             	mov    0x8(%ebp),%ecx
f013057a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013057f:	f7 e9                	imul   %ecx
f0130581:	c1 fa 02             	sar    $0x2,%edx
f0130584:	89 c8                	mov    %ecx,%eax
f0130586:	c1 f8 1f             	sar    $0x1f,%eax
f0130589:	29 c2                	sub    %eax,%edx
f013058b:	89 d0                	mov    %edx,%eax
f013058d:	c1 e0 02             	shl    $0x2,%eax
f0130590:	01 d0                	add    %edx,%eax
f0130592:	01 c0                	add    %eax,%eax
f0130594:	29 c1                	sub    %eax,%ecx
f0130596:	89 ca                	mov    %ecx,%edx
f0130598:	85 d2                	test   %edx,%edx
f013059a:	75 9c                	jne    f0130538 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f013059c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f01305a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01305a6:	48                   	dec    %eax
f01305a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f01305aa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01305ae:	74 3d                	je     f01305ed <ltostr+0xe2>
		start = 1 ;
f01305b0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f01305b7:	eb 34                	jmp    f01305ed <ltostr+0xe2>
	{
		char tmp = str[start] ;
f01305b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01305bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305bf:	01 d0                	add    %edx,%eax
f01305c1:	8a 00                	mov    (%eax),%al
f01305c3:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f01305c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01305c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305cc:	01 c2                	add    %eax,%edx
f01305ce:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01305d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305d4:	01 c8                	add    %ecx,%eax
f01305d6:	8a 00                	mov    (%eax),%al
f01305d8:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f01305da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01305dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305e0:	01 c2                	add    %eax,%edx
f01305e2:	8a 45 eb             	mov    -0x15(%ebp),%al
f01305e5:	88 02                	mov    %al,(%edx)
		start++ ;
f01305e7:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f01305ea:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f01305ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01305f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01305f3:	7c c4                	jl     f01305b9 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f01305f5:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01305f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305fb:	01 d0                	add    %edx,%eax
f01305fd:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0130600:	90                   	nop
f0130601:	c9                   	leave  
f0130602:	c3                   	ret    

f0130603 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0130603:	55                   	push   %ebp
f0130604:	89 e5                	mov    %esp,%ebp
f0130606:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0130609:	ff 75 08             	pushl  0x8(%ebp)
f013060c:	e8 54 fa ff ff       	call   f0130065 <strlen>
f0130611:	83 c4 04             	add    $0x4,%esp
f0130614:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0130617:	ff 75 0c             	pushl  0xc(%ebp)
f013061a:	e8 46 fa ff ff       	call   f0130065 <strlen>
f013061f:	83 c4 04             	add    $0x4,%esp
f0130622:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0130625:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f013062c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130633:	eb 17                	jmp    f013064c <strcconcat+0x49>
		final[s] = str1[s] ;
f0130635:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130638:	8b 45 10             	mov    0x10(%ebp),%eax
f013063b:	01 c2                	add    %eax,%edx
f013063d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0130640:	8b 45 08             	mov    0x8(%ebp),%eax
f0130643:	01 c8                	add    %ecx,%eax
f0130645:	8a 00                	mov    (%eax),%al
f0130647:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0130649:	ff 45 fc             	incl   -0x4(%ebp)
f013064c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013064f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130652:	7c e1                	jl     f0130635 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130654:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f013065b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130662:	eb 1f                	jmp    f0130683 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130664:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130667:	8d 50 01             	lea    0x1(%eax),%edx
f013066a:	89 55 fc             	mov    %edx,-0x4(%ebp)
f013066d:	89 c2                	mov    %eax,%edx
f013066f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130672:	01 c2                	add    %eax,%edx
f0130674:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0130677:	8b 45 0c             	mov    0xc(%ebp),%eax
f013067a:	01 c8                	add    %ecx,%eax
f013067c:	8a 00                	mov    (%eax),%al
f013067e:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0130680:	ff 45 f8             	incl   -0x8(%ebp)
f0130683:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130686:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130689:	7c d9                	jl     f0130664 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f013068b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013068e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130691:	01 d0                	add    %edx,%eax
f0130693:	c6 00 00             	movb   $0x0,(%eax)
}
f0130696:	90                   	nop
f0130697:	c9                   	leave  
f0130698:	c3                   	ret    

f0130699 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0130699:	55                   	push   %ebp
f013069a:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f013069c:	8b 45 14             	mov    0x14(%ebp),%eax
f013069f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01306a5:	8b 45 14             	mov    0x14(%ebp),%eax
f01306a8:	8b 00                	mov    (%eax),%eax
f01306aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01306b1:	8b 45 10             	mov    0x10(%ebp),%eax
f01306b4:	01 d0                	add    %edx,%eax
f01306b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01306bc:	eb 0c                	jmp    f01306ca <strsplit+0x31>
			*string++ = 0;
f01306be:	8b 45 08             	mov    0x8(%ebp),%eax
f01306c1:	8d 50 01             	lea    0x1(%eax),%edx
f01306c4:	89 55 08             	mov    %edx,0x8(%ebp)
f01306c7:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01306ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01306cd:	8a 00                	mov    (%eax),%al
f01306cf:	84 c0                	test   %al,%al
f01306d1:	74 18                	je     f01306eb <strsplit+0x52>
f01306d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01306d6:	8a 00                	mov    (%eax),%al
f01306d8:	0f be c0             	movsbl %al,%eax
f01306db:	50                   	push   %eax
f01306dc:	ff 75 0c             	pushl  0xc(%ebp)
f01306df:	e8 13 fb ff ff       	call   f01301f7 <strchr>
f01306e4:	83 c4 08             	add    $0x8,%esp
f01306e7:	85 c0                	test   %eax,%eax
f01306e9:	75 d3                	jne    f01306be <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f01306eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01306ee:	8a 00                	mov    (%eax),%al
f01306f0:	84 c0                	test   %al,%al
f01306f2:	74 5a                	je     f013074e <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f01306f4:	8b 45 14             	mov    0x14(%ebp),%eax
f01306f7:	8b 00                	mov    (%eax),%eax
f01306f9:	83 f8 0f             	cmp    $0xf,%eax
f01306fc:	75 07                	jne    f0130705 <strsplit+0x6c>
		{
			return 0;
f01306fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0130703:	eb 66                	jmp    f013076b <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130705:	8b 45 14             	mov    0x14(%ebp),%eax
f0130708:	8b 00                	mov    (%eax),%eax
f013070a:	8d 48 01             	lea    0x1(%eax),%ecx
f013070d:	8b 55 14             	mov    0x14(%ebp),%edx
f0130710:	89 0a                	mov    %ecx,(%edx)
f0130712:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130719:	8b 45 10             	mov    0x10(%ebp),%eax
f013071c:	01 c2                	add    %eax,%edx
f013071e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130721:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130723:	eb 03                	jmp    f0130728 <strsplit+0x8f>
			string++;
f0130725:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130728:	8b 45 08             	mov    0x8(%ebp),%eax
f013072b:	8a 00                	mov    (%eax),%al
f013072d:	84 c0                	test   %al,%al
f013072f:	74 8b                	je     f01306bc <strsplit+0x23>
f0130731:	8b 45 08             	mov    0x8(%ebp),%eax
f0130734:	8a 00                	mov    (%eax),%al
f0130736:	0f be c0             	movsbl %al,%eax
f0130739:	50                   	push   %eax
f013073a:	ff 75 0c             	pushl  0xc(%ebp)
f013073d:	e8 b5 fa ff ff       	call   f01301f7 <strchr>
f0130742:	83 c4 08             	add    $0x8,%esp
f0130745:	85 c0                	test   %eax,%eax
f0130747:	74 dc                	je     f0130725 <strsplit+0x8c>
			string++;
	}
f0130749:	e9 6e ff ff ff       	jmp    f01306bc <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f013074e:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f013074f:	8b 45 14             	mov    0x14(%ebp),%eax
f0130752:	8b 00                	mov    (%eax),%eax
f0130754:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013075b:	8b 45 10             	mov    0x10(%ebp),%eax
f013075e:	01 d0                	add    %edx,%eax
f0130760:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130766:	b8 01 00 00 00       	mov    $0x1,%eax
}
f013076b:	c9                   	leave  
f013076c:	c3                   	ret    

f013076d <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f013076d:	55                   	push   %ebp
f013076e:	89 e5                	mov    %esp,%ebp
f0130770:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0130773:	90                   	nop
f0130774:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f013077b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013077e:	89 c2                	mov    %eax,%edx
f0130780:	ec                   	in     (%dx),%al
f0130781:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0130784:	8a 45 f7             	mov    -0x9(%ebp),%al
f0130787:	0f b6 c0             	movzbl %al,%eax
f013078a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013078d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130790:	25 c0 00 00 00       	and    $0xc0,%eax
f0130795:	83 f8 40             	cmp    $0x40,%eax
f0130798:	75 da                	jne    f0130774 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013079a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013079e:	74 11                	je     f01307b1 <ide_wait_ready+0x44>
f01307a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01307a3:	83 e0 21             	and    $0x21,%eax
f01307a6:	85 c0                	test   %eax,%eax
f01307a8:	74 07                	je     f01307b1 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01307aa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01307af:	eb 05                	jmp    f01307b6 <ide_wait_ready+0x49>
	}
	return 0;
f01307b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01307b6:	c9                   	leave  
f01307b7:	c3                   	ret    

f01307b8 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01307b8:	55                   	push   %ebp
f01307b9:	89 e5                	mov    %esp,%ebp
f01307bb:	57                   	push   %edi
f01307bc:	53                   	push   %ebx
f01307bd:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01307c0:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01307c7:	76 16                	jbe    f01307df <ide_read+0x27>
f01307c9:	68 a3 c2 13 f0       	push   $0xf013c2a3
f01307ce:	68 b0 c2 13 f0       	push   $0xf013c2b0
f01307d3:	6a 25                	push   $0x25
f01307d5:	68 c5 c2 13 f0       	push   $0xf013c2c5
f01307da:	e8 c7 f9 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f01307df:	83 ec 0c             	sub    $0xc,%esp
f01307e2:	6a 00                	push   $0x0
f01307e4:	e8 84 ff ff ff       	call   f013076d <ide_wait_ready>
f01307e9:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f01307ec:	8b 45 10             	mov    0x10(%ebp),%eax
f01307ef:	0f b6 c0             	movzbl %al,%eax
f01307f2:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01307f9:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01307fc:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01307ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130802:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130803:	8b 45 08             	mov    0x8(%ebp),%eax
f0130806:	0f b6 c0             	movzbl %al,%eax
f0130809:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130810:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130813:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130816:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130819:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013081a:	8b 45 08             	mov    0x8(%ebp),%eax
f013081d:	c1 e8 08             	shr    $0x8,%eax
f0130820:	0f b6 c0             	movzbl %al,%eax
f0130823:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013082a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013082d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130830:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130833:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130834:	8b 45 08             	mov    0x8(%ebp),%eax
f0130837:	c1 e8 10             	shr    $0x10,%eax
f013083a:	0f b6 c0             	movzbl %al,%eax
f013083d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130844:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130847:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013084a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013084d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013084e:	a1 cc 7f 65 f0       	mov    0xf0657fcc,%eax
f0130853:	83 e0 01             	and    $0x1,%eax
f0130856:	c1 e0 04             	shl    $0x4,%eax
f0130859:	88 c2                	mov    %al,%dl
f013085b:	8b 45 08             	mov    0x8(%ebp),%eax
f013085e:	c1 e8 18             	shr    $0x18,%eax
f0130861:	83 e0 0f             	and    $0xf,%eax
f0130864:	09 d0                	or     %edx,%eax
f0130866:	83 c8 e0             	or     $0xffffffe0,%eax
f0130869:	0f b6 c0             	movzbl %al,%eax
f013086c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130873:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130876:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130879:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013087c:	ee                   	out    %al,(%dx)
f013087d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130884:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0130888:	8a 45 d7             	mov    -0x29(%ebp),%al
f013088b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013088e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013088f:	eb 55                	jmp    f01308e6 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130891:	83 ec 0c             	sub    $0xc,%esp
f0130894:	6a 01                	push   $0x1
f0130896:	e8 d2 fe ff ff       	call   f013076d <ide_wait_ready>
f013089b:	83 c4 10             	add    $0x10,%esp
f013089e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01308a1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01308a5:	79 05                	jns    f01308ac <ide_read+0xf4>
			return r;
f01308a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01308aa:	eb 45                	jmp    f01308f1 <ide_read+0x139>
f01308ac:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01308b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308b6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01308b9:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01308c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01308c3:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01308c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01308c9:	89 cb                	mov    %ecx,%ebx
f01308cb:	89 df                	mov    %ebx,%edi
f01308cd:	89 c1                	mov    %eax,%ecx
f01308cf:	fc                   	cld    
f01308d0:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01308d2:	89 c8                	mov    %ecx,%eax
f01308d4:	89 fb                	mov    %edi,%ebx
f01308d6:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01308d9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01308dc:	ff 4d 10             	decl   0x10(%ebp)
f01308df:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01308e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01308ea:	75 a5                	jne    f0130891 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01308ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01308f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01308f4:	5b                   	pop    %ebx
f01308f5:	5f                   	pop    %edi
f01308f6:	5d                   	pop    %ebp
f01308f7:	c3                   	ret    

f01308f8 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01308f8:	55                   	push   %ebp
f01308f9:	89 e5                	mov    %esp,%ebp
f01308fb:	56                   	push   %esi
f01308fc:	53                   	push   %ebx
f01308fd:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0130900:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130907:	76 16                	jbe    f013091f <ide_write+0x27>
f0130909:	68 a3 c2 13 f0       	push   $0xf013c2a3
f013090e:	68 b0 c2 13 f0       	push   $0xf013c2b0
f0130913:	6a 3e                	push   $0x3e
f0130915:	68 c5 c2 13 f0       	push   $0xf013c2c5
f013091a:	e8 87 f8 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f013091f:	83 ec 0c             	sub    $0xc,%esp
f0130922:	6a 00                	push   $0x0
f0130924:	e8 44 fe ff ff       	call   f013076d <ide_wait_ready>
f0130929:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f013092c:	8b 45 10             	mov    0x10(%ebp),%eax
f013092f:	0f b6 c0             	movzbl %al,%eax
f0130932:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130939:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013093c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013093f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130942:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130943:	8b 45 08             	mov    0x8(%ebp),%eax
f0130946:	0f b6 c0             	movzbl %al,%eax
f0130949:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130950:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130953:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130956:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130959:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013095a:	8b 45 08             	mov    0x8(%ebp),%eax
f013095d:	c1 e8 08             	shr    $0x8,%eax
f0130960:	0f b6 c0             	movzbl %al,%eax
f0130963:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013096a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013096d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130970:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130973:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130974:	8b 45 08             	mov    0x8(%ebp),%eax
f0130977:	c1 e8 10             	shr    $0x10,%eax
f013097a:	0f b6 c0             	movzbl %al,%eax
f013097d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130984:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130987:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013098a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013098d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013098e:	a1 cc 7f 65 f0       	mov    0xf0657fcc,%eax
f0130993:	83 e0 01             	and    $0x1,%eax
f0130996:	c1 e0 04             	shl    $0x4,%eax
f0130999:	88 c2                	mov    %al,%dl
f013099b:	8b 45 08             	mov    0x8(%ebp),%eax
f013099e:	c1 e8 18             	shr    $0x18,%eax
f01309a1:	83 e0 0f             	and    $0xf,%eax
f01309a4:	09 d0                	or     %edx,%eax
f01309a6:	83 c8 e0             	or     $0xffffffe0,%eax
f01309a9:	0f b6 c0             	movzbl %al,%eax
f01309ac:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01309b3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01309b6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01309b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01309bc:	ee                   	out    %al,(%dx)
f01309bd:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01309c4:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01309c8:	8a 45 d7             	mov    -0x29(%ebp),%al
f01309cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01309ce:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01309cf:	eb 55                	jmp    f0130a26 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01309d1:	83 ec 0c             	sub    $0xc,%esp
f01309d4:	6a 01                	push   $0x1
f01309d6:	e8 92 fd ff ff       	call   f013076d <ide_wait_ready>
f01309db:	83 c4 10             	add    $0x10,%esp
f01309de:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01309e1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01309e5:	79 05                	jns    f01309ec <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01309e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01309ea:	eb 45                	jmp    f0130a31 <ide_write+0x139>
f01309ec:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01309f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01309f9:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0130a00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130a03:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130a06:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130a09:	89 cb                	mov    %ecx,%ebx
f0130a0b:	89 de                	mov    %ebx,%esi
f0130a0d:	89 c1                	mov    %eax,%ecx
f0130a0f:	fc                   	cld    
f0130a10:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0130a12:	89 c8                	mov    %ecx,%eax
f0130a14:	89 f3                	mov    %esi,%ebx
f0130a16:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130a19:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130a1c:	ff 4d 10             	decl   0x10(%ebp)
f0130a1f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130a26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130a2a:	75 a5                	jne    f01309d1 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0130a2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130a31:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130a34:	5b                   	pop    %ebx
f0130a35:	5e                   	pop    %esi
f0130a36:	5d                   	pop    %ebp
f0130a37:	c3                   	ret    

f0130a38 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0130a38:	55                   	push   %ebp
f0130a39:	89 e5                	mov    %esp,%ebp
f0130a3b:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0130a3e:	83 ec 0c             	sub    $0xc,%esp
f0130a41:	68 d0 c2 13 f0       	push   $0xf013c2d0
f0130a46:	e8 e2 01 fd ff       	call   f0100c2d <cprintf>
f0130a4b:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0130a4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0130a55:	83 ec 0c             	sub    $0xc,%esp
f0130a58:	68 fc c2 13 f0       	push   $0xf013c2fc
f0130a5d:	e8 cb 01 fd ff       	call   f0100c2d <cprintf>
f0130a62:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0130a65:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130a69:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0130a6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130a71:	eb 56                	jmp    f0130ac9 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130a73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130a77:	74 1c                	je     f0130a95 <print_mem_block_lists+0x5d>
f0130a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a7c:	8b 50 08             	mov    0x8(%eax),%edx
f0130a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a82:	8b 48 08             	mov    0x8(%eax),%ecx
f0130a85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130a88:	8b 40 0c             	mov    0xc(%eax),%eax
f0130a8b:	01 c8                	add    %ecx,%eax
f0130a8d:	39 c2                	cmp    %eax,%edx
f0130a8f:	73 04                	jae    f0130a95 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0130a91:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a98:	8b 50 08             	mov    0x8(%eax),%edx
f0130a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a9e:	8b 40 0c             	mov    0xc(%eax),%eax
f0130aa1:	01 c2                	add    %eax,%edx
f0130aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130aa6:	8b 40 08             	mov    0x8(%eax),%eax
f0130aa9:	83 ec 04             	sub    $0x4,%esp
f0130aac:	52                   	push   %edx
f0130aad:	50                   	push   %eax
f0130aae:	68 11 c3 13 f0       	push   $0xf013c311
f0130ab3:	e8 75 01 fd ff       	call   f0100c2d <cprintf>
f0130ab8:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130ac1:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0130ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130ac9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130acd:	74 07                	je     f0130ad6 <print_mem_block_lists+0x9e>
f0130acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ad2:	8b 00                	mov    (%eax),%eax
f0130ad4:	eb 05                	jmp    f0130adb <print_mem_block_lists+0xa3>
f0130ad6:	b8 00 00 00 00       	mov    $0x0,%eax
f0130adb:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0130ae0:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0130ae5:	85 c0                	test   %eax,%eax
f0130ae7:	75 8a                	jne    f0130a73 <print_mem_block_lists+0x3b>
f0130ae9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130aed:	75 84                	jne    f0130a73 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0130aef:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130af3:	75 10                	jne    f0130b05 <print_mem_block_lists+0xcd>
f0130af5:	83 ec 0c             	sub    $0xc,%esp
f0130af8:	68 20 c3 13 f0       	push   $0xf013c320
f0130afd:	e8 2b 01 fd ff       	call   f0100c2d <cprintf>
f0130b02:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0130b05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0130b0c:	83 ec 0c             	sub    $0xc,%esp
f0130b0f:	68 44 c3 13 f0       	push   $0xf013c344
f0130b14:	e8 14 01 fd ff       	call   f0100c2d <cprintf>
f0130b19:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0130b1c:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130b20:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130b28:	eb 56                	jmp    f0130b80 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130b2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b2e:	74 1c                	je     f0130b4c <print_mem_block_lists+0x114>
f0130b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b33:	8b 50 08             	mov    0x8(%eax),%edx
f0130b36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b39:	8b 48 08             	mov    0x8(%eax),%ecx
f0130b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b3f:	8b 40 0c             	mov    0xc(%eax),%eax
f0130b42:	01 c8                	add    %ecx,%eax
f0130b44:	39 c2                	cmp    %eax,%edx
f0130b46:	73 04                	jae    f0130b4c <print_mem_block_lists+0x114>
			sorted = 0 ;
f0130b48:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b4f:	8b 50 08             	mov    0x8(%eax),%edx
f0130b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b55:	8b 40 0c             	mov    0xc(%eax),%eax
f0130b58:	01 c2                	add    %eax,%edx
f0130b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b5d:	8b 40 08             	mov    0x8(%eax),%eax
f0130b60:	83 ec 04             	sub    $0x4,%esp
f0130b63:	52                   	push   %edx
f0130b64:	50                   	push   %eax
f0130b65:	68 11 c3 13 f0       	push   $0xf013c311
f0130b6a:	e8 be 00 fd ff       	call   f0100c2d <cprintf>
f0130b6f:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130b78:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130b84:	74 07                	je     f0130b8d <print_mem_block_lists+0x155>
f0130b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b89:	8b 00                	mov    (%eax),%eax
f0130b8b:	eb 05                	jmp    f0130b92 <print_mem_block_lists+0x15a>
f0130b8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0130b92:	a3 f8 7f 65 f0       	mov    %eax,0xf0657ff8
f0130b97:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130b9c:	85 c0                	test   %eax,%eax
f0130b9e:	75 8a                	jne    f0130b2a <print_mem_block_lists+0xf2>
f0130ba0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ba4:	75 84                	jne    f0130b2a <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0130ba6:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130baa:	75 10                	jne    f0130bbc <print_mem_block_lists+0x184>
f0130bac:	83 ec 0c             	sub    $0xc,%esp
f0130baf:	68 5c c3 13 f0       	push   $0xf013c35c
f0130bb4:	e8 74 00 fd ff       	call   f0100c2d <cprintf>
f0130bb9:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0130bbc:	83 ec 0c             	sub    $0xc,%esp
f0130bbf:	68 d0 c2 13 f0       	push   $0xf013c2d0
f0130bc4:	e8 64 00 fd ff       	call   f0100c2d <cprintf>
f0130bc9:	83 c4 10             	add    $0x10,%esp

}
f0130bcc:	90                   	nop
f0130bcd:	c9                   	leave  
f0130bce:	c3                   	ret    

f0130bcf <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0130bcf:	55                   	push   %ebp
f0130bd0:	89 e5                	mov    %esp,%ebp
f0130bd2:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f0130bd5:	c7 05 f4 74 6e f0 00 	movl   $0x0,0xf06e74f4
f0130bdc:	00 00 00 
f0130bdf:	c7 05 f8 74 6e f0 00 	movl   $0x0,0xf06e74f8
f0130be6:	00 00 00 
f0130be9:	c7 05 00 75 6e f0 00 	movl   $0x0,0xf06e7500
f0130bf0:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f0130bf3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130bfa:	eb 79                	jmp    f0130c75 <initialize_MemBlocksList+0xa6>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0130bfc:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0130c01:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130c04:	c1 e2 04             	shl    $0x4,%edx
f0130c07:	81 c2 00 80 65 f0    	add    $0xf0658000,%edx
f0130c0d:	89 02                	mov    %eax,(%edx)
f0130c0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c12:	c1 e0 04             	shl    $0x4,%eax
f0130c15:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c1a:	8b 00                	mov    (%eax),%eax
f0130c1c:	85 c0                	test   %eax,%eax
f0130c1e:	74 16                	je     f0130c36 <initialize_MemBlocksList+0x67>
f0130c20:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0130c25:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130c28:	c1 e2 04             	shl    $0x4,%edx
f0130c2b:	81 c2 00 80 65 f0    	add    $0xf0658000,%edx
f0130c31:	89 50 04             	mov    %edx,0x4(%eax)
f0130c34:	eb 10                	jmp    f0130c46 <initialize_MemBlocksList+0x77>
f0130c36:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c39:	c1 e0 04             	shl    $0x4,%eax
f0130c3c:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c41:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0130c46:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c49:	c1 e0 04             	shl    $0x4,%eax
f0130c4c:	05 00 80 65 f0       	add    $0xf0658000,%eax
f0130c51:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0130c56:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c59:	c1 e0 04             	shl    $0x4,%eax
f0130c5c:	05 04 80 65 f0       	add    $0xf0658004,%eax
f0130c61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130c67:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0130c6c:	40                   	inc    %eax
f0130c6d:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0130c72:	ff 45 fc             	incl   -0x4(%ebp)
f0130c75:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c78:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130c7b:	0f 82 7b ff ff ff    	jb     f0130bfc <initialize_MemBlocksList+0x2d>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0130c81:	90                   	nop
f0130c82:	c9                   	leave  
f0130c83:	c3                   	ret    

f0130c84 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0130c84:	55                   	push   %ebp
f0130c85:	89 e5                	mov    %esp,%ebp
f0130c87:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0130c8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c8d:	8b 00                	mov    (%eax),%eax
f0130c8f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130c92:	eb 19                	jmp    f0130cad <find_block+0x29>
	{
		if(va==point->sva)
f0130c94:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130c97:	8b 40 08             	mov    0x8(%eax),%eax
f0130c9a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130c9d:	75 05                	jne    f0130ca4 <find_block+0x20>
		   return point;
f0130c9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ca2:	eb 36                	jmp    f0130cda <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0130ca4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ca7:	8b 40 08             	mov    0x8(%eax),%eax
f0130caa:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130cad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130cb1:	74 07                	je     f0130cba <find_block+0x36>
f0130cb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cb6:	8b 00                	mov    (%eax),%eax
f0130cb8:	eb 05                	jmp    f0130cbf <find_block+0x3b>
f0130cba:	b8 00 00 00 00       	mov    $0x0,%eax
f0130cbf:	8b 55 08             	mov    0x8(%ebp),%edx
f0130cc2:	89 42 08             	mov    %eax,0x8(%edx)
f0130cc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cc8:	8b 40 08             	mov    0x8(%eax),%eax
f0130ccb:	85 c0                	test   %eax,%eax
f0130ccd:	75 c5                	jne    f0130c94 <find_block+0x10>
f0130ccf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130cd3:	75 bf                	jne    f0130c94 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0130cd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130cda:	c9                   	leave  
f0130cdb:	c3                   	ret    

f0130cdc <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f0130cdc:	55                   	push   %ebp
f0130cdd:	89 e5                	mov    %esp,%ebp
f0130cdf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0130ce2:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130ce7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f0130cea:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f0130cef:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f0130cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130cf5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0130cf8:	74 24                	je     f0130d1e <insert_sorted_allocList+0x42>
f0130cfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cfd:	8b 50 08             	mov    0x8(%eax),%edx
f0130d00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d03:	8b 40 08             	mov    0x8(%eax),%eax
f0130d06:	39 c2                	cmp    %eax,%edx
f0130d08:	76 14                	jbe    f0130d1e <insert_sorted_allocList+0x42>
f0130d0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d0d:	8b 50 08             	mov    0x8(%eax),%edx
f0130d10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130d13:	8b 40 08             	mov    0x8(%eax),%eax
f0130d16:	39 c2                	cmp    %eax,%edx
f0130d18:	0f 82 60 01 00 00    	jb     f0130e7e <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f0130d1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d22:	75 65                	jne    f0130d89 <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f0130d24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130d28:	75 14                	jne    f0130d3e <insert_sorted_allocList+0x62>
f0130d2a:	83 ec 04             	sub    $0x4,%esp
f0130d2d:	68 84 c3 13 f0       	push   $0xf013c384
f0130d32:	6a 6b                	push   $0x6b
f0130d34:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0130d39:	e8 68 f4 fc ff       	call   f01001a6 <_panic>
f0130d3e:	8b 15 f0 7f 65 f0    	mov    0xf0657ff0,%edx
f0130d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d47:	89 10                	mov    %edx,(%eax)
f0130d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d4c:	8b 00                	mov    (%eax),%eax
f0130d4e:	85 c0                	test   %eax,%eax
f0130d50:	74 0d                	je     f0130d5f <insert_sorted_allocList+0x83>
f0130d52:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130d57:	8b 55 08             	mov    0x8(%ebp),%edx
f0130d5a:	89 50 04             	mov    %edx,0x4(%eax)
f0130d5d:	eb 08                	jmp    f0130d67 <insert_sorted_allocList+0x8b>
f0130d5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d62:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130d67:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d6a:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130d6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d72:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0130d79:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130d7e:	40                   	inc    %eax
f0130d7f:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130d84:	e9 dc 01 00 00       	jmp    f0130f65 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f0130d89:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d8c:	8b 50 08             	mov    0x8(%eax),%edx
f0130d8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130d92:	8b 40 08             	mov    0x8(%eax),%eax
f0130d95:	39 c2                	cmp    %eax,%edx
f0130d97:	77 6c                	ja     f0130e05 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f0130d99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130d9d:	74 06                	je     f0130da5 <insert_sorted_allocList+0xc9>
f0130d9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130da3:	75 14                	jne    f0130db9 <insert_sorted_allocList+0xdd>
f0130da5:	83 ec 04             	sub    $0x4,%esp
f0130da8:	68 c0 c3 13 f0       	push   $0xf013c3c0
f0130dad:	6a 6f                	push   $0x6f
f0130daf:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0130db4:	e8 ed f3 fc ff       	call   f01001a6 <_panic>
f0130db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dbc:	8b 50 04             	mov    0x4(%eax),%edx
f0130dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc2:	89 50 04             	mov    %edx,0x4(%eax)
f0130dc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130dcb:	89 10                	mov    %edx,(%eax)
f0130dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dd0:	8b 40 04             	mov    0x4(%eax),%eax
f0130dd3:	85 c0                	test   %eax,%eax
f0130dd5:	74 0d                	je     f0130de4 <insert_sorted_allocList+0x108>
f0130dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130dda:	8b 40 04             	mov    0x4(%eax),%eax
f0130ddd:	8b 55 08             	mov    0x8(%ebp),%edx
f0130de0:	89 10                	mov    %edx,(%eax)
f0130de2:	eb 08                	jmp    f0130dec <insert_sorted_allocList+0x110>
f0130de4:	8b 45 08             	mov    0x8(%ebp),%eax
f0130de7:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130def:	8b 55 08             	mov    0x8(%ebp),%edx
f0130df2:	89 50 04             	mov    %edx,0x4(%eax)
f0130df5:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130dfa:	40                   	inc    %eax
f0130dfb:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130e00:	e9 60 01 00 00       	jmp    f0130f65 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f0130e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e08:	8b 50 08             	mov    0x8(%eax),%edx
f0130e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130e0e:	8b 40 08             	mov    0x8(%eax),%eax
f0130e11:	39 c2                	cmp    %eax,%edx
f0130e13:	0f 82 4c 01 00 00    	jb     f0130f65 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f0130e19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130e1d:	75 14                	jne    f0130e33 <insert_sorted_allocList+0x157>
f0130e1f:	83 ec 04             	sub    $0x4,%esp
f0130e22:	68 f8 c3 13 f0       	push   $0xf013c3f8
f0130e27:	6a 73                	push   $0x73
f0130e29:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0130e2e:	e8 73 f3 fc ff       	call   f01001a6 <_panic>
f0130e33:	8b 15 f4 7f 65 f0    	mov    0xf0657ff4,%edx
f0130e39:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e3c:	89 50 04             	mov    %edx,0x4(%eax)
f0130e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e42:	8b 40 04             	mov    0x4(%eax),%eax
f0130e45:	85 c0                	test   %eax,%eax
f0130e47:	74 0c                	je     f0130e55 <insert_sorted_allocList+0x179>
f0130e49:	a1 f4 7f 65 f0       	mov    0xf0657ff4,%eax
f0130e4e:	8b 55 08             	mov    0x8(%ebp),%edx
f0130e51:	89 10                	mov    %edx,(%eax)
f0130e53:	eb 08                	jmp    f0130e5d <insert_sorted_allocList+0x181>
f0130e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e58:	a3 f0 7f 65 f0       	mov    %eax,0xf0657ff0
f0130e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e60:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130e65:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130e6e:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130e73:	40                   	inc    %eax
f0130e74:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130e79:	e9 e7 00 00 00       	jmp    f0130f65 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0130e7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e81:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0130e84:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0130e8b:	a1 f0 7f 65 f0       	mov    0xf0657ff0,%eax
f0130e90:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130e93:	e9 9d 00 00 00       	jmp    f0130f35 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0130e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e9b:	8b 00                	mov    (%eax),%eax
f0130e9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0130ea0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ea3:	8b 50 08             	mov    0x8(%eax),%edx
f0130ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ea9:	8b 40 08             	mov    0x8(%eax),%eax
f0130eac:	39 c2                	cmp    %eax,%edx
f0130eae:	76 7d                	jbe    f0130f2d <insert_sorted_allocList+0x251>
f0130eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eb3:	8b 50 08             	mov    0x8(%eax),%edx
f0130eb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130eb9:	8b 40 08             	mov    0x8(%eax),%eax
f0130ebc:	39 c2                	cmp    %eax,%edx
f0130ebe:	73 6d                	jae    f0130f2d <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0130ec0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ec4:	74 06                	je     f0130ecc <insert_sorted_allocList+0x1f0>
f0130ec6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130eca:	75 14                	jne    f0130ee0 <insert_sorted_allocList+0x204>
f0130ecc:	83 ec 04             	sub    $0x4,%esp
f0130ecf:	68 1c c4 13 f0       	push   $0xf013c41c
f0130ed4:	6a 7f                	push   $0x7f
f0130ed6:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0130edb:	e8 c6 f2 fc ff       	call   f01001a6 <_panic>
f0130ee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ee3:	8b 10                	mov    (%eax),%edx
f0130ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ee8:	89 10                	mov    %edx,(%eax)
f0130eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0130eed:	8b 00                	mov    (%eax),%eax
f0130eef:	85 c0                	test   %eax,%eax
f0130ef1:	74 0b                	je     f0130efe <insert_sorted_allocList+0x222>
f0130ef3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ef6:	8b 00                	mov    (%eax),%eax
f0130ef8:	8b 55 08             	mov    0x8(%ebp),%edx
f0130efb:	89 50 04             	mov    %edx,0x4(%eax)
f0130efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f01:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f04:	89 10                	mov    %edx,(%eax)
f0130f06:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130f0c:	89 50 04             	mov    %edx,0x4(%eax)
f0130f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f12:	8b 00                	mov    (%eax),%eax
f0130f14:	85 c0                	test   %eax,%eax
f0130f16:	75 08                	jne    f0130f20 <insert_sorted_allocList+0x244>
f0130f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f1b:	a3 f4 7f 65 f0       	mov    %eax,0xf0657ff4
f0130f20:	a1 fc 7f 65 f0       	mov    0xf0657ffc,%eax
f0130f25:	40                   	inc    %eax
f0130f26:	a3 fc 7f 65 f0       	mov    %eax,0xf0657ffc
				break;
f0130f2b:	eb 39                	jmp    f0130f66 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0130f2d:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130f32:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f39:	74 07                	je     f0130f42 <insert_sorted_allocList+0x266>
f0130f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f3e:	8b 00                	mov    (%eax),%eax
f0130f40:	eb 05                	jmp    f0130f47 <insert_sorted_allocList+0x26b>
f0130f42:	b8 00 00 00 00       	mov    $0x0,%eax
f0130f47:	a3 f8 7f 65 f0       	mov    %eax,0xf0657ff8
f0130f4c:	a1 f8 7f 65 f0       	mov    0xf0657ff8,%eax
f0130f51:	85 c0                	test   %eax,%eax
f0130f53:	0f 85 3f ff ff ff    	jne    f0130e98 <insert_sorted_allocList+0x1bc>
f0130f59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f5d:	0f 85 35 ff ff ff    	jne    f0130e98 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0130f63:	eb 01                	jmp    f0130f66 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0130f65:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0130f66:	90                   	nop
f0130f67:	c9                   	leave  
f0130f68:	c3                   	ret    

f0130f69 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0130f69:	55                   	push   %ebp
f0130f6a:	89 e5                	mov    %esp,%ebp
f0130f6c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0130f6f:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0130f74:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f77:	e9 85 01 00 00       	jmp    f0131101 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0130f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f7f:	8b 40 0c             	mov    0xc(%eax),%eax
f0130f82:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130f85:	0f 82 6e 01 00 00    	jb     f01310f9 <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0130f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f8e:	8b 40 0c             	mov    0xc(%eax),%eax
f0130f91:	3b 45 08             	cmp    0x8(%ebp),%eax
f0130f94:	0f 85 8a 00 00 00    	jne    f0131024 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0130f9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f9e:	75 17                	jne    f0130fb7 <alloc_block_FF+0x4e>
f0130fa0:	83 ec 04             	sub    $0x4,%esp
f0130fa3:	68 50 c4 13 f0       	push   $0xf013c450
f0130fa8:	68 93 00 00 00       	push   $0x93
f0130fad:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0130fb2:	e8 ef f1 fc ff       	call   f01001a6 <_panic>
f0130fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fba:	8b 00                	mov    (%eax),%eax
f0130fbc:	85 c0                	test   %eax,%eax
f0130fbe:	74 10                	je     f0130fd0 <alloc_block_FF+0x67>
f0130fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fc3:	8b 00                	mov    (%eax),%eax
f0130fc5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130fc8:	8b 52 04             	mov    0x4(%edx),%edx
f0130fcb:	89 50 04             	mov    %edx,0x4(%eax)
f0130fce:	eb 0b                	jmp    f0130fdb <alloc_block_FF+0x72>
f0130fd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fd3:	8b 40 04             	mov    0x4(%eax),%eax
f0130fd6:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0130fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fde:	8b 40 04             	mov    0x4(%eax),%eax
f0130fe1:	85 c0                	test   %eax,%eax
f0130fe3:	74 0f                	je     f0130ff4 <alloc_block_FF+0x8b>
f0130fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fe8:	8b 40 04             	mov    0x4(%eax),%eax
f0130feb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130fee:	8b 12                	mov    (%edx),%edx
f0130ff0:	89 10                	mov    %edx,(%eax)
f0130ff2:	eb 0a                	jmp    f0130ffe <alloc_block_FF+0x95>
f0130ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130ff7:	8b 00                	mov    (%eax),%eax
f0130ff9:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0130ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131001:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013100a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131011:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131016:	48                   	dec    %eax
f0131017:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			   return  point;
f013101c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013101f:	e9 10 01 00 00       	jmp    f0131134 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131027:	8b 40 0c             	mov    0xc(%eax),%eax
f013102a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013102d:	0f 86 c6 00 00 00    	jbe    f01310f9 <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131033:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131038:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f013103b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013103e:	8b 50 08             	mov    0x8(%eax),%edx
f0131041:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131044:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131047:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013104a:	8b 55 08             	mov    0x8(%ebp),%edx
f013104d:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131050:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131054:	75 17                	jne    f013106d <alloc_block_FF+0x104>
f0131056:	83 ec 04             	sub    $0x4,%esp
f0131059:	68 50 c4 13 f0       	push   $0xf013c450
f013105e:	68 9b 00 00 00       	push   $0x9b
f0131063:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131068:	e8 39 f1 fc ff       	call   f01001a6 <_panic>
f013106d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131070:	8b 00                	mov    (%eax),%eax
f0131072:	85 c0                	test   %eax,%eax
f0131074:	74 10                	je     f0131086 <alloc_block_FF+0x11d>
f0131076:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131079:	8b 00                	mov    (%eax),%eax
f013107b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013107e:	8b 52 04             	mov    0x4(%edx),%edx
f0131081:	89 50 04             	mov    %edx,0x4(%eax)
f0131084:	eb 0b                	jmp    f0131091 <alloc_block_FF+0x128>
f0131086:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131089:	8b 40 04             	mov    0x4(%eax),%eax
f013108c:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131091:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131094:	8b 40 04             	mov    0x4(%eax),%eax
f0131097:	85 c0                	test   %eax,%eax
f0131099:	74 0f                	je     f01310aa <alloc_block_FF+0x141>
f013109b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013109e:	8b 40 04             	mov    0x4(%eax),%eax
f01310a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01310a4:	8b 12                	mov    (%edx),%edx
f01310a6:	89 10                	mov    %edx,(%eax)
f01310a8:	eb 0a                	jmp    f01310b4 <alloc_block_FF+0x14b>
f01310aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310ad:	8b 00                	mov    (%eax),%eax
f01310af:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01310b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01310bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01310c7:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01310cc:	48                   	dec    %eax
f01310cd:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
			   point->sva += size;
f01310d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310d5:	8b 50 08             	mov    0x8(%eax),%edx
f01310d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01310db:	01 c2                	add    %eax,%edx
f01310dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310e0:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f01310e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310e6:	8b 40 0c             	mov    0xc(%eax),%eax
f01310e9:	2b 45 08             	sub    0x8(%ebp),%eax
f01310ec:	89 c2                	mov    %eax,%edx
f01310ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310f1:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f01310f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01310f7:	eb 3b                	jmp    f0131134 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f01310f9:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f01310fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131101:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131105:	74 07                	je     f013110e <alloc_block_FF+0x1a5>
f0131107:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013110a:	8b 00                	mov    (%eax),%eax
f013110c:	eb 05                	jmp    f0131113 <alloc_block_FF+0x1aa>
f013110e:	b8 00 00 00 00       	mov    $0x0,%eax
f0131113:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0131118:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013111d:	85 c0                	test   %eax,%eax
f013111f:	0f 85 57 fe ff ff    	jne    f0130f7c <alloc_block_FF+0x13>
f0131125:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131129:	0f 85 4d fe ff ff    	jne    f0130f7c <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f013112f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131134:	c9                   	leave  
f0131135:	c3                   	ret    

f0131136 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131136:	55                   	push   %ebp
f0131137:	89 e5                	mov    %esp,%ebp
f0131139:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f013113c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131143:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131148:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013114b:	e9 df 00 00 00       	jmp    f013122f <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131150:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131153:	8b 40 0c             	mov    0xc(%eax),%eax
f0131156:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131159:	0f 82 c8 00 00 00    	jb     f0131227 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f013115f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131162:	8b 40 0c             	mov    0xc(%eax),%eax
f0131165:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131168:	0f 85 8a 00 00 00    	jne    f01311f8 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f013116e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131172:	75 17                	jne    f013118b <alloc_block_BF+0x55>
f0131174:	83 ec 04             	sub    $0x4,%esp
f0131177:	68 50 c4 13 f0       	push   $0xf013c450
f013117c:	68 b7 00 00 00       	push   $0xb7
f0131181:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131186:	e8 1b f0 fc ff       	call   f01001a6 <_panic>
f013118b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013118e:	8b 00                	mov    (%eax),%eax
f0131190:	85 c0                	test   %eax,%eax
f0131192:	74 10                	je     f01311a4 <alloc_block_BF+0x6e>
f0131194:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131197:	8b 00                	mov    (%eax),%eax
f0131199:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013119c:	8b 52 04             	mov    0x4(%edx),%edx
f013119f:	89 50 04             	mov    %edx,0x4(%eax)
f01311a2:	eb 0b                	jmp    f01311af <alloc_block_BF+0x79>
f01311a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311a7:	8b 40 04             	mov    0x4(%eax),%eax
f01311aa:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01311af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311b2:	8b 40 04             	mov    0x4(%eax),%eax
f01311b5:	85 c0                	test   %eax,%eax
f01311b7:	74 0f                	je     f01311c8 <alloc_block_BF+0x92>
f01311b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311bc:	8b 40 04             	mov    0x4(%eax),%eax
f01311bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01311c2:	8b 12                	mov    (%edx),%edx
f01311c4:	89 10                	mov    %edx,(%eax)
f01311c6:	eb 0a                	jmp    f01311d2 <alloc_block_BF+0x9c>
f01311c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311cb:	8b 00                	mov    (%eax),%eax
f01311cd:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01311d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01311db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311de:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01311e5:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f01311ea:	48                   	dec    %eax
f01311eb:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			   return currentMemBlock;
f01311f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311f3:	e9 4d 01 00 00       	jmp    f0131345 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f01311f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311fb:	8b 40 0c             	mov    0xc(%eax),%eax
f01311fe:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131201:	76 24                	jbe    f0131227 <alloc_block_BF+0xf1>
f0131203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131206:	8b 40 0c             	mov    0xc(%eax),%eax
f0131209:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013120c:	73 19                	jae    f0131227 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f013120e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131215:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131218:	8b 40 0c             	mov    0xc(%eax),%eax
f013121b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f013121e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131221:	8b 40 08             	mov    0x8(%eax),%eax
f0131224:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131227:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013122c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013122f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131233:	74 07                	je     f013123c <alloc_block_BF+0x106>
f0131235:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131238:	8b 00                	mov    (%eax),%eax
f013123a:	eb 05                	jmp    f0131241 <alloc_block_BF+0x10b>
f013123c:	b8 00 00 00 00       	mov    $0x0,%eax
f0131241:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0131246:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f013124b:	85 c0                	test   %eax,%eax
f013124d:	0f 85 fd fe ff ff    	jne    f0131150 <alloc_block_BF+0x1a>
f0131253:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131257:	0f 85 f3 fe ff ff    	jne    f0131150 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f013125d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131261:	0f 84 d9 00 00 00    	je     f0131340 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131267:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013126c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f013126f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131272:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131275:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131278:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013127b:	8b 55 08             	mov    0x8(%ebp),%edx
f013127e:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131281:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131285:	75 17                	jne    f013129e <alloc_block_BF+0x168>
f0131287:	83 ec 04             	sub    $0x4,%esp
f013128a:	68 50 c4 13 f0       	push   $0xf013c450
f013128f:	68 c7 00 00 00       	push   $0xc7
f0131294:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131299:	e8 08 ef fc ff       	call   f01001a6 <_panic>
f013129e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312a1:	8b 00                	mov    (%eax),%eax
f01312a3:	85 c0                	test   %eax,%eax
f01312a5:	74 10                	je     f01312b7 <alloc_block_BF+0x181>
f01312a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312aa:	8b 00                	mov    (%eax),%eax
f01312ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01312af:	8b 52 04             	mov    0x4(%edx),%edx
f01312b2:	89 50 04             	mov    %edx,0x4(%eax)
f01312b5:	eb 0b                	jmp    f01312c2 <alloc_block_BF+0x18c>
f01312b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312ba:	8b 40 04             	mov    0x4(%eax),%eax
f01312bd:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f01312c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312c5:	8b 40 04             	mov    0x4(%eax),%eax
f01312c8:	85 c0                	test   %eax,%eax
f01312ca:	74 0f                	je     f01312db <alloc_block_BF+0x1a5>
f01312cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312cf:	8b 40 04             	mov    0x4(%eax),%eax
f01312d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01312d5:	8b 12                	mov    (%edx),%edx
f01312d7:	89 10                	mov    %edx,(%eax)
f01312d9:	eb 0a                	jmp    f01312e5 <alloc_block_BF+0x1af>
f01312db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312de:	8b 00                	mov    (%eax),%eax
f01312e0:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01312e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01312ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01312f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01312f8:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01312fd:	48                   	dec    %eax
f01312fe:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131303:	83 ec 08             	sub    $0x8,%esp
f0131306:	ff 75 ec             	pushl  -0x14(%ebp)
f0131309:	68 c0 74 6e f0       	push   $0xf06e74c0
f013130e:	e8 71 f9 ff ff       	call   f0130c84 <find_block>
f0131313:	83 c4 10             	add    $0x10,%esp
f0131316:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131319:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013131c:	8b 50 08             	mov    0x8(%eax),%edx
f013131f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131322:	01 c2                	add    %eax,%edx
f0131324:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131327:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f013132a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013132d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131330:	2b 45 08             	sub    0x8(%ebp),%eax
f0131333:	89 c2                	mov    %eax,%edx
f0131335:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131338:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f013133b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013133e:	eb 05                	jmp    f0131345 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131340:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131345:	c9                   	leave  
f0131346:	c3                   	ret    

f0131347 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131347:	55                   	push   %ebp
f0131348:	89 e5                	mov    %esp,%ebp
f013134a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f013134d:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f0131352:	85 c0                	test   %eax,%eax
f0131354:	0f 85 de 01 00 00    	jne    f0131538 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f013135a:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013135f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131362:	e9 9e 01 00 00       	jmp    f0131505 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013136a:	8b 40 0c             	mov    0xc(%eax),%eax
f013136d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131370:	0f 82 87 01 00 00    	jb     f01314fd <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131376:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131379:	8b 40 0c             	mov    0xc(%eax),%eax
f013137c:	3b 45 08             	cmp    0x8(%ebp),%eax
f013137f:	0f 85 95 00 00 00    	jne    f013141a <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131389:	75 17                	jne    f01313a2 <alloc_block_NF+0x5b>
f013138b:	83 ec 04             	sub    $0x4,%esp
f013138e:	68 50 c4 13 f0       	push   $0xf013c450
f0131393:	68 e0 00 00 00       	push   $0xe0
f0131398:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013139d:	e8 04 ee fc ff       	call   f01001a6 <_panic>
f01313a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313a5:	8b 00                	mov    (%eax),%eax
f01313a7:	85 c0                	test   %eax,%eax
f01313a9:	74 10                	je     f01313bb <alloc_block_NF+0x74>
f01313ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313ae:	8b 00                	mov    (%eax),%eax
f01313b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01313b3:	8b 52 04             	mov    0x4(%edx),%edx
f01313b6:	89 50 04             	mov    %edx,0x4(%eax)
f01313b9:	eb 0b                	jmp    f01313c6 <alloc_block_NF+0x7f>
f01313bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313be:	8b 40 04             	mov    0x4(%eax),%eax
f01313c1:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01313c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313c9:	8b 40 04             	mov    0x4(%eax),%eax
f01313cc:	85 c0                	test   %eax,%eax
f01313ce:	74 0f                	je     f01313df <alloc_block_NF+0x98>
f01313d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313d3:	8b 40 04             	mov    0x4(%eax),%eax
f01313d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01313d9:	8b 12                	mov    (%edx),%edx
f01313db:	89 10                	mov    %edx,(%eax)
f01313dd:	eb 0a                	jmp    f01313e9 <alloc_block_NF+0xa2>
f01313df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313e2:	8b 00                	mov    (%eax),%eax
f01313e4:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01313e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01313f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313f5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01313fc:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131401:	48                   	dec    %eax
f0131402:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
				   svaOfNF = point->sva;
f0131407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013140a:	8b 40 08             	mov    0x8(%eax),%eax
f013140d:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
				   return  point;
f0131412:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131415:	e9 f8 04 00 00       	jmp    f0131912 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f013141a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013141d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131420:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131423:	0f 86 d4 00 00 00    	jbe    f01314fd <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131429:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013142e:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131431:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131434:	8b 50 08             	mov    0x8(%eax),%edx
f0131437:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013143a:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f013143d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131440:	8b 55 08             	mov    0x8(%ebp),%edx
f0131443:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131446:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013144a:	75 17                	jne    f0131463 <alloc_block_NF+0x11c>
f013144c:	83 ec 04             	sub    $0x4,%esp
f013144f:	68 50 c4 13 f0       	push   $0xf013c450
f0131454:	68 e9 00 00 00       	push   $0xe9
f0131459:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013145e:	e8 43 ed fc ff       	call   f01001a6 <_panic>
f0131463:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131466:	8b 00                	mov    (%eax),%eax
f0131468:	85 c0                	test   %eax,%eax
f013146a:	74 10                	je     f013147c <alloc_block_NF+0x135>
f013146c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013146f:	8b 00                	mov    (%eax),%eax
f0131471:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131474:	8b 52 04             	mov    0x4(%edx),%edx
f0131477:	89 50 04             	mov    %edx,0x4(%eax)
f013147a:	eb 0b                	jmp    f0131487 <alloc_block_NF+0x140>
f013147c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013147f:	8b 40 04             	mov    0x4(%eax),%eax
f0131482:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131487:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013148a:	8b 40 04             	mov    0x4(%eax),%eax
f013148d:	85 c0                	test   %eax,%eax
f013148f:	74 0f                	je     f01314a0 <alloc_block_NF+0x159>
f0131491:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131494:	8b 40 04             	mov    0x4(%eax),%eax
f0131497:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013149a:	8b 12                	mov    (%edx),%edx
f013149c:	89 10                	mov    %edx,(%eax)
f013149e:	eb 0a                	jmp    f01314aa <alloc_block_NF+0x163>
f01314a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314a3:	8b 00                	mov    (%eax),%eax
f01314a5:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f01314aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01314b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314b6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01314bd:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01314c2:	48                   	dec    %eax
f01314c3:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
				   svaOfNF = ReturnedBlock->sva;
f01314c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314cb:	8b 40 08             	mov    0x8(%eax),%eax
f01314ce:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
				   point->sva += size;
f01314d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314d6:	8b 50 08             	mov    0x8(%eax),%edx
f01314d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01314dc:	01 c2                	add    %eax,%edx
f01314de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314e1:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f01314e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314e7:	8b 40 0c             	mov    0xc(%eax),%eax
f01314ea:	2b 45 08             	sub    0x8(%ebp),%eax
f01314ed:	89 c2                	mov    %eax,%edx
f01314ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314f2:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01314f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01314f8:	e9 15 04 00 00       	jmp    f0131912 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01314fd:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131502:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131509:	74 07                	je     f0131512 <alloc_block_NF+0x1cb>
f013150b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013150e:	8b 00                	mov    (%eax),%eax
f0131510:	eb 05                	jmp    f0131517 <alloc_block_NF+0x1d0>
f0131512:	b8 00 00 00 00       	mov    $0x0,%eax
f0131517:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f013151c:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131521:	85 c0                	test   %eax,%eax
f0131523:	0f 85 3e fe ff ff    	jne    f0131367 <alloc_block_NF+0x20>
f0131529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013152d:	0f 85 34 fe ff ff    	jne    f0131367 <alloc_block_NF+0x20>
f0131533:	e9 d5 03 00 00       	jmp    f013190d <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131538:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013153d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131540:	e9 b1 01 00 00       	jmp    f01316f6 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f0131545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131548:	8b 50 08             	mov    0x8(%eax),%edx
f013154b:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f0131550:	39 c2                	cmp    %eax,%edx
f0131552:	0f 82 96 01 00 00    	jb     f01316ee <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0131558:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013155b:	8b 40 0c             	mov    0xc(%eax),%eax
f013155e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131561:	0f 82 87 01 00 00    	jb     f01316ee <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0131567:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013156a:	8b 40 0c             	mov    0xc(%eax),%eax
f013156d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131570:	0f 85 95 00 00 00    	jne    f013160b <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131576:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013157a:	75 17                	jne    f0131593 <alloc_block_NF+0x24c>
f013157c:	83 ec 04             	sub    $0x4,%esp
f013157f:	68 50 c4 13 f0       	push   $0xf013c450
f0131584:	68 fc 00 00 00       	push   $0xfc
f0131589:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013158e:	e8 13 ec fc ff       	call   f01001a6 <_panic>
f0131593:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131596:	8b 00                	mov    (%eax),%eax
f0131598:	85 c0                	test   %eax,%eax
f013159a:	74 10                	je     f01315ac <alloc_block_NF+0x265>
f013159c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013159f:	8b 00                	mov    (%eax),%eax
f01315a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315a4:	8b 52 04             	mov    0x4(%edx),%edx
f01315a7:	89 50 04             	mov    %edx,0x4(%eax)
f01315aa:	eb 0b                	jmp    f01315b7 <alloc_block_NF+0x270>
f01315ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315af:	8b 40 04             	mov    0x4(%eax),%eax
f01315b2:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01315b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315ba:	8b 40 04             	mov    0x4(%eax),%eax
f01315bd:	85 c0                	test   %eax,%eax
f01315bf:	74 0f                	je     f01315d0 <alloc_block_NF+0x289>
f01315c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315c4:	8b 40 04             	mov    0x4(%eax),%eax
f01315c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315ca:	8b 12                	mov    (%edx),%edx
f01315cc:	89 10                	mov    %edx,(%eax)
f01315ce:	eb 0a                	jmp    f01315da <alloc_block_NF+0x293>
f01315d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315d3:	8b 00                	mov    (%eax),%eax
f01315d5:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01315da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01315e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315e6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01315ed:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f01315f2:	48                   	dec    %eax
f01315f3:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					   svaOfNF = point->sva;
f01315f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315fb:	8b 40 08             	mov    0x8(%eax),%eax
f01315fe:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   return  point;
f0131603:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131606:	e9 07 03 00 00       	jmp    f0131912 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f013160b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013160e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131611:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131614:	0f 86 d4 00 00 00    	jbe    f01316ee <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f013161a:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013161f:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f0131622:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131625:	8b 50 08             	mov    0x8(%eax),%edx
f0131628:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013162b:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013162e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131631:	8b 55 08             	mov    0x8(%ebp),%edx
f0131634:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131637:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013163b:	75 17                	jne    f0131654 <alloc_block_NF+0x30d>
f013163d:	83 ec 04             	sub    $0x4,%esp
f0131640:	68 50 c4 13 f0       	push   $0xf013c450
f0131645:	68 04 01 00 00       	push   $0x104
f013164a:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013164f:	e8 52 eb fc ff       	call   f01001a6 <_panic>
f0131654:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131657:	8b 00                	mov    (%eax),%eax
f0131659:	85 c0                	test   %eax,%eax
f013165b:	74 10                	je     f013166d <alloc_block_NF+0x326>
f013165d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131660:	8b 00                	mov    (%eax),%eax
f0131662:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131665:	8b 52 04             	mov    0x4(%edx),%edx
f0131668:	89 50 04             	mov    %edx,0x4(%eax)
f013166b:	eb 0b                	jmp    f0131678 <alloc_block_NF+0x331>
f013166d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131670:	8b 40 04             	mov    0x4(%eax),%eax
f0131673:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131678:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013167b:	8b 40 04             	mov    0x4(%eax),%eax
f013167e:	85 c0                	test   %eax,%eax
f0131680:	74 0f                	je     f0131691 <alloc_block_NF+0x34a>
f0131682:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131685:	8b 40 04             	mov    0x4(%eax),%eax
f0131688:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013168b:	8b 12                	mov    (%edx),%edx
f013168d:	89 10                	mov    %edx,(%eax)
f013168f:	eb 0a                	jmp    f013169b <alloc_block_NF+0x354>
f0131691:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131694:	8b 00                	mov    (%eax),%eax
f0131696:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f013169b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013169e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01316a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01316ae:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f01316b3:	48                   	dec    %eax
f01316b4:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					   svaOfNF = ReturnedBlock->sva;
f01316b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316bc:	8b 40 08             	mov    0x8(%eax),%eax
f01316bf:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   point->sva += size;
f01316c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316c7:	8b 50 08             	mov    0x8(%eax),%edx
f01316ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01316cd:	01 c2                	add    %eax,%edx
f01316cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316d2:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f01316d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316d8:	8b 40 0c             	mov    0xc(%eax),%eax
f01316db:	2b 45 08             	sub    0x8(%ebp),%eax
f01316de:	89 c2                	mov    %eax,%edx
f01316e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e3:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01316e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01316e9:	e9 24 02 00 00       	jmp    f0131912 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01316ee:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f01316f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01316fa:	74 07                	je     f0131703 <alloc_block_NF+0x3bc>
f01316fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316ff:	8b 00                	mov    (%eax),%eax
f0131701:	eb 05                	jmp    f0131708 <alloc_block_NF+0x3c1>
f0131703:	b8 00 00 00 00       	mov    $0x0,%eax
f0131708:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f013170d:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0131712:	85 c0                	test   %eax,%eax
f0131714:	0f 85 2b fe ff ff    	jne    f0131545 <alloc_block_NF+0x1fe>
f013171a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013171e:	0f 85 21 fe ff ff    	jne    f0131545 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0131724:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131729:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013172c:	e9 ae 01 00 00       	jmp    f01318df <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f0131731:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131734:	8b 50 08             	mov    0x8(%eax),%edx
f0131737:	a1 d0 7f 65 f0       	mov    0xf0657fd0,%eax
f013173c:	39 c2                	cmp    %eax,%edx
f013173e:	0f 83 93 01 00 00    	jae    f01318d7 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f0131744:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131747:	8b 40 0c             	mov    0xc(%eax),%eax
f013174a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013174d:	0f 82 84 01 00 00    	jb     f01318d7 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0131753:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131756:	8b 40 0c             	mov    0xc(%eax),%eax
f0131759:	3b 45 08             	cmp    0x8(%ebp),%eax
f013175c:	0f 85 95 00 00 00    	jne    f01317f7 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0131762:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131766:	75 17                	jne    f013177f <alloc_block_NF+0x438>
f0131768:	83 ec 04             	sub    $0x4,%esp
f013176b:	68 50 c4 13 f0       	push   $0xf013c450
f0131770:	68 14 01 00 00       	push   $0x114
f0131775:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013177a:	e8 27 ea fc ff       	call   f01001a6 <_panic>
f013177f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131782:	8b 00                	mov    (%eax),%eax
f0131784:	85 c0                	test   %eax,%eax
f0131786:	74 10                	je     f0131798 <alloc_block_NF+0x451>
f0131788:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013178b:	8b 00                	mov    (%eax),%eax
f013178d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131790:	8b 52 04             	mov    0x4(%edx),%edx
f0131793:	89 50 04             	mov    %edx,0x4(%eax)
f0131796:	eb 0b                	jmp    f01317a3 <alloc_block_NF+0x45c>
f0131798:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013179b:	8b 40 04             	mov    0x4(%eax),%eax
f013179e:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f01317a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317a6:	8b 40 04             	mov    0x4(%eax),%eax
f01317a9:	85 c0                	test   %eax,%eax
f01317ab:	74 0f                	je     f01317bc <alloc_block_NF+0x475>
f01317ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317b0:	8b 40 04             	mov    0x4(%eax),%eax
f01317b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317b6:	8b 12                	mov    (%edx),%edx
f01317b8:	89 10                	mov    %edx,(%eax)
f01317ba:	eb 0a                	jmp    f01317c6 <alloc_block_NF+0x47f>
f01317bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317bf:	8b 00                	mov    (%eax),%eax
f01317c1:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f01317c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01317cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01317d9:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f01317de:	48                   	dec    %eax
f01317df:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					   svaOfNF = point->sva;
f01317e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317e7:	8b 40 08             	mov    0x8(%eax),%eax
f01317ea:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   return  point;
f01317ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317f2:	e9 1b 01 00 00       	jmp    f0131912 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01317f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317fa:	8b 40 0c             	mov    0xc(%eax),%eax
f01317fd:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131800:	0f 86 d1 00 00 00    	jbe    f01318d7 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131806:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f013180b:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f013180e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131811:	8b 50 08             	mov    0x8(%eax),%edx
f0131814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131817:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f013181a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013181d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131820:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131827:	75 17                	jne    f0131840 <alloc_block_NF+0x4f9>
f0131829:	83 ec 04             	sub    $0x4,%esp
f013182c:	68 50 c4 13 f0       	push   $0xf013c450
f0131831:	68 1c 01 00 00       	push   $0x11c
f0131836:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013183b:	e8 66 e9 fc ff       	call   f01001a6 <_panic>
f0131840:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131843:	8b 00                	mov    (%eax),%eax
f0131845:	85 c0                	test   %eax,%eax
f0131847:	74 10                	je     f0131859 <alloc_block_NF+0x512>
f0131849:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013184c:	8b 00                	mov    (%eax),%eax
f013184e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131851:	8b 52 04             	mov    0x4(%edx),%edx
f0131854:	89 50 04             	mov    %edx,0x4(%eax)
f0131857:	eb 0b                	jmp    f0131864 <alloc_block_NF+0x51d>
f0131859:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013185c:	8b 40 04             	mov    0x4(%eax),%eax
f013185f:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131864:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131867:	8b 40 04             	mov    0x4(%eax),%eax
f013186a:	85 c0                	test   %eax,%eax
f013186c:	74 0f                	je     f013187d <alloc_block_NF+0x536>
f013186e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131871:	8b 40 04             	mov    0x4(%eax),%eax
f0131874:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131877:	8b 12                	mov    (%edx),%edx
f0131879:	89 10                	mov    %edx,(%eax)
f013187b:	eb 0a                	jmp    f0131887 <alloc_block_NF+0x540>
f013187d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131880:	8b 00                	mov    (%eax),%eax
f0131882:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013188a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131893:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013189a:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f013189f:	48                   	dec    %eax
f01318a0:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					   svaOfNF = ReturnedBlock->sva;
f01318a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318a8:	8b 40 08             	mov    0x8(%eax),%eax
f01318ab:	a3 d0 7f 65 f0       	mov    %eax,0xf0657fd0
					   point->sva += size;
f01318b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318b3:	8b 50 08             	mov    0x8(%eax),%edx
f01318b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01318b9:	01 c2                	add    %eax,%edx
f01318bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318be:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f01318c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318c4:	8b 40 0c             	mov    0xc(%eax),%eax
f01318c7:	2b 45 08             	sub    0x8(%ebp),%eax
f01318ca:	89 c2                	mov    %eax,%edx
f01318cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318cf:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f01318d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318d5:	eb 3b                	jmp    f0131912 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01318d7:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f01318dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01318df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318e3:	74 07                	je     f01318ec <alloc_block_NF+0x5a5>
f01318e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e8:	8b 00                	mov    (%eax),%eax
f01318ea:	eb 05                	jmp    f01318f1 <alloc_block_NF+0x5aa>
f01318ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01318f1:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f01318f6:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f01318fb:	85 c0                	test   %eax,%eax
f01318fd:	0f 85 2e fe ff ff    	jne    f0131731 <alloc_block_NF+0x3ea>
f0131903:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131907:	0f 85 24 fe ff ff    	jne    f0131731 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f013190d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131912:	c9                   	leave  
f0131913:	c3                   	ret    

f0131914 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0131914:	55                   	push   %ebp
f0131915:	89 e5                	mov    %esp,%ebp
f0131917:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f013191a:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013191f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f0131922:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f0131927:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f013192a:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013192f:	85 c0                	test   %eax,%eax
f0131931:	74 14                	je     f0131947 <insert_sorted_with_merge_freeList+0x33>
f0131933:	8b 45 08             	mov    0x8(%ebp),%eax
f0131936:	8b 50 08             	mov    0x8(%eax),%edx
f0131939:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013193c:	8b 40 08             	mov    0x8(%eax),%eax
f013193f:	39 c2                	cmp    %eax,%edx
f0131941:	0f 87 9b 01 00 00    	ja     f0131ae2 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0131947:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013194b:	75 17                	jne    f0131964 <insert_sorted_with_merge_freeList+0x50>
f013194d:	83 ec 04             	sub    $0x4,%esp
f0131950:	68 84 c3 13 f0       	push   $0xf013c384
f0131955:	68 38 01 00 00       	push   $0x138
f013195a:	68 a7 c3 13 f0       	push   $0xf013c3a7
f013195f:	e8 42 e8 fc ff       	call   f01001a6 <_panic>
f0131964:	8b 15 c0 74 6e f0    	mov    0xf06e74c0,%edx
f013196a:	8b 45 08             	mov    0x8(%ebp),%eax
f013196d:	89 10                	mov    %edx,(%eax)
f013196f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131972:	8b 00                	mov    (%eax),%eax
f0131974:	85 c0                	test   %eax,%eax
f0131976:	74 0d                	je     f0131985 <insert_sorted_with_merge_freeList+0x71>
f0131978:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f013197d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131980:	89 50 04             	mov    %edx,0x4(%eax)
f0131983:	eb 08                	jmp    f013198d <insert_sorted_with_merge_freeList+0x79>
f0131985:	8b 45 08             	mov    0x8(%ebp),%eax
f0131988:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f013198d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131990:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131995:	8b 45 08             	mov    0x8(%ebp),%eax
f0131998:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013199f:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f01319a4:	40                   	inc    %eax
f01319a5:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f01319aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319ae:	0f 84 a8 06 00 00    	je     f013205c <insert_sorted_with_merge_freeList+0x748>
f01319b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b7:	8b 50 08             	mov    0x8(%eax),%edx
f01319ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01319bd:	8b 40 0c             	mov    0xc(%eax),%eax
f01319c0:	01 c2                	add    %eax,%edx
f01319c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319c5:	8b 40 08             	mov    0x8(%eax),%eax
f01319c8:	39 c2                	cmp    %eax,%edx
f01319ca:	0f 85 8c 06 00 00    	jne    f013205c <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f01319d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01319d3:	8b 50 0c             	mov    0xc(%eax),%edx
f01319d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319d9:	8b 40 0c             	mov    0xc(%eax),%eax
f01319dc:	01 c2                	add    %eax,%edx
f01319de:	8b 45 08             	mov    0x8(%ebp),%eax
f01319e1:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f01319e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319e8:	75 17                	jne    f0131a01 <insert_sorted_with_merge_freeList+0xed>
f01319ea:	83 ec 04             	sub    $0x4,%esp
f01319ed:	68 50 c4 13 f0       	push   $0xf013c450
f01319f2:	68 3c 01 00 00       	push   $0x13c
f01319f7:	68 a7 c3 13 f0       	push   $0xf013c3a7
f01319fc:	e8 a5 e7 fc ff       	call   f01001a6 <_panic>
f0131a01:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a04:	8b 00                	mov    (%eax),%eax
f0131a06:	85 c0                	test   %eax,%eax
f0131a08:	74 10                	je     f0131a1a <insert_sorted_with_merge_freeList+0x106>
f0131a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a0d:	8b 00                	mov    (%eax),%eax
f0131a0f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a12:	8b 52 04             	mov    0x4(%edx),%edx
f0131a15:	89 50 04             	mov    %edx,0x4(%eax)
f0131a18:	eb 0b                	jmp    f0131a25 <insert_sorted_with_merge_freeList+0x111>
f0131a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a1d:	8b 40 04             	mov    0x4(%eax),%eax
f0131a20:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a28:	8b 40 04             	mov    0x4(%eax),%eax
f0131a2b:	85 c0                	test   %eax,%eax
f0131a2d:	74 0f                	je     f0131a3e <insert_sorted_with_merge_freeList+0x12a>
f0131a2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a32:	8b 40 04             	mov    0x4(%eax),%eax
f0131a35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131a38:	8b 12                	mov    (%edx),%edx
f0131a3a:	89 10                	mov    %edx,(%eax)
f0131a3c:	eb 0a                	jmp    f0131a48 <insert_sorted_with_merge_freeList+0x134>
f0131a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a41:	8b 00                	mov    (%eax),%eax
f0131a43:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131a48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a4b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a54:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131a5b:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131a60:	48                   	dec    %eax
f0131a61:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			head->size = 0;
f0131a66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a69:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0131a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a73:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f0131a7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131a7e:	75 17                	jne    f0131a97 <insert_sorted_with_merge_freeList+0x183>
f0131a80:	83 ec 04             	sub    $0x4,%esp
f0131a83:	68 84 c3 13 f0       	push   $0xf013c384
f0131a88:	68 3f 01 00 00       	push   $0x13f
f0131a8d:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131a92:	e8 0f e7 fc ff       	call   f01001a6 <_panic>
f0131a97:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131a9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131aa0:	89 10                	mov    %edx,(%eax)
f0131aa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131aa5:	8b 00                	mov    (%eax),%eax
f0131aa7:	85 c0                	test   %eax,%eax
f0131aa9:	74 0d                	je     f0131ab8 <insert_sorted_with_merge_freeList+0x1a4>
f0131aab:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131ab0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131ab3:	89 50 04             	mov    %edx,0x4(%eax)
f0131ab6:	eb 08                	jmp    f0131ac0 <insert_sorted_with_merge_freeList+0x1ac>
f0131ab8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131abb:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ac3:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131ac8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131acb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ad2:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131ad7:	40                   	inc    %eax
f0131ad8:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0131add:	e9 7a 05 00 00       	jmp    f013205c <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0131ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ae5:	8b 50 08             	mov    0x8(%eax),%edx
f0131ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131aeb:	8b 40 08             	mov    0x8(%eax),%eax
f0131aee:	39 c2                	cmp    %eax,%edx
f0131af0:	0f 82 14 01 00 00    	jb     f0131c0a <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f0131af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131af9:	8b 50 08             	mov    0x8(%eax),%edx
f0131afc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131aff:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b02:	01 c2                	add    %eax,%edx
f0131b04:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b07:	8b 40 08             	mov    0x8(%eax),%eax
f0131b0a:	39 c2                	cmp    %eax,%edx
f0131b0c:	0f 85 90 00 00 00    	jne    f0131ba2 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f0131b12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b15:	8b 50 0c             	mov    0xc(%eax),%edx
f0131b18:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b1b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b1e:	01 c2                	add    %eax,%edx
f0131b20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b23:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f0131b26:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b29:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f0131b30:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b33:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0131b3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131b3e:	75 17                	jne    f0131b57 <insert_sorted_with_merge_freeList+0x243>
f0131b40:	83 ec 04             	sub    $0x4,%esp
f0131b43:	68 84 c3 13 f0       	push   $0xf013c384
f0131b48:	68 49 01 00 00       	push   $0x149
f0131b4d:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131b52:	e8 4f e6 fc ff       	call   f01001a6 <_panic>
f0131b57:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131b5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b60:	89 10                	mov    %edx,(%eax)
f0131b62:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b65:	8b 00                	mov    (%eax),%eax
f0131b67:	85 c0                	test   %eax,%eax
f0131b69:	74 0d                	je     f0131b78 <insert_sorted_with_merge_freeList+0x264>
f0131b6b:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b73:	89 50 04             	mov    %edx,0x4(%eax)
f0131b76:	eb 08                	jmp    f0131b80 <insert_sorted_with_merge_freeList+0x26c>
f0131b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b7b:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131b80:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b83:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131b88:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b8b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131b92:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131b97:	40                   	inc    %eax
f0131b98:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131b9d:	e9 bb 04 00 00       	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0131ba2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ba6:	75 17                	jne    f0131bbf <insert_sorted_with_merge_freeList+0x2ab>
f0131ba8:	83 ec 04             	sub    $0x4,%esp
f0131bab:	68 f8 c3 13 f0       	push   $0xf013c3f8
f0131bb0:	68 4c 01 00 00       	push   $0x14c
f0131bb5:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131bba:	e8 e7 e5 fc ff       	call   f01001a6 <_panic>
f0131bbf:	8b 15 c4 74 6e f0    	mov    0xf06e74c4,%edx
f0131bc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bc8:	89 50 04             	mov    %edx,0x4(%eax)
f0131bcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bce:	8b 40 04             	mov    0x4(%eax),%eax
f0131bd1:	85 c0                	test   %eax,%eax
f0131bd3:	74 0c                	je     f0131be1 <insert_sorted_with_merge_freeList+0x2cd>
f0131bd5:	a1 c4 74 6e f0       	mov    0xf06e74c4,%eax
f0131bda:	8b 55 08             	mov    0x8(%ebp),%edx
f0131bdd:	89 10                	mov    %edx,(%eax)
f0131bdf:	eb 08                	jmp    f0131be9 <insert_sorted_with_merge_freeList+0x2d5>
f0131be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be4:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bec:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131bf1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bf4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131bfa:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131bff:	40                   	inc    %eax
f0131c00:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0131c05:	e9 53 04 00 00       	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0131c0a:	a1 c0 74 6e f0       	mov    0xf06e74c0,%eax
f0131c0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131c12:	e9 15 04 00 00       	jmp    f013202c <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f0131c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c1a:	8b 00                	mov    (%eax),%eax
f0131c1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f0131c1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c22:	8b 50 08             	mov    0x8(%eax),%edx
f0131c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c28:	8b 40 08             	mov    0x8(%eax),%eax
f0131c2b:	39 c2                	cmp    %eax,%edx
f0131c2d:	0f 86 f1 03 00 00    	jbe    f0132024 <insert_sorted_with_merge_freeList+0x710>
f0131c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c36:	8b 50 08             	mov    0x8(%eax),%edx
f0131c39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131c3c:	8b 40 08             	mov    0x8(%eax),%eax
f0131c3f:	39 c2                	cmp    %eax,%edx
f0131c41:	0f 83 dd 03 00 00    	jae    f0132024 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f0131c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c4a:	8b 50 08             	mov    0x8(%eax),%edx
f0131c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c50:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c53:	01 c2                	add    %eax,%edx
f0131c55:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c58:	8b 40 08             	mov    0x8(%eax),%eax
f0131c5b:	39 c2                	cmp    %eax,%edx
f0131c5d:	0f 85 b9 01 00 00    	jne    f0131e1c <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0131c63:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c66:	8b 50 08             	mov    0x8(%eax),%edx
f0131c69:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c6f:	01 c2                	add    %eax,%edx
f0131c71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131c74:	8b 40 08             	mov    0x8(%eax),%eax
f0131c77:	39 c2                	cmp    %eax,%edx
f0131c79:	0f 85 0d 01 00 00    	jne    f0131d8c <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0131c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c82:	8b 50 0c             	mov    0xc(%eax),%edx
f0131c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131c88:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c8b:	01 c2                	add    %eax,%edx
f0131c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c90:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0131c93:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131c97:	75 17                	jne    f0131cb0 <insert_sorted_with_merge_freeList+0x39c>
f0131c99:	83 ec 04             	sub    $0x4,%esp
f0131c9c:	68 50 c4 13 f0       	push   $0xf013c450
f0131ca1:	68 5c 01 00 00       	push   $0x15c
f0131ca6:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131cab:	e8 f6 e4 fc ff       	call   f01001a6 <_panic>
f0131cb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cb3:	8b 00                	mov    (%eax),%eax
f0131cb5:	85 c0                	test   %eax,%eax
f0131cb7:	74 10                	je     f0131cc9 <insert_sorted_with_merge_freeList+0x3b5>
f0131cb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cbc:	8b 00                	mov    (%eax),%eax
f0131cbe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131cc1:	8b 52 04             	mov    0x4(%edx),%edx
f0131cc4:	89 50 04             	mov    %edx,0x4(%eax)
f0131cc7:	eb 0b                	jmp    f0131cd4 <insert_sorted_with_merge_freeList+0x3c0>
f0131cc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ccc:	8b 40 04             	mov    0x4(%eax),%eax
f0131ccf:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131cd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cd7:	8b 40 04             	mov    0x4(%eax),%eax
f0131cda:	85 c0                	test   %eax,%eax
f0131cdc:	74 0f                	je     f0131ced <insert_sorted_with_merge_freeList+0x3d9>
f0131cde:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ce1:	8b 40 04             	mov    0x4(%eax),%eax
f0131ce4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131ce7:	8b 12                	mov    (%edx),%edx
f0131ce9:	89 10                	mov    %edx,(%eax)
f0131ceb:	eb 0a                	jmp    f0131cf7 <insert_sorted_with_merge_freeList+0x3e3>
f0131ced:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cf0:	8b 00                	mov    (%eax),%eax
f0131cf2:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131cf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131cfa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d03:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d0a:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131d0f:	48                   	dec    %eax
f0131d10:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
						nextBlock->sva = 0;
f0131d15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d18:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f0131d1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d22:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0131d29:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131d2d:	75 17                	jne    f0131d46 <insert_sorted_with_merge_freeList+0x432>
f0131d2f:	83 ec 04             	sub    $0x4,%esp
f0131d32:	68 84 c3 13 f0       	push   $0xf013c384
f0131d37:	68 5f 01 00 00       	push   $0x15f
f0131d3c:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131d41:	e8 60 e4 fc ff       	call   f01001a6 <_panic>
f0131d46:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131d4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d4f:	89 10                	mov    %edx,(%eax)
f0131d51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d54:	8b 00                	mov    (%eax),%eax
f0131d56:	85 c0                	test   %eax,%eax
f0131d58:	74 0d                	je     f0131d67 <insert_sorted_with_merge_freeList+0x453>
f0131d5a:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131d5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131d62:	89 50 04             	mov    %edx,0x4(%eax)
f0131d65:	eb 08                	jmp    f0131d6f <insert_sorted_with_merge_freeList+0x45b>
f0131d67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d6a:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131d6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d72:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131d77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131d7a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d81:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131d86:	40                   	inc    %eax
f0131d87:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					}
					currentBlock->size += blockToInsert->size;
f0131d8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d8f:	8b 50 0c             	mov    0xc(%eax),%edx
f0131d92:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d95:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d98:	01 c2                	add    %eax,%edx
f0131d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d9d:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0131da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f0131daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dad:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0131db4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131db8:	75 17                	jne    f0131dd1 <insert_sorted_with_merge_freeList+0x4bd>
f0131dba:	83 ec 04             	sub    $0x4,%esp
f0131dbd:	68 84 c3 13 f0       	push   $0xf013c384
f0131dc2:	68 64 01 00 00       	push   $0x164
f0131dc7:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131dcc:	e8 d5 e3 fc ff       	call   f01001a6 <_panic>
f0131dd1:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131dd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dda:	89 10                	mov    %edx,(%eax)
f0131ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ddf:	8b 00                	mov    (%eax),%eax
f0131de1:	85 c0                	test   %eax,%eax
f0131de3:	74 0d                	je     f0131df2 <insert_sorted_with_merge_freeList+0x4de>
f0131de5:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131dea:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ded:	89 50 04             	mov    %edx,0x4(%eax)
f0131df0:	eb 08                	jmp    f0131dfa <insert_sorted_with_merge_freeList+0x4e6>
f0131df2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131df5:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131dfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dfd:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e05:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e0c:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131e11:	40                   	inc    %eax
f0131e12:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					break;
f0131e17:	e9 41 02 00 00       	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0131e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e1f:	8b 50 08             	mov    0x8(%eax),%edx
f0131e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e25:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e28:	01 c2                	add    %eax,%edx
f0131e2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e2d:	8b 40 08             	mov    0x8(%eax),%eax
f0131e30:	39 c2                	cmp    %eax,%edx
f0131e32:	0f 85 7c 01 00 00    	jne    f0131fb4 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f0131e38:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131e3c:	74 06                	je     f0131e44 <insert_sorted_with_merge_freeList+0x530>
f0131e3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e42:	75 17                	jne    f0131e5b <insert_sorted_with_merge_freeList+0x547>
f0131e44:	83 ec 04             	sub    $0x4,%esp
f0131e47:	68 c0 c3 13 f0       	push   $0xf013c3c0
f0131e4c:	68 69 01 00 00       	push   $0x169
f0131e51:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131e56:	e8 4b e3 fc ff       	call   f01001a6 <_panic>
f0131e5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e5e:	8b 50 04             	mov    0x4(%eax),%edx
f0131e61:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e64:	89 50 04             	mov    %edx,0x4(%eax)
f0131e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e6a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131e6d:	89 10                	mov    %edx,(%eax)
f0131e6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e72:	8b 40 04             	mov    0x4(%eax),%eax
f0131e75:	85 c0                	test   %eax,%eax
f0131e77:	74 0d                	je     f0131e86 <insert_sorted_with_merge_freeList+0x572>
f0131e79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e7c:	8b 40 04             	mov    0x4(%eax),%eax
f0131e7f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e82:	89 10                	mov    %edx,(%eax)
f0131e84:	eb 08                	jmp    f0131e8e <insert_sorted_with_merge_freeList+0x57a>
f0131e86:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e89:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131e8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131e91:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e94:	89 50 04             	mov    %edx,0x4(%eax)
f0131e97:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131e9c:	40                   	inc    %eax
f0131e9d:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					blockToInsert->size += nextBlock->size;
f0131ea2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ea5:	8b 50 0c             	mov    0xc(%eax),%edx
f0131ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131eab:	8b 40 0c             	mov    0xc(%eax),%eax
f0131eae:	01 c2                	add    %eax,%edx
f0131eb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eb3:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0131eb6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131eba:	75 17                	jne    f0131ed3 <insert_sorted_with_merge_freeList+0x5bf>
f0131ebc:	83 ec 04             	sub    $0x4,%esp
f0131ebf:	68 50 c4 13 f0       	push   $0xf013c450
f0131ec4:	68 6b 01 00 00       	push   $0x16b
f0131ec9:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131ece:	e8 d3 e2 fc ff       	call   f01001a6 <_panic>
f0131ed3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131ed6:	8b 00                	mov    (%eax),%eax
f0131ed8:	85 c0                	test   %eax,%eax
f0131eda:	74 10                	je     f0131eec <insert_sorted_with_merge_freeList+0x5d8>
f0131edc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131edf:	8b 00                	mov    (%eax),%eax
f0131ee1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131ee4:	8b 52 04             	mov    0x4(%edx),%edx
f0131ee7:	89 50 04             	mov    %edx,0x4(%eax)
f0131eea:	eb 0b                	jmp    f0131ef7 <insert_sorted_with_merge_freeList+0x5e3>
f0131eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131eef:	8b 40 04             	mov    0x4(%eax),%eax
f0131ef2:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0131ef7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131efa:	8b 40 04             	mov    0x4(%eax),%eax
f0131efd:	85 c0                	test   %eax,%eax
f0131eff:	74 0f                	je     f0131f10 <insert_sorted_with_merge_freeList+0x5fc>
f0131f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f04:	8b 40 04             	mov    0x4(%eax),%eax
f0131f07:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131f0a:	8b 12                	mov    (%edx),%edx
f0131f0c:	89 10                	mov    %edx,(%eax)
f0131f0e:	eb 0a                	jmp    f0131f1a <insert_sorted_with_merge_freeList+0x606>
f0131f10:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f13:	8b 00                	mov    (%eax),%eax
f0131f15:	a3 c0 74 6e f0       	mov    %eax,0xf06e74c0
f0131f1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f26:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131f2d:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f0131f32:	48                   	dec    %eax
f0131f33:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					nextBlock->sva = 0;
f0131f38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0131f42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f45:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0131f4c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131f50:	75 17                	jne    f0131f69 <insert_sorted_with_merge_freeList+0x655>
f0131f52:	83 ec 04             	sub    $0x4,%esp
f0131f55:	68 84 c3 13 f0       	push   $0xf013c384
f0131f5a:	68 6e 01 00 00       	push   $0x16e
f0131f5f:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131f64:	e8 3d e2 fc ff       	call   f01001a6 <_panic>
f0131f69:	8b 15 f4 74 6e f0    	mov    0xf06e74f4,%edx
f0131f6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f72:	89 10                	mov    %edx,(%eax)
f0131f74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f77:	8b 00                	mov    (%eax),%eax
f0131f79:	85 c0                	test   %eax,%eax
f0131f7b:	74 0d                	je     f0131f8a <insert_sorted_with_merge_freeList+0x676>
f0131f7d:	a1 f4 74 6e f0       	mov    0xf06e74f4,%eax
f0131f82:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131f85:	89 50 04             	mov    %edx,0x4(%eax)
f0131f88:	eb 08                	jmp    f0131f92 <insert_sorted_with_merge_freeList+0x67e>
f0131f8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f8d:	a3 f8 74 6e f0       	mov    %eax,0xf06e74f8
f0131f92:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f95:	a3 f4 74 6e f0       	mov    %eax,0xf06e74f4
f0131f9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131f9d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131fa4:	a1 00 75 6e f0       	mov    0xf06e7500,%eax
f0131fa9:	40                   	inc    %eax
f0131faa:	a3 00 75 6e f0       	mov    %eax,0xf06e7500
					break;
f0131faf:	e9 a9 00 00 00       	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0131fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131fb8:	74 06                	je     f0131fc0 <insert_sorted_with_merge_freeList+0x6ac>
f0131fba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131fbe:	75 17                	jne    f0131fd7 <insert_sorted_with_merge_freeList+0x6c3>
f0131fc0:	83 ec 04             	sub    $0x4,%esp
f0131fc3:	68 1c c4 13 f0       	push   $0xf013c41c
f0131fc8:	68 73 01 00 00       	push   $0x173
f0131fcd:	68 a7 c3 13 f0       	push   $0xf013c3a7
f0131fd2:	e8 cf e1 fc ff       	call   f01001a6 <_panic>
f0131fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fda:	8b 10                	mov    (%eax),%edx
f0131fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fdf:	89 10                	mov    %edx,(%eax)
f0131fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe4:	8b 00                	mov    (%eax),%eax
f0131fe6:	85 c0                	test   %eax,%eax
f0131fe8:	74 0b                	je     f0131ff5 <insert_sorted_with_merge_freeList+0x6e1>
f0131fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fed:	8b 00                	mov    (%eax),%eax
f0131fef:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ff2:	89 50 04             	mov    %edx,0x4(%eax)
f0131ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff8:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ffb:	89 10                	mov    %edx,(%eax)
f0131ffd:	8b 45 08             	mov    0x8(%ebp),%eax
f0132000:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132003:	89 50 04             	mov    %edx,0x4(%eax)
f0132006:	8b 45 08             	mov    0x8(%ebp),%eax
f0132009:	8b 00                	mov    (%eax),%eax
f013200b:	85 c0                	test   %eax,%eax
f013200d:	75 08                	jne    f0132017 <insert_sorted_with_merge_freeList+0x703>
f013200f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132012:	a3 c4 74 6e f0       	mov    %eax,0xf06e74c4
f0132017:	a1 cc 74 6e f0       	mov    0xf06e74cc,%eax
f013201c:	40                   	inc    %eax
f013201d:	a3 cc 74 6e f0       	mov    %eax,0xf06e74cc
					break;
f0132022:	eb 39                	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132024:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0132029:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013202c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132030:	74 07                	je     f0132039 <insert_sorted_with_merge_freeList+0x725>
f0132032:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132035:	8b 00                	mov    (%eax),%eax
f0132037:	eb 05                	jmp    f013203e <insert_sorted_with_merge_freeList+0x72a>
f0132039:	b8 00 00 00 00       	mov    $0x0,%eax
f013203e:	a3 c8 74 6e f0       	mov    %eax,0xf06e74c8
f0132043:	a1 c8 74 6e f0       	mov    0xf06e74c8,%eax
f0132048:	85 c0                	test   %eax,%eax
f013204a:	0f 85 c7 fb ff ff    	jne    f0131c17 <insert_sorted_with_merge_freeList+0x303>
f0132050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132054:	0f 85 bd fb ff ff    	jne    f0131c17 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013205a:	eb 01                	jmp    f013205d <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013205c:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013205d:	90                   	nop
f013205e:	c9                   	leave  
f013205f:	c3                   	ret    

f0132060 <__udivdi3>:
f0132060:	55                   	push   %ebp
f0132061:	57                   	push   %edi
f0132062:	56                   	push   %esi
f0132063:	53                   	push   %ebx
f0132064:	83 ec 1c             	sub    $0x1c,%esp
f0132067:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013206b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013206f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132073:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132077:	89 ca                	mov    %ecx,%edx
f0132079:	89 f8                	mov    %edi,%eax
f013207b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013207f:	85 f6                	test   %esi,%esi
f0132081:	75 2d                	jne    f01320b0 <__udivdi3+0x50>
f0132083:	39 cf                	cmp    %ecx,%edi
f0132085:	77 65                	ja     f01320ec <__udivdi3+0x8c>
f0132087:	89 fd                	mov    %edi,%ebp
f0132089:	85 ff                	test   %edi,%edi
f013208b:	75 0b                	jne    f0132098 <__udivdi3+0x38>
f013208d:	b8 01 00 00 00       	mov    $0x1,%eax
f0132092:	31 d2                	xor    %edx,%edx
f0132094:	f7 f7                	div    %edi
f0132096:	89 c5                	mov    %eax,%ebp
f0132098:	31 d2                	xor    %edx,%edx
f013209a:	89 c8                	mov    %ecx,%eax
f013209c:	f7 f5                	div    %ebp
f013209e:	89 c1                	mov    %eax,%ecx
f01320a0:	89 d8                	mov    %ebx,%eax
f01320a2:	f7 f5                	div    %ebp
f01320a4:	89 cf                	mov    %ecx,%edi
f01320a6:	89 fa                	mov    %edi,%edx
f01320a8:	83 c4 1c             	add    $0x1c,%esp
f01320ab:	5b                   	pop    %ebx
f01320ac:	5e                   	pop    %esi
f01320ad:	5f                   	pop    %edi
f01320ae:	5d                   	pop    %ebp
f01320af:	c3                   	ret    
f01320b0:	39 ce                	cmp    %ecx,%esi
f01320b2:	77 28                	ja     f01320dc <__udivdi3+0x7c>
f01320b4:	0f bd fe             	bsr    %esi,%edi
f01320b7:	83 f7 1f             	xor    $0x1f,%edi
f01320ba:	75 40                	jne    f01320fc <__udivdi3+0x9c>
f01320bc:	39 ce                	cmp    %ecx,%esi
f01320be:	72 0a                	jb     f01320ca <__udivdi3+0x6a>
f01320c0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01320c4:	0f 87 9e 00 00 00    	ja     f0132168 <__udivdi3+0x108>
f01320ca:	b8 01 00 00 00       	mov    $0x1,%eax
f01320cf:	89 fa                	mov    %edi,%edx
f01320d1:	83 c4 1c             	add    $0x1c,%esp
f01320d4:	5b                   	pop    %ebx
f01320d5:	5e                   	pop    %esi
f01320d6:	5f                   	pop    %edi
f01320d7:	5d                   	pop    %ebp
f01320d8:	c3                   	ret    
f01320d9:	8d 76 00             	lea    0x0(%esi),%esi
f01320dc:	31 ff                	xor    %edi,%edi
f01320de:	31 c0                	xor    %eax,%eax
f01320e0:	89 fa                	mov    %edi,%edx
f01320e2:	83 c4 1c             	add    $0x1c,%esp
f01320e5:	5b                   	pop    %ebx
f01320e6:	5e                   	pop    %esi
f01320e7:	5f                   	pop    %edi
f01320e8:	5d                   	pop    %ebp
f01320e9:	c3                   	ret    
f01320ea:	66 90                	xchg   %ax,%ax
f01320ec:	89 d8                	mov    %ebx,%eax
f01320ee:	f7 f7                	div    %edi
f01320f0:	31 ff                	xor    %edi,%edi
f01320f2:	89 fa                	mov    %edi,%edx
f01320f4:	83 c4 1c             	add    $0x1c,%esp
f01320f7:	5b                   	pop    %ebx
f01320f8:	5e                   	pop    %esi
f01320f9:	5f                   	pop    %edi
f01320fa:	5d                   	pop    %ebp
f01320fb:	c3                   	ret    
f01320fc:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132101:	89 eb                	mov    %ebp,%ebx
f0132103:	29 fb                	sub    %edi,%ebx
f0132105:	89 f9                	mov    %edi,%ecx
f0132107:	d3 e6                	shl    %cl,%esi
f0132109:	89 c5                	mov    %eax,%ebp
f013210b:	88 d9                	mov    %bl,%cl
f013210d:	d3 ed                	shr    %cl,%ebp
f013210f:	89 e9                	mov    %ebp,%ecx
f0132111:	09 f1                	or     %esi,%ecx
f0132113:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132117:	89 f9                	mov    %edi,%ecx
f0132119:	d3 e0                	shl    %cl,%eax
f013211b:	89 c5                	mov    %eax,%ebp
f013211d:	89 d6                	mov    %edx,%esi
f013211f:	88 d9                	mov    %bl,%cl
f0132121:	d3 ee                	shr    %cl,%esi
f0132123:	89 f9                	mov    %edi,%ecx
f0132125:	d3 e2                	shl    %cl,%edx
f0132127:	8b 44 24 08          	mov    0x8(%esp),%eax
f013212b:	88 d9                	mov    %bl,%cl
f013212d:	d3 e8                	shr    %cl,%eax
f013212f:	09 c2                	or     %eax,%edx
f0132131:	89 d0                	mov    %edx,%eax
f0132133:	89 f2                	mov    %esi,%edx
f0132135:	f7 74 24 0c          	divl   0xc(%esp)
f0132139:	89 d6                	mov    %edx,%esi
f013213b:	89 c3                	mov    %eax,%ebx
f013213d:	f7 e5                	mul    %ebp
f013213f:	39 d6                	cmp    %edx,%esi
f0132141:	72 19                	jb     f013215c <__udivdi3+0xfc>
f0132143:	74 0b                	je     f0132150 <__udivdi3+0xf0>
f0132145:	89 d8                	mov    %ebx,%eax
f0132147:	31 ff                	xor    %edi,%edi
f0132149:	e9 58 ff ff ff       	jmp    f01320a6 <__udivdi3+0x46>
f013214e:	66 90                	xchg   %ax,%ax
f0132150:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132154:	89 f9                	mov    %edi,%ecx
f0132156:	d3 e2                	shl    %cl,%edx
f0132158:	39 c2                	cmp    %eax,%edx
f013215a:	73 e9                	jae    f0132145 <__udivdi3+0xe5>
f013215c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013215f:	31 ff                	xor    %edi,%edi
f0132161:	e9 40 ff ff ff       	jmp    f01320a6 <__udivdi3+0x46>
f0132166:	66 90                	xchg   %ax,%ax
f0132168:	31 c0                	xor    %eax,%eax
f013216a:	e9 37 ff ff ff       	jmp    f01320a6 <__udivdi3+0x46>
f013216f:	90                   	nop

f0132170 <__umoddi3>:
f0132170:	55                   	push   %ebp
f0132171:	57                   	push   %edi
f0132172:	56                   	push   %esi
f0132173:	53                   	push   %ebx
f0132174:	83 ec 1c             	sub    $0x1c,%esp
f0132177:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013217b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013217f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132183:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132187:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013218b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013218f:	89 f3                	mov    %esi,%ebx
f0132191:	89 fa                	mov    %edi,%edx
f0132193:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132197:	89 34 24             	mov    %esi,(%esp)
f013219a:	85 c0                	test   %eax,%eax
f013219c:	75 1a                	jne    f01321b8 <__umoddi3+0x48>
f013219e:	39 f7                	cmp    %esi,%edi
f01321a0:	0f 86 a2 00 00 00    	jbe    f0132248 <__umoddi3+0xd8>
f01321a6:	89 c8                	mov    %ecx,%eax
f01321a8:	89 f2                	mov    %esi,%edx
f01321aa:	f7 f7                	div    %edi
f01321ac:	89 d0                	mov    %edx,%eax
f01321ae:	31 d2                	xor    %edx,%edx
f01321b0:	83 c4 1c             	add    $0x1c,%esp
f01321b3:	5b                   	pop    %ebx
f01321b4:	5e                   	pop    %esi
f01321b5:	5f                   	pop    %edi
f01321b6:	5d                   	pop    %ebp
f01321b7:	c3                   	ret    
f01321b8:	39 f0                	cmp    %esi,%eax
f01321ba:	0f 87 ac 00 00 00    	ja     f013226c <__umoddi3+0xfc>
f01321c0:	0f bd e8             	bsr    %eax,%ebp
f01321c3:	83 f5 1f             	xor    $0x1f,%ebp
f01321c6:	0f 84 ac 00 00 00    	je     f0132278 <__umoddi3+0x108>
f01321cc:	bf 20 00 00 00       	mov    $0x20,%edi
f01321d1:	29 ef                	sub    %ebp,%edi
f01321d3:	89 fe                	mov    %edi,%esi
f01321d5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01321d9:	89 e9                	mov    %ebp,%ecx
f01321db:	d3 e0                	shl    %cl,%eax
f01321dd:	89 d7                	mov    %edx,%edi
f01321df:	89 f1                	mov    %esi,%ecx
f01321e1:	d3 ef                	shr    %cl,%edi
f01321e3:	09 c7                	or     %eax,%edi
f01321e5:	89 e9                	mov    %ebp,%ecx
f01321e7:	d3 e2                	shl    %cl,%edx
f01321e9:	89 14 24             	mov    %edx,(%esp)
f01321ec:	89 d8                	mov    %ebx,%eax
f01321ee:	d3 e0                	shl    %cl,%eax
f01321f0:	89 c2                	mov    %eax,%edx
f01321f2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01321f6:	d3 e0                	shl    %cl,%eax
f01321f8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01321fc:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132200:	89 f1                	mov    %esi,%ecx
f0132202:	d3 e8                	shr    %cl,%eax
f0132204:	09 d0                	or     %edx,%eax
f0132206:	d3 eb                	shr    %cl,%ebx
f0132208:	89 da                	mov    %ebx,%edx
f013220a:	f7 f7                	div    %edi
f013220c:	89 d3                	mov    %edx,%ebx
f013220e:	f7 24 24             	mull   (%esp)
f0132211:	89 c6                	mov    %eax,%esi
f0132213:	89 d1                	mov    %edx,%ecx
f0132215:	39 d3                	cmp    %edx,%ebx
f0132217:	0f 82 87 00 00 00    	jb     f01322a4 <__umoddi3+0x134>
f013221d:	0f 84 91 00 00 00    	je     f01322b4 <__umoddi3+0x144>
f0132223:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132227:	29 f2                	sub    %esi,%edx
f0132229:	19 cb                	sbb    %ecx,%ebx
f013222b:	89 d8                	mov    %ebx,%eax
f013222d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132231:	d3 e0                	shl    %cl,%eax
f0132233:	89 e9                	mov    %ebp,%ecx
f0132235:	d3 ea                	shr    %cl,%edx
f0132237:	09 d0                	or     %edx,%eax
f0132239:	89 e9                	mov    %ebp,%ecx
f013223b:	d3 eb                	shr    %cl,%ebx
f013223d:	89 da                	mov    %ebx,%edx
f013223f:	83 c4 1c             	add    $0x1c,%esp
f0132242:	5b                   	pop    %ebx
f0132243:	5e                   	pop    %esi
f0132244:	5f                   	pop    %edi
f0132245:	5d                   	pop    %ebp
f0132246:	c3                   	ret    
f0132247:	90                   	nop
f0132248:	89 fd                	mov    %edi,%ebp
f013224a:	85 ff                	test   %edi,%edi
f013224c:	75 0b                	jne    f0132259 <__umoddi3+0xe9>
f013224e:	b8 01 00 00 00       	mov    $0x1,%eax
f0132253:	31 d2                	xor    %edx,%edx
f0132255:	f7 f7                	div    %edi
f0132257:	89 c5                	mov    %eax,%ebp
f0132259:	89 f0                	mov    %esi,%eax
f013225b:	31 d2                	xor    %edx,%edx
f013225d:	f7 f5                	div    %ebp
f013225f:	89 c8                	mov    %ecx,%eax
f0132261:	f7 f5                	div    %ebp
f0132263:	89 d0                	mov    %edx,%eax
f0132265:	e9 44 ff ff ff       	jmp    f01321ae <__umoddi3+0x3e>
f013226a:	66 90                	xchg   %ax,%ax
f013226c:	89 c8                	mov    %ecx,%eax
f013226e:	89 f2                	mov    %esi,%edx
f0132270:	83 c4 1c             	add    $0x1c,%esp
f0132273:	5b                   	pop    %ebx
f0132274:	5e                   	pop    %esi
f0132275:	5f                   	pop    %edi
f0132276:	5d                   	pop    %ebp
f0132277:	c3                   	ret    
f0132278:	3b 04 24             	cmp    (%esp),%eax
f013227b:	72 06                	jb     f0132283 <__umoddi3+0x113>
f013227d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132281:	77 0f                	ja     f0132292 <__umoddi3+0x122>
f0132283:	89 f2                	mov    %esi,%edx
f0132285:	29 f9                	sub    %edi,%ecx
f0132287:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013228b:	89 14 24             	mov    %edx,(%esp)
f013228e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132292:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132296:	8b 14 24             	mov    (%esp),%edx
f0132299:	83 c4 1c             	add    $0x1c,%esp
f013229c:	5b                   	pop    %ebx
f013229d:	5e                   	pop    %esi
f013229e:	5f                   	pop    %edi
f013229f:	5d                   	pop    %ebp
f01322a0:	c3                   	ret    
f01322a1:	8d 76 00             	lea    0x0(%esi),%esi
f01322a4:	2b 04 24             	sub    (%esp),%eax
f01322a7:	19 fa                	sbb    %edi,%edx
f01322a9:	89 d1                	mov    %edx,%ecx
f01322ab:	89 c6                	mov    %eax,%esi
f01322ad:	e9 71 ff ff ff       	jmp    f0132223 <__umoddi3+0xb3>
f01322b2:	66 90                	xchg   %ax,%ax
f01322b4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01322b8:	72 ea                	jb     f01322a4 <__umoddi3+0x134>
f01322ba:	89 d9                	mov    %ebx,%ecx
f01322bc:	e9 62 ff ff ff       	jmp    f0132223 <__umoddi3+0xb3>
