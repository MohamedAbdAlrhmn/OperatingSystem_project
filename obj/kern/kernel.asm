
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 10 19 00 	lgdtl  0x191018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 0f 19 f0       	mov    $0xf0190fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc 7c 65 f0       	mov    $0xf0657cbc,%edx
f010006a:	b8 b0 6f 65 f0       	mov    $0xf0656fb0,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b0 6f 65 f0       	push   $0xf0656fb0
f010007e:	e8 59 0d 03 00       	call   f0130ddc <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 43 0b 00 00       	call   f0100bce <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 f2 00 00 00       	call   f0100182 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 a0 60 00 00       	call   f0106135 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 2c 5c 00 00       	call   f0105cc6 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 ad 63 00 00       	call   f010644c <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 69 d9 00 00       	call   f010da0d <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000ae:	e8 0c c8 00 00       	call   f010c8bf <sys_calculate_free_frames>
f01000b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000b6:	e8 81 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000be:	e8 7f 75 00 00       	call   f0107642 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000c3:	e8 f7 c7 00 00       	call   f010c8bf <sys_calculate_free_frames>
f01000c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000cb:	e8 6c 3c 00 00       	call   f0103d3c <pf_calculate_free_frames>
f01000d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01000d6:	ff 75 ec             	pushl  -0x14(%ebp)
f01000d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01000dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01000df:	e8 5b f6 02 00       	call   f012f73f <test_initialize_dyn_block_system>
f01000e4:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000e7:	c7 05 28 7b 65 f0 61 	movl   $0x61,0xf0657b28
f01000ee:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f01000f1:	c7 05 b4 7a 65 f0 59 	movl   $0x59,0xf0657ab4
f01000f8:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f01000fb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0100100:	83 ec 0c             	sub    $0xc,%esp
f0100103:	50                   	push   %eax
f0100104:	e8 1d 6f 00 00       	call   f0107026 <create_shares_array>
f0100109:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f010010c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f0100111:	83 ec 0c             	sub    $0xc,%esp
f0100114:	50                   	push   %eax
f0100115:	e8 85 da 00 00       	call   f010db9f <create_semaphores_array>
f010011a:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f010011d:	e8 d1 98 00 00       	call   f01099f3 <env_init>
	idt_init();
f0100122:	e8 40 ae 00 00       	call   f010af67 <idt_init>

	enableBuffering(0);
f0100127:	83 ec 0c             	sub    $0xc,%esp
f010012a:	6a 00                	push   $0x0
f010012c:	e8 e9 d9 00 00       	call   f010db1a <enableBuffering>
f0100131:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f0100134:	83 ec 0c             	sub    $0xc,%esp
f0100137:	6a 00                	push   $0x0
f0100139:	e8 c4 d9 00 00       	call   f010db02 <enableModifiedBuffer>
f010013e:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f0100141:	83 ec 0c             	sub    $0xc,%esp
f0100144:	68 e8 03 00 00       	push   $0x3e8
f0100149:	e8 e4 d9 00 00       	call   f010db32 <setModifiedBufferLength>
f010014e:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100151:	e8 ea 59 00 00       	call   f0105b40 <pic_init>
	sched_init() ;
f0100156:	e8 9d 46 00 00       	call   f01047f8 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010015b:	83 ec 0c             	sub    $0xc,%esp
f010015e:	68 80 2e 13 f0       	push   $0xf0132e80
f0100163:	e8 1a 0b 00 00       	call   f0100c82 <cprintf>
f0100168:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010016b:	83 ec 0c             	sub    $0xc,%esp
f010016e:	68 ac 2e 13 f0       	push   $0xf0132eac
f0100173:	e8 0a 0b 00 00       	call   f0100c82 <cprintf>
f0100178:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010017b:	e8 28 0b 00 00       	call   f0100ca8 <run_command_prompt>
	}
f0100180:	eb d9                	jmp    f010015b <FOS_initialize+0xfc>

f0100182 <print_welcome_message>:
}


void print_welcome_message()
{
f0100182:	55                   	push   %ebp
f0100183:	89 e5                	mov    %esp,%ebp
f0100185:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100188:	83 ec 0c             	sub    $0xc,%esp
f010018b:	68 d1 2e 13 f0       	push   $0xf0132ed1
f0100190:	e8 ed 0a 00 00       	call   f0100c82 <cprintf>
f0100195:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100198:	83 ec 0c             	sub    $0xc,%esp
f010019b:	68 d8 2e 13 f0       	push   $0xf0132ed8
f01001a0:	e8 dd 0a 00 00       	call   f0100c82 <cprintf>
f01001a5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001a8:	83 ec 0c             	sub    $0xc,%esp
f01001ab:	68 20 2f 13 f0       	push   $0xf0132f20
f01001b0:	e8 cd 0a 00 00       	call   f0100c82 <cprintf>
f01001b5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001b8:	83 ec 0c             	sub    $0xc,%esp
f01001bb:	68 68 2f 13 f0       	push   $0xf0132f68
f01001c0:	e8 bd 0a 00 00       	call   f0100c82 <cprintf>
f01001c5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001c8:	83 ec 0c             	sub    $0xc,%esp
f01001cb:	68 20 2f 13 f0       	push   $0xf0132f20
f01001d0:	e8 ad 0a 00 00       	call   f0100c82 <cprintf>
f01001d5:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001d8:	83 ec 0c             	sub    $0xc,%esp
f01001db:	68 d8 2e 13 f0       	push   $0xf0132ed8
f01001e0:	e8 9d 0a 00 00       	call   f0100c82 <cprintf>
f01001e5:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001e8:	83 ec 0c             	sub    $0xc,%esp
f01001eb:	68 ad 2f 13 f0       	push   $0xf0132fad
f01001f0:	e8 8d 0a 00 00       	call   f0100c82 <cprintf>
f01001f5:	83 c4 10             	add    $0x10,%esp
}
f01001f8:	90                   	nop
f01001f9:	c9                   	leave  
f01001fa:	c3                   	ret    

f01001fb <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001fb:	55                   	push   %ebp
f01001fc:	89 e5                	mov    %esp,%ebp
f01001fe:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100201:	8b 45 10             	mov    0x10(%ebp),%eax
f0100204:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100209:	8d 45 10             	lea    0x10(%ebp),%eax
f010020c:	83 c0 04             	add    $0x4,%eax
f010020f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100212:	83 ec 04             	sub    $0x4,%esp
f0100215:	ff 75 0c             	pushl  0xc(%ebp)
f0100218:	ff 75 08             	pushl  0x8(%ebp)
f010021b:	68 b2 2f 13 f0       	push   $0xf0132fb2
f0100220:	e8 5d 0a 00 00       	call   f0100c82 <cprintf>
f0100225:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100228:	8b 45 10             	mov    0x10(%ebp),%eax
f010022b:	83 ec 08             	sub    $0x8,%esp
f010022e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100231:	50                   	push   %eax
f0100232:	e8 22 0a 00 00       	call   f0100c59 <vcprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010023a:	83 ec 0c             	sub    $0xc,%esp
f010023d:	68 cb 2f 13 f0       	push   $0xf0132fcb
f0100242:	e8 3b 0a 00 00       	call   f0100c82 <cprintf>
f0100247:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010024a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010024f:	85 c0                	test   %eax,%eax
f0100251:	74 12                	je     f0100265 <_panic+0x6a>
f0100253:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100258:	8b 40 54             	mov    0x54(%eax),%eax
f010025b:	83 f8 02             	cmp    $0x2,%eax
f010025e:	75 05                	jne    f0100265 <_panic+0x6a>
	{
		//2015
		env_exit();
f0100260:	e8 83 96 00 00       	call   f01098e8 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100265:	e8 db 43 00 00       	call   f0104645 <fos_scheduler>

f010026a <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f010026a:	55                   	push   %ebp
f010026b:	89 e5                	mov    %esp,%ebp
f010026d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100270:	8b 45 10             	mov    0x10(%ebp),%eax
f0100273:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f0100278:	8d 45 10             	lea    0x10(%ebp),%eax
f010027b:	83 c0 04             	add    $0x4,%eax
f010027e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100281:	83 ec 04             	sub    $0x4,%esp
f0100284:	ff 75 0c             	pushl  0xc(%ebp)
f0100287:	ff 75 08             	pushl  0x8(%ebp)
f010028a:	68 b2 2f 13 f0       	push   $0xf0132fb2
f010028f:	e8 ee 09 00 00       	call   f0100c82 <cprintf>
f0100294:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100297:	8b 45 10             	mov    0x10(%ebp),%eax
f010029a:	83 ec 08             	sub    $0x8,%esp
f010029d:	ff 75 f4             	pushl  -0xc(%ebp)
f01002a0:	50                   	push   %eax
f01002a1:	e8 b3 09 00 00       	call   f0100c59 <vcprintf>
f01002a6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a9:	83 ec 0c             	sub    $0xc,%esp
f01002ac:	68 cb 2f 13 f0       	push   $0xf0132fcb
f01002b1:	e8 cc 09 00 00       	call   f0100c82 <cprintf>
f01002b6:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f01002b9:	e8 46 51 00 00       	call   f0105404 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f01002be:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002c3:	85 c0                	test   %eax,%eax
f01002c5:	74 14                	je     f01002db <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f01002c7:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01002cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002cf:	83 ec 0c             	sub    $0xc,%esp
f01002d2:	50                   	push   %eax
f01002d3:	e8 f3 4e 00 00       	call   f01051cb <sched_exit_env>
f01002d8:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f01002db:	e8 65 43 00 00       	call   f0104645 <fos_scheduler>

f01002e0 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f01002e0:	55                   	push   %ebp
f01002e1:	89 e5                	mov    %esp,%ebp
f01002e3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002e6:	8b 45 10             	mov    0x10(%ebp),%eax
f01002e9:	a3 c0 6f 65 f0       	mov    %eax,0xf0656fc0

	va_start(ap, fmt);
f01002ee:	8d 45 10             	lea    0x10(%ebp),%eax
f01002f1:	83 c0 04             	add    $0x4,%eax
f01002f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002f7:	83 ec 04             	sub    $0x4,%esp
f01002fa:	ff 75 0c             	pushl  0xc(%ebp)
f01002fd:	ff 75 08             	pushl  0x8(%ebp)
f0100300:	68 b2 2f 13 f0       	push   $0xf0132fb2
f0100305:	e8 78 09 00 00       	call   f0100c82 <cprintf>
f010030a:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010030d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100310:	83 ec 08             	sub    $0x8,%esp
f0100313:	ff 75 f4             	pushl  -0xc(%ebp)
f0100316:	50                   	push   %eax
f0100317:	e8 3d 09 00 00       	call   f0100c59 <vcprintf>
f010031c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010031f:	83 ec 0c             	sub    $0xc,%esp
f0100322:	68 cb 2f 13 f0       	push   $0xf0132fcb
f0100327:	e8 56 09 00 00       	call   f0100c82 <cprintf>
f010032c:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010032f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0100334:	85 c0                	test   %eax,%eax
f0100336:	74 28                	je     f0100360 <_panic_into_prompt+0x80>
f0100338:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010033d:	8b 40 54             	mov    0x54(%eax),%eax
f0100340:	83 f8 02             	cmp    $0x2,%eax
f0100343:	75 1b                	jne    f0100360 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100345:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010034a:	83 ec 0c             	sub    $0xc,%esp
f010034d:	50                   	push   %eax
f010034e:	e8 30 47 00 00       	call   f0104a83 <sched_insert_exit>
f0100353:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100356:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f010035d:	00 00 00 
	}

	lcr3(phys_page_directory);
f0100360:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0100365:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100368:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010036b:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f010036e:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0100375:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100378:	83 ec 0c             	sub    $0xc,%esp
f010037b:	6a 00                	push   $0x0
f010037d:	e8 26 09 00 00       	call   f0100ca8 <run_command_prompt>
f0100382:	83 c4 10             	add    $0x10,%esp
f0100385:	eb f1                	jmp    f0100378 <_panic_into_prompt+0x98>

f0100387 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100387:	55                   	push   %ebp
f0100388:	89 e5                	mov    %esp,%ebp
f010038a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f010038d:	8d 45 10             	lea    0x10(%ebp),%eax
f0100390:	83 c0 04             	add    $0x4,%eax
f0100393:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100396:	83 ec 04             	sub    $0x4,%esp
f0100399:	ff 75 0c             	pushl  0xc(%ebp)
f010039c:	ff 75 08             	pushl  0x8(%ebp)
f010039f:	68 cd 2f 13 f0       	push   $0xf0132fcd
f01003a4:	e8 d9 08 00 00       	call   f0100c82 <cprintf>
f01003a9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01003af:	83 ec 08             	sub    $0x8,%esp
f01003b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01003b5:	50                   	push   %eax
f01003b6:	e8 9e 08 00 00       	call   f0100c59 <vcprintf>
f01003bb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003be:	83 ec 0c             	sub    $0xc,%esp
f01003c1:	68 cb 2f 13 f0       	push   $0xf0132fcb
f01003c6:	e8 b7 08 00 00       	call   f0100c82 <cprintf>
f01003cb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01003ce:	90                   	nop
f01003cf:	c9                   	leave  
f01003d0:	c3                   	ret    

f01003d1 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f01003d1:	55                   	push   %ebp
f01003d2:	89 e5                	mov    %esp,%ebp
f01003d4:	83 ec 10             	sub    $0x10,%esp
f01003d7:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01003e1:	89 c2                	mov    %eax,%edx
f01003e3:	ec                   	in     (%dx),%al
f01003e4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01003e7:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f01003ea:	0f b6 c0             	movzbl %al,%eax
f01003ed:	83 e0 01             	and    $0x1,%eax
f01003f0:	85 c0                	test   %eax,%eax
f01003f2:	75 07                	jne    f01003fb <serial_proc_data+0x2a>
		return -1;
f01003f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003f9:	eb 16                	jmp    f0100411 <serial_proc_data+0x40>
f01003fb:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100402:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100405:	89 c2                	mov    %eax,%edx
f0100407:	ec                   	in     (%dx),%al
f0100408:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010040b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010040e:	0f b6 c0             	movzbl %al,%eax
}
f0100411:	c9                   	leave  
f0100412:	c3                   	ret    

f0100413 <serial_intr>:

void
serial_intr(void)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100419:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f010041e:	85 c0                	test   %eax,%eax
f0100420:	74 10                	je     f0100432 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100422:	83 ec 0c             	sub    $0xc,%esp
f0100425:	68 d1 03 10 f0       	push   $0xf01003d1
f010042a:	e8 e4 05 00 00       	call   f0100a13 <cons_intr>
f010042f:	83 c4 10             	add    $0x10,%esp
}
f0100432:	90                   	nop
f0100433:	c9                   	leave  
f0100434:	c3                   	ret    

f0100435 <serial_init>:

void
serial_init(void)
{
f0100435:	55                   	push   %ebp
f0100436:	89 e5                	mov    %esp,%ebp
f0100438:	83 ec 40             	sub    $0x40,%esp
f010043b:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100442:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100446:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100449:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010044c:	ee                   	out    %al,(%dx)
f010044d:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f0100454:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100458:	8a 45 cf             	mov    -0x31(%ebp),%al
f010045b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010045e:	ee                   	out    %al,(%dx)
f010045f:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100466:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010046a:	8a 45 d0             	mov    -0x30(%ebp),%al
f010046d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100470:	ee                   	out    %al,(%dx)
f0100471:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100478:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f010047c:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010047f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100482:	ee                   	out    %al,(%dx)
f0100483:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010048a:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010048e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100491:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100494:	ee                   	out    %al,(%dx)
f0100495:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f010049c:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004a0:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004a6:	ee                   	out    %al,(%dx)
f01004a7:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004ae:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004b2:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004b8:	ee                   	out    %al,(%dx)
f01004b9:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004c3:	89 c2                	mov    %eax,%edx
f01004c5:	ec                   	in     (%dx),%al
f01004c6:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f01004c9:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f01004cc:	3c ff                	cmp    $0xff,%al
f01004ce:	0f 95 c0             	setne  %al
f01004d1:	0f b6 c0             	movzbl %al,%eax
f01004d4:	a3 e0 6f 65 f0       	mov    %eax,0xf0656fe0
f01004d9:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01004e3:	89 c2                	mov    %eax,%edx
f01004e5:	ec                   	in     (%dx),%al
f01004e6:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01004e9:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f01004f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01004f3:	89 c2                	mov    %eax,%edx
f01004f5:	ec                   	in     (%dx),%al
f01004f6:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004f9:	90                   	nop
f01004fa:	c9                   	leave  
f01004fb:	c3                   	ret    

f01004fc <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004fc:	55                   	push   %ebp
f01004fd:	89 e5                	mov    %esp,%ebp
f01004ff:	83 ec 20             	sub    $0x20,%esp
f0100502:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100509:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010050c:	89 c2                	mov    %eax,%edx
f010050e:	ec                   	in     (%dx),%al
f010050f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100512:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100519:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010051c:	89 c2                	mov    %eax,%edx
f010051e:	ec                   	in     (%dx),%al
f010051f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100522:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010052c:	89 c2                	mov    %eax,%edx
f010052e:	ec                   	in     (%dx),%al
f010052f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100532:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100539:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010053c:	89 c2                	mov    %eax,%edx
f010053e:	ec                   	in     (%dx),%al
f010053f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100542:	90                   	nop
f0100543:	c9                   	leave  
f0100544:	c3                   	ret    

f0100545 <lpt_putc>:

static void
lpt_putc(int c)
{
f0100545:	55                   	push   %ebp
f0100546:	89 e5                	mov    %esp,%ebp
f0100548:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f010054b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100552:	eb 08                	jmp    f010055c <lpt_putc+0x17>
		delay();
f0100554:	e8 a3 ff ff ff       	call   f01004fc <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100559:	ff 45 fc             	incl   -0x4(%ebp)
f010055c:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100566:	89 c2                	mov    %eax,%edx
f0100568:	ec                   	in     (%dx),%al
f0100569:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f010056c:	8a 45 eb             	mov    -0x15(%ebp),%al
f010056f:	84 c0                	test   %al,%al
f0100571:	78 09                	js     f010057c <lpt_putc+0x37>
f0100573:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010057a:	7e d8                	jle    f0100554 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f010057c:	8b 45 08             	mov    0x8(%ebp),%eax
f010057f:	0f b6 c0             	movzbl %al,%eax
f0100582:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100589:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010058c:	8a 45 e8             	mov    -0x18(%ebp),%al
f010058f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100592:	ee                   	out    %al,(%dx)
f0100593:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010059a:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010059e:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005a4:	ee                   	out    %al,(%dx)
f01005a5:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005ac:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005b0:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005b7:	90                   	nop
f01005b8:	c9                   	leave  
f01005b9:	c3                   	ret    

f01005ba <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005ba:	55                   	push   %ebp
f01005bb:	89 e5                	mov    %esp,%ebp
f01005bd:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005c0:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005ca:	66 8b 00             	mov    (%eax),%ax
f01005cd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f01005d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005d4:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f01005d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01005dc:	66 8b 00             	mov    (%eax),%ax
f01005df:	66 3d 5a a5          	cmp    $0xa55a,%ax
f01005e3:	74 13                	je     f01005f8 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f01005e5:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f01005ec:	c7 05 e4 6f 65 f0 b4 	movl   $0x3b4,0xf0656fe4
f01005f3:	03 00 00 
f01005f6:	eb 14                	jmp    f010060c <cga_init+0x52>
	} else {
		*cp = was;
f01005f8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005fb:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005ff:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100602:	c7 05 e4 6f 65 f0 d4 	movl   $0x3d4,0xf0656fe4
f0100609:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010060c:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100611:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100614:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100618:	8a 45 e0             	mov    -0x20(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010061f:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100624:	40                   	inc    %eax
f0100625:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100628:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010062b:	89 c2                	mov    %eax,%edx
f010062d:	ec                   	in     (%dx),%al
f010062e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100631:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100634:	0f b6 c0             	movzbl %al,%eax
f0100637:	c1 e0 08             	shl    $0x8,%eax
f010063a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010063d:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100642:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100645:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100649:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010064c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010064f:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100650:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100655:	40                   	inc    %eax
f0100656:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010065c:	89 c2                	mov    %eax,%edx
f010065e:	ec                   	in     (%dx),%al
f010065f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100662:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100665:	0f b6 c0             	movzbl %al,%eax
f0100668:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010066b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066e:	a3 e8 6f 65 f0       	mov    %eax,0xf0656fe8
	crt_pos = pos;
f0100673:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100676:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
}
f010067c:	90                   	nop
f010067d:	c9                   	leave  
f010067e:	c3                   	ret    

f010067f <cga_putc>:



void
cga_putc(int c)
{
f010067f:	55                   	push   %ebp
f0100680:	89 e5                	mov    %esp,%ebp
f0100682:	53                   	push   %ebx
f0100683:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100686:	8b 45 08             	mov    0x8(%ebp),%eax
f0100689:	b0 00                	mov    $0x0,%al
f010068b:	85 c0                	test   %eax,%eax
f010068d:	75 07                	jne    f0100696 <cga_putc+0x17>
		c |= 0x0700;
f010068f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100696:	8b 45 08             	mov    0x8(%ebp),%eax
f0100699:	0f b6 c0             	movzbl %al,%eax
f010069c:	83 f8 09             	cmp    $0x9,%eax
f010069f:	0f 84 94 00 00 00    	je     f0100739 <cga_putc+0xba>
f01006a5:	83 f8 09             	cmp    $0x9,%eax
f01006a8:	7f 0a                	jg     f01006b4 <cga_putc+0x35>
f01006aa:	83 f8 08             	cmp    $0x8,%eax
f01006ad:	74 14                	je     f01006c3 <cga_putc+0x44>
f01006af:	e9 c8 00 00 00       	jmp    f010077c <cga_putc+0xfd>
f01006b4:	83 f8 0a             	cmp    $0xa,%eax
f01006b7:	74 49                	je     f0100702 <cga_putc+0x83>
f01006b9:	83 f8 0d             	cmp    $0xd,%eax
f01006bc:	74 53                	je     f0100711 <cga_putc+0x92>
f01006be:	e9 b9 00 00 00       	jmp    f010077c <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f01006c3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006c9:	66 85 c0             	test   %ax,%ax
f01006cc:	0f 84 d0 00 00 00    	je     f01007a2 <cga_putc+0x123>
			crt_pos--;
f01006d2:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006d8:	48                   	dec    %eax
f01006d9:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01006df:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01006e5:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01006eb:	0f b7 c0             	movzwl %ax,%eax
f01006ee:	01 c0                	add    %eax,%eax
f01006f0:	01 c2                	add    %eax,%edx
f01006f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01006f5:	b0 00                	mov    $0x0,%al
f01006f7:	83 c8 20             	or     $0x20,%eax
f01006fa:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006fd:	e9 a0 00 00 00       	jmp    f01007a2 <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f0100702:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100708:	83 c0 50             	add    $0x50,%eax
f010070b:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100711:	66 8b 0d ec 6f 65 f0 	mov    0xf0656fec,%cx
f0100718:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f010071e:	bb 50 00 00 00       	mov    $0x50,%ebx
f0100723:	ba 00 00 00 00       	mov    $0x0,%edx
f0100728:	66 f7 f3             	div    %bx
f010072b:	89 d0                	mov    %edx,%eax
f010072d:	29 c1                	sub    %eax,%ecx
f010072f:	89 c8                	mov    %ecx,%eax
f0100731:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
		break;
f0100737:	eb 6a                	jmp    f01007a3 <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f0100739:	83 ec 0c             	sub    $0xc,%esp
f010073c:	6a 20                	push   $0x20
f010073e:	e8 69 04 00 00       	call   f0100bac <cons_putc>
f0100743:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100746:	83 ec 0c             	sub    $0xc,%esp
f0100749:	6a 20                	push   $0x20
f010074b:	e8 5c 04 00 00       	call   f0100bac <cons_putc>
f0100750:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100753:	83 ec 0c             	sub    $0xc,%esp
f0100756:	6a 20                	push   $0x20
f0100758:	e8 4f 04 00 00       	call   f0100bac <cons_putc>
f010075d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100760:	83 ec 0c             	sub    $0xc,%esp
f0100763:	6a 20                	push   $0x20
f0100765:	e8 42 04 00 00       	call   f0100bac <cons_putc>
f010076a:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010076d:	83 ec 0c             	sub    $0xc,%esp
f0100770:	6a 20                	push   $0x20
f0100772:	e8 35 04 00 00       	call   f0100bac <cons_putc>
f0100777:	83 c4 10             	add    $0x10,%esp
		break;
f010077a:	eb 27                	jmp    f01007a3 <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f010077c:	8b 0d e8 6f 65 f0    	mov    0xf0656fe8,%ecx
f0100782:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100788:	8d 50 01             	lea    0x1(%eax),%edx
f010078b:	66 89 15 ec 6f 65 f0 	mov    %dx,0xf0656fec
f0100792:	0f b7 c0             	movzwl %ax,%eax
f0100795:	01 c0                	add    %eax,%eax
f0100797:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010079a:	8b 45 08             	mov    0x8(%ebp),%eax
f010079d:	66 89 02             	mov    %ax,(%edx)
		break;
f01007a0:	eb 01                	jmp    f01007a3 <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007a2:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007a3:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007a9:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007ad:	76 58                	jbe    f0100807 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007af:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007b4:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007ba:	a1 e8 6f 65 f0       	mov    0xf0656fe8,%eax
f01007bf:	83 ec 04             	sub    $0x4,%esp
f01007c2:	68 00 0f 00 00       	push   $0xf00
f01007c7:	52                   	push   %edx
f01007c8:	50                   	push   %eax
f01007c9:	e8 3e 06 03 00       	call   f0130e0c <memcpy>
f01007ce:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007d1:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01007d8:	eb 15                	jmp    f01007ef <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f01007da:	8b 15 e8 6f 65 f0    	mov    0xf0656fe8,%edx
f01007e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01007e3:	01 c0                	add    %eax,%eax
f01007e5:	01 d0                	add    %edx,%eax
f01007e7:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01007ec:	ff 45 f4             	incl   -0xc(%ebp)
f01007ef:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007f6:	7e e2                	jle    f01007da <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007f8:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f01007fe:	83 e8 50             	sub    $0x50,%eax
f0100801:	66 a3 ec 6f 65 f0    	mov    %ax,0xf0656fec
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100807:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f010080c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010080f:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100813:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100816:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100819:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010081a:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100820:	66 c1 e8 08          	shr    $0x8,%ax
f0100824:	0f b6 c0             	movzbl %al,%eax
f0100827:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010082d:	42                   	inc    %edx
f010082e:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100831:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100834:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100837:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010083a:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010083b:	a1 e4 6f 65 f0       	mov    0xf0656fe4,%eax
f0100840:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100843:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100847:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010084a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010084d:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f010084e:	66 a1 ec 6f 65 f0    	mov    0xf0656fec,%ax
f0100854:	0f b6 c0             	movzbl %al,%eax
f0100857:	8b 15 e4 6f 65 f0    	mov    0xf0656fe4,%edx
f010085d:	42                   	inc    %edx
f010085e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100861:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100864:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100867:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010086a:	ee                   	out    %al,(%dx)
}
f010086b:	90                   	nop
f010086c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010086f:	c9                   	leave  
f0100870:	c3                   	ret    

f0100871 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100871:	55                   	push   %ebp
f0100872:	89 e5                	mov    %esp,%ebp
f0100874:	83 ec 28             	sub    $0x28,%esp
f0100877:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010087e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100881:	89 c2                	mov    %eax,%edx
f0100883:	ec                   	in     (%dx),%al
f0100884:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100887:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	83 e0 01             	and    $0x1,%eax
f0100890:	85 c0                	test   %eax,%eax
f0100892:	75 0a                	jne    f010089e <kbd_proc_data+0x2d>
		return -1;
f0100894:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100899:	e9 54 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
f010089e:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01008a8:	89 c2                	mov    %eax,%edx
f01008aa:	ec                   	in     (%dx),%al
f01008ab:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f01008ae:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f01008b1:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008b4:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008b8:	75 17                	jne    f01008d1 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008ba:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008bf:	83 c8 40             	or     $0x40,%eax
f01008c2:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f01008c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01008cc:	e9 21 01 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f01008d1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008d4:	84 c0                	test   %al,%al
f01008d6:	79 44                	jns    f010091c <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01008d8:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01008dd:	83 e0 40             	and    $0x40,%eax
f01008e0:	85 c0                	test   %eax,%eax
f01008e2:	75 08                	jne    f01008ec <kbd_proc_data+0x7b>
f01008e4:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008e7:	83 e0 7f             	and    $0x7f,%eax
f01008ea:	eb 03                	jmp    f01008ef <kbd_proc_data+0x7e>
f01008ec:	8a 45 f3             	mov    -0xd(%ebp),%al
f01008ef:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01008f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008f6:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f01008fc:	83 c8 40             	or     $0x40,%eax
f01008ff:	0f b6 c0             	movzbl %al,%eax
f0100902:	f7 d0                	not    %eax
f0100904:	89 c2                	mov    %eax,%edx
f0100906:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010090b:	21 d0                	and    %edx,%eax
f010090d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
		return 0;
f0100912:	b8 00 00 00 00       	mov    $0x0,%eax
f0100917:	e9 d6 00 00 00       	jmp    f01009f2 <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f010091c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100921:	83 e0 40             	and    $0x40,%eax
f0100924:	85 c0                	test   %eax,%eax
f0100926:	74 11                	je     f0100939 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100928:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f010092c:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100931:	83 e0 bf             	and    $0xffffffbf,%eax
f0100934:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	}

	shift |= shiftcode[data];
f0100939:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010093d:	8a 80 20 10 19 f0    	mov    -0xfe6efe0(%eax),%al
f0100943:	0f b6 d0             	movzbl %al,%edx
f0100946:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010094b:	09 d0                	or     %edx,%eax
f010094d:	a3 08 72 65 f0       	mov    %eax,0xf0657208
	shift ^= togglecode[data];
f0100952:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100956:	8a 80 20 11 19 f0    	mov    -0xfe6eee0(%eax),%al
f010095c:	0f b6 d0             	movzbl %al,%edx
f010095f:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100964:	31 d0                	xor    %edx,%eax
f0100966:	a3 08 72 65 f0       	mov    %eax,0xf0657208

	c = charcode[shift & (CTL | SHIFT)][data];
f010096b:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f0100970:	83 e0 03             	and    $0x3,%eax
f0100973:	8b 14 85 20 15 19 f0 	mov    -0xfe6eae0(,%eax,4),%edx
f010097a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010097e:	01 d0                	add    %edx,%eax
f0100980:	8a 00                	mov    (%eax),%al
f0100982:	0f b6 c0             	movzbl %al,%eax
f0100985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100988:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f010098d:	83 e0 08             	and    $0x8,%eax
f0100990:	85 c0                	test   %eax,%eax
f0100992:	74 22                	je     f01009b6 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100994:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100998:	7e 0c                	jle    f01009a6 <kbd_proc_data+0x135>
f010099a:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f010099e:	7f 06                	jg     f01009a6 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f01009a0:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f01009a4:	eb 10                	jmp    f01009b6 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f01009a6:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f01009aa:	7e 0a                	jle    f01009b6 <kbd_proc_data+0x145>
f01009ac:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f01009b0:	7f 04                	jg     f01009b6 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f01009b2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f01009b6:	a1 08 72 65 f0       	mov    0xf0657208,%eax
f01009bb:	f7 d0                	not    %eax
f01009bd:	83 e0 06             	and    $0x6,%eax
f01009c0:	85 c0                	test   %eax,%eax
f01009c2:	75 2b                	jne    f01009ef <kbd_proc_data+0x17e>
f01009c4:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009cb:	75 22                	jne    f01009ef <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f01009cd:	83 ec 0c             	sub    $0xc,%esp
f01009d0:	68 e8 2f 13 f0       	push   $0xf0132fe8
f01009d5:	e8 a8 02 00 00       	call   f0100c82 <cprintf>
f01009da:	83 c4 10             	add    $0x10,%esp
f01009dd:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f01009e4:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01009e8:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01009eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01009ee:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f01009ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01009f2:	c9                   	leave  
f01009f3:	c3                   	ret    

f01009f4 <kbd_intr>:

void
kbd_intr(void)
{
f01009f4:	55                   	push   %ebp
f01009f5:	89 e5                	mov    %esp,%ebp
f01009f7:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009fa:	83 ec 0c             	sub    $0xc,%esp
f01009fd:	68 71 08 10 f0       	push   $0xf0100871
f0100a02:	e8 0c 00 00 00       	call   f0100a13 <cons_intr>
f0100a07:	83 c4 10             	add    $0x10,%esp
}
f0100a0a:	90                   	nop
f0100a0b:	c9                   	leave  
f0100a0c:	c3                   	ret    

f0100a0d <kbd_init>:

void
kbd_init(void)
{
f0100a0d:	55                   	push   %ebp
f0100a0e:	89 e5                	mov    %esp,%ebp
}
f0100a10:	90                   	nop
f0100a11:	5d                   	pop    %ebp
f0100a12:	c3                   	ret    

f0100a13 <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a13:	55                   	push   %ebp
f0100a14:	89 e5                	mov    %esp,%ebp
f0100a16:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100a19:	eb 35                	jmp    f0100a50 <cons_intr+0x3d>
		if (c == 0)
f0100a1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a1f:	75 02                	jne    f0100a23 <cons_intr+0x10>
			continue;
f0100a21:	eb 2d                	jmp    f0100a50 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100a23:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a28:	8d 50 01             	lea    0x1(%eax),%edx
f0100a2b:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100a31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100a34:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100a3a:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a44:	75 0a                	jne    f0100a50 <cons_intr+0x3d>
			cons.wpos = 0;
f0100a46:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100a4d:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0100a53:	ff d0                	call   *%eax
f0100a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a58:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a5c:	75 bd                	jne    f0100a1b <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a5e:	90                   	nop
f0100a5f:	c9                   	leave  
f0100a60:	c3                   	ret    

f0100a61 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a61:	55                   	push   %ebp
f0100a62:	89 e5                	mov    %esp,%ebp
f0100a64:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a67:	e8 a7 f9 ff ff       	call   f0100413 <serial_intr>
	kbd_intr();
f0100a6c:	e8 83 ff ff ff       	call   f01009f4 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a71:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100a77:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100a7c:	39 c2                	cmp    %eax,%edx
f0100a7e:	74 35                	je     f0100ab5 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a80:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a85:	8d 50 01             	lea    0x1(%eax),%edx
f0100a88:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100a8e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100a94:	0f b6 c0             	movzbl %al,%eax
f0100a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a9a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100a9f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100aa4:	75 0a                	jne    f0100ab0 <cons_getc+0x4f>
			cons.rpos = 0;
f0100aa6:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100aad:	00 00 00 
		return c;
f0100ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ab3:	eb 05                	jmp    f0100aba <cons_getc+0x59>
	}
	return 0;
f0100ab5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100aba:	c9                   	leave  
f0100abb:	c3                   	ret    

f0100abc <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100abc:	55                   	push   %ebp
f0100abd:	89 e5                	mov    %esp,%ebp
f0100abf:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100ac2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100ac9:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100ace:	85 c0                	test   %eax,%eax
f0100ad0:	74 41                	je     f0100b13 <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100ad2:	e8 fa f8 ff ff       	call   f01003d1 <serial_proc_data>
f0100ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ada:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ade:	74 33                	je     f0100b13 <cons_getc2+0x57>
				if (c1 == 0)
f0100ae0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ae4:	74 2d                	je     f0100b13 <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100ae6:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100aeb:	8d 50 01             	lea    0x1(%eax),%edx
f0100aee:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100af4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100af7:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100afd:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b02:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b07:	75 0a                	jne    f0100b13 <cons_getc2+0x57>
						cons.wpos = 0;
f0100b09:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b10:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100b1a:	e8 52 fd ff ff       	call   f0100871 <kbd_proc_data>
f0100b1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100b22:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100b26:	74 33                	je     f0100b5b <cons_getc2+0x9f>
			if (c2 == 0)
f0100b28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b2c:	74 2d                	je     f0100b5b <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100b2e:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b33:	8d 50 01             	lea    0x1(%eax),%edx
f0100b36:	89 15 04 72 65 f0    	mov    %edx,0xf0657204
f0100b3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100b3f:	88 90 00 70 65 f0    	mov    %dl,-0xf9a9000(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100b45:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b4f:	75 0a                	jne    f0100b5b <cons_getc2+0x9f>
					cons.wpos = 0;
f0100b51:	c7 05 04 72 65 f0 00 	movl   $0x0,0xf0657204
f0100b58:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b5f:	7e 44                	jle    f0100ba5 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b61:	8b 15 00 72 65 f0    	mov    0xf0657200,%edx
f0100b67:	a1 04 72 65 f0       	mov    0xf0657204,%eax
f0100b6c:	39 c2                	cmp    %eax,%edx
f0100b6e:	74 35                	je     f0100ba5 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b70:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b75:	8d 50 01             	lea    0x1(%eax),%edx
f0100b78:	89 15 00 72 65 f0    	mov    %edx,0xf0657200
f0100b7e:	8a 80 00 70 65 f0    	mov    -0xf9a9000(%eax),%al
f0100b84:	0f b6 c0             	movzbl %al,%eax
f0100b87:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b8a:	a1 00 72 65 f0       	mov    0xf0657200,%eax
f0100b8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b94:	75 0a                	jne    f0100ba0 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b96:	c7 05 00 72 65 f0 00 	movl   $0x0,0xf0657200
f0100b9d:	00 00 00 
			return c;
f0100ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100ba3:	eb 05                	jmp    f0100baa <cons_getc2+0xee>
		}
	}
	return 0;
f0100ba5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100baa:	c9                   	leave  
f0100bab:	c3                   	ret    

f0100bac <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100bac:	55                   	push   %ebp
f0100bad:	89 e5                	mov    %esp,%ebp
f0100baf:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100bb2:	ff 75 08             	pushl  0x8(%ebp)
f0100bb5:	e8 8b f9 ff ff       	call   f0100545 <lpt_putc>
f0100bba:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100bbd:	83 ec 0c             	sub    $0xc,%esp
f0100bc0:	ff 75 08             	pushl  0x8(%ebp)
f0100bc3:	e8 b7 fa ff ff       	call   f010067f <cga_putc>
f0100bc8:	83 c4 10             	add    $0x10,%esp
}
f0100bcb:	90                   	nop
f0100bcc:	c9                   	leave  
f0100bcd:	c3                   	ret    

f0100bce <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100bce:	55                   	push   %ebp
f0100bcf:	89 e5                	mov    %esp,%ebp
f0100bd1:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100bd4:	e8 e1 f9 ff ff       	call   f01005ba <cga_init>
	kbd_init();
f0100bd9:	e8 2f fe ff ff       	call   f0100a0d <kbd_init>
	serial_init();
f0100bde:	e8 52 f8 ff ff       	call   f0100435 <serial_init>

	if (!serial_exists)
f0100be3:	a1 e0 6f 65 f0       	mov    0xf0656fe0,%eax
f0100be8:	85 c0                	test   %eax,%eax
f0100bea:	75 10                	jne    f0100bfc <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100bec:	83 ec 0c             	sub    $0xc,%esp
f0100bef:	68 f4 2f 13 f0       	push   $0xf0132ff4
f0100bf4:	e8 89 00 00 00       	call   f0100c82 <cprintf>
f0100bf9:	83 c4 10             	add    $0x10,%esp
}
f0100bfc:	90                   	nop
f0100bfd:	c9                   	leave  
f0100bfe:	c3                   	ret    

f0100bff <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100bff:	55                   	push   %ebp
f0100c00:	89 e5                	mov    %esp,%ebp
f0100c02:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c05:	83 ec 0c             	sub    $0xc,%esp
f0100c08:	ff 75 08             	pushl  0x8(%ebp)
f0100c0b:	e8 9c ff ff ff       	call   f0100bac <cons_putc>
f0100c10:	83 c4 10             	add    $0x10,%esp
}
f0100c13:	90                   	nop
f0100c14:	c9                   	leave  
f0100c15:	c3                   	ret    

f0100c16 <getchar>:

int
getchar(void)
{
f0100c16:	55                   	push   %ebp
f0100c17:	89 e5                	mov    %esp,%ebp
f0100c19:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100c1c:	e8 40 fe ff ff       	call   f0100a61 <cons_getc>
f0100c21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c28:	74 f2                	je     f0100c1c <getchar+0x6>
		/* do nothing */;
	return c;
f0100c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2d:	c9                   	leave  
f0100c2e:	c3                   	ret    

f0100c2f <iscons>:

int
iscons(int fdnum)
{
f0100c2f:	55                   	push   %ebp
f0100c30:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100c32:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100c37:	5d                   	pop    %ebp
f0100c38:	c3                   	ret    

f0100c39 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100c39:	55                   	push   %ebp
f0100c3a:	89 e5                	mov    %esp,%ebp
f0100c3c:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100c3f:	83 ec 0c             	sub    $0xc,%esp
f0100c42:	ff 75 08             	pushl  0x8(%ebp)
f0100c45:	e8 b5 ff ff ff       	call   f0100bff <cputchar>
f0100c4a:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100c4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100c50:	83 c0 04             	add    $0x4,%eax
f0100c53:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c56:	90                   	nop
f0100c57:	c9                   	leave  
f0100c58:	c3                   	ret    

f0100c59 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c59:	55                   	push   %ebp
f0100c5a:	89 e5                	mov    %esp,%ebp
f0100c5c:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c66:	ff 75 0c             	pushl  0xc(%ebp)
f0100c69:	ff 75 08             	pushl  0x8(%ebp)
f0100c6c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c6f:	50                   	push   %eax
f0100c70:	68 39 0c 10 f0       	push   $0xf0100c39
f0100c75:	e8 c6 f8 02 00       	call   f0130540 <vprintfmt>
f0100c7a:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c80:	c9                   	leave  
f0100c81:	c3                   	ret    

f0100c82 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c82:	55                   	push   %ebp
f0100c83:	89 e5                	mov    %esp,%ebp
f0100c85:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c88:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c91:	83 ec 08             	sub    $0x8,%esp
f0100c94:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c97:	50                   	push   %eax
f0100c98:	e8 bc ff ff ff       	call   f0100c59 <vcprintf>
f0100c9d:	83 c4 10             	add    $0x10,%esp
f0100ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100ca6:	c9                   	leave  
f0100ca7:	c3                   	ret    

f0100ca8 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100ca8:	55                   	push   %ebp
f0100ca9:	89 e5                	mov    %esp,%ebp
f0100cab:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100cb1:	83 ec 08             	sub    $0x8,%esp
f0100cb4:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cba:	50                   	push   %eax
f0100cbb:	68 11 30 13 f0       	push   $0xf0133011
f0100cc0:	e8 23 fd 02 00       	call   f01309e8 <readline>
f0100cc5:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100cc8:	83 ec 0c             	sub    $0xc,%esp
f0100ccb:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100cd1:	50                   	push   %eax
f0100cd2:	e8 0d 00 00 00       	call   f0100ce4 <execute_command>
f0100cd7:	83 c4 10             	add    $0x10,%esp
f0100cda:	85 c0                	test   %eax,%eax
f0100cdc:	78 02                	js     f0100ce0 <run_command_prompt+0x38>
				break;
	}
f0100cde:	eb d1                	jmp    f0100cb1 <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100ce0:	90                   	nop
	}
}
f0100ce1:	90                   	nop
f0100ce2:	c9                   	leave  
f0100ce3:	c3                   	ret    

f0100ce4 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100ce4:	55                   	push   %ebp
f0100ce5:	89 e5                	mov    %esp,%ebp
f0100ce7:	81 ec a8 00 00 00    	sub    $0xa8,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];
	char *auto_fun[MAX_ARGUMENTS];

	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100ced:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0100cf0:	50                   	push   %eax
f0100cf1:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0100cf4:	50                   	push   %eax
f0100cf5:	68 17 30 13 f0       	push   $0xf0133017
f0100cfa:	ff 75 08             	pushl  0x8(%ebp)
f0100cfd:	e8 20 05 03 00       	call   f0131222 <strsplit>
f0100d02:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d08:	85 c0                	test   %eax,%eax
f0100d0a:	75 0a                	jne    f0100d16 <execute_command+0x32>
		return 0;
f0100d0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d11:	e9 37 01 00 00       	jmp    f0100e4d <execute_command+0x169>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	int count = 0;
f0100d1d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100d24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100d2b:	e9 8c 00 00 00       	jmp    f0100dbc <execute_command+0xd8>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100d30:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d33:	89 d0                	mov    %edx,%eax
f0100d35:	01 c0                	add    %eax,%eax
f0100d37:	01 d0                	add    %edx,%eax
f0100d39:	c1 e0 02             	shl    $0x2,%eax
f0100d3c:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d41:	8b 10                	mov    (%eax),%edx
f0100d43:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d46:	83 ec 08             	sub    $0x8,%esp
f0100d49:	52                   	push   %edx
f0100d4a:	50                   	push   %eax
f0100d4b:	e8 aa ff 02 00       	call   f0130cfa <strcmp>
f0100d50:	83 c4 10             	add    $0x10,%esp
f0100d53:	85 c0                	test   %eax,%eax
f0100d55:	75 09                	jne    f0100d60 <execute_command+0x7c>
		{
			command_found = 1;
f0100d57:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100d5e:	eb 6c                	jmp    f0100dcc <execute_command+0xe8>
		}
		else if (strncmp(arguments[0], commands[i].name,strlen(arguments[0])) == 0)
f0100d60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d63:	83 ec 0c             	sub    $0xc,%esp
f0100d66:	50                   	push   %eax
f0100d67:	e8 82 fe 02 00       	call   f0130bee <strlen>
f0100d6c:	83 c4 10             	add    $0x10,%esp
f0100d6f:	89 c1                	mov    %eax,%ecx
f0100d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d74:	89 d0                	mov    %edx,%eax
f0100d76:	01 c0                	add    %eax,%eax
f0100d78:	01 d0                	add    %edx,%eax
f0100d7a:	c1 e0 02             	shl    $0x2,%eax
f0100d7d:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100d82:	8b 10                	mov    (%eax),%edx
f0100d84:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100d87:	83 ec 04             	sub    $0x4,%esp
f0100d8a:	51                   	push   %ecx
f0100d8b:	52                   	push   %edx
f0100d8c:	50                   	push   %eax
f0100d8d:	e8 a0 ff 02 00       	call   f0130d32 <strncmp>
f0100d92:	83 c4 10             	add    $0x10,%esp
f0100d95:	85 c0                	test   %eax,%eax
f0100d97:	75 20                	jne    f0100db9 <execute_command+0xd5>
		{
			auto_fun[count] = commands[i].name;
f0100d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d9c:	89 d0                	mov    %edx,%eax
f0100d9e:	01 c0                	add    %eax,%eax
f0100da0:	01 d0                	add    %edx,%eax
f0100da2:	c1 e0 02             	shl    $0x2,%eax
f0100da5:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0100daa:	8b 10                	mov    (%eax),%edx
f0100dac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100daf:	89 94 85 60 ff ff ff 	mov    %edx,-0xa0(%ebp,%eax,4)
			count++;
f0100db6:	ff 45 ec             	incl   -0x14(%ebp)

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	int count = 0;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db9:	ff 45 f0             	incl   -0x10(%ebp)
f0100dbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dbf:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0100dc4:	39 c2                	cmp    %eax,%edx
f0100dc6:	0f 82 64 ff ff ff    	jb     f0100d30 <execute_command+0x4c>
			auto_fun[count] = commands[i].name;
			count++;
		}
	}

	if(command_found)
f0100dcc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd0:	74 2b                	je     f0100dfd <execute_command+0x119>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100dd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dd5:	89 d0                	mov    %edx,%eax
f0100dd7:	01 c0                	add    %eax,%eax
f0100dd9:	01 d0                	add    %edx,%eax
f0100ddb:	c1 e0 02             	shl    $0x2,%eax
f0100dde:	05 48 15 19 f0       	add    $0xf0191548,%eax
f0100de3:	8b 00                	mov    (%eax),%eax
f0100de5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100de8:	83 ec 08             	sub    $0x8,%esp
f0100deb:	8d 4d a0             	lea    -0x60(%ebp),%ecx
f0100dee:	51                   	push   %ecx
f0100def:	52                   	push   %edx
f0100df0:	ff d0                	call   *%eax
f0100df2:	83 c4 10             	add    $0x10,%esp
f0100df5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		return return_value;
f0100df8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100dfb:	eb 50                	jmp    f0100e4d <execute_command+0x169>
	}
	else if (count == 0)
f0100dfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100e01:	75 16                	jne    f0100e19 <execute_command+0x135>
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0100e03:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0100e06:	83 ec 08             	sub    $0x8,%esp
f0100e09:	50                   	push   %eax
f0100e0a:	68 1c 30 13 f0       	push   $0xf013301c
f0100e0f:	e8 6e fe ff ff       	call   f0100c82 <cprintf>
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	eb 2f                	jmp    f0100e48 <execute_command+0x164>
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100e20:	eb 1e                	jmp    f0100e40 <execute_command+0x15c>
			cprintf("%s\n", auto_fun[loop]);
f0100e22:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e25:	8b 84 85 60 ff ff ff 	mov    -0xa0(%ebp,%eax,4),%eax
f0100e2c:	83 ec 08             	sub    $0x8,%esp
f0100e2f:	50                   	push   %eax
f0100e30:	68 32 30 13 f0       	push   $0xf0133032
f0100e35:	e8 48 fe ff ff       	call   f0100c82 <cprintf>
f0100e3a:	83 c4 10             	add    $0x10,%esp
		cprintf("Unknown command '%s'\n", arguments[0]);
	}
	else
	{
		int loop;
		for(loop = 0; loop < count; loop++)
f0100e3d:	ff 45 e8             	incl   -0x18(%ebp)
f0100e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e43:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0100e46:	7c da                	jl     f0100e22 <execute_command+0x13e>
			cprintf("%s\n", auto_fun[loop]);
	}
	return 0;
f0100e48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100e4d:	c9                   	leave  
f0100e4e:	c3                   	ret    

f0100e4f <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e4f:	55                   	push   %ebp
f0100e50:	89 e5                	mov    %esp,%ebp
f0100e52:	c7 05 5c 7b 65 f0 00 	movl   $0x0,0xf0657b5c
f0100e59:	00 00 00 
f0100e5c:	90                   	nop
f0100e5d:	5d                   	pop    %ebp
f0100e5e:	c3                   	ret    

f0100e5f <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e5f:	55                   	push   %ebp
f0100e60:	89 e5                	mov    %esp,%ebp
f0100e62:	c7 05 5c 7b 65 f0 01 	movl   $0x1,0xf0657b5c
f0100e69:	00 00 00 
f0100e6c:	90                   	nop
f0100e6d:	5d                   	pop    %ebp
f0100e6e:	c3                   	ret    

f0100e6f <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e6f:	55                   	push   %ebp
f0100e70:	89 e5                	mov    %esp,%ebp
f0100e72:	c7 05 5c 7b 65 f0 02 	movl   $0x2,0xf0657b5c
f0100e79:	00 00 00 
f0100e7c:	90                   	nop
f0100e7d:	5d                   	pop    %ebp
f0100e7e:	c3                   	ret    

f0100e7f <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e7f:	55                   	push   %ebp
f0100e80:	89 e5                	mov    %esp,%ebp
f0100e82:	c7 05 5c 7b 65 f0 03 	movl   $0x3,0xf0657b5c
f0100e89:	00 00 00 
f0100e8c:	90                   	nop
f0100e8d:	5d                   	pop    %ebp
f0100e8e:	c3                   	ret    

f0100e8f <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e8f:	55                   	push   %ebp
f0100e90:	89 e5                	mov    %esp,%ebp
f0100e92:	c7 05 5c 7b 65 f0 04 	movl   $0x4,0xf0657b5c
f0100e99:	00 00 00 
f0100e9c:	90                   	nop
f0100e9d:	5d                   	pop    %ebp
f0100e9e:	c3                   	ret    

f0100e9f <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e9f:	55                   	push   %ebp
f0100ea0:	89 e5                	mov    %esp,%ebp
f0100ea2:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ea7:	85 c0                	test   %eax,%eax
f0100ea9:	75 04                	jne    f0100eaf <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100eab:	b0 01                	mov    $0x1,%al
f0100ead:	eb 02                	jmp    f0100eb1 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100eaf:	b0 00                	mov    $0x0,%al
f0100eb1:	5d                   	pop    %ebp
f0100eb2:	c3                   	ret    

f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100eb3:	55                   	push   %ebp
f0100eb4:	89 e5                	mov    %esp,%ebp
f0100eb6:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ebb:	83 f8 01             	cmp    $0x1,%eax
f0100ebe:	75 04                	jne    f0100ec4 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100ec0:	b0 01                	mov    $0x1,%al
f0100ec2:	eb 02                	jmp    f0100ec6 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100ec4:	b0 00                	mov    $0x0,%al
f0100ec6:	5d                   	pop    %ebp
f0100ec7:	c3                   	ret    

f0100ec8 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100ec8:	55                   	push   %ebp
f0100ec9:	89 e5                	mov    %esp,%ebp
f0100ecb:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ed0:	83 f8 02             	cmp    $0x2,%eax
f0100ed3:	75 04                	jne    f0100ed9 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100ed5:	b0 01                	mov    $0x1,%al
f0100ed7:	eb 02                	jmp    f0100edb <isKHeapPlacementStrategyBESTFIT+0x13>
f0100ed9:	b0 00                	mov    $0x0,%al
f0100edb:	5d                   	pop    %ebp
f0100edc:	c3                   	ret    

f0100edd <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100edd:	55                   	push   %ebp
f0100ede:	89 e5                	mov    %esp,%ebp
f0100ee0:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100ee5:	83 f8 03             	cmp    $0x3,%eax
f0100ee8:	75 04                	jne    f0100eee <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100eea:	b0 01                	mov    $0x1,%al
f0100eec:	eb 02                	jmp    f0100ef0 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100eee:	b0 00                	mov    $0x0,%al
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f0100efa:	83 f8 04             	cmp    $0x4,%eax
f0100efd:	75 04                	jne    f0100f03 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eff:	b0 01                	mov    $0x1,%al
f0100f01:	eb 02                	jmp    f0100f05 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f03:	b0 00                	mov    $0x0,%al
f0100f05:	5d                   	pop    %ebp
f0100f06:	c3                   	ret    

f0100f07 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f07:	55                   	push   %ebp
f0100f08:	89 e5                	mov    %esp,%ebp
f0100f0a:	c7 05 30 7b 65 f0 01 	movl   $0x1,0xf0657b30
f0100f11:	00 00 00 
f0100f14:	90                   	nop
f0100f15:	5d                   	pop    %ebp
f0100f16:	c3                   	ret    

f0100f17 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f17:	55                   	push   %ebp
f0100f18:	89 e5                	mov    %esp,%ebp
f0100f1a:	c7 05 30 7b 65 f0 02 	movl   $0x2,0xf0657b30
f0100f21:	00 00 00 
f0100f24:	90                   	nop
f0100f25:	5d                   	pop    %ebp
f0100f26:	c3                   	ret    

f0100f27 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f27:	55                   	push   %ebp
f0100f28:	89 e5                	mov    %esp,%ebp
f0100f2a:	c7 05 30 7b 65 f0 03 	movl   $0x3,0xf0657b30
f0100f31:	00 00 00 
f0100f34:	90                   	nop
f0100f35:	5d                   	pop    %ebp
f0100f36:	c3                   	ret    

f0100f37 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100f37:	55                   	push   %ebp
f0100f38:	89 e5                	mov    %esp,%ebp
f0100f3a:	c7 05 30 7b 65 f0 04 	movl   $0x4,0xf0657b30
f0100f41:	00 00 00 
f0100f44:	90                   	nop
f0100f45:	5d                   	pop    %ebp
f0100f46:	c3                   	ret    

f0100f47 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f4f:	83 f8 01             	cmp    $0x1,%eax
f0100f52:	75 04                	jne    f0100f58 <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f54:	b0 01                	mov    $0x1,%al
f0100f56:	eb 02                	jmp    f0100f5a <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f58:	b0 00                	mov    $0x0,%al
f0100f5a:	5d                   	pop    %ebp
f0100f5b:	c3                   	ret    

f0100f5c <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f5c:	55                   	push   %ebp
f0100f5d:	89 e5                	mov    %esp,%ebp
f0100f5f:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f64:	83 f8 02             	cmp    $0x2,%eax
f0100f67:	75 04                	jne    f0100f6d <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f69:	b0 01                	mov    $0x1,%al
f0100f6b:	eb 02                	jmp    f0100f6f <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f6d:	b0 00                	mov    $0x0,%al
f0100f6f:	5d                   	pop    %ebp
f0100f70:	c3                   	ret    

f0100f71 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f71:	55                   	push   %ebp
f0100f72:	89 e5                	mov    %esp,%ebp
f0100f74:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f79:	83 f8 03             	cmp    $0x3,%eax
f0100f7c:	75 04                	jne    f0100f82 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f7e:	b0 01                	mov    $0x1,%al
f0100f80:	eb 02                	jmp    f0100f84 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f82:	b0 00                	mov    $0x0,%al
f0100f84:	5d                   	pop    %ebp
f0100f85:	c3                   	ret    

f0100f86 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f86:	55                   	push   %ebp
f0100f87:	89 e5                	mov    %esp,%ebp
f0100f89:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
f0100f8e:	83 f8 04             	cmp    $0x4,%eax
f0100f91:	75 04                	jne    f0100f97 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f93:	b0 01                	mov    $0x1,%al
f0100f95:	eb 02                	jmp    f0100f99 <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f97:	b0 00                	mov    $0x0,%al
f0100f99:	5d                   	pop    %ebp
f0100f9a:	c3                   	ret    

f0100f9b <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f9b:	55                   	push   %ebp
f0100f9c:	89 e5                	mov    %esp,%ebp
f0100f9e:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100fa1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fa4:	c1 e8 0c             	shr    $0xc,%eax
f0100fa7:	89 c2                	mov    %eax,%edx
f0100fa9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0100fae:	39 c2                	cmp    %eax,%edx
f0100fb0:	72 14                	jb     f0100fc6 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100fb2:	83 ec 04             	sub    $0x4,%esp
f0100fb5:	68 38 30 13 f0       	push   $0xf0133038
f0100fba:	6a 55                	push   $0x55
f0100fbc:	68 60 30 13 f0       	push   $0xf0133060
f0100fc1:	e8 35 f2 ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0100fc6:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0100fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fcf:	c1 e8 0c             	shr    $0xc,%eax
f0100fd2:	89 c1                	mov    %eax,%ecx
f0100fd4:	89 c8                	mov    %ecx,%eax
f0100fd6:	01 c0                	add    %eax,%eax
f0100fd8:	01 c8                	add    %ecx,%eax
f0100fda:	c1 e0 03             	shl    $0x3,%eax
f0100fdd:	01 d0                	add    %edx,%eax
}
f0100fdf:	c9                   	leave  
f0100fe0:	c3                   	ret    

f0100fe1 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100fe1:	55                   	push   %ebp
f0100fe2:	89 e5                	mov    %esp,%ebp
f0100fe4:	53                   	push   %ebx
f0100fe5:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fe8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fef:	eb 3b                	jmp    f010102c <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100ff1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ff4:	89 d0                	mov    %edx,%eax
f0100ff6:	01 c0                	add    %eax,%eax
f0100ff8:	01 d0                	add    %edx,%eax
f0100ffa:	c1 e0 02             	shl    $0x2,%eax
f0100ffd:	05 44 15 19 f0       	add    $0xf0191544,%eax
f0101002:	8b 10                	mov    (%eax),%edx
f0101004:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101007:	89 c8                	mov    %ecx,%eax
f0101009:	01 c0                	add    %eax,%eax
f010100b:	01 c8                	add    %ecx,%eax
f010100d:	c1 e0 02             	shl    $0x2,%eax
f0101010:	05 40 15 19 f0       	add    $0xf0191540,%eax
f0101015:	8b 00                	mov    (%eax),%eax
f0101017:	83 ec 04             	sub    $0x4,%esp
f010101a:	52                   	push   %edx
f010101b:	50                   	push   %eax
f010101c:	68 da 3e 13 f0       	push   $0xf0133eda
f0101021:	e8 5c fc ff ff       	call   f0100c82 <cprintf>
f0101026:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101029:	ff 45 f4             	incl   -0xc(%ebp)
f010102c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010102f:	a1 ac 18 19 f0       	mov    0xf01918ac,%eax
f0101034:	39 c2                	cmp    %eax,%edx
f0101036:	72 b9                	jb     f0100ff1 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0101038:	83 ec 0c             	sub    $0xc,%esp
f010103b:	68 e3 3e 13 f0       	push   $0xf0133ee3
f0101040:	e8 3d fc ff ff       	call   f0100c82 <cprintf>
f0101045:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101048:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010104f:	eb 42                	jmp    f0101093 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101051:	8b 0d c0 1c 19 f0    	mov    0xf0191cc0,%ecx
f0101057:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010105a:	89 d0                	mov    %edx,%eax
f010105c:	01 c0                	add    %eax,%eax
f010105e:	01 d0                	add    %edx,%eax
f0101060:	c1 e0 02             	shl    $0x2,%eax
f0101063:	01 c8                	add    %ecx,%eax
f0101065:	8b 50 04             	mov    0x4(%eax),%edx
f0101068:	8b 1d c0 1c 19 f0    	mov    0xf0191cc0,%ebx
f010106e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101071:	89 c8                	mov    %ecx,%eax
f0101073:	01 c0                	add    %eax,%eax
f0101075:	01 c8                	add    %ecx,%eax
f0101077:	c1 e0 02             	shl    $0x2,%eax
f010107a:	01 d8                	add    %ebx,%eax
f010107c:	8b 00                	mov    (%eax),%eax
f010107e:	83 ec 04             	sub    $0x4,%esp
f0101081:	52                   	push   %edx
f0101082:	50                   	push   %eax
f0101083:	68 f8 3e 13 f0       	push   $0xf0133ef8
f0101088:	e8 f5 fb ff ff       	call   f0100c82 <cprintf>
f010108d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101090:	ff 45 f4             	incl   -0xc(%ebp)
f0101093:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f0101098:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010109b:	7c b4                	jl     f0101051 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010109d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01010a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01010a5:	c9                   	leave  
f01010a6:	c3                   	ret    

f01010a7 <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01010a7:	55                   	push   %ebp
f01010a8:	89 e5                	mov    %esp,%ebp
f01010aa:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	68 14 3f 13 f0       	push   $0xf0133f14
f01010b5:	e8 c8 fb ff ff       	call   f0100c82 <cprintf>
f01010ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01010bd:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f01010c2:	83 ec 04             	sub    $0x4,%esp
f01010c5:	50                   	push   %eax
f01010c6:	68 0c 00 10 f0       	push   $0xf010000c
f01010cb:	68 30 3f 13 f0       	push   $0xf0133f30
f01010d0:	e8 ad fb ff ff       	call   f0100c82 <cprintf>
f01010d5:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f01010d8:	b8 75 2e 13 00       	mov    $0x132e75,%eax
f01010dd:	83 ec 04             	sub    $0x4,%esp
f01010e0:	50                   	push   %eax
f01010e1:	68 75 2e 13 f0       	push   $0xf0132e75
f01010e6:	68 6c 3f 13 f0       	push   $0xf0133f6c
f01010eb:	e8 92 fb ff ff       	call   f0100c82 <cprintf>
f01010f0:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010f3:	b8 b0 6f 65 00       	mov    $0x656fb0,%eax
f01010f8:	83 ec 04             	sub    $0x4,%esp
f01010fb:	50                   	push   %eax
f01010fc:	68 b0 6f 65 f0       	push   $0xf0656fb0
f0101101:	68 a8 3f 13 f0       	push   $0xf0133fa8
f0101106:	e8 77 fb ff ff       	call   f0100c82 <cprintf>
f010110b:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010110e:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0101113:	83 ec 04             	sub    $0x4,%esp
f0101116:	50                   	push   %eax
f0101117:	68 bc 7c 65 f0       	push   $0xf0657cbc
f010111c:	68 f0 3f 13 f0       	push   $0xf0133ff0
f0101121:	e8 5c fb ff ff       	call   f0100c82 <cprintf>
f0101126:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101129:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f010112e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101134:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101139:	29 c2                	sub    %eax,%edx
f010113b:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010113d:	85 c0                	test   %eax,%eax
f010113f:	79 05                	jns    f0101146 <command_kernel_info+0x9f>
f0101141:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101146:	c1 f8 0a             	sar    $0xa,%eax
f0101149:	83 ec 08             	sub    $0x8,%esp
f010114c:	50                   	push   %eax
f010114d:	68 2c 40 13 f0       	push   $0xf013402c
f0101152:	e8 2b fb ff ff       	call   f0100c82 <cprintf>
f0101157:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010115a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010115f:	c9                   	leave  
f0101160:	c3                   	ret    

f0101161 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101161:	55                   	push   %ebp
f0101162:	89 e5                	mov    %esp,%ebp
f0101164:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101167:	83 ec 04             	sub    $0x4,%esp
f010116a:	68 58 40 13 f0       	push   $0xf0134058
f010116f:	68 b0 00 00 00       	push   $0xb0
f0101174:	68 79 40 13 f0       	push   $0xf0134079
f0101179:	e8 7d f0 ff ff       	call   f01001fb <_panic>

f010117e <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f010117e:	55                   	push   %ebp
f010117f:	89 e5                	mov    %esp,%ebp
f0101181:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	68 58 40 13 f0       	push   $0xf0134058
f010118c:	68 ba 00 00 00       	push   $0xba
f0101191:	68 79 40 13 f0       	push   $0xf0134079
f0101196:	e8 60 f0 ff ff       	call   f01001fb <_panic>

f010119b <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010119b:	55                   	push   %ebp
f010119c:	89 e5                	mov    %esp,%ebp
f010119e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011a1:	83 ec 04             	sub    $0x4,%esp
f01011a4:	68 58 40 13 f0       	push   $0xf0134058
f01011a9:	68 c3 00 00 00       	push   $0xc3
f01011ae:	68 79 40 13 f0       	push   $0xf0134079
f01011b3:	e8 43 f0 ff ff       	call   f01001fb <_panic>

f01011b8 <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f01011b8:	55                   	push   %ebp
f01011b9:	89 e5                	mov    %esp,%ebp
f01011bb:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011be:	83 ec 04             	sub    $0x4,%esp
f01011c1:	68 58 40 13 f0       	push   $0xf0134058
f01011c6:	68 cf 00 00 00       	push   $0xcf
f01011cb:	68 79 40 13 f0       	push   $0xf0134079
f01011d0:	e8 26 f0 ff ff       	call   f01001fb <_panic>

f01011d5 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f01011d5:	55                   	push   %ebp
f01011d6:	89 e5                	mov    %esp,%ebp
f01011d8:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011db:	83 ec 04             	sub    $0x4,%esp
f01011de:	68 58 40 13 f0       	push   $0xf0134058
f01011e3:	68 d8 00 00 00       	push   $0xd8
f01011e8:	68 79 40 13 f0       	push   $0xf0134079
f01011ed:	e8 09 f0 ff ff       	call   f01001fb <_panic>

f01011f2 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011f2:	55                   	push   %ebp
f01011f3:	89 e5                	mov    %esp,%ebp
f01011f5:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f8:	83 ec 04             	sub    $0x4,%esp
f01011fb:	68 58 40 13 f0       	push   $0xf0134058
f0101200:	68 e1 00 00 00       	push   $0xe1
f0101205:	68 79 40 13 f0       	push   $0xf0134079
f010120a:	e8 ec ef ff ff       	call   f01001fb <_panic>

f010120f <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f010120f:	55                   	push   %ebp
f0101210:	89 e5                	mov    %esp,%ebp
f0101212:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101215:	83 ec 04             	sub    $0x4,%esp
f0101218:	68 58 40 13 f0       	push   $0xf0134058
f010121d:	68 ee 00 00 00       	push   $0xee
f0101222:	68 79 40 13 f0       	push   $0xf0134079
f0101227:	e8 cf ef ff ff       	call   f01001fb <_panic>

f010122c <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f010122c:	55                   	push   %ebp
f010122d:	89 e5                	mov    %esp,%ebp
f010122f:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101232:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101235:	83 c0 04             	add    $0x4,%eax
f0101238:	8b 00                	mov    (%eax),%eax
f010123a:	83 ec 04             	sub    $0x4,%esp
f010123d:	6a 10                	push   $0x10
f010123f:	6a 00                	push   $0x0
f0101241:	50                   	push   %eax
f0101242:	e8 07 fd 02 00       	call   f0130f4e <strtol>
f0101247:	83 c4 10             	add    $0x10,%esp
f010124a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f010124d:	83 ec 0c             	sub    $0xc,%esp
f0101250:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101253:	50                   	push   %eax
f0101254:	e8 c2 55 00 00       	call   f010681b <allocate_frame>
f0101259:	83 c4 10             	add    $0x10,%esp
f010125c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f010125f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101262:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0101267:	6a 06                	push   $0x6
f0101269:	ff 75 f4             	pushl  -0xc(%ebp)
f010126c:	52                   	push   %edx
f010126d:	50                   	push   %eax
f010126e:	e8 f7 59 00 00       	call   f0106c6a <map_frame>
f0101273:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010127b:	c9                   	leave  
f010127c:	c3                   	ret    

f010127d <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f010127d:	55                   	push   %ebp
f010127e:	89 e5                	mov    %esp,%ebp
f0101280:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101283:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101286:	83 c0 04             	add    $0x4,%eax
f0101289:	8b 00                	mov    (%eax),%eax
f010128b:	83 ec 04             	sub    $0x4,%esp
f010128e:	6a 10                	push   $0x10
f0101290:	6a 00                	push   $0x0
f0101292:	50                   	push   %eax
f0101293:	e8 b6 fc 02 00       	call   f0130f4e <strtol>
f0101298:	83 c4 10             	add    $0x10,%esp
f010129b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f010129e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01012a3:	83 ec 08             	sub    $0x8,%esp
f01012a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01012a9:	50                   	push   %eax
f01012aa:	e8 f0 5a 00 00       	call   f0106d9f <unmap_frame>
f01012af:	83 c4 10             	add    $0x10,%esp

	return 0;
f01012b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012b7:	c9                   	leave  
f01012b8:	c3                   	ret    

f01012b9 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f01012b9:	55                   	push   %ebp
f01012ba:	89 e5                	mov    %esp,%ebp
f01012bc:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012bf:	83 ec 04             	sub    $0x4,%esp
f01012c2:	68 58 40 13 f0       	push   $0xf0134058
f01012c7:	68 18 01 00 00       	push   $0x118
f01012cc:	68 79 40 13 f0       	push   $0xf0134079
f01012d1:	e8 25 ef ff ff       	call   f01001fb <_panic>

f01012d6 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f01012d6:	55                   	push   %ebp
f01012d7:	89 e5                	mov    %esp,%ebp
f01012d9:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012dc:	83 ec 04             	sub    $0x4,%esp
f01012df:	68 58 40 13 f0       	push   $0xf0134058
f01012e4:	68 23 01 00 00       	push   $0x123
f01012e9:	68 79 40 13 f0       	push   $0xf0134079
f01012ee:	e8 08 ef ff ff       	call   f01001fb <_panic>

f01012f3 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012f3:	55                   	push   %ebp
f01012f4:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012fb:	5d                   	pop    %ebp
f01012fc:	c3                   	ret    

f01012fd <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012fd:	55                   	push   %ebp
f01012fe:	89 e5                	mov    %esp,%ebp
f0101300:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0101303:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101307:	75 37                	jne    f0101340 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101309:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130c:	83 c0 04             	add    $0x4,%eax
f010130f:	8b 00                	mov    (%eax),%eax
f0101311:	83 ec 04             	sub    $0x4,%esp
f0101314:	6a 10                	push   $0x10
f0101316:	6a 00                	push   $0x0
f0101318:	50                   	push   %eax
f0101319:	e8 30 fc 02 00       	call   f0130f4e <strtol>
f010131e:	83 c4 10             	add    $0x10,%esp
f0101321:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0101324:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101327:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010132a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132d:	83 c0 08             	add    $0x8,%eax
f0101330:	8b 00                	mov    (%eax),%eax
f0101332:	8a 00                	mov    (%eax),%al
f0101334:	88 c2                	mov    %al,%dl
f0101336:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101339:	88 10                	mov    %dl,(%eax)
f010133b:	e9 b9 00 00 00       	jmp    f01013f9 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0101340:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101344:	0f 85 9f 00 00 00    	jne    f01013e9 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f010134a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010134d:	83 c0 04             	add    $0x4,%eax
f0101350:	8b 00                	mov    (%eax),%eax
f0101352:	83 ec 04             	sub    $0x4,%esp
f0101355:	6a 0a                	push   $0xa
f0101357:	6a 00                	push   $0x0
f0101359:	50                   	push   %eax
f010135a:	e8 ef fb 02 00       	call   f0130f4e <strtol>
f010135f:	83 c4 10             	add    $0x10,%esp
f0101362:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101365:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010136c:	83 ec 04             	sub    $0x4,%esp
f010136f:	6a 00                	push   $0x0
f0101371:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101374:	50                   	push   %eax
f0101375:	ff 75 f4             	pushl  -0xc(%ebp)
f0101378:	e8 8a 85 00 00       	call   f0109907 <envid2env>
f010137d:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101380:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101383:	83 c0 08             	add    $0x8,%eax
f0101386:	8b 00                	mov    (%eax),%eax
f0101388:	83 ec 04             	sub    $0x4,%esp
f010138b:	6a 10                	push   $0x10
f010138d:	6a 00                	push   $0x0
f010138f:	50                   	push   %eax
f0101390:	e8 b9 fb 02 00       	call   f0130f4e <strtol>
f0101395:	83 c4 10             	add    $0x10,%esp
f0101398:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010139b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	75 07                	jne    f01013a9 <command_writeusermem+0xac>
f01013a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01013a7:	eb 55                	jmp    f01013fe <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01013a9:	0f 20 d8             	mov    %cr3,%eax
f01013ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01013af:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01013b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01013b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01013b8:	8b 40 60             	mov    0x60(%eax),%eax
f01013bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01013be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01013c1:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01013c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01013ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013cd:	83 c0 0c             	add    $0xc,%eax
f01013d0:	8b 00                	mov    (%eax),%eax
f01013d2:	8a 00                	mov    (%eax),%al
f01013d4:	88 c2                	mov    %al,%dl
f01013d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01013d9:	88 10                	mov    %dl,(%eax)
f01013db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01013de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01013e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01013e4:	0f 22 d8             	mov    %eax,%cr3
f01013e7:	eb 10                	jmp    f01013f9 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f01013e9:	83 ec 0c             	sub    $0xc,%esp
f01013ec:	68 90 40 13 f0       	push   $0xf0134090
f01013f1:	e8 8c f8 ff ff       	call   f0100c82 <cprintf>
f01013f6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013fe:	c9                   	leave  
f01013ff:	c3                   	ret    

f0101400 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101400:	55                   	push   %ebp
f0101401:	89 e5                	mov    %esp,%ebp
f0101403:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101406:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101409:	83 c0 04             	add    $0x4,%eax
f010140c:	8b 00                	mov    (%eax),%eax
f010140e:	83 ec 04             	sub    $0x4,%esp
f0101411:	6a 10                	push   $0x10
f0101413:	6a 00                	push   $0x0
f0101415:	50                   	push   %eax
f0101416:	e8 33 fb 02 00       	call   f0130f4e <strtol>
f010141b:	83 c4 10             	add    $0x10,%esp
f010141e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101423:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101426:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101429:	83 c0 08             	add    $0x8,%eax
f010142c:	8b 00                	mov    (%eax),%eax
f010142e:	83 ec 04             	sub    $0x4,%esp
f0101431:	6a 0a                	push   $0xa
f0101433:	6a 00                	push   $0x0
f0101435:	50                   	push   %eax
f0101436:	e8 13 fb 02 00       	call   f0130f4e <strtol>
f010143b:	83 c4 10             	add    $0x10,%esp
f010143e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101448:	8b 45 0c             	mov    0xc(%ebp),%eax
f010144b:	83 c0 0c             	add    $0xc,%eax
f010144e:	8b 00                	mov    (%eax),%eax
f0101450:	83 ec 0c             	sub    $0xc,%esp
f0101453:	50                   	push   %eax
f0101454:	e8 95 f7 02 00       	call   f0130bee <strlen>
f0101459:	83 c4 10             	add    $0x10,%esp
f010145c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f010145f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101466:	eb 30                	jmp    f0101498 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101468:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010146f:	eb 1c                	jmp    f010148d <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101474:	83 c0 0c             	add    $0xc,%eax
f0101477:	8b 10                	mov    (%eax),%edx
f0101479:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010147c:	01 d0                	add    %edx,%eax
f010147e:	8a 00                	mov    (%eax),%al
f0101480:	88 c2                	mov    %al,%dl
f0101482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101485:	88 10                	mov    %dl,(%eax)
			address++;
f0101487:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010148a:	ff 45 ec             	incl   -0x14(%ebp)
f010148d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101490:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101493:	7c dc                	jl     f0101471 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101495:	ff 45 f0             	incl   -0x10(%ebp)
f0101498:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010149b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010149e:	7c c8                	jl     f0101468 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f01014a0:	b8 00 00 00 00       	mov    $0x0,%eax


}
f01014a5:	c9                   	leave  
f01014a6:	c3                   	ret    

f01014a7 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f01014a7:	55                   	push   %ebp
f01014a8:	89 e5                	mov    %esp,%ebp
f01014aa:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f01014ad:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01014b1:	75 42                	jne    f01014f5 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01014b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b6:	83 c0 04             	add    $0x4,%eax
f01014b9:	8b 00                	mov    (%eax),%eax
f01014bb:	83 ec 04             	sub    $0x4,%esp
f01014be:	6a 10                	push   $0x10
f01014c0:	6a 00                	push   $0x0
f01014c2:	50                   	push   %eax
f01014c3:	e8 86 fa 02 00       	call   f0130f4e <strtol>
f01014c8:	83 c4 10             	add    $0x10,%esp
f01014cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01014ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01014d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01014d7:	8a 00                	mov    (%eax),%al
f01014d9:	0f b6 c0             	movzbl %al,%eax
f01014dc:	83 ec 04             	sub    $0x4,%esp
f01014df:	50                   	push   %eax
f01014e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01014e3:	68 ba 40 13 f0       	push   $0xf01340ba
f01014e8:	e8 95 f7 ff ff       	call   f0100c82 <cprintf>
f01014ed:	83 c4 10             	add    $0x10,%esp
f01014f0:	e9 c4 00 00 00       	jmp    f01015b9 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014f5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014f9:	0f 85 aa 00 00 00    	jne    f01015a9 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101502:	83 c0 04             	add    $0x4,%eax
f0101505:	8b 00                	mov    (%eax),%eax
f0101507:	83 ec 04             	sub    $0x4,%esp
f010150a:	6a 0a                	push   $0xa
f010150c:	6a 00                	push   $0x0
f010150e:	50                   	push   %eax
f010150f:	e8 3a fa 02 00       	call   f0130f4e <strtol>
f0101514:	83 c4 10             	add    $0x10,%esp
f0101517:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010151a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101521:	83 ec 04             	sub    $0x4,%esp
f0101524:	6a 00                	push   $0x0
f0101526:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101529:	50                   	push   %eax
f010152a:	ff 75 f4             	pushl  -0xc(%ebp)
f010152d:	e8 d5 83 00 00       	call   f0109907 <envid2env>
f0101532:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101535:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101538:	83 c0 08             	add    $0x8,%eax
f010153b:	8b 00                	mov    (%eax),%eax
f010153d:	83 ec 04             	sub    $0x4,%esp
f0101540:	6a 10                	push   $0x10
f0101542:	6a 00                	push   $0x0
f0101544:	50                   	push   %eax
f0101545:	e8 04 fa 02 00       	call   f0130f4e <strtol>
f010154a:	83 c4 10             	add    $0x10,%esp
f010154d:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101550:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101553:	85 c0                	test   %eax,%eax
f0101555:	75 07                	jne    f010155e <command_readusermem+0xb7>
f0101557:	b8 00 00 00 00       	mov    $0x0,%eax
f010155c:	eb 60                	jmp    f01015be <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010155e:	0f 20 d8             	mov    %cr3,%eax
f0101561:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101564:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101567:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010156a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010156d:	8b 40 60             	mov    0x60(%eax),%eax
f0101570:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101573:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101576:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010157c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f010157f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101582:	8a 00                	mov    (%eax),%al
f0101584:	0f b6 c0             	movzbl %al,%eax
f0101587:	83 ec 04             	sub    $0x4,%esp
f010158a:	50                   	push   %eax
f010158b:	ff 75 f0             	pushl  -0x10(%ebp)
f010158e:	68 ba 40 13 f0       	push   $0xf01340ba
f0101593:	e8 ea f6 ff ff       	call   f0100c82 <cprintf>
f0101598:	83 c4 10             	add    $0x10,%esp
f010159b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010159e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01015a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a4:	0f 22 d8             	mov    %eax,%cr3
f01015a7:	eb 10                	jmp    f01015b9 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f01015a9:	83 ec 0c             	sub    $0xc,%esp
f01015ac:	68 d4 40 13 f0       	push   $0xf01340d4
f01015b1:	e8 cc f6 ff ff       	call   f0100c82 <cprintf>
f01015b6:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01015b9:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01015be:	c9                   	leave  
f01015bf:	c3                   	ret    

f01015c0 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f01015c0:	55                   	push   %ebp
f01015c1:	89 e5                	mov    %esp,%ebp
f01015c3:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015c9:	83 c0 04             	add    $0x4,%eax
f01015cc:	8b 00                	mov    (%eax),%eax
f01015ce:	83 ec 04             	sub    $0x4,%esp
f01015d1:	6a 10                	push   $0x10
f01015d3:	6a 00                	push   $0x0
f01015d5:	50                   	push   %eax
f01015d6:	e8 73 f9 02 00       	call   f0130f4e <strtol>
f01015db:	83 c4 10             	add    $0x10,%esp
f01015de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01015e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01015e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015e9:	83 c0 08             	add    $0x8,%eax
f01015ec:	8b 00                	mov    (%eax),%eax
f01015ee:	83 ec 04             	sub    $0x4,%esp
f01015f1:	6a 0a                	push   $0xa
f01015f3:	6a 00                	push   $0x0
f01015f5:	50                   	push   %eax
f01015f6:	e8 53 f9 02 00       	call   f0130f4e <strtol>
f01015fb:	83 c4 10             	add    $0x10,%esp
f01015fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101601:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101608:	eb 22                	jmp    f010162c <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f010160a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010160d:	8d 50 01             	lea    0x1(%eax),%edx
f0101610:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101613:	8a 00                	mov    (%eax),%al
f0101615:	0f b6 c0             	movzbl %al,%eax
f0101618:	83 ec 08             	sub    $0x8,%esp
f010161b:	50                   	push   %eax
f010161c:	68 fe 40 13 f0       	push   $0xf01340fe
f0101621:	e8 5c f6 ff ff       	call   f0100c82 <cprintf>
f0101626:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101629:	ff 45 f0             	incl   -0x10(%ebp)
f010162c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010162f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101632:	7c d6                	jl     f010160a <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101634:	83 ec 0c             	sub    $0xc,%esp
f0101637:	68 01 41 13 f0       	push   $0xf0134101
f010163c:	e8 41 f6 ff ff       	call   f0100c82 <cprintf>
f0101641:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101644:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101649:	c9                   	leave  
f010164a:	c3                   	ret    

f010164b <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f010164b:	55                   	push   %ebp
f010164c:	89 e5                	mov    %esp,%ebp
f010164e:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101654:	83 c0 04             	add    $0x4,%eax
f0101657:	8b 00                	mov    (%eax),%eax
f0101659:	83 ec 04             	sub    $0x4,%esp
f010165c:	6a 0a                	push   $0xa
f010165e:	6a 00                	push   $0x0
f0101660:	50                   	push   %eax
f0101661:	e8 e8 f8 02 00       	call   f0130f4e <strtol>
f0101666:	83 c4 10             	add    $0x10,%esp
f0101669:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010166c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101673:	83 ec 04             	sub    $0x4,%esp
f0101676:	6a 00                	push   $0x0
f0101678:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010167b:	50                   	push   %eax
f010167c:	ff 75 ec             	pushl  -0x14(%ebp)
f010167f:	e8 83 82 00 00       	call   f0109907 <envid2env>
f0101684:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101687:	8b 45 0c             	mov    0xc(%ebp),%eax
f010168a:	83 c0 08             	add    $0x8,%eax
f010168d:	8b 00                	mov    (%eax),%eax
f010168f:	83 ec 04             	sub    $0x4,%esp
f0101692:	6a 10                	push   $0x10
f0101694:	6a 00                	push   $0x0
f0101696:	50                   	push   %eax
f0101697:	e8 b2 f8 02 00       	call   f0130f4e <strtol>
f010169c:	83 c4 10             	add    $0x10,%esp
f010169f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01016a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a5:	83 c0 0c             	add    $0xc,%eax
f01016a8:	8b 00                	mov    (%eax),%eax
f01016aa:	83 ec 04             	sub    $0x4,%esp
f01016ad:	6a 0a                	push   $0xa
f01016af:	6a 00                	push   $0x0
f01016b1:	50                   	push   %eax
f01016b2:	e8 97 f8 02 00       	call   f0130f4e <strtol>
f01016b7:	83 c4 10             	add    $0x10,%esp
f01016ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f01016bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01016c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f01016c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016c6:	85 c0                	test   %eax,%eax
f01016c8:	75 07                	jne    f01016d1 <command_readuserblock+0x86>
f01016ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01016cf:	eb 65                	jmp    f0101736 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01016d1:	0f 20 d8             	mov    %cr3,%eax
f01016d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f01016d7:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f01016da:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f01016dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01016e0:	8b 40 60             	mov    0x60(%eax),%eax
f01016e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01016e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016e9:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f01016ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016f3:	eb 28                	jmp    f010171d <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016f8:	8a 00                	mov    (%eax),%al
f01016fa:	0f b6 d0             	movzbl %al,%edx
f01016fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101700:	8a 00                	mov    (%eax),%al
f0101702:	0f b6 c0             	movzbl %al,%eax
f0101705:	52                   	push   %edx
f0101706:	50                   	push   %eax
f0101707:	ff 75 f4             	pushl  -0xc(%ebp)
f010170a:	68 03 41 13 f0       	push   $0xf0134103
f010170f:	e8 6e f5 ff ff       	call   f0100c82 <cprintf>
f0101714:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101717:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010171a:	ff 45 f0             	incl   -0x10(%ebp)
f010171d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101720:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101723:	7c d0                	jl     f01016f5 <command_readuserblock+0xaa>
f0101725:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101728:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010172b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010172e:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101731:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101736:	c9                   	leave  
f0101737:	c3                   	ret    

f0101738 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101738:	55                   	push   %ebp
f0101739:	89 e5                	mov    %esp,%ebp
f010173b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010173e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101741:	83 c0 04             	add    $0x4,%eax
f0101744:	8b 00                	mov    (%eax),%eax
f0101746:	83 ec 04             	sub    $0x4,%esp
f0101749:	6a 0a                	push   $0xa
f010174b:	6a 00                	push   $0x0
f010174d:	50                   	push   %eax
f010174e:	e8 fb f7 02 00       	call   f0130f4e <strtol>
f0101753:	83 c4 10             	add    $0x10,%esp
f0101756:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101759:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101760:	83 ec 04             	sub    $0x4,%esp
f0101763:	6a 00                	push   $0x0
f0101765:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101768:	50                   	push   %eax
f0101769:	ff 75 f4             	pushl  -0xc(%ebp)
f010176c:	e8 96 81 00 00       	call   f0109907 <envid2env>
f0101771:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101774:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101777:	85 c0                	test   %eax,%eax
f0101779:	75 0a                	jne    f0101785 <command_remove_table+0x4d>
f010177b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101780:	e9 c7 00 00 00       	jmp    f010184c <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101785:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101788:	83 c0 08             	add    $0x8,%eax
f010178b:	8b 00                	mov    (%eax),%eax
f010178d:	83 ec 04             	sub    $0x4,%esp
f0101790:	6a 10                	push   $0x10
f0101792:	6a 00                	push   $0x0
f0101794:	50                   	push   %eax
f0101795:	e8 b4 f7 02 00       	call   f0130f4e <strtol>
f010179a:	83 c4 10             	add    $0x10,%esp
f010179d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01017a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01017a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01017af:	c1 ea 16             	shr    $0x16,%edx
f01017b2:	c1 e2 02             	shl    $0x2,%edx
f01017b5:	01 d0                	add    %edx,%eax
f01017b7:	8b 00                	mov    (%eax),%eax
f01017b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01017be:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f01017c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01017c4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01017c9:	77 1c                	ja     f01017e7 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f01017cb:	83 ec 0c             	sub    $0xc,%esp
f01017ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01017d1:	e8 11 62 00 00       	call   f01079e7 <kheap_virtual_address>
f01017d6:	83 c4 10             	add    $0x10,%esp
f01017d9:	83 ec 0c             	sub    $0xc,%esp
f01017dc:	50                   	push   %eax
f01017dd:	e8 de 60 00 00       	call   f01078c0 <kfree>
f01017e2:	83 c4 10             	add    $0x10,%esp
f01017e5:	eb 28                	jmp    f010180f <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f01017e7:	83 ec 0c             	sub    $0xc,%esp
f01017ea:	ff 75 e8             	pushl  -0x18(%ebp)
f01017ed:	e8 a9 f7 ff ff       	call   f0100f9b <to_frame_info>
f01017f2:	83 c4 10             	add    $0x10,%esp
f01017f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f01017f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01017fb:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101801:	83 ec 0c             	sub    $0xc,%esp
f0101804:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101807:	e8 24 51 00 00       	call   f0106930 <free_frame>
f010180c:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010180f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101812:	c1 e8 16             	shr    $0x16,%eax
f0101815:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101818:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010181e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101821:	c1 e2 02             	shl    $0x2,%edx
f0101824:	01 c2                	add    %eax,%edx
f0101826:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101829:	8b 40 5c             	mov    0x5c(%eax),%eax
f010182c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f010182f:	c1 e1 02             	shl    $0x2,%ecx
f0101832:	01 c8                	add    %ecx,%eax
f0101834:	8b 00                	mov    (%eax),%eax
f0101836:	83 e0 fe             	and    $0xfffffffe,%eax
f0101839:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010183b:	0f 20 d8             	mov    %cr3,%eax
f010183e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101841:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101844:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101847:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010184c:	c9                   	leave  
f010184d:	c3                   	ret    

f010184e <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f010184e:	55                   	push   %ebp
f010184f:	89 e5                	mov    %esp,%ebp
f0101851:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0101854:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101858:	7e 06                	jle    f0101860 <command_allocuserpage+0x12>
f010185a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010185e:	7e 1a                	jle    f010187a <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101860:	83 ec 0c             	sub    $0xc,%esp
f0101863:	68 14 41 13 f0       	push   $0xf0134114
f0101868:	e8 15 f4 ff ff       	call   f0100c82 <cprintf>
f010186d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101870:	b8 00 00 00 00       	mov    $0x0,%eax
f0101875:	e9 46 01 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f010187a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010187d:	83 c0 04             	add    $0x4,%eax
f0101880:	8b 00                	mov    (%eax),%eax
f0101882:	83 ec 04             	sub    $0x4,%esp
f0101885:	6a 0a                	push   $0xa
f0101887:	6a 00                	push   $0x0
f0101889:	50                   	push   %eax
f010188a:	e8 bf f6 02 00       	call   f0130f4e <strtol>
f010188f:	83 c4 10             	add    $0x10,%esp
f0101892:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101895:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f010189c:	83 ec 04             	sub    $0x4,%esp
f010189f:	6a 00                	push   $0x0
f01018a1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01018a4:	50                   	push   %eax
f01018a5:	ff 75 f0             	pushl  -0x10(%ebp)
f01018a8:	e8 5a 80 00 00       	call   f0109907 <envid2env>
f01018ad:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01018b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018b3:	85 c0                	test   %eax,%eax
f01018b5:	75 0a                	jne    f01018c1 <command_allocuserpage+0x73>
f01018b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01018bc:	e9 ff 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f01018c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018c4:	83 c0 08             	add    $0x8,%eax
f01018c7:	8b 00                	mov    (%eax),%eax
f01018c9:	83 ec 04             	sub    $0x4,%esp
f01018cc:	6a 10                	push   $0x10
f01018ce:	6a 00                	push   $0x0
f01018d0:	50                   	push   %eax
f01018d1:	e8 78 f6 02 00       	call   f0130f4e <strtol>
f01018d6:	83 c4 10             	add    $0x10,%esp
f01018d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f01018dc:	83 ec 0c             	sub    $0xc,%esp
f01018df:	8d 45 e0             	lea    -0x20(%ebp),%eax
f01018e2:	50                   	push   %eax
f01018e3:	e8 33 4f 00 00       	call   f010681b <allocate_frame>
f01018e8:	83 c4 10             	add    $0x10,%esp
f01018eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f01018ee:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f01018f2:	75 1a                	jne    f010190e <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f01018f4:	83 ec 0c             	sub    $0xc,%esp
f01018f7:	68 3e 41 13 f0       	push   $0xf013413e
f01018fc:	e8 81 f3 ff ff       	call   f0100c82 <cprintf>
f0101901:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101904:	b8 00 00 00 00       	mov    $0x0,%eax
f0101909:	e9 b2 00 00 00       	jmp    f01019c0 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010190e:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101912:	75 1d                	jne    f0101931 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101914:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101917:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010191a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010191d:	6a 06                	push   $0x6
f010191f:	ff 75 ec             	pushl  -0x14(%ebp)
f0101922:	52                   	push   %edx
f0101923:	50                   	push   %eax
f0101924:	e8 41 53 00 00       	call   f0106c6a <map_frame>
f0101929:	83 c4 10             	add    $0x10,%esp
f010192c:	e9 8a 00 00 00       	jmp    f01019bb <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0101931:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101935:	0f 85 80 00 00 00    	jne    f01019bb <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f010193b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010193e:	83 c0 0c             	add    $0xc,%eax
f0101941:	8b 00                	mov    (%eax),%eax
f0101943:	8a 00                	mov    (%eax),%al
f0101945:	3c 72                	cmp    $0x72,%al
f0101947:	74 0e                	je     f0101957 <command_allocuserpage+0x109>
f0101949:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194c:	83 c0 0c             	add    $0xc,%eax
f010194f:	8b 00                	mov    (%eax),%eax
f0101951:	8a 00                	mov    (%eax),%al
f0101953:	3c 52                	cmp    $0x52,%al
f0101955:	75 09                	jne    f0101960 <command_allocuserpage+0x112>
			rw = 0 ;
f0101957:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010195e:	eb 3c                	jmp    f010199c <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101960:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101963:	83 c0 0c             	add    $0xc,%eax
f0101966:	8b 00                	mov    (%eax),%eax
f0101968:	8a 00                	mov    (%eax),%al
f010196a:	3c 77                	cmp    $0x77,%al
f010196c:	74 0e                	je     f010197c <command_allocuserpage+0x12e>
f010196e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101971:	83 c0 0c             	add    $0xc,%eax
f0101974:	8b 00                	mov    (%eax),%eax
f0101976:	8a 00                	mov    (%eax),%al
f0101978:	3c 57                	cmp    $0x57,%al
f010197a:	75 09                	jne    f0101985 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f010197c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101983:	eb 17                	jmp    f010199c <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101985:	83 ec 0c             	sub    $0xc,%esp
f0101988:	68 58 41 13 f0       	push   $0xf0134158
f010198d:	e8 f0 f2 ff ff       	call   f0100c82 <cprintf>
f0101992:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101995:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f010199c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010199f:	83 c8 04             	or     $0x4,%eax
f01019a2:	89 c1                	mov    %eax,%ecx
f01019a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019aa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019ad:	51                   	push   %ecx
f01019ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01019b1:	52                   	push   %edx
f01019b2:	50                   	push   %eax
f01019b3:	e8 b2 52 00 00       	call   f0106c6a <map_frame>
f01019b8:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01019bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019c0:	c9                   	leave  
f01019c1:	c3                   	ret    

f01019c2 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f01019c2:	55                   	push   %ebp
f01019c3:	89 e5                	mov    %esp,%ebp
f01019c5:	56                   	push   %esi
f01019c6:	53                   	push   %ebx
f01019c7:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f01019ca:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 2e 55 00 00       	call   f0106f04 <calculate_available_frames>
f01019d6:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019d9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01019df:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f01019e2:	8b 75 ec             	mov    -0x14(%ebp),%esi
f01019e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01019e8:	01 de                	add    %ebx,%esi
f01019ea:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f01019ed:	01 f3                	add    %esi,%ebx
f01019ef:	83 ec 0c             	sub    $0xc,%esp
f01019f2:	51                   	push   %ecx
f01019f3:	52                   	push   %edx
f01019f4:	50                   	push   %eax
f01019f5:	53                   	push   %ebx
f01019f6:	68 9c 41 13 f0       	push   $0xf013419c
f01019fb:	e8 82 f2 ff ff       	call   f0100c82 <cprintf>
f0101a00:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a03:	a1 74 7b 65 f0       	mov    0xf0657b74,%eax
f0101a08:	83 ec 08             	sub    $0x8,%esp
f0101a0b:	50                   	push   %eax
f0101a0c:	68 f4 41 13 f0       	push   $0xf01341f4
f0101a11:	e8 6c f2 ff ff       	call   f0100c82 <cprintf>
f0101a16:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a21:	5b                   	pop    %ebx
f0101a22:	5e                   	pop    %esi
f0101a23:	5d                   	pop    %ebp
f0101a24:	c3                   	ret    

f0101a25 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a25:	55                   	push   %ebp
f0101a26:	89 e5                	mov    %esp,%ebp
f0101a28:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a2b:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101a32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101a39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0101a43:	83 f8 04             	cmp    $0x4,%eax
f0101a46:	0f 84 94 00 00 00    	je     f0101ae0 <CreateEnv+0xbb>
f0101a4c:	83 f8 05             	cmp    $0x5,%eax
f0101a4f:	74 0e                	je     f0101a5f <CreateEnv+0x3a>
f0101a51:	83 f8 03             	cmp    $0x3,%eax
f0101a54:	0f 84 ec 00 00 00    	je     f0101b46 <CreateEnv+0x121>
f0101a5a:	e9 2f 01 00 00       	jmp    f0101b8e <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a5f:	83 ec 0c             	sub    $0xc,%esp
f0101a62:	6a 02                	push   $0x2
f0101a64:	e8 fc bf 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0101a69:	83 c4 10             	add    $0x10,%esp
f0101a6c:	85 c0                	test   %eax,%eax
f0101a6e:	75 1a                	jne    f0101a8a <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101a70:	83 ec 0c             	sub    $0xc,%esp
f0101a73:	68 30 42 13 f0       	push   $0xf0134230
f0101a78:	e8 05 f2 ff ff       	call   f0100c82 <cprintf>
f0101a7d:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a85:	e9 d5 01 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a8d:	83 c0 10             	add    $0x10,%eax
f0101a90:	8b 00                	mov    (%eax),%eax
f0101a92:	83 ec 04             	sub    $0x4,%esp
f0101a95:	6a 0a                	push   $0xa
f0101a97:	6a 00                	push   $0x0
f0101a99:	50                   	push   %eax
f0101a9a:	e8 af f4 02 00       	call   f0130f4e <strtol>
f0101a9f:	83 c4 10             	add    $0x10,%esp
f0101aa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101aa8:	83 c0 0c             	add    $0xc,%eax
f0101aab:	8b 00                	mov    (%eax),%eax
f0101aad:	83 ec 04             	sub    $0x4,%esp
f0101ab0:	6a 0a                	push   $0xa
f0101ab2:	6a 00                	push   $0x0
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 94 f4 02 00       	call   f0130f4e <strtol>
f0101aba:	83 c4 10             	add    $0x10,%esp
f0101abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ac3:	83 c0 08             	add    $0x8,%eax
f0101ac6:	8b 00                	mov    (%eax),%eax
f0101ac8:	83 ec 04             	sub    $0x4,%esp
f0101acb:	6a 0a                	push   $0xa
f0101acd:	6a 00                	push   $0x0
f0101acf:	50                   	push   %eax
f0101ad0:	e8 79 f4 02 00       	call   f0130f4e <strtol>
f0101ad5:	83 c4 10             	add    $0x10,%esp
f0101ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101adb:	e9 c8 00 00 00       	jmp    f0101ba8 <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ae0:	83 ec 0c             	sub    $0xc,%esp
f0101ae3:	6a 02                	push   $0x2
f0101ae5:	e8 7b bf 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0101aea:	83 c4 10             	add    $0x10,%esp
f0101aed:	85 c0                	test   %eax,%eax
f0101aef:	75 1d                	jne    f0101b0e <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101af1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101af4:	83 c0 0c             	add    $0xc,%eax
f0101af7:	8b 00                	mov    (%eax),%eax
f0101af9:	83 ec 04             	sub    $0x4,%esp
f0101afc:	6a 0a                	push   $0xa
f0101afe:	6a 00                	push   $0x0
f0101b00:	50                   	push   %eax
f0101b01:	e8 48 f4 02 00       	call   f0130f4e <strtol>
f0101b06:	83 c4 10             	add    $0x10,%esp
f0101b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b0c:	eb 1b                	jmp    f0101b29 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b11:	83 c0 0c             	add    $0xc,%eax
f0101b14:	8b 00                	mov    (%eax),%eax
f0101b16:	83 ec 04             	sub    $0x4,%esp
f0101b19:	6a 0a                	push   $0xa
f0101b1b:	6a 00                	push   $0x0
f0101b1d:	50                   	push   %eax
f0101b1e:	e8 2b f4 02 00       	call   f0130f4e <strtol>
f0101b23:	83 c4 10             	add    $0x10,%esp
f0101b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b2c:	83 c0 08             	add    $0x8,%eax
f0101b2f:	8b 00                	mov    (%eax),%eax
f0101b31:	83 ec 04             	sub    $0x4,%esp
f0101b34:	6a 0a                	push   $0xa
f0101b36:	6a 00                	push   $0x0
f0101b38:	50                   	push   %eax
f0101b39:	e8 10 f4 02 00       	call   f0130f4e <strtol>
f0101b3e:	83 c4 10             	add    $0x10,%esp
f0101b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b44:	eb 62                	jmp    f0101ba8 <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b46:	83 ec 0c             	sub    $0xc,%esp
f0101b49:	6a 02                	push   $0x2
f0101b4b:	e8 15 bf 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0101b50:	83 c4 10             	add    $0x10,%esp
f0101b53:	85 c0                	test   %eax,%eax
f0101b55:	74 1a                	je     f0101b71 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101b57:	83 ec 0c             	sub    $0xc,%esp
f0101b5a:	68 f0 42 13 f0       	push   $0xf01342f0
f0101b5f:	e8 1e f1 ff ff       	call   f0100c82 <cprintf>
f0101b64:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b6c:	e9 ee 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b74:	83 c0 08             	add    $0x8,%eax
f0101b77:	8b 00                	mov    (%eax),%eax
f0101b79:	83 ec 04             	sub    $0x4,%esp
f0101b7c:	6a 0a                	push   $0xa
f0101b7e:	6a 00                	push   $0x0
f0101b80:	50                   	push   %eax
f0101b81:	e8 c8 f3 02 00       	call   f0130f4e <strtol>
f0101b86:	83 c4 10             	add    $0x10,%esp
f0101b89:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b8c:	eb 1a                	jmp    f0101ba8 <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b8e:	83 ec 0c             	sub    $0xc,%esp
f0101b91:	68 80 43 13 f0       	push   $0xf0134380
f0101b96:	e8 e7 f0 ff ff       	call   f0100c82 <cprintf>
f0101b9b:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101b9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ba3:	e9 b7 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101ba8:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101baf:	76 1f                	jbe    f0101bd0 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101bb1:	83 ec 08             	sub    $0x8,%esp
f0101bb4:	68 88 13 00 00       	push   $0x1388
f0101bb9:	68 18 44 13 f0       	push   $0xf0134418
f0101bbe:	e8 bf f0 ff ff       	call   f0100c82 <cprintf>
f0101bc3:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101bc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bcb:	e9 8f 00 00 00       	jmp    f0101c5f <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bd0:	83 ec 0c             	sub    $0xc,%esp
f0101bd3:	6a 02                	push   $0x2
f0101bd5:	e8 8b be 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0101bda:	83 c4 10             	add    $0x10,%esp
f0101bdd:	85 c0                	test   %eax,%eax
f0101bdf:	74 20                	je     f0101c01 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101be4:	48                   	dec    %eax
f0101be5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101be8:	73 17                	jae    f0101c01 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101bea:	83 ec 0c             	sub    $0xc,%esp
f0101bed:	68 58 44 13 f0       	push   $0xf0134458
f0101bf2:	e8 8b f0 ff ff       	call   f0100c82 <cprintf>
f0101bf7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bff:	eb 5e                	jmp    f0101c5f <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c01:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c05:	76 19                	jbe    f0101c20 <CreateEnv+0x1fb>
f0101c07:	68 b0 44 13 f0       	push   $0xf01344b0
f0101c0c:	68 f5 44 13 f0       	push   $0xf01344f5
f0101c11:	68 5a 02 00 00       	push   $0x25a
f0101c16:	68 79 40 13 f0       	push   $0xf0134079
f0101c1b:	e8 db e5 ff ff       	call   f01001fb <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c20:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c24:	76 19                	jbe    f0101c3f <CreateEnv+0x21a>
f0101c26:	68 b0 44 13 f0       	push   $0xf01344b0
f0101c2b:	68 f5 44 13 f0       	push   $0xf01344f5
f0101c30:	68 71 02 00 00       	push   $0x271
f0101c35:	68 79 40 13 f0       	push   $0xf0134079
f0101c3a:	e8 bc e5 ff ff       	call   f01001fb <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c42:	83 c0 04             	add    $0x4,%eax
f0101c45:	8b 00                	mov    (%eax),%eax
f0101c47:	ff 75 ec             	pushl  -0x14(%ebp)
f0101c4a:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c50:	50                   	push   %eax
f0101c51:	e8 0a 70 00 00       	call   f0108c60 <env_create>
f0101c56:	83 c4 10             	add    $0x10,%esp
f0101c59:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101c5f:	c9                   	leave  
f0101c60:	c3                   	ret    

f0101c61 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101c61:	55                   	push   %ebp
f0101c62:	89 e5                	mov    %esp,%ebp
f0101c64:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101c67:	83 ec 08             	sub    $0x8,%esp
f0101c6a:	ff 75 0c             	pushl  0xc(%ebp)
f0101c6d:	ff 75 08             	pushl  0x8(%ebp)
f0101c70:	e8 b0 fd ff ff       	call   f0101a25 <CreateEnv>
f0101c75:	83 c4 10             	add    $0x10,%esp
f0101c78:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101c7f:	75 07                	jne    f0101c88 <command_run_program+0x27>
f0101c81:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c86:	eb 46                	jmp    f0101cce <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c8b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101c8e:	83 ec 08             	sub    $0x8,%esp
f0101c91:	50                   	push   %eax
f0101c92:	68 0a 45 13 f0       	push   $0xf013450a
f0101c97:	e8 e6 ef ff ff       	call   f0100c82 <cprintf>
f0101c9c:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101c9f:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101ca6:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101ca9:	83 ec 0c             	sub    $0xc,%esp
f0101cac:	ff 75 f4             	pushl  -0xc(%ebp)
f0101caf:	e8 79 34 00 00       	call   f010512d <sched_new_env>
f0101cb4:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101cb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cba:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101cbd:	83 ec 0c             	sub    $0xc,%esp
f0101cc0:	50                   	push   %eax
f0101cc1:	e8 84 34 00 00       	call   f010514a <sched_run_env>
f0101cc6:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101cc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cce:	c9                   	leave  
f0101ccf:	c3                   	ret    

f0101cd0 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101cd0:	55                   	push   %ebp
f0101cd1:	89 e5                	mov    %esp,%ebp
f0101cd3:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd9:	83 c0 04             	add    $0x4,%eax
f0101cdc:	8b 00                	mov    (%eax),%eax
f0101cde:	83 ec 04             	sub    $0x4,%esp
f0101ce1:	6a 0a                	push   $0xa
f0101ce3:	6a 00                	push   $0x0
f0101ce5:	50                   	push   %eax
f0101ce6:	e8 63 f2 02 00       	call   f0130f4e <strtol>
f0101ceb:	83 c4 10             	add    $0x10,%esp
f0101cee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cf4:	83 ec 0c             	sub    $0xc,%esp
f0101cf7:	50                   	push   %eax
f0101cf8:	e8 6b 38 00 00       	call   f0105568 <sched_kill_env>
f0101cfd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d05:	c9                   	leave  
f0101d06:	c3                   	ret    

f0101d07 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d07:	55                   	push   %ebp
f0101d08:	89 e5                	mov    %esp,%ebp
f0101d0a:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d0d:	83 ec 08             	sub    $0x8,%esp
f0101d10:	ff 75 0c             	pushl  0xc(%ebp)
f0101d13:	ff 75 08             	pushl  0x8(%ebp)
f0101d16:	e8 0a fd ff ff       	call   f0101a25 <CreateEnv>
f0101d1b:	83 c4 10             	add    $0x10,%esp
f0101d1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d25:	75 07                	jne    f0101d2e <commnad_load_env+0x27>
		return 0 ;
f0101d27:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d2c:	eb 2a                	jmp    f0101d58 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101d2e:	83 ec 0c             	sub    $0xc,%esp
f0101d31:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d34:	e8 f4 33 00 00       	call   f010512d <sched_new_env>
f0101d39:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d42:	83 ec 08             	sub    $0x8,%esp
f0101d45:	50                   	push   %eax
f0101d46:	68 0a 45 13 f0       	push   $0xf013450a
f0101d4b:	e8 32 ef ff ff       	call   f0100c82 <cprintf>
f0101d50:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d53:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d58:	c9                   	leave  
f0101d59:	c3                   	ret    

f0101d5a <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101d5a:	55                   	push   %ebp
f0101d5b:	89 e5                	mov    %esp,%ebp
f0101d5d:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101d60:	c7 05 74 7b 65 f0 00 	movl   $0x0,0xf0657b74
f0101d67:	00 00 00 
	sched_run_all();
f0101d6a:	e8 06 30 00 00       	call   f0104d75 <sched_run_all>

	return 0 ;
f0101d6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d74:	c9                   	leave  
f0101d75:	c3                   	ret    

f0101d76 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101d76:	55                   	push   %ebp
f0101d77:	89 e5                	mov    %esp,%ebp
f0101d79:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101d7c:	e8 ea 2d 00 00       	call   f0104b6b <sched_print_all>

	return 0 ;
f0101d81:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d86:	c9                   	leave  
f0101d87:	c3                   	ret    

f0101d88 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101d88:	55                   	push   %ebp
f0101d89:	89 e5                	mov    %esp,%ebp
f0101d8b:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101d8e:	e8 55 30 00 00       	call   f0104de8 <sched_kill_all>

	return 0 ;
f0101d93:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d98:	c9                   	leave  
f0101d99:	c3                   	ret    

f0101d9a <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101d9a:	55                   	push   %ebp
f0101d9b:	89 e5                	mov    %esp,%ebp
f0101d9d:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101da0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101da4:	7f 1a                	jg     f0101dc0 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101da6:	83 ec 0c             	sub    $0xc,%esp
f0101da9:	68 20 45 13 f0       	push   $0xf0134520
f0101dae:	e8 cf ee ff ff       	call   f0100c82 <cprintf>
f0101db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbb:	e9 83 00 00 00       	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101dc3:	83 c0 04             	add    $0x4,%eax
f0101dc6:	8b 00                	mov    (%eax),%eax
f0101dc8:	83 ec 04             	sub    $0x4,%esp
f0101dcb:	6a 0a                	push   $0xa
f0101dcd:	6a 00                	push   $0x0
f0101dcf:	50                   	push   %eax
f0101dd0:	e8 79 f1 02 00       	call   f0130f4e <strtol>
f0101dd5:	83 c4 10             	add    $0x10,%esp
f0101dd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101ddb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101ddf:	75 20                	jne    f0101e01 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101de1:	83 ec 0c             	sub    $0xc,%esp
f0101de4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101de7:	e8 ee bb 00 00       	call   f010d9da <setPageReplacmentAlgorithmLRU>
f0101dec:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101def:	83 ec 0c             	sub    $0xc,%esp
f0101df2:	68 80 45 13 f0       	push   $0xf0134580
f0101df7:	e8 86 ee ff ff       	call   f0100c82 <cprintf>
f0101dfc:	83 c4 10             	add    $0x10,%esp
f0101dff:	eb 3d                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e01:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e05:	75 20                	jne    f0101e27 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e07:	83 ec 0c             	sub    $0xc,%esp
f0101e0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e0d:	e8 c8 bb 00 00       	call   f010d9da <setPageReplacmentAlgorithmLRU>
f0101e12:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e15:	83 ec 0c             	sub    $0xc,%esp
f0101e18:	68 c4 45 13 f0       	push   $0xf01345c4
f0101e1d:	e8 60 ee ff ff       	call   f0100c82 <cprintf>
f0101e22:	83 c4 10             	add    $0x10,%esp
f0101e25:	eb 17                	jmp    f0101e3e <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e27:	83 ec 0c             	sub    $0xc,%esp
f0101e2a:	68 04 46 13 f0       	push   $0xf0134604
f0101e2f:	e8 4e ee ff ff       	call   f0100c82 <cprintf>
f0101e34:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e37:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e3c:	eb 05                	jmp    f0101e43 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101e3e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e43:	c9                   	leave  
f0101e44:	c3                   	ret    

f0101e45 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101e45:	55                   	push   %ebp
f0101e46:	89 e5                	mov    %esp,%ebp
f0101e48:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4e:	83 c0 04             	add    $0x4,%eax
f0101e51:	8b 00                	mov    (%eax),%eax
f0101e53:	83 ec 04             	sub    $0x4,%esp
f0101e56:	6a 0a                	push   $0xa
f0101e58:	6a 00                	push   $0x0
f0101e5a:	50                   	push   %eax
f0101e5b:	e8 ee f0 02 00       	call   f0130f4e <strtol>
f0101e60:	83 c4 10             	add    $0x10,%esp
f0101e63:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101e66:	83 ec 0c             	sub    $0xc,%esp
f0101e69:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e6c:	e8 dc bb 00 00       	call   f010da4d <setPageReplacmentAlgorithmNchanceCLOCK>
f0101e71:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101e74:	83 ec 0c             	sub    $0xc,%esp
f0101e77:	68 58 46 13 f0       	push   $0xf0134658
f0101e7c:	e8 01 ee ff ff       	call   f0100c82 <cprintf>
f0101e81:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e89:	c9                   	leave  
f0101e8a:	c3                   	ret    

f0101e8b <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101e8b:	55                   	push   %ebp
f0101e8c:	89 e5                	mov    %esp,%ebp
f0101e8e:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101e91:	e8 77 bb 00 00       	call   f010da0d <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101e96:	83 ec 0c             	sub    $0xc,%esp
f0101e99:	68 8c 46 13 f0       	push   $0xf013468c
f0101e9e:	e8 df ed ff ff       	call   f0100c82 <cprintf>
f0101ea3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ea6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eab:	c9                   	leave  
f0101eac:	c3                   	ret    

f0101ead <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101ead:	55                   	push   %ebp
f0101eae:	89 e5                	mov    %esp,%ebp
f0101eb0:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101eb3:	e8 65 bb 00 00       	call   f010da1d <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101eb8:	83 ec 0c             	sub    $0xc,%esp
f0101ebb:	68 b8 46 13 f0       	push   $0xf01346b8
f0101ec0:	e8 bd ed ff ff       	call   f0100c82 <cprintf>
f0101ec5:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ec8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ecd:	c9                   	leave  
f0101ece:	c3                   	ret    

f0101ecf <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101ecf:	55                   	push   %ebp
f0101ed0:	89 e5                	mov    %esp,%ebp
f0101ed2:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101ed5:	e8 53 bb 00 00       	call   f010da2d <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101eda:	83 ec 0c             	sub    $0xc,%esp
f0101edd:	68 e0 46 13 f0       	push   $0xf01346e0
f0101ee2:	e8 9b ed ff ff       	call   f0100c82 <cprintf>
f0101ee7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eef:	c9                   	leave  
f0101ef0:	c3                   	ret    

f0101ef1 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101ef1:	55                   	push   %ebp
f0101ef2:	89 e5                	mov    %esp,%ebp
f0101ef4:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101efa:	83 c0 04             	add    $0x4,%eax
f0101efd:	8b 00                	mov    (%eax),%eax
f0101eff:	83 ec 04             	sub    $0x4,%esp
f0101f02:	6a 0a                	push   $0xa
f0101f04:	6a 00                	push   $0x0
f0101f06:	50                   	push   %eax
f0101f07:	e8 42 f0 02 00       	call   f0130f4e <strtol>
f0101f0c:	83 c4 10             	add    $0x10,%esp
f0101f0f:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f16:	83 ec 0c             	sub    $0xc,%esp
f0101f19:	50                   	push   %eax
f0101f1a:	e8 12 28 00 00       	call   f0104731 <sched_init_RR>
f0101f1f:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f22:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0101f27:	8a 00                	mov    (%eax),%al
f0101f29:	0f b6 c0             	movzbl %al,%eax
f0101f2c:	83 ec 08             	sub    $0x8,%esp
f0101f2f:	50                   	push   %eax
f0101f30:	68 14 47 13 f0       	push   $0xf0134714
f0101f35:	e8 48 ed ff ff       	call   f0100c82 <cprintf>
f0101f3a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f42:	c9                   	leave  
f0101f43:	c3                   	ret    

f0101f44 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101f44:	55                   	push   %ebp
f0101f45:	89 e5                	mov    %esp,%ebp
f0101f47:	53                   	push   %ebx
f0101f48:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f4e:	83 c0 04             	add    $0x4,%eax
f0101f51:	8b 00                	mov    (%eax),%eax
f0101f53:	83 ec 04             	sub    $0x4,%esp
f0101f56:	6a 0a                	push   $0xa
f0101f58:	6a 00                	push   $0x0
f0101f5a:	50                   	push   %eax
f0101f5b:	e8 ee ef 02 00       	call   f0130f4e <strtol>
f0101f60:	83 c4 10             	add    $0x10,%esp
f0101f63:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f66:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101f6d:	eb 2e                	jmp    f0101f9d <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f72:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101f7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f82:	01 d0                	add    %edx,%eax
f0101f84:	8b 00                	mov    (%eax),%eax
f0101f86:	83 ec 04             	sub    $0x4,%esp
f0101f89:	6a 0a                	push   $0xa
f0101f8b:	6a 00                	push   $0x0
f0101f8d:	50                   	push   %eax
f0101f8e:	e8 bb ef 02 00       	call   f0130f4e <strtol>
f0101f93:	83 c4 10             	add    $0x10,%esp
f0101f96:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101f9a:	ff 45 f4             	incl   -0xc(%ebp)
f0101f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fa0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101fa3:	7c ca                	jl     f0101f6f <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101fa5:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101fa9:	83 ec 08             	sub    $0x8,%esp
f0101fac:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101faf:	52                   	push   %edx
f0101fb0:	50                   	push   %eax
f0101fb1:	e8 06 28 00 00       	call   f01047bc <sched_init_MLFQ>
f0101fb6:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101fb9:	83 ec 0c             	sub    $0xc,%esp
f0101fbc:	68 4c 47 13 f0       	push   $0xf013474c
f0101fc1:	e8 bc ec ff ff       	call   f0100c82 <cprintf>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101fc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fd0:	eb 24                	jmp    f0101ff6 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0101fd2:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f0101fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdb:	01 d0                	add    %edx,%eax
f0101fdd:	8a 00                	mov    (%eax),%al
f0101fdf:	0f b6 c0             	movzbl %al,%eax
f0101fe2:	83 ec 08             	sub    $0x8,%esp
f0101fe5:	50                   	push   %eax
f0101fe6:	68 79 47 13 f0       	push   $0xf0134779
f0101feb:	e8 92 ec ff ff       	call   f0100c82 <cprintf>
f0101ff0:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101ff3:	ff 45 f0             	incl   -0x10(%ebp)
f0101ff6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0101ffb:	0f b6 c0             	movzbl %al,%eax
f0101ffe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102001:	7f cf                	jg     f0101fd2 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102003:	83 ec 0c             	sub    $0xc,%esp
f0102006:	68 01 41 13 f0       	push   $0xf0134101
f010200b:	e8 72 ec ff ff       	call   f0100c82 <cprintf>
f0102010:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102018:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010201b:	c9                   	leave  
f010201c:	c3                   	ret    

f010201d <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010201d:	55                   	push   %ebp
f010201e:	89 e5                	mov    %esp,%ebp
f0102020:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102023:	e8 8d 23 00 00       	call   f01043b5 <isSchedMethodMLFQ>
f0102028:	85 c0                	test   %eax,%eax
f010202a:	74 5c                	je     f0102088 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010202c:	83 ec 0c             	sub    $0xc,%esp
f010202f:	68 80 47 13 f0       	push   $0xf0134780
f0102034:	e8 49 ec ff ff       	call   f0100c82 <cprintf>
f0102039:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010203c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102043:	eb 24                	jmp    f0102069 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f0102045:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f010204b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010204e:	01 d0                	add    %edx,%eax
f0102050:	8a 00                	mov    (%eax),%al
f0102052:	0f b6 c0             	movzbl %al,%eax
f0102055:	83 ec 08             	sub    $0x8,%esp
f0102058:	50                   	push   %eax
f0102059:	68 79 47 13 f0       	push   $0xf0134779
f010205e:	e8 1f ec ff ff       	call   f0100c82 <cprintf>
f0102063:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102066:	ff 45 f4             	incl   -0xc(%ebp)
f0102069:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010206e:	0f b6 c0             	movzbl %al,%eax
f0102071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102074:	7f cf                	jg     f0102045 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 01 41 13 f0       	push   $0xf0134101
f010207e:	e8 ff eb ff ff       	call   f0100c82 <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
f0102086:	eb 36                	jmp    f01020be <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f0102088:	e8 0e 23 00 00       	call   f010439b <isSchedMethodRR>
f010208d:	85 c0                	test   %eax,%eax
f010208f:	74 1d                	je     f01020ae <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102091:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0102096:	8a 00                	mov    (%eax),%al
f0102098:	0f b6 c0             	movzbl %al,%eax
f010209b:	83 ec 08             	sub    $0x8,%esp
f010209e:	50                   	push   %eax
f010209f:	68 b4 47 13 f0       	push   $0xf01347b4
f01020a4:	e8 d9 eb ff ff       	call   f0100c82 <cprintf>
f01020a9:	83 c4 10             	add    $0x10,%esp
f01020ac:	eb 10                	jmp    f01020be <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01020ae:	83 ec 0c             	sub    $0xc,%esp
f01020b1:	68 f0 47 13 f0       	push   $0xf01347f0
f01020b6:	e8 c7 eb ff ff       	call   f0100c82 <cprintf>
f01020bb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020c3:	c9                   	leave  
f01020c4:	c3                   	ret    

f01020c5 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01020c5:	55                   	push   %ebp
f01020c6:	89 e5                	mov    %esp,%ebp
f01020c8:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01020cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ce:	83 c0 04             	add    $0x4,%eax
f01020d1:	8b 00                	mov    (%eax),%eax
f01020d3:	83 ec 04             	sub    $0x4,%esp
f01020d6:	6a 0a                	push   $0xa
f01020d8:	6a 00                	push   $0x0
f01020da:	50                   	push   %eax
f01020db:	e8 6e ee 02 00       	call   f0130f4e <strtol>
f01020e0:	83 c4 10             	add    $0x10,%esp
f01020e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01020e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020e9:	0f b6 c0             	movzbl %al,%eax
f01020ec:	83 ec 0c             	sub    $0xc,%esp
f01020ef:	50                   	push   %eax
f01020f0:	e8 7f dd 02 00       	call   f012fe74 <chksch>
f01020f5:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f01020f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01020fc:	75 12                	jne    f0102110 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01020fe:	83 ec 0c             	sub    $0xc,%esp
f0102101:	68 18 48 13 f0       	push   $0xf0134818
f0102106:	e8 77 eb ff ff       	call   f0100c82 <cprintf>
f010210b:	83 c4 10             	add    $0x10,%esp
f010210e:	eb 16                	jmp    f0102126 <command_sch_test+0x61>
	else if (status == 1)
f0102110:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102114:	75 10                	jne    f0102126 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102116:	83 ec 0c             	sub    $0xc,%esp
f0102119:	68 40 48 13 f0       	push   $0xf0134840
f010211e:	e8 5f eb ff ff       	call   f0100c82 <cprintf>
f0102123:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102126:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010212b:	c9                   	leave  
f010212c:	c3                   	ret    

f010212d <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010212d:	55                   	push   %ebp
f010212e:	89 e5                	mov    %esp,%ebp
f0102130:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0102133:	e8 43 b9 00 00       	call   f010da7b <isPageReplacmentAlgorithmCLOCK>
f0102138:	85 c0                	test   %eax,%eax
f010213a:	74 15                	je     f0102151 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f010213c:	83 ec 0c             	sub    $0xc,%esp
f010213f:	68 64 48 13 f0       	push   $0xf0134864
f0102144:	e8 39 eb ff ff       	call   f0100c82 <cprintf>
f0102149:	83 c4 10             	add    $0x10,%esp
f010214c:	e9 8c 00 00 00       	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0102151:	83 ec 0c             	sub    $0xc,%esp
f0102154:	6a 01                	push   $0x1
f0102156:	e8 0a b9 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f010215b:	83 c4 10             	add    $0x10,%esp
f010215e:	85 c0                	test   %eax,%eax
f0102160:	74 12                	je     f0102174 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102162:	83 ec 0c             	sub    $0xc,%esp
f0102165:	68 8c 48 13 f0       	push   $0xf013488c
f010216a:	e8 13 eb ff ff       	call   f0100c82 <cprintf>
f010216f:	83 c4 10             	add    $0x10,%esp
f0102172:	eb 69                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102174:	83 ec 0c             	sub    $0xc,%esp
f0102177:	6a 02                	push   $0x2
f0102179:	e8 e7 b8 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f010217e:	83 c4 10             	add    $0x10,%esp
f0102181:	85 c0                	test   %eax,%eax
f0102183:	74 12                	je     f0102197 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0102185:	83 ec 0c             	sub    $0xc,%esp
f0102188:	68 cc 48 13 f0       	push   $0xf01348cc
f010218d:	e8 f0 ea ff ff       	call   f0100c82 <cprintf>
f0102192:	83 c4 10             	add    $0x10,%esp
f0102195:	eb 46                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0102197:	e8 fa b8 00 00       	call   f010da96 <isPageReplacmentAlgorithmFIFO>
f010219c:	85 c0                	test   %eax,%eax
f010219e:	74 12                	je     f01021b2 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01021a0:	83 ec 0c             	sub    $0xc,%esp
f01021a3:	68 08 49 13 f0       	push   $0xf0134908
f01021a8:	e8 d5 ea ff ff       	call   f0100c82 <cprintf>
f01021ad:	83 c4 10             	add    $0x10,%esp
f01021b0:	eb 2b                	jmp    f01021dd <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01021b2:	e8 fa b8 00 00       	call   f010dab1 <isPageReplacmentAlgorithmModifiedCLOCK>
f01021b7:	85 c0                	test   %eax,%eax
f01021b9:	74 12                	je     f01021cd <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01021bb:	83 ec 0c             	sub    $0xc,%esp
f01021be:	68 2c 49 13 f0       	push   $0xf013492c
f01021c3:	e8 ba ea ff ff       	call   f0100c82 <cprintf>
f01021c8:	83 c4 10             	add    $0x10,%esp
f01021cb:	eb 10                	jmp    f01021dd <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01021cd:	83 ec 0c             	sub    $0xc,%esp
f01021d0:	68 5c 49 13 f0       	push   $0xf013495c
f01021d5:	e8 a8 ea ff ff       	call   f0100c82 <cprintf>
f01021da:	83 c4 10             	add    $0x10,%esp

	return 0;
f01021dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021e2:	c9                   	leave  
f01021e3:	c3                   	ret    

f01021e4 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01021e4:	55                   	push   %ebp
f01021e5:	89 e5                	mov    %esp,%ebp
f01021e7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01021ea:	e8 18 ed ff ff       	call   f0100f07 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01021ef:	83 ec 0c             	sub    $0xc,%esp
f01021f2:	68 88 49 13 f0       	push   $0xf0134988
f01021f7:	e8 86 ea ff ff       	call   f0100c82 <cprintf>
f01021fc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102204:	c9                   	leave  
f0102205:	c3                   	ret    

f0102206 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102206:	55                   	push   %ebp
f0102207:	89 e5                	mov    %esp,%ebp
f0102209:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010220c:	e8 06 ed ff ff       	call   f0100f17 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102211:	83 ec 0c             	sub    $0xc,%esp
f0102214:	68 b8 49 13 f0       	push   $0xf01349b8
f0102219:	e8 64 ea ff ff       	call   f0100c82 <cprintf>
f010221e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102221:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102226:	c9                   	leave  
f0102227:	c3                   	ret    

f0102228 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102228:	55                   	push   %ebp
f0102229:	89 e5                	mov    %esp,%ebp
f010222b:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010222e:	e8 f4 ec ff ff       	call   f0100f27 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102233:	83 ec 0c             	sub    $0xc,%esp
f0102236:	68 e8 49 13 f0       	push   $0xf01349e8
f010223b:	e8 42 ea ff ff       	call   f0100c82 <cprintf>
f0102240:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102243:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102248:	c9                   	leave  
f0102249:	c3                   	ret    

f010224a <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010224a:	55                   	push   %ebp
f010224b:	89 e5                	mov    %esp,%ebp
f010224d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f0102250:	e8 e2 ec ff ff       	call   f0100f37 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102255:	83 ec 0c             	sub    $0xc,%esp
f0102258:	68 18 4a 13 f0       	push   $0xf0134a18
f010225d:	e8 20 ea ff ff       	call   f0100c82 <cprintf>
f0102262:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226a:	c9                   	leave  
f010226b:	c3                   	ret    

f010226c <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f010226c:	55                   	push   %ebp
f010226d:	89 e5                	mov    %esp,%ebp
f010226f:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102272:	e8 d0 ec ff ff       	call   f0100f47 <isUHeapPlacementStrategyFIRSTFIT>
f0102277:	84 c0                	test   %al,%al
f0102279:	74 12                	je     f010228d <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f010227b:	83 ec 0c             	sub    $0xc,%esp
f010227e:	68 48 4a 13 f0       	push   $0xf0134a48
f0102283:	e8 fa e9 ff ff       	call   f0100c82 <cprintf>
f0102288:	83 c4 10             	add    $0x10,%esp
f010228b:	eb 61                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010228d:	e8 ca ec ff ff       	call   f0100f5c <isUHeapPlacementStrategyBESTFIT>
f0102292:	84 c0                	test   %al,%al
f0102294:	74 12                	je     f01022a8 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	68 74 4a 13 f0       	push   $0xf0134a74
f010229e:	e8 df e9 ff ff       	call   f0100c82 <cprintf>
f01022a3:	83 c4 10             	add    $0x10,%esp
f01022a6:	eb 46                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01022a8:	e8 c4 ec ff ff       	call   f0100f71 <isUHeapPlacementStrategyNEXTFIT>
f01022ad:	84 c0                	test   %al,%al
f01022af:	74 12                	je     f01022c3 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01022b1:	83 ec 0c             	sub    $0xc,%esp
f01022b4:	68 a0 4a 13 f0       	push   $0xf0134aa0
f01022b9:	e8 c4 e9 ff ff       	call   f0100c82 <cprintf>
f01022be:	83 c4 10             	add    $0x10,%esp
f01022c1:	eb 2b                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01022c3:	e8 be ec ff ff       	call   f0100f86 <isUHeapPlacementStrategyWORSTFIT>
f01022c8:	84 c0                	test   %al,%al
f01022ca:	74 12                	je     f01022de <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01022cc:	83 ec 0c             	sub    $0xc,%esp
f01022cf:	68 cc 4a 13 f0       	push   $0xf0134acc
f01022d4:	e8 a9 e9 ff ff       	call   f0100c82 <cprintf>
f01022d9:	83 c4 10             	add    $0x10,%esp
f01022dc:	eb 10                	jmp    f01022ee <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01022de:	83 ec 0c             	sub    $0xc,%esp
f01022e1:	68 f8 4a 13 f0       	push   $0xf0134af8
f01022e6:	e8 97 e9 ff ff       	call   f0100c82 <cprintf>
f01022eb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f3:	c9                   	leave  
f01022f4:	c3                   	ret    

f01022f5 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01022f5:	55                   	push   %ebp
f01022f6:	89 e5                	mov    %esp,%ebp
f01022f8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01022fb:	e8 4f eb ff ff       	call   f0100e4f <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102300:	83 ec 0c             	sub    $0xc,%esp
f0102303:	68 24 4b 13 f0       	push   $0xf0134b24
f0102308:	e8 75 e9 ff ff       	call   f0100c82 <cprintf>
f010230d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102310:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102315:	c9                   	leave  
f0102316:	c3                   	ret    

f0102317 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102317:	55                   	push   %ebp
f0102318:	89 e5                	mov    %esp,%ebp
f010231a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010231d:	e8 3d eb ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 24 4b 13 f0       	push   $0xf0134b24
f010232a:	e8 53 e9 ff ff       	call   f0100c82 <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102332:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102337:	c9                   	leave  
f0102338:	c3                   	ret    

f0102339 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010233f:	e8 2b eb ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102344:	83 ec 0c             	sub    $0xc,%esp
f0102347:	68 58 4b 13 f0       	push   $0xf0134b58
f010234c:	e8 31 e9 ff ff       	call   f0100c82 <cprintf>
f0102351:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102359:	c9                   	leave  
f010235a:	c3                   	ret    

f010235b <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010235b:	55                   	push   %ebp
f010235c:	89 e5                	mov    %esp,%ebp
f010235e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102361:	e8 19 eb ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102366:	83 ec 0c             	sub    $0xc,%esp
f0102369:	68 88 4b 13 f0       	push   $0xf0134b88
f010236e:	e8 0f e9 ff ff       	call   f0100c82 <cprintf>
f0102373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010237b:	c9                   	leave  
f010237c:	c3                   	ret    

f010237d <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010237d:	55                   	push   %ebp
f010237e:	89 e5                	mov    %esp,%ebp
f0102380:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102383:	e8 07 eb ff ff       	call   f0100e8f <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102388:	83 ec 0c             	sub    $0xc,%esp
f010238b:	68 b8 4b 13 f0       	push   $0xf0134bb8
f0102390:	e8 ed e8 ff ff       	call   f0100c82 <cprintf>
f0102395:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010239d:	c9                   	leave  
f010239e:	c3                   	ret    

f010239f <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010239f:	55                   	push   %ebp
f01023a0:	89 e5                	mov    %esp,%ebp
f01023a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01023a5:	e8 f5 ea ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01023aa:	84 c0                	test   %al,%al
f01023ac:	74 12                	je     f01023c0 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01023ae:	83 ec 0c             	sub    $0xc,%esp
f01023b1:	68 ec 4b 13 f0       	push   $0xf0134bec
f01023b6:	e8 c7 e8 ff ff       	call   f0100c82 <cprintf>
f01023bb:	83 c4 10             	add    $0x10,%esp
f01023be:	eb 7c                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01023c0:	e8 ee ea ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01023c5:	84 c0                	test   %al,%al
f01023c7:	74 12                	je     f01023db <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01023c9:	83 ec 0c             	sub    $0xc,%esp
f01023cc:	68 28 4c 13 f0       	push   $0xf0134c28
f01023d1:	e8 ac e8 ff ff       	call   f0100c82 <cprintf>
f01023d6:	83 c4 10             	add    $0x10,%esp
f01023d9:	eb 61                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01023db:	e8 e8 ea ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01023e0:	84 c0                	test   %al,%al
f01023e2:	74 12                	je     f01023f6 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01023e4:	83 ec 0c             	sub    $0xc,%esp
f01023e7:	68 58 4c 13 f0       	push   $0xf0134c58
f01023ec:	e8 91 e8 ff ff       	call   f0100c82 <cprintf>
f01023f1:	83 c4 10             	add    $0x10,%esp
f01023f4:	eb 46                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01023f6:	e8 e2 ea ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f01023fb:	84 c0                	test   %al,%al
f01023fd:	74 12                	je     f0102411 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01023ff:	83 ec 0c             	sub    $0xc,%esp
f0102402:	68 84 4c 13 f0       	push   $0xf0134c84
f0102407:	e8 76 e8 ff ff       	call   f0100c82 <cprintf>
f010240c:	83 c4 10             	add    $0x10,%esp
f010240f:	eb 2b                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102411:	e8 dc ea ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f0102416:	84 c0                	test   %al,%al
f0102418:	74 12                	je     f010242c <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010241a:	83 ec 0c             	sub    $0xc,%esp
f010241d:	68 b0 4c 13 f0       	push   $0xf0134cb0
f0102422:	e8 5b e8 ff ff       	call   f0100c82 <cprintf>
f0102427:	83 c4 10             	add    $0x10,%esp
f010242a:	eb 10                	jmp    f010243c <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010242c:	83 ec 0c             	sub    $0xc,%esp
f010242f:	68 e0 4c 13 f0       	push   $0xf0134ce0
f0102434:	e8 49 e8 ff ff       	call   f0100c82 <cprintf>
f0102439:	83 c4 10             	add    $0x10,%esp

	return 0;
f010243c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102441:	c9                   	leave  
f0102442:	c3                   	ret    

f0102443 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102443:	55                   	push   %ebp
f0102444:	89 e5                	mov    %esp,%ebp
f0102446:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102449:	e8 da b6 00 00       	call   f010db28 <isBufferingEnabled>
f010244e:	84 c0                	test   %al,%al
f0102450:	75 12                	jne    f0102464 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102452:	83 ec 0c             	sub    $0xc,%esp
f0102455:	68 10 4d 13 f0       	push   $0xf0134d10
f010245a:	e8 23 e8 ff ff       	call   f0100c82 <cprintf>
f010245f:	83 c4 10             	add    $0x10,%esp
f0102462:	eb 1d                	jmp    f0102481 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102464:	83 ec 0c             	sub    $0xc,%esp
f0102467:	6a 00                	push   $0x0
f0102469:	e8 94 b6 00 00       	call   f010db02 <enableModifiedBuffer>
f010246e:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102471:	83 ec 0c             	sub    $0xc,%esp
f0102474:	68 4c 4d 13 f0       	push   $0xf0134d4c
f0102479:	e8 04 e8 ff ff       	call   f0100c82 <cprintf>
f010247e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102481:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102486:	c9                   	leave  
f0102487:	c3                   	ret    

f0102488 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102488:	55                   	push   %ebp
f0102489:	89 e5                	mov    %esp,%ebp
f010248b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010248e:	e8 95 b6 00 00       	call   f010db28 <isBufferingEnabled>
f0102493:	84 c0                	test   %al,%al
f0102495:	75 12                	jne    f01024a9 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102497:	83 ec 0c             	sub    $0xc,%esp
f010249a:	68 10 4d 13 f0       	push   $0xf0134d10
f010249f:	e8 de e7 ff ff       	call   f0100c82 <cprintf>
f01024a4:	83 c4 10             	add    $0x10,%esp
f01024a7:	eb 1d                	jmp    f01024c6 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01024a9:	83 ec 0c             	sub    $0xc,%esp
f01024ac:	6a 01                	push   $0x1
f01024ae:	e8 4f b6 00 00       	call   f010db02 <enableModifiedBuffer>
f01024b3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01024b6:	83 ec 0c             	sub    $0xc,%esp
f01024b9:	68 70 4d 13 f0       	push   $0xf0134d70
f01024be:	e8 bf e7 ff ff       	call   f0100c82 <cprintf>
f01024c3:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024cb:	c9                   	leave  
f01024cc:	c3                   	ret    

f01024cd <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01024cd:	55                   	push   %ebp
f01024ce:	89 e5                	mov    %esp,%ebp
f01024d0:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01024d3:	83 ec 0c             	sub    $0xc,%esp
f01024d6:	6a 00                	push   $0x0
f01024d8:	e8 3d b6 00 00       	call   f010db1a <enableBuffering>
f01024dd:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01024e0:	83 ec 0c             	sub    $0xc,%esp
f01024e3:	6a 00                	push   $0x0
f01024e5:	e8 18 b6 00 00       	call   f010db02 <enableModifiedBuffer>
f01024ea:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01024ed:	83 ec 0c             	sub    $0xc,%esp
f01024f0:	68 90 4d 13 f0       	push   $0xf0134d90
f01024f5:	e8 88 e7 ff ff       	call   f0100c82 <cprintf>
f01024fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102502:	c9                   	leave  
f0102503:	c3                   	ret    

f0102504 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102504:	55                   	push   %ebp
f0102505:	89 e5                	mov    %esp,%ebp
f0102507:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	6a 01                	push   $0x1
f010250f:	e8 06 b6 00 00       	call   f010db1a <enableBuffering>
f0102514:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102517:	83 ec 0c             	sub    $0xc,%esp
f010251a:	6a 01                	push   $0x1
f010251c:	e8 e1 b5 00 00       	call   f010db02 <enableModifiedBuffer>
f0102521:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102524:	e8 17 b6 00 00       	call   f010db40 <getModifiedBufferLength>
f0102529:	85 c0                	test   %eax,%eax
f010252b:	75 59                	jne    f0102586 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010252d:	83 ec 0c             	sub    $0xc,%esp
f0102530:	68 ac 4d 13 f0       	push   $0xf0134dac
f0102535:	e8 48 e7 ff ff       	call   f0100c82 <cprintf>
f010253a:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010253d:	83 ec 08             	sub    $0x8,%esp
f0102540:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102543:	50                   	push   %eax
f0102544:	68 dc 4d 13 f0       	push   $0xf0134ddc
f0102549:	e8 9a e4 02 00       	call   f01309e8 <readline>
f010254e:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	6a 0a                	push   $0xa
f0102556:	6a 00                	push   $0x0
f0102558:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010255b:	50                   	push   %eax
f010255c:	e8 ed e9 02 00       	call   f0130f4e <strtol>
f0102561:	83 c4 10             	add    $0x10,%esp
f0102564:	83 ec 0c             	sub    $0xc,%esp
f0102567:	50                   	push   %eax
f0102568:	e8 c5 b5 00 00       	call   f010db32 <setModifiedBufferLength>
f010256d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102570:	e8 cb b5 00 00       	call   f010db40 <getModifiedBufferLength>
f0102575:	83 ec 08             	sub    $0x8,%esp
f0102578:	50                   	push   %eax
f0102579:	68 08 4e 13 f0       	push   $0xf0134e08
f010257e:	e8 ff e6 ff ff       	call   f0100c82 <cprintf>
f0102583:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102586:	83 ec 0c             	sub    $0xc,%esp
f0102589:	68 2d 4e 13 f0       	push   $0xf0134e2d
f010258e:	e8 ef e6 ff ff       	call   f0100c82 <cprintf>
f0102593:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102596:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259b:	c9                   	leave  
f010259c:	c3                   	ret    

f010259d <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010259d:	55                   	push   %ebp
f010259e:	89 e5                	mov    %esp,%ebp
f01025a0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01025a3:	e8 80 b5 00 00       	call   f010db28 <isBufferingEnabled>
f01025a8:	84 c0                	test   %al,%al
f01025aa:	75 12                	jne    f01025be <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01025ac:	83 ec 0c             	sub    $0xc,%esp
f01025af:	68 48 4e 13 f0       	push   $0xf0134e48
f01025b4:	e8 c9 e6 ff ff       	call   f0100c82 <cprintf>
f01025b9:	83 c4 10             	add    $0x10,%esp
f01025bc:	eb 19                	jmp    f01025d7 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01025be:	e8 4d b5 00 00       	call   f010db10 <isModifiedBufferEnabled>
f01025c3:	84 c0                	test   %al,%al
f01025c5:	75 10                	jne    f01025d7 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01025c7:	83 ec 0c             	sub    $0xc,%esp
f01025ca:	68 98 4e 13 f0       	push   $0xf0134e98
f01025cf:	e8 ae e6 ff ff       	call   f0100c82 <cprintf>
f01025d4:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01025d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025da:	83 c0 04             	add    $0x4,%eax
f01025dd:	8b 00                	mov    (%eax),%eax
f01025df:	83 ec 04             	sub    $0x4,%esp
f01025e2:	6a 0a                	push   $0xa
f01025e4:	6a 00                	push   $0x0
f01025e6:	50                   	push   %eax
f01025e7:	e8 62 e9 02 00       	call   f0130f4e <strtol>
f01025ec:	83 c4 10             	add    $0x10,%esp
f01025ef:	83 ec 0c             	sub    $0xc,%esp
f01025f2:	50                   	push   %eax
f01025f3:	e8 3a b5 00 00       	call   f010db32 <setModifiedBufferLength>
f01025f8:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025fb:	e8 40 b5 00 00       	call   f010db40 <getModifiedBufferLength>
f0102600:	83 ec 08             	sub    $0x8,%esp
f0102603:	50                   	push   %eax
f0102604:	68 08 4e 13 f0       	push   $0xf0134e08
f0102609:	e8 74 e6 ff ff       	call   f0100c82 <cprintf>
f010260e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102611:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102616:	c9                   	leave  
f0102617:	c3                   	ret    

f0102618 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102618:	55                   	push   %ebp
f0102619:	89 e5                	mov    %esp,%ebp
f010261b:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010261e:	e8 05 b5 00 00       	call   f010db28 <isBufferingEnabled>
f0102623:	84 c0                	test   %al,%al
f0102625:	75 12                	jne    f0102639 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102627:	83 ec 0c             	sub    $0xc,%esp
f010262a:	68 48 4e 13 f0       	push   $0xf0134e48
f010262f:	e8 4e e6 ff ff       	call   f0100c82 <cprintf>
f0102634:	83 c4 10             	add    $0x10,%esp
f0102637:	eb 19                	jmp    f0102652 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102639:	e8 d2 b4 00 00       	call   f010db10 <isModifiedBufferEnabled>
f010263e:	84 c0                	test   %al,%al
f0102640:	75 10                	jne    f0102652 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102642:	83 ec 0c             	sub    $0xc,%esp
f0102645:	68 98 4e 13 f0       	push   $0xf0134e98
f010264a:	e8 33 e6 ff ff       	call   f0100c82 <cprintf>
f010264f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102652:	e8 e9 b4 00 00       	call   f010db40 <getModifiedBufferLength>
f0102657:	83 ec 08             	sub    $0x8,%esp
f010265a:	50                   	push   %eax
f010265b:	68 de 4e 13 f0       	push   $0xf0134ede
f0102660:	e8 1d e6 ff ff       	call   f0100c82 <cprintf>
f0102665:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102668:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010266d:	c9                   	leave  
f010266e:	c3                   	ret    

f010266f <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010266f:	55                   	push   %ebp
f0102670:	89 e5                	mov    %esp,%ebp
f0102672:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102675:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f010267c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102680:	75 1b                	jne    f010269d <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102682:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102685:	83 c0 04             	add    $0x4,%eax
f0102688:	8b 00                	mov    (%eax),%eax
f010268a:	83 ec 04             	sub    $0x4,%esp
f010268d:	6a 0a                	push   $0xa
f010268f:	6a 00                	push   $0x0
f0102691:	50                   	push   %eax
f0102692:	e8 b7 e8 02 00       	call   f0130f4e <strtol>
f0102697:	83 c4 10             	add    $0x10,%esp
f010269a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010269d:	e8 fd e7 ff ff       	call   f0100e9f <isKHeapPlacementStrategyCONTALLOC>
f01026a2:	84 c0                	test   %al,%al
f01026a4:	74 0a                	je     f01026b0 <command_test_kmalloc+0x41>
		test_kmalloc();
f01026a6:	e8 32 4a 01 00       	call   f01170dd <test_kmalloc>
f01026ab:	e9 e8 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01026b0:	e8 fe e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01026b5:	84 c0                	test   %al,%al
f01026b7:	74 44                	je     f01026fd <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01026b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01026bd:	75 1a                	jne    f01026d9 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01026bf:	83 ec 0c             	sub    $0xc,%esp
f01026c2:	68 fc 4e 13 f0       	push   $0xf0134efc
f01026c7:	e8 b6 e5 ff ff       	call   f0100c82 <cprintf>
f01026cc:	83 c4 10             	add    $0x10,%esp
			return 0;
f01026cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01026d4:	e9 c4 00 00 00       	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01026d9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026dd:	75 0a                	jne    f01026e9 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01026df:	e8 82 98 01 00       	call   f011bf66 <test_kmalloc_firstfit1>
f01026e4:	e9 af 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01026e9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01026ed:	0f 85 a5 00 00 00    	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01026f3:	e8 10 ac 01 00       	call   f011d308 <test_kmalloc_firstfit2>
f01026f8:	e9 9b 00 00 00       	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01026fd:	e8 c6 e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102702:	84 c0                	test   %al,%al
f0102704:	74 44                	je     f010274a <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102706:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010270a:	75 17                	jne    f0102723 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010270c:	83 ec 0c             	sub    $0xc,%esp
f010270f:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102714:	e8 69 e5 ff ff       	call   f0100c82 <cprintf>
f0102719:	83 c4 10             	add    $0x10,%esp
			return 0;
f010271c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102721:	eb 7a                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102723:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102727:	75 07                	jne    f0102730 <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102729:	e8 af 49 01 00       	call   f01170dd <test_kmalloc>
f010272e:	eb 68                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102730:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102734:	75 07                	jne    f010273d <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102736:	e8 f5 72 01 00       	call   f0119a30 <test_kmalloc_bestfit1>
f010273b:	eb 5b                	jmp    f0102798 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f010273d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102741:	75 55                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102743:	e8 3e 85 01 00       	call   f011ac86 <test_kmalloc_bestfit2>
f0102748:	eb 4e                	jmp    f0102798 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f010274a:	e8 8e e7 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010274f:	84 c0                	test   %al,%al
f0102751:	74 37                	je     f010278a <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102753:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102757:	75 17                	jne    f0102770 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102759:	83 ec 0c             	sub    $0xc,%esp
f010275c:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102761:	e8 1c e5 ff ff       	call   f0100c82 <cprintf>
f0102766:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102769:	b8 00 00 00 00       	mov    $0x0,%eax
f010276e:	eb 2d                	jmp    f010279d <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102770:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102774:	75 07                	jne    f010277d <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102776:	e8 62 49 01 00       	call   f01170dd <test_kmalloc>
f010277b:	eb 1b                	jmp    f0102798 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010277d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102781:	75 15                	jne    f0102798 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102783:	e8 b3 5b 01 00       	call   f011833b <test_kmalloc_nextfit>
f0102788:	eb 0e                	jmp    f0102798 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f010278a:	e8 63 e7 ff ff       	call   f0100ef2 <isKHeapPlacementStrategyWORSTFIT>
f010278f:	84 c0                	test   %al,%al
f0102791:	74 05                	je     f0102798 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102793:	e8 05 ba 01 00       	call   f011e19d <test_kmalloc_worstfit>
	return 0;
f0102798:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010279d:	c9                   	leave  
f010279e:	c3                   	ret    

f010279f <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010279f:	55                   	push   %ebp
f01027a0:	89 e5                	mov    %esp,%ebp
f01027a2:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01027a5:	e8 1e e7 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01027aa:	84 c0                	test   %al,%al
f01027ac:	75 09                	jne    f01027b7 <command_test_kfree+0x18>
f01027ae:	e8 00 e7 ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f01027b3:	84 c0                	test   %al,%al
f01027b5:	74 07                	je     f01027be <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01027b7:	e8 83 f1 01 00       	call   f012193f <test_kfree_bestfirstfit>
f01027bc:	eb 05                	jmp    f01027c3 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01027be:	e8 2a d0 01 00       	call   f011f7ed <test_kfree>
	}
	return 0;
f01027c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027c8:	c9                   	leave  
f01027c9:	c3                   	ret    

f01027ca <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01027ca:	55                   	push   %ebp
f01027cb:	89 e5                	mov    %esp,%ebp
f01027cd:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01027d0:	e8 66 0b 02 00       	call   f012333b <test_kheap_phys_addr>
	return 0;
f01027d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027da:	c9                   	leave  
f01027db:	c3                   	ret    

f01027dc <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01027dc:	55                   	push   %ebp
f01027dd:	89 e5                	mov    %esp,%ebp
f01027df:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01027e2:	e8 24 20 02 00       	call   f012480b <test_kheap_virt_addr>
	return 0;
f01027e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027ec:	c9                   	leave  
f01027ed:	c3                   	ret    

f01027ee <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01027ee:	55                   	push   %ebp
f01027ef:	89 e5                	mov    %esp,%ebp
f01027f1:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01027f4:	e8 ef 34 02 00       	call   f0125ce8 <test_three_creation_functions>
	return 0;
f01027f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027fe:	c9                   	leave  
f01027ff:	c3                   	ret    

f0102800 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102800:	55                   	push   %ebp
f0102801:	89 e5                	mov    %esp,%ebp
f0102803:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102806:	e8 d2 e6 ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f010280b:	84 c0                	test   %al,%al
f010280d:	74 07                	je     f0102816 <command_test_krealloc+0x16>
		test_krealloc();
f010280f:	e8 eb 8e 02 00       	call   f012b6ff <test_krealloc>
f0102814:	eb 0e                	jmp    f0102824 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102816:	e8 ad e6 ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010281b:	84 c0                	test   %al,%al
f010281d:	74 05                	je     f0102824 <command_test_krealloc+0x24>
		test_krealloc_BF();
f010281f:	e8 8b ae 02 00       	call   f012d6af <test_krealloc_BF>
	return 0;
f0102824:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102829:	c9                   	leave  
f010282a:	c3                   	ret    

f010282b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f010282b:	55                   	push   %ebp
f010282c:	89 e5                	mov    %esp,%ebp
f010282e:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f0102831:	e8 bc 34 01 00       	call   f0115cf2 <test_priority_normal_and_higher>
	return 0;
f0102836:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010283b:	c9                   	leave  
f010283c:	c3                   	ret    

f010283d <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f010283d:	55                   	push   %ebp
f010283e:	89 e5                	mov    %esp,%ebp
f0102840:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102843:	e8 90 3e 01 00       	call   f01166d8 <test_priority_normal_and_lower>
	return 0;
f0102848:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284d:	c9                   	leave  
f010284e:	c3                   	ret    

f010284f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010284f:	55                   	push   %ebp
f0102850:	89 e5                	mov    %esp,%ebp
f0102852:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102855:	e8 c8 36 02 00       	call   f0125f22 <test_kfreeall>
	return 0;
f010285a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285f:	c9                   	leave  
f0102860:	c3                   	ret    

f0102861 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102861:	55                   	push   %ebp
f0102862:	89 e5                	mov    %esp,%ebp
f0102864:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102867:	e8 a2 4d 02 00       	call   f012760e <test_kexpand>
	return 0;
f010286c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102871:	c9                   	leave  
f0102872:	c3                   	ret    

f0102873 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102873:	55                   	push   %ebp
f0102874:	89 e5                	mov    %esp,%ebp
f0102876:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102879:	e8 11 5b 02 00       	call   f012838f <test_kshrink>
	return 0;
f010287e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102883:	c9                   	leave  
f0102884:	c3                   	ret    

f0102885 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102885:	55                   	push   %ebp
f0102886:	89 e5                	mov    %esp,%ebp
f0102888:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010288b:	e8 ec 69 02 00       	call   f012927c <test_kfreelast>
	return 0;
f0102890:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102895:	c9                   	leave  
f0102896:	c3                   	ret    

f0102897 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102897:	55                   	push   %ebp
f0102898:	89 e5                	mov    %esp,%ebp
f010289a:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010289d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028a0:	83 c0 04             	add    $0x4,%eax
f01028a3:	8b 00                	mov    (%eax),%eax
f01028a5:	83 ec 04             	sub    $0x4,%esp
f01028a8:	6a 0a                	push   $0xa
f01028aa:	6a 00                	push   $0x0
f01028ac:	50                   	push   %eax
f01028ad:	e8 9c e6 02 00       	call   f0130f4e <strtol>
f01028b2:	83 c4 10             	add    $0x10,%esp
f01028b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01028b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01028bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01028c6:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01028cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01028ce:	eb 3d                	jmp    f010290d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01028d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028d3:	05 5c 05 00 00       	add    $0x55c,%eax
f01028d8:	83 ec 08             	sub    $0x8,%esp
f01028db:	68 ea 4f 13 f0       	push   $0xf0134fea
f01028e0:	50                   	push   %eax
f01028e1:	e8 14 e4 02 00       	call   f0130cfa <strcmp>
f01028e6:	83 c4 10             	add    $0x10,%esp
f01028e9:	85 c0                	test   %eax,%eax
f01028eb:	75 12                	jne    f01028ff <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01028ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01028f1:	74 07                	je     f01028fa <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01028f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01028fa:	ff 45 f4             	incl   -0xc(%ebp)
f01028fd:	eb 06                	jmp    f0102905 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01028ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102903:	74 31                	je     f0102936 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102905:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010290a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010290d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102911:	74 08                	je     f010291b <command_test_sc_MLFQ+0x84>
f0102913:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102916:	8b 40 44             	mov    0x44(%eax),%eax
f0102919:	eb 05                	jmp    f0102920 <command_test_sc_MLFQ+0x89>
f010291b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102920:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0102925:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f010292a:	85 c0                	test   %eax,%eax
f010292c:	75 a2                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f010292e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102932:	75 9c                	jne    f01028d0 <command_test_sc_MLFQ+0x39>
f0102934:	eb 01                	jmp    f0102937 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102936:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010293a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010293d:	75 12                	jne    f0102951 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010293f:	83 ec 0c             	sub    $0xc,%esp
f0102942:	68 f4 4f 13 f0       	push   $0xf0134ff4
f0102947:	e8 36 e3 ff ff       	call   f0100c82 <cprintf>
f010294c:	83 c4 10             	add    $0x10,%esp
f010294f:	eb 17                	jmp    f0102968 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102951:	83 ec 04             	sub    $0x4,%esp
f0102954:	68 2d 50 13 f0       	push   $0xf013502d
f0102959:	68 8b 04 00 00       	push   $0x48b
f010295e:	68 79 40 13 f0       	push   $0xf0134079
f0102963:	e8 93 d8 ff ff       	call   f01001fb <_panic>
	}
	return 0;
f0102968:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010296d:	c9                   	leave  
f010296e:	c3                   	ret    

f010296f <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010296f:	55                   	push   %ebp
f0102970:	89 e5                	mov    %esp,%ebp
f0102972:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102975:	e8 74 e0 00 00       	call   f01109ee <TestAutoCompleteCommand>
f010297a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010297d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102982:	c9                   	leave  
f0102983:	c3                   	ret    

f0102984 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102984:	55                   	push   %ebp
f0102985:	89 e5                	mov    %esp,%ebp
f0102987:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010298a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010298e:	74 1a                	je     f01029aa <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102990:	83 ec 0c             	sub    $0xc,%esp
f0102993:	68 44 50 13 f0       	push   $0xf0135044
f0102998:	e8 e5 e2 ff ff       	call   f0100c82 <cprintf>
f010299d:	83 c4 10             	add    $0x10,%esp
		return 0;
f01029a0:	b8 00 00 00 00       	mov    $0x0,%eax
f01029a5:	e9 82 01 00 00       	jmp    f0102b2c <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f01029aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029ad:	83 c0 04             	add    $0x4,%eax
f01029b0:	8b 00                	mov    (%eax),%eax
f01029b2:	83 ec 08             	sub    $0x8,%esp
f01029b5:	68 7c 50 13 f0       	push   $0xf013507c
f01029ba:	50                   	push   %eax
f01029bb:	e8 3a e3 02 00       	call   f0130cfa <strcmp>
f01029c0:	83 c4 10             	add    $0x10,%esp
f01029c3:	85 c0                	test   %eax,%eax
f01029c5:	75 0a                	jne    f01029d1 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01029c7:	e8 cc b5 00 00       	call   f010df98 <test_initialize_MemBlocksList>
f01029cc:	e9 56 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01029d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d4:	83 c0 04             	add    $0x4,%eax
f01029d7:	8b 00                	mov    (%eax),%eax
f01029d9:	83 ec 08             	sub    $0x8,%esp
f01029dc:	68 81 50 13 f0       	push   $0xf0135081
f01029e1:	50                   	push   %eax
f01029e2:	e8 13 e3 02 00       	call   f0130cfa <strcmp>
f01029e7:	83 c4 10             	add    $0x10,%esp
f01029ea:	85 c0                	test   %eax,%eax
f01029ec:	75 0a                	jne    f01029f8 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01029ee:	e8 b9 b6 00 00       	call   f010e0ac <test_insert_sorted_allocList>
f01029f3:	e9 2f 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01029f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029fb:	83 c0 04             	add    $0x4,%eax
f01029fe:	8b 00                	mov    (%eax),%eax
f0102a00:	83 ec 08             	sub    $0x8,%esp
f0102a03:	68 87 50 13 f0       	push   $0xf0135087
f0102a08:	50                   	push   %eax
f0102a09:	e8 ec e2 02 00       	call   f0130cfa <strcmp>
f0102a0e:	83 c4 10             	add    $0x10,%esp
f0102a11:	85 c0                	test   %eax,%eax
f0102a13:	75 0a                	jne    f0102a1f <command_test_lists+0x9b>
	{
		test_find_block();
f0102a15:	e8 50 bb 00 00       	call   f010e56a <test_find_block>
f0102a1a:	e9 08 01 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a22:	83 c0 04             	add    $0x4,%eax
f0102a25:	8b 00                	mov    (%eax),%eax
f0102a27:	83 ec 08             	sub    $0x8,%esp
f0102a2a:	68 8c 50 13 f0       	push   $0xf013508c
f0102a2f:	50                   	push   %eax
f0102a30:	e8 c5 e2 02 00       	call   f0130cfa <strcmp>
f0102a35:	83 c4 10             	add    $0x10,%esp
f0102a38:	85 c0                	test   %eax,%eax
f0102a3a:	74 1d                	je     f0102a59 <command_test_lists+0xd5>
f0102a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a3f:	83 c0 04             	add    $0x4,%eax
f0102a42:	8b 00                	mov    (%eax),%eax
f0102a44:	83 ec 08             	sub    $0x8,%esp
f0102a47:	68 8f 50 13 f0       	push   $0xf013508f
f0102a4c:	50                   	push   %eax
f0102a4d:	e8 a8 e2 02 00       	call   f0130cfa <strcmp>
f0102a52:	83 c4 10             	add    $0x10,%esp
f0102a55:	85 c0                	test   %eax,%eax
f0102a57:	75 0a                	jne    f0102a63 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102a59:	e8 67 be 00 00       	call   f010e8c5 <test_alloc_block_FF>
f0102a5e:	e9 c4 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a66:	83 c0 04             	add    $0x4,%eax
f0102a69:	8b 00                	mov    (%eax),%eax
f0102a6b:	83 ec 08             	sub    $0x8,%esp
f0102a6e:	68 92 50 13 f0       	push   $0xf0135092
f0102a73:	50                   	push   %eax
f0102a74:	e8 81 e2 02 00       	call   f0130cfa <strcmp>
f0102a79:	83 c4 10             	add    $0x10,%esp
f0102a7c:	85 c0                	test   %eax,%eax
f0102a7e:	74 1d                	je     f0102a9d <command_test_lists+0x119>
f0102a80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a83:	83 c0 04             	add    $0x4,%eax
f0102a86:	8b 00                	mov    (%eax),%eax
f0102a88:	83 ec 08             	sub    $0x8,%esp
f0102a8b:	68 95 50 13 f0       	push   $0xf0135095
f0102a90:	50                   	push   %eax
f0102a91:	e8 64 e2 02 00       	call   f0130cfa <strcmp>
f0102a96:	83 c4 10             	add    $0x10,%esp
f0102a99:	85 c0                	test   %eax,%eax
f0102a9b:	75 0a                	jne    f0102aa7 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102a9d:	e8 a1 c2 00 00       	call   f010ed43 <test_alloc_block_BF>
f0102aa2:	e9 80 00 00 00       	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aaa:	83 c0 04             	add    $0x4,%eax
f0102aad:	8b 00                	mov    (%eax),%eax
f0102aaf:	83 ec 08             	sub    $0x8,%esp
f0102ab2:	68 98 50 13 f0       	push   $0xf0135098
f0102ab7:	50                   	push   %eax
f0102ab8:	e8 3d e2 02 00       	call   f0130cfa <strcmp>
f0102abd:	83 c4 10             	add    $0x10,%esp
f0102ac0:	85 c0                	test   %eax,%eax
f0102ac2:	74 1d                	je     f0102ae1 <command_test_lists+0x15d>
f0102ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac7:	83 c0 04             	add    $0x4,%eax
f0102aca:	8b 00                	mov    (%eax),%eax
f0102acc:	83 ec 08             	sub    $0x8,%esp
f0102acf:	68 9b 50 13 f0       	push   $0xf013509b
f0102ad4:	50                   	push   %eax
f0102ad5:	e8 20 e2 02 00       	call   f0130cfa <strcmp>
f0102ada:	83 c4 10             	add    $0x10,%esp
f0102add:	85 c0                	test   %eax,%eax
f0102adf:	75 07                	jne    f0102ae8 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102ae1:	e8 e4 c8 00 00       	call   f010f3ca <test_alloc_block_NF>
f0102ae6:	eb 3f                	jmp    f0102b27 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102ae8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aeb:	83 c0 04             	add    $0x4,%eax
f0102aee:	8b 00                	mov    (%eax),%eax
f0102af0:	83 ec 08             	sub    $0x8,%esp
f0102af3:	68 9e 50 13 f0       	push   $0xf013509e
f0102af8:	50                   	push   %eax
f0102af9:	e8 fc e1 02 00       	call   f0130cfa <strcmp>
f0102afe:	83 c4 10             	add    $0x10,%esp
f0102b01:	85 c0                	test   %eax,%eax
f0102b03:	74 1d                	je     f0102b22 <command_test_lists+0x19e>
f0102b05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b08:	83 c0 04             	add    $0x4,%eax
f0102b0b:	8b 00                	mov    (%eax),%eax
f0102b0d:	83 ec 08             	sub    $0x8,%esp
f0102b10:	68 a4 50 13 f0       	push   $0xf01350a4
f0102b15:	50                   	push   %eax
f0102b16:	e8 df e1 02 00       	call   f0130cfa <strcmp>
f0102b1b:	83 c4 10             	add    $0x10,%esp
f0102b1e:	85 c0                	test   %eax,%eax
f0102b20:	75 05                	jne    f0102b27 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b22:	e8 31 d1 00 00       	call   f010fc58 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b2c:	c9                   	leave  
f0102b2d:	c3                   	ret    

f0102b2e <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102b2e:	55                   	push   %ebp
f0102b2f:	89 e5                	mov    %esp,%ebp
f0102b31:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102b34:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102b38:	74 1a                	je     f0102b54 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102b3a:	83 ec 0c             	sub    $0xc,%esp
f0102b3d:	68 ac 50 13 f0       	push   $0xf01350ac
f0102b42:	e8 3b e1 ff ff       	call   f0100c82 <cprintf>
f0102b47:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b4f:	e9 e1 00 00 00       	jmp    f0102c35 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102b54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b57:	83 c0 04             	add    $0x4,%eax
f0102b5a:	8b 00                	mov    (%eax),%eax
f0102b5c:	83 ec 08             	sub    $0x8,%esp
f0102b5f:	68 e5 50 13 f0       	push   $0xf01350e5
f0102b64:	50                   	push   %eax
f0102b65:	e8 90 e1 02 00       	call   f0130cfa <strcmp>
f0102b6a:	83 c4 10             	add    $0x10,%esp
f0102b6d:	85 c0                	test   %eax,%eax
f0102b6f:	75 0a                	jne    f0102b7b <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102b71:	e8 0c e9 00 00       	call   f0111482 <test_cut_paste_pages>
f0102b76:	e9 b5 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7e:	83 c0 04             	add    $0x4,%eax
f0102b81:	8b 00                	mov    (%eax),%eax
f0102b83:	83 ec 08             	sub    $0x8,%esp
f0102b86:	68 ee 50 13 f0       	push   $0xf01350ee
f0102b8b:	50                   	push   %eax
f0102b8c:	e8 69 e1 02 00       	call   f0130cfa <strcmp>
f0102b91:	83 c4 10             	add    $0x10,%esp
f0102b94:	85 c0                	test   %eax,%eax
f0102b96:	75 0a                	jne    f0102ba2 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102b98:	e8 30 f3 00 00       	call   f0111ecd <test_copy_paste_chunk>
f0102b9d:	e9 8e 00 00 00       	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 04             	add    $0x4,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	83 ec 08             	sub    $0x8,%esp
f0102bad:	68 f8 50 13 f0       	push   $0xf01350f8
f0102bb2:	50                   	push   %eax
f0102bb3:	e8 42 e1 02 00       	call   f0130cfa <strcmp>
f0102bb8:	83 c4 10             	add    $0x10,%esp
f0102bbb:	85 c0                	test   %eax,%eax
f0102bbd:	75 07                	jne    f0102bc6 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102bbf:	e8 07 04 01 00       	call   f0112fcb <test_share_chunk>
f0102bc4:	eb 6a                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc9:	83 c0 04             	add    $0x4,%eax
f0102bcc:	8b 00                	mov    (%eax),%eax
f0102bce:	83 ec 08             	sub    $0x8,%esp
f0102bd1:	68 fe 50 13 f0       	push   $0xf01350fe
f0102bd6:	50                   	push   %eax
f0102bd7:	e8 1e e1 02 00       	call   f0130cfa <strcmp>
f0102bdc:	83 c4 10             	add    $0x10,%esp
f0102bdf:	85 c0                	test   %eax,%eax
f0102be1:	75 07                	jne    f0102bea <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102be3:	e8 0b 0e 01 00       	call   f01139f3 <test_allocate_chunk>
f0102be8:	eb 46                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102bea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bed:	83 c0 04             	add    $0x4,%eax
f0102bf0:	8b 00                	mov    (%eax),%eax
f0102bf2:	83 ec 08             	sub    $0x8,%esp
f0102bf5:	68 07 51 13 f0       	push   $0xf0135107
f0102bfa:	50                   	push   %eax
f0102bfb:	e8 fa e0 02 00       	call   f0130cfa <strcmp>
f0102c00:	83 c4 10             	add    $0x10,%esp
f0102c03:	85 c0                	test   %eax,%eax
f0102c05:	75 07                	jne    f0102c0e <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c07:	e8 96 16 01 00       	call   f01142a2 <test_calculate_required_frames>
f0102c0c:	eb 22                	jmp    f0102c30 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c11:	83 c0 04             	add    $0x4,%eax
f0102c14:	8b 00                	mov    (%eax),%eax
f0102c16:	83 ec 08             	sub    $0x8,%esp
f0102c19:	68 16 51 13 f0       	push   $0xf0135116
f0102c1e:	50                   	push   %eax
f0102c1f:	e8 d6 e0 02 00       	call   f0130cfa <strcmp>
f0102c24:	83 c4 10             	add    $0x10,%esp
f0102c27:	85 c0                	test   %eax,%eax
f0102c29:	75 05                	jne    f0102c30 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c2b:	e8 e6 1e 01 00       	call   f0114b16 <test_calculate_allocated_space>
	}
	return 0;
f0102c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c35:	c9                   	leave  
f0102c36:	c3                   	ret    

f0102c37 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102c37:	55                   	push   %ebp
f0102c38:	89 e5                	mov    %esp,%ebp
f0102c3a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102c3d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c41:	74 1a                	je     f0102c5d <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102c43:	83 ec 0c             	sub    $0xc,%esp
f0102c46:	68 28 51 13 f0       	push   $0xf0135128
f0102c4b:	e8 32 e0 ff ff       	call   f0100c82 <cprintf>
f0102c50:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102c53:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c58:	e9 e1 00 00 00       	jmp    f0102d3e <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c60:	83 c0 04             	add    $0x4,%eax
f0102c63:	8b 00                	mov    (%eax),%eax
f0102c65:	83 ec 08             	sub    $0x8,%esp
f0102c68:	68 5e 51 13 f0       	push   $0xf013515e
f0102c6d:	50                   	push   %eax
f0102c6e:	e8 87 e0 02 00       	call   f0130cfa <strcmp>
f0102c73:	83 c4 10             	add    $0x10,%esp
f0102c76:	85 c0                	test   %eax,%eax
f0102c78:	75 0a                	jne    f0102c84 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102c7a:	e8 f4 de 00 00       	call   f0110b73 <test_pt_set_page_permissions>
f0102c7f:	e9 b5 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 04             	add    $0x4,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 08             	sub    $0x8,%esp
f0102c8f:	68 66 51 13 f0       	push   $0xf0135166
f0102c94:	50                   	push   %eax
f0102c95:	e8 60 e0 02 00       	call   f0130cfa <strcmp>
f0102c9a:	83 c4 10             	add    $0x10,%esp
f0102c9d:	85 c0                	test   %eax,%eax
f0102c9f:	75 0a                	jne    f0102cab <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102ca1:	e8 30 e1 00 00       	call   f0110dd6 <test_pt_set_page_permissions_invalid_va>
f0102ca6:	e9 8e 00 00 00       	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102cab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cae:	83 c0 04             	add    $0x4,%eax
f0102cb1:	8b 00                	mov    (%eax),%eax
f0102cb3:	83 ec 08             	sub    $0x8,%esp
f0102cb6:	68 6e 51 13 f0       	push   $0xf013516e
f0102cbb:	50                   	push   %eax
f0102cbc:	e8 39 e0 02 00       	call   f0130cfa <strcmp>
f0102cc1:	83 c4 10             	add    $0x10,%esp
f0102cc4:	85 c0                	test   %eax,%eax
f0102cc6:	75 07                	jne    f0102ccf <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102cc8:	e8 52 e1 00 00       	call   f0110e1f <test_pt_get_page_permissions>
f0102ccd:	eb 6a                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102ccf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd2:	83 c0 04             	add    $0x4,%eax
f0102cd5:	8b 00                	mov    (%eax),%eax
f0102cd7:	83 ec 08             	sub    $0x8,%esp
f0102cda:	68 76 51 13 f0       	push   $0xf0135176
f0102cdf:	50                   	push   %eax
f0102ce0:	e8 15 e0 02 00       	call   f0130cfa <strcmp>
f0102ce5:	83 c4 10             	add    $0x10,%esp
f0102ce8:	85 c0                	test   %eax,%eax
f0102cea:	75 07                	jne    f0102cf3 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102cec:	e8 72 e2 00 00       	call   f0110f63 <test_pt_clear_page_table_entry>
f0102cf1:	eb 46                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf6:	83 c0 04             	add    $0x4,%eax
f0102cf9:	8b 00                	mov    (%eax),%eax
f0102cfb:	83 ec 08             	sub    $0x8,%esp
f0102cfe:	68 7d 51 13 f0       	push   $0xf013517d
f0102d03:	50                   	push   %eax
f0102d04:	e8 f1 df 02 00       	call   f0130cfa <strcmp>
f0102d09:	83 c4 10             	add    $0x10,%esp
f0102d0c:	85 c0                	test   %eax,%eax
f0102d0e:	75 07                	jne    f0102d17 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d10:	e8 a7 e3 00 00       	call   f01110bc <test_pt_clear_page_table_entry_invalid_va>
f0102d15:	eb 22                	jmp    f0102d39 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d17:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d1a:	83 c0 04             	add    $0x4,%eax
f0102d1d:	8b 00                	mov    (%eax),%eax
f0102d1f:	83 ec 08             	sub    $0x8,%esp
f0102d22:	68 84 51 13 f0       	push   $0xf0135184
f0102d27:	50                   	push   %eax
f0102d28:	e8 cd df 02 00       	call   f0130cfa <strcmp>
f0102d2d:	83 c4 10             	add    $0x10,%esp
f0102d30:	85 c0                	test   %eax,%eax
f0102d32:	75 05                	jne    f0102d39 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102d34:	e8 bb e3 00 00       	call   f01110f4 <test_virtual_to_physical>
	}
	return 0;
f0102d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d3e:	c9                   	leave  
f0102d3f:	c3                   	ret    

f0102d40 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102d40:	55                   	push   %ebp
f0102d41:	89 e5                	mov    %esp,%ebp
f0102d43:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102d46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d49:	83 c0 08             	add    $0x8,%eax
f0102d4c:	8b 00                	mov    (%eax),%eax
f0102d4e:	83 ec 08             	sub    $0x8,%esp
f0102d51:	68 88 51 13 f0       	push   $0xf0135188
f0102d56:	50                   	push   %eax
f0102d57:	e8 9e df 02 00       	call   f0130cfa <strcmp>
f0102d5c:	83 c4 10             	add    $0x10,%esp
f0102d5f:	85 c0                	test   %eax,%eax
f0102d61:	75 20                	jne    f0102d83 <command_test_kheap+0x43>
f0102d63:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102d67:	74 1a                	je     f0102d83 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102d69:	83 ec 0c             	sub    $0xc,%esp
f0102d6c:	68 90 51 13 f0       	push   $0xf0135190
f0102d71:	e8 0c df ff ff       	call   f0100c82 <cprintf>
f0102d76:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d7e:	e9 33 03 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102d83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d86:	83 c0 08             	add    $0x8,%eax
f0102d89:	8b 00                	mov    (%eax),%eax
f0102d8b:	83 ec 08             	sub    $0x8,%esp
f0102d8e:	68 88 51 13 f0       	push   $0xf0135188
f0102d93:	50                   	push   %eax
f0102d94:	e8 61 df 02 00       	call   f0130cfa <strcmp>
f0102d99:	83 c4 10             	add    $0x10,%esp
f0102d9c:	85 c0                	test   %eax,%eax
f0102d9e:	74 20                	je     f0102dc0 <command_test_kheap+0x80>
f0102da0:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da4:	74 1a                	je     f0102dc0 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102da6:	83 ec 0c             	sub    $0xc,%esp
f0102da9:	68 e0 51 13 f0       	push   $0xf01351e0
f0102dae:	e8 cf de ff ff       	call   f0100c82 <cprintf>
f0102db3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbb:	e9 f6 02 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dc3:	83 c0 04             	add    $0x4,%eax
f0102dc6:	8b 00                	mov    (%eax),%eax
f0102dc8:	83 ec 08             	sub    $0x8,%esp
f0102dcb:	68 8c 50 13 f0       	push   $0xf013508c
f0102dd0:	50                   	push   %eax
f0102dd1:	e8 24 df 02 00       	call   f0130cfa <strcmp>
f0102dd6:	83 c4 10             	add    $0x10,%esp
f0102dd9:	85 c0                	test   %eax,%eax
f0102ddb:	74 1d                	je     f0102dfa <command_test_kheap+0xba>
f0102ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de0:	83 c0 04             	add    $0x4,%eax
f0102de3:	8b 00                	mov    (%eax),%eax
f0102de5:	83 ec 08             	sub    $0x8,%esp
f0102de8:	68 8f 50 13 f0       	push   $0xf013508f
f0102ded:	50                   	push   %eax
f0102dee:	e8 07 df 02 00       	call   f0130cfa <strcmp>
f0102df3:	83 c4 10             	add    $0x10,%esp
f0102df6:	85 c0                	test   %eax,%eax
f0102df8:	75 1a                	jne    f0102e14 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102dfa:	e8 60 e0 ff ff       	call   f0100e5f <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102dff:	83 ec 0c             	sub    $0xc,%esp
f0102e02:	68 28 4c 13 f0       	push   $0xf0134c28
f0102e07:	e8 76 de ff ff       	call   f0100c82 <cprintf>
f0102e0c:	83 c4 10             	add    $0x10,%esp
f0102e0f:	e9 a0 00 00 00       	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e17:	83 c0 04             	add    $0x4,%eax
f0102e1a:	8b 00                	mov    (%eax),%eax
f0102e1c:	83 ec 08             	sub    $0x8,%esp
f0102e1f:	68 92 50 13 f0       	push   $0xf0135092
f0102e24:	50                   	push   %eax
f0102e25:	e8 d0 de 02 00       	call   f0130cfa <strcmp>
f0102e2a:	83 c4 10             	add    $0x10,%esp
f0102e2d:	85 c0                	test   %eax,%eax
f0102e2f:	74 1d                	je     f0102e4e <command_test_kheap+0x10e>
f0102e31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e34:	83 c0 04             	add    $0x4,%eax
f0102e37:	8b 00                	mov    (%eax),%eax
f0102e39:	83 ec 08             	sub    $0x8,%esp
f0102e3c:	68 95 50 13 f0       	push   $0xf0135095
f0102e41:	50                   	push   %eax
f0102e42:	e8 b3 de 02 00       	call   f0130cfa <strcmp>
f0102e47:	83 c4 10             	add    $0x10,%esp
f0102e4a:	85 c0                	test   %eax,%eax
f0102e4c:	75 17                	jne    f0102e65 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102e4e:	e8 1c e0 ff ff       	call   f0100e6f <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102e53:	83 ec 0c             	sub    $0xc,%esp
f0102e56:	68 58 4c 13 f0       	push   $0xf0134c58
f0102e5b:	e8 22 de ff ff       	call   f0100c82 <cprintf>
f0102e60:	83 c4 10             	add    $0x10,%esp
f0102e63:	eb 4f                	jmp    f0102eb4 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102e65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e68:	83 c0 04             	add    $0x4,%eax
f0102e6b:	8b 00                	mov    (%eax),%eax
f0102e6d:	83 ec 08             	sub    $0x8,%esp
f0102e70:	68 98 50 13 f0       	push   $0xf0135098
f0102e75:	50                   	push   %eax
f0102e76:	e8 7f de 02 00       	call   f0130cfa <strcmp>
f0102e7b:	83 c4 10             	add    $0x10,%esp
f0102e7e:	85 c0                	test   %eax,%eax
f0102e80:	74 1d                	je     f0102e9f <command_test_kheap+0x15f>
f0102e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e85:	83 c0 04             	add    $0x4,%eax
f0102e88:	8b 00                	mov    (%eax),%eax
f0102e8a:	83 ec 08             	sub    $0x8,%esp
f0102e8d:	68 9b 50 13 f0       	push   $0xf013509b
f0102e92:	50                   	push   %eax
f0102e93:	e8 62 de 02 00       	call   f0130cfa <strcmp>
f0102e98:	83 c4 10             	add    $0x10,%esp
f0102e9b:	85 c0                	test   %eax,%eax
f0102e9d:	75 15                	jne    f0102eb4 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102e9f:	e8 db df ff ff       	call   f0100e7f <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102ea4:	83 ec 0c             	sub    $0xc,%esp
f0102ea7:	68 84 4c 13 f0       	push   $0xf0134c84
f0102eac:	e8 d1 dd ff ff       	call   f0100c82 <cprintf>
f0102eb1:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102eb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eb7:	83 c0 08             	add    $0x8,%eax
f0102eba:	8b 00                	mov    (%eax),%eax
f0102ebc:	83 ec 08             	sub    $0x8,%esp
f0102ebf:	68 88 51 13 f0       	push   $0xf0135188
f0102ec4:	50                   	push   %eax
f0102ec5:	e8 30 de 02 00       	call   f0130cfa <strcmp>
f0102eca:	83 c4 10             	add    $0x10,%esp
f0102ecd:	85 c0                	test   %eax,%eax
f0102ecf:	0f 85 13 01 00 00    	jne    f0102fe8 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102ed5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ed8:	83 c0 0c             	add    $0xc,%eax
f0102edb:	8b 00                	mov    (%eax),%eax
f0102edd:	83 ec 04             	sub    $0x4,%esp
f0102ee0:	6a 0a                	push   $0xa
f0102ee2:	6a 00                	push   $0x0
f0102ee4:	50                   	push   %eax
f0102ee5:	e8 64 e0 02 00       	call   f0130f4e <strtol>
f0102eea:	83 c4 10             	add    $0x10,%esp
f0102eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ef0:	e8 be df ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0102ef5:	84 c0                	test   %al,%al
f0102ef7:	74 54                	je     f0102f4d <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102ef9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102efd:	75 1a                	jne    f0102f19 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102eff:	83 ec 0c             	sub    $0xc,%esp
f0102f02:	68 fc 4e 13 f0       	push   $0xf0134efc
f0102f07:	e8 76 dd ff ff       	call   f0100c82 <cprintf>
f0102f0c:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f0f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f14:	e9 9d 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f19:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f1d:	75 0a                	jne    f0102f29 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f1f:	e8 b9 41 01 00       	call   f01170dd <test_kmalloc>
f0102f24:	e9 b5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f29:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f2d:	75 0a                	jne    f0102f39 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102f2f:	e8 32 90 01 00       	call   f011bf66 <test_kmalloc_firstfit1>
f0102f34:	e9 a5 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f39:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f3d:	0f 85 9b 00 00 00    	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102f43:	e8 c0 a3 01 00       	call   f011d308 <test_kmalloc_firstfit2>
f0102f48:	e9 91 00 00 00       	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102f4d:	e8 76 df ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f0102f52:	84 c0                	test   %al,%al
f0102f54:	74 47                	je     f0102f9d <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102f56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f5a:	75 1a                	jne    f0102f76 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102f5c:	83 ec 0c             	sub    $0xc,%esp
f0102f5f:	68 4c 4f 13 f0       	push   $0xf0134f4c
f0102f64:	e8 19 dd ff ff       	call   f0100c82 <cprintf>
f0102f69:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f71:	e9 40 01 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102f76:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f7a:	75 07                	jne    f0102f83 <command_test_kheap+0x243>
				test_kmalloc();
f0102f7c:	e8 5c 41 01 00       	call   f01170dd <test_kmalloc>
f0102f81:	eb 5b                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f83:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102f87:	75 07                	jne    f0102f90 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102f89:	e8 a2 6a 01 00       	call   f0119a30 <test_kmalloc_bestfit1>
f0102f8e:	eb 4e                	jmp    f0102fde <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102f90:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102f94:	75 48                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102f96:	e8 eb 7c 01 00       	call   f011ac86 <test_kmalloc_bestfit2>
f0102f9b:	eb 41                	jmp    f0102fde <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102f9d:	e8 3b df ff ff       	call   f0100edd <isKHeapPlacementStrategyNEXTFIT>
f0102fa2:	84 c0                	test   %al,%al
f0102fa4:	74 38                	je     f0102fde <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102fa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102faa:	75 1a                	jne    f0102fc6 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102fac:	83 ec 0c             	sub    $0xc,%esp
f0102faf:	68 9c 4f 13 f0       	push   $0xf0134f9c
f0102fb4:	e8 c9 dc ff ff       	call   f0100c82 <cprintf>
f0102fb9:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fbc:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fc1:	e9 f0 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102fc6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fca:	75 07                	jne    f0102fd3 <command_test_kheap+0x293>
				test_kmalloc();
f0102fcc:	e8 0c 41 01 00       	call   f01170dd <test_kmalloc>
f0102fd1:	eb 0b                	jmp    f0102fde <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102fd3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fd7:	75 05                	jne    f0102fde <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102fd9:	e8 5d 53 01 00       	call   f011833b <test_kmalloc_nextfit>
		}
		return 0;
f0102fde:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fe3:	e9 ce 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102feb:	83 c0 08             	add    $0x8,%eax
f0102fee:	8b 00                	mov    (%eax),%eax
f0102ff0:	83 ec 08             	sub    $0x8,%esp
f0102ff3:	68 24 52 13 f0       	push   $0xf0135224
f0102ff8:	50                   	push   %eax
f0102ff9:	e8 fc dc 02 00       	call   f0130cfa <strcmp>
f0102ffe:	83 c4 10             	add    $0x10,%esp
f0103001:	85 c0                	test   %eax,%eax
f0103003:	75 28                	jne    f010302d <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103005:	e8 be de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f010300a:	84 c0                	test   %al,%al
f010300c:	75 09                	jne    f0103017 <command_test_kheap+0x2d7>
f010300e:	e8 a0 de ff ff       	call   f0100eb3 <isKHeapPlacementStrategyFIRSTFIT>
f0103013:	84 c0                	test   %al,%al
f0103015:	74 07                	je     f010301e <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0103017:	e8 23 e9 01 00       	call   f012193f <test_kfree_bestfirstfit>
f010301c:	eb 05                	jmp    f0103023 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010301e:	e8 ca c7 01 00       	call   f011f7ed <test_kfree>
		}
		return 0;
f0103023:	b8 00 00 00 00       	mov    $0x0,%eax
f0103028:	e9 89 00 00 00       	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010302d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103030:	83 c0 08             	add    $0x8,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 08             	sub    $0x8,%esp
f0103038:	68 2a 52 13 f0       	push   $0xf013522a
f010303d:	50                   	push   %eax
f010303e:	e8 b7 dc 02 00       	call   f0130cfa <strcmp>
f0103043:	83 c4 10             	add    $0x10,%esp
f0103046:	85 c0                	test   %eax,%eax
f0103048:	75 0c                	jne    f0103056 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f010304a:	e8 ec 02 02 00       	call   f012333b <test_kheap_phys_addr>
		return 0;
f010304f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103054:	eb 60                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0103056:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103059:	83 c0 08             	add    $0x8,%eax
f010305c:	8b 00                	mov    (%eax),%eax
f010305e:	83 ec 08             	sub    $0x8,%esp
f0103061:	68 34 52 13 f0       	push   $0xf0135234
f0103066:	50                   	push   %eax
f0103067:	e8 8e dc 02 00       	call   f0130cfa <strcmp>
f010306c:	83 c4 10             	add    $0x10,%esp
f010306f:	85 c0                	test   %eax,%eax
f0103071:	75 0c                	jne    f010307f <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0103073:	e8 93 17 02 00       	call   f012480b <test_kheap_virt_addr>
		return 0;
f0103078:	b8 00 00 00 00       	mov    $0x0,%eax
f010307d:	eb 37                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010307f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103082:	83 c0 08             	add    $0x8,%eax
f0103085:	8b 00                	mov    (%eax),%eax
f0103087:	83 ec 08             	sub    $0x8,%esp
f010308a:	68 3e 52 13 f0       	push   $0xf013523e
f010308f:	50                   	push   %eax
f0103090:	e8 65 dc 02 00       	call   f0130cfa <strcmp>
f0103095:	83 c4 10             	add    $0x10,%esp
f0103098:	85 c0                	test   %eax,%eax
f010309a:	75 15                	jne    f01030b1 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f010309c:	e8 27 de ff ff       	call   f0100ec8 <isKHeapPlacementStrategyBESTFIT>
f01030a1:	84 c0                	test   %al,%al
f01030a3:	74 05                	je     f01030aa <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f01030a5:	e8 05 a6 02 00       	call   f012d6af <test_krealloc_BF>
		}
		return 0;
f01030aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01030af:	eb 05                	jmp    f01030b6 <command_test_kheap+0x376>
	}
	return 0;
f01030b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030b6:	c9                   	leave  
f01030b7:	c3                   	ret    

f01030b8 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f01030b8:	55                   	push   %ebp
f01030b9:	89 e5                	mov    %esp,%ebp
f01030bb:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030be:	8b 45 08             	mov    0x8(%ebp),%eax
f01030c1:	05 00 14 00 00       	add    $0x1400,%eax
f01030c6:	c1 e0 03             	shl    $0x3,%eax
f01030c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030cc:	83 ec 04             	sub    $0x4,%esp
f01030cf:	6a 08                	push   $0x8
f01030d1:	ff 75 0c             	pushl  0xc(%ebp)
f01030d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01030d7:	e8 65 e2 02 00       	call   f0131341 <ide_read>
f01030dc:	83 c4 10             	add    $0x10,%esp
f01030df:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01030e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01030e5:	c9                   	leave  
f01030e6:	c3                   	ret    

f01030e7 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01030e7:	55                   	push   %ebp
f01030e8:	89 e5                	mov    %esp,%ebp
f01030ea:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01030ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f0:	05 00 14 00 00       	add    $0x1400,%eax
f01030f5:	c1 e0 03             	shl    $0x3,%eax
f01030f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01030fb:	83 ec 04             	sub    $0x4,%esp
f01030fe:	6a 08                	push   $0x8
f0103100:	ff 75 0c             	pushl  0xc(%ebp)
f0103103:	ff 75 f4             	pushl  -0xc(%ebp)
f0103106:	e8 76 e3 02 00       	call   f0131481 <ide_write>
f010310b:	83 c4 10             	add    $0x10,%esp
f010310e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103111:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103115:	74 14                	je     f010312b <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103117:	83 ec 04             	sub    $0x4,%esp
f010311a:	68 48 52 13 f0       	push   $0xf0135248
f010311f:	6a 2e                	push   $0x2e
f0103121:	68 5f 52 13 f0       	push   $0xf013525f
f0103126:	e8 d0 d0 ff ff       	call   f01001fb <_panic>
	return success;
f010312b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010312e:	c9                   	leave  
f010312f:	c3                   	ret    

f0103130 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103130:	55                   	push   %ebp
f0103131:	89 e5                	mov    %esp,%ebp
f0103133:	53                   	push   %ebx
f0103134:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0103137:	c7 05 b8 7b 65 f0 00 	movl   $0x0,0xf0657bb8
f010313e:	00 00 00 
f0103141:	c7 05 bc 7b 65 f0 00 	movl   $0x0,0xf0657bbc
f0103148:	00 00 00 
f010314b:	c7 05 c4 7b 65 f0 00 	movl   $0x0,0xf0657bc4
f0103152:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103155:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010315c:	e9 e8 00 00 00       	jmp    f0103249 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103161:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103167:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010316a:	89 d0                	mov    %edx,%eax
f010316c:	01 c0                	add    %eax,%eax
f010316e:	01 d0                	add    %edx,%eax
f0103170:	c1 e0 03             	shl    $0x3,%eax
f0103173:	01 c8                	add    %ecx,%eax
f0103175:	83 ec 0c             	sub    $0xc,%esp
f0103178:	50                   	push   %eax
f0103179:	e8 82 36 00 00       	call   f0106800 <initialize_frame_info>
f010317e:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103181:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103187:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010318a:	89 d0                	mov    %edx,%eax
f010318c:	01 c0                	add    %eax,%eax
f010318e:	01 d0                	add    %edx,%eax
f0103190:	c1 e0 03             	shl    $0x3,%eax
f0103193:	01 c8                	add    %ecx,%eax
f0103195:	85 c0                	test   %eax,%eax
f0103197:	75 14                	jne    f01031ad <initialize_disk_page_file+0x7d>
f0103199:	83 ec 04             	sub    $0x4,%esp
f010319c:	68 7c 52 13 f0       	push   $0xf013527c
f01031a1:	6a 59                	push   $0x59
f01031a3:	68 5f 52 13 f0       	push   $0xf013525f
f01031a8:	e8 4e d0 ff ff       	call   f01001fb <_panic>
f01031ad:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031b6:	89 d0                	mov    %edx,%eax
f01031b8:	01 c0                	add    %eax,%eax
f01031ba:	01 d0                	add    %edx,%eax
f01031bc:	c1 e0 03             	shl    $0x3,%eax
f01031bf:	01 c8                	add    %ecx,%eax
f01031c1:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031c7:	89 10                	mov    %edx,(%eax)
f01031c9:	8b 00                	mov    (%eax),%eax
f01031cb:	85 c0                	test   %eax,%eax
f01031cd:	74 1f                	je     f01031ee <initialize_disk_page_file+0xbe>
f01031cf:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01031d5:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01031db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01031de:	89 c8                	mov    %ecx,%eax
f01031e0:	01 c0                	add    %eax,%eax
f01031e2:	01 c8                	add    %ecx,%eax
f01031e4:	c1 e0 03             	shl    $0x3,%eax
f01031e7:	01 d8                	add    %ebx,%eax
f01031e9:	89 42 04             	mov    %eax,0x4(%edx)
f01031ec:	eb 19                	jmp    f0103207 <initialize_disk_page_file+0xd7>
f01031ee:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01031f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031f7:	89 d0                	mov    %edx,%eax
f01031f9:	01 c0                	add    %eax,%eax
f01031fb:	01 d0                	add    %edx,%eax
f01031fd:	c1 e0 03             	shl    $0x3,%eax
f0103200:	01 c8                	add    %ecx,%eax
f0103202:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f0103207:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f010320d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103210:	89 d0                	mov    %edx,%eax
f0103212:	01 c0                	add    %eax,%eax
f0103214:	01 d0                	add    %edx,%eax
f0103216:	c1 e0 03             	shl    $0x3,%eax
f0103219:	01 c8                	add    %ecx,%eax
f010321b:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103220:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103229:	89 d0                	mov    %edx,%eax
f010322b:	01 c0                	add    %eax,%eax
f010322d:	01 d0                	add    %edx,%eax
f010322f:	c1 e0 03             	shl    $0x3,%eax
f0103232:	01 c8                	add    %ecx,%eax
f0103234:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010323b:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f0103240:	40                   	inc    %eax
f0103241:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103246:	ff 45 f4             	incl   -0xc(%ebp)
f0103249:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103250:	0f 8e 0b ff ff ff    	jle    f0103161 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103256:	90                   	nop
f0103257:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010325a:	c9                   	leave  
f010325b:	c3                   	ret    

f010325c <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f010325c:	55                   	push   %ebp
f010325d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010325f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103262:	8b 15 dc 7a 65 f0    	mov    0xf0657adc,%edx
f0103268:	29 d0                	sub    %edx,%eax
f010326a:	c1 f8 03             	sar    $0x3,%eax
f010326d:	89 c2                	mov    %eax,%edx
f010326f:	89 d0                	mov    %edx,%eax
f0103271:	c1 e0 02             	shl    $0x2,%eax
f0103274:	01 d0                	add    %edx,%eax
f0103276:	c1 e0 02             	shl    $0x2,%eax
f0103279:	01 d0                	add    %edx,%eax
f010327b:	c1 e0 02             	shl    $0x2,%eax
f010327e:	01 d0                	add    %edx,%eax
f0103280:	89 c1                	mov    %eax,%ecx
f0103282:	c1 e1 08             	shl    $0x8,%ecx
f0103285:	01 c8                	add    %ecx,%eax
f0103287:	89 c1                	mov    %eax,%ecx
f0103289:	c1 e1 10             	shl    $0x10,%ecx
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	01 c0                	add    %eax,%eax
f0103290:	01 d0                	add    %edx,%eax
}
f0103292:	5d                   	pop    %ebp
f0103293:	c3                   	ret    

f0103294 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103294:	55                   	push   %ebp
f0103295:	89 e5                	mov    %esp,%ebp
f0103297:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010329a:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f010329f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f01032a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032a6:	75 0a                	jne    f01032b2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f01032a8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01032ad:	e9 a7 00 00 00       	jmp    f0103359 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f01032b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01032b6:	75 14                	jne    f01032cc <allocate_disk_frame+0x38>
f01032b8:	83 ec 04             	sub    $0x4,%esp
f01032bb:	68 9f 52 13 f0       	push   $0xf013529f
f01032c0:	6a 78                	push   $0x78
f01032c2:	68 5f 52 13 f0       	push   $0xf013525f
f01032c7:	e8 2f cf ff ff       	call   f01001fb <_panic>
f01032cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032cf:	8b 00                	mov    (%eax),%eax
f01032d1:	85 c0                	test   %eax,%eax
f01032d3:	74 10                	je     f01032e5 <allocate_disk_frame+0x51>
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8b 00                	mov    (%eax),%eax
f01032da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032dd:	8b 52 04             	mov    0x4(%edx),%edx
f01032e0:	89 50 04             	mov    %edx,0x4(%eax)
f01032e3:	eb 0b                	jmp    f01032f0 <allocate_disk_frame+0x5c>
f01032e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032e8:	8b 40 04             	mov    0x4(%eax),%eax
f01032eb:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01032f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032f3:	8b 40 04             	mov    0x4(%eax),%eax
f01032f6:	85 c0                	test   %eax,%eax
f01032f8:	74 0f                	je     f0103309 <allocate_disk_frame+0x75>
f01032fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032fd:	8b 40 04             	mov    0x4(%eax),%eax
f0103300:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103303:	8b 12                	mov    (%edx),%edx
f0103305:	89 10                	mov    %edx,(%eax)
f0103307:	eb 0a                	jmp    f0103313 <allocate_disk_frame+0x7f>
f0103309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010330c:	8b 00                	mov    (%eax),%eax
f010330e:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f0103313:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103316:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010331c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010331f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103326:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010332b:	48                   	dec    %eax
f010332c:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
	initialize_frame_info(ptr_frame_info);
f0103331:	83 ec 0c             	sub    $0xc,%esp
f0103334:	ff 75 f4             	pushl  -0xc(%ebp)
f0103337:	e8 c4 34 00 00       	call   f0106800 <initialize_frame_info>
f010333c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010333f:	83 ec 0c             	sub    $0xc,%esp
f0103342:	ff 75 f4             	pushl  -0xc(%ebp)
f0103345:	e8 12 ff ff ff       	call   f010325c <to_disk_frame_number>
f010334a:	83 c4 10             	add    $0x10,%esp
f010334d:	89 c2                	mov    %eax,%edx
f010334f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103352:	89 10                	mov    %edx,(%eax)
	return 0;
f0103354:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103359:	c9                   	leave  
f010335a:	c3                   	ret    

f010335b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010335b:	55                   	push   %ebp
f010335c:	89 e5                	mov    %esp,%ebp
f010335e:	53                   	push   %ebx
f010335f:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103362:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103366:	0f 84 ca 00 00 00    	je     f0103436 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010336c:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103372:	8b 55 08             	mov    0x8(%ebp),%edx
f0103375:	89 d0                	mov    %edx,%eax
f0103377:	01 c0                	add    %eax,%eax
f0103379:	01 d0                	add    %edx,%eax
f010337b:	c1 e0 03             	shl    $0x3,%eax
f010337e:	01 c8                	add    %ecx,%eax
f0103380:	85 c0                	test   %eax,%eax
f0103382:	75 17                	jne    f010339b <free_disk_frame+0x40>
f0103384:	83 ec 04             	sub    $0x4,%esp
f0103387:	68 7c 52 13 f0       	push   $0xf013527c
f010338c:	68 85 00 00 00       	push   $0x85
f0103391:	68 5f 52 13 f0       	push   $0xf013525f
f0103396:	e8 60 ce ff ff       	call   f01001fb <_panic>
f010339b:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033a1:	8b 55 08             	mov    0x8(%ebp),%edx
f01033a4:	89 d0                	mov    %edx,%eax
f01033a6:	01 c0                	add    %eax,%eax
f01033a8:	01 d0                	add    %edx,%eax
f01033aa:	c1 e0 03             	shl    $0x3,%eax
f01033ad:	01 c8                	add    %ecx,%eax
f01033af:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033b5:	89 10                	mov    %edx,(%eax)
f01033b7:	8b 00                	mov    (%eax),%eax
f01033b9:	85 c0                	test   %eax,%eax
f01033bb:	74 1f                	je     f01033dc <free_disk_frame+0x81>
f01033bd:	8b 15 b8 7b 65 f0    	mov    0xf0657bb8,%edx
f01033c3:	8b 1d dc 7a 65 f0    	mov    0xf0657adc,%ebx
f01033c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01033cc:	89 c8                	mov    %ecx,%eax
f01033ce:	01 c0                	add    %eax,%eax
f01033d0:	01 c8                	add    %ecx,%eax
f01033d2:	c1 e0 03             	shl    $0x3,%eax
f01033d5:	01 d8                	add    %ebx,%eax
f01033d7:	89 42 04             	mov    %eax,0x4(%edx)
f01033da:	eb 19                	jmp    f01033f5 <free_disk_frame+0x9a>
f01033dc:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e5:	89 d0                	mov    %edx,%eax
f01033e7:	01 c0                	add    %eax,%eax
f01033e9:	01 d0                	add    %edx,%eax
f01033eb:	c1 e0 03             	shl    $0x3,%eax
f01033ee:	01 c8                	add    %ecx,%eax
f01033f0:	a3 bc 7b 65 f0       	mov    %eax,0xf0657bbc
f01033f5:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f01033fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01033fe:	89 d0                	mov    %edx,%eax
f0103400:	01 c0                	add    %eax,%eax
f0103402:	01 d0                	add    %edx,%eax
f0103404:	c1 e0 03             	shl    $0x3,%eax
f0103407:	01 c8                	add    %ecx,%eax
f0103409:	a3 b8 7b 65 f0       	mov    %eax,0xf0657bb8
f010340e:	8b 0d dc 7a 65 f0    	mov    0xf0657adc,%ecx
f0103414:	8b 55 08             	mov    0x8(%ebp),%edx
f0103417:	89 d0                	mov    %edx,%eax
f0103419:	01 c0                	add    %eax,%eax
f010341b:	01 d0                	add    %edx,%eax
f010341d:	c1 e0 03             	shl    $0x3,%eax
f0103420:	01 c8                	add    %ecx,%eax
f0103422:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103429:	a1 c4 7b 65 f0       	mov    0xf0657bc4,%eax
f010342e:	40                   	inc    %eax
f010342f:	a3 c4 7b 65 f0       	mov    %eax,0xf0657bc4
f0103434:	eb 01                	jmp    f0103437 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103436:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103437:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010343a:	c9                   	leave  
f010343b:	c3                   	ret    

f010343c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010343c:	55                   	push   %ebp
f010343d:	89 e5                	mov    %esp,%ebp
f010343f:	53                   	push   %ebx
f0103440:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103443:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103446:	c1 e8 16             	shr    $0x16,%eax
f0103449:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103450:	8b 45 08             	mov    0x8(%ebp),%eax
f0103453:	01 d0                	add    %edx,%eax
f0103455:	8b 00                	mov    (%eax),%eax
f0103457:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010345a:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103461:	77 1d                	ja     f0103480 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f0103463:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103466:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010346b:	83 ec 0c             	sub    $0xc,%esp
f010346e:	50                   	push   %eax
f010346f:	e8 73 45 00 00       	call   f01079e7 <kheap_virtual_address>
f0103474:	83 c4 10             	add    $0x10,%esp
f0103477:	89 c2                	mov    %eax,%edx
f0103479:	8b 45 14             	mov    0x14(%ebp),%eax
f010347c:	89 10                	mov    %edx,(%eax)
f010347e:	eb 44                	jmp    f01034c4 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103480:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103483:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103488:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010348b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010348e:	c1 e8 0c             	shr    $0xc,%eax
f0103491:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103494:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0103499:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010349c:	72 17                	jb     f01034b5 <get_disk_page_table+0x79>
f010349e:	ff 75 f0             	pushl  -0x10(%ebp)
f01034a1:	68 c0 52 13 f0       	push   $0xf01352c0
f01034a6:	68 92 00 00 00       	push   $0x92
f01034ab:	68 5f 52 13 f0       	push   $0xf013525f
f01034b0:	e8 46 cd ff ff       	call   f01001fb <_panic>
f01034b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01034b8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01034bd:	89 c2                	mov    %eax,%edx
f01034bf:	8b 45 14             	mov    0x14(%ebp),%eax
f01034c2:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f01034c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01034c8:	0f 85 80 00 00 00    	jne    f010354e <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f01034ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01034d2:	74 6a                	je     f010353e <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f01034d4:	83 ec 0c             	sub    $0xc,%esp
f01034d7:	68 00 10 00 00       	push   $0x1000
f01034dc:	e8 1d 43 00 00       	call   f01077fe <kmalloc>
f01034e1:	83 c4 10             	add    $0x10,%esp
f01034e4:	89 c2                	mov    %eax,%edx
f01034e6:	8b 45 14             	mov    0x14(%ebp),%eax
f01034e9:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f01034eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ee:	8b 00                	mov    (%eax),%eax
f01034f0:	85 c0                	test   %eax,%eax
f01034f2:	75 07                	jne    f01034fb <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f01034f4:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01034f9:	eb 58                	jmp    f0103553 <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01034fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034fe:	c1 e8 16             	shr    $0x16,%eax
f0103501:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103508:	8b 45 08             	mov    0x8(%ebp),%eax
f010350b:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010350e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103511:	8b 00                	mov    (%eax),%eax
f0103513:	83 ec 0c             	sub    $0xc,%esp
f0103516:	50                   	push   %eax
f0103517:	e8 f7 44 00 00       	call   f0107a13 <kheap_physical_address>
f010351c:	83 c4 10             	add    $0x10,%esp
f010351f:	83 c8 01             	or     $0x1,%eax
f0103522:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103524:	8b 45 14             	mov    0x14(%ebp),%eax
f0103527:	8b 00                	mov    (%eax),%eax
f0103529:	83 ec 04             	sub    $0x4,%esp
f010352c:	68 00 10 00 00       	push   $0x1000
f0103531:	6a 00                	push   $0x0
f0103533:	50                   	push   %eax
f0103534:	e8 a3 d8 02 00       	call   f0130ddc <memset>
f0103539:	83 c4 10             	add    $0x10,%esp
f010353c:	eb 10                	jmp    f010354e <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010353e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103541:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103547:	b8 00 00 00 00       	mov    $0x0,%eax
f010354c:	eb 05                	jmp    f0103553 <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010354e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103553:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103556:	c9                   	leave  
f0103557:	c3                   	ret    

f0103558 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103558:	55                   	push   %ebp
f0103559:	89 e5                	mov    %esp,%ebp
f010355b:	83 ec 28             	sub    $0x28,%esp
f010355e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103561:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103564:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103568:	74 75                	je     f01035df <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010356a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103574:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103579:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010357c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103584:	f7 75 f4             	divl   -0xc(%ebp)
f0103587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010358a:	29 d0                	sub    %edx,%eax
f010358c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010358f:	73 32                	jae    f01035c3 <pf_add_empty_env_page+0x6b>
f0103591:	8b 45 08             	mov    0x8(%ebp),%eax
f0103594:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f010359a:	b8 00 00 00 00       	mov    $0x0,%eax
f010359f:	29 d0                	sub    %edx,%eax
f01035a1:	c1 e0 0c             	shl    $0xc,%eax
f01035a4:	2d 00 20 40 11       	sub    $0x11402000,%eax
f01035a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01035ac:	76 15                	jbe    f01035c3 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f01035ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01035b1:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01035b7:	8d 50 01             	lea    0x1(%eax),%edx
f01035ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01035bd:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f01035c3:	a1 60 7b 65 f0       	mov    0xf0657b60,%eax
f01035c8:	83 ec 04             	sub    $0x4,%esp
f01035cb:	50                   	push   %eax
f01035cc:	ff 75 0c             	pushl  0xc(%ebp)
f01035cf:	ff 75 08             	pushl  0x8(%ebp)
f01035d2:	e8 b2 00 00 00       	call   f0103689 <pf_add_env_page>
f01035d7:	83 c4 10             	add    $0x10,%esp
f01035da:	e9 a8 00 00 00       	jmp    f0103687 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f01035df:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035e6:	76 19                	jbe    f0103601 <pf_add_empty_env_page+0xa9>
f01035e8:	68 f0 52 13 f0       	push   $0xf01352f0
f01035ed:	68 16 53 13 f0       	push   $0xf0135316
f01035f2:	68 d1 00 00 00       	push   $0xd1
f01035f7:	68 5f 52 13 f0       	push   $0xf013525f
f01035fc:	e8 fa cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103601:	8b 45 08             	mov    0x8(%ebp),%eax
f0103604:	83 c0 64             	add    $0x64,%eax
f0103607:	83 ec 08             	sub    $0x8,%esp
f010360a:	50                   	push   %eax
f010360b:	ff 75 08             	pushl  0x8(%ebp)
f010360e:	e8 10 06 00 00       	call   f0103c23 <get_disk_page_directory>
f0103613:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103616:	8b 45 08             	mov    0x8(%ebp),%eax
f0103619:	8b 40 64             	mov    0x64(%eax),%eax
f010361c:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010361f:	52                   	push   %edx
f0103620:	6a 01                	push   $0x1
f0103622:	ff 75 0c             	pushl  0xc(%ebp)
f0103625:	50                   	push   %eax
f0103626:	e8 11 fe ff ff       	call   f010343c <get_disk_page_table>
f010362b:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010362e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103631:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103634:	c1 ea 0c             	shr    $0xc,%edx
f0103637:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010363d:	c1 e2 02             	shl    $0x2,%edx
f0103640:	01 d0                	add    %edx,%eax
f0103642:	8b 00                	mov    (%eax),%eax
f0103644:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103647:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010364a:	85 c0                	test   %eax,%eax
f010364c:	75 34                	jne    f0103682 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010364e:	83 ec 0c             	sub    $0xc,%esp
f0103651:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103654:	50                   	push   %eax
f0103655:	e8 3a fc ff ff       	call   f0103294 <allocate_disk_frame>
f010365a:	83 c4 10             	add    $0x10,%esp
f010365d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103660:	75 07                	jne    f0103669 <pf_add_empty_env_page+0x111>
f0103662:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103667:	eb 1e                	jmp    f0103687 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103669:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010366c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010366f:	c1 ea 0c             	shr    $0xc,%edx
f0103672:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103678:	c1 e2 02             	shl    $0x2,%edx
f010367b:	01 c2                	add    %eax,%edx
f010367d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103680:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103682:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103687:	c9                   	leave  
f0103688:	c3                   	ret    

f0103689 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103689:	55                   	push   %ebp
f010368a:	89 e5                	mov    %esp,%ebp
f010368c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010368f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103696:	76 19                	jbe    f01036b1 <pf_add_env_page+0x28>
f0103698:	68 f0 52 13 f0       	push   $0xf01352f0
f010369d:	68 16 53 13 f0       	push   $0xf0135316
f01036a2:	68 e6 00 00 00       	push   $0xe6
f01036a7:	68 5f 52 13 f0       	push   $0xf013525f
f01036ac:	e8 4a cb ff ff       	call   f01001fb <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01036b4:	83 c0 64             	add    $0x64,%eax
f01036b7:	83 ec 08             	sub    $0x8,%esp
f01036ba:	50                   	push   %eax
f01036bb:	ff 75 08             	pushl  0x8(%ebp)
f01036be:	e8 60 05 00 00       	call   f0103c23 <get_disk_page_directory>
f01036c3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c9:	8b 40 64             	mov    0x64(%eax),%eax
f01036cc:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01036cf:	52                   	push   %edx
f01036d0:	6a 01                	push   $0x1
f01036d2:	ff 75 0c             	pushl  0xc(%ebp)
f01036d5:	50                   	push   %eax
f01036d6:	e8 61 fd ff ff       	call   f010343c <get_disk_page_table>
f01036db:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01036e1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036e4:	c1 ea 0c             	shr    $0xc,%edx
f01036e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036ed:	c1 e2 02             	shl    $0x2,%edx
f01036f0:	01 d0                	add    %edx,%eax
f01036f2:	8b 00                	mov    (%eax),%eax
f01036f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01036f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036fa:	85 c0                	test   %eax,%eax
f01036fc:	75 34                	jne    f0103732 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036fe:	83 ec 0c             	sub    $0xc,%esp
f0103701:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103704:	50                   	push   %eax
f0103705:	e8 8a fb ff ff       	call   f0103294 <allocate_disk_frame>
f010370a:	83 c4 10             	add    $0x10,%esp
f010370d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103710:	75 07                	jne    f0103719 <pf_add_env_page+0x90>
f0103712:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103717:	eb 31                	jmp    f010374a <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103719:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010371c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010371f:	c1 ea 0c             	shr    $0xc,%edx
f0103722:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103728:	c1 e2 02             	shl    $0x2,%edx
f010372b:	01 c2                	add    %eax,%edx
f010372d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103730:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103732:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103735:	83 ec 08             	sub    $0x8,%esp
f0103738:	ff 75 10             	pushl  0x10(%ebp)
f010373b:	50                   	push   %eax
f010373c:	e8 a6 f9 ff ff       	call   f01030e7 <write_disk_page>
f0103741:	83 c4 10             	add    $0x10,%esp
f0103744:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103747:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010374a:	c9                   	leave  
f010374b:	c3                   	ret    

f010374c <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010374c:	55                   	push   %ebp
f010374d:	89 e5                	mov    %esp,%ebp
f010374f:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103752:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103759:	76 19                	jbe    f0103774 <pf_update_env_page+0x28>
f010375b:	68 f0 52 13 f0       	push   $0xf01352f0
f0103760:	68 16 53 13 f0       	push   $0xf0135316
f0103765:	68 08 01 00 00       	push   $0x108
f010376a:	68 5f 52 13 f0       	push   $0xf013525f
f010376f:	e8 87 ca ff ff       	call   f01001fb <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103774:	8b 45 08             	mov    0x8(%ebp),%eax
f0103777:	83 c0 64             	add    $0x64,%eax
f010377a:	83 ec 08             	sub    $0x8,%esp
f010377d:	50                   	push   %eax
f010377e:	ff 75 08             	pushl  0x8(%ebp)
f0103781:	e8 9d 04 00 00       	call   f0103c23 <get_disk_page_directory>
f0103786:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103789:	8b 45 08             	mov    0x8(%ebp),%eax
f010378c:	8b 40 64             	mov    0x64(%eax),%eax
f010378f:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103792:	52                   	push   %edx
f0103793:	6a 00                	push   $0x0
f0103795:	ff 75 0c             	pushl  0xc(%ebp)
f0103798:	50                   	push   %eax
f0103799:	e8 9e fc ff ff       	call   f010343c <get_disk_page_table>
f010379e:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f01037a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037a4:	85 c0                	test   %eax,%eax
f01037a6:	74 29                	je     f01037d1 <pf_update_env_page+0x85>
f01037a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037ab:	85 c0                	test   %eax,%eax
f01037ad:	0f 84 43 01 00 00    	je     f01038f6 <pf_update_env_page+0x1aa>
f01037b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01037b6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037b9:	c1 ea 0c             	shr    $0xc,%edx
f01037bc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037c2:	c1 e2 02             	shl    $0x2,%edx
f01037c5:	01 d0                	add    %edx,%eax
f01037c7:	8b 00                	mov    (%eax),%eax
f01037c9:	85 c0                	test   %eax,%eax
f01037cb:	0f 85 25 01 00 00    	jne    f01038f6 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f01037d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f01037d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01037da:	85 c0                	test   %eax,%eax
f01037dc:	79 09                	jns    f01037e7 <pf_update_env_page+0x9b>
f01037de:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01037e5:	76 38                	jbe    f010381f <pf_update_env_page+0xd3>
f01037e7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01037ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037f1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01037f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103801:	f7 75 f0             	divl   -0x10(%ebp)
f0103804:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103807:	29 d0                	sub    %edx,%eax
f0103809:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010380c:	0f 87 cd 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
f0103812:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0103819:	0f 87 c0 00 00 00    	ja     f01038df <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010381f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103822:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103825:	83 ec 04             	sub    $0x4,%esp
f0103828:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010382b:	52                   	push   %edx
f010382c:	ff 75 0c             	pushl  0xc(%ebp)
f010382f:	50                   	push   %eax
f0103830:	e8 fa 34 00 00       	call   f0106d2f <get_frame_info>
f0103835:	83 c4 10             	add    $0x10,%esp
f0103838:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010383b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010383e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103841:	75 52                	jne    f0103895 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0103843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103846:	83 ec 04             	sub    $0x4,%esp
f0103849:	50                   	push   %eax
f010384a:	ff 75 f4             	pushl  -0xc(%ebp)
f010384d:	ff 75 08             	pushl  0x8(%ebp)
f0103850:	e8 34 fe ff ff       	call   f0103689 <pf_add_env_page>
f0103855:	83 c4 10             	add    $0x10,%esp
f0103858:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010385b:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010385f:	75 17                	jne    f0103878 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103861:	83 ec 04             	sub    $0x4,%esp
f0103864:	68 2c 53 13 f0       	push   $0xf013532c
f0103869:	68 1d 01 00 00       	push   $0x11d
f010386e:	68 5f 52 13 f0       	push   $0xf013525f
f0103873:	e8 83 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103878:	8b 45 08             	mov    0x8(%ebp),%eax
f010387b:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103881:	8d 50 01             	lea    0x1(%eax),%edx
f0103884:	8b 45 08             	mov    0x8(%ebp),%eax
f0103887:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f010388d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103890:	e9 17 01 00 00       	jmp    f01039ac <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103895:	83 ec 04             	sub    $0x4,%esp
f0103898:	6a 00                	push   $0x0
f010389a:	ff 75 f4             	pushl  -0xc(%ebp)
f010389d:	ff 75 08             	pushl  0x8(%ebp)
f01038a0:	e8 b3 fc ff ff       	call   f0103558 <pf_add_empty_env_page>
f01038a5:	83 c4 10             	add    $0x10,%esp
f01038a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038ab:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038af:	75 17                	jne    f01038c8 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01038b1:	83 ec 04             	sub    $0x4,%esp
f01038b4:	68 58 53 13 f0       	push   $0xf0135358
f01038b9:	68 28 01 00 00       	push   $0x128
f01038be:	68 5f 52 13 f0       	push   $0xf013525f
f01038c3:	e8 33 c9 ff ff       	call   f01001fb <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038cb:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038d1:	8d 50 01             	lea    0x1(%eax),%edx
f01038d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038d7:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f01038dd:	eb 17                	jmp    f01038f6 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f01038df:	83 ec 04             	sub    $0x4,%esp
f01038e2:	68 a4 53 13 f0       	push   $0xf01353a4
f01038e7:	68 2f 01 00 00       	push   $0x12f
f01038ec:	68 5f 52 13 f0       	push   $0xf013525f
f01038f1:	e8 05 c9 ff ff       	call   f01001fb <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f9:	8b 40 64             	mov    0x64(%eax),%eax
f01038fc:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01038ff:	52                   	push   %edx
f0103900:	6a 00                	push   $0x0
f0103902:	ff 75 0c             	pushl  0xc(%ebp)
f0103905:	50                   	push   %eax
f0103906:	e8 31 fb ff ff       	call   f010343c <get_disk_page_table>
f010390b:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010390e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103911:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103914:	c1 ea 0c             	shr    $0xc,%edx
f0103917:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010391d:	c1 e2 02             	shl    $0x2,%edx
f0103920:	01 d0                	add    %edx,%eax
f0103922:	8b 00                	mov    (%eax),%eax
f0103924:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f0103927:	8b 45 08             	mov    0x8(%ebp),%eax
f010392a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010392d:	6a 00                	push   $0x0
f010392f:	68 00 00 80 ef       	push   $0xef800000
f0103934:	ff 75 10             	pushl  0x10(%ebp)
f0103937:	50                   	push   %eax
f0103938:	e8 2d 33 00 00       	call   f0106c6a <map_frame>
f010393d:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f0103940:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f0103947:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010394a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010394f:	83 ec 08             	sub    $0x8,%esp
f0103952:	50                   	push   %eax
f0103953:	ff 75 e0             	pushl  -0x20(%ebp)
f0103956:	e8 8c f7 ff ff       	call   f01030e7 <write_disk_page>
f010395b:	83 c4 10             	add    $0x10,%esp
f010395e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103961:	8b 45 10             	mov    0x10(%ebp),%eax
f0103964:	8b 40 08             	mov    0x8(%eax),%eax
f0103967:	40                   	inc    %eax
f0103968:	8b 55 10             	mov    0x10(%ebp),%edx
f010396b:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f010396f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103972:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103975:	83 ec 08             	sub    $0x8,%esp
f0103978:	68 00 00 80 ef       	push   $0xef800000
f010397d:	50                   	push   %eax
f010397e:	e8 1c 34 00 00       	call   f0106d9f <unmap_frame>
f0103983:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103986:	8b 45 10             	mov    0x10(%ebp),%eax
f0103989:	8b 40 08             	mov    0x8(%eax),%eax
f010398c:	48                   	dec    %eax
f010398d:	8b 55 10             	mov    0x10(%ebp),%edx
f0103990:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103994:	8b 45 08             	mov    0x8(%ebp),%eax
f0103997:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f010399d:	8d 50 01             	lea    0x1(%eax),%edx
f01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a3:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f01039a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01039ac:	c9                   	leave  
f01039ad:	c3                   	ret    

f01039ae <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01039ae:	55                   	push   %ebp
f01039af:	89 e5                	mov    %esp,%ebp
f01039b1:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01039b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01039ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01039bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039c2:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01039c8:	8b 40 64             	mov    0x64(%eax),%eax
f01039cb:	85 c0                	test   %eax,%eax
f01039cd:	75 0a                	jne    f01039d9 <pf_read_env_page+0x2b>
f01039cf:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039d4:	e9 90 00 00 00       	jmp    f0103a69 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f01039d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01039df:	8b 40 64             	mov    0x64(%eax),%eax
f01039e2:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f01039e5:	51                   	push   %ecx
f01039e6:	6a 00                	push   $0x0
f01039e8:	52                   	push   %edx
f01039e9:	50                   	push   %eax
f01039ea:	e8 4d fa ff ff       	call   f010343c <get_disk_page_table>
f01039ef:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01039f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039f5:	85 c0                	test   %eax,%eax
f01039f7:	75 07                	jne    f0103a00 <pf_read_env_page+0x52>
f01039f9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01039fe:	eb 69                	jmp    f0103a69 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a03:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a06:	c1 ea 0c             	shr    $0xc,%edx
f0103a09:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a0f:	c1 e2 02             	shl    $0x2,%edx
f0103a12:	01 d0                	add    %edx,%eax
f0103a14:	8b 00                	mov    (%eax),%eax
f0103a16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a1d:	75 07                	jne    f0103a26 <pf_read_env_page+0x78>
f0103a1f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a24:	eb 43                	jmp    f0103a69 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a26:	83 ec 08             	sub    $0x8,%esp
f0103a29:	ff 75 0c             	pushl  0xc(%ebp)
f0103a2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103a2f:	e8 84 f6 ff ff       	call   f01030b8 <read_disk_page>
f0103a34:	83 c4 10             	add    $0x10,%esp
f0103a37:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103a3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a40:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a43:	6a 40                	push   $0x40
f0103a45:	6a 00                	push   $0x0
f0103a47:	52                   	push   %edx
f0103a48:	50                   	push   %eax
f0103a49:	e8 cf 40 00 00       	call   f0107b1d <pt_set_page_permissions>
f0103a4e:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a54:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103a5a:	8d 50 01             	lea    0x1(%eax),%edx
f0103a5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a60:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103a66:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103a69:	c9                   	leave  
f0103a6a:	c3                   	ret    

f0103a6b <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103a6b:	55                   	push   %ebp
f0103a6c:	89 e5                	mov    %esp,%ebp
f0103a6e:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a74:	8b 40 64             	mov    0x64(%eax),%eax
f0103a77:	85 c0                	test   %eax,%eax
f0103a79:	74 62                	je     f0103add <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a7e:	8b 40 64             	mov    0x64(%eax),%eax
f0103a81:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103a84:	52                   	push   %edx
f0103a85:	6a 00                	push   $0x0
f0103a87:	ff 75 0c             	pushl  0xc(%ebp)
f0103a8a:	50                   	push   %eax
f0103a8b:	e8 ac f9 ff ff       	call   f010343c <get_disk_page_table>
f0103a90:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a96:	85 c0                	test   %eax,%eax
f0103a98:	74 46                	je     f0103ae0 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a9d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aa0:	c1 ea 0c             	shr    $0xc,%edx
f0103aa3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103aa9:	c1 e2 02             	shl    $0x2,%edx
f0103aac:	01 d0                	add    %edx,%eax
f0103aae:	8b 00                	mov    (%eax),%eax
f0103ab0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ab6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ab9:	c1 ea 0c             	shr    $0xc,%edx
f0103abc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ac2:	c1 e2 02             	shl    $0x2,%edx
f0103ac5:	01 d0                	add    %edx,%eax
f0103ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103acd:	83 ec 0c             	sub    $0xc,%esp
f0103ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0103ad3:	e8 83 f8 ff ff       	call   f010335b <free_disk_frame>
f0103ad8:	83 c4 10             	add    $0x10,%esp
f0103adb:	eb 04                	jmp    f0103ae1 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103add:	90                   	nop
f0103ade:	eb 01                	jmp    f0103ae1 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103ae0:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103ae1:	c9                   	leave  
f0103ae2:	c3                   	ret    

f0103ae3 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103ae3:	55                   	push   %ebp
f0103ae4:	89 e5                	mov    %esp,%ebp
f0103ae6:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ae9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103af0:	e9 b8 00 00 00       	jmp    f0103bad <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103af5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af8:	8b 40 64             	mov    0x64(%eax),%eax
f0103afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103afe:	c1 e2 02             	shl    $0x2,%edx
f0103b01:	01 d0                	add    %edx,%eax
f0103b03:	8b 00                	mov    (%eax),%eax
f0103b05:	83 e0 01             	and    $0x1,%eax
f0103b08:	85 c0                	test   %eax,%eax
f0103b0a:	0f 84 99 00 00 00    	je     f0103ba9 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b10:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b13:	8b 40 64             	mov    0x64(%eax),%eax
f0103b16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b19:	c1 e2 02             	shl    $0x2,%edx
f0103b1c:	01 d0                	add    %edx,%eax
f0103b1e:	8b 00                	mov    (%eax),%eax
f0103b20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b28:	83 ec 0c             	sub    $0xc,%esp
f0103b2b:	ff 75 ec             	pushl  -0x14(%ebp)
f0103b2e:	e8 b4 3e 00 00       	call   f01079e7 <kheap_virtual_address>
f0103b33:	83 c4 10             	add    $0x10,%esp
f0103b36:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103b40:	eb 3a                	jmp    f0103b7c <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b45:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b4f:	01 d0                	add    %edx,%eax
f0103b51:	8b 00                	mov    (%eax),%eax
f0103b53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103b60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b63:	01 d0                	add    %edx,%eax
f0103b65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103b6b:	83 ec 0c             	sub    $0xc,%esp
f0103b6e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103b71:	e8 e5 f7 ff ff       	call   f010335b <free_disk_frame>
f0103b76:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103b79:	ff 45 f0             	incl   -0x10(%ebp)
f0103b7c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103b83:	76 bd                	jbe    f0103b42 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103b85:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b88:	8b 40 64             	mov    0x64(%eax),%eax
f0103b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8e:	c1 e2 02             	shl    $0x2,%edx
f0103b91:	01 d0                	add    %edx,%eax
f0103b93:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103b99:	83 ec 0c             	sub    $0xc,%esp
f0103b9c:	ff 75 e8             	pushl  -0x18(%ebp)
f0103b9f:	e8 1c 3d 00 00       	call   f01078c0 <kfree>
f0103ba4:	83 c4 10             	add    $0x10,%esp
f0103ba7:	eb 01                	jmp    f0103baa <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103ba9:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103baa:	ff 45 f4             	incl   -0xc(%ebp)
f0103bad:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103bb4:	0f 86 3b ff ff ff    	jbe    f0103af5 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bbd:	8b 40 64             	mov    0x64(%eax),%eax
f0103bc0:	83 ec 0c             	sub    $0xc,%esp
f0103bc3:	50                   	push   %eax
f0103bc4:	e8 f7 3c 00 00       	call   f01078c0 <kfree>
f0103bc9:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bcf:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bd9:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103be3:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103be6:	85 c0                	test   %eax,%eax
f0103be8:	74 36                	je     f0103c20 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103bea:	83 ec 0c             	sub    $0xc,%esp
f0103bed:	ff 75 08             	pushl  0x8(%ebp)
f0103bf0:	e8 05 03 00 00       	call   f0103efa <__pf_remove_env_all_tables>
f0103bf5:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103bf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103bfe:	83 ec 0c             	sub    $0xc,%esp
f0103c01:	50                   	push   %eax
f0103c02:	e8 b9 3c 00 00       	call   f01078c0 <kfree>
f0103c07:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c0d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c14:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c17:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c1e:	eb 01                	jmp    f0103c21 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c20:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c21:	c9                   	leave  
f0103c22:	c3                   	ret    

f0103c23 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c23:	55                   	push   %ebp
f0103c24:	89 e5                	mov    %esp,%ebp
f0103c26:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c29:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c2c:	8b 50 64             	mov    0x64(%eax),%edx
f0103c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c32:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103c34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	75 58                	jne    f0103c95 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103c3d:	83 ec 0c             	sub    $0xc,%esp
f0103c40:	68 00 10 00 00       	push   $0x1000
f0103c45:	e8 b4 3b 00 00       	call   f01077fe <kmalloc>
f0103c4a:	83 c4 10             	add    $0x10,%esp
f0103c4d:	89 c2                	mov    %eax,%edx
f0103c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c52:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103c54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c57:	8b 00                	mov    (%eax),%eax
f0103c59:	85 c0                	test   %eax,%eax
f0103c5b:	75 07                	jne    f0103c64 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103c5d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103c62:	eb 36                	jmp    f0103c9a <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103c64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c67:	8b 00                	mov    (%eax),%eax
f0103c69:	83 ec 0c             	sub    $0xc,%esp
f0103c6c:	50                   	push   %eax
f0103c6d:	e8 a1 3d 00 00       	call   f0107a13 <kheap_physical_address>
f0103c72:	83 c4 10             	add    $0x10,%esp
f0103c75:	89 c2                	mov    %eax,%edx
f0103c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c7a:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c80:	8b 00                	mov    (%eax),%eax
f0103c82:	83 ec 04             	sub    $0x4,%esp
f0103c85:	68 00 10 00 00       	push   $0x1000
f0103c8a:	6a 00                	push   $0x0
f0103c8c:	50                   	push   %eax
f0103c8d:	e8 4a d1 02 00       	call   f0130ddc <memset>
f0103c92:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103c95:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c9a:	c9                   	leave  
f0103c9b:	c3                   	ret    

f0103c9c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103c9c:	55                   	push   %ebp
f0103c9d:	89 e5                	mov    %esp,%ebp
f0103c9f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103ca2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103ca9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103cb0:	eb 78                	jmp    f0103d2a <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb5:	8b 40 64             	mov    0x64(%eax),%eax
f0103cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbb:	c1 e2 02             	shl    $0x2,%edx
f0103cbe:	01 d0                	add    %edx,%eax
f0103cc0:	8b 00                	mov    (%eax),%eax
f0103cc2:	83 e0 01             	and    $0x1,%eax
f0103cc5:	85 c0                	test   %eax,%eax
f0103cc7:	74 5d                	je     f0103d26 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103cc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0103ccf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cd2:	c1 e2 02             	shl    $0x2,%edx
f0103cd5:	01 d0                	add    %edx,%eax
f0103cd7:	8b 00                	mov    (%eax),%eax
f0103cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cde:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	ff 75 e8             	pushl  -0x18(%ebp)
f0103ce7:	e8 fb 3c 00 00       	call   f01079e7 <kheap_virtual_address>
f0103cec:	83 c4 10             	add    $0x10,%esp
f0103cef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103cf2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103cf9:	eb 20                	jmp    f0103d1b <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103cfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103cfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d08:	01 d0                	add    %edx,%eax
f0103d0a:	8b 00                	mov    (%eax),%eax
f0103d0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d0f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d13:	74 03                	je     f0103d18 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d15:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d18:	ff 45 ec             	incl   -0x14(%ebp)
f0103d1b:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d22:	76 d7                	jbe    f0103cfb <pf_calculate_allocated_pages+0x5f>
f0103d24:	eb 01                	jmp    f0103d27 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d26:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d27:	ff 45 f4             	incl   -0xc(%ebp)
f0103d2a:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103d31:	0f 86 7b ff ff ff    	jbe    f0103cb2 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103d37:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103d3a:	c9                   	leave  
f0103d3b:	c3                   	ret    

f0103d3c <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103d3c:	55                   	push   %ebp
f0103d3d:	89 e5                	mov    %esp,%ebp
f0103d3f:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103d42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d49:	a1 b8 7b 65 f0       	mov    0xf0657bb8,%eax
f0103d4e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d51:	eb 0b                	jmp    f0103d5e <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103d53:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103d56:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103d5e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d62:	74 07                	je     f0103d6b <pf_calculate_free_frames+0x2f>
f0103d64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	eb 05                	jmp    f0103d70 <pf_calculate_free_frames+0x34>
f0103d6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d70:	a3 c0 7b 65 f0       	mov    %eax,0xf0657bc0
f0103d75:	a1 c0 7b 65 f0       	mov    0xf0657bc0,%eax
f0103d7a:	85 c0                	test   %eax,%eax
f0103d7c:	75 d5                	jne    f0103d53 <pf_calculate_free_frames+0x17>
f0103d7e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103d82:	75 cf                	jne    f0103d53 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103d84:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103d87:	c9                   	leave  
f0103d88:	c3                   	ret    

f0103d89 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103d89:	55                   	push   %ebp
f0103d8a:	89 e5                	mov    %esp,%ebp
f0103d8c:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d92:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d98:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d9d:	8b 00                	mov    (%eax),%eax
f0103d9f:	85 c0                	test   %eax,%eax
f0103da1:	75 58                	jne    f0103dfb <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103da3:	83 ec 0c             	sub    $0xc,%esp
f0103da6:	68 00 10 00 00       	push   $0x1000
f0103dab:	e8 4e 3a 00 00       	call   f01077fe <kmalloc>
f0103db0:	83 c4 10             	add    $0x10,%esp
f0103db3:	89 c2                	mov    %eax,%edx
f0103db5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103db8:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103dba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dbd:	8b 00                	mov    (%eax),%eax
f0103dbf:	85 c0                	test   %eax,%eax
f0103dc1:	75 07                	jne    f0103dca <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103dc3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103dc8:	eb 36                	jmp    f0103e00 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103dca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103dcd:	8b 00                	mov    (%eax),%eax
f0103dcf:	83 ec 0c             	sub    $0xc,%esp
f0103dd2:	50                   	push   %eax
f0103dd3:	e8 3b 3c 00 00       	call   f0107a13 <kheap_physical_address>
f0103dd8:	83 c4 10             	add    $0x10,%esp
f0103ddb:	89 c2                	mov    %eax,%edx
f0103ddd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103de0:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103de6:	8b 00                	mov    (%eax),%eax
f0103de8:	83 ec 04             	sub    $0x4,%esp
f0103deb:	68 00 10 00 00       	push   $0x1000
f0103df0:	6a 00                	push   $0x0
f0103df2:	50                   	push   %eax
f0103df3:	e8 e4 cf 02 00       	call   f0130ddc <memset>
f0103df8:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103dfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e00:	c9                   	leave  
f0103e01:	c3                   	ret    

f0103e02 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e02:	55                   	push   %ebp
f0103e03:	89 e5                	mov    %esp,%ebp
f0103e05:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e08:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e0f:	76 19                	jbe    f0103e2a <__pf_write_env_table+0x28>
f0103e11:	68 f0 52 13 f0       	push   $0xf01352f0
f0103e16:	68 16 53 13 f0       	push   $0xf0135316
f0103e1b:	68 5a 02 00 00       	push   $0x25a
f0103e20:	68 5f 52 13 f0       	push   $0xf013525f
f0103e25:	e8 d1 c3 ff ff       	call   f01001fb <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e2d:	83 c0 6c             	add    $0x6c,%eax
f0103e30:	83 ec 08             	sub    $0x8,%esp
f0103e33:	50                   	push   %eax
f0103e34:	ff 75 08             	pushl  0x8(%ebp)
f0103e37:	e8 4d ff ff ff       	call   f0103d89 <get_disk_table_directory>
f0103e3c:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e42:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e45:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e48:	c1 ea 16             	shr    $0x16,%edx
f0103e4b:	c1 e2 02             	shl    $0x2,%edx
f0103e4e:	01 d0                	add    %edx,%eax
f0103e50:	8b 00                	mov    (%eax),%eax
f0103e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e58:	85 c0                	test   %eax,%eax
f0103e5a:	75 31                	jne    f0103e8d <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e5c:	83 ec 0c             	sub    $0xc,%esp
f0103e5f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e62:	50                   	push   %eax
f0103e63:	e8 2c f4 ff ff       	call   f0103294 <allocate_disk_frame>
f0103e68:	83 c4 10             	add    $0x10,%esp
f0103e6b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e6e:	75 07                	jne    f0103e77 <__pf_write_env_table+0x75>
f0103e70:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e75:	eb 2e                	jmp    f0103ea5 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e7a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e7d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e80:	c1 ea 16             	shr    $0x16,%edx
f0103e83:	c1 e2 02             	shl    $0x2,%edx
f0103e86:	01 c2                	add    %eax,%edx
f0103e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e8b:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e90:	83 ec 08             	sub    $0x8,%esp
f0103e93:	ff 75 10             	pushl  0x10(%ebp)
f0103e96:	50                   	push   %eax
f0103e97:	e8 4b f2 ff ff       	call   f01030e7 <write_disk_page>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103ea5:	c9                   	leave  
f0103ea6:	c3                   	ret    

f0103ea7 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ea7:	55                   	push   %ebp
f0103ea8:	89 e5                	mov    %esp,%ebp
f0103eaa:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ead:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb3:	85 c0                	test   %eax,%eax
f0103eb5:	75 07                	jne    f0103ebe <__pf_read_env_table+0x17>
f0103eb7:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103ebc:	eb 3a                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ebe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ec1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ec4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ec7:	c1 ea 16             	shr    $0x16,%edx
f0103eca:	c1 e2 02             	shl    $0x2,%edx
f0103ecd:	01 d0                	add    %edx,%eax
f0103ecf:	8b 00                	mov    (%eax),%eax
f0103ed1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103ed4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ed8:	75 07                	jne    f0103ee1 <__pf_read_env_table+0x3a>
f0103eda:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103edf:	eb 17                	jmp    f0103ef8 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103ee1:	83 ec 08             	sub    $0x8,%esp
f0103ee4:	ff 75 10             	pushl  0x10(%ebp)
f0103ee7:	ff 75 f4             	pushl  -0xc(%ebp)
f0103eea:	e8 c9 f1 ff ff       	call   f01030b8 <read_disk_page>
f0103eef:	83 c4 10             	add    $0x10,%esp
f0103ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ef8:	c9                   	leave  
f0103ef9:	c3                   	ret    

f0103efa <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103efa:	55                   	push   %ebp
f0103efb:	89 e5                	mov    %esp,%ebp
f0103efd:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f03:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f06:	85 c0                	test   %eax,%eax
f0103f08:	74 4c                	je     f0103f56 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f11:	eb 38                	jmp    f0103f4b <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f16:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f1c:	c1 e2 02             	shl    $0x2,%edx
f0103f1f:	01 d0                	add    %edx,%eax
f0103f21:	8b 00                	mov    (%eax),%eax
f0103f23:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f26:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f29:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f2f:	c1 e2 02             	shl    $0x2,%edx
f0103f32:	01 d0                	add    %edx,%eax
f0103f34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103f3a:	83 ec 0c             	sub    $0xc,%esp
f0103f3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f40:	e8 16 f4 ff ff       	call   f010335b <free_disk_frame>
f0103f45:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f48:	ff 45 f4             	incl   -0xc(%ebp)
f0103f4b:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f52:	76 bf                	jbe    f0103f13 <__pf_remove_env_all_tables+0x19>
f0103f54:	eb 01                	jmp    f0103f57 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f56:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f57:	c9                   	leave  
f0103f58:	c3                   	ret    

f0103f59 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f59:	55                   	push   %ebp
f0103f5a:	89 e5                	mov    %esp,%ebp
f0103f5c:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f63:	75 10                	jne    f0103f75 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f65:	83 ec 0c             	sub    $0xc,%esp
f0103f68:	68 20 54 13 f0       	push   $0xf0135420
f0103f6d:	e8 10 cd ff ff       	call   f0100c82 <cprintf>
f0103f72:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f78:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f7b:	85 c0                	test   %eax,%eax
f0103f7d:	74 3d                	je     f0103fbc <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f82:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f85:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f88:	c1 ea 16             	shr    $0x16,%edx
f0103f8b:	c1 e2 02             	shl    $0x2,%edx
f0103f8e:	01 d0                	add    %edx,%eax
f0103f90:	8b 00                	mov    (%eax),%eax
f0103f92:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f95:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f98:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f9e:	c1 ea 16             	shr    $0x16,%edx
f0103fa1:	c1 e2 02             	shl    $0x2,%edx
f0103fa4:	01 d0                	add    %edx,%eax
f0103fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103fac:	83 ec 0c             	sub    $0xc,%esp
f0103faf:	ff 75 f4             	pushl  -0xc(%ebp)
f0103fb2:	e8 a4 f3 ff ff       	call   f010335b <free_disk_frame>
f0103fb7:	83 c4 10             	add    $0x10,%esp
f0103fba:	eb 01                	jmp    f0103fbd <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fbc:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103fbd:	c9                   	leave  
f0103fbe:	c3                   	ret    

f0103fbf <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103fbf:	55                   	push   %ebp
f0103fc0:	89 e5                	mov    %esp,%ebp
f0103fc2:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103fc5:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103fcc:	eb 1f                	jmp    f0103fed <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103fd1:	83 ec 04             	sub    $0x4,%esp
f0103fd4:	6a 08                	push   $0x8
f0103fd6:	ff 75 08             	pushl  0x8(%ebp)
f0103fd9:	50                   	push   %eax
f0103fda:	e8 a2 d4 02 00       	call   f0131481 <ide_write>
f0103fdf:	83 c4 10             	add    $0x10,%esp
f0103fe2:	85 c0                	test   %eax,%eax
f0103fe4:	75 12                	jne    f0103ff8 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103fe6:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103fed:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103ff4:	7e d8                	jle    f0103fce <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff6:	eb 01                	jmp    f0103ff9 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103ff8:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103ff9:	90                   	nop
f0103ffa:	c9                   	leave  
f0103ffb:	c3                   	ret    

f0103ffc <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103ffc:	55                   	push   %ebp
f0103ffd:	89 e5                	mov    %esp,%ebp
f0103fff:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104002:	8b 45 08             	mov    0x8(%ebp),%eax
f0104005:	0f b6 c0             	movzbl %al,%eax
f0104008:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010400f:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104012:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104015:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104018:	ee                   	out    %al,(%dx)
f0104019:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104020:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104023:	89 c2                	mov    %eax,%edx
f0104025:	ec                   	in     (%dx),%al
f0104026:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104029:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010402c:	0f b6 c0             	movzbl %al,%eax
}
f010402f:	c9                   	leave  
f0104030:	c3                   	ret    

f0104031 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104031:	55                   	push   %ebp
f0104032:	89 e5                	mov    %esp,%ebp
f0104034:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104037:	8b 45 08             	mov    0x8(%ebp),%eax
f010403a:	0f b6 c0             	movzbl %al,%eax
f010403d:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104044:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104047:	8a 45 f6             	mov    -0xa(%ebp),%al
f010404a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010404d:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f010404e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104051:	0f b6 c0             	movzbl %al,%eax
f0104054:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f010405b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010405e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104061:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104064:	ee                   	out    %al,(%dx)
}
f0104065:	90                   	nop
f0104066:	c9                   	leave  
f0104067:	c3                   	ret    

f0104068 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104068:	55                   	push   %ebp
f0104069:	89 e5                	mov    %esp,%ebp
f010406b:	53                   	push   %ebx
f010406c:	83 ec 24             	sub    $0x24,%esp
f010406f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104072:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104075:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010407c:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104080:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104083:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104086:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104087:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f010408b:	77 48                	ja     f01040d5 <kclock_start+0x6d>
f010408d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104094:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104098:	8a 45 ee             	mov    -0x12(%ebp),%al
f010409b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010409e:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010409f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040a3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01040a8:	99                   	cltd   
f01040a9:	f7 fb                	idiv   %ebx
f01040ab:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01040b1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01040b5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01040ba:	99                   	cltd   
f01040bb:	f7 fb                	idiv   %ebx
f01040bd:	89 c3                	mov    %eax,%ebx
f01040bf:	89 c8                	mov    %ecx,%eax
f01040c1:	99                   	cltd   
f01040c2:	f7 fb                	idiv   %ebx
f01040c4:	0f b7 c0             	movzwl %ax,%eax
f01040c7:	83 ec 0c             	sub    $0xc,%esp
f01040ca:	50                   	push   %eax
f01040cb:	e8 b8 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01040d0:	83 c4 10             	add    $0x10,%esp
f01040d3:	eb 13                	jmp    f01040e8 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01040d5:	6a 35                	push   $0x35
f01040d7:	68 44 54 13 f0       	push   $0xf0135444
f01040dc:	6a 33                	push   $0x33
f01040de:	68 a0 54 13 f0       	push   $0xf01354a0
f01040e3:	e8 13 c1 ff ff       	call   f01001fb <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01040e8:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01040ee:	0f b7 c0             	movzwl %ax,%eax
f01040f1:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040f6:	83 ec 0c             	sub    $0xc,%esp
f01040f9:	50                   	push   %eax
f01040fa:	e8 71 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f01040ff:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104102:	90                   	nop
f0104103:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104106:	c9                   	leave  
f0104107:	c3                   	ret    

f0104108 <kclock_stop>:

void
kclock_stop(void)
{
f0104108:	55                   	push   %ebp
f0104109:	89 e5                	mov    %esp,%ebp
f010410b:	83 ec 18             	sub    $0x18,%esp
f010410e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104115:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104119:	8a 45 f3             	mov    -0xd(%ebp),%al
f010411c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010411f:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104120:	83 ec 0c             	sub    $0xc,%esp
f0104123:	68 ff ff 00 00       	push   $0xffff
f0104128:	e8 43 1b 00 00       	call   f0105c70 <irq_setmask_8259A>
f010412d:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104130:	90                   	nop
f0104131:	c9                   	leave  
f0104132:	c3                   	ret    

f0104133 <kclock_resume>:

void
kclock_resume(void)
{
f0104133:	55                   	push   %ebp
f0104134:	89 e5                	mov    %esp,%ebp
f0104136:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104139:	e8 8c 01 00 00       	call   f01042ca <kclock_read_cnt0>
f010413e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104142:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104147:	77 06                	ja     f010414f <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104149:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010414f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104153:	83 e0 01             	and    $0x1,%eax
f0104156:	66 85 c0             	test   %ax,%ax
f0104159:	74 09                	je     f0104164 <kclock_resume+0x31>
		cnt0++;
f010415b:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010415f:	40                   	inc    %eax
f0104160:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104164:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010416b:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010416f:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104172:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104175:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f010417a:	83 ec 0c             	sub    $0xc,%esp
f010417d:	50                   	push   %eax
f010417e:	e8 05 01 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104183:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104186:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f010418c:	0f b7 c0             	movzwl %ax,%eax
f010418f:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104194:	83 ec 0c             	sub    $0xc,%esp
f0104197:	50                   	push   %eax
f0104198:	e8 d3 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f010419d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01041a0:	90                   	nop
f01041a1:	c9                   	leave  
f01041a2:	c3                   	ret    

f01041a3 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f01041a3:	55                   	push   %ebp
f01041a4:	89 e5                	mov    %esp,%ebp
f01041a6:	83 ec 28             	sub    $0x28,%esp
f01041a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01041ac:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01041af:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041b6:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041ba:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041c0:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041c1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01041c5:	83 ec 0c             	sub    $0xc,%esp
f01041c8:	50                   	push   %eax
f01041c9:	e8 ba 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f01041ce:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041d1:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f01041d7:	0f b7 c0             	movzwl %ax,%eax
f01041da:	25 fe ff 00 00       	and    $0xfffe,%eax
f01041df:	83 ec 0c             	sub    $0xc,%esp
f01041e2:	50                   	push   %eax
f01041e3:	e8 88 1a 00 00       	call   f0105c70 <irq_setmask_8259A>
f01041e8:	83 c4 10             	add    $0x10,%esp

}
f01041eb:	90                   	nop
f01041ec:	c9                   	leave  
f01041ed:	c3                   	ret    

f01041ee <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01041ee:	55                   	push   %ebp
f01041ef:	89 e5                	mov    %esp,%ebp
f01041f1:	53                   	push   %ebx
f01041f2:	83 ec 24             	sub    $0x24,%esp
f01041f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01041f8:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041fb:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ff:	77 6c                	ja     f010426d <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0104201:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104205:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010420a:	99                   	cltd   
f010420b:	f7 fb                	idiv   %ebx
f010420d:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104213:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104217:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010421c:	99                   	cltd   
f010421d:	f7 fb                	idiv   %ebx
f010421f:	89 c3                	mov    %eax,%ebx
f0104221:	89 c8                	mov    %ecx,%eax
f0104223:	99                   	cltd   
f0104224:	f7 fb                	idiv   %ebx
f0104226:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0104229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010422c:	25 01 00 00 80       	and    $0x80000001,%eax
f0104231:	85 c0                	test   %eax,%eax
f0104233:	79 05                	jns    f010423a <kclock_set_quantum+0x4c>
f0104235:	48                   	dec    %eax
f0104236:	83 c8 fe             	or     $0xfffffffe,%eax
f0104239:	40                   	inc    %eax
f010423a:	83 f8 01             	cmp    $0x1,%eax
f010423d:	75 03                	jne    f0104242 <kclock_set_quantum+0x54>
			cnt++;
f010423f:	ff 45 f4             	incl   -0xc(%ebp)
f0104242:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104249:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010424d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104250:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104253:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104254:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104257:	0f b7 c0             	movzwl %ax,%eax
f010425a:	83 ec 0c             	sub    $0xc,%esp
f010425d:	50                   	push   %eax
f010425e:	e8 25 00 00 00       	call   f0104288 <kclock_write_cnt0_LSB_first>
f0104263:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104266:	e8 9d fe ff ff       	call   f0104108 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f010426b:	eb 16                	jmp    f0104283 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010426d:	6a 35                	push   $0x35
f010426f:	68 44 54 13 f0       	push   $0xf0135444
f0104274:	68 c9 00 00 00       	push   $0xc9
f0104279:	68 a0 54 13 f0       	push   $0xf01354a0
f010427e:	e8 78 bf ff ff       	call   f01001fb <_panic>
	}
}
f0104283:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104286:	c9                   	leave  
f0104287:	c3                   	ret    

f0104288 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104288:	55                   	push   %ebp
f0104289:	89 e5                	mov    %esp,%ebp
f010428b:	83 ec 14             	sub    $0x14,%esp
f010428e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104291:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104295:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104298:	0f b6 c0             	movzbl %al,%eax
f010429b:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01042a2:	88 45 f6             	mov    %al,-0xa(%ebp)
f01042a5:	8a 45 f6             	mov    -0xa(%ebp),%al
f01042a8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01042ab:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01042ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042af:	66 c1 e8 08          	shr    $0x8,%ax
f01042b3:	0f b6 c0             	movzbl %al,%eax
f01042b6:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01042bd:	88 45 f7             	mov    %al,-0x9(%ebp)
f01042c0:	8a 45 f7             	mov    -0x9(%ebp),%al
f01042c3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01042c6:	ee                   	out    %al,(%dx)
}
f01042c7:	90                   	nop
f01042c8:	c9                   	leave  
f01042c9:	c3                   	ret    

f01042ca <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f01042ca:	55                   	push   %ebp
f01042cb:	89 e5                	mov    %esp,%ebp
f01042cd:	83 ec 20             	sub    $0x20,%esp
f01042d0:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042da:	89 c2                	mov    %eax,%edx
f01042dc:	ec                   	in     (%dx),%al
f01042dd:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01042e0:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01042e3:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042e6:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042f0:	89 c2                	mov    %eax,%edx
f01042f2:	ec                   	in     (%dx),%al
f01042f3:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042f6:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042f9:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104300:	c1 e0 08             	shl    $0x8,%eax
f0104303:	89 c2                	mov    %eax,%edx
f0104305:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104309:	09 d0                	or     %edx,%eax
f010430b:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f010430f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104312:	c9                   	leave  
f0104313:	c3                   	ret    

f0104314 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104314:	55                   	push   %ebp
f0104315:	89 e5                	mov    %esp,%ebp
f0104317:	83 ec 30             	sub    $0x30,%esp
f010431a:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104321:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104324:	89 c2                	mov    %eax,%edx
f0104326:	ec                   	in     (%dx),%al
f0104327:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010432a:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f010432d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104330:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104337:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010433b:	8a 45 dc             	mov    -0x24(%ebp),%al
f010433e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104341:	ee                   	out    %al,(%dx)
f0104342:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104349:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010434c:	89 c2                	mov    %eax,%edx
f010434e:	ec                   	in     (%dx),%al
f010434f:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104352:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104355:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104358:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010435f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104362:	89 c2                	mov    %eax,%edx
f0104364:	ec                   	in     (%dx),%al
f0104365:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104368:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010436b:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010436e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104372:	c1 e0 08             	shl    $0x8,%eax
f0104375:	89 c2                	mov    %eax,%edx
f0104377:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010437b:	09 d0                	or     %edx,%eax
f010437d:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104381:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104385:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f010438c:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010438f:	8a 45 df             	mov    -0x21(%ebp),%al
f0104392:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104395:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104396:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104399:	c9                   	leave  
f010439a:	c3                   	ret    

f010439b <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010439b:	55                   	push   %ebp
f010439c:	89 e5                	mov    %esp,%ebp
f010439e:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043a3:	85 c0                	test   %eax,%eax
f01043a5:	75 07                	jne    f01043ae <isSchedMethodRR+0x13>
f01043a7:	b8 01 00 00 00       	mov    $0x1,%eax
f01043ac:	eb 05                	jmp    f01043b3 <isSchedMethodRR+0x18>
f01043ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01043b3:	5d                   	pop    %ebp
f01043b4:	c3                   	ret    

f01043b5 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01043b5:	55                   	push   %ebp
f01043b6:	89 e5                	mov    %esp,%ebp
f01043b8:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01043bd:	83 f8 01             	cmp    $0x1,%eax
f01043c0:	75 07                	jne    f01043c9 <isSchedMethodMLFQ+0x14>
f01043c2:	b8 01 00 00 00       	mov    $0x1,%eax
f01043c7:	eb 05                	jmp    f01043ce <isSchedMethodMLFQ+0x19>
f01043c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01043ce:	5d                   	pop    %ebp
f01043cf:	c3                   	ret    

f01043d0 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f01043d0:	55                   	push   %ebp
f01043d1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043d7:	74 1d                	je     f01043f6 <init_queue+0x26>
	{
		LIST_INIT(queue);
f01043d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01043e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01043ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043f6:	90                   	nop
f01043f7:	5d                   	pop    %ebp
f01043f8:	c3                   	ret    

f01043f9 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043f9:	55                   	push   %ebp
f01043fa:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104400:	74 08                	je     f010440a <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104402:	8b 45 08             	mov    0x8(%ebp),%eax
f0104405:	8b 40 0c             	mov    0xc(%eax),%eax
f0104408:	eb 05                	jmp    f010440f <queue_size+0x16>
	}
	else
	{
		return 0;
f010440a:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010440f:	5d                   	pop    %ebp
f0104410:	c3                   	ret    

f0104411 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104411:	55                   	push   %ebp
f0104412:	89 e5                	mov    %esp,%ebp
f0104414:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104417:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010441b:	74 66                	je     f0104483 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f010441d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104421:	75 14                	jne    f0104437 <enqueue+0x26>
f0104423:	83 ec 04             	sub    $0x4,%esp
f0104426:	68 b4 54 13 f0       	push   $0xf01354b4
f010442b:	6a 2f                	push   $0x2f
f010442d:	68 d7 54 13 f0       	push   $0xf01354d7
f0104432:	e8 c4 bd ff ff       	call   f01001fb <_panic>
f0104437:	8b 45 08             	mov    0x8(%ebp),%eax
f010443a:	8b 10                	mov    (%eax),%edx
f010443c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010443f:	89 50 44             	mov    %edx,0x44(%eax)
f0104442:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104445:	8b 40 44             	mov    0x44(%eax),%eax
f0104448:	85 c0                	test   %eax,%eax
f010444a:	74 0d                	je     f0104459 <enqueue+0x48>
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	8b 00                	mov    (%eax),%eax
f0104451:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104454:	89 50 48             	mov    %edx,0x48(%eax)
f0104457:	eb 09                	jmp    f0104462 <enqueue+0x51>
f0104459:	8b 45 08             	mov    0x8(%ebp),%eax
f010445c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010445f:	89 50 04             	mov    %edx,0x4(%eax)
f0104462:	8b 45 08             	mov    0x8(%ebp),%eax
f0104465:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104468:	89 10                	mov    %edx,(%eax)
f010446a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010446d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104474:	8b 45 08             	mov    0x8(%ebp),%eax
f0104477:	8b 40 0c             	mov    0xc(%eax),%eax
f010447a:	8d 50 01             	lea    0x1(%eax),%edx
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104483:	90                   	nop
f0104484:	c9                   	leave  
f0104485:	c3                   	ret    

f0104486 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104486:	55                   	push   %ebp
f0104487:	89 e5                	mov    %esp,%ebp
f0104489:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f010448c:	8b 45 08             	mov    0x8(%ebp),%eax
f010448f:	8b 40 04             	mov    0x4(%eax),%eax
f0104492:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104495:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104499:	0f 84 8a 00 00 00    	je     f0104529 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f010449f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01044a3:	75 14                	jne    f01044b9 <dequeue+0x33>
f01044a5:	83 ec 04             	sub    $0x4,%esp
f01044a8:	68 e8 54 13 f0       	push   $0xf01354e8
f01044ad:	6a 38                	push   $0x38
f01044af:	68 d7 54 13 f0       	push   $0xf01354d7
f01044b4:	e8 42 bd ff ff       	call   f01001fb <_panic>
f01044b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044bc:	8b 40 44             	mov    0x44(%eax),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 11                	je     f01044d4 <dequeue+0x4e>
f01044c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044c6:	8b 40 44             	mov    0x44(%eax),%eax
f01044c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044cc:	8b 52 48             	mov    0x48(%edx),%edx
f01044cf:	89 50 48             	mov    %edx,0x48(%eax)
f01044d2:	eb 0c                	jmp    f01044e0 <dequeue+0x5a>
f01044d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044d7:	8b 50 48             	mov    0x48(%eax),%edx
f01044da:	8b 45 08             	mov    0x8(%ebp),%eax
f01044dd:	89 50 04             	mov    %edx,0x4(%eax)
f01044e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044e3:	8b 40 48             	mov    0x48(%eax),%eax
f01044e6:	85 c0                	test   %eax,%eax
f01044e8:	74 11                	je     f01044fb <dequeue+0x75>
f01044ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ed:	8b 40 48             	mov    0x48(%eax),%eax
f01044f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044f3:	8b 52 44             	mov    0x44(%edx),%edx
f01044f6:	89 50 44             	mov    %edx,0x44(%eax)
f01044f9:	eb 0b                	jmp    f0104506 <dequeue+0x80>
f01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044fe:	8b 50 44             	mov    0x44(%eax),%edx
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	89 10                	mov    %edx,(%eax)
f0104506:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104509:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104510:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104513:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010451a:	8b 45 08             	mov    0x8(%ebp),%eax
f010451d:	8b 40 0c             	mov    0xc(%eax),%eax
f0104520:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104523:	8b 45 08             	mov    0x8(%ebp),%eax
f0104526:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104529:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010452c:	c9                   	leave  
f010452d:	c3                   	ret    

f010452e <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f010452e:	55                   	push   %ebp
f010452f:	89 e5                	mov    %esp,%ebp
f0104531:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f0104534:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104538:	0f 84 8a 00 00 00    	je     f01045c8 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f010453e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104542:	75 14                	jne    f0104558 <remove_from_queue+0x2a>
f0104544:	83 ec 04             	sub    $0x4,%esp
f0104547:	68 e8 54 13 f0       	push   $0xf01354e8
f010454c:	6a 41                	push   $0x41
f010454e:	68 d7 54 13 f0       	push   $0xf01354d7
f0104553:	e8 a3 bc ff ff       	call   f01001fb <_panic>
f0104558:	8b 45 0c             	mov    0xc(%ebp),%eax
f010455b:	8b 40 44             	mov    0x44(%eax),%eax
f010455e:	85 c0                	test   %eax,%eax
f0104560:	74 11                	je     f0104573 <remove_from_queue+0x45>
f0104562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104565:	8b 40 44             	mov    0x44(%eax),%eax
f0104568:	8b 55 0c             	mov    0xc(%ebp),%edx
f010456b:	8b 52 48             	mov    0x48(%edx),%edx
f010456e:	89 50 48             	mov    %edx,0x48(%eax)
f0104571:	eb 0c                	jmp    f010457f <remove_from_queue+0x51>
f0104573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104576:	8b 50 48             	mov    0x48(%eax),%edx
f0104579:	8b 45 08             	mov    0x8(%ebp),%eax
f010457c:	89 50 04             	mov    %edx,0x4(%eax)
f010457f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104582:	8b 40 48             	mov    0x48(%eax),%eax
f0104585:	85 c0                	test   %eax,%eax
f0104587:	74 11                	je     f010459a <remove_from_queue+0x6c>
f0104589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010458c:	8b 40 48             	mov    0x48(%eax),%eax
f010458f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104592:	8b 52 44             	mov    0x44(%edx),%edx
f0104595:	89 50 44             	mov    %edx,0x44(%eax)
f0104598:	eb 0b                	jmp    f01045a5 <remove_from_queue+0x77>
f010459a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010459d:	8b 50 44             	mov    0x44(%eax),%edx
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	89 10                	mov    %edx,(%eax)
f01045a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01045b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01045bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01045c8:	90                   	nop
f01045c9:	c9                   	leave  
f01045ca:	c3                   	ret    

f01045cb <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01045cb:	55                   	push   %ebp
f01045cc:	89 e5                	mov    %esp,%ebp
f01045ce:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f01045d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 00                	mov    (%eax),%eax
f01045dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045e0:	eb 19                	jmp    f01045fb <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f01045e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045e5:	8b 40 4c             	mov    0x4c(%eax),%eax
f01045e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01045eb:	75 05                	jne    f01045f2 <find_env_in_queue+0x27>
		{
			return ptr_env;
f01045ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045f0:	eb 37                	jmp    f0104629 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01045f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f5:	8b 40 08             	mov    0x8(%eax),%eax
f01045f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045fb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045ff:	74 08                	je     f0104609 <find_env_in_queue+0x3e>
f0104601:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104604:	8b 40 44             	mov    0x44(%eax),%eax
f0104607:	eb 05                	jmp    f010460e <find_env_in_queue+0x43>
f0104609:	b8 00 00 00 00       	mov    $0x0,%eax
f010460e:	8b 55 08             	mov    0x8(%ebp),%edx
f0104611:	89 42 08             	mov    %eax,0x8(%edx)
f0104614:	8b 45 08             	mov    0x8(%ebp),%eax
f0104617:	8b 40 08             	mov    0x8(%eax),%eax
f010461a:	85 c0                	test   %eax,%eax
f010461c:	75 c4                	jne    f01045e2 <find_env_in_queue+0x17>
f010461e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0104622:	75 be                	jne    f01045e2 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104624:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104629:	c9                   	leave  
f010462a:	c3                   	ret    

f010462b <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f010462b:	55                   	push   %ebp
f010462c:	89 e5                	mov    %esp,%ebp
f010462e:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0104631:	83 ec 04             	sub    $0x4,%esp
f0104634:	68 08 55 13 f0       	push   $0xf0135508
f0104639:	6a 58                	push   $0x58
f010463b:	68 d7 54 13 f0       	push   $0xf01354d7
f0104640:	e8 b6 bb ff ff       	call   f01001fb <_panic>

f0104645 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104645:	55                   	push   %ebp
f0104646:	89 e5                	mov    %esp,%ebp
f0104648:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010464b:	e8 5d b8 02 00       	call   f012fead <chk1>
	scheduler_status = SCH_STARTED;
f0104650:	c7 05 58 7b 65 f0 01 	movl   $0x1,0xf0657b58
f0104657:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010465a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104661:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f0104666:	85 c0                	test   %eax,%eax
f0104668:	75 4d                	jne    f01046b7 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010466a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010466f:	85 c0                	test   %eax,%eax
f0104671:	74 18                	je     f010468b <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104673:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f0104679:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010467e:	83 ec 08             	sub    $0x8,%esp
f0104681:	52                   	push   %edx
f0104682:	50                   	push   %eax
f0104683:	e8 89 fd ff ff       	call   f0104411 <enqueue>
f0104688:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010468b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104690:	83 ec 0c             	sub    $0xc,%esp
f0104693:	50                   	push   %eax
f0104694:	e8 ed fd ff ff       	call   f0104486 <dequeue>
f0104699:	83 c4 10             	add    $0x10,%esp
f010469c:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010469f:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f01046a4:	8a 00                	mov    (%eax),%al
f01046a6:	0f b6 c0             	movzbl %al,%eax
f01046a9:	83 ec 0c             	sub    $0xc,%esp
f01046ac:	50                   	push   %eax
f01046ad:	e8 3c fb ff ff       	call   f01041ee <kclock_set_quantum>
f01046b2:	83 c4 10             	add    $0x10,%esp
f01046b5:	eb 12                	jmp    f01046c9 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01046b7:	a1 4c 7b 65 f0       	mov    0xf0657b4c,%eax
f01046bc:	83 f8 01             	cmp    $0x1,%eax
f01046bf:	75 08                	jne    f01046c9 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01046c1:	e8 65 ff ff ff       	call   f010462b <fos_scheduler_MLFQ>
f01046c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01046c9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01046ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01046d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046d4:	a3 14 72 65 f0       	mov    %eax,0xf0657214
	chk2(next_env) ;
f01046d9:	83 ec 0c             	sub    $0xc,%esp
f01046dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01046df:	e8 06 b8 02 00       	call   f012feea <chk2>
f01046e4:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01046e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01046ea:	a3 14 72 65 f0       	mov    %eax,0xf0657214

	//sched_print_all();

	if(next_env != NULL)
f01046ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046f3:	74 0b                	je     f0104700 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01046f5:	83 ec 0c             	sub    $0xc,%esp
f01046f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01046fb:	e8 69 51 00 00       	call   f0109869 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0104700:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0104707:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010470a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010470f:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0104712:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104715:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104718:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f010471f:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0104722:	83 ec 0c             	sub    $0xc,%esp
f0104725:	6a 00                	push   $0x0
f0104727:	e8 7c c5 ff ff       	call   f0100ca8 <run_command_prompt>
f010472c:	83 c4 10             	add    $0x10,%esp
f010472f:	eb f1                	jmp    f0104722 <fos_scheduler+0xdd>

f0104731 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0104731:	55                   	push   %ebp
f0104732:	89 e5                	mov    %esp,%ebp
f0104734:	83 ec 18             	sub    $0x18,%esp
f0104737:	8b 45 08             	mov    0x8(%ebp),%eax
f010473a:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f010473d:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f0104744:	00 00 00 
	scheduler_method = SCH_RR;
f0104747:	c7 05 4c 7b 65 f0 00 	movl   $0x0,0xf0657b4c
f010474e:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104751:	c6 05 80 7b 65 f0 01 	movb   $0x1,0xf0657b80
#if USE_KHEAP
	sched_delete_ready_queues();
f0104758:	e8 db 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f010475d:	83 ec 0c             	sub    $0xc,%esp
f0104760:	6a 10                	push   $0x10
f0104762:	e8 97 30 00 00       	call   f01077fe <kmalloc>
f0104767:	83 c4 10             	add    $0x10,%esp
f010476a:	a3 e8 7a 65 f0       	mov    %eax,0xf0657ae8
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f010476f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104774:	0f b6 c0             	movzbl %al,%eax
f0104777:	83 ec 0c             	sub    $0xc,%esp
f010477a:	50                   	push   %eax
f010477b:	e8 7e 30 00 00       	call   f01077fe <kmalloc>
f0104780:	83 c4 10             	add    $0x10,%esp
f0104783:	a3 2c 7b 65 f0       	mov    %eax,0xf0657b2c
#endif
	quantums[0] = quantum;
f0104788:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010478d:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104790:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0104792:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104797:	8a 00                	mov    (%eax),%al
f0104799:	0f b6 c0             	movzbl %al,%eax
f010479c:	83 ec 0c             	sub    $0xc,%esp
f010479f:	50                   	push   %eax
f01047a0:	e8 49 fa ff ff       	call   f01041ee <kclock_set_quantum>
f01047a5:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01047a8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01047ad:	83 ec 0c             	sub    $0xc,%esp
f01047b0:	50                   	push   %eax
f01047b1:	e8 1a fc ff ff       	call   f01043d0 <init_queue>
f01047b6:	83 c4 10             	add    $0x10,%esp
}
f01047b9:	90                   	nop
f01047ba:	c9                   	leave  
f01047bb:	c3                   	ret    

f01047bc <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01047bc:	55                   	push   %ebp
f01047bd:	89 e5                	mov    %esp,%ebp
f01047bf:	83 ec 18             	sub    $0x18,%esp
f01047c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c5:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01047c8:	e8 6b 00 00 00       	call   f0104838 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f01047cd:	c7 05 58 7b 65 f0 00 	movl   $0x0,0xf0657b58
f01047d4:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01047d7:	c7 05 4c 7b 65 f0 01 	movl   $0x1,0xf0657b4c
f01047de:	00 00 00 
	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01047e1:	83 ec 04             	sub    $0x4,%esp
f01047e4:	68 3c 55 13 f0       	push   $0xf013553c
f01047e9:	68 c6 00 00 00       	push   $0xc6
f01047ee:	68 d7 54 13 f0       	push   $0xf01354d7
f01047f3:	e8 03 ba ff ff       	call   f01001fb <_panic>

f01047f8 <sched_init>:
#endif
}


void sched_init()
{
f01047f8:	55                   	push   %ebp
f01047f9:	89 e5                	mov    %esp,%ebp
f01047fb:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01047fe:	c7 05 08 7b 65 f0 00 	movl   $0x0,0xf0657b08
f0104805:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	6a 0a                	push   $0xa
f010480d:	e8 1f ff ff ff       	call   f0104731 <sched_init_RR>
f0104812:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104815:	83 ec 0c             	sub    $0xc,%esp
f0104818:	68 3c 7b 65 f0       	push   $0xf0657b3c
f010481d:	e8 ae fb ff ff       	call   f01043d0 <init_queue>
f0104822:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104825:	83 ec 0c             	sub    $0xc,%esp
f0104828:	68 f4 7a 65 f0       	push   $0xf0657af4
f010482d:	e8 9e fb ff ff       	call   f01043d0 <init_queue>
f0104832:	83 c4 10             	add    $0x10,%esp
}
f0104835:	90                   	nop
f0104836:	c9                   	leave  
f0104837:	c3                   	ret    

f0104838 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0104838:	55                   	push   %ebp
f0104839:	89 e5                	mov    %esp,%ebp
f010483b:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f010483e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104843:	85 c0                	test   %eax,%eax
f0104845:	74 11                	je     f0104858 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104847:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010484c:	83 ec 0c             	sub    $0xc,%esp
f010484f:	50                   	push   %eax
f0104850:	e8 6b 30 00 00       	call   f01078c0 <kfree>
f0104855:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0104858:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f010485d:	85 c0                	test   %eax,%eax
f010485f:	74 11                	je     f0104872 <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f0104861:	a1 2c 7b 65 f0       	mov    0xf0657b2c,%eax
f0104866:	83 ec 0c             	sub    $0xc,%esp
f0104869:	50                   	push   %eax
f010486a:	e8 51 30 00 00       	call   f01078c0 <kfree>
f010486f:	83 c4 10             	add    $0x10,%esp
}
f0104872:	90                   	nop
f0104873:	c9                   	leave  
f0104874:	c3                   	ret    

f0104875 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104875:	55                   	push   %ebp
f0104876:	89 e5                	mov    %esp,%ebp
f0104878:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010487b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010487f:	74 1e                	je     f010489f <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104881:	8b 45 08             	mov    0x8(%ebp),%eax
f0104884:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010488b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104890:	83 ec 08             	sub    $0x8,%esp
f0104893:	ff 75 08             	pushl  0x8(%ebp)
f0104896:	50                   	push   %eax
f0104897:	e8 75 fb ff ff       	call   f0104411 <enqueue>
f010489c:	83 c4 10             	add    $0x10,%esp
	}
}
f010489f:	90                   	nop
f01048a0:	c9                   	leave  
f01048a1:	c3                   	ret    

f01048a2 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01048a2:	55                   	push   %ebp
f01048a3:	89 e5                	mov    %esp,%ebp
f01048a5:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01048a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ac:	0f 84 fe 00 00 00    	je     f01049b0 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048b9:	e9 e1 00 00 00       	jmp    f010499f <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01048be:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01048c4:	89 c2                	mov    %eax,%edx
f01048c6:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01048cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01048ce:	c1 e1 04             	shl    $0x4,%ecx
f01048d1:	01 c8                	add    %ecx,%eax
f01048d3:	52                   	push   %edx
f01048d4:	50                   	push   %eax
f01048d5:	e8 f1 fc ff ff       	call   f01045cb <find_env_in_queue>
f01048da:	83 c4 08             	add    $0x8,%esp
f01048dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01048e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01048e4:	0f 84 b2 00 00 00    	je     f010499c <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01048ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01048ee:	75 17                	jne    f0104907 <sched_remove_ready+0x65>
f01048f0:	83 ec 04             	sub    $0x4,%esp
f01048f3:	68 e8 54 13 f0       	push   $0xf01354e8
f01048f8:	68 f5 00 00 00       	push   $0xf5
f01048fd:	68 d7 54 13 f0       	push   $0xf01354d7
f0104902:	e8 f4 b8 ff ff       	call   f01001fb <_panic>
f0104907:	8b 45 08             	mov    0x8(%ebp),%eax
f010490a:	8b 40 44             	mov    0x44(%eax),%eax
f010490d:	85 c0                	test   %eax,%eax
f010490f:	74 11                	je     f0104922 <sched_remove_ready+0x80>
f0104911:	8b 45 08             	mov    0x8(%ebp),%eax
f0104914:	8b 40 44             	mov    0x44(%eax),%eax
f0104917:	8b 55 08             	mov    0x8(%ebp),%edx
f010491a:	8b 52 48             	mov    0x48(%edx),%edx
f010491d:	89 50 48             	mov    %edx,0x48(%eax)
f0104920:	eb 16                	jmp    f0104938 <sched_remove_ready+0x96>
f0104922:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104927:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010492a:	c1 e2 04             	shl    $0x4,%edx
f010492d:	01 c2                	add    %eax,%edx
f010492f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104932:	8b 40 48             	mov    0x48(%eax),%eax
f0104935:	89 42 04             	mov    %eax,0x4(%edx)
f0104938:	8b 45 08             	mov    0x8(%ebp),%eax
f010493b:	8b 40 48             	mov    0x48(%eax),%eax
f010493e:	85 c0                	test   %eax,%eax
f0104940:	74 11                	je     f0104953 <sched_remove_ready+0xb1>
f0104942:	8b 45 08             	mov    0x8(%ebp),%eax
f0104945:	8b 40 48             	mov    0x48(%eax),%eax
f0104948:	8b 55 08             	mov    0x8(%ebp),%edx
f010494b:	8b 52 44             	mov    0x44(%edx),%edx
f010494e:	89 50 44             	mov    %edx,0x44(%eax)
f0104951:	eb 15                	jmp    f0104968 <sched_remove_ready+0xc6>
f0104953:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010495b:	c1 e2 04             	shl    $0x4,%edx
f010495e:	01 c2                	add    %eax,%edx
f0104960:	8b 45 08             	mov    0x8(%ebp),%eax
f0104963:	8b 40 44             	mov    0x44(%eax),%eax
f0104966:	89 02                	mov    %eax,(%edx)
f0104968:	8b 45 08             	mov    0x8(%ebp),%eax
f010496b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104972:	8b 45 08             	mov    0x8(%ebp),%eax
f0104975:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010497c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104984:	c1 e2 04             	shl    $0x4,%edx
f0104987:	01 d0                	add    %edx,%eax
f0104989:	8b 50 0c             	mov    0xc(%eax),%edx
f010498c:	4a                   	dec    %edx
f010498d:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104990:	8b 45 08             	mov    0x8(%ebp),%eax
f0104993:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f010499a:	eb 14                	jmp    f01049b0 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010499c:	ff 45 f4             	incl   -0xc(%ebp)
f010499f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01049a4:	0f b6 c0             	movzbl %al,%eax
f01049a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049aa:	0f 8f 0e ff ff ff    	jg     f01048be <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01049b0:	c9                   	leave  
f01049b1:	c3                   	ret    

f01049b2 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01049b2:	55                   	push   %ebp
f01049b3:	89 e5                	mov    %esp,%ebp
f01049b5:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049bc:	74 1d                	je     f01049db <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f01049be:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c1:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f01049c8:	83 ec 08             	sub    $0x8,%esp
f01049cb:	ff 75 08             	pushl  0x8(%ebp)
f01049ce:	68 3c 7b 65 f0       	push   $0xf0657b3c
f01049d3:	e8 39 fa ff ff       	call   f0104411 <enqueue>
f01049d8:	83 c4 10             	add    $0x10,%esp
	}
}
f01049db:	90                   	nop
f01049dc:	c9                   	leave  
f01049dd:	c3                   	ret    

f01049de <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f01049de:	55                   	push   %ebp
f01049df:	89 e5                	mov    %esp,%ebp
f01049e1:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e8:	0f 84 92 00 00 00    	je     f0104a80 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01049ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049f2:	75 17                	jne    f0104a0b <sched_remove_new+0x2d>
f01049f4:	83 ec 04             	sub    $0x4,%esp
f01049f7:	68 e8 54 13 f0       	push   $0xf01354e8
f01049fc:	68 09 01 00 00       	push   $0x109
f0104a01:	68 d7 54 13 f0       	push   $0xf01354d7
f0104a06:	e8 f0 b7 ff ff       	call   f01001fb <_panic>
f0104a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a0e:	8b 40 44             	mov    0x44(%eax),%eax
f0104a11:	85 c0                	test   %eax,%eax
f0104a13:	74 11                	je     f0104a26 <sched_remove_new+0x48>
f0104a15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a18:	8b 40 44             	mov    0x44(%eax),%eax
f0104a1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a1e:	8b 52 48             	mov    0x48(%edx),%edx
f0104a21:	89 50 48             	mov    %edx,0x48(%eax)
f0104a24:	eb 0b                	jmp    f0104a31 <sched_remove_new+0x53>
f0104a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a29:	8b 40 48             	mov    0x48(%eax),%eax
f0104a2c:	a3 40 7b 65 f0       	mov    %eax,0xf0657b40
f0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a34:	8b 40 48             	mov    0x48(%eax),%eax
f0104a37:	85 c0                	test   %eax,%eax
f0104a39:	74 11                	je     f0104a4c <sched_remove_new+0x6e>
f0104a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a3e:	8b 40 48             	mov    0x48(%eax),%eax
f0104a41:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a44:	8b 52 44             	mov    0x44(%edx),%edx
f0104a47:	89 50 44             	mov    %edx,0x44(%eax)
f0104a4a:	eb 0b                	jmp    f0104a57 <sched_remove_new+0x79>
f0104a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4f:	8b 40 44             	mov    0x44(%eax),%eax
f0104a52:	a3 3c 7b 65 f0       	mov    %eax,0xf0657b3c
f0104a57:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a64:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a6b:	a1 48 7b 65 f0       	mov    0xf0657b48,%eax
f0104a70:	48                   	dec    %eax
f0104a71:	a3 48 7b 65 f0       	mov    %eax,0xf0657b48
		env->env_status = ENV_UNKNOWN;
f0104a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a79:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104a80:	90                   	nop
f0104a81:	c9                   	leave  
f0104a82:	c3                   	ret    

f0104a83 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104a83:	55                   	push   %ebp
f0104a84:	89 e5                	mov    %esp,%ebp
f0104a86:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a8d:	74 34                	je     f0104ac3 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104a8f:	e8 94 90 00 00       	call   f010db28 <isBufferingEnabled>
f0104a94:	84 c0                	test   %al,%al
f0104a96:	74 0e                	je     f0104aa6 <sched_insert_exit+0x23>
f0104a98:	83 ec 0c             	sub    $0xc,%esp
f0104a9b:	ff 75 08             	pushl  0x8(%ebp)
f0104a9e:	e8 eb 61 00 00       	call   f010ac8e <cleanup_buffers>
f0104aa3:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aa9:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ab0:	83 ec 08             	sub    $0x8,%esp
f0104ab3:	ff 75 08             	pushl  0x8(%ebp)
f0104ab6:	68 f4 7a 65 f0       	push   $0xf0657af4
f0104abb:	e8 51 f9 ff ff       	call   f0104411 <enqueue>
f0104ac0:	83 c4 10             	add    $0x10,%esp
	}
}
f0104ac3:	90                   	nop
f0104ac4:	c9                   	leave  
f0104ac5:	c3                   	ret    

f0104ac6 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104ac6:	55                   	push   %ebp
f0104ac7:	89 e5                	mov    %esp,%ebp
f0104ac9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ad0:	0f 84 92 00 00 00    	je     f0104b68 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104ad6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ada:	75 17                	jne    f0104af3 <sched_remove_exit+0x2d>
f0104adc:	83 ec 04             	sub    $0x4,%esp
f0104adf:	68 e8 54 13 f0       	push   $0xf01354e8
f0104ae4:	68 1b 01 00 00       	push   $0x11b
f0104ae9:	68 d7 54 13 f0       	push   $0xf01354d7
f0104aee:	e8 08 b7 ff ff       	call   f01001fb <_panic>
f0104af3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af6:	8b 40 44             	mov    0x44(%eax),%eax
f0104af9:	85 c0                	test   %eax,%eax
f0104afb:	74 11                	je     f0104b0e <sched_remove_exit+0x48>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 44             	mov    0x44(%eax),%eax
f0104b03:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b06:	8b 52 48             	mov    0x48(%edx),%edx
f0104b09:	89 50 48             	mov    %edx,0x48(%eax)
f0104b0c:	eb 0b                	jmp    f0104b19 <sched_remove_exit+0x53>
f0104b0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b11:	8b 40 48             	mov    0x48(%eax),%eax
f0104b14:	a3 f8 7a 65 f0       	mov    %eax,0xf0657af8
f0104b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1c:	8b 40 48             	mov    0x48(%eax),%eax
f0104b1f:	85 c0                	test   %eax,%eax
f0104b21:	74 11                	je     f0104b34 <sched_remove_exit+0x6e>
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 48             	mov    0x48(%eax),%eax
f0104b29:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b2c:	8b 52 44             	mov    0x44(%edx),%edx
f0104b2f:	89 50 44             	mov    %edx,0x44(%eax)
f0104b32:	eb 0b                	jmp    f0104b3f <sched_remove_exit+0x79>
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	8b 40 44             	mov    0x44(%eax),%eax
f0104b3a:	a3 f4 7a 65 f0       	mov    %eax,0xf0657af4
f0104b3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b42:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b53:	a1 00 7b 65 f0       	mov    0xf0657b00,%eax
f0104b58:	48                   	dec    %eax
f0104b59:	a3 00 7b 65 f0       	mov    %eax,0xf0657b00
		env->env_status = ENV_UNKNOWN;
f0104b5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b61:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b68:	90                   	nop
f0104b69:	c9                   	leave  
f0104b6a:	c3                   	ret    

f0104b6b <sched_print_all>:

void sched_print_all()
{
f0104b6b:	55                   	push   %ebp
f0104b6c:	89 e5                	mov    %esp,%ebp
f0104b6e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104b71:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b76:	85 c0                	test   %eax,%eax
f0104b78:	74 6c                	je     f0104be6 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104b7a:	83 ec 0c             	sub    $0xc,%esp
f0104b7d:	68 6c 55 13 f0       	push   $0xf013556c
f0104b82:	e8 fb c0 ff ff       	call   f0100c82 <cprintf>
f0104b87:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104b8a:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b92:	eb 29                	jmp    f0104bbd <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b97:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ba3:	83 ec 04             	sub    $0x4,%esp
f0104ba6:	52                   	push   %edx
f0104ba7:	50                   	push   %eax
f0104ba8:	68 8e 55 13 f0       	push   $0xf013558e
f0104bad:	e8 d0 c0 ff ff       	call   f0100c82 <cprintf>
f0104bb2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104bb5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bc1:	74 08                	je     f0104bcb <sched_print_all+0x60>
f0104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc6:	8b 40 44             	mov    0x44(%eax),%eax
f0104bc9:	eb 05                	jmp    f0104bd0 <sched_print_all+0x65>
f0104bcb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bd0:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104bd5:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104bda:	85 c0                	test   %eax,%eax
f0104bdc:	75 b6                	jne    f0104b94 <sched_print_all+0x29>
f0104bde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104be2:	75 b0                	jne    f0104b94 <sched_print_all+0x29>
f0104be4:	eb 10                	jmp    f0104bf6 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104be6:	83 ec 0c             	sub    $0xc,%esp
f0104be9:	68 98 55 13 f0       	push   $0xf0135598
f0104bee:	e8 8f c0 ff ff       	call   f0100c82 <cprintf>
f0104bf3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104bf6:	83 ec 0c             	sub    $0xc,%esp
f0104bf9:	68 b4 55 13 f0       	push   $0xf01355b4
f0104bfe:	e8 7f c0 ff ff       	call   f0100c82 <cprintf>
f0104c03:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104c0d:	e9 ca 00 00 00       	jmp    f0104cdc <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104c12:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c1a:	c1 e2 04             	shl    $0x4,%edx
f0104c1d:	01 d0                	add    %edx,%eax
f0104c1f:	8b 00                	mov    (%eax),%eax
f0104c21:	85 c0                	test   %eax,%eax
f0104c23:	0f 84 8d 00 00 00    	je     f0104cb6 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104c29:	83 ec 08             	sub    $0x8,%esp
f0104c2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c2f:	68 e8 55 13 f0       	push   $0xf01355e8
f0104c34:	e8 49 c0 ff ff       	call   f0100c82 <cprintf>
f0104c39:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c3c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c44:	c1 e2 04             	shl    $0x4,%edx
f0104c47:	01 d0                	add    %edx,%eax
f0104c49:	8b 00                	mov    (%eax),%eax
f0104c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c4e:	eb 34                	jmp    f0104c84 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c53:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c5f:	83 ec 04             	sub    $0x4,%esp
f0104c62:	52                   	push   %edx
f0104c63:	50                   	push   %eax
f0104c64:	68 8e 55 13 f0       	push   $0xf013558e
f0104c69:	e8 14 c0 ff ff       	call   f0100c82 <cprintf>
f0104c6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104c71:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c76:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c79:	c1 e2 04             	shl    $0x4,%edx
f0104c7c:	01 d0                	add    %edx,%eax
f0104c7e:	8b 40 08             	mov    0x8(%eax),%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c8c:	c1 e2 04             	shl    $0x4,%edx
f0104c8f:	01 d0                	add    %edx,%eax
f0104c91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c95:	74 08                	je     f0104c9f <sched_print_all+0x134>
f0104c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9a:	8b 52 44             	mov    0x44(%edx),%edx
f0104c9d:	eb 05                	jmp    f0104ca4 <sched_print_all+0x139>
f0104c9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0104ca4:	89 50 08             	mov    %edx,0x8(%eax)
f0104ca7:	8b 40 08             	mov    0x8(%eax),%eax
f0104caa:	85 c0                	test   %eax,%eax
f0104cac:	75 a2                	jne    f0104c50 <sched_print_all+0xe5>
f0104cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb2:	75 9c                	jne    f0104c50 <sched_print_all+0xe5>
f0104cb4:	eb 13                	jmp    f0104cc9 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104cb6:	83 ec 08             	sub    $0x8,%esp
f0104cb9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104cbc:	68 10 56 13 f0       	push   $0xf0135610
f0104cc1:	e8 bc bf ff ff       	call   f0100c82 <cprintf>
f0104cc6:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104cc9:	83 ec 0c             	sub    $0xc,%esp
f0104ccc:	68 b4 55 13 f0       	push   $0xf01355b4
f0104cd1:	e8 ac bf ff ff       	call   f0100c82 <cprintf>
f0104cd6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cd9:	ff 45 f0             	incl   -0x10(%ebp)
f0104cdc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0104ce1:	0f b6 c0             	movzbl %al,%eax
f0104ce4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104ce7:	0f 8f 25 ff ff ff    	jg     f0104c12 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104ced:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104cf2:	85 c0                	test   %eax,%eax
f0104cf4:	74 6c                	je     f0104d62 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104cf6:	83 ec 0c             	sub    $0xc,%esp
f0104cf9:	68 34 56 13 f0       	push   $0xf0135634
f0104cfe:	e8 7f bf ff ff       	call   f0100c82 <cprintf>
f0104d03:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d06:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0104d0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d0e:	eb 29                	jmp    f0104d39 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d13:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1f:	83 ec 04             	sub    $0x4,%esp
f0104d22:	52                   	push   %edx
f0104d23:	50                   	push   %eax
f0104d24:	68 8e 55 13 f0       	push   $0xf013558e
f0104d29:	e8 54 bf ff ff       	call   f0100c82 <cprintf>
f0104d2e:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104d31:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d36:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d3d:	74 08                	je     f0104d47 <sched_print_all+0x1dc>
f0104d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d42:	8b 40 44             	mov    0x44(%eax),%eax
f0104d45:	eb 05                	jmp    f0104d4c <sched_print_all+0x1e1>
f0104d47:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d4c:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0104d51:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0104d56:	85 c0                	test   %eax,%eax
f0104d58:	75 b6                	jne    f0104d10 <sched_print_all+0x1a5>
f0104d5a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d5e:	75 b0                	jne    f0104d10 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104d60:	eb 10                	jmp    f0104d72 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104d62:	83 ec 0c             	sub    $0xc,%esp
f0104d65:	68 56 56 13 f0       	push   $0xf0135656
f0104d6a:	e8 13 bf ff ff       	call   f0100c82 <cprintf>
f0104d6f:	83 c4 10             	add    $0x10,%esp
	}
}
f0104d72:	90                   	nop
f0104d73:	c9                   	leave  
f0104d74:	c3                   	ret    

f0104d75 <sched_run_all>:

void sched_run_all()
{
f0104d75:	55                   	push   %ebp
f0104d76:	89 e5                	mov    %esp,%ebp
f0104d78:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104d7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104d82:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d8a:	eb 24                	jmp    f0104db0 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104d8c:	83 ec 0c             	sub    $0xc,%esp
f0104d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d92:	e8 47 fc ff ff       	call   f01049de <sched_remove_new>
f0104d97:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104d9a:	83 ec 0c             	sub    $0xc,%esp
f0104d9d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104da0:	e8 d0 fa ff ff       	call   f0104875 <sched_insert_ready>
f0104da5:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104da8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104db0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db4:	74 08                	je     f0104dbe <sched_run_all+0x49>
f0104db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104db9:	8b 40 44             	mov    0x44(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <sched_run_all+0x4e>
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc3:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104dc8:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104dcd:	85 c0                	test   %eax,%eax
f0104dcf:	75 bb                	jne    f0104d8c <sched_run_all+0x17>
f0104dd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dd5:	75 b5                	jne    f0104d8c <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104dd7:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f0104ddc:	85 c0                	test   %eax,%eax
f0104dde:	75 05                	jne    f0104de5 <sched_run_all+0x70>
		fos_scheduler();
f0104de0:	e8 60 f8 ff ff       	call   f0104645 <fos_scheduler>
}
f0104de5:	90                   	nop
f0104de6:	c9                   	leave  
f0104de7:	c3                   	ret    

f0104de8 <sched_kill_all>:

void sched_kill_all()
{
f0104de8:	55                   	push   %ebp
f0104de9:	89 e5                	mov    %esp,%ebp
f0104deb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104dee:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104df3:	85 c0                	test   %eax,%eax
f0104df5:	0f 84 98 00 00 00    	je     f0104e93 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104dfb:	83 ec 0c             	sub    $0xc,%esp
f0104dfe:	68 74 56 13 f0       	push   $0xf0135674
f0104e03:	e8 7a be ff ff       	call   f0100c82 <cprintf>
f0104e08:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e0b:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f0104e10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e13:	eb 55                	jmp    f0104e6a <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e18:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e21:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e24:	83 ec 04             	sub    $0x4,%esp
f0104e27:	52                   	push   %edx
f0104e28:	50                   	push   %eax
f0104e29:	68 a0 56 13 f0       	push   $0xf01356a0
f0104e2e:	e8 4f be ff ff       	call   f0100c82 <cprintf>
f0104e33:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104e36:	83 ec 0c             	sub    $0xc,%esp
f0104e39:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e3c:	e8 9d fb ff ff       	call   f01049de <sched_remove_new>
f0104e41:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104e44:	83 ec 0c             	sub    $0xc,%esp
f0104e47:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e4a:	e8 6e 4a 00 00       	call   f01098bd <env_free>
f0104e4f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104e52:	83 ec 0c             	sub    $0xc,%esp
f0104e55:	68 b3 56 13 f0       	push   $0xf01356b3
f0104e5a:	e8 23 be ff ff       	call   f0100c82 <cprintf>
f0104e5f:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104e62:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e6a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e6e:	74 08                	je     f0104e78 <sched_kill_all+0x90>
f0104e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e73:	8b 40 44             	mov    0x44(%eax),%eax
f0104e76:	eb 05                	jmp    f0104e7d <sched_kill_all+0x95>
f0104e78:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e7d:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f0104e82:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	75 8a                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e8f:	75 84                	jne    f0104e15 <sched_kill_all+0x2d>
f0104e91:	eb 10                	jmp    f0104ea3 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104e93:	83 ec 0c             	sub    $0xc,%esp
f0104e96:	68 b9 56 13 f0       	push   $0xf01356b9
f0104e9b:	e8 e2 bd ff ff       	call   f0100c82 <cprintf>
f0104ea0:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ea3:	83 ec 0c             	sub    $0xc,%esp
f0104ea6:	68 b4 55 13 f0       	push   $0xf01355b4
f0104eab:	e8 d2 bd ff ff       	call   f0100c82 <cprintf>
f0104eb0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104eb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104eba:	e9 99 01 00 00       	jmp    f0105058 <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104ebf:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ec4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ec7:	c1 e2 04             	shl    $0x4,%edx
f0104eca:	01 d0                	add    %edx,%eax
f0104ecc:	8b 00                	mov    (%eax),%eax
f0104ece:	85 c0                	test   %eax,%eax
f0104ed0:	0f 84 5c 01 00 00    	je     f0105032 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104ed6:	83 ec 08             	sub    $0x8,%esp
f0104ed9:	ff 75 f0             	pushl  -0x10(%ebp)
f0104edc:	68 d4 56 13 f0       	push   $0xf01356d4
f0104ee1:	e8 9c bd ff ff       	call   f0100c82 <cprintf>
f0104ee6:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104ee9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104eee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ef1:	c1 e2 04             	shl    $0x4,%edx
f0104ef4:	01 d0                	add    %edx,%eax
f0104ef6:	8b 00                	mov    (%eax),%eax
f0104ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104efb:	e9 f8 00 00 00       	jmp    f0104ff8 <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f03:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f0f:	83 ec 04             	sub    $0x4,%esp
f0104f12:	52                   	push   %edx
f0104f13:	50                   	push   %eax
f0104f14:	68 a0 56 13 f0       	push   $0xf01356a0
f0104f19:	e8 64 bd ff ff       	call   f0100c82 <cprintf>
f0104f1e:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104f21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f25:	75 17                	jne    f0104f3e <sched_kill_all+0x156>
f0104f27:	83 ec 04             	sub    $0x4,%esp
f0104f2a:	68 e8 54 13 f0       	push   $0xf01354e8
f0104f2f:	68 76 01 00 00       	push   $0x176
f0104f34:	68 d7 54 13 f0       	push   $0xf01354d7
f0104f39:	e8 bd b2 ff ff       	call   f01001fb <_panic>
f0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f41:	8b 40 44             	mov    0x44(%eax),%eax
f0104f44:	85 c0                	test   %eax,%eax
f0104f46:	74 11                	je     f0104f59 <sched_kill_all+0x171>
f0104f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f51:	8b 52 48             	mov    0x48(%edx),%edx
f0104f54:	89 50 48             	mov    %edx,0x48(%eax)
f0104f57:	eb 16                	jmp    f0104f6f <sched_kill_all+0x187>
f0104f59:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f61:	c1 e2 04             	shl    $0x4,%edx
f0104f64:	01 c2                	add    %eax,%edx
f0104f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f69:	8b 40 48             	mov    0x48(%eax),%eax
f0104f6c:	89 42 04             	mov    %eax,0x4(%edx)
f0104f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f72:	8b 40 48             	mov    0x48(%eax),%eax
f0104f75:	85 c0                	test   %eax,%eax
f0104f77:	74 11                	je     f0104f8a <sched_kill_all+0x1a2>
f0104f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f7c:	8b 40 48             	mov    0x48(%eax),%eax
f0104f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104f82:	8b 52 44             	mov    0x44(%edx),%edx
f0104f85:	89 50 44             	mov    %edx,0x44(%eax)
f0104f88:	eb 15                	jmp    f0104f9f <sched_kill_all+0x1b7>
f0104f8a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104f8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f92:	c1 e2 04             	shl    $0x4,%edx
f0104f95:	01 c2                	add    %eax,%edx
f0104f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f9a:	8b 40 44             	mov    0x44(%eax),%eax
f0104f9d:	89 02                	mov    %eax,(%edx)
f0104f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fa2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fac:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fb8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fbb:	c1 e2 04             	shl    $0x4,%edx
f0104fbe:	01 d0                	add    %edx,%eax
f0104fc0:	8b 50 0c             	mov    0xc(%eax),%edx
f0104fc3:	4a                   	dec    %edx
f0104fc4:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0104fc7:	83 ec 0c             	sub    $0xc,%esp
f0104fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0104fcd:	e8 eb 48 00 00       	call   f01098bd <env_free>
f0104fd2:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104fd5:	83 ec 0c             	sub    $0xc,%esp
f0104fd8:	68 b3 56 13 f0       	push   $0xf01356b3
f0104fdd:	e8 a0 bc ff ff       	call   f0100c82 <cprintf>
f0104fe2:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fe5:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104fea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fed:	c1 e2 04             	shl    $0x4,%edx
f0104ff0:	01 d0                	add    %edx,%eax
f0104ff2:	8b 40 08             	mov    0x8(%eax),%eax
f0104ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ff8:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0104ffd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105000:	c1 e2 04             	shl    $0x4,%edx
f0105003:	01 d0                	add    %edx,%eax
f0105005:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105009:	74 08                	je     f0105013 <sched_kill_all+0x22b>
f010500b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010500e:	8b 52 44             	mov    0x44(%edx),%edx
f0105011:	eb 05                	jmp    f0105018 <sched_kill_all+0x230>
f0105013:	ba 00 00 00 00       	mov    $0x0,%edx
f0105018:	89 50 08             	mov    %edx,0x8(%eax)
f010501b:	8b 40 08             	mov    0x8(%eax),%eax
f010501e:	85 c0                	test   %eax,%eax
f0105020:	0f 85 da fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502a:	0f 85 d0 fe ff ff    	jne    f0104f00 <sched_kill_all+0x118>
f0105030:	eb 13                	jmp    f0105045 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105032:	83 ec 08             	sub    $0x8,%esp
f0105035:	ff 75 f0             	pushl  -0x10(%ebp)
f0105038:	68 10 56 13 f0       	push   $0xf0135610
f010503d:	e8 40 bc ff ff       	call   f0100c82 <cprintf>
f0105042:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105045:	83 ec 0c             	sub    $0xc,%esp
f0105048:	68 b4 55 13 f0       	push   $0xf01355b4
f010504d:	e8 30 bc ff ff       	call   f0100c82 <cprintf>
f0105052:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105055:	ff 45 f0             	incl   -0x10(%ebp)
f0105058:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f010505d:	0f b6 c0             	movzbl %al,%eax
f0105060:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105063:	0f 8f 56 fe ff ff    	jg     f0104ebf <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105069:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010506e:	85 c0                	test   %eax,%eax
f0105070:	0f 84 98 00 00 00    	je     f010510e <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105076:	83 ec 0c             	sub    $0xc,%esp
f0105079:	68 08 57 13 f0       	push   $0xf0135708
f010507e:	e8 ff bb ff ff       	call   f0100c82 <cprintf>
f0105083:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105086:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f010508b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010508e:	eb 55                	jmp    f01050e5 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105090:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105093:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010509f:	83 ec 04             	sub    $0x4,%esp
f01050a2:	52                   	push   %edx
f01050a3:	50                   	push   %eax
f01050a4:	68 a0 56 13 f0       	push   $0xf01356a0
f01050a9:	e8 d4 bb ff ff       	call   f0100c82 <cprintf>
f01050ae:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01050b1:	83 ec 0c             	sub    $0xc,%esp
f01050b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01050b7:	e8 0a fa ff ff       	call   f0104ac6 <sched_remove_exit>
f01050bc:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01050bf:	83 ec 0c             	sub    $0xc,%esp
f01050c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01050c5:	e8 f3 47 00 00       	call   f01098bd <env_free>
f01050ca:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01050cd:	83 ec 0c             	sub    $0xc,%esp
f01050d0:	68 b3 56 13 f0       	push   $0xf01356b3
f01050d5:	e8 a8 bb ff ff       	call   f0100c82 <cprintf>
f01050da:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01050dd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f01050e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e9:	74 08                	je     f01050f3 <sched_kill_all+0x30b>
f01050eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050ee:	8b 40 44             	mov    0x44(%eax),%eax
f01050f1:	eb 05                	jmp    f01050f8 <sched_kill_all+0x310>
f01050f3:	b8 00 00 00 00       	mov    $0x0,%eax
f01050f8:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f01050fd:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105102:	85 c0                	test   %eax,%eax
f0105104:	75 8a                	jne    f0105090 <sched_kill_all+0x2a8>
f0105106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010510a:	75 84                	jne    f0105090 <sched_kill_all+0x2a8>
f010510c:	eb 10                	jmp    f010511e <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010510e:	83 ec 0c             	sub    $0xc,%esp
f0105111:	68 56 56 13 f0       	push   $0xf0135656
f0105116:	e8 67 bb ff ff       	call   f0100c82 <cprintf>
f010511b:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010511e:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105125:	00 00 00 
	fos_scheduler();
f0105128:	e8 18 f5 ff ff       	call   f0104645 <fos_scheduler>

f010512d <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010512d:	55                   	push   %ebp
f010512e:	89 e5                	mov    %esp,%ebp
f0105130:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105133:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105137:	74 0e                	je     f0105147 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f0105139:	83 ec 0c             	sub    $0xc,%esp
f010513c:	ff 75 08             	pushl  0x8(%ebp)
f010513f:	e8 6e f8 ff ff       	call   f01049b2 <sched_insert_new>
f0105144:	83 c4 10             	add    $0x10,%esp
	}
}
f0105147:	90                   	nop
f0105148:	c9                   	leave  
f0105149:	c3                   	ret    

f010514a <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010514a:	55                   	push   %ebp
f010514b:	89 e5                	mov    %esp,%ebp
f010514d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105150:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105157:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010515c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010515f:	eb 3d                	jmp    f010519e <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105164:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105167:	3b 45 08             	cmp    0x8(%ebp),%eax
f010516a:	75 2a                	jne    f0105196 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010516c:	83 ec 0c             	sub    $0xc,%esp
f010516f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105172:	e8 67 f8 ff ff       	call   f01049de <sched_remove_new>
f0105177:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010517a:	83 ec 0c             	sub    $0xc,%esp
f010517d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105180:	e8 f0 f6 ff ff       	call   f0104875 <sched_insert_ready>
f0105185:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105188:	a1 58 7b 65 f0       	mov    0xf0657b58,%eax
f010518d:	85 c0                	test   %eax,%eax
f010518f:	75 36                	jne    f01051c7 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105191:	e8 af f4 ff ff       	call   f0104645 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105196:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f010519b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010519e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051a2:	74 08                	je     f01051ac <sched_run_env+0x62>
f01051a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051a7:	8b 40 44             	mov    0x44(%eax),%eax
f01051aa:	eb 05                	jmp    f01051b1 <sched_run_env+0x67>
f01051ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01051b1:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f01051b6:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01051bb:	85 c0                	test   %eax,%eax
f01051bd:	75 a2                	jne    f0105161 <sched_run_env+0x17>
f01051bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c3:	75 9c                	jne    f0105161 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c5:	eb 01                	jmp    f01051c8 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01051c7:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01051c8:	90                   	nop
f01051c9:	c9                   	leave  
f01051ca:	c3                   	ret    

f01051cb <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01051cb:	55                   	push   %ebp
f01051cc:	89 e5                	mov    %esp,%ebp
f01051ce:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01051d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01051d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01051df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01051e3:	75 59                	jne    f010523e <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01051e5:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f01051ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051ed:	eb 28                	jmp    f0105217 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01051ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051f5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051f8:	75 15                	jne    f010520f <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01051fa:	83 ec 0c             	sub    $0xc,%esp
f01051fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0105200:	e8 d9 f7 ff ff       	call   f01049de <sched_remove_new>
f0105205:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105208:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010520f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105214:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010521b:	74 08                	je     f0105225 <sched_exit_env+0x5a>
f010521d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105220:	8b 40 44             	mov    0x44(%eax),%eax
f0105223:	eb 05                	jmp    f010522a <sched_exit_env+0x5f>
f0105225:	b8 00 00 00 00       	mov    $0x0,%eax
f010522a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010522f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105234:	85 c0                	test   %eax,%eax
f0105236:	75 b7                	jne    f01051ef <sched_exit_env+0x24>
f0105238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010523c:	75 b1                	jne    f01051ef <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010523e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105242:	0f 85 67 01 00 00    	jne    f01053af <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105248:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010524f:	e9 47 01 00 00       	jmp    f010539b <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105254:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105259:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010525c:	c1 e2 04             	shl    $0x4,%edx
f010525f:	01 d0                	add    %edx,%eax
f0105261:	8b 00                	mov    (%eax),%eax
f0105263:	85 c0                	test   %eax,%eax
f0105265:	0f 84 27 01 00 00    	je     f0105392 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010526b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105272:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105277:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010527a:	c1 e2 04             	shl    $0x4,%edx
f010527d:	01 d0                	add    %edx,%eax
f010527f:	8b 00                	mov    (%eax),%eax
f0105281:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105284:	e9 d1 00 00 00       	jmp    f010535a <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105289:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010528c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010528f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105292:	0f 85 af 00 00 00    	jne    f0105347 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105298:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010529c:	75 17                	jne    f01052b5 <sched_exit_env+0xea>
f010529e:	83 ec 04             	sub    $0x4,%esp
f01052a1:	68 e8 54 13 f0       	push   $0xf01354e8
f01052a6:	68 e1 01 00 00       	push   $0x1e1
f01052ab:	68 d7 54 13 f0       	push   $0xf01354d7
f01052b0:	e8 46 af ff ff       	call   f01001fb <_panic>
f01052b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b8:	8b 40 44             	mov    0x44(%eax),%eax
f01052bb:	85 c0                	test   %eax,%eax
f01052bd:	74 11                	je     f01052d0 <sched_exit_env+0x105>
f01052bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052c2:	8b 40 44             	mov    0x44(%eax),%eax
f01052c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052c8:	8b 52 48             	mov    0x48(%edx),%edx
f01052cb:	89 50 48             	mov    %edx,0x48(%eax)
f01052ce:	eb 16                	jmp    f01052e6 <sched_exit_env+0x11b>
f01052d0:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01052d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052d8:	c1 e2 04             	shl    $0x4,%edx
f01052db:	01 c2                	add    %eax,%edx
f01052dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e0:	8b 40 48             	mov    0x48(%eax),%eax
f01052e3:	89 42 04             	mov    %eax,0x4(%edx)
f01052e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e9:	8b 40 48             	mov    0x48(%eax),%eax
f01052ec:	85 c0                	test   %eax,%eax
f01052ee:	74 11                	je     f0105301 <sched_exit_env+0x136>
f01052f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052f3:	8b 40 48             	mov    0x48(%eax),%eax
f01052f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01052f9:	8b 52 44             	mov    0x44(%edx),%edx
f01052fc:	89 50 44             	mov    %edx,0x44(%eax)
f01052ff:	eb 15                	jmp    f0105316 <sched_exit_env+0x14b>
f0105301:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105306:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105309:	c1 e2 04             	shl    $0x4,%edx
f010530c:	01 c2                	add    %eax,%edx
f010530e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105311:	8b 40 44             	mov    0x44(%eax),%eax
f0105314:	89 02                	mov    %eax,(%edx)
f0105316:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105319:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105320:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105323:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010532a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010532f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105332:	c1 e2 04             	shl    $0x4,%edx
f0105335:	01 d0                	add    %edx,%eax
f0105337:	8b 50 0c             	mov    0xc(%eax),%edx
f010533a:	4a                   	dec    %edx
f010533b:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f010533e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105345:	eb 4b                	jmp    f0105392 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105347:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010534c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010534f:	c1 e2 04             	shl    $0x4,%edx
f0105352:	01 d0                	add    %edx,%eax
f0105354:	8b 40 08             	mov    0x8(%eax),%eax
f0105357:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010535a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010535f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105362:	c1 e2 04             	shl    $0x4,%edx
f0105365:	01 d0                	add    %edx,%eax
f0105367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010536b:	74 08                	je     f0105375 <sched_exit_env+0x1aa>
f010536d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105370:	8b 52 44             	mov    0x44(%edx),%edx
f0105373:	eb 05                	jmp    f010537a <sched_exit_env+0x1af>
f0105375:	ba 00 00 00 00       	mov    $0x0,%edx
f010537a:	89 50 08             	mov    %edx,0x8(%eax)
f010537d:	8b 40 08             	mov    0x8(%eax),%eax
f0105380:	85 c0                	test   %eax,%eax
f0105382:	0f 85 01 ff ff ff    	jne    f0105289 <sched_exit_env+0xbe>
f0105388:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538c:	0f 85 f7 fe ff ff    	jne    f0105289 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105396:	75 16                	jne    f01053ae <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105398:	ff 45 ec             	incl   -0x14(%ebp)
f010539b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01053a0:	0f b6 c0             	movzbl %al,%eax
f01053a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01053a6:	0f 8f a8 fe ff ff    	jg     f0105254 <sched_exit_env+0x89>
f01053ac:	eb 01                	jmp    f01053af <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01053ae:	90                   	nop
		}
	}
	if (!found)
f01053af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053b3:	75 1c                	jne    f01053d1 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01053b5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053bd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053c0:	75 0f                	jne    f01053d1 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01053c2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01053ca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01053d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053d5:	74 2a                	je     f0105401 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01053d7:	83 ec 0c             	sub    $0xc,%esp
f01053da:	ff 75 f4             	pushl  -0xc(%ebp)
f01053dd:	e8 a1 f6 ff ff       	call   f0104a83 <sched_insert_exit>
f01053e2:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01053e5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01053ea:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053f0:	75 0f                	jne    f0105401 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01053f2:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f01053f9:	00 00 00 
			fos_scheduler();
f01053fc:	e8 44 f2 ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105401:	90                   	nop
f0105402:	c9                   	leave  
f0105403:	c3                   	ret    

f0105404 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0105404:	55                   	push   %ebp
f0105405:	89 e5                	mov    %esp,%ebp
f0105407:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010540a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105411:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105418:	e9 37 01 00 00       	jmp    f0105554 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010541d:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105422:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105425:	c1 e2 04             	shl    $0x4,%edx
f0105428:	01 d0                	add    %edx,%eax
f010542a:	8b 00                	mov    (%eax),%eax
f010542c:	85 c0                	test   %eax,%eax
f010542e:	0f 84 1d 01 00 00    	je     f0105551 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010543b:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105440:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105443:	c1 e2 04             	shl    $0x4,%edx
f0105446:	01 d0                	add    %edx,%eax
f0105448:	8b 00                	mov    (%eax),%eax
f010544a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010544d:	e9 c7 00 00 00       	jmp    f0105519 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105452:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105456:	75 17                	jne    f010546f <sched_exit_all_ready_envs+0x6b>
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 e8 54 13 f0       	push   $0xf01354e8
f0105460:	68 0c 02 00 00       	push   $0x20c
f0105465:	68 d7 54 13 f0       	push   $0xf01354d7
f010546a:	e8 8c ad ff ff       	call   f01001fb <_panic>
f010546f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105472:	8b 40 44             	mov    0x44(%eax),%eax
f0105475:	85 c0                	test   %eax,%eax
f0105477:	74 11                	je     f010548a <sched_exit_all_ready_envs+0x86>
f0105479:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010547c:	8b 40 44             	mov    0x44(%eax),%eax
f010547f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105482:	8b 52 48             	mov    0x48(%edx),%edx
f0105485:	89 50 48             	mov    %edx,0x48(%eax)
f0105488:	eb 16                	jmp    f01054a0 <sched_exit_all_ready_envs+0x9c>
f010548a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010548f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105492:	c1 e2 04             	shl    $0x4,%edx
f0105495:	01 c2                	add    %eax,%edx
f0105497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010549a:	8b 40 48             	mov    0x48(%eax),%eax
f010549d:	89 42 04             	mov    %eax,0x4(%edx)
f01054a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054a3:	8b 40 48             	mov    0x48(%eax),%eax
f01054a6:	85 c0                	test   %eax,%eax
f01054a8:	74 11                	je     f01054bb <sched_exit_all_ready_envs+0xb7>
f01054aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ad:	8b 40 48             	mov    0x48(%eax),%eax
f01054b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054b3:	8b 52 44             	mov    0x44(%edx),%edx
f01054b6:	89 50 44             	mov    %edx,0x44(%eax)
f01054b9:	eb 15                	jmp    f01054d0 <sched_exit_all_ready_envs+0xcc>
f01054bb:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054c3:	c1 e2 04             	shl    $0x4,%edx
f01054c6:	01 c2                	add    %eax,%edx
f01054c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054cb:	8b 40 44             	mov    0x44(%eax),%eax
f01054ce:	89 02                	mov    %eax,(%edx)
f01054d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01054da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054dd:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01054e4:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01054e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054ec:	c1 e2 04             	shl    $0x4,%edx
f01054ef:	01 d0                	add    %edx,%eax
f01054f1:	8b 50 0c             	mov    0xc(%eax),%edx
f01054f4:	4a                   	dec    %edx
f01054f5:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01054f8:	83 ec 0c             	sub    $0xc,%esp
f01054fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01054fe:	e8 80 f5 ff ff       	call   f0104a83 <sched_insert_exit>
f0105503:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105506:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010550b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010550e:	c1 e2 04             	shl    $0x4,%edx
f0105511:	01 d0                	add    %edx,%eax
f0105513:	8b 40 08             	mov    0x8(%eax),%eax
f0105516:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105519:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010551e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105521:	c1 e2 04             	shl    $0x4,%edx
f0105524:	01 d0                	add    %edx,%eax
f0105526:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010552a:	74 08                	je     f0105534 <sched_exit_all_ready_envs+0x130>
f010552c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010552f:	8b 52 44             	mov    0x44(%edx),%edx
f0105532:	eb 05                	jmp    f0105539 <sched_exit_all_ready_envs+0x135>
f0105534:	ba 00 00 00 00       	mov    $0x0,%edx
f0105539:	89 50 08             	mov    %edx,0x8(%eax)
f010553c:	8b 40 08             	mov    0x8(%eax),%eax
f010553f:	85 c0                	test   %eax,%eax
f0105541:	0f 85 0b ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>
f0105547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010554b:	0f 85 01 ff ff ff    	jne    f0105452 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105551:	ff 45 f0             	incl   -0x10(%ebp)
f0105554:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0105559:	0f b6 c0             	movzbl %al,%eax
f010555c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010555f:	0f 8f b8 fe ff ff    	jg     f010541d <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105565:	90                   	nop
f0105566:	c9                   	leave  
f0105567:	c3                   	ret    

f0105568 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0105568:	55                   	push   %ebp
f0105569:	89 e5                	mov    %esp,%ebp
f010556b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010556e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105575:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010557c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105580:	0f 85 a0 00 00 00    	jne    f0105626 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105586:	a1 3c 7b 65 f0       	mov    0xf0657b3c,%eax
f010558b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010558e:	eb 67                	jmp    f01055f7 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105590:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105593:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105596:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105599:	75 54                	jne    f01055ef <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010559b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559e:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01055a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055aa:	83 ec 04             	sub    $0x4,%esp
f01055ad:	52                   	push   %edx
f01055ae:	50                   	push   %eax
f01055af:	68 34 57 13 f0       	push   $0xf0135734
f01055b4:	e8 c9 b6 ff ff       	call   f0100c82 <cprintf>
f01055b9:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01055bc:	83 ec 0c             	sub    $0xc,%esp
f01055bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01055c2:	e8 17 f4 ff ff       	call   f01049de <sched_remove_new>
f01055c7:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01055ca:	83 ec 0c             	sub    $0xc,%esp
f01055cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01055d0:	e8 e8 42 00 00       	call   f01098bd <env_free>
f01055d5:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01055d8:	83 ec 0c             	sub    $0xc,%esp
f01055db:	68 b3 56 13 f0       	push   $0xf01356b3
f01055e0:	e8 9d b6 ff ff       	call   f0100c82 <cprintf>
f01055e5:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01055e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01055ef:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f01055f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055fb:	74 08                	je     f0105605 <sched_kill_env+0x9d>
f01055fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105600:	8b 40 44             	mov    0x44(%eax),%eax
f0105603:	eb 05                	jmp    f010560a <sched_kill_env+0xa2>
f0105605:	b8 00 00 00 00       	mov    $0x0,%eax
f010560a:	a3 44 7b 65 f0       	mov    %eax,0xf0657b44
f010560f:	a1 44 7b 65 f0       	mov    0xf0657b44,%eax
f0105614:	85 c0                	test   %eax,%eax
f0105616:	0f 85 74 ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
f010561c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105620:	0f 85 6a ff ff ff    	jne    f0105590 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105626:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010562a:	0f 85 a6 01 00 00    	jne    f01057d6 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105630:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105637:	e9 86 01 00 00       	jmp    f01057c2 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010563c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105644:	c1 e2 04             	shl    $0x4,%edx
f0105647:	01 d0                	add    %edx,%eax
f0105649:	8b 00                	mov    (%eax),%eax
f010564b:	85 c0                	test   %eax,%eax
f010564d:	0f 84 66 01 00 00    	je     f01057b9 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010565a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010565f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105662:	c1 e2 04             	shl    $0x4,%edx
f0105665:	01 d0                	add    %edx,%eax
f0105667:	8b 00                	mov    (%eax),%eax
f0105669:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010566c:	e9 10 01 00 00       	jmp    f0105781 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105671:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105674:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105677:	3b 45 08             	cmp    0x8(%ebp),%eax
f010567a:	0f 85 ee 00 00 00    	jne    f010576e <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105680:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105683:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010568c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010568f:	ff 75 ec             	pushl  -0x14(%ebp)
f0105692:	52                   	push   %edx
f0105693:	50                   	push   %eax
f0105694:	68 5c 57 13 f0       	push   $0xf013575c
f0105699:	e8 e4 b5 ff ff       	call   f0100c82 <cprintf>
f010569e:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01056a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a5:	75 17                	jne    f01056be <sched_kill_env+0x156>
f01056a7:	83 ec 04             	sub    $0x4,%esp
f01056aa:	68 e8 54 13 f0       	push   $0xf01354e8
f01056af:	68 33 02 00 00       	push   $0x233
f01056b4:	68 d7 54 13 f0       	push   $0xf01354d7
f01056b9:	e8 3d ab ff ff       	call   f01001fb <_panic>
f01056be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056c1:	8b 40 44             	mov    0x44(%eax),%eax
f01056c4:	85 c0                	test   %eax,%eax
f01056c6:	74 11                	je     f01056d9 <sched_kill_env+0x171>
f01056c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056cb:	8b 40 44             	mov    0x44(%eax),%eax
f01056ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01056d1:	8b 52 48             	mov    0x48(%edx),%edx
f01056d4:	89 50 48             	mov    %edx,0x48(%eax)
f01056d7:	eb 16                	jmp    f01056ef <sched_kill_env+0x187>
f01056d9:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01056de:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056e1:	c1 e2 04             	shl    $0x4,%edx
f01056e4:	01 c2                	add    %eax,%edx
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 48             	mov    0x48(%eax),%eax
f01056ec:	89 42 04             	mov    %eax,0x4(%edx)
f01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f2:	8b 40 48             	mov    0x48(%eax),%eax
f01056f5:	85 c0                	test   %eax,%eax
f01056f7:	74 11                	je     f010570a <sched_kill_env+0x1a2>
f01056f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056fc:	8b 40 48             	mov    0x48(%eax),%eax
f01056ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105702:	8b 52 44             	mov    0x44(%edx),%edx
f0105705:	89 50 44             	mov    %edx,0x44(%eax)
f0105708:	eb 15                	jmp    f010571f <sched_kill_env+0x1b7>
f010570a:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f010570f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105712:	c1 e2 04             	shl    $0x4,%edx
f0105715:	01 c2                	add    %eax,%edx
f0105717:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010571a:	8b 40 44             	mov    0x44(%eax),%eax
f010571d:	89 02                	mov    %eax,(%edx)
f010571f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105722:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105729:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105733:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105738:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010573b:	c1 e2 04             	shl    $0x4,%edx
f010573e:	01 d0                	add    %edx,%eax
f0105740:	8b 50 0c             	mov    0xc(%eax),%edx
f0105743:	4a                   	dec    %edx
f0105744:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105747:	83 ec 0c             	sub    $0xc,%esp
f010574a:	ff 75 f4             	pushl  -0xc(%ebp)
f010574d:	e8 6b 41 00 00       	call   f01098bd <env_free>
f0105752:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105755:	83 ec 0c             	sub    $0xc,%esp
f0105758:	68 b3 56 13 f0       	push   $0xf01356b3
f010575d:	e8 20 b5 ff ff       	call   f0100c82 <cprintf>
f0105762:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105765:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010576c:	eb 4b                	jmp    f01057b9 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010576e:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105773:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105776:	c1 e2 04             	shl    $0x4,%edx
f0105779:	01 d0                	add    %edx,%eax
f010577b:	8b 40 08             	mov    0x8(%eax),%eax
f010577e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105781:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0105786:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105789:	c1 e2 04             	shl    $0x4,%edx
f010578c:	01 d0                	add    %edx,%eax
f010578e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105792:	74 08                	je     f010579c <sched_kill_env+0x234>
f0105794:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105797:	8b 52 44             	mov    0x44(%edx),%edx
f010579a:	eb 05                	jmp    f01057a1 <sched_kill_env+0x239>
f010579c:	ba 00 00 00 00       	mov    $0x0,%edx
f01057a1:	89 50 08             	mov    %edx,0x8(%eax)
f01057a4:	8b 40 08             	mov    0x8(%eax),%eax
f01057a7:	85 c0                	test   %eax,%eax
f01057a9:	0f 85 c2 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
f01057af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057b3:	0f 85 b8 fe ff ff    	jne    f0105671 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01057b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057bd:	75 16                	jne    f01057d5 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01057bf:	ff 45 ec             	incl   -0x14(%ebp)
f01057c2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01057c7:	0f b6 c0             	movzbl %al,%eax
f01057ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01057cd:	0f 8f 69 fe ff ff    	jg     f010563c <sched_kill_env+0xd4>
f01057d3:	eb 01                	jmp    f01057d6 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01057d5:	90                   	nop
		}
	}
	if (!found)
f01057d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057da:	0f 85 a7 00 00 00    	jne    f0105887 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01057e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057e7:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f01057ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057ef:	eb 67                	jmp    f0105858 <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01057f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057f4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01057f7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01057fa:	75 54                	jne    f0105850 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ff:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105808:	8b 40 4c             	mov    0x4c(%eax),%eax
f010580b:	83 ec 04             	sub    $0x4,%esp
f010580e:	52                   	push   %edx
f010580f:	50                   	push   %eax
f0105810:	68 88 57 13 f0       	push   $0xf0135788
f0105815:	e8 68 b4 ff ff       	call   f0100c82 <cprintf>
f010581a:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010581d:	83 ec 0c             	sub    $0xc,%esp
f0105820:	ff 75 f4             	pushl  -0xc(%ebp)
f0105823:	e8 9e f2 ff ff       	call   f0104ac6 <sched_remove_exit>
f0105828:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010582b:	83 ec 0c             	sub    $0xc,%esp
f010582e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105831:	e8 87 40 00 00       	call   f01098bd <env_free>
f0105836:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105839:	83 ec 0c             	sub    $0xc,%esp
f010583c:	68 b3 56 13 f0       	push   $0xf01356b3
f0105841:	e8 3c b4 ff ff       	call   f0100c82 <cprintf>
f0105846:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105849:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105850:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105858:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585c:	74 08                	je     f0105866 <sched_kill_env+0x2fe>
f010585e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105861:	8b 40 44             	mov    0x44(%eax),%eax
f0105864:	eb 05                	jmp    f010586b <sched_kill_env+0x303>
f0105866:	b8 00 00 00 00       	mov    $0x0,%eax
f010586b:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0105870:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0105875:	85 c0                	test   %eax,%eax
f0105877:	0f 85 74 ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
f010587d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105881:	0f 85 6a ff ff ff    	jne    f01057f1 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105887:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010588b:	0f 85 a0 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105891:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105896:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105899:	3b 45 08             	cmp    0x8(%ebp),%eax
f010589c:	0f 85 8f 00 00 00    	jne    f0105931 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f01058a2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01058a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f01058aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b0:	83 f8 02             	cmp    $0x2,%eax
f01058b3:	74 19                	je     f01058ce <sched_kill_env+0x366>
f01058b5:	68 b0 57 13 f0       	push   $0xf01357b0
f01058ba:	68 d0 57 13 f0       	push   $0xf01357d0
f01058bf:	68 56 02 00 00       	push   $0x256
f01058c4:	68 d7 54 13 f0       	push   $0xf01354d7
f01058c9:	e8 2d a9 ff ff       	call   f01001fb <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01058ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058dd:	83 ec 04             	sub    $0x4,%esp
f01058e0:	52                   	push   %edx
f01058e1:	50                   	push   %eax
f01058e2:	68 e8 57 13 f0       	push   $0xf01357e8
f01058e7:	e8 96 b3 ff ff       	call   f0100c82 <cprintf>
f01058ec:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01058ef:	83 ec 0c             	sub    $0xc,%esp
f01058f2:	ff 75 f4             	pushl  -0xc(%ebp)
f01058f5:	e8 c3 3f 00 00       	call   f01098bd <env_free>
f01058fa:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01058fd:	83 ec 0c             	sub    $0xc,%esp
f0105900:	68 b3 56 13 f0       	push   $0xf01356b3
f0105905:	e8 78 b3 ff ff       	call   f0100c82 <cprintf>
f010590a:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010590d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105914:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0105919:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010591c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010591f:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105922:	c7 05 14 72 65 f0 00 	movl   $0x0,0xf0657214
f0105929:	00 00 00 
			fos_scheduler();
f010592c:	e8 14 ed ff ff       	call   f0104645 <fos_scheduler>
		}
	}
}
f0105931:	90                   	nop
f0105932:	c9                   	leave  
f0105933:	c3                   	ret    

f0105934 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105934:	55                   	push   %ebp
f0105935:	89 e5                	mov    %esp,%ebp
f0105937:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010593a:	83 ec 0c             	sub    $0xc,%esp
f010593d:	6a 01                	push   $0x1
f010593f:	e8 21 81 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0105944:	83 c4 10             	add    $0x10,%esp
f0105947:	85 c0                	test   %eax,%eax
f0105949:	74 05                	je     f0105950 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f010594b:	e8 05 00 00 00       	call   f0105955 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105950:	e8 f0 ec ff ff       	call   f0104645 <fos_scheduler>

f0105955 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105955:	55                   	push   %ebp
f0105956:	89 e5                	mov    %esp,%ebp
f0105958:	53                   	push   %ebx
f0105959:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010595c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0105961:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105964:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105968:	0f 84 cc 01 00 00    	je     f0105b3a <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010596e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105975:	e9 cf 00 00 00       	jmp    f0105a49 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010597a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010597d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105980:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105983:	89 d0                	mov    %edx,%eax
f0105985:	01 c0                	add    %eax,%eax
f0105987:	01 d0                	add    %edx,%eax
f0105989:	c1 e0 03             	shl    $0x3,%eax
f010598c:	01 c8                	add    %ecx,%eax
f010598e:	8a 40 04             	mov    0x4(%eax),%al
f0105991:	3c 01                	cmp    $0x1,%al
f0105993:	0f 84 ad 00 00 00    	je     f0105a46 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105999:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010599c:	8b 48 78             	mov    0x78(%eax),%ecx
f010599f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059a2:	89 d0                	mov    %edx,%eax
f01059a4:	01 c0                	add    %eax,%eax
f01059a6:	01 d0                	add    %edx,%eax
f01059a8:	c1 e0 03             	shl    $0x3,%eax
f01059ab:	01 c8                	add    %ecx,%eax
f01059ad:	8b 00                	mov    (%eax),%eax
f01059af:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f01059b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01059b8:	83 ec 08             	sub    $0x8,%esp
f01059bb:	ff 75 e8             	pushl  -0x18(%ebp)
f01059be:	50                   	push   %eax
f01059bf:	e8 0d 22 00 00       	call   f0107bd1 <pt_get_page_permissions>
f01059c4:	83 c4 10             	add    $0x10,%esp
f01059c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f01059ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059cd:	8b 48 78             	mov    0x78(%eax),%ecx
f01059d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d3:	89 d0                	mov    %edx,%eax
f01059d5:	01 c0                	add    %eax,%eax
f01059d7:	01 d0                	add    %edx,%eax
f01059d9:	c1 e0 03             	shl    $0x3,%eax
f01059dc:	01 c8                	add    %ecx,%eax
f01059de:	8b 40 08             	mov    0x8(%eax),%eax
f01059e1:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f01059e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01059e7:	83 e0 20             	and    $0x20,%eax
f01059ea:	85 c0                	test   %eax,%eax
f01059ec:	74 3b                	je     f0105a29 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f01059ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01059f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059f7:	89 d0                	mov    %edx,%eax
f01059f9:	01 c0                	add    %eax,%eax
f01059fb:	01 d0                	add    %edx,%eax
f01059fd:	c1 e0 03             	shl    $0x3,%eax
f0105a00:	01 c8                	add    %ecx,%eax
f0105a02:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a05:	c1 ea 02             	shr    $0x2,%edx
f0105a08:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105a0e:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a14:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a17:	6a 20                	push   $0x20
f0105a19:	6a 00                	push   $0x0
f0105a1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a1e:	50                   	push   %eax
f0105a1f:	e8 f9 20 00 00       	call   f0107b1d <pt_set_page_permissions>
f0105a24:	83 c4 10             	add    $0x10,%esp
f0105a27:	eb 1d                	jmp    f0105a46 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a2c:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a32:	89 d0                	mov    %edx,%eax
f0105a34:	01 c0                	add    %eax,%eax
f0105a36:	01 d0                	add    %edx,%eax
f0105a38:	c1 e0 03             	shl    $0x3,%eax
f0105a3b:	01 c8                	add    %ecx,%eax
f0105a3d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105a40:	c1 ea 02             	shr    $0x2,%edx
f0105a43:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a46:	ff 45 f4             	incl   -0xc(%ebp)
f0105a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a4c:	8b 50 74             	mov    0x74(%eax),%edx
f0105a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a52:	39 c2                	cmp    %eax,%edx
f0105a54:	0f 87 20 ff ff ff    	ja     f010597a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a61:	e9 ca 00 00 00       	jmp    f0105b30 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105a66:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a6c:	89 d0                	mov    %edx,%eax
f0105a6e:	01 c0                	add    %eax,%eax
f0105a70:	01 d0                	add    %edx,%eax
f0105a72:	c1 e0 03             	shl    $0x3,%eax
f0105a75:	01 c8                	add    %ecx,%eax
f0105a77:	83 e8 80             	sub    $0xffffff80,%eax
f0105a7a:	8a 00                	mov    (%eax),%al
f0105a7c:	3c 01                	cmp    $0x1,%al
f0105a7e:	0f 84 a9 00 00 00    	je     f0105b2d <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105a84:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a8a:	89 d0                	mov    %edx,%eax
f0105a8c:	01 c0                	add    %eax,%eax
f0105a8e:	01 d0                	add    %edx,%eax
f0105a90:	c1 e0 03             	shl    $0x3,%eax
f0105a93:	01 c8                	add    %ecx,%eax
f0105a95:	83 c0 7c             	add    $0x7c,%eax
f0105a98:	8b 00                	mov    (%eax),%eax
f0105a9a:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105a9d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105aa0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105aa3:	89 d0                	mov    %edx,%eax
f0105aa5:	01 c0                	add    %eax,%eax
f0105aa7:	01 d0                	add    %edx,%eax
f0105aa9:	c1 e0 03             	shl    $0x3,%eax
f0105aac:	01 c8                	add    %ecx,%eax
f0105aae:	05 84 00 00 00       	add    $0x84,%eax
f0105ab3:	8b 00                	mov    (%eax),%eax
f0105ab5:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105ab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105abb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105abe:	83 ec 08             	sub    $0x8,%esp
f0105ac1:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ac4:	50                   	push   %eax
f0105ac5:	e8 26 22 00 00       	call   f0107cf0 <pd_is_table_used>
f0105aca:	83 c4 10             	add    $0x10,%esp
f0105acd:	85 c0                	test   %eax,%eax
f0105acf:	74 3c                	je     f0105b0d <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ad4:	c1 e8 02             	shr    $0x2,%eax
f0105ad7:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105adc:	89 c1                	mov    %eax,%ecx
f0105ade:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105ae1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ae4:	89 d0                	mov    %edx,%eax
f0105ae6:	01 c0                	add    %eax,%eax
f0105ae8:	01 d0                	add    %edx,%eax
f0105aea:	c1 e0 03             	shl    $0x3,%eax
f0105aed:	01 d8                	add    %ebx,%eax
f0105aef:	05 84 00 00 00       	add    $0x84,%eax
f0105af4:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105af6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105af9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105afc:	83 ec 08             	sub    $0x8,%esp
f0105aff:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b02:	50                   	push   %eax
f0105b03:	e8 0c 22 00 00       	call   f0107d14 <pd_set_table_unused>
f0105b08:	83 c4 10             	add    $0x10,%esp
f0105b0b:	eb 20                	jmp    f0105b2d <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b10:	c1 e8 02             	shr    $0x2,%eax
f0105b13:	89 c1                	mov    %eax,%ecx
f0105b15:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b1b:	89 d0                	mov    %edx,%eax
f0105b1d:	01 c0                	add    %eax,%eax
f0105b1f:	01 d0                	add    %edx,%eax
f0105b21:	c1 e0 03             	shl    $0x3,%eax
f0105b24:	01 d8                	add    %ebx,%eax
f0105b26:	05 84 00 00 00       	add    $0x84,%eax
f0105b2b:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b2d:	ff 45 f0             	incl   -0x10(%ebp)
f0105b30:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105b34:	0f 8e 2c ff ff ff    	jle    f0105a66 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105b3a:	90                   	nop
f0105b3b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105b3e:	c9                   	leave  
f0105b3f:	c3                   	ret    

f0105b40 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105b40:	55                   	push   %ebp
f0105b41:	89 e5                	mov    %esp,%ebp
f0105b43:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105b46:	c7 05 0c 72 65 f0 01 	movl   $0x1,0xf065720c
f0105b4d:	00 00 00 
f0105b50:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105b57:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105b5b:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105b5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b61:	ee                   	out    %al,(%dx)
f0105b62:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105b69:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105b6d:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105b70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b73:	ee                   	out    %al,(%dx)
f0105b74:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105b7b:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105b7f:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105b85:	ee                   	out    %al,(%dx)
f0105b86:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105b8d:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105b91:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105b94:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105b97:	ee                   	out    %al,(%dx)
f0105b98:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b9f:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105ba3:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105ba6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105ba9:	ee                   	out    %al,(%dx)
f0105baa:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105bb1:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105bb5:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105bb8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105bbb:	ee                   	out    %al,(%dx)
f0105bbc:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105bc3:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105bc7:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105bca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105bcd:	ee                   	out    %al,(%dx)
f0105bce:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105bd5:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105bd9:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105bdc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105bdf:	ee                   	out    %al,(%dx)
f0105be0:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105be7:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105beb:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105bee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105bf1:	ee                   	out    %al,(%dx)
f0105bf2:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105bf9:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105bfd:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105c00:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105c03:	ee                   	out    %al,(%dx)
f0105c04:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105c0b:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105c0f:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105c12:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105c15:	ee                   	out    %al,(%dx)
f0105c16:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105c1d:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105c21:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105c24:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105c27:	ee                   	out    %al,(%dx)
f0105c28:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105c2f:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105c33:	8a 45 be             	mov    -0x42(%ebp),%al
f0105c36:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105c39:	ee                   	out    %al,(%dx)
f0105c3a:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105c41:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105c45:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105c48:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105c4b:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105c4c:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c52:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105c56:	74 15                	je     f0105c6d <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105c58:	66 a1 b0 18 19 f0    	mov    0xf01918b0,%ax
f0105c5e:	0f b7 c0             	movzwl %ax,%eax
f0105c61:	83 ec 0c             	sub    $0xc,%esp
f0105c64:	50                   	push   %eax
f0105c65:	e8 06 00 00 00       	call   f0105c70 <irq_setmask_8259A>
f0105c6a:	83 c4 10             	add    $0x10,%esp
}
f0105c6d:	90                   	nop
f0105c6e:	c9                   	leave  
f0105c6f:	c3                   	ret    

f0105c70 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105c70:	55                   	push   %ebp
f0105c71:	89 e5                	mov    %esp,%ebp
f0105c73:	83 ec 14             	sub    $0x14,%esp
f0105c76:	8b 45 08             	mov    0x8(%ebp),%eax
f0105c79:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105c7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c80:	66 a3 b0 18 19 f0    	mov    %ax,0xf01918b0
	if (!didinit)
f0105c86:	a1 0c 72 65 f0       	mov    0xf065720c,%eax
f0105c8b:	85 c0                	test   %eax,%eax
f0105c8d:	74 34                	je     f0105cc3 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c92:	0f b6 c0             	movzbl %al,%eax
f0105c95:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105c9c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c9f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105ca2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105ca5:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105ca6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ca9:	66 c1 e8 08          	shr    $0x8,%ax
f0105cad:	0f b6 c0             	movzbl %al,%eax
f0105cb0:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105cb7:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105cba:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105cbd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105cc0:	ee                   	out    %al,(%dx)
f0105cc1:	eb 01                	jmp    f0105cc4 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105cc3:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105cc4:	c9                   	leave  
f0105cc5:	c3                   	ret    

f0105cc6 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105cc6:	55                   	push   %ebp
f0105cc7:	89 e5                	mov    %esp,%ebp
f0105cc9:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105ccc:	83 ec 08             	sub    $0x8,%esp
f0105ccf:	68 00 10 00 00       	push   $0x1000
f0105cd4:	68 00 10 00 00       	push   $0x1000
f0105cd9:	e8 6a 02 00 00       	call   f0105f48 <boot_allocate_space>
f0105cde:	83 c4 10             	add    $0x10,%esp
f0105ce1:	a3 7c 7b 65 f0       	mov    %eax,0xf0657b7c
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105ce6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ceb:	83 ec 04             	sub    $0x4,%esp
f0105cee:	68 00 10 00 00       	push   $0x1000
f0105cf3:	6a 00                	push   $0x0
f0105cf5:	50                   	push   %eax
f0105cf6:	e8 e1 b0 02 00       	call   f0130ddc <memset>
f0105cfb:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105cfe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d03:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105d06:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105d0d:	77 14                	ja     f0105d23 <initialize_kernel_VM+0x5d>
f0105d0f:	ff 75 e8             	pushl  -0x18(%ebp)
f0105d12:	68 14 58 13 f0       	push   $0xf0135814
f0105d17:	6a 45                	push   $0x45
f0105d19:	68 48 58 13 f0       	push   $0xf0135848
f0105d1e:	e8 d8 a4 ff ff       	call   f01001fb <_panic>
f0105d23:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105d26:	05 00 00 00 10       	add    $0x10000000,%eax
f0105d2b:	a3 ac 7b 65 f0       	mov    %eax,0xf0657bac
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105d30:	c7 45 e4 00 90 18 f0 	movl   $0xf0189000,-0x1c(%ebp)
f0105d37:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105d3e:	77 14                	ja     f0105d54 <initialize_kernel_VM+0x8e>
f0105d40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d43:	68 14 58 13 f0       	push   $0xf0135814
f0105d48:	6a 4d                	push   $0x4d
f0105d4a:	68 48 58 13 f0       	push   $0xf0135848
f0105d4f:	e8 a7 a4 ff ff       	call   f01001fb <_panic>
f0105d54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d57:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105d5d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d62:	83 ec 0c             	sub    $0xc,%esp
f0105d65:	6a 02                	push   $0x2
f0105d67:	52                   	push   %edx
f0105d68:	68 00 80 00 00       	push   $0x8000
f0105d6d:	68 00 80 bf ef       	push   $0xefbf8000
f0105d72:	50                   	push   %eax
f0105d73:	e8 31 02 00 00       	call   f0105fa9 <boot_map_range>
f0105d78:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105d7b:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105d82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105d89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d90:	eb 25                	jmp    f0105db7 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105d92:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105d95:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d98:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105d9d:	83 ec 04             	sub    $0x4,%esp
f0105da0:	6a 01                	push   $0x1
f0105da2:	52                   	push   %edx
f0105da3:	50                   	push   %eax
f0105da4:	e8 74 02 00 00       	call   f010601d <boot_get_page_table>
f0105da9:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105dac:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105db3:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105db7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dbb:	72 d5                	jb     f0105d92 <initialize_kernel_VM+0xcc>
f0105dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105dc1:	77 06                	ja     f0105dc9 <initialize_kernel_VM+0x103>
f0105dc3:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105dc7:	76 c9                	jbe    f0105d92 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105dc9:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f0105dcf:	89 d0                	mov    %edx,%eax
f0105dd1:	01 c0                	add    %eax,%eax
f0105dd3:	01 d0                	add    %edx,%eax
f0105dd5:	c1 e0 03             	shl    $0x3,%eax
f0105dd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ddb:	83 ec 08             	sub    $0x8,%esp
f0105dde:	68 00 10 00 00       	push   $0x1000
f0105de3:	ff 75 e0             	pushl  -0x20(%ebp)
f0105de6:	e8 5d 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105deb:	83 c4 10             	add    $0x10,%esp
f0105dee:	a3 54 7b 65 f0       	mov    %eax,0xf0657b54
	memset(frames_info, 0, array_size);
f0105df3:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0105df8:	83 ec 04             	sub    $0x4,%esp
f0105dfb:	ff 75 e0             	pushl  -0x20(%ebp)
f0105dfe:	6a 00                	push   $0x0
f0105e00:	50                   	push   %eax
f0105e01:	e8 d6 af 02 00       	call   f0130ddc <memset>
f0105e06:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105e09:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105e10:	83 ec 08             	sub    $0x8,%esp
f0105e13:	68 00 10 00 00       	push   $0x1000
f0105e18:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e1b:	e8 28 01 00 00       	call   f0105f48 <boot_allocate_space>
f0105e20:	83 c4 10             	add    $0x10,%esp
f0105e23:	a3 dc 7a 65 f0       	mov    %eax,0xf0657adc
	memset(disk_frames_info , 0, disk_array_size);
f0105e28:	a1 dc 7a 65 f0       	mov    0xf0657adc,%eax
f0105e2d:	83 ec 04             	sub    $0x4,%esp
f0105e30:	ff 75 dc             	pushl  -0x24(%ebp)
f0105e33:	6a 00                	push   $0x0
f0105e35:	50                   	push   %eax
f0105e36:	e8 a1 af 02 00       	call   f0130ddc <memset>
f0105e3b:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105e3e:	e8 d5 04 00 00       	call   f0106318 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105e43:	83 ec 0c             	sub    $0xc,%esp
f0105e46:	68 b1 02 00 00       	push   $0x2b1
f0105e4b:	e8 10 9b 02 00       	call   f012f960 <nearest_pow2_ceil>
f0105e50:	83 c4 10             	add    $0x10,%esp
f0105e53:	83 ec 04             	sub    $0x4,%esp
f0105e56:	50                   	push   %eax
f0105e57:	68 b1 02 00 00       	push   $0x2b1
f0105e5c:	68 68 58 13 f0       	push   $0xf0135868
f0105e61:	e8 1c ae ff ff       	call   f0100c82 <cprintf>
f0105e66:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105e69:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105e70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105e73:	83 ec 08             	sub    $0x8,%esp
f0105e76:	68 00 10 00 00       	push   $0x1000
f0105e7b:	50                   	push   %eax
f0105e7c:	e8 c7 00 00 00       	call   f0105f48 <boot_allocate_space>
f0105e81:	83 c4 10             	add    $0x10,%esp
f0105e84:	a3 10 72 65 f0       	mov    %eax,0xf0657210
	memset(envs , 0, envs_size);
f0105e89:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e8c:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105e91:	83 ec 04             	sub    $0x4,%esp
f0105e94:	52                   	push   %edx
f0105e95:	6a 00                	push   $0x0
f0105e97:	50                   	push   %eax
f0105e98:	e8 3f af 02 00       	call   f0130ddc <memset>
f0105e9d:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105ea0:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f0105ea5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105ea8:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105eaf:	77 17                	ja     f0105ec8 <initialize_kernel_VM+0x202>
f0105eb1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105eb4:	68 14 58 13 f0       	push   $0xf0135814
f0105eb9:	68 96 00 00 00       	push   $0x96
f0105ebe:	68 48 58 13 f0       	push   $0xf0135848
f0105ec3:	e8 33 a3 ff ff       	call   f01001fb <_panic>
f0105ec8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105ecb:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105ed1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105ed4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ed9:	83 ec 0c             	sub    $0xc,%esp
f0105edc:	6a 04                	push   $0x4
f0105ede:	51                   	push   %ecx
f0105edf:	52                   	push   %edx
f0105ee0:	68 00 00 c0 ee       	push   $0xeec00000
f0105ee5:	50                   	push   %eax
f0105ee6:	e8 be 00 00 00       	call   f0105fa9 <boot_map_range>
f0105eeb:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105eee:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105ef3:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105ef8:	8b 15 7c 7b 65 f0    	mov    0xf0657b7c,%edx
f0105efe:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105f04:	8b 12                	mov    (%edx),%edx
f0105f06:	83 ca 05             	or     $0x5,%edx
f0105f09:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105f0b:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f10:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105f16:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0105f1b:	83 ec 0c             	sub    $0xc,%esp
f0105f1e:	6a 02                	push   $0x2
f0105f20:	6a 00                	push   $0x0
f0105f22:	52                   	push   %edx
f0105f23:	68 00 00 00 f0       	push   $0xf0000000
f0105f28:	50                   	push   %eax
f0105f29:	e8 7b 00 00 00       	call   f0105fa9 <boot_map_range>
f0105f2e:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105f31:	e8 11 a2 02 00       	call   f0130147 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105f36:	c7 05 f0 7a 65 f0 19 	movl   $0x19,0xf0657af0
f0105f3d:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105f40:	e8 d3 02 00 00       	call   f0106218 <turn_on_paging>
}
f0105f45:	90                   	nop
f0105f46:	c9                   	leave  
f0105f47:	c3                   	ret    

f0105f48 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105f48:	55                   	push   %ebp
f0105f49:	89 e5                	mov    %esp,%ebp
f0105f4b:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105f4e:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f53:	85 c0                	test   %eax,%eax
f0105f55:	75 0a                	jne    f0105f61 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105f57:	c7 05 78 7b 65 f0 bc 	movl   $0xf0657cbc,0xf0657b78
f0105f5e:	7c 65 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105f61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f64:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105f67:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f6c:	89 c2                	mov    %eax,%edx
f0105f6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105f71:	01 d0                	add    %edx,%eax
f0105f73:	48                   	dec    %eax
f0105f74:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105f77:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f7f:	f7 75 fc             	divl   -0x4(%ebp)
f0105f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105f85:	29 d0                	sub    %edx,%eax
f0105f87:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105f8c:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0105f91:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105f94:	8b 15 78 7b 65 f0    	mov    0xf0657b78,%edx
f0105f9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f9d:	01 d0                	add    %edx,%eax
f0105f9f:	a3 78 7b 65 f0       	mov    %eax,0xf0657b78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105fa7:	c9                   	leave  
f0105fa8:	c3                   	ret    

f0105fa9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105fa9:	55                   	push   %ebp
f0105faa:	89 e5                	mov    %esp,%ebp
f0105fac:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105fb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105fbd:	eb 53                	jmp    f0106012 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105fbf:	83 ec 04             	sub    $0x4,%esp
f0105fc2:	6a 01                	push   $0x1
f0105fc4:	ff 75 0c             	pushl  0xc(%ebp)
f0105fc7:	ff 75 08             	pushl  0x8(%ebp)
f0105fca:	e8 4e 00 00 00       	call   f010601d <boot_get_page_table>
f0105fcf:	83 c4 10             	add    $0x10,%esp
f0105fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105fd8:	c1 e8 0c             	shr    $0xc,%eax
f0105fdb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105fe0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fe6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105fed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ff0:	01 c2                	add    %eax,%edx
f0105ff2:	8b 45 18             	mov    0x18(%ebp),%eax
f0105ff5:	0b 45 14             	or     0x14(%ebp),%eax
f0105ff8:	83 c8 01             	or     $0x1,%eax
f0105ffb:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105ffd:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106004:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010600b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106018:	72 a5                	jb     f0105fbf <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010601a:	90                   	nop
f010601b:	c9                   	leave  
f010601c:	c3                   	ret    

f010601d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010601d:	55                   	push   %ebp
f010601e:	89 e5                	mov    %esp,%ebp
f0106020:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106023:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106026:	c1 e8 16             	shr    $0x16,%eax
f0106029:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010602c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010602f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106036:	8b 45 08             	mov    0x8(%ebp),%eax
f0106039:	01 d0                	add    %edx,%eax
f010603b:	8b 00                	mov    (%eax),%eax
f010603d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106043:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106048:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010604b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010604e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106051:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106054:	c1 e8 0c             	shr    $0xc,%eax
f0106057:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010605a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010605f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106062:	72 17                	jb     f010607b <boot_get_page_table+0x5e>
f0106064:	ff 75 e8             	pushl  -0x18(%ebp)
f0106067:	68 90 58 13 f0       	push   $0xf0135890
f010606c:	68 15 01 00 00       	push   $0x115
f0106071:	68 48 58 13 f0       	push   $0xf0135848
f0106076:	e8 80 a1 ff ff       	call   f01001fb <_panic>
f010607b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010607e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106083:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106086:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010608a:	75 72                	jne    f01060fe <boot_get_page_table+0xe1>
	{
		if (create)
f010608c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106090:	74 65                	je     f01060f7 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106092:	83 ec 08             	sub    $0x8,%esp
f0106095:	68 00 10 00 00       	push   $0x1000
f010609a:	68 00 10 00 00       	push   $0x1000
f010609f:	e8 a4 fe ff ff       	call   f0105f48 <boot_allocate_space>
f01060a4:	83 c4 10             	add    $0x10,%esp
f01060a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01060aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01060b0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01060b7:	77 17                	ja     f01060d0 <boot_get_page_table+0xb3>
f01060b9:	ff 75 dc             	pushl  -0x24(%ebp)
f01060bc:	68 14 58 13 f0       	push   $0xf0135814
f01060c1:	68 1b 01 00 00       	push   $0x11b
f01060c6:	68 48 58 13 f0       	push   $0xf0135848
f01060cb:	e8 2b a1 ff ff       	call   f01001fb <_panic>
f01060d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060d3:	05 00 00 00 10       	add    $0x10000000,%eax
f01060d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01060db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01060e8:	01 d0                	add    %edx,%eax
f01060ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01060ed:	83 ca 03             	or     $0x3,%edx
f01060f0:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01060f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060f5:	eb 0a                	jmp    f0106101 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01060f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01060fc:	eb 03                	jmp    f0106101 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01060fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106101:	c9                   	leave  
f0106102:	c3                   	ret    

f0106103 <nvram_read>:


int nvram_read(int r)
{
f0106103:	55                   	push   %ebp
f0106104:	89 e5                	mov    %esp,%ebp
f0106106:	53                   	push   %ebx
f0106107:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010610a:	8b 45 08             	mov    0x8(%ebp),%eax
f010610d:	83 ec 0c             	sub    $0xc,%esp
f0106110:	50                   	push   %eax
f0106111:	e8 e6 de ff ff       	call   f0103ffc <mc146818_read>
f0106116:	83 c4 10             	add    $0x10,%esp
f0106119:	89 c3                	mov    %eax,%ebx
f010611b:	8b 45 08             	mov    0x8(%ebp),%eax
f010611e:	40                   	inc    %eax
f010611f:	83 ec 0c             	sub    $0xc,%esp
f0106122:	50                   	push   %eax
f0106123:	e8 d4 de ff ff       	call   f0103ffc <mc146818_read>
f0106128:	83 c4 10             	add    $0x10,%esp
f010612b:	c1 e0 08             	shl    $0x8,%eax
f010612e:	09 d8                	or     %ebx,%eax
}
f0106130:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106133:	c9                   	leave  
f0106134:	c3                   	ret    

f0106135 <detect_memory>:

void detect_memory()
{
f0106135:	55                   	push   %ebp
f0106136:	89 e5                	mov    %esp,%ebp
f0106138:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010613b:	83 ec 0c             	sub    $0xc,%esp
f010613e:	6a 15                	push   $0x15
f0106140:	e8 be ff ff ff       	call   f0106103 <nvram_read>
f0106145:	83 c4 10             	add    $0x10,%esp
f0106148:	c1 e0 0a             	shl    $0xa,%eax
f010614b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010614e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106151:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106156:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106159:	83 ec 0c             	sub    $0xc,%esp
f010615c:	6a 17                	push   $0x17
f010615e:	e8 a0 ff ff ff       	call   f0106103 <nvram_read>
f0106163:	83 c4 10             	add    $0x10,%esp
f0106166:	c1 e0 0a             	shl    $0xa,%eax
f0106169:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010616c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010616f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106174:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106177:	83 ec 0c             	sub    $0xc,%esp
f010617a:	6a 34                	push   $0x34
f010617c:	e8 82 ff ff ff       	call   f0106103 <nvram_read>
f0106181:	83 c4 10             	add    $0x10,%esp
f0106184:	c1 e0 10             	shl    $0x10,%eax
f0106187:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010618a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010618d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106192:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106195:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106199:	74 18                	je     f01061b3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010619b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010619e:	05 00 00 00 01       	add    $0x1000000,%eax
f01061a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f01061a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061a9:	2d 00 00 10 00       	sub    $0x100000,%eax
f01061ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01061b1:	eb 19                	jmp    f01061cc <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01061b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01061b7:	74 0d                	je     f01061c6 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01061b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061bc:	05 00 00 10 00       	add    $0x100000,%eax
f01061c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01061c4:	eb 06                	jmp    f01061cc <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01061c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01061cc:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01061d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061d6:	c1 e8 0c             	shr    $0xc,%eax
f01061d9:	a3 10 7b 65 f0       	mov    %eax,0xf0657b10

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01061de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061e1:	c1 e8 0a             	shr    $0xa,%eax
f01061e4:	83 ec 08             	sub    $0x8,%esp
f01061e7:	50                   	push   %eax
f01061e8:	68 c0 58 13 f0       	push   $0xf01358c0
f01061ed:	e8 90 aa ff ff       	call   f0100c82 <cprintf>
f01061f2:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01061f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f8:	c1 e8 0a             	shr    $0xa,%eax
f01061fb:	89 c2                	mov    %eax,%edx
f01061fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106200:	c1 e8 0a             	shr    $0xa,%eax
f0106203:	83 ec 04             	sub    $0x4,%esp
f0106206:	52                   	push   %edx
f0106207:	50                   	push   %eax
f0106208:	68 e1 58 13 f0       	push   $0xf01358e1
f010620d:	e8 70 aa ff ff       	call   f0100c82 <cprintf>
f0106212:	83 c4 10             	add    $0x10,%esp
}
f0106215:	90                   	nop
f0106216:	c9                   	leave  
f0106217:	c3                   	ret    

f0106218 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106218:	55                   	push   %ebp
f0106219:	89 e5                	mov    %esp,%ebp
f010621b:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010621e:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106225:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010622c:	eb 24                	jmp    f0106252 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010622e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106233:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106236:	c1 e2 02             	shl    $0x2,%edx
f0106239:	01 c2                	add    %eax,%edx
f010623b:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106240:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106243:	c1 e1 02             	shl    $0x2,%ecx
f0106246:	01 c8                	add    %ecx,%eax
f0106248:	8b 00                	mov    (%eax),%eax
f010624a:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010624c:	ff 45 fc             	incl   -0x4(%ebp)
f010624f:	ff 45 f8             	incl   -0x8(%ebp)
f0106252:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106257:	c1 e8 16             	shr    $0x16,%eax
f010625a:	89 c2                	mov    %eax,%edx
f010625c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010625f:	39 c2                	cmp    %eax,%edx
f0106261:	77 cb                	ja     f010622e <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106263:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0106268:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010626b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010626e:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106271:	0f 20 c0             	mov    %cr0,%eax
f0106274:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106277:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010627a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010627d:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106284:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010628b:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010628e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106291:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106294:	0f 01 15 f0 18 19 f0 	lgdtl  0xf01918f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010629b:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a0:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f01062a2:	b8 23 00 00 00       	mov    $0x23,%eax
f01062a7:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f01062a9:	b8 10 00 00 00       	mov    $0x10,%eax
f01062ae:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01062b0:	b8 10 00 00 00       	mov    $0x10,%eax
f01062b5:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01062b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01062bc:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01062be:	ea c5 62 10 f0 08 00 	ljmp   $0x8,$0xf01062c5
	asm volatile("lldt %%ax" :: "a" (0));
f01062c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01062ca:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01062cd:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01062d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062db:	eb 19                	jmp    f01062f6 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01062dd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01062e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062e5:	c1 e2 02             	shl    $0x2,%edx
f01062e8:	01 d0                	add    %edx,%eax
f01062ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062f0:	ff 45 f4             	incl   -0xc(%ebp)
f01062f3:	ff 45 f0             	incl   -0x10(%ebp)
f01062f6:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01062fb:	c1 e8 16             	shr    $0x16,%eax
f01062fe:	89 c2                	mov    %eax,%edx
f0106300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106303:	39 c2                	cmp    %eax,%edx
f0106305:	77 d6                	ja     f01062dd <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106307:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f010630c:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010630f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106312:	0f 22 d8             	mov    %eax,%cr3
}
f0106315:	90                   	nop
f0106316:	c9                   	leave  
f0106317:	c3                   	ret    

f0106318 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106318:	55                   	push   %ebp
f0106319:	89 e5                	mov    %esp,%ebp
f010631b:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010631e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106323:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106326:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010632d:	77 17                	ja     f0106346 <setup_listing_to_all_page_tables_entries+0x2e>
f010632f:	ff 75 f4             	pushl  -0xc(%ebp)
f0106332:	68 14 58 13 f0       	push   $0xf0135814
f0106337:	68 ab 01 00 00       	push   $0x1ab
f010633c:	68 48 58 13 f0       	push   $0xf0135848
f0106341:	e8 b5 9e ff ff       	call   f01001fb <_panic>
f0106346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106349:	05 00 00 00 10       	add    $0x10000000,%eax
f010634e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106351:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106356:	05 fc 0e 00 00       	add    $0xefc,%eax
f010635b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010635e:	83 ca 03             	or     $0x3,%edx
f0106361:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106363:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106368:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010636e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0106373:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106376:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010637d:	77 17                	ja     f0106396 <setup_listing_to_all_page_tables_entries+0x7e>
f010637f:	ff 75 ec             	pushl  -0x14(%ebp)
f0106382:	68 14 58 13 f0       	push   $0xf0135814
f0106387:	68 b0 01 00 00       	push   $0x1b0
f010638c:	68 48 58 13 f0       	push   $0xf0135848
f0106391:	e8 65 9e ff ff       	call   f01001fb <_panic>
f0106396:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106399:	05 00 00 00 10       	add    $0x10000000,%eax
f010639e:	83 c8 05             	or     $0x5,%eax
f01063a1:	89 02                	mov    %eax,(%edx)

}
f01063a3:	90                   	nop
f01063a4:	c9                   	leave  
f01063a5:	c3                   	ret    

f01063a6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01063a6:	55                   	push   %ebp
f01063a7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01063a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063ac:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01063b2:	29 d0                	sub    %edx,%eax
f01063b4:	c1 f8 03             	sar    $0x3,%eax
f01063b7:	89 c2                	mov    %eax,%edx
f01063b9:	89 d0                	mov    %edx,%eax
f01063bb:	c1 e0 02             	shl    $0x2,%eax
f01063be:	01 d0                	add    %edx,%eax
f01063c0:	c1 e0 02             	shl    $0x2,%eax
f01063c3:	01 d0                	add    %edx,%eax
f01063c5:	c1 e0 02             	shl    $0x2,%eax
f01063c8:	01 d0                	add    %edx,%eax
f01063ca:	89 c1                	mov    %eax,%ecx
f01063cc:	c1 e1 08             	shl    $0x8,%ecx
f01063cf:	01 c8                	add    %ecx,%eax
f01063d1:	89 c1                	mov    %eax,%ecx
f01063d3:	c1 e1 10             	shl    $0x10,%ecx
f01063d6:	01 c8                	add    %ecx,%eax
f01063d8:	01 c0                	add    %eax,%eax
f01063da:	01 d0                	add    %edx,%eax
}
f01063dc:	5d                   	pop    %ebp
f01063dd:	c3                   	ret    

f01063de <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01063de:	55                   	push   %ebp
f01063df:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01063e1:	ff 75 08             	pushl  0x8(%ebp)
f01063e4:	e8 bd ff ff ff       	call   f01063a6 <to_frame_number>
f01063e9:	83 c4 04             	add    $0x4,%esp
f01063ec:	c1 e0 0c             	shl    $0xc,%eax
}
f01063ef:	c9                   	leave  
f01063f0:	c3                   	ret    

f01063f1 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01063f1:	55                   	push   %ebp
f01063f2:	89 e5                	mov    %esp,%ebp
f01063f4:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01063f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01063fa:	c1 e8 0c             	shr    $0xc,%eax
f01063fd:	89 c2                	mov    %eax,%edx
f01063ff:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106404:	39 c2                	cmp    %eax,%edx
f0106406:	72 14                	jb     f010641c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106408:	83 ec 04             	sub    $0x4,%esp
f010640b:	68 00 59 13 f0       	push   $0xf0135900
f0106410:	6a 55                	push   $0x55
f0106412:	68 25 59 13 f0       	push   $0xf0135925
f0106417:	e8 df 9d ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f010641c:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106422:	8b 45 08             	mov    0x8(%ebp),%eax
f0106425:	c1 e8 0c             	shr    $0xc,%eax
f0106428:	89 c1                	mov    %eax,%ecx
f010642a:	89 c8                	mov    %ecx,%eax
f010642c:	01 c0                	add    %eax,%eax
f010642e:	01 c8                	add    %ecx,%eax
f0106430:	c1 e0 03             	shl    $0x3,%eax
f0106433:	01 d0                	add    %edx,%eax
}
f0106435:	c9                   	leave  
f0106436:	c3                   	ret    

f0106437 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106437:	55                   	push   %ebp
f0106438:	89 e5                	mov    %esp,%ebp
f010643a:	83 ec 10             	sub    $0x10,%esp
f010643d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106440:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106443:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106446:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106449:	90                   	nop
f010644a:	c9                   	leave  
f010644b:	c3                   	ret    

f010644c <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010644c:	55                   	push   %ebp
f010644d:	89 e5                	mov    %esp,%ebp
f010644f:	53                   	push   %ebx
f0106450:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106453:	c7 05 18 7b 65 f0 00 	movl   $0x0,0xf0657b18
f010645a:	00 00 00 
f010645d:	c7 05 1c 7b 65 f0 00 	movl   $0x0,0xf0657b1c
f0106464:	00 00 00 
f0106467:	c7 05 24 7b 65 f0 00 	movl   $0x0,0xf0657b24
f010646e:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106471:	c7 05 b8 7a 65 f0 00 	movl   $0x0,0xf0657ab8
f0106478:	00 00 00 
f010647b:	c7 05 bc 7a 65 f0 00 	movl   $0x0,0xf0657abc
f0106482:	00 00 00 
f0106485:	c7 05 c4 7a 65 f0 00 	movl   $0x0,0xf0657ac4
f010648c:	00 00 00 

	frames_info[0].references = 1;
f010648f:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f0106494:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010649a:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f010649f:	83 c0 18             	add    $0x18,%eax
f01064a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01064a8:	a1 54 7b 65 f0       	mov    0xf0657b54,%eax
f01064ad:	83 c0 30             	add    $0x30,%eax
f01064b0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01064b6:	c7 05 60 7b 65 f0 00 	movl   $0xf0001000,0xf0657b60
f01064bd:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01064c0:	c7 05 84 7b 65 f0 00 	movl   $0xf0002000,0xf0657b84
f01064c7:	20 00 f0 
	i =0;
f01064ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01064d1:	eb 1f                	jmp    f01064f2 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01064d3:	8b 15 60 7b 65 f0    	mov    0xf0657b60,%edx
f01064d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064dc:	01 d0                	add    %edx,%eax
f01064de:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01064e1:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f01064e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064ea:	01 d0                	add    %edx,%eax
f01064ec:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01064ef:	ff 45 f4             	incl   -0xc(%ebp)
f01064f2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01064f9:	7e d8                	jle    f01064d3 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01064fb:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106505:	05 ff ff 09 00       	add    $0x9ffff,%eax
f010650a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010650d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106510:	ba 00 00 00 00       	mov    $0x0,%edx
f0106515:	f7 75 f0             	divl   -0x10(%ebp)
f0106518:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010651b:	29 d0                	sub    %edx,%eax
f010651d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106520:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106527:	e9 e8 00 00 00       	jmp    f0106614 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010652c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106532:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106535:	89 d0                	mov    %edx,%eax
f0106537:	01 c0                	add    %eax,%eax
f0106539:	01 d0                	add    %edx,%eax
f010653b:	c1 e0 03             	shl    $0x3,%eax
f010653e:	01 c8                	add    %ecx,%eax
f0106540:	83 ec 0c             	sub    $0xc,%esp
f0106543:	50                   	push   %eax
f0106544:	e8 b7 02 00 00       	call   f0106800 <initialize_frame_info>
f0106549:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010654c:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106552:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106555:	89 d0                	mov    %edx,%eax
f0106557:	01 c0                	add    %eax,%eax
f0106559:	01 d0                	add    %edx,%eax
f010655b:	c1 e0 03             	shl    $0x3,%eax
f010655e:	01 c8                	add    %ecx,%eax
f0106560:	85 c0                	test   %eax,%eax
f0106562:	75 14                	jne    f0106578 <initialize_paging+0x12c>
f0106564:	83 ec 04             	sub    $0x4,%esp
f0106567:	68 40 59 13 f0       	push   $0xf0135940
f010656c:	6a 5c                	push   $0x5c
f010656e:	68 63 59 13 f0       	push   $0xf0135963
f0106573:	e8 83 9c ff ff       	call   f01001fb <_panic>
f0106578:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010657e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106581:	89 d0                	mov    %edx,%eax
f0106583:	01 c0                	add    %eax,%eax
f0106585:	01 d0                	add    %edx,%eax
f0106587:	c1 e0 03             	shl    $0x3,%eax
f010658a:	01 c8                	add    %ecx,%eax
f010658c:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106592:	89 10                	mov    %edx,(%eax)
f0106594:	8b 00                	mov    (%eax),%eax
f0106596:	85 c0                	test   %eax,%eax
f0106598:	74 1f                	je     f01065b9 <initialize_paging+0x16d>
f010659a:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f01065a0:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f01065a6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01065a9:	89 c8                	mov    %ecx,%eax
f01065ab:	01 c0                	add    %eax,%eax
f01065ad:	01 c8                	add    %ecx,%eax
f01065af:	c1 e0 03             	shl    $0x3,%eax
f01065b2:	01 d8                	add    %ebx,%eax
f01065b4:	89 42 04             	mov    %eax,0x4(%edx)
f01065b7:	eb 19                	jmp    f01065d2 <initialize_paging+0x186>
f01065b9:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065c2:	89 d0                	mov    %edx,%eax
f01065c4:	01 c0                	add    %eax,%eax
f01065c6:	01 d0                	add    %edx,%eax
f01065c8:	c1 e0 03             	shl    $0x3,%eax
f01065cb:	01 c8                	add    %ecx,%eax
f01065cd:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01065d2:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065db:	89 d0                	mov    %edx,%eax
f01065dd:	01 c0                	add    %eax,%eax
f01065df:	01 d0                	add    %edx,%eax
f01065e1:	c1 e0 03             	shl    $0x3,%eax
f01065e4:	01 c8                	add    %ecx,%eax
f01065e6:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01065eb:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01065f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f4:	89 d0                	mov    %edx,%eax
f01065f6:	01 c0                	add    %eax,%eax
f01065f8:	01 d0                	add    %edx,%eax
f01065fa:	c1 e0 03             	shl    $0x3,%eax
f01065fd:	01 c8                	add    %ecx,%eax
f01065ff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106606:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010660b:	40                   	inc    %eax
f010660c:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106611:	ff 45 f4             	incl   -0xc(%ebp)
f0106614:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106617:	85 c0                	test   %eax,%eax
f0106619:	79 05                	jns    f0106620 <initialize_paging+0x1d4>
f010661b:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106620:	c1 f8 0c             	sar    $0xc,%eax
f0106623:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106626:	0f 8f 00 ff ff ff    	jg     f010652c <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010662c:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106633:	eb 1d                	jmp    f0106652 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106635:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010663b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010663e:	89 d0                	mov    %edx,%eax
f0106640:	01 c0                	add    %eax,%eax
f0106642:	01 d0                	add    %edx,%eax
f0106644:	c1 e0 03             	shl    $0x3,%eax
f0106647:	01 c8                	add    %ecx,%eax
f0106649:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010664f:	ff 45 f4             	incl   -0xc(%ebp)
f0106652:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106659:	7e da                	jle    f0106635 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010665b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106662:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f0106667:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010666a:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106671:	77 14                	ja     f0106687 <initialize_paging+0x23b>
f0106673:	ff 75 e0             	pushl  -0x20(%ebp)
f0106676:	68 80 59 13 f0       	push   $0xf0135980
f010667b:	6a 64                	push   $0x64
f010667d:	68 63 59 13 f0       	push   $0xf0135963
f0106682:	e8 74 9b ff ff       	call   f01001fb <_panic>
f0106687:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010668a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106693:	01 d0                	add    %edx,%eax
f0106695:	48                   	dec    %eax
f0106696:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106699:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010669c:	ba 00 00 00 00       	mov    $0x0,%edx
f01066a1:	f7 75 e4             	divl   -0x1c(%ebp)
f01066a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01066a7:	29 d0                	sub    %edx,%eax
f01066a9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066ac:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01066b3:	eb 1d                	jmp    f01066d2 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01066b5:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01066bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066be:	89 d0                	mov    %edx,%eax
f01066c0:	01 c0                	add    %eax,%eax
f01066c2:	01 d0                	add    %edx,%eax
f01066c4:	c1 e0 03             	shl    $0x3,%eax
f01066c7:	01 c8                	add    %ecx,%eax
f01066c9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01066cf:	ff 45 f4             	incl   -0xc(%ebp)
f01066d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066d5:	85 c0                	test   %eax,%eax
f01066d7:	79 05                	jns    f01066de <initialize_paging+0x292>
f01066d9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066de:	c1 f8 0c             	sar    $0xc,%eax
f01066e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066e4:	7f cf                	jg     f01066b5 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01066e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066e9:	85 c0                	test   %eax,%eax
f01066eb:	79 05                	jns    f01066f2 <initialize_paging+0x2a6>
f01066ed:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066f2:	c1 f8 0c             	sar    $0xc,%eax
f01066f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01066f8:	e9 e8 00 00 00       	jmp    f01067e5 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01066fd:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106706:	89 d0                	mov    %edx,%eax
f0106708:	01 c0                	add    %eax,%eax
f010670a:	01 d0                	add    %edx,%eax
f010670c:	c1 e0 03             	shl    $0x3,%eax
f010670f:	01 c8                	add    %ecx,%eax
f0106711:	83 ec 0c             	sub    $0xc,%esp
f0106714:	50                   	push   %eax
f0106715:	e8 e6 00 00 00       	call   f0106800 <initialize_frame_info>
f010671a:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010671d:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106723:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106726:	89 d0                	mov    %edx,%eax
f0106728:	01 c0                	add    %eax,%eax
f010672a:	01 d0                	add    %edx,%eax
f010672c:	c1 e0 03             	shl    $0x3,%eax
f010672f:	01 c8                	add    %ecx,%eax
f0106731:	85 c0                	test   %eax,%eax
f0106733:	75 14                	jne    f0106749 <initialize_paging+0x2fd>
f0106735:	83 ec 04             	sub    $0x4,%esp
f0106738:	68 40 59 13 f0       	push   $0xf0135940
f010673d:	6a 70                	push   $0x70
f010673f:	68 63 59 13 f0       	push   $0xf0135963
f0106744:	e8 b2 9a ff ff       	call   f01001fb <_panic>
f0106749:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f010674f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106752:	89 d0                	mov    %edx,%eax
f0106754:	01 c0                	add    %eax,%eax
f0106756:	01 d0                	add    %edx,%eax
f0106758:	c1 e0 03             	shl    $0x3,%eax
f010675b:	01 c8                	add    %ecx,%eax
f010675d:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106763:	89 10                	mov    %edx,(%eax)
f0106765:	8b 00                	mov    (%eax),%eax
f0106767:	85 c0                	test   %eax,%eax
f0106769:	74 1f                	je     f010678a <initialize_paging+0x33e>
f010676b:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106771:	8b 1d 54 7b 65 f0    	mov    0xf0657b54,%ebx
f0106777:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010677a:	89 c8                	mov    %ecx,%eax
f010677c:	01 c0                	add    %eax,%eax
f010677e:	01 c8                	add    %ecx,%eax
f0106780:	c1 e0 03             	shl    $0x3,%eax
f0106783:	01 d8                	add    %ebx,%eax
f0106785:	89 42 04             	mov    %eax,0x4(%edx)
f0106788:	eb 19                	jmp    f01067a3 <initialize_paging+0x357>
f010678a:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f0106790:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106793:	89 d0                	mov    %edx,%eax
f0106795:	01 c0                	add    %eax,%eax
f0106797:	01 d0                	add    %edx,%eax
f0106799:	c1 e0 03             	shl    $0x3,%eax
f010679c:	01 c8                	add    %ecx,%eax
f010679e:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f01067a3:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067ac:	89 d0                	mov    %edx,%eax
f01067ae:	01 c0                	add    %eax,%eax
f01067b0:	01 d0                	add    %edx,%eax
f01067b2:	c1 e0 03             	shl    $0x3,%eax
f01067b5:	01 c8                	add    %ecx,%eax
f01067b7:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01067bc:	8b 0d 54 7b 65 f0    	mov    0xf0657b54,%ecx
f01067c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c5:	89 d0                	mov    %edx,%eax
f01067c7:	01 c0                	add    %eax,%eax
f01067c9:	01 d0                	add    %edx,%eax
f01067cb:	c1 e0 03             	shl    $0x3,%eax
f01067ce:	01 c8                	add    %ecx,%eax
f01067d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01067d7:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01067dc:	40                   	inc    %eax
f01067dd:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067e2:	ff 45 f4             	incl   -0xc(%ebp)
f01067e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e8:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f01067ed:	39 c2                	cmp    %eax,%edx
f01067ef:	0f 82 08 ff ff ff    	jb     f01066fd <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01067f5:	e8 36 c9 ff ff       	call   f0103130 <initialize_disk_page_file>
}
f01067fa:	90                   	nop
f01067fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01067fe:	c9                   	leave  
f01067ff:	c3                   	ret    

f0106800 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106800:	55                   	push   %ebp
f0106801:	89 e5                	mov    %esp,%ebp
f0106803:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0106806:	83 ec 04             	sub    $0x4,%esp
f0106809:	6a 18                	push   $0x18
f010680b:	6a 00                	push   $0x0
f010680d:	ff 75 08             	pushl  0x8(%ebp)
f0106810:	e8 c7 a5 02 00       	call   f0130ddc <memset>
f0106815:	83 c4 10             	add    $0x10,%esp
}
f0106818:	90                   	nop
f0106819:	c9                   	leave  
f010681a:	c3                   	ret    

f010681b <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010681b:	55                   	push   %ebp
f010681c:	89 e5                	mov    %esp,%ebp
f010681e:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106821:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106827:	8b 45 08             	mov    0x8(%ebp),%eax
f010682a:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010682c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106833:	8b 45 08             	mov    0x8(%ebp),%eax
f0106836:	8b 00                	mov    (%eax),%eax
f0106838:	85 c0                	test   %eax,%eax
f010683a:	75 17                	jne    f0106853 <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010683c:	83 ec 04             	sub    $0x4,%esp
f010683f:	68 b4 59 13 f0       	push   $0xf01359b4
f0106844:	68 99 00 00 00       	push   $0x99
f0106849:	68 63 59 13 f0       	push   $0xf0135963
f010684e:	e8 a8 99 ff ff       	call   f01001fb <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106853:	8b 45 08             	mov    0x8(%ebp),%eax
f0106856:	8b 00                	mov    (%eax),%eax
f0106858:	85 c0                	test   %eax,%eax
f010685a:	75 17                	jne    f0106873 <allocate_frame+0x58>
f010685c:	83 ec 04             	sub    $0x4,%esp
f010685f:	68 01 5a 13 f0       	push   $0xf0135a01
f0106864:	68 9c 00 00 00       	push   $0x9c
f0106869:	68 63 59 13 f0       	push   $0xf0135963
f010686e:	e8 88 99 ff ff       	call   f01001fb <_panic>
f0106873:	8b 45 08             	mov    0x8(%ebp),%eax
f0106876:	8b 00                	mov    (%eax),%eax
f0106878:	8b 00                	mov    (%eax),%eax
f010687a:	85 c0                	test   %eax,%eax
f010687c:	74 14                	je     f0106892 <allocate_frame+0x77>
f010687e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106881:	8b 00                	mov    (%eax),%eax
f0106883:	8b 00                	mov    (%eax),%eax
f0106885:	8b 55 08             	mov    0x8(%ebp),%edx
f0106888:	8b 12                	mov    (%edx),%edx
f010688a:	8b 52 04             	mov    0x4(%edx),%edx
f010688d:	89 50 04             	mov    %edx,0x4(%eax)
f0106890:	eb 0d                	jmp    f010689f <allocate_frame+0x84>
f0106892:	8b 45 08             	mov    0x8(%ebp),%eax
f0106895:	8b 00                	mov    (%eax),%eax
f0106897:	8b 40 04             	mov    0x4(%eax),%eax
f010689a:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010689f:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a2:	8b 00                	mov    (%eax),%eax
f01068a4:	8b 40 04             	mov    0x4(%eax),%eax
f01068a7:	85 c0                	test   %eax,%eax
f01068a9:	74 13                	je     f01068be <allocate_frame+0xa3>
f01068ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ae:	8b 00                	mov    (%eax),%eax
f01068b0:	8b 40 04             	mov    0x4(%eax),%eax
f01068b3:	8b 55 08             	mov    0x8(%ebp),%edx
f01068b6:	8b 12                	mov    (%edx),%edx
f01068b8:	8b 12                	mov    (%edx),%edx
f01068ba:	89 10                	mov    %edx,(%eax)
f01068bc:	eb 0c                	jmp    f01068ca <allocate_frame+0xaf>
f01068be:	8b 45 08             	mov    0x8(%ebp),%eax
f01068c1:	8b 00                	mov    (%eax),%eax
f01068c3:	8b 00                	mov    (%eax),%eax
f01068c5:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f01068ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cd:	8b 00                	mov    (%eax),%eax
f01068cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01068d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068d8:	8b 00                	mov    (%eax),%eax
f01068da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068e1:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01068e6:	48                   	dec    %eax
f01068e7:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01068ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ef:	8b 00                	mov    (%eax),%eax
f01068f1:	8a 40 14             	mov    0x14(%eax),%al
f01068f4:	84 c0                	test   %al,%al
f01068f6:	74 20                	je     f0106918 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01068f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068fb:	8b 00                	mov    (%eax),%eax
f01068fd:	8b 50 0c             	mov    0xc(%eax),%edx
f0106900:	8b 45 08             	mov    0x8(%ebp),%eax
f0106903:	8b 00                	mov    (%eax),%eax
f0106905:	8b 40 10             	mov    0x10(%eax),%eax
f0106908:	8b 40 5c             	mov    0x5c(%eax),%eax
f010690b:	83 ec 08             	sub    $0x8,%esp
f010690e:	52                   	push   %edx
f010690f:	50                   	push   %eax
f0106910:	e8 17 13 00 00       	call   f0107c2c <pt_clear_page_table_entry>
f0106915:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106918:	8b 45 08             	mov    0x8(%ebp),%eax
f010691b:	8b 00                	mov    (%eax),%eax
f010691d:	83 ec 0c             	sub    $0xc,%esp
f0106920:	50                   	push   %eax
f0106921:	e8 da fe ff ff       	call   f0106800 <initialize_frame_info>
f0106926:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010692e:	c9                   	leave  
f010692f:	c3                   	ret    

f0106930 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106930:	55                   	push   %ebp
f0106931:	89 e5                	mov    %esp,%ebp
f0106933:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106936:	83 ec 0c             	sub    $0xc,%esp
f0106939:	ff 75 08             	pushl  0x8(%ebp)
f010693c:	e8 bf fe ff ff       	call   f0106800 <initialize_frame_info>
f0106941:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106944:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106948:	75 17                	jne    f0106961 <free_frame+0x31>
f010694a:	83 ec 04             	sub    $0x4,%esp
f010694d:	68 40 59 13 f0       	push   $0xf0135940
f0106952:	68 b9 00 00 00       	push   $0xb9
f0106957:	68 63 59 13 f0       	push   $0xf0135963
f010695c:	e8 9a 98 ff ff       	call   f01001fb <_panic>
f0106961:	8b 15 18 7b 65 f0    	mov    0xf0657b18,%edx
f0106967:	8b 45 08             	mov    0x8(%ebp),%eax
f010696a:	89 10                	mov    %edx,(%eax)
f010696c:	8b 45 08             	mov    0x8(%ebp),%eax
f010696f:	8b 00                	mov    (%eax),%eax
f0106971:	85 c0                	test   %eax,%eax
f0106973:	74 0d                	je     f0106982 <free_frame+0x52>
f0106975:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f010697a:	8b 55 08             	mov    0x8(%ebp),%edx
f010697d:	89 50 04             	mov    %edx,0x4(%eax)
f0106980:	eb 08                	jmp    f010698a <free_frame+0x5a>
f0106982:	8b 45 08             	mov    0x8(%ebp),%eax
f0106985:	a3 1c 7b 65 f0       	mov    %eax,0xf0657b1c
f010698a:	8b 45 08             	mov    0x8(%ebp),%eax
f010698d:	a3 18 7b 65 f0       	mov    %eax,0xf0657b18
f0106992:	8b 45 08             	mov    0x8(%ebp),%eax
f0106995:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010699c:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f01069a1:	40                   	inc    %eax
f01069a2:	a3 24 7b 65 f0       	mov    %eax,0xf0657b24
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f01069a7:	90                   	nop
f01069a8:	c9                   	leave  
f01069a9:	c3                   	ret    

f01069aa <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01069aa:	55                   	push   %ebp
f01069ab:	89 e5                	mov    %esp,%ebp
f01069ad:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01069b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b3:	8b 40 08             	mov    0x8(%eax),%eax
f01069b6:	48                   	dec    %eax
f01069b7:	8b 55 08             	mov    0x8(%ebp),%edx
f01069ba:	66 89 42 08          	mov    %ax,0x8(%edx)
f01069be:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c1:	8b 40 08             	mov    0x8(%eax),%eax
f01069c4:	66 85 c0             	test   %ax,%ax
f01069c7:	75 0e                	jne    f01069d7 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01069c9:	83 ec 0c             	sub    $0xc,%esp
f01069cc:	ff 75 08             	pushl  0x8(%ebp)
f01069cf:	e8 5c ff ff ff       	call   f0106930 <free_frame>
f01069d4:	83 c4 10             	add    $0x10,%esp
}
f01069d7:	90                   	nop
f01069d8:	c9                   	leave  
f01069d9:	c3                   	ret    

f01069da <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01069da:	55                   	push   %ebp
f01069db:	89 e5                	mov    %esp,%ebp
f01069dd:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01069e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069e3:	c1 e8 16             	shr    $0x16,%eax
f01069e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01069ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f0:	01 d0                	add    %edx,%eax
f01069f2:	8b 00                	mov    (%eax),%eax
f01069f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01069f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01069fa:	83 e0 01             	and    $0x1,%eax
f01069fd:	85 c0                	test   %eax,%eax
f01069ff:	74 74                	je     f0106a75 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106a01:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106a08:	77 1d                	ja     f0106a27 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a12:	83 ec 0c             	sub    $0xc,%esp
f0106a15:	50                   	push   %eax
f0106a16:	e8 cc 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106a1b:	83 c4 10             	add    $0x10,%esp
f0106a1e:	89 c2                	mov    %eax,%edx
f0106a20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a23:	89 10                	mov    %edx,(%eax)
f0106a25:	eb 44                	jmp    f0106a6b <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a35:	c1 e8 0c             	shr    $0xc,%eax
f0106a38:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106a3b:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106a40:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106a43:	72 17                	jb     f0106a5c <get_page_table+0x82>
f0106a45:	ff 75 f0             	pushl  -0x10(%ebp)
f0106a48:	68 20 5a 13 f0       	push   $0xf0135a20
f0106a4d:	68 e2 00 00 00       	push   $0xe2
f0106a52:	68 63 59 13 f0       	push   $0xf0135963
f0106a57:	e8 9f 97 ff ff       	call   f01001fb <_panic>
f0106a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a5f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a64:	89 c2                	mov    %eax,%edx
f0106a66:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a69:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106a6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a70:	e9 b9 00 00 00       	jmp    f0106b2e <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106a75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a79:	0f 84 a1 00 00 00    	je     f0106b20 <get_page_table+0x146>
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106a85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a88:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106a8b:	83 ec 0c             	sub    $0xc,%esp
f0106a8e:	6a 00                	push   $0x0
f0106a90:	e8 b8 59 00 00       	call   f010c44d <fault_handler>
f0106a95:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a9b:	c1 e8 16             	shr    $0x16,%eax
f0106a9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa8:	01 d0                	add    %edx,%eax
f0106aaa:	8b 00                	mov    (%eax),%eax
f0106aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106aaf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ab6:	77 1d                	ja     f0106ad5 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106abb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ac0:	83 ec 0c             	sub    $0xc,%esp
f0106ac3:	50                   	push   %eax
f0106ac4:	e8 1e 0f 00 00       	call   f01079e7 <kheap_virtual_address>
f0106ac9:	83 c4 10             	add    $0x10,%esp
f0106acc:	89 c2                	mov    %eax,%edx
f0106ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ad1:	89 10                	mov    %edx,(%eax)
f0106ad3:	eb 44                	jmp    f0106b19 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106add:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ae3:	c1 e8 0c             	shr    $0xc,%eax
f0106ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ae9:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106aee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106af1:	72 17                	jb     f0106b0a <get_page_table+0x130>
f0106af3:	ff 75 e8             	pushl  -0x18(%ebp)
f0106af6:	68 20 5a 13 f0       	push   $0xf0135a20
f0106afb:	68 fa 00 00 00       	push   $0xfa
f0106b00:	68 63 59 13 f0       	push   $0xf0135963
f0106b05:	e8 f1 96 ff ff       	call   f01001fb <_panic>
f0106b0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106b0d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b12:	89 c2                	mov    %eax,%edx
f0106b14:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b17:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106b19:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b1e:	eb 0e                	jmp    f0106b2e <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106b20:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106b29:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106b2e:	c9                   	leave  
f0106b2f:	c3                   	ret    

f0106b30 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106b30:	55                   	push   %ebp
f0106b31:	89 e5                	mov    %esp,%ebp
f0106b33:	53                   	push   %ebx
f0106b34:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106b37:	83 ec 0c             	sub    $0xc,%esp
f0106b3a:	68 00 10 00 00       	push   $0x1000
f0106b3f:	e8 ba 0c 00 00       	call   f01077fe <kmalloc>
f0106b44:	83 c4 10             	add    $0x10,%esp
f0106b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106b4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b4e:	75 17                	jne    f0106b67 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106b50:	83 ec 04             	sub    $0x4,%esp
f0106b53:	68 4f 5a 13 f0       	push   $0xf0135a4f
f0106b58:	68 18 01 00 00       	push   $0x118
f0106b5d:	68 63 59 13 f0       	push   $0xf0135963
f0106b62:	e8 94 96 ff ff       	call   f01001fb <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106b67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b6a:	c1 e8 16             	shr    $0x16,%eax
f0106b6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106b7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b7d:	83 ec 0c             	sub    $0xc,%esp
f0106b80:	50                   	push   %eax
f0106b81:	e8 8d 0e 00 00       	call   f0107a13 <kheap_physical_address>
f0106b86:	83 c4 10             	add    $0x10,%esp
f0106b89:	83 c8 07             	or     $0x7,%eax
f0106b8c:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106b8e:	83 ec 04             	sub    $0x4,%esp
f0106b91:	68 00 10 00 00       	push   $0x1000
f0106b96:	6a 00                	push   $0x0
f0106b98:	ff 75 f4             	pushl  -0xc(%ebp)
f0106b9b:	e8 3c a2 02 00       	call   f0130ddc <memset>
f0106ba0:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106ba3:	0f 20 d8             	mov    %cr3,%eax
f0106ba6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106ba9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bac:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106bb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106bb5:	c9                   	leave  
f0106bb6:	c3                   	ret    

f0106bb7 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106bb7:	55                   	push   %ebp
f0106bb8:	89 e5                	mov    %esp,%ebp
f0106bba:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106bbd:	83 ec 0c             	sub    $0xc,%esp
f0106bc0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106bc3:	50                   	push   %eax
f0106bc4:	e8 52 fc ff ff       	call   f010681b <allocate_frame>
f0106bc9:	83 c4 10             	add    $0x10,%esp
f0106bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bd2:	83 ec 0c             	sub    $0xc,%esp
f0106bd5:	50                   	push   %eax
f0106bd6:	e8 03 f8 ff ff       	call   f01063de <to_physical_address>
f0106bdb:	83 c4 10             	add    $0x10,%esp
f0106bde:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106bea:	c1 e8 0c             	shr    $0xc,%eax
f0106bed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bf0:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106bf5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106bf8:	72 17                	jb     f0106c11 <__static_cpt+0x5a>
f0106bfa:	ff 75 ec             	pushl  -0x14(%ebp)
f0106bfd:	68 20 5a 13 f0       	push   $0xf0135a20
f0106c02:	68 30 01 00 00       	push   $0x130
f0106c07:	68 63 59 13 f0       	push   $0xf0135963
f0106c0c:	e8 ea 95 ff ff       	call   f01001fb <_panic>
f0106c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c19:	89 c2                	mov    %eax,%edx
f0106c1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c1e:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106c20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c23:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c2c:	c1 e8 16             	shr    $0x16,%eax
f0106c2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c39:	01 d0                	add    %edx,%eax
f0106c3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c3e:	83 ca 07             	or     $0x7,%edx
f0106c41:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106c43:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c46:	8b 00                	mov    (%eax),%eax
f0106c48:	83 ec 04             	sub    $0x4,%esp
f0106c4b:	68 00 10 00 00       	push   $0x1000
f0106c50:	6a 00                	push   $0x0
f0106c52:	50                   	push   %eax
f0106c53:	e8 84 a1 02 00       	call   f0130ddc <memset>
f0106c58:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c5b:	0f 20 d8             	mov    %cr3,%eax
f0106c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106c64:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106c67:	90                   	nop
f0106c68:	c9                   	leave  
f0106c69:	c3                   	ret    

f0106c6a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106c6a:	55                   	push   %ebp
f0106c6b:	89 e5                	mov    %esp,%ebp
f0106c6d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106c70:	ff 75 0c             	pushl  0xc(%ebp)
f0106c73:	e8 66 f7 ff ff       	call   f01063de <to_physical_address>
f0106c78:	83 c4 04             	add    $0x4,%esp
f0106c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106c7e:	83 ec 04             	sub    $0x4,%esp
f0106c81:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106c84:	50                   	push   %eax
f0106c85:	ff 75 10             	pushl  0x10(%ebp)
f0106c88:	ff 75 08             	pushl  0x8(%ebp)
f0106c8b:	e8 4a fd ff ff       	call   f01069da <get_page_table>
f0106c90:	83 c4 10             	add    $0x10,%esp
f0106c93:	83 f8 01             	cmp    $0x1,%eax
f0106c96:	75 1b                	jne    f0106cb3 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106c98:	83 ec 08             	sub    $0x8,%esp
f0106c9b:	ff 75 10             	pushl  0x10(%ebp)
f0106c9e:	ff 75 08             	pushl  0x8(%ebp)
f0106ca1:	e8 8a fe ff ff       	call   f0106b30 <create_page_table>
f0106ca6:	83 c4 10             	add    $0x10,%esp
f0106ca9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106cac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106cb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cb6:	8b 55 10             	mov    0x10(%ebp),%edx
f0106cb9:	c1 ea 0c             	shr    $0xc,%edx
f0106cbc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106cc2:	c1 e2 02             	shl    $0x2,%edx
f0106cc5:	01 d0                	add    %edx,%eax
f0106cc7:	8b 00                	mov    (%eax),%eax
f0106cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccf:	83 e0 01             	and    $0x1,%eax
f0106cd2:	85 c0                	test   %eax,%eax
f0106cd4:	74 25                	je     f0106cfb <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cd9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106cde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106ce1:	75 07                	jne    f0106cea <map_frame+0x80>
			return 0;
f0106ce3:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ce8:	eb 43                	jmp    f0106d2d <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106cea:	83 ec 08             	sub    $0x8,%esp
f0106ced:	ff 75 10             	pushl  0x10(%ebp)
f0106cf0:	ff 75 08             	pushl  0x8(%ebp)
f0106cf3:	e8 a7 00 00 00       	call   f0106d9f <unmap_frame>
f0106cf8:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cfe:	8b 40 08             	mov    0x8(%eax),%eax
f0106d01:	40                   	inc    %eax
f0106d02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d05:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d0c:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d0f:	c1 ea 0c             	shr    $0xc,%edx
f0106d12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d18:	c1 e2 02             	shl    $0x2,%edx
f0106d1b:	01 c2                	add    %eax,%edx
f0106d1d:	8b 45 14             	mov    0x14(%ebp),%eax
f0106d20:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106d23:	83 c8 01             	or     $0x1,%eax
f0106d26:	89 02                	mov    %eax,(%edx)

	return 0;
f0106d28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d2d:	c9                   	leave  
f0106d2e:	c3                   	ret    

f0106d2f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106d2f:	55                   	push   %ebp
f0106d30:	89 e5                	mov    %esp,%ebp
f0106d32:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106d35:	83 ec 04             	sub    $0x4,%esp
f0106d38:	ff 75 10             	pushl  0x10(%ebp)
f0106d3b:	ff 75 0c             	pushl  0xc(%ebp)
f0106d3e:	ff 75 08             	pushl  0x8(%ebp)
f0106d41:	e8 94 fc ff ff       	call   f01069da <get_page_table>
f0106d46:	83 c4 10             	add    $0x10,%esp
f0106d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106d4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d4f:	8b 00                	mov    (%eax),%eax
f0106d51:	85 c0                	test   %eax,%eax
f0106d53:	74 43                	je     f0106d98 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d58:	c1 e8 0c             	shr    $0xc,%eax
f0106d5b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106d63:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d6b:	c1 e2 02             	shl    $0x2,%edx
f0106d6e:	01 d0                	add    %edx,%eax
f0106d70:	8b 00                	mov    (%eax),%eax
f0106d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106d75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106d79:	74 16                	je     f0106d91 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d7e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d83:	83 ec 0c             	sub    $0xc,%esp
f0106d86:	50                   	push   %eax
f0106d87:	e8 65 f6 ff ff       	call   f01063f1 <to_frame_info>
f0106d8c:	83 c4 10             	add    $0x10,%esp
f0106d8f:	eb 0c                	jmp    f0106d9d <get_frame_info+0x6e>
		}
		return 0;
f0106d91:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d96:	eb 05                	jmp    f0106d9d <get_frame_info+0x6e>
	}
	return 0;
f0106d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106d9d:	c9                   	leave  
f0106d9e:	c3                   	ret    

f0106d9f <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106d9f:	55                   	push   %ebp
f0106da0:	89 e5                	mov    %esp,%ebp
f0106da2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106da5:	83 ec 04             	sub    $0x4,%esp
f0106da8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106dab:	50                   	push   %eax
f0106dac:	ff 75 0c             	pushl  0xc(%ebp)
f0106daf:	ff 75 08             	pushl  0x8(%ebp)
f0106db2:	e8 78 ff ff ff       	call   f0106d2f <get_frame_info>
f0106db7:	83 c4 10             	add    $0x10,%esp
f0106dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106dbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106dc1:	74 60                	je     f0106e23 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc6:	8a 40 14             	mov    0x14(%eax),%al
f0106dc9:	84 c0                	test   %al,%al
f0106dcb:	74 1c                	je     f0106de9 <unmap_frame+0x4a>
f0106dcd:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106dd4:	77 13                	ja     f0106de9 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106dd6:	83 ec 08             	sub    $0x8,%esp
f0106dd9:	ff 75 0c             	pushl  0xc(%ebp)
f0106ddc:	68 6c 5a 13 f0       	push   $0xf0135a6c
f0106de1:	e8 9c 9e ff ff       	call   f0100c82 <cprintf>
f0106de6:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106de9:	83 ec 0c             	sub    $0xc,%esp
f0106dec:	ff 75 f4             	pushl  -0xc(%ebp)
f0106def:	e8 b6 fb ff ff       	call   f01069aa <decrement_references>
f0106df4:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106dfa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dfd:	c1 ea 0c             	shr    $0xc,%edx
f0106e00:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e06:	c1 e2 02             	shl    $0x2,%edx
f0106e09:	01 d0                	add    %edx,%eax
f0106e0b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106e11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e14:	83 ec 08             	sub    $0x8,%esp
f0106e17:	50                   	push   %eax
f0106e18:	ff 75 08             	pushl  0x8(%ebp)
f0106e1b:	e8 17 f6 ff ff       	call   f0106437 <tlb_invalidate>
f0106e20:	83 c4 10             	add    $0x10,%esp
	}
}
f0106e23:	90                   	nop
f0106e24:	c9                   	leave  
f0106e25:	c3                   	ret    

f0106e26 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106e26:	55                   	push   %ebp
f0106e27:	89 e5                	mov    %esp,%ebp
f0106e29:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106e2c:	ff 75 0c             	pushl  0xc(%ebp)
f0106e2f:	e8 aa f5 ff ff       	call   f01063de <to_physical_address>
f0106e34:	83 c4 04             	add    $0x4,%esp
f0106e37:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106e3a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e3d:	c1 e8 16             	shr    $0x16,%eax
f0106e40:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106e47:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e4a:	01 d0                	add    %edx,%eax
f0106e4c:	8b 00                	mov    (%eax),%eax
f0106e4e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106e51:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106e58:	77 19                	ja     f0106e73 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e62:	83 ec 0c             	sub    $0xc,%esp
f0106e65:	50                   	push   %eax
f0106e66:	e8 7c 0b 00 00       	call   f01079e7 <kheap_virtual_address>
f0106e6b:	83 c4 10             	add    $0x10,%esp
f0106e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e71:	eb 40                	jmp    f0106eb3 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e81:	c1 e8 0c             	shr    $0xc,%eax
f0106e84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106e87:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0106e8c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106e8f:	72 17                	jb     f0106ea8 <loadtime_map_frame+0x82>
f0106e91:	ff 75 e8             	pushl  -0x18(%ebp)
f0106e94:	68 20 5a 13 f0       	push   $0xf0135a20
f0106e99:	68 e6 01 00 00       	push   $0x1e6
f0106e9e:	68 63 59 13 f0       	push   $0xf0135963
f0106ea3:	e8 53 93 ff ff       	call   f01001fb <_panic>
f0106ea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106eab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106eb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106eb7:	75 14                	jne    f0106ecd <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106eb9:	83 ec 08             	sub    $0x8,%esp
f0106ebc:	ff 75 10             	pushl  0x10(%ebp)
f0106ebf:	ff 75 08             	pushl  0x8(%ebp)
f0106ec2:	e8 69 fc ff ff       	call   f0106b30 <create_page_table>
f0106ec7:	83 c4 10             	add    $0x10,%esp
f0106eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ed0:	8b 40 08             	mov    0x8(%eax),%eax
f0106ed3:	40                   	inc    %eax
f0106ed4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ed7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106edb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ede:	c1 e8 0c             	shr    $0xc,%eax
f0106ee1:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106ee6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef0:	01 c2                	add    %eax,%edx
f0106ef2:	8b 45 14             	mov    0x14(%ebp),%eax
f0106ef5:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106ef8:	83 c8 01             	or     $0x1,%eax
f0106efb:	89 02                	mov    %eax,(%edx)

	return 0;
f0106efd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106f02:	c9                   	leave  
f0106f03:	c3                   	ret    

f0106f04 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106f04:	55                   	push   %ebp
f0106f05:	89 e5                	mov    %esp,%ebp
f0106f07:	57                   	push   %edi
f0106f08:	56                   	push   %esi
f0106f09:	53                   	push   %ebx
f0106f0a:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106f0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106f14:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106f1b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106f22:	a1 18 7b 65 f0       	mov    0xf0657b18,%eax
f0106f27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f2a:	eb 1a                	jmp    f0106f46 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f2f:	8a 40 14             	mov    0x14(%eax),%al
f0106f32:	84 c0                	test   %al,%al
f0106f34:	74 05                	je     f0106f3b <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106f36:	ff 45 e8             	incl   -0x18(%ebp)
f0106f39:	eb 03                	jmp    f0106f3e <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106f3b:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106f3e:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f4a:	74 07                	je     f0106f53 <calculate_available_frames+0x4f>
f0106f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f4f:	8b 00                	mov    (%eax),%eax
f0106f51:	eb 05                	jmp    f0106f58 <calculate_available_frames+0x54>
f0106f53:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f58:	a3 20 7b 65 f0       	mov    %eax,0xf0657b20
f0106f5d:	a1 20 7b 65 f0       	mov    0xf0657b20,%eax
f0106f62:	85 c0                	test   %eax,%eax
f0106f64:	75 c6                	jne    f0106f2c <calculate_available_frames+0x28>
f0106f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f6a:	75 c0                	jne    f0106f2c <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f6c:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f0106f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f74:	eb 0b                	jmp    f0106f81 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106f76:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106f79:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106f85:	74 07                	je     f0106f8e <calculate_available_frames+0x8a>
f0106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8a:	8b 00                	mov    (%eax),%eax
f0106f8c:	eb 05                	jmp    f0106f93 <calculate_available_frames+0x8f>
f0106f8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0106f93:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f0106f98:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f0106f9d:	85 c0                	test   %eax,%eax
f0106f9f:	75 d5                	jne    f0106f76 <calculate_available_frames+0x72>
f0106fa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106fa5:	75 cf                	jne    f0106f76 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106fa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106faa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106fad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106fb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fbc:	89 c3                	mov    %eax,%ebx
f0106fbe:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106fc1:	ba 03 00 00 00       	mov    $0x3,%edx
f0106fc6:	89 df                	mov    %ebx,%edi
f0106fc8:	89 c6                	mov    %eax,%esi
f0106fca:	89 d1                	mov    %edx,%ecx
f0106fcc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106fce:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fd1:	83 c4 20             	add    $0x20,%esp
f0106fd4:	5b                   	pop    %ebx
f0106fd5:	5e                   	pop    %esi
f0106fd6:	5f                   	pop    %edi
f0106fd7:	5d                   	pop    %ebp
f0106fd8:	c2 04 00             	ret    $0x4

f0106fdb <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106fdb:	55                   	push   %ebp
f0106fdc:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106fde:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fe1:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0106fe7:	29 d0                	sub    %edx,%eax
f0106fe9:	c1 f8 03             	sar    $0x3,%eax
f0106fec:	89 c2                	mov    %eax,%edx
f0106fee:	89 d0                	mov    %edx,%eax
f0106ff0:	c1 e0 02             	shl    $0x2,%eax
f0106ff3:	01 d0                	add    %edx,%eax
f0106ff5:	c1 e0 02             	shl    $0x2,%eax
f0106ff8:	01 d0                	add    %edx,%eax
f0106ffa:	c1 e0 02             	shl    $0x2,%eax
f0106ffd:	01 d0                	add    %edx,%eax
f0106fff:	89 c1                	mov    %eax,%ecx
f0107001:	c1 e1 08             	shl    $0x8,%ecx
f0107004:	01 c8                	add    %ecx,%eax
f0107006:	89 c1                	mov    %eax,%ecx
f0107008:	c1 e1 10             	shl    $0x10,%ecx
f010700b:	01 c8                	add    %ecx,%eax
f010700d:	01 c0                	add    %eax,%eax
f010700f:	01 d0                	add    %edx,%eax
}
f0107011:	5d                   	pop    %ebp
f0107012:	c3                   	ret    

f0107013 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107013:	55                   	push   %ebp
f0107014:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107016:	ff 75 08             	pushl  0x8(%ebp)
f0107019:	e8 bd ff ff ff       	call   f0106fdb <to_frame_number>
f010701e:	83 c4 04             	add    $0x4,%esp
f0107021:	c1 e0 0c             	shl    $0xc,%eax
}
f0107024:	c9                   	leave  
f0107025:	c3                   	ret    

f0107026 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107026:	55                   	push   %ebp
f0107027:	89 e5                	mov    %esp,%ebp
f0107029:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010702c:	8b 45 08             	mov    0x8(%ebp),%eax
f010702f:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107034:	8b 55 08             	mov    0x8(%ebp),%edx
f0107037:	89 d0                	mov    %edx,%eax
f0107039:	c1 e0 02             	shl    $0x2,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	c1 e0 02             	shl    $0x2,%eax
f0107041:	01 d0                	add    %edx,%eax
f0107043:	c1 e0 02             	shl    $0x2,%eax
f0107046:	83 ec 0c             	sub    $0xc,%esp
f0107049:	50                   	push   %eax
f010704a:	e8 af 07 00 00       	call   f01077fe <kmalloc>
f010704f:	83 c4 10             	add    $0x10,%esp
f0107052:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
	if (shares == NULL)
f0107057:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010705c:	85 c0                	test   %eax,%eax
f010705e:	75 14                	jne    f0107074 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107060:	83 ec 04             	sub    $0x4,%esp
f0107063:	68 90 5a 13 f0       	push   $0xf0135a90
f0107068:	6a 21                	push   $0x21
f010706a:	68 d4 5a 13 f0       	push   $0xf0135ad4
f010706f:	e8 87 91 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010707b:	eb 4b                	jmp    f01070c8 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010707d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107086:	89 d0                	mov    %edx,%eax
f0107088:	c1 e0 02             	shl    $0x2,%eax
f010708b:	01 d0                	add    %edx,%eax
f010708d:	c1 e0 02             	shl    $0x2,%eax
f0107090:	01 d0                	add    %edx,%eax
f0107092:	c1 e0 02             	shl    $0x2,%eax
f0107095:	01 c8                	add    %ecx,%eax
f0107097:	83 ec 04             	sub    $0x4,%esp
f010709a:	6a 54                	push   $0x54
f010709c:	6a 00                	push   $0x0
f010709e:	50                   	push   %eax
f010709f:	e8 38 9d 02 00       	call   f0130ddc <memset>
f01070a4:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f01070a7:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070b0:	89 d0                	mov    %edx,%eax
f01070b2:	c1 e0 02             	shl    $0x2,%eax
f01070b5:	01 d0                	add    %edx,%eax
f01070b7:	c1 e0 02             	shl    $0x2,%eax
f01070ba:	01 d0                	add    %edx,%eax
f01070bc:	c1 e0 02             	shl    $0x2,%eax
f01070bf:	01 c8                	add    %ecx,%eax
f01070c1:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01070c5:	ff 45 f4             	incl   -0xc(%ebp)
f01070c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070cb:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01070d0:	39 c2                	cmp    %eax,%edx
f01070d2:	72 a9                	jb     f010707d <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01070d4:	90                   	nop
f01070d5:	c9                   	leave  
f01070d6:	c3                   	ret    

f01070d7 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01070d7:	55                   	push   %ebp
f01070d8:	89 e5                	mov    %esp,%ebp
f01070da:	53                   	push   %ebx
f01070db:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01070de:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01070e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01070ec:	eb 2c                	jmp    f010711a <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01070ee:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01070f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01070f7:	89 d0                	mov    %edx,%eax
f01070f9:	c1 e0 02             	shl    $0x2,%eax
f01070fc:	01 d0                	add    %edx,%eax
f01070fe:	c1 e0 02             	shl    $0x2,%eax
f0107101:	01 d0                	add    %edx,%eax
f0107103:	c1 e0 02             	shl    $0x2,%eax
f0107106:	01 c8                	add    %ecx,%eax
f0107108:	8a 40 4d             	mov    0x4d(%eax),%al
f010710b:	84 c0                	test   %al,%al
f010710d:	74 08                	je     f0107117 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f010710f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107115:	eb 0f                	jmp    f0107126 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107117:	ff 45 f0             	incl   -0x10(%ebp)
f010711a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010711d:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107122:	39 c2                	cmp    %eax,%edx
f0107124:	72 c8                	jb     f01070ee <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107126:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010712a:	75 50                	jne    f010717c <allocate_share_object+0xa5>
	{
		//try to increase double the size of the "shares" array
#if USE_KHEAP
		{
			shares = krealloc(shares, 2*MAX_SHARES);
f010712c:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107131:	01 c0                	add    %eax,%eax
f0107133:	89 c2                	mov    %eax,%edx
f0107135:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f010713a:	83 ec 08             	sub    $0x8,%esp
f010713d:	52                   	push   %edx
f010713e:	50                   	push   %eax
f010713f:	e8 71 09 00 00       	call   f0107ab5 <krealloc>
f0107144:	83 c4 10             	add    $0x10,%esp
f0107147:	a3 ec 7a 65 f0       	mov    %eax,0xf0657aec
			if (shares == NULL)
f010714c:	a1 ec 7a 65 f0       	mov    0xf0657aec,%eax
f0107151:	85 c0                	test   %eax,%eax
f0107153:	75 13                	jne    f0107168 <allocate_share_object+0x91>
			{
				*allocatedObject = NULL;
f0107155:	8b 45 08             	mov    0x8(%ebp),%eax
f0107158:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SHARE;
f010715e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107163:	e9 e8 00 00 00       	jmp    f0107250 <allocate_share_object+0x179>
			}
			else
			{
				sharedObjectID = MAX_SHARES;
f0107168:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f010716d:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SHARES *= 2;
f0107170:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107175:	01 c0                	add    %eax,%eax
f0107177:	a3 28 7b 65 f0       	mov    %eax,0xf0657b28
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010717c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107182:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107185:	89 d0                	mov    %edx,%eax
f0107187:	c1 e0 02             	shl    $0x2,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	c1 e0 02             	shl    $0x2,%eax
f010718f:	01 d0                	add    %edx,%eax
f0107191:	c1 e0 02             	shl    $0x2,%eax
f0107194:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107197:	8b 45 08             	mov    0x8(%ebp),%eax
f010719a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010719c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a5:	89 d0                	mov    %edx,%eax
f01071a7:	c1 e0 02             	shl    $0x2,%eax
f01071aa:	01 d0                	add    %edx,%eax
f01071ac:	c1 e0 02             	shl    $0x2,%eax
f01071af:	01 d0                	add    %edx,%eax
f01071b1:	c1 e0 02             	shl    $0x2,%eax
f01071b4:	01 c8                	add    %ecx,%eax
f01071b6:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = kmalloc(PAGE_SIZE);
f01071ba:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071c3:	89 d0                	mov    %edx,%eax
f01071c5:	c1 e0 02             	shl    $0x2,%eax
f01071c8:	01 d0                	add    %edx,%eax
f01071ca:	c1 e0 02             	shl    $0x2,%eax
f01071cd:	01 d0                	add    %edx,%eax
f01071cf:	c1 e0 02             	shl    $0x2,%eax
f01071d2:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f01071d5:	83 ec 0c             	sub    $0xc,%esp
f01071d8:	68 00 10 00 00       	push   $0x1000
f01071dd:	e8 1c 06 00 00       	call   f01077fe <kmalloc>
f01071e2:	83 c4 10             	add    $0x10,%esp
f01071e5:	89 43 50             	mov    %eax,0x50(%ebx)
		if (shares[sharedObjectID].framesStorage == NULL)
f01071e8:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01071ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f1:	89 d0                	mov    %edx,%eax
f01071f3:	c1 e0 02             	shl    $0x2,%eax
f01071f6:	01 d0                	add    %edx,%eax
f01071f8:	c1 e0 02             	shl    $0x2,%eax
f01071fb:	01 d0                	add    %edx,%eax
f01071fd:	c1 e0 02             	shl    $0x2,%eax
f0107200:	01 c8                	add    %ecx,%eax
f0107202:	8b 40 50             	mov    0x50(%eax),%eax
f0107205:	85 c0                	test   %eax,%eax
f0107207:	75 14                	jne    f010721d <allocate_share_object+0x146>
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
f0107209:	83 ec 04             	sub    $0x4,%esp
f010720c:	68 f8 5a 13 f0       	push   $0xf0135af8
f0107211:	6a 63                	push   $0x63
f0107213:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107218:	e8 de 8f ff ff       	call   f01001fb <_panic>
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010721d:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107226:	89 d0                	mov    %edx,%eax
f0107228:	c1 e0 02             	shl    $0x2,%eax
f010722b:	01 d0                	add    %edx,%eax
f010722d:	c1 e0 02             	shl    $0x2,%eax
f0107230:	01 d0                	add    %edx,%eax
f0107232:	c1 e0 02             	shl    $0x2,%eax
f0107235:	01 c8                	add    %ecx,%eax
f0107237:	8b 40 50             	mov    0x50(%eax),%eax
f010723a:	83 ec 04             	sub    $0x4,%esp
f010723d:	68 00 10 00 00       	push   $0x1000
f0107242:	6a 00                	push   $0x0
f0107244:	50                   	push   %eax
f0107245:	e8 92 9b 02 00       	call   f0130ddc <memset>
f010724a:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010724d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107253:	c9                   	leave  
f0107254:	c3                   	ret    

f0107255 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107255:	55                   	push   %ebp
f0107256:	89 e5                	mov    %esp,%ebp
f0107258:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010725b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107262:	eb 7b                	jmp    f01072df <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f0107264:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010726a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726d:	89 d0                	mov    %edx,%eax
f010726f:	c1 e0 02             	shl    $0x2,%eax
f0107272:	01 d0                	add    %edx,%eax
f0107274:	c1 e0 02             	shl    $0x2,%eax
f0107277:	01 d0                	add    %edx,%eax
f0107279:	c1 e0 02             	shl    $0x2,%eax
f010727c:	01 c8                	add    %ecx,%eax
f010727e:	8a 40 4d             	mov    0x4d(%eax),%al
f0107281:	84 c0                	test   %al,%al
f0107283:	75 56                	jne    f01072db <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107285:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010728b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010728e:	89 d0                	mov    %edx,%eax
f0107290:	c1 e0 02             	shl    $0x2,%eax
f0107293:	01 d0                	add    %edx,%eax
f0107295:	c1 e0 02             	shl    $0x2,%eax
f0107298:	01 d0                	add    %edx,%eax
f010729a:	c1 e0 02             	shl    $0x2,%eax
f010729d:	01 c8                	add    %ecx,%eax
f010729f:	8b 00                	mov    (%eax),%eax
f01072a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072a4:	75 36                	jne    f01072dc <get_share_object_ID+0x87>
f01072a6:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f01072ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072af:	89 d0                	mov    %edx,%eax
f01072b1:	c1 e0 02             	shl    $0x2,%eax
f01072b4:	01 d0                	add    %edx,%eax
f01072b6:	c1 e0 02             	shl    $0x2,%eax
f01072b9:	01 d0                	add    %edx,%eax
f01072bb:	c1 e0 02             	shl    $0x2,%eax
f01072be:	01 c8                	add    %ecx,%eax
f01072c0:	83 c0 04             	add    $0x4,%eax
f01072c3:	83 ec 08             	sub    $0x8,%esp
f01072c6:	50                   	push   %eax
f01072c7:	ff 75 0c             	pushl  0xc(%ebp)
f01072ca:	e8 2b 9a 02 00       	call   f0130cfa <strcmp>
f01072cf:	83 c4 10             	add    $0x10,%esp
f01072d2:	85 c0                	test   %eax,%eax
f01072d4:	75 06                	jne    f01072dc <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f01072d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d9:	eb 19                	jmp    f01072f4 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f01072db:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f01072dc:	ff 45 f4             	incl   -0xc(%ebp)
f01072df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072e2:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f01072e7:	39 c2                	cmp    %eax,%edx
f01072e9:	0f 82 75 ff ff ff    	jb     f0107264 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f01072ef:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f01072f4:	c9                   	leave  
f01072f5:	c3                   	ret    

f01072f6 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f01072f6:	55                   	push   %ebp
f01072f7:	89 e5                	mov    %esp,%ebp
f01072f9:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f01072fc:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
f0107301:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107304:	72 0a                	jb     f0107310 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107306:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010730b:	e9 9f 00 00 00       	jmp    f01073af <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107310:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107316:	8b 55 08             	mov    0x8(%ebp),%edx
f0107319:	89 d0                	mov    %edx,%eax
f010731b:	c1 e0 02             	shl    $0x2,%eax
f010731e:	01 d0                	add    %edx,%eax
f0107320:	c1 e0 02             	shl    $0x2,%eax
f0107323:	01 d0                	add    %edx,%eax
f0107325:	c1 e0 02             	shl    $0x2,%eax
f0107328:	01 c8                	add    %ecx,%eax
f010732a:	8b 40 50             	mov    0x50(%eax),%eax
f010732d:	83 ec 0c             	sub    $0xc,%esp
f0107330:	50                   	push   %eax
f0107331:	e8 52 01 00 00       	call   f0107488 <clear_frames_storage>
f0107336:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107339:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f010733f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107342:	89 d0                	mov    %edx,%eax
f0107344:	c1 e0 02             	shl    $0x2,%eax
f0107347:	01 d0                	add    %edx,%eax
f0107349:	c1 e0 02             	shl    $0x2,%eax
f010734c:	01 d0                	add    %edx,%eax
f010734e:	c1 e0 02             	shl    $0x2,%eax
f0107351:	01 c8                	add    %ecx,%eax
f0107353:	8b 40 50             	mov    0x50(%eax),%eax
f0107356:	83 ec 0c             	sub    $0xc,%esp
f0107359:	50                   	push   %eax
f010735a:	e8 61 05 00 00       	call   f01078c0 <kfree>
f010735f:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107362:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107368:	8b 55 08             	mov    0x8(%ebp),%edx
f010736b:	89 d0                	mov    %edx,%eax
f010736d:	c1 e0 02             	shl    $0x2,%eax
f0107370:	01 d0                	add    %edx,%eax
f0107372:	c1 e0 02             	shl    $0x2,%eax
f0107375:	01 d0                	add    %edx,%eax
f0107377:	c1 e0 02             	shl    $0x2,%eax
f010737a:	01 c8                	add    %ecx,%eax
f010737c:	83 ec 04             	sub    $0x4,%esp
f010737f:	6a 54                	push   $0x54
f0107381:	6a 00                	push   $0x0
f0107383:	50                   	push   %eax
f0107384:	e8 53 9a 02 00       	call   f0130ddc <memset>
f0107389:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010738c:	8b 0d ec 7a 65 f0    	mov    0xf0657aec,%ecx
f0107392:	8b 55 08             	mov    0x8(%ebp),%edx
f0107395:	89 d0                	mov    %edx,%eax
f0107397:	c1 e0 02             	shl    $0x2,%eax
f010739a:	01 d0                	add    %edx,%eax
f010739c:	c1 e0 02             	shl    $0x2,%eax
f010739f:	01 d0                	add    %edx,%eax
f01073a1:	c1 e0 02             	shl    $0x2,%eax
f01073a4:	01 c8                	add    %ecx,%eax
f01073a6:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073af:	c9                   	leave  
f01073b0:	c3                   	ret    

f01073b1 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073b1:	55                   	push   %ebp
f01073b2:	89 e5                	mov    %esp,%ebp
f01073b4:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073b7:	83 ec 0c             	sub    $0xc,%esp
f01073ba:	68 00 10 00 00       	push   $0x1000
f01073bf:	e8 3a 04 00 00       	call   f01077fe <kmalloc>
f01073c4:	83 c4 10             	add    $0x10,%esp
f01073c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f01073ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01073ce:	75 17                	jne    f01073e7 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01073d0:	83 ec 04             	sub    $0x4,%esp
f01073d3:	68 32 5b 13 f0       	push   $0xf0135b32
f01073d8:	68 a9 00 00 00       	push   $0xa9
f01073dd:	68 d4 5a 13 f0       	push   $0xf0135ad4
f01073e2:	e8 14 8e ff ff       	call   f01001fb <_panic>
	}
	return frames_storage;
f01073e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01073ea:	c9                   	leave  
f01073eb:	c3                   	ret    

f01073ec <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f01073ec:	55                   	push   %ebp
f01073ed:	89 e5                	mov    %esp,%ebp
f01073ef:	53                   	push   %ebx
f01073f0:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f01073f3:	8b 45 10             	mov    0x10(%ebp),%eax
f01073f6:	c1 e0 0c             	shl    $0xc,%eax
f01073f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f01073fc:	83 ec 04             	sub    $0x4,%esp
f01073ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107402:	50                   	push   %eax
f0107403:	ff 75 f4             	pushl  -0xc(%ebp)
f0107406:	ff 75 08             	pushl  0x8(%ebp)
f0107409:	e8 cc f5 ff ff       	call   f01069da <get_page_table>
f010740e:	83 c4 10             	add    $0x10,%esp
f0107411:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107414:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107418:	75 14                	jne    f010742e <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010741a:	83 ec 08             	sub    $0x8,%esp
f010741d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107420:	ff 75 08             	pushl  0x8(%ebp)
f0107423:	e8 08 f7 ff ff       	call   f0106b30 <create_page_table>
f0107428:	83 c4 10             	add    $0x10,%esp
f010742b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010742e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107431:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107434:	c1 ea 0c             	shr    $0xc,%edx
f0107437:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010743d:	c1 e2 02             	shl    $0x2,%edx
f0107440:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 0c             	pushl  0xc(%ebp)
f0107449:	e8 c5 fb ff ff       	call   f0107013 <to_physical_address>
f010744e:	83 c4 10             	add    $0x10,%esp
f0107451:	83 c8 01             	or     $0x1,%eax
f0107454:	89 03                	mov    %eax,(%ebx)
}
f0107456:	90                   	nop
f0107457:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010745a:	c9                   	leave  
f010745b:	c3                   	ret    

f010745c <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010745c:	55                   	push   %ebp
f010745d:	89 e5                	mov    %esp,%ebp
f010745f:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107462:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107465:	c1 e0 0c             	shl    $0xc,%eax
f0107468:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f010746b:	83 ec 04             	sub    $0x4,%esp
f010746e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107471:	50                   	push   %eax
f0107472:	ff 75 f4             	pushl  -0xc(%ebp)
f0107475:	ff 75 08             	pushl  0x8(%ebp)
f0107478:	e8 b2 f8 ff ff       	call   f0106d2f <get_frame_info>
f010747d:	83 c4 10             	add    $0x10,%esp
f0107480:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107483:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107486:	c9                   	leave  
f0107487:	c3                   	ret    

f0107488 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107488:	55                   	push   %ebp
f0107489:	89 e5                	mov    %esp,%ebp
f010748b:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f010748e:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107495:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010749c:	eb 5b                	jmp    f01074f9 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010749e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ab:	01 d0                	add    %edx,%eax
f01074ad:	8b 00                	mov    (%eax),%eax
f01074af:	85 c0                	test   %eax,%eax
f01074b1:	74 43                	je     f01074f6 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	01 d0                	add    %edx,%eax
f01074c2:	8b 00                	mov    (%eax),%eax
f01074c4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01074c9:	83 ec 0c             	sub    $0xc,%esp
f01074cc:	50                   	push   %eax
f01074cd:	e8 15 05 00 00       	call   f01079e7 <kheap_virtual_address>
f01074d2:	83 c4 10             	add    $0x10,%esp
f01074d5:	83 ec 0c             	sub    $0xc,%esp
f01074d8:	50                   	push   %eax
f01074d9:	e8 e2 03 00 00       	call   f01078c0 <kfree>
f01074de:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f01074e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ee:	01 d0                	add    %edx,%eax
f01074f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074f6:	ff 45 f4             	incl   -0xc(%ebp)
f01074f9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107500:	7e 9c                	jle    f010749e <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107502:	90                   	nop
f0107503:	c9                   	leave  
f0107504:	c3                   	ret    

f0107505 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107505:	55                   	push   %ebp
f0107506:	89 e5                	mov    %esp,%ebp
f0107508:	83 ec 18             	sub    $0x18,%esp
f010750b:	8b 45 14             	mov    0x14(%ebp),%eax
f010750e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0107511:	83 ec 04             	sub    $0x4,%esp
f0107514:	68 50 5b 13 f0       	push   $0xf0135b50
f0107519:	68 fa 00 00 00       	push   $0xfa
f010751e:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107523:	e8 d3 8c ff ff       	call   f01001fb <_panic>

f0107528 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107528:	55                   	push   %ebp
f0107529:	89 e5                	mov    %esp,%ebp
f010752b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f010752e:	83 ec 04             	sub    $0x4,%esp
f0107531:	68 84 5b 13 f0       	push   $0xf0135b84
f0107536:	68 0c 01 00 00       	push   $0x10c
f010753b:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107540:	e8 b6 8c ff ff       	call   f01001fb <_panic>

f0107545 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107545:	55                   	push   %ebp
f0107546:	89 e5                	mov    %esp,%ebp
f0107548:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010754b:	83 ec 04             	sub    $0x4,%esp
f010754e:	68 b8 5b 13 f0       	push   $0xf0135bb8
f0107553:	68 1b 01 00 00       	push   $0x11b
f0107558:	68 d4 5a 13 f0       	push   $0xf0135ad4
f010755d:	e8 99 8c ff ff       	call   f01001fb <_panic>

f0107562 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107562:	55                   	push   %ebp
f0107563:	89 e5                	mov    %esp,%ebp
f0107565:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f0107568:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010756d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f0107570:	83 ec 04             	sub    $0x4,%esp
f0107573:	68 e8 5b 13 f0       	push   $0xf0135be8
f0107578:	68 33 01 00 00       	push   $0x133
f010757d:	68 d4 5a 13 f0       	push   $0xf0135ad4
f0107582:	e8 74 8c ff ff       	call   f01001fb <_panic>

f0107587 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107587:	55                   	push   %ebp
f0107588:	89 e5                	mov    %esp,%ebp
f010758a:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f010758f:	83 f8 01             	cmp    $0x1,%eax
f0107592:	75 04                	jne    f0107598 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107594:	b0 01                	mov    $0x1,%al
f0107596:	eb 02                	jmp    f010759a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107598:	b0 00                	mov    $0x0,%al
f010759a:	5d                   	pop    %ebp
f010759b:	c3                   	ret    

f010759c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010759c:	55                   	push   %ebp
f010759d:	89 e5                	mov    %esp,%ebp
f010759f:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01075a4:	83 f8 02             	cmp    $0x2,%eax
f01075a7:	75 04                	jne    f01075ad <isKHeapPlacementStrategyBESTFIT+0x11>
f01075a9:	b0 01                	mov    $0x1,%al
f01075ab:	eb 02                	jmp    f01075af <isKHeapPlacementStrategyBESTFIT+0x13>
f01075ad:	b0 00                	mov    $0x0,%al
f01075af:	5d                   	pop    %ebp
f01075b0:	c3                   	ret    

f01075b1 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01075b1:	55                   	push   %ebp
f01075b2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01075b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01075b7:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f01075bd:	29 d0                	sub    %edx,%eax
f01075bf:	c1 f8 03             	sar    $0x3,%eax
f01075c2:	89 c2                	mov    %eax,%edx
f01075c4:	89 d0                	mov    %edx,%eax
f01075c6:	c1 e0 02             	shl    $0x2,%eax
f01075c9:	01 d0                	add    %edx,%eax
f01075cb:	c1 e0 02             	shl    $0x2,%eax
f01075ce:	01 d0                	add    %edx,%eax
f01075d0:	c1 e0 02             	shl    $0x2,%eax
f01075d3:	01 d0                	add    %edx,%eax
f01075d5:	89 c1                	mov    %eax,%ecx
f01075d7:	c1 e1 08             	shl    $0x8,%ecx
f01075da:	01 c8                	add    %ecx,%eax
f01075dc:	89 c1                	mov    %eax,%ecx
f01075de:	c1 e1 10             	shl    $0x10,%ecx
f01075e1:	01 c8                	add    %ecx,%eax
f01075e3:	01 c0                	add    %eax,%eax
f01075e5:	01 d0                	add    %edx,%eax
}
f01075e7:	5d                   	pop    %ebp
f01075e8:	c3                   	ret    

f01075e9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01075e9:	55                   	push   %ebp
f01075ea:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01075ec:	ff 75 08             	pushl  0x8(%ebp)
f01075ef:	e8 bd ff ff ff       	call   f01075b1 <to_frame_number>
f01075f4:	83 c4 04             	add    $0x4,%esp
f01075f7:	c1 e0 0c             	shl    $0xc,%eax
}
f01075fa:	c9                   	leave  
f01075fb:	c3                   	ret    

f01075fc <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01075fc:	55                   	push   %ebp
f01075fd:	89 e5                	mov    %esp,%ebp
f01075ff:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107602:	8b 45 08             	mov    0x8(%ebp),%eax
f0107605:	c1 e8 0c             	shr    $0xc,%eax
f0107608:	89 c2                	mov    %eax,%edx
f010760a:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f010760f:	39 c2                	cmp    %eax,%edx
f0107611:	72 14                	jb     f0107627 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107613:	83 ec 04             	sub    $0x4,%esp
f0107616:	68 18 5c 13 f0       	push   $0xf0135c18
f010761b:	6a 55                	push   $0x55
f010761d:	68 3d 5c 13 f0       	push   $0xf0135c3d
f0107622:	e8 d4 8b ff ff       	call   f01001fb <_panic>
	return &frames_info[PPN(physical_address)];
f0107627:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010762d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107630:	c1 e8 0c             	shr    $0xc,%eax
f0107633:	89 c1                	mov    %eax,%ecx
f0107635:	89 c8                	mov    %ecx,%eax
f0107637:	01 c0                	add    %eax,%eax
f0107639:	01 c8                	add    %ecx,%eax
f010763b:	c1 e0 03             	shl    $0x3,%eax
f010763e:	01 d0                	add    %edx,%eax
}
f0107640:	c9                   	leave  
f0107641:	c3                   	ret    

f0107642 <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f0107642:	55                   	push   %ebp
f0107643:	89 e5                	mov    %esp,%ebp
f0107645:	83 ec 18             	sub    $0x18,%esp
//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//1.Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f0107648:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010764f:	00 00 00 
f0107652:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f0107659:	00 00 00 
f010765c:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f0107663:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0107666:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010766d:	00 00 00 
f0107670:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f0107677:	00 00 00 
f010767a:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f0107681:	00 00 00 
	uint32 arr_size = 0;
f0107684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//DO NOTHING
#else
	 //Dynamically allocate the array of MemBlockNodes remember to:

	 //2. set MAX_MEM_BLOCK_CNT with the chosen size of the array
	 MAX_MEM_BLOCK_CNT = (KERNEL_HEAP_MAX-KERNEL_HEAP_START)/PAGE_SIZE;
f010768b:	c7 05 04 7b 65 f0 ff 	movl   $0x9fff,0xf0657b04
f0107692:	9f 00 00 

	 //3. assign starting address of MemBlockNodes array
	 MemBlockNodes  =(struct MemBlock*) KERNEL_HEAP_START;
f0107695:	c7 05 d8 7a 65 f0 00 	movl   $0xf6000000,0xf0657ad8
f010769c:	00 00 f6 

	 //4.calculate the total size of memory required for the MemBlockNodes array (size of all the Structs)
	 arr_size =  ROUNDUP(MAX_MEM_BLOCK_CNT * sizeof(struct MemBlock), PAGE_SIZE);
f010769f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01076a6:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076ab:	c1 e0 04             	shl    $0x4,%eax
f01076ae:	89 c2                	mov    %eax,%edx
f01076b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01076b3:	01 d0                	add    %edx,%eax
f01076b5:	48                   	dec    %eax
f01076b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01076b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01076c1:	f7 75 f0             	divl   -0x10(%ebp)
f01076c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01076c7:	29 d0                	sub    %edx,%eax
f01076c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //5. allocate_chunk for this total memory size, with correct startAddress
	 allocate_chunk(ptr_page_directory, KERNEL_HEAP_START , arr_size , PERM_WRITEABLE | PERM_PRESENT);
f01076cc:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01076d1:	6a 03                	push   $0x3
f01076d3:	ff 75 f4             	pushl  -0xc(%ebp)
f01076d6:	68 00 00 00 f6       	push   $0xf6000000
f01076db:	50                   	push   %eax
f01076dc:	e8 b4 13 00 00       	call   f0108a95 <allocate_chunk>
f01076e1:	83 c4 10             	add    $0x10,%esp
	 //HINT: can use alloc_chunk(...) function
#endif
	//6.Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f01076e4:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f01076e9:	83 ec 0c             	sub    $0xc,%esp
f01076ec:	50                   	push   %eax
f01076ed:	e8 66 a0 02 00       	call   f0131758 <initialize_MemBlocksList>
f01076f2:	83 c4 10             	add    $0x10,%esp
	//7. Take a block from the AvailableMemBlocksList and fill its size with all of the heap size (without size allocated for the array) and think what should the start address be?
	struct MemBlock * NewBlock = LIST_FIRST(&AvailableMemBlocksList);
f01076f5:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01076fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
	NewBlock->sva = KERNEL_HEAP_START + arr_size;
f01076fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107700:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107706:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107709:	89 50 08             	mov    %edx,0x8(%eax)
	NewBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - arr_size;
f010770c:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107711:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0107714:	89 c2                	mov    %eax,%edx
f0107716:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107719:	89 50 0c             	mov    %edx,0xc(%eax)
	LIST_REMOVE(&AvailableMemBlocksList,NewBlock);
f010771c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107720:	75 14                	jne    f0107736 <initialize_dyn_block_system+0xf4>
f0107722:	83 ec 04             	sub    $0x4,%esp
f0107725:	68 57 5c 13 f0       	push   $0xf0135c57
f010772a:	6a 30                	push   $0x30
f010772c:	68 75 5c 13 f0       	push   $0xf0135c75
f0107731:	e8 c5 8a ff ff       	call   f01001fb <_panic>
f0107736:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107739:	8b 00                	mov    (%eax),%eax
f010773b:	85 c0                	test   %eax,%eax
f010773d:	74 10                	je     f010774f <initialize_dyn_block_system+0x10d>
f010773f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107742:	8b 00                	mov    (%eax),%eax
f0107744:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107747:	8b 52 04             	mov    0x4(%edx),%edx
f010774a:	89 50 04             	mov    %edx,0x4(%eax)
f010774d:	eb 0b                	jmp    f010775a <initialize_dyn_block_system+0x118>
f010774f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107752:	8b 40 04             	mov    0x4(%eax),%eax
f0107755:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f010775a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010775d:	8b 40 04             	mov    0x4(%eax),%eax
f0107760:	85 c0                	test   %eax,%eax
f0107762:	74 0f                	je     f0107773 <initialize_dyn_block_system+0x131>
f0107764:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107767:	8b 40 04             	mov    0x4(%eax),%eax
f010776a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010776d:	8b 12                	mov    (%edx),%edx
f010776f:	89 10                	mov    %edx,(%eax)
f0107771:	eb 0a                	jmp    f010777d <initialize_dyn_block_system+0x13b>
f0107773:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107776:	8b 00                	mov    (%eax),%eax
f0107778:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f010777d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107780:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107786:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107789:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107790:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0107795:	48                   	dec    %eax
f0107796:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//8. Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	LIST_INSERT_HEAD(&FreeMemBlocksList, NewBlock);
f010779b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010779f:	75 14                	jne    f01077b5 <initialize_dyn_block_system+0x173>
f01077a1:	83 ec 04             	sub    $0x4,%esp
f01077a4:	68 88 5c 13 f0       	push   $0xf0135c88
f01077a9:	6a 32                	push   $0x32
f01077ab:	68 75 5c 13 f0       	push   $0xf0135c75
f01077b0:	e8 46 8a ff ff       	call   f01001fb <_panic>
f01077b5:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f01077bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077be:	89 10                	mov    %edx,(%eax)
f01077c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077c3:	8b 00                	mov    (%eax),%eax
f01077c5:	85 c0                	test   %eax,%eax
f01077c7:	74 0d                	je     f01077d6 <initialize_dyn_block_system+0x194>
f01077c9:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01077ce:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01077d1:	89 50 04             	mov    %edx,0x4(%eax)
f01077d4:	eb 08                	jmp    f01077de <initialize_dyn_block_system+0x19c>
f01077d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077d9:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01077de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e1:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01077e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01077e9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01077f0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01077f5:	40                   	inc    %eax
f01077f6:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70

}
f01077fb:	90                   	nop
f01077fc:	c9                   	leave  
f01077fd:	c3                   	ret    

f01077fe <kmalloc>:

void* kmalloc(unsigned int size)
{
f01077fe:	55                   	push   %ebp
f01077ff:	89 e5                	mov    %esp,%ebp
f0107801:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
	uint32 allocate_size=ROUNDUP(size,PAGE_SIZE);
f0107804:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010780b:	8b 55 08             	mov    0x8(%ebp),%edx
f010780e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107811:	01 d0                	add    %edx,%eax
f0107813:	48                   	dec    %eax
f0107814:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107817:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010781a:	ba 00 00 00 00       	mov    $0x0,%edx
f010781f:	f7 75 f0             	divl   -0x10(%ebp)
f0107822:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107825:	29 d0                	sub    %edx,%eax
f0107827:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock * mem_block;

	if(isKHeapPlacementStrategyFIRSTFIT())
f010782a:	e8 58 fd ff ff       	call   f0107587 <isKHeapPlacementStrategyFIRSTFIT>
f010782f:	84 c0                	test   %al,%al
f0107831:	74 13                	je     f0107846 <kmalloc+0x48>
		mem_block = alloc_block_FF(allocate_size);
f0107833:	83 ec 0c             	sub    $0xc,%esp
f0107836:	ff 75 e8             	pushl  -0x18(%ebp)
f0107839:	e8 dc a2 02 00       	call   f0131b1a <alloc_block_FF>
f010783e:	83 c4 10             	add    $0x10,%esp
f0107841:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107844:	eb 2d                	jmp    f0107873 <kmalloc+0x75>
	else if (isKHeapPlacementStrategyBESTFIT())
f0107846:	e8 51 fd ff ff       	call   f010759c <isKHeapPlacementStrategyBESTFIT>
f010784b:	84 c0                	test   %al,%al
f010784d:	74 13                	je     f0107862 <kmalloc+0x64>
		mem_block = alloc_block_BF(allocate_size);
f010784f:	83 ec 0c             	sub    $0xc,%esp
f0107852:	ff 75 e8             	pushl  -0x18(%ebp)
f0107855:	e8 8d a4 02 00       	call   f0131ce7 <alloc_block_BF>
f010785a:	83 c4 10             	add    $0x10,%esp
f010785d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107860:	eb 11                	jmp    f0107873 <kmalloc+0x75>
	else
		mem_block = alloc_block_NF(allocate_size);
f0107862:	83 ec 0c             	sub    $0xc,%esp
f0107865:	ff 75 e8             	pushl  -0x18(%ebp)
f0107868:	e8 8b a6 02 00       	call   f0131ef8 <alloc_block_NF>
f010786d:	83 c4 10             	add    $0x10,%esp
f0107870:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (mem_block != NULL )
f0107873:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107877:	74 40                	je     f01078b9 <kmalloc+0xbb>
	{
		int result = allocate_chunk(ptr_page_directory,mem_block->sva,allocate_size,PERM_WRITEABLE| PERM_PRESENT);
f0107879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010787c:	8b 50 08             	mov    0x8(%eax),%edx
f010787f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107884:	6a 03                	push   $0x3
f0107886:	ff 75 e8             	pushl  -0x18(%ebp)
f0107889:	52                   	push   %edx
f010788a:	50                   	push   %eax
f010788b:	e8 05 12 00 00       	call   f0108a95 <allocate_chunk>
f0107890:	83 c4 10             	add    $0x10,%esp
f0107893:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (result == 0)
f0107896:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010789a:	75 16                	jne    f01078b2 <kmalloc+0xb4>
		{
			//LIST_INSERT_HEAD(&AllocMemBlocksList, mem_block);
			insert_sorted_allocList(mem_block);
f010789c:	83 ec 0c             	sub    $0xc,%esp
f010789f:	ff 75 f4             	pushl  -0xc(%ebp)
f01078a2:	e8 e6 9f 02 00       	call   f013188d <insert_sorted_allocList>
f01078a7:	83 c4 10             	add    $0x10,%esp
			return (uint32 *) mem_block->sva;
f01078aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078ad:	8b 40 08             	mov    0x8(%eax),%eax
f01078b0:	eb 0c                	jmp    f01078be <kmalloc+0xc0>
		}
		else
			return 	NULL;
f01078b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01078b7:	eb 05                	jmp    f01078be <kmalloc+0xc0>
	}
	return NULL;
f01078b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01078be:	c9                   	leave  
f01078bf:	c3                   	ret    

f01078c0 <kfree>:
void kfree(void* virtual_address)
{
f01078c0:	55                   	push   %ebp
f01078c1:	89 e5                	mov    %esp,%ebp
f01078c3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	//panic("kfree() is not implemented yet...!!");
	struct MemBlock * mem_block = find_block(&AllocMemBlocksList,(uint32)virtual_address);
f01078c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01078c9:	83 ec 08             	sub    $0x8,%esp
f01078cc:	50                   	push   %eax
f01078cd:	68 c8 7a 65 f0       	push   $0xf0657ac8
f01078d2:	e8 5e 9f 02 00       	call   f0131835 <find_block>
f01078d7:	83 c4 10             	add    $0x10,%esp
f01078da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(mem_block != NULL)
f01078dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e1:	0f 84 fd 00 00 00    	je     f01079e4 <kfree+0x124>
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
f01078e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078eb:	75 14                	jne    f0107901 <kfree+0x41>
f01078ed:	83 ec 04             	sub    $0x4,%esp
f01078f0:	68 57 5c 13 f0       	push   $0xf0135c57
f01078f5:	6a 5b                	push   $0x5b
f01078f7:	68 75 5c 13 f0       	push   $0xf0135c75
f01078fc:	e8 fa 88 ff ff       	call   f01001fb <_panic>
f0107901:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107904:	8b 00                	mov    (%eax),%eax
f0107906:	85 c0                	test   %eax,%eax
f0107908:	74 10                	je     f010791a <kfree+0x5a>
f010790a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010790d:	8b 00                	mov    (%eax),%eax
f010790f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107912:	8b 52 04             	mov    0x4(%edx),%edx
f0107915:	89 50 04             	mov    %edx,0x4(%eax)
f0107918:	eb 0b                	jmp    f0107925 <kfree+0x65>
f010791a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010791d:	8b 40 04             	mov    0x4(%eax),%eax
f0107920:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0107925:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107928:	8b 40 04             	mov    0x4(%eax),%eax
f010792b:	85 c0                	test   %eax,%eax
f010792d:	74 0f                	je     f010793e <kfree+0x7e>
f010792f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107932:	8b 40 04             	mov    0x4(%eax),%eax
f0107935:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107938:	8b 12                	mov    (%edx),%edx
f010793a:	89 10                	mov    %edx,(%eax)
f010793c:	eb 0a                	jmp    f0107948 <kfree+0x88>
f010793e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107941:	8b 00                	mov    (%eax),%eax
f0107943:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0107948:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010794b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107954:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010795b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0107960:	48                   	dec    %eax
f0107961:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
f0107966:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107969:	8b 40 08             	mov    0x8(%eax),%eax
f010796c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010796f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107972:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107977:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);
f010797a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0107981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107984:	8b 50 08             	mov    0x8(%eax),%edx
f0107987:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010798a:	8b 40 0c             	mov    0xc(%eax),%eax
f010798d:	01 c2                	add    %eax,%edx
f010798f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107992:	01 d0                	add    %edx,%eax
f0107994:	48                   	dec    %eax
f0107995:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107998:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010799b:	ba 00 00 00 00       	mov    $0x0,%edx
f01079a0:	f7 75 e4             	divl   -0x1c(%ebp)
f01079a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079a6:	29 d0                	sub    %edx,%eax
f01079a8:	89 45 dc             	mov    %eax,-0x24(%ebp)

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01079b1:	eb 1b                	jmp    f01079ce <kfree+0x10e>
			unmap_frame(ptr_page_directory , i);
f01079b3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01079b8:	83 ec 08             	sub    $0x8,%esp
f01079bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01079be:	50                   	push   %eax
f01079bf:	e8 db f3 ff ff       	call   f0106d9f <unmap_frame>
f01079c4:	83 c4 10             	add    $0x10,%esp
	{
		LIST_REMOVE(&AllocMemBlocksList,mem_block);
		uint32 start = ROUNDDOWN(mem_block->sva,PAGE_SIZE);
		uint32 end = ROUNDUP(mem_block->sva+mem_block->size,PAGE_SIZE);

		for(uint32 i = start ; i < end; i += PAGE_SIZE)
f01079c7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01079ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079d1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01079d4:	72 dd                	jb     f01079b3 <kfree+0xf3>
			unmap_frame(ptr_page_directory , i);

		insert_sorted_with_merge_freeList(mem_block);
f01079d6:	83 ec 0c             	sub    $0xc,%esp
f01079d9:	ff 75 f0             	pushl  -0x10(%ebp)
f01079dc:	e8 e4 aa 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f01079e1:	83 c4 10             	add    $0x10,%esp
	}
}
f01079e4:	90                   	nop
f01079e5:	c9                   	leave  
f01079e6:	c3                   	ret    

f01079e7 <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01079e7:	55                   	push   %ebp
f01079e8:	89 e5                	mov    %esp,%ebp
f01079ea:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *convert_to_va=to_frame_info(physical_address);
f01079ed:	83 ec 0c             	sub    $0xc,%esp
f01079f0:	ff 75 08             	pushl  0x8(%ebp)
f01079f3:	e8 04 fc ff ff       	call   f01075fc <to_frame_info>
f01079f8:	83 c4 10             	add    $0x10,%esp
f01079fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(physical_address!=E_NO_MEM)
f01079fe:	83 7d 08 fc          	cmpl   $0xfffffffc,0x8(%ebp)
f0107a02:	74 08                	je     f0107a0c <kheap_virtual_address+0x25>
		return convert_to_va->va;
f0107a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a07:	8b 40 0c             	mov    0xc(%eax),%eax
f0107a0a:	eb 05                	jmp    f0107a11 <kheap_virtual_address+0x2a>
	else
		return 0;
f0107a0c:	b8 00 00 00 00       	mov    $0x0,%eax
	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107a11:	c9                   	leave  
f0107a12:	c3                   	ret    

f0107a13 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107a13:	55                   	push   %ebp
f0107a14:	89 e5                	mov    %esp,%ebp
f0107a16:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");
	uint32 *ptr_page=NULL;
f0107a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct FrameInfo *frame_of_the_va = get_frame_info(ptr_page_directory,virtual_address,&ptr_page);
f0107a20:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0107a25:	83 ec 04             	sub    $0x4,%esp
f0107a28:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107a2b:	52                   	push   %edx
f0107a2c:	ff 75 08             	pushl  0x8(%ebp)
f0107a2f:	50                   	push   %eax
f0107a30:	e8 fa f2 ff ff       	call   f0106d2f <get_frame_info>
f0107a35:	83 c4 10             	add    $0x10,%esp
f0107a38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 address_physical=to_physical_address(frame_of_the_va);
f0107a3b:	83 ec 0c             	sub    $0xc,%esp
f0107a3e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107a41:	e8 a3 fb ff ff       	call   f01075e9 <to_physical_address>
f0107a46:	83 c4 10             	add    $0x10,%esp
f0107a49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	
	if(frame_of_the_va != NULL)
f0107a4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107a50:	74 05                	je     f0107a57 <kheap_physical_address+0x44>
		return address_physical;
f0107a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a55:	eb 05                	jmp    f0107a5c <kheap_physical_address+0x49>
	return 0;
f0107a57:	b8 00 00 00 00       	mov    $0x0,%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107a5c:	c9                   	leave  
f0107a5d:	c3                   	ret    

f0107a5e <kfreeall>:


void kfreeall()
{
f0107a5e:	55                   	push   %ebp
f0107a5f:	89 e5                	mov    %esp,%ebp
f0107a61:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a64:	83 ec 04             	sub    $0x4,%esp
f0107a67:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107a6c:	68 8a 00 00 00       	push   $0x8a
f0107a71:	68 75 5c 13 f0       	push   $0xf0135c75
f0107a76:	e8 80 87 ff ff       	call   f01001fb <_panic>

f0107a7b <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107a7b:	55                   	push   %ebp
f0107a7c:	89 e5                	mov    %esp,%ebp
f0107a7e:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a81:	83 ec 04             	sub    $0x4,%esp
f0107a84:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107a89:	68 90 00 00 00       	push   $0x90
f0107a8e:	68 75 5c 13 f0       	push   $0xf0135c75
f0107a93:	e8 63 87 ff ff       	call   f01001fb <_panic>

f0107a98 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107a98:	55                   	push   %ebp
f0107a99:	89 e5                	mov    %esp,%ebp
f0107a9b:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107a9e:	83 ec 04             	sub    $0x4,%esp
f0107aa1:	68 ab 5c 13 f0       	push   $0xf0135cab
f0107aa6:	68 95 00 00 00       	push   $0x95
f0107aab:	68 75 5c 13 f0       	push   $0xf0135c75
f0107ab0:	e8 46 87 ff ff       	call   f01001fb <_panic>

f0107ab5 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107ab5:	55                   	push   %ebp
f0107ab6:	89 e5                	mov    %esp,%ebp
f0107ab8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107abb:	83 ec 04             	sub    $0x4,%esp
f0107abe:	68 bc 5c 13 f0       	push   $0xf0135cbc
f0107ac3:	68 ac 00 00 00       	push   $0xac
f0107ac8:	68 75 5c 13 f0       	push   $0xf0135c75
f0107acd:	e8 29 87 ff ff       	call   f01001fb <_panic>

f0107ad2 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107ad2:	55                   	push   %ebp
f0107ad3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ad8:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f0107ade:	29 d0                	sub    %edx,%eax
f0107ae0:	c1 f8 03             	sar    $0x3,%eax
f0107ae3:	89 c2                	mov    %eax,%edx
f0107ae5:	89 d0                	mov    %edx,%eax
f0107ae7:	c1 e0 02             	shl    $0x2,%eax
f0107aea:	01 d0                	add    %edx,%eax
f0107aec:	c1 e0 02             	shl    $0x2,%eax
f0107aef:	01 d0                	add    %edx,%eax
f0107af1:	c1 e0 02             	shl    $0x2,%eax
f0107af4:	01 d0                	add    %edx,%eax
f0107af6:	89 c1                	mov    %eax,%ecx
f0107af8:	c1 e1 08             	shl    $0x8,%ecx
f0107afb:	01 c8                	add    %ecx,%eax
f0107afd:	89 c1                	mov    %eax,%ecx
f0107aff:	c1 e1 10             	shl    $0x10,%ecx
f0107b02:	01 c8                	add    %ecx,%eax
f0107b04:	01 c0                	add    %eax,%eax
f0107b06:	01 d0                	add    %edx,%eax
}
f0107b08:	5d                   	pop    %ebp
f0107b09:	c3                   	ret    

f0107b0a <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107b0a:	55                   	push   %ebp
f0107b0b:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107b0d:	ff 75 08             	pushl  0x8(%ebp)
f0107b10:	e8 bd ff ff ff       	call   f0107ad2 <to_frame_number>
f0107b15:	83 c4 04             	add    $0x4,%esp
f0107b18:	c1 e0 0c             	shl    $0xc,%eax
}
f0107b1b:	c9                   	leave  
f0107b1c:	c3                   	ret    

f0107b1d <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107b1d:	55                   	push   %ebp
f0107b1e:	89 e5                	mov    %esp,%ebp
f0107b20:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107b23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107b2a:	83 ec 04             	sub    $0x4,%esp
f0107b2d:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107b30:	50                   	push   %eax
f0107b31:	ff 75 0c             	pushl  0xc(%ebp)
f0107b34:	ff 75 08             	pushl  0x8(%ebp)
f0107b37:	e8 9e ee ff ff       	call   f01069da <get_page_table>
f0107b3c:	83 c4 10             	add    $0x10,%esp

	if (page_table_point!=NULL)
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	85 c0                	test   %eax,%eax
f0107b44:	74 75                	je     f0107bbb <pt_set_page_permissions+0x9e>
	{
		page_table_point[PTX(virtual_address)] &= ~(permissions_to_clear);
f0107b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b4c:	c1 ea 0c             	shr    $0xc,%edx
f0107b4f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b55:	c1 e2 02             	shl    $0x2,%edx
f0107b58:	01 d0                	add    %edx,%eax
f0107b5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b60:	c1 e9 0c             	shr    $0xc,%ecx
f0107b63:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b69:	c1 e1 02             	shl    $0x2,%ecx
f0107b6c:	01 ca                	add    %ecx,%edx
f0107b6e:	8b 12                	mov    (%edx),%edx
f0107b70:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107b73:	f7 d1                	not    %ecx
f0107b75:	21 ca                	and    %ecx,%edx
f0107b77:	89 10                	mov    %edx,(%eax)
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
f0107b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b7c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107b7f:	c1 ea 0c             	shr    $0xc,%edx
f0107b82:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107b88:	c1 e2 02             	shl    $0x2,%edx
f0107b8b:	01 c2                	add    %eax,%edx
f0107b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b90:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107b93:	c1 e9 0c             	shr    $0xc,%ecx
f0107b96:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107b9c:	c1 e1 02             	shl    $0x2,%ecx
f0107b9f:	01 c8                	add    %ecx,%eax
f0107ba1:	8b 00                	mov    (%eax),%eax
f0107ba3:	0b 45 10             	or     0x10(%ebp),%eax
f0107ba6:	89 02                	mov    %eax,(%edx)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107bab:	83 ec 08             	sub    $0x8,%esp
f0107bae:	50                   	push   %eax
f0107baf:	6a 00                	push   $0x0
f0107bb1:	e8 81 e8 ff ff       	call   f0106437 <tlb_invalidate>
f0107bb6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107bb9:	eb 14                	jmp    f0107bcf <pt_set_page_permissions+0xb2>
		page_table_point[PTX(virtual_address)] |= permissions_to_set;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107bbb:	83 ec 04             	sub    $0x4,%esp
f0107bbe:	68 e3 5c 13 f0       	push   $0xf0135ce3
f0107bc3:	6a 19                	push   $0x19
f0107bc5:	68 00 5d 13 f0       	push   $0xf0135d00
f0107bca:	e8 2c 86 ff ff       	call   f01001fb <_panic>
	}
}
f0107bcf:	c9                   	leave  
f0107bd0:	c3                   	ret    

f0107bd1 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107bd1:	55                   	push   %ebp
f0107bd2:	89 e5                	mov    %esp,%ebp
f0107bd4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code

	uint32* page_table_point=NULL;
f0107bd7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 entry_of_page_table;
	uint32 Permissions_of_entry;
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107bde:	83 ec 04             	sub    $0x4,%esp
f0107be1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107be4:	50                   	push   %eax
f0107be5:	ff 75 0c             	pushl  0xc(%ebp)
f0107be8:	ff 75 08             	pushl  0x8(%ebp)
f0107beb:	e8 ea ed ff ff       	call   f01069da <get_page_table>
f0107bf0:	83 c4 10             	add    $0x10,%esp
	if(page_table_point!=NULL)
f0107bf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bf6:	85 c0                	test   %eax,%eax
f0107bf8:	74 2b                	je     f0107c25 <pt_get_page_permissions+0x54>
	{
		entry_of_page_table=page_table_point[PTX(virtual_address)];
f0107bfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107bfd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c00:	c1 ea 0c             	shr    $0xc,%edx
f0107c03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c09:	c1 e2 02             	shl    $0x2,%edx
f0107c0c:	01 d0                	add    %edx,%eax
f0107c0e:	8b 00                	mov    (%eax),%eax
f0107c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
		Permissions_of_entry=entry_of_page_table&=0x00000FFF;
f0107c13:	81 65 f4 ff 0f 00 00 	andl   $0xfff,-0xc(%ebp)
f0107c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c1d:	89 45 f0             	mov    %eax,-0x10(%ebp)


		return Permissions_of_entry;
f0107c20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107c23:	eb 05                	jmp    f0107c2a <pt_get_page_permissions+0x59>
	}

	else
	{
		return -1;
f0107c25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107c2a:	c9                   	leave  
f0107c2b:	c3                   	ret    

f0107c2c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107c2c:	55                   	push   %ebp
f0107c2d:	89 e5                	mov    %esp,%ebp
f0107c2f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107c39:	83 ec 04             	sub    $0x4,%esp
f0107c3c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107c3f:	50                   	push   %eax
f0107c40:	ff 75 0c             	pushl  0xc(%ebp)
f0107c43:	ff 75 08             	pushl  0x8(%ebp)
f0107c46:	e8 8f ed ff ff       	call   f01069da <get_page_table>
f0107c4b:	83 c4 10             	add    $0x10,%esp
	if (page_table_point!=NULL)
f0107c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c51:	85 c0                	test   %eax,%eax
f0107c53:	74 2d                	je     f0107c82 <pt_clear_page_table_entry+0x56>
	{
		page_table_point[PTX(virtual_address)] = 0;
f0107c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c58:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107c5b:	c1 ea 0c             	shr    $0xc,%edx
f0107c5e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107c64:	c1 e2 02             	shl    $0x2,%edx
f0107c67:	01 d0                	add    %edx,%eax
f0107c69:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107c72:	83 ec 08             	sub    $0x8,%esp
f0107c75:	50                   	push   %eax
f0107c76:	6a 00                	push   $0x0
f0107c78:	e8 ba e7 ff ff       	call   f0106437 <tlb_invalidate>
f0107c7d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Page Table doesn't exist...!");
	}
}
f0107c80:	eb 14                	jmp    f0107c96 <pt_clear_page_table_entry+0x6a>
		page_table_point[PTX(virtual_address)] = 0;
		tlb_invalidate((void *)NULL, (void *)virtual_address);
	}
	else
	{
		panic("Page Table doesn't exist...!");
f0107c82:	83 ec 04             	sub    $0x4,%esp
f0107c85:	68 e3 5c 13 f0       	push   $0xf0135ce3
f0107c8a:	6a 42                	push   $0x42
f0107c8c:	68 00 5d 13 f0       	push   $0xf0135d00
f0107c91:	e8 65 85 ff ff       	call   f01001fb <_panic>
	}
}
f0107c96:	c9                   	leave  
f0107c97:	c3                   	ret    

f0107c98 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107c98:	55                   	push   %ebp
f0107c99:	89 e5                	mov    %esp,%ebp
f0107c9b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	uint32* page_table_point=NULL;
f0107c9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	get_page_table(page_directory,virtual_address,&page_table_point);
f0107ca5:	83 ec 04             	sub    $0x4,%esp
f0107ca8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cab:	50                   	push   %eax
f0107cac:	ff 75 0c             	pushl  0xc(%ebp)
f0107caf:	ff 75 08             	pushl  0x8(%ebp)
f0107cb2:	e8 23 ed ff ff       	call   f01069da <get_page_table>
f0107cb7:	83 c4 10             	add    $0x10,%esp

	if(page_table_point != NULL)
f0107cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107cbd:	85 c0                	test   %eax,%eax
f0107cbf:	74 28                	je     f0107ce9 <virtual_to_physical+0x51>
	{
		struct FrameInfo * frame_info = get_frame_info(page_directory,virtual_address,&page_table_point);
f0107cc1:	83 ec 04             	sub    $0x4,%esp
f0107cc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0107cc7:	50                   	push   %eax
f0107cc8:	ff 75 0c             	pushl  0xc(%ebp)
f0107ccb:	ff 75 08             	pushl  0x8(%ebp)
f0107cce:	e8 5c f0 ff ff       	call   f0106d2f <get_frame_info>
f0107cd3:	83 c4 10             	add    $0x10,%esp
f0107cd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return to_physical_address(frame_info);
f0107cd9:	83 ec 0c             	sub    $0xc,%esp
f0107cdc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cdf:	e8 26 fe ff ff       	call   f0107b0a <to_physical_address>
f0107ce4:	83 c4 10             	add    $0x10,%esp
f0107ce7:	eb 05                	jmp    f0107cee <virtual_to_physical+0x56>
	}
	return -1;
f0107ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107cee:	c9                   	leave  
f0107cef:	c3                   	ret    

f0107cf0 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107cf0:	55                   	push   %ebp
f0107cf1:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107cf6:	c1 e8 16             	shr    $0x16,%eax
f0107cf9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d00:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d03:	01 d0                	add    %edx,%eax
f0107d05:	8b 00                	mov    (%eax),%eax
f0107d07:	83 e0 20             	and    $0x20,%eax
f0107d0a:	85 c0                	test   %eax,%eax
f0107d0c:	0f 95 c0             	setne  %al
f0107d0f:	0f b6 c0             	movzbl %al,%eax
}
f0107d12:	5d                   	pop    %ebp
f0107d13:	c3                   	ret    

f0107d14 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107d14:	55                   	push   %ebp
f0107d15:	89 e5                	mov    %esp,%ebp
f0107d17:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d1d:	c1 e8 16             	shr    $0x16,%eax
f0107d20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d2a:	01 d0                	add    %edx,%eax
f0107d2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107d2f:	c1 ea 16             	shr    $0x16,%edx
f0107d32:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107d39:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d3c:	01 ca                	add    %ecx,%edx
f0107d3e:	8b 12                	mov    (%edx),%edx
f0107d40:	83 e2 df             	and    $0xffffffdf,%edx
f0107d43:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107d45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d48:	83 ec 08             	sub    $0x8,%esp
f0107d4b:	50                   	push   %eax
f0107d4c:	6a 00                	push   $0x0
f0107d4e:	e8 e4 e6 ff ff       	call   f0106437 <tlb_invalidate>
f0107d53:	83 c4 10             	add    $0x10,%esp
}
f0107d56:	90                   	nop
f0107d57:	c9                   	leave  
f0107d58:	c3                   	ret    

f0107d59 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107d59:	55                   	push   %ebp
f0107d5a:	89 e5                	mov    %esp,%ebp
f0107d5c:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107d62:	c1 e8 16             	shr    $0x16,%eax
f0107d65:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d6f:	01 d0                	add    %edx,%eax
f0107d71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107d77:	0f 20 d8             	mov    %cr3,%eax
f0107d7a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107d7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107d80:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107d83:	90                   	nop
f0107d84:	c9                   	leave  
f0107d85:	c3                   	ret    

f0107d86 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107d86:	55                   	push   %ebp
f0107d87:	89 e5                	mov    %esp,%ebp
f0107d89:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107d8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107d93:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107d9a:	eb 21                	jmp    f0107dbd <env_page_ws_get_size+0x37>
f0107d9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107da2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107da5:	89 d0                	mov    %edx,%eax
f0107da7:	01 c0                	add    %eax,%eax
f0107da9:	01 d0                	add    %edx,%eax
f0107dab:	c1 e0 03             	shl    $0x3,%eax
f0107dae:	01 c8                	add    %ecx,%eax
f0107db0:	8a 40 04             	mov    0x4(%eax),%al
f0107db3:	84 c0                	test   %al,%al
f0107db5:	75 03                	jne    f0107dba <env_page_ws_get_size+0x34>
f0107db7:	ff 45 f8             	incl   -0x8(%ebp)
f0107dba:	ff 45 fc             	incl   -0x4(%ebp)
f0107dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc0:	8b 50 74             	mov    0x74(%eax),%edx
f0107dc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107dc6:	39 c2                	cmp    %eax,%edx
f0107dc8:	77 d2                	ja     f0107d9c <env_page_ws_get_size+0x16>
	return counter;
f0107dca:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107dcd:	c9                   	leave  
f0107dce:	c3                   	ret    

f0107dcf <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107dcf:	55                   	push   %ebp
f0107dd0:	89 e5                	mov    %esp,%ebp
f0107dd2:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107dd5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107ddc:	eb 4c                	jmp    f0107e2a <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0107dde:	8b 45 08             	mov    0x8(%ebp),%eax
f0107de1:	8b 48 78             	mov    0x78(%eax),%ecx
f0107de4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107de7:	89 d0                	mov    %edx,%eax
f0107de9:	01 c0                	add    %eax,%eax
f0107deb:	01 d0                	add    %edx,%eax
f0107ded:	c1 e0 03             	shl    $0x3,%eax
f0107df0:	01 c8                	add    %ecx,%eax
f0107df2:	8b 00                	mov    (%eax),%eax
f0107df4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107dfa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107dff:	89 c2                	mov    %eax,%edx
f0107e01:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e04:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e0f:	39 c2                	cmp    %eax,%edx
f0107e11:	75 14                	jne    f0107e27 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0107e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e16:	83 ec 08             	sub    $0x8,%esp
f0107e19:	50                   	push   %eax
f0107e1a:	ff 75 08             	pushl  0x8(%ebp)
f0107e1d:	e8 b9 00 00 00       	call   f0107edb <env_page_ws_clear_entry>
f0107e22:	83 c4 10             	add    $0x10,%esp
			break;
f0107e25:	eb 10                	jmp    f0107e37 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0107e27:	ff 45 f4             	incl   -0xc(%ebp)
f0107e2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e2d:	8b 50 74             	mov    0x74(%eax),%edx
f0107e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e33:	39 c2                	cmp    %eax,%edx
f0107e35:	77 a7                	ja     f0107dde <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107e37:	90                   	nop
f0107e38:	c9                   	leave  
f0107e39:	c3                   	ret    

f0107e3a <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107e3a:	55                   	push   %ebp
f0107e3b:	89 e5                	mov    %esp,%ebp
f0107e3d:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0107e40:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e43:	8b 40 74             	mov    0x74(%eax),%eax
f0107e46:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107e49:	77 16                	ja     f0107e61 <env_page_ws_set_entry+0x27>
f0107e4b:	68 1c 5d 13 f0       	push   $0xf0135d1c
f0107e50:	68 52 5d 13 f0       	push   $0xf0135d52
f0107e55:	6a 26                	push   $0x26
f0107e57:	68 68 5d 13 f0       	push   $0xf0135d68
f0107e5c:	e8 9a 83 ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107e61:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107e68:	76 16                	jbe    f0107e80 <env_page_ws_set_entry+0x46>
f0107e6a:	68 88 5d 13 f0       	push   $0xf0135d88
f0107e6f:	68 52 5d 13 f0       	push   $0xf0135d52
f0107e74:	6a 27                	push   $0x27
f0107e76:	68 68 5d 13 f0       	push   $0xf0135d68
f0107e7b:	e8 7b 83 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0107e80:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e83:	8b 48 78             	mov    0x78(%eax),%ecx
f0107e86:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e89:	89 d0                	mov    %edx,%eax
f0107e8b:	01 c0                	add    %eax,%eax
f0107e8d:	01 d0                	add    %edx,%eax
f0107e8f:	c1 e0 03             	shl    $0x3,%eax
f0107e92:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107e95:	8b 45 10             	mov    0x10(%ebp),%eax
f0107e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ea3:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107ea5:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ea8:	8b 48 78             	mov    0x78(%eax),%ecx
f0107eab:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107eae:	89 d0                	mov    %edx,%eax
f0107eb0:	01 c0                	add    %eax,%eax
f0107eb2:	01 d0                	add    %edx,%eax
f0107eb4:	c1 e0 03             	shl    $0x3,%eax
f0107eb7:	01 c8                	add    %ecx,%eax
f0107eb9:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0107ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ec0:	8b 48 78             	mov    0x78(%eax),%ecx
f0107ec3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ec6:	89 d0                	mov    %edx,%eax
f0107ec8:	01 c0                	add    %eax,%eax
f0107eca:	01 d0                	add    %edx,%eax
f0107ecc:	c1 e0 03             	shl    $0x3,%eax
f0107ecf:	01 c8                	add    %ecx,%eax
f0107ed1:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107ed8:	90                   	nop
}
f0107ed9:	c9                   	leave  
f0107eda:	c3                   	ret    

f0107edb <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107edb:	55                   	push   %ebp
f0107edc:	89 e5                	mov    %esp,%ebp
f0107ede:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ee4:	8b 40 74             	mov    0x74(%eax),%eax
f0107ee7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107eea:	77 16                	ja     f0107f02 <env_page_ws_clear_entry+0x27>
f0107eec:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107ef1:	68 52 5d 13 f0       	push   $0xf0135d52
f0107ef6:	6a 32                	push   $0x32
f0107ef8:	68 68 5d 13 f0       	push   $0xf0135d68
f0107efd:	e8 f9 82 ff ff       	call   f01001fb <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0107f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f05:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f08:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f0b:	89 d0                	mov    %edx,%eax
f0107f0d:	01 c0                	add    %eax,%eax
f0107f0f:	01 d0                	add    %edx,%eax
f0107f11:	c1 e0 03             	shl    $0x3,%eax
f0107f14:	01 c8                	add    %ecx,%eax
f0107f16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0107f1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f1f:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f22:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f25:	89 d0                	mov    %edx,%eax
f0107f27:	01 c0                	add    %eax,%eax
f0107f29:	01 d0                	add    %edx,%eax
f0107f2b:	c1 e0 03             	shl    $0x3,%eax
f0107f2e:	01 c8                	add    %ecx,%eax
f0107f30:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0107f34:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f37:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3d:	89 d0                	mov    %edx,%eax
f0107f3f:	01 c0                	add    %eax,%eax
f0107f41:	01 d0                	add    %edx,%eax
f0107f43:	c1 e0 03             	shl    $0x3,%eax
f0107f46:	01 c8                	add    %ecx,%eax
f0107f48:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f0107f4f:	90                   	nop
f0107f50:	c9                   	leave  
f0107f51:	c3                   	ret    

f0107f52 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107f52:	55                   	push   %ebp
f0107f53:	89 e5                	mov    %esp,%ebp
f0107f55:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f5b:	8b 40 74             	mov    0x74(%eax),%eax
f0107f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107f61:	77 16                	ja     f0107f79 <env_page_ws_get_virtual_address+0x27>
f0107f63:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107f68:	68 52 5d 13 f0       	push   $0xf0135d52
f0107f6d:	6a 3a                	push   $0x3a
f0107f6f:	68 68 5d 13 f0       	push   $0xf0135d68
f0107f74:	e8 82 82 ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107f79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0107f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f82:	89 d0                	mov    %edx,%eax
f0107f84:	01 c0                	add    %eax,%eax
f0107f86:	01 d0                	add    %edx,%eax
f0107f88:	c1 e0 03             	shl    $0x3,%eax
f0107f8b:	01 c8                	add    %ecx,%eax
f0107f8d:	8b 00                	mov    (%eax),%eax
f0107f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107f92:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107f9a:	c9                   	leave  
f0107f9b:	c3                   	ret    

f0107f9c <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107f9c:	55                   	push   %ebp
f0107f9d:	89 e5                	mov    %esp,%ebp
f0107f9f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fa5:	8b 40 74             	mov    0x74(%eax),%eax
f0107fa8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107fab:	77 16                	ja     f0107fc3 <env_page_ws_get_time_stamp+0x27>
f0107fad:	68 bc 5d 13 f0       	push   $0xf0135dbc
f0107fb2:	68 52 5d 13 f0       	push   $0xf0135d52
f0107fb7:	6a 40                	push   $0x40
f0107fb9:	68 68 5d 13 f0       	push   $0xf0135d68
f0107fbe:	e8 38 82 ff ff       	call   f01001fb <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107fc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc6:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fc9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fcc:	89 d0                	mov    %edx,%eax
f0107fce:	01 c0                	add    %eax,%eax
f0107fd0:	01 d0                	add    %edx,%eax
f0107fd2:	c1 e0 03             	shl    $0x3,%eax
f0107fd5:	01 c8                	add    %ecx,%eax
f0107fd7:	8b 40 08             	mov    0x8(%eax),%eax
}
f0107fda:	c9                   	leave  
f0107fdb:	c3                   	ret    

f0107fdc <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107fdc:	55                   	push   %ebp
f0107fdd:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0107fdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fe2:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fe8:	89 d0                	mov    %edx,%eax
f0107fea:	01 c0                	add    %eax,%eax
f0107fec:	01 d0                	add    %edx,%eax
f0107fee:	c1 e0 03             	shl    $0x3,%eax
f0107ff1:	01 c8                	add    %ecx,%eax
f0107ff3:	8a 40 04             	mov    0x4(%eax),%al
f0107ff6:	0f b6 c0             	movzbl %al,%eax
}
f0107ff9:	5d                   	pop    %ebp
f0107ffa:	c3                   	ret    

f0107ffb <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	53                   	push   %ebx
f0107fff:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108002:	83 ec 0c             	sub    $0xc,%esp
f0108005:	6a 02                	push   $0x2
f0108007:	e8 59 5a 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f010800c:	83 c4 10             	add    $0x10,%esp
f010800f:	85 c0                	test   %eax,%eax
f0108011:	0f 84 fe 00 00 00    	je     f0108115 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108017:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010801e:	83 ec 0c             	sub    $0xc,%esp
f0108021:	68 f4 5d 13 f0       	push   $0xf0135df4
f0108026:	e8 57 8c ff ff       	call   f0100c82 <cprintf>
f010802b:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010802e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108031:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108037:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010803a:	eb 2c                	jmp    f0108068 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010803c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010803f:	8b 10                	mov    (%eax),%edx
f0108041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108044:	8d 48 01             	lea    0x1(%eax),%ecx
f0108047:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f010804a:	83 ec 04             	sub    $0x4,%esp
f010804d:	52                   	push   %edx
f010804e:	50                   	push   %eax
f010804f:	68 0e 5e 13 f0       	push   $0xf0135e0e
f0108054:	e8 29 8c ff ff       	call   f0100c82 <cprintf>
f0108059:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010805c:	8b 45 08             	mov    0x8(%ebp),%eax
f010805f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108065:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108068:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010806c:	74 08                	je     f0108076 <env_page_ws_print+0x7b>
f010806e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108071:	8b 40 10             	mov    0x10(%eax),%eax
f0108074:	eb 05                	jmp    f010807b <env_page_ws_print+0x80>
f0108076:	b8 00 00 00 00       	mov    $0x0,%eax
f010807b:	8b 55 08             	mov    0x8(%ebp),%edx
f010807e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f0108084:	8b 45 08             	mov    0x8(%ebp),%eax
f0108087:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010808d:	85 c0                	test   %eax,%eax
f010808f:	75 ab                	jne    f010803c <env_page_ws_print+0x41>
f0108091:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108095:	75 a5                	jne    f010803c <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108097:	83 ec 0c             	sub    $0xc,%esp
f010809a:	68 16 5e 13 f0       	push   $0xf0135e16
f010809f:	e8 de 8b ff ff       	call   f0100c82 <cprintf>
f01080a4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01080aa:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01080b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080b3:	eb 2c                	jmp    f01080e1 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01080b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080b8:	8b 10                	mov    (%eax),%edx
f01080ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080bd:	8d 48 01             	lea    0x1(%eax),%ecx
f01080c0:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01080c3:	83 ec 04             	sub    $0x4,%esp
f01080c6:	52                   	push   %edx
f01080c7:	50                   	push   %eax
f01080c8:	68 0e 5e 13 f0       	push   $0xf0135e0e
f01080cd:	e8 b0 8b ff ff       	call   f0100c82 <cprintf>
f01080d2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01080d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01080d8:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01080de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01080e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01080e5:	74 08                	je     f01080ef <env_page_ws_print+0xf4>
f01080e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080ea:	8b 40 10             	mov    0x10(%eax),%eax
f01080ed:	eb 05                	jmp    f01080f4 <env_page_ws_print+0xf9>
f01080ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01080f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01080f7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f01080fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108100:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108106:	85 c0                	test   %eax,%eax
f0108108:	75 ab                	jne    f01080b5 <env_page_ws_print+0xba>
f010810a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010810e:	75 a5                	jne    f01080b5 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108110:	e9 95 01 00 00       	jmp    f01082aa <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108115:	83 ec 0c             	sub    $0xc,%esp
f0108118:	68 31 5e 13 f0       	push   $0xf0135e31
f010811d:	e8 60 8b ff ff       	call   f0100c82 <cprintf>
f0108122:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108125:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010812c:	e9 6a 01 00 00       	jmp    f010829b <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108131:	8b 45 08             	mov    0x8(%ebp),%eax
f0108134:	8b 48 78             	mov    0x78(%eax),%ecx
f0108137:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010813a:	89 d0                	mov    %edx,%eax
f010813c:	01 c0                	add    %eax,%eax
f010813e:	01 d0                	add    %edx,%eax
f0108140:	c1 e0 03             	shl    $0x3,%eax
f0108143:	01 c8                	add    %ecx,%eax
f0108145:	8a 40 04             	mov    0x4(%eax),%al
f0108148:	84 c0                	test   %al,%al
f010814a:	74 43                	je     f010818f <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010814c:	83 ec 0c             	sub    $0xc,%esp
f010814f:	68 3b 5e 13 f0       	push   $0xf0135e3b
f0108154:	e8 29 8b ff ff       	call   f0100c82 <cprintf>
f0108159:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010815c:	8b 45 08             	mov    0x8(%ebp),%eax
f010815f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108165:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108168:	75 10                	jne    f010817a <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f010816a:	83 ec 0c             	sub    $0xc,%esp
f010816d:	68 4a 5e 13 f0       	push   $0xf0135e4a
f0108172:	e8 0b 8b ff ff       	call   f0100c82 <cprintf>
f0108177:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f010817a:	83 ec 0c             	sub    $0xc,%esp
f010817d:	68 50 5e 13 f0       	push   $0xf0135e50
f0108182:	e8 fb 8a ff ff       	call   f0100c82 <cprintf>
f0108187:	83 c4 10             	add    $0x10,%esp
				continue;
f010818a:	e9 09 01 00 00       	jmp    f0108298 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010818f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108192:	8b 48 78             	mov    0x78(%eax),%ecx
f0108195:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108198:	89 d0                	mov    %edx,%eax
f010819a:	01 c0                	add    %eax,%eax
f010819c:	01 d0                	add    %edx,%eax
f010819e:	c1 e0 03             	shl    $0x3,%eax
f01081a1:	01 c8                	add    %ecx,%eax
f01081a3:	8b 00                	mov    (%eax),%eax
f01081a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01081a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ab:	8b 48 78             	mov    0x78(%eax),%ecx
f01081ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081b1:	89 d0                	mov    %edx,%eax
f01081b3:	01 c0                	add    %eax,%eax
f01081b5:	01 d0                	add    %edx,%eax
f01081b7:	c1 e0 03             	shl    $0x3,%eax
f01081ba:	01 c8                	add    %ecx,%eax
f01081bc:	8b 40 08             	mov    0x8(%eax),%eax
f01081bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01081c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01081c5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01081c8:	83 ec 08             	sub    $0x8,%esp
f01081cb:	ff 75 e8             	pushl  -0x18(%ebp)
f01081ce:	50                   	push   %eax
f01081cf:	e8 fd f9 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01081d4:	83 c4 10             	add    $0x10,%esp
f01081d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01081da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081dd:	83 e0 40             	and    $0x40,%eax
f01081e0:	85 c0                	test   %eax,%eax
f01081e2:	0f 95 c0             	setne  %al
f01081e5:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01081e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081eb:	83 e0 20             	and    $0x20,%eax
f01081ee:	85 c0                	test   %eax,%eax
f01081f0:	0f 95 c0             	setne  %al
f01081f3:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01081f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01081f9:	25 00 02 00 00       	and    $0x200,%eax
f01081fe:	85 c0                	test   %eax,%eax
f0108200:	0f 95 c0             	setne  %al
f0108203:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108206:	8b 45 08             	mov    0x8(%ebp),%eax
f0108209:	8b 48 78             	mov    0x78(%eax),%ecx
f010820c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010820f:	89 d0                	mov    %edx,%eax
f0108211:	01 c0                	add    %eax,%eax
f0108213:	01 d0                	add    %edx,%eax
f0108215:	c1 e0 03             	shl    $0x3,%eax
f0108218:	01 c8                	add    %ecx,%eax
f010821a:	8b 00                	mov    (%eax),%eax
f010821c:	83 ec 04             	sub    $0x4,%esp
f010821f:	50                   	push   %eax
f0108220:	ff 75 ec             	pushl  -0x14(%ebp)
f0108223:	68 52 5e 13 f0       	push   $0xf0135e52
f0108228:	e8 55 8a ff ff       	call   f0100c82 <cprintf>
f010822d:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108230:	8b 45 08             	mov    0x8(%ebp),%eax
f0108233:	8b 48 78             	mov    0x78(%eax),%ecx
f0108236:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108239:	89 d0                	mov    %edx,%eax
f010823b:	01 c0                	add    %eax,%eax
f010823d:	01 d0                	add    %edx,%eax
f010823f:	c1 e0 03             	shl    $0x3,%eax
f0108242:	01 c8                	add    %ecx,%eax
f0108244:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108247:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010824b:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010824f:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108253:	83 ec 08             	sub    $0x8,%esp
f0108256:	53                   	push   %ebx
f0108257:	ff 75 e4             	pushl  -0x1c(%ebp)
f010825a:	51                   	push   %ecx
f010825b:	52                   	push   %edx
f010825c:	50                   	push   %eax
f010825d:	68 64 5e 13 f0       	push   $0xf0135e64
f0108262:	e8 1b 8a ff ff       	call   f0100c82 <cprintf>
f0108267:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010826a:	8b 45 08             	mov    0x8(%ebp),%eax
f010826d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108273:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108276:	75 10                	jne    f0108288 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108278:	83 ec 0c             	sub    $0xc,%esp
f010827b:	68 ab 5e 13 f0       	push   $0xf0135eab
f0108280:	e8 fd 89 ff ff       	call   f0100c82 <cprintf>
f0108285:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108288:	83 ec 0c             	sub    $0xc,%esp
f010828b:	68 50 5e 13 f0       	push   $0xf0135e50
f0108290:	e8 ed 89 ff ff       	call   f0100c82 <cprintf>
f0108295:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108298:	ff 45 ec             	incl   -0x14(%ebp)
f010829b:	8b 45 08             	mov    0x8(%ebp),%eax
f010829e:	8b 40 74             	mov    0x74(%eax),%eax
f01082a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01082a4:	0f 87 87 fe ff ff    	ja     f0108131 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01082aa:	90                   	nop
f01082ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01082ae:	c9                   	leave  
f01082af:	c3                   	ret    

f01082b0 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01082b0:	55                   	push   %ebp
f01082b1:	89 e5                	mov    %esp,%ebp
f01082b3:	53                   	push   %ebx
f01082b4:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01082b7:	83 ec 0c             	sub    $0xc,%esp
f01082ba:	68 b0 5e 13 f0       	push   $0xf0135eb0
f01082bf:	e8 be 89 ff ff       	call   f0100c82 <cprintf>
f01082c4:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01082c7:	83 ec 0c             	sub    $0xc,%esp
f01082ca:	68 e5 5e 13 f0       	push   $0xf0135ee5
f01082cf:	e8 ae 89 ff ff       	call   f0100c82 <cprintf>
f01082d4:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01082d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01082de:	e9 10 01 00 00       	jmp    f01083f3 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f01082e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082e9:	89 d0                	mov    %edx,%eax
f01082eb:	01 c0                	add    %eax,%eax
f01082ed:	01 d0                	add    %edx,%eax
f01082ef:	c1 e0 03             	shl    $0x3,%eax
f01082f2:	01 c8                	add    %ecx,%eax
f01082f4:	83 e8 80             	sub    $0xffffff80,%eax
f01082f7:	8a 00                	mov    (%eax),%al
f01082f9:	84 c0                	test   %al,%al
f01082fb:	74 43                	je     f0108340 <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f01082fd:	83 ec 0c             	sub    $0xc,%esp
f0108300:	68 3b 5e 13 f0       	push   $0xf0135e3b
f0108305:	e8 78 89 ff ff       	call   f0100c82 <cprintf>
f010830a:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010830d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108310:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108316:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108319:	75 10                	jne    f010832b <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f010831b:	83 ec 0c             	sub    $0xc,%esp
f010831e:	68 4a 5e 13 f0       	push   $0xf0135e4a
f0108323:	e8 5a 89 ff ff       	call   f0100c82 <cprintf>
f0108328:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010832b:	83 ec 0c             	sub    $0xc,%esp
f010832e:	68 50 5e 13 f0       	push   $0xf0135e50
f0108333:	e8 4a 89 ff ff       	call   f0100c82 <cprintf>
f0108338:	83 c4 10             	add    $0x10,%esp
			continue;
f010833b:	e9 b0 00 00 00       	jmp    f01083f0 <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108340:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108343:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108346:	89 d0                	mov    %edx,%eax
f0108348:	01 c0                	add    %eax,%eax
f010834a:	01 d0                	add    %edx,%eax
f010834c:	c1 e0 03             	shl    $0x3,%eax
f010834f:	01 c8                	add    %ecx,%eax
f0108351:	83 c0 7c             	add    $0x7c,%eax
f0108354:	8b 00                	mov    (%eax),%eax
f0108356:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010835c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010835f:	89 d0                	mov    %edx,%eax
f0108361:	01 c0                	add    %eax,%eax
f0108363:	01 d0                	add    %edx,%eax
f0108365:	c1 e0 03             	shl    $0x3,%eax
f0108368:	01 c8                	add    %ecx,%eax
f010836a:	83 c0 7c             	add    $0x7c,%eax
f010836d:	8b 00                	mov    (%eax),%eax
f010836f:	83 ec 04             	sub    $0x4,%esp
f0108372:	50                   	push   %eax
f0108373:	ff 75 f4             	pushl  -0xc(%ebp)
f0108376:	68 f0 5e 13 f0       	push   $0xf0135ef0
f010837b:	e8 02 89 ff ff       	call   f0100c82 <cprintf>
f0108380:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108383:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108386:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108389:	89 d0                	mov    %edx,%eax
f010838b:	01 c0                	add    %eax,%eax
f010838d:	01 d0                	add    %edx,%eax
f010838f:	c1 e0 03             	shl    $0x3,%eax
f0108392:	01 c8                	add    %ecx,%eax
f0108394:	05 84 00 00 00       	add    $0x84,%eax
f0108399:	8b 18                	mov    (%eax),%ebx
f010839b:	8b 45 08             	mov    0x8(%ebp),%eax
f010839e:	8b 40 5c             	mov    0x5c(%eax),%eax
f01083a1:	83 ec 08             	sub    $0x8,%esp
f01083a4:	ff 75 f0             	pushl  -0x10(%ebp)
f01083a7:	50                   	push   %eax
f01083a8:	e8 43 f9 ff ff       	call   f0107cf0 <pd_is_table_used>
f01083ad:	83 c4 10             	add    $0x10,%esp
f01083b0:	83 ec 04             	sub    $0x4,%esp
f01083b3:	53                   	push   %ebx
f01083b4:	50                   	push   %eax
f01083b5:	68 08 5f 13 f0       	push   $0xf0135f08
f01083ba:	e8 c3 88 ff ff       	call   f0100c82 <cprintf>
f01083bf:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01083c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c5:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01083cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01083ce:	75 10                	jne    f01083e0 <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01083d0:	83 ec 0c             	sub    $0xc,%esp
f01083d3:	68 ab 5e 13 f0       	push   $0xf0135eab
f01083d8:	e8 a5 88 ff ff       	call   f0100c82 <cprintf>
f01083dd:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01083e0:	83 ec 0c             	sub    $0xc,%esp
f01083e3:	68 50 5e 13 f0       	push   $0xf0135e50
f01083e8:	e8 95 88 ff ff       	call   f0100c82 <cprintf>
f01083ed:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01083f0:	ff 45 f4             	incl   -0xc(%ebp)
f01083f3:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01083f7:	0f 86 e6 fe ff ff    	jbe    f01082e3 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01083fd:	90                   	nop
f01083fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108401:	c9                   	leave  
f0108402:	c3                   	ret    

f0108403 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108403:	55                   	push   %ebp
f0108404:	89 e5                	mov    %esp,%ebp
f0108406:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108409:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108410:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108417:	eb 20                	jmp    f0108439 <env_table_ws_get_size+0x36>
f0108419:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010841c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010841f:	89 d0                	mov    %edx,%eax
f0108421:	01 c0                	add    %eax,%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	c1 e0 03             	shl    $0x3,%eax
f0108428:	01 c8                	add    %ecx,%eax
f010842a:	83 e8 80             	sub    $0xffffff80,%eax
f010842d:	8a 00                	mov    (%eax),%al
f010842f:	84 c0                	test   %al,%al
f0108431:	75 03                	jne    f0108436 <env_table_ws_get_size+0x33>
f0108433:	ff 45 f8             	incl   -0x8(%ebp)
f0108436:	ff 45 fc             	incl   -0x4(%ebp)
f0108439:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010843d:	7e da                	jle    f0108419 <env_table_ws_get_size+0x16>
	return counter;
f010843f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108442:	c9                   	leave  
f0108443:	c3                   	ret    

f0108444 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108444:	55                   	push   %ebp
f0108445:	89 e5                	mov    %esp,%ebp
f0108447:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010844a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108451:	eb 4c                	jmp    f010849f <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108453:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108456:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108459:	89 d0                	mov    %edx,%eax
f010845b:	01 c0                	add    %eax,%eax
f010845d:	01 d0                	add    %edx,%eax
f010845f:	c1 e0 03             	shl    $0x3,%eax
f0108462:	01 c8                	add    %ecx,%eax
f0108464:	83 c0 7c             	add    $0x7c,%eax
f0108467:	8b 00                	mov    (%eax),%eax
f0108469:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010846c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108474:	89 c2                	mov    %eax,%edx
f0108476:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108479:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010847c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010847f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108484:	39 c2                	cmp    %eax,%edx
f0108486:	75 14                	jne    f010849c <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	83 ec 08             	sub    $0x8,%esp
f010848e:	50                   	push   %eax
f010848f:	ff 75 08             	pushl  0x8(%ebp)
f0108492:	e8 b8 00 00 00       	call   f010854f <env_table_ws_clear_entry>
f0108497:	83 c4 10             	add    $0x10,%esp
			break;
f010849a:	eb 09                	jmp    f01084a5 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f010849c:	ff 45 f4             	incl   -0xc(%ebp)
f010849f:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01084a3:	7e ae                	jle    f0108453 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01084a5:	90                   	nop
f01084a6:	c9                   	leave  
f01084a7:	c3                   	ret    

f01084a8 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01084a8:	55                   	push   %ebp
f01084a9:	89 e5                	mov    %esp,%ebp
f01084ab:	53                   	push   %ebx
f01084ac:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01084af:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01084b3:	76 19                	jbe    f01084ce <env_table_ws_set_entry+0x26>
f01084b5:	68 2c 5f 13 f0       	push   $0xf0135f2c
f01084ba:	68 52 5d 13 f0       	push   $0xf0135d52
f01084bf:	68 b6 00 00 00       	push   $0xb6
f01084c4:	68 68 5d 13 f0       	push   $0xf0135d68
f01084c9:	e8 2d 7d ff ff       	call   f01001fb <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01084ce:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01084d5:	76 19                	jbe    f01084f0 <env_table_ws_set_entry+0x48>
f01084d7:	68 88 5d 13 f0       	push   $0xf0135d88
f01084dc:	68 52 5d 13 f0       	push   $0xf0135d52
f01084e1:	68 b7 00 00 00       	push   $0xb7
f01084e6:	68 68 5d 13 f0       	push   $0xf0135d68
f01084eb:	e8 0b 7d ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01084f0:	8b 45 10             	mov    0x10(%ebp),%eax
f01084f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084f9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01084fe:	89 c1                	mov    %eax,%ecx
f0108500:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108503:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108506:	89 d0                	mov    %edx,%eax
f0108508:	01 c0                	add    %eax,%eax
f010850a:	01 d0                	add    %edx,%eax
f010850c:	c1 e0 03             	shl    $0x3,%eax
f010850f:	01 d8                	add    %ebx,%eax
f0108511:	83 c0 7c             	add    $0x7c,%eax
f0108514:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108516:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108519:	8b 55 0c             	mov    0xc(%ebp),%edx
f010851c:	89 d0                	mov    %edx,%eax
f010851e:	01 c0                	add    %eax,%eax
f0108520:	01 d0                	add    %edx,%eax
f0108522:	c1 e0 03             	shl    $0x3,%eax
f0108525:	01 c8                	add    %ecx,%eax
f0108527:	83 e8 80             	sub    $0xffffff80,%eax
f010852a:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010852d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108530:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108533:	89 d0                	mov    %edx,%eax
f0108535:	01 c0                	add    %eax,%eax
f0108537:	01 d0                	add    %edx,%eax
f0108539:	c1 e0 03             	shl    $0x3,%eax
f010853c:	01 c8                	add    %ecx,%eax
f010853e:	05 84 00 00 00       	add    $0x84,%eax
f0108543:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108549:	90                   	nop
}
f010854a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010854d:	c9                   	leave  
f010854e:	c3                   	ret    

f010854f <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010854f:	55                   	push   %ebp
f0108550:	89 e5                	mov    %esp,%ebp
f0108552:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108555:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108559:	76 19                	jbe    f0108574 <env_table_ws_clear_entry+0x25>
f010855b:	68 2c 5f 13 f0       	push   $0xf0135f2c
f0108560:	68 52 5d 13 f0       	push   $0xf0135d52
f0108565:	68 c2 00 00 00       	push   $0xc2
f010856a:	68 68 5d 13 f0       	push   $0xf0135d68
f010856f:	e8 87 7c ff ff       	call   f01001fb <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108574:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108577:	8b 55 0c             	mov    0xc(%ebp),%edx
f010857a:	89 d0                	mov    %edx,%eax
f010857c:	01 c0                	add    %eax,%eax
f010857e:	01 d0                	add    %edx,%eax
f0108580:	c1 e0 03             	shl    $0x3,%eax
f0108583:	01 c8                	add    %ecx,%eax
f0108585:	83 c0 7c             	add    $0x7c,%eax
f0108588:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f010858e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108591:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108594:	89 d0                	mov    %edx,%eax
f0108596:	01 c0                	add    %eax,%eax
f0108598:	01 d0                	add    %edx,%eax
f010859a:	c1 e0 03             	shl    $0x3,%eax
f010859d:	01 c8                	add    %ecx,%eax
f010859f:	83 e8 80             	sub    $0xffffff80,%eax
f01085a2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01085a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ab:	89 d0                	mov    %edx,%eax
f01085ad:	01 c0                	add    %eax,%eax
f01085af:	01 d0                	add    %edx,%eax
f01085b1:	c1 e0 03             	shl    $0x3,%eax
f01085b4:	01 c8                	add    %ecx,%eax
f01085b6:	05 84 00 00 00       	add    $0x84,%eax
f01085bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01085c1:	90                   	nop
f01085c2:	c9                   	leave  
f01085c3:	c3                   	ret    

f01085c4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01085c4:	55                   	push   %ebp
f01085c5:	89 e5                	mov    %esp,%ebp
f01085c7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01085ca:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01085ce:	76 19                	jbe    f01085e9 <env_table_ws_get_virtual_address+0x25>
f01085d0:	68 2c 5f 13 f0       	push   $0xf0135f2c
f01085d5:	68 52 5d 13 f0       	push   $0xf0135d52
f01085da:	68 ca 00 00 00       	push   $0xca
f01085df:	68 68 5d 13 f0       	push   $0xf0135d68
f01085e4:	e8 12 7c ff ff       	call   f01001fb <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01085e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085ec:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ef:	89 d0                	mov    %edx,%eax
f01085f1:	01 c0                	add    %eax,%eax
f01085f3:	01 d0                	add    %edx,%eax
f01085f5:	c1 e0 03             	shl    $0x3,%eax
f01085f8:	01 c8                	add    %ecx,%eax
f01085fa:	83 c0 7c             	add    $0x7c,%eax
f01085fd:	8b 00                	mov    (%eax),%eax
f01085ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108605:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f010860a:	c9                   	leave  
f010860b:	c3                   	ret    

f010860c <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010860c:	55                   	push   %ebp
f010860d:	89 e5                	mov    %esp,%ebp
f010860f:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108612:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108616:	76 19                	jbe    f0108631 <env_table_ws_get_time_stamp+0x25>
f0108618:	68 2c 5f 13 f0       	push   $0xf0135f2c
f010861d:	68 52 5d 13 f0       	push   $0xf0135d52
f0108622:	68 d1 00 00 00       	push   $0xd1
f0108627:	68 68 5d 13 f0       	push   $0xf0135d68
f010862c:	e8 ca 7b ff ff       	call   f01001fb <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108631:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108634:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108637:	89 d0                	mov    %edx,%eax
f0108639:	01 c0                	add    %eax,%eax
f010863b:	01 d0                	add    %edx,%eax
f010863d:	c1 e0 03             	shl    $0x3,%eax
f0108640:	01 c8                	add    %ecx,%eax
f0108642:	05 84 00 00 00       	add    $0x84,%eax
f0108647:	8b 00                	mov    (%eax),%eax
}
f0108649:	c9                   	leave  
f010864a:	c3                   	ret    

f010864b <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010864b:	55                   	push   %ebp
f010864c:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010864e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108651:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108654:	89 d0                	mov    %edx,%eax
f0108656:	01 c0                	add    %eax,%eax
f0108658:	01 d0                	add    %edx,%eax
f010865a:	c1 e0 03             	shl    $0x3,%eax
f010865d:	01 c8                	add    %ecx,%eax
f010865f:	83 e8 80             	sub    $0xffffff80,%eax
f0108662:	8a 00                	mov    (%eax),%al
f0108664:	0f b6 c0             	movzbl %al,%eax
}
f0108667:	5d                   	pop    %ebp
f0108668:	c3                   	ret    

f0108669 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108669:	55                   	push   %ebp
f010866a:	89 e5                	mov    %esp,%ebp
f010866c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f010866f:	83 ec 04             	sub    $0x4,%esp
f0108672:	68 60 5f 13 f0       	push   $0xf0135f60
f0108677:	68 e5 00 00 00       	push   $0xe5
f010867c:	68 68 5d 13 f0       	push   $0xf0135d68
f0108681:	e8 75 7b ff ff       	call   f01001fb <_panic>

f0108686 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108686:	55                   	push   %ebp
f0108687:	89 e5                	mov    %esp,%ebp
f0108689:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010868c:	83 ec 04             	sub    $0x4,%esp
f010868f:	68 8c 5f 13 f0       	push   $0xf0135f8c
f0108694:	68 ec 00 00 00       	push   $0xec
f0108699:	68 68 5d 13 f0       	push   $0xf0135d68
f010869e:	e8 58 7b ff ff       	call   f01001fb <_panic>

f01086a3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01086a3:	55                   	push   %ebp
f01086a4:	89 e5                	mov    %esp,%ebp
f01086a6:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01086a9:	83 ec 04             	sub    $0x4,%esp
f01086ac:	68 bc 5f 13 f0       	push   $0xf0135fbc
f01086b1:	68 f3 00 00 00       	push   $0xf3
f01086b6:	68 68 5d 13 f0       	push   $0xf0135d68
f01086bb:	e8 3b 7b ff ff       	call   f01001fb <_panic>

f01086c0 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01086c0:	55                   	push   %ebp
f01086c1:	89 e5                	mov    %esp,%ebp
f01086c3:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	uint32 new_dest_va = dest_va;
f01086c6:	8b 45 10             	mov    0x10(%ebp),%eax
f01086c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 new_source_va = source_va;
f01086cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086cf:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(dest_va%PAGE_SIZE!=0)
f01086d2:	8b 45 10             	mov    0x10(%ebp),%eax
f01086d5:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086da:	85 c0                	test   %eax,%eax
f01086dc:	74 11                	je     f01086ef <cut_paste_pages+0x2f>
		new_dest_va = ROUNDDOWN(dest_va,PAGE_SIZE);
f01086de:	8b 45 10             	mov    0x10(%ebp),%eax
f01086e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01086e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01086e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01086ec:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(source_va%PAGE_SIZE!=0)
f01086ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f2:	25 ff 0f 00 00       	and    $0xfff,%eax
f01086f7:	85 c0                	test   %eax,%eax
f01086f9:	74 11                	je     f010870c <cut_paste_pages+0x4c>
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
f01086fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108701:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108704:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108709:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;
f010870c:	8b 45 14             	mov    0x14(%ebp),%eax
f010870f:	c1 e0 0c             	shl    $0xc,%eax
f0108712:	89 c2                	mov    %eax,%edx
f0108714:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108717:	01 d0                	add    %edx,%eax
f0108719:	89 45 dc             	mov    %eax,-0x24(%ebp)

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f010871c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010871f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108722:	eb 4b                	jmp    f010876f <cut_paste_pages+0xaf>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108724:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f010872b:	83 ec 04             	sub    $0x4,%esp
f010872e:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108731:	50                   	push   %eax
f0108732:	ff 75 ec             	pushl  -0x14(%ebp)
f0108735:	ff 75 08             	pushl  0x8(%ebp)
f0108738:	e8 9d e2 ff ff       	call   f01069da <get_page_table>
f010873d:	83 c4 10             	add    $0x10,%esp
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108740:	83 ec 04             	sub    $0x4,%esp
f0108743:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108746:	50                   	push   %eax
f0108747:	ff 75 ec             	pushl  -0x14(%ebp)
f010874a:	ff 75 08             	pushl  0x8(%ebp)
f010874d:	e8 dd e5 ff ff       	call   f0106d2f <get_frame_info>
f0108752:	83 c4 10             	add    $0x10,%esp
f0108755:	89 45 d8             	mov    %eax,-0x28(%ebp)

		if(dest_frame!=NULL)
f0108758:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010875c:	74 0a                	je     f0108768 <cut_paste_pages+0xa8>
			return -1;
f010875e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108763:	e9 d4 00 00 00       	jmp    f010883c <cut_paste_pages+0x17c>

	if(source_va%PAGE_SIZE!=0)
		new_source_va = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 max_size = (PAGE_SIZE * num_of_pages) + new_dest_va;

	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108768:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010876f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108772:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108775:	72 ad                	jb     f0108724 <cut_paste_pages+0x64>
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108777:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010877a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010877d:	e9 a9 00 00 00       	jmp    f010882b <cut_paste_pages+0x16b>
	{
		uint32 *ptr_page_table_dest = NULL;
f0108782:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		get_page_table(page_directory,i,&ptr_page_table_dest);
f0108789:	83 ec 04             	sub    $0x4,%esp
f010878c:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010878f:	50                   	push   %eax
f0108790:	ff 75 e8             	pushl  -0x18(%ebp)
f0108793:	ff 75 08             	pushl  0x8(%ebp)
f0108796:	e8 3f e2 ff ff       	call   f01069da <get_page_table>
f010879b:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table_dest == NULL)
f010879e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01087a1:	85 c0                	test   %eax,%eax
f01087a3:	75 14                	jne    f01087b9 <cut_paste_pages+0xf9>
			ptr_page_table_dest = create_page_table(page_directory,i);
f01087a5:	83 ec 08             	sub    $0x8,%esp
f01087a8:	ff 75 e8             	pushl  -0x18(%ebp)
f01087ab:	ff 75 08             	pushl  0x8(%ebp)
f01087ae:	e8 7d e3 ff ff       	call   f0106b30 <create_page_table>
f01087b3:	83 c4 10             	add    $0x10,%esp
f01087b6:	89 45 c8             	mov    %eax,-0x38(%ebp)

		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);
f01087b9:	83 ec 04             	sub    $0x4,%esp
f01087bc:	8d 45 c8             	lea    -0x38(%ebp),%eax
f01087bf:	50                   	push   %eax
f01087c0:	ff 75 e8             	pushl  -0x18(%ebp)
f01087c3:	ff 75 08             	pushl  0x8(%ebp)
f01087c6:	e8 64 e5 ff ff       	call   f0106d2f <get_frame_info>
f01087cb:	83 c4 10             	add    $0x10,%esp
f01087ce:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		int source_perm = pt_get_page_permissions(page_directory,new_source_va);
f01087d1:	83 ec 08             	sub    $0x8,%esp
f01087d4:	ff 75 f0             	pushl  -0x10(%ebp)
f01087d7:	ff 75 08             	pushl  0x8(%ebp)
f01087da:	e8 f2 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01087df:	83 c4 10             	add    $0x10,%esp
f01087e2:	89 45 d4             	mov    %eax,-0x2c(%ebp)

		unmap_frame(page_directory,new_source_va);
f01087e5:	83 ec 08             	sub    $0x8,%esp
f01087e8:	ff 75 f0             	pushl  -0x10(%ebp)
f01087eb:	ff 75 08             	pushl  0x8(%ebp)
f01087ee:	e8 ac e5 ff ff       	call   f0106d9f <unmap_frame>
f01087f3:	83 c4 10             	add    $0x10,%esp
		uint32 ret = allocate_frame(&dest_frame);
f01087f6:	83 ec 0c             	sub    $0xc,%esp
f01087f9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f01087fc:	50                   	push   %eax
f01087fd:	e8 19 e0 ff ff       	call   f010681b <allocate_frame>
f0108802:	83 c4 10             	add    $0x10,%esp
f0108805:	89 45 d0             	mov    %eax,-0x30(%ebp)
		map_frame(page_directory, dest_frame, i,source_perm);
f0108808:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010880b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010880e:	ff 75 e8             	pushl  -0x18(%ebp)
f0108811:	50                   	push   %eax
f0108812:	ff 75 08             	pushl  0x8(%ebp)
f0108815:	e8 50 e4 ff ff       	call   f0106c6a <map_frame>
f010881a:	83 c4 10             	add    $0x10,%esp

		new_source_va += PAGE_SIZE;
f010881d:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
		struct FrameInfo *dest_frame = get_frame_info(page_directory,i,&ptr_page_table_dest);

		if(dest_frame!=NULL)
			return -1;
	}
	for(uint32 i = new_dest_va; i < max_size; i += PAGE_SIZE)
f0108824:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f010882b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010882e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0108831:	0f 82 4b ff ff ff    	jb     f0108782 <cut_paste_pages+0xc2>
		uint32 ret = allocate_frame(&dest_frame);
		map_frame(page_directory, dest_frame, i,source_perm);

		new_source_va += PAGE_SIZE;
	}
	return 0;
f0108837:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010883c:	c9                   	leave  
f010883d:	c3                   	ret    

f010883e <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010883e:	55                   	push   %ebp
f010883f:	89 e5                	mov    %esp,%ebp
f0108841:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
f0108844:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 new_dest_va = dest_va;
f010884b:	8b 45 10             	mov    0x10(%ebp),%eax
f010884e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 new_source_va = source_va;
f0108851:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108854:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f0108857:	8b 45 10             	mov    0x10(%ebp),%eax
f010885a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010885d:	e9 d1 00 00 00       	jmp    f0108933 <copy_paste_chunk+0xf5>
	{
	   get_page_table(page_directory,i,&page_table);
f0108862:	83 ec 04             	sub    $0x4,%esp
f0108865:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108868:	50                   	push   %eax
f0108869:	ff 75 f0             	pushl  -0x10(%ebp)
f010886c:	ff 75 08             	pushl  0x8(%ebp)
f010886f:	e8 66 e1 ff ff       	call   f01069da <get_page_table>
f0108874:	83 c4 10             	add    $0x10,%esp
	   if(page_table==NULL)
f0108877:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010887a:	85 c0                	test   %eax,%eax
f010887c:	75 14                	jne    f0108892 <copy_paste_chunk+0x54>
		   page_table=create_page_table(page_directory,i);
f010887e:	83 ec 08             	sub    $0x8,%esp
f0108881:	ff 75 f0             	pushl  -0x10(%ebp)
f0108884:	ff 75 08             	pushl  0x8(%ebp)
f0108887:	e8 a4 e2 ff ff       	call   f0106b30 <create_page_table>
f010888c:	83 c4 10             	add    $0x10,%esp
f010888f:	89 45 d0             	mov    %eax,-0x30(%ebp)

	   struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108892:	83 ec 04             	sub    $0x4,%esp
f0108895:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108898:	50                   	push   %eax
f0108899:	ff 75 f0             	pushl  -0x10(%ebp)
f010889c:	ff 75 08             	pushl  0x8(%ebp)
f010889f:	e8 8b e4 ff ff       	call   f0106d2f <get_frame_info>
f01088a4:	83 c4 10             	add    $0x10,%esp
f01088a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	   uint32 perm =pt_get_page_permissions(page_directory,i);
f01088aa:	83 ec 08             	sub    $0x8,%esp
f01088ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01088b0:	ff 75 08             	pushl  0x8(%ebp)
f01088b3:	e8 19 f3 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088b8:	83 c4 10             	add    $0x10,%esp
f01088bb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	   if((frame_info != NULL) && (( perm & PERM_WRITEABLE) !=PERM_WRITEABLE))
f01088be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088c1:	85 c0                	test   %eax,%eax
f01088c3:	74 14                	je     f01088d9 <copy_paste_chunk+0x9b>
f01088c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01088c8:	83 e0 02             	and    $0x2,%eax
f01088cb:	85 c0                	test   %eax,%eax
f01088cd:	75 0a                	jne    f01088d9 <copy_paste_chunk+0x9b>
			return -1;
f01088cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01088d4:	e9 a7 00 00 00       	jmp    f0108980 <copy_paste_chunk+0x142>
	   else
	   {
		   if(frame_info == NULL)
f01088d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088dc:	85 c0                	test   %eax,%eax
f01088de:	75 45                	jne    f0108925 <copy_paste_chunk+0xe7>
		   {
			   uint32 perms =pt_get_page_permissions(page_directory,new_source_va);
f01088e0:	83 ec 08             	sub    $0x8,%esp
f01088e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01088e6:	ff 75 08             	pushl  0x8(%ebp)
f01088e9:	e8 e3 f2 ff ff       	call   f0107bd1 <pt_get_page_permissions>
f01088ee:	83 c4 10             	add    $0x10,%esp
f01088f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
			   uint32 user_perm = (perms & PERM_USER)|PERM_WRITEABLE;
f01088f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01088f7:	83 e0 04             	and    $0x4,%eax
f01088fa:	83 c8 02             	or     $0x2,%eax
f01088fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			   allocate_frame(&frame_info);
f0108900:	83 ec 0c             	sub    $0xc,%esp
f0108903:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108906:	50                   	push   %eax
f0108907:	e8 0f df ff ff       	call   f010681b <allocate_frame>
f010890c:	83 c4 10             	add    $0x10,%esp
			   map_frame(page_directory,frame_info,i,user_perm);
f010890f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108912:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108915:	52                   	push   %edx
f0108916:	ff 75 f0             	pushl  -0x10(%ebp)
f0108919:	50                   	push   %eax
f010891a:	ff 75 08             	pushl  0x8(%ebp)
f010891d:	e8 48 e3 ff ff       	call   f0106c6a <map_frame>
f0108922:	83 c4 10             	add    $0x10,%esp
		   }
	   }
	   new_source_va += PAGE_SIZE;
f0108925:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");
	uint32 *page_table=NULL;
	uint32 new_dest_va = dest_va;
	uint32 new_source_va = source_va;
	for(uint32 i=dest_va;i<dest_va+size ;i+=PAGE_SIZE)
f010892c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108933:	8b 55 10             	mov    0x10(%ebp),%edx
f0108936:	8b 45 14             	mov    0x14(%ebp),%eax
f0108939:	01 d0                	add    %edx,%eax
f010893b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010893e:	0f 87 1e ff ff ff    	ja     f0108862 <copy_paste_chunk+0x24>
			   map_frame(page_directory,frame_info,i,user_perm);
		   }
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
f0108944:	8b 45 10             	mov    0x10(%ebp),%eax
f0108947:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 *page = (uint32*)source_va;
f010894a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010894d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f0108950:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108953:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108956:	eb 16                	jmp    f010896e <copy_paste_chunk+0x130>
    {
	    *frame= *page;
f0108958:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010895b:	8b 10                	mov    (%eax),%edx
f010895d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108960:	89 10                	mov    %edx,(%eax)
	    frame++;
f0108962:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
	    page++;
f0108966:	83 45 e8 04          	addl   $0x4,-0x18(%ebp)
	   }
	   new_source_va += PAGE_SIZE;
	}
	uint32 *frame = (uint32*)dest_va;
    uint32 *page = (uint32*)source_va;
    for (uint32 i = source_va; i < source_va+size ;i+=4)
f010896a:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
f010896e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108971:	8b 45 14             	mov    0x14(%ebp),%eax
f0108974:	01 d0                	add    %edx,%eax
f0108976:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108979:	77 dd                	ja     f0108958 <copy_paste_chunk+0x11a>
    {
	    *frame= *page;
	    frame++;
	    page++;
    }
	return 0;
f010897b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108980:	c9                   	leave  
f0108981:	c3                   	ret    

f0108982 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108982:	55                   	push   %ebp
f0108983:	89 e5                	mov    %esp,%ebp
f0108985:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	uint32 *page_table=NULL;
f0108988:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
f010898f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108992:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108995:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108998:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010899d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);
f01089a0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01089a7:	8b 55 10             	mov    0x10(%ebp),%edx
f01089aa:	8b 45 14             	mov    0x14(%ebp),%eax
f01089ad:	01 c2                	add    %eax,%edx
f01089af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01089b2:	01 d0                	add    %edx,%eax
f01089b4:	48                   	dec    %eax
f01089b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01089b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01089c0:	f7 75 e8             	divl   -0x18(%ebp)
f01089c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01089c6:	29 d0                	sub    %edx,%eax
f01089c8:	89 45 e0             	mov    %eax,-0x20(%ebp)



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f01089cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01089ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01089d1:	e9 ac 00 00 00       	jmp    f0108a82 <share_chunk+0x100>
    {
        get_page_table(page_directory,i,&page_table);
f01089d6:	83 ec 04             	sub    $0x4,%esp
f01089d9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01089dc:	50                   	push   %eax
f01089dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01089e0:	ff 75 08             	pushl  0x8(%ebp)
f01089e3:	e8 f2 df ff ff       	call   f01069da <get_page_table>
f01089e8:	83 c4 10             	add    $0x10,%esp
        if(page_table==NULL)
f01089eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01089ee:	85 c0                	test   %eax,%eax
f01089f0:	75 14                	jne    f0108a06 <share_chunk+0x84>
           page_table=create_page_table(page_directory,i);
f01089f2:	83 ec 08             	sub    $0x8,%esp
f01089f5:	ff 75 f4             	pushl  -0xc(%ebp)
f01089f8:	ff 75 08             	pushl  0x8(%ebp)
f01089fb:	e8 30 e1 ff ff       	call   f0106b30 <create_page_table>
f0108a00:	83 c4 10             	add    $0x10,%esp
f0108a03:	89 45 d4             	mov    %eax,-0x2c(%ebp)



      struct FrameInfo *frame_info=get_frame_info(page_directory,i,&page_table);
f0108a06:	83 ec 04             	sub    $0x4,%esp
f0108a09:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108a0c:	50                   	push   %eax
f0108a0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a10:	ff 75 08             	pushl  0x8(%ebp)
f0108a13:	e8 17 e3 ff ff       	call   f0106d2f <get_frame_info>
f0108a18:	83 c4 10             	add    $0x10,%esp
f0108a1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
       if (frame_info != NULL)
f0108a1e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108a22:	74 07                	je     f0108a2b <share_chunk+0xa9>
           return -1;
f0108a24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108a29:	eb 68                	jmp    f0108a93 <share_chunk+0x111>



       uint32 *page_table_source = NULL;
f0108a2b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
        get_page_table(page_directory,source_va,&page_table_source);
f0108a32:	83 ec 04             	sub    $0x4,%esp
f0108a35:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a38:	50                   	push   %eax
f0108a39:	ff 75 0c             	pushl  0xc(%ebp)
f0108a3c:	ff 75 08             	pushl  0x8(%ebp)
f0108a3f:	e8 96 df ff ff       	call   f01069da <get_page_table>
f0108a44:	83 c4 10             	add    $0x10,%esp
        struct FrameInfo *page_info=get_frame_info(page_directory,source_va,&page_table_source);
f0108a47:	83 ec 04             	sub    $0x4,%esp
f0108a4a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108a4d:	50                   	push   %eax
f0108a4e:	ff 75 0c             	pushl  0xc(%ebp)
f0108a51:	ff 75 08             	pushl  0x8(%ebp)
f0108a54:	e8 d6 e2 ff ff       	call   f0106d2f <get_frame_info>
f0108a59:	83 c4 10             	add    $0x10,%esp
f0108a5c:	89 45 d8             	mov    %eax,-0x28(%ebp)



       map_frame(page_directory,page_info,i,perms);
f0108a5f:	8b 45 18             	mov    0x18(%ebp),%eax
f0108a62:	50                   	push   %eax
f0108a63:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a66:	ff 75 d8             	pushl  -0x28(%ebp)
f0108a69:	ff 75 08             	pushl  0x8(%ebp)
f0108a6c:	e8 f9 e1 ff ff       	call   f0106c6a <map_frame>
f0108a71:	83 c4 10             	add    $0x10,%esp



       source_va += PAGE_SIZE;
f0108a74:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    uint32 va_dest=ROUNDDOWN(dest_va,PAGE_SIZE);
    uint32 max_va_des=ROUNDUP(dest_va+size,PAGE_SIZE);



   for(uint32 i=va_dest;i<max_va_des ;i+=PAGE_SIZE)
f0108a7b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a85:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0108a88:	0f 82 48 ff ff ff    	jb     f01089d6 <share_chunk+0x54>



       source_va += PAGE_SIZE;
    }
    return 0;
f0108a8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a93:	c9                   	leave  
f0108a94:	c3                   	ret    

f0108a95 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108a95:	55                   	push   %ebp
f0108a96:	89 e5                	mov    %esp,%ebp
f0108a98:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	uint32 virtual_address=0;
f0108a9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 range_page=va+size;
f0108aa2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108aa5:	8b 45 10             	mov    0x10(%ebp),%eax
f0108aa8:	01 d0                	add    %edx,%eax
f0108aaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 virtual_range=0;
f0108aad:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	struct FrameInfo *sb_chunck= NULL ;
f0108ab4:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *page_table_point=NULL;
f0108abb:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
    uint32 result=0;
f0108ac2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
f0108ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108acc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108acf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108ad2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
f0108ada:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108ae1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ae4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108ae7:	01 d0                	add    %edx,%eax
f0108ae9:	48                   	dec    %eax
f0108aea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108aed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108af0:	ba 00 00 00 00       	mov    $0x0,%edx
f0108af5:	f7 75 dc             	divl   -0x24(%ebp)
f0108af8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108afb:	29 d0                	sub    %edx,%eax
f0108afd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b06:	e9 94 00 00 00       	jmp    f0108b9f <allocate_chunk+0x10a>
	{
		new_virtual_address=count;
f0108b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		get_page_table(page_directory,new_virtual_address,&page_table_point);
f0108b11:	83 ec 04             	sub    $0x4,%esp
f0108b14:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b17:	50                   	push   %eax
f0108b18:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b1b:	ff 75 08             	pushl  0x8(%ebp)
f0108b1e:	e8 b7 de ff ff       	call   f01069da <get_page_table>
f0108b23:	83 c4 10             	add    $0x10,%esp
		if(page_table_point==NULL)
f0108b26:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108b29:	85 c0                	test   %eax,%eax
f0108b2b:	75 14                	jne    f0108b41 <allocate_chunk+0xac>
		{
		   page_table_point=create_page_table(page_directory,new_virtual_address);
f0108b2d:	83 ec 08             	sub    $0x8,%esp
f0108b30:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b33:	ff 75 08             	pushl  0x8(%ebp)
f0108b36:	e8 f5 df ff ff       	call   f0106b30 <create_page_table>
f0108b3b:	83 c4 10             	add    $0x10,%esp
f0108b3e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		}
	    sb_chunck=get_frame_info(page_directory,new_virtual_address,&page_table_point);
f0108b41:	83 ec 04             	sub    $0x4,%esp
f0108b44:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108b47:	50                   	push   %eax
f0108b48:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b4b:	ff 75 08             	pushl  0x8(%ebp)
f0108b4e:	e8 dc e1 ff ff       	call   f0106d2f <get_frame_info>
f0108b53:	83 c4 10             	add    $0x10,%esp
f0108b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(sb_chunck!=NULL)
f0108b59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b5c:	85 c0                	test   %eax,%eax
f0108b5e:	74 07                	je     f0108b67 <allocate_chunk+0xd2>
		{
			return -1;
f0108b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108b65:	eb 49                	jmp    f0108bb0 <allocate_chunk+0x11b>
		}
	    result= allocate_frame(&sb_chunck);
f0108b67:	83 ec 0c             	sub    $0xc,%esp
f0108b6a:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108b6d:	50                   	push   %eax
f0108b6e:	e8 a8 dc ff ff       	call   f010681b <allocate_frame>
f0108b73:	83 c4 10             	add    $0x10,%esp
f0108b76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(result != E_NO_MEM)
f0108b79:	83 7d e4 fc          	cmpl   $0xfffffffc,-0x1c(%ebp)
f0108b7d:	74 19                	je     f0108b98 <allocate_chunk+0x103>
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
f0108b7f:	8b 55 14             	mov    0x14(%ebp),%edx
f0108b82:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b85:	52                   	push   %edx
f0108b86:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108b89:	50                   	push   %eax
f0108b8a:	ff 75 08             	pushl  0x8(%ebp)
f0108b8d:	e8 d8 e0 ff ff       	call   f0106c6a <map_frame>
f0108b92:	83 c4 10             	add    $0x10,%esp
f0108b95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    uint32 result=0;

	virtual_address=ROUNDDOWN(va,PAGE_SIZE);
	virtual_range=ROUNDUP(range_page,PAGE_SIZE);
	uint32 new_virtual_address;
	for(uint32 count=virtual_address;count<virtual_range;count+=PAGE_SIZE)
f0108b98:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108ba2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0108ba5:	0f 82 60 ff ff ff    	jb     f0108b0b <allocate_chunk+0x76>
		if(result != E_NO_MEM)
		{
			result=map_frame(page_directory,sb_chunck,new_virtual_address,perms);
		}
	}
	return 0;
f0108bab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108bb0:	c9                   	leave  
f0108bb1:	c3                   	ret    

f0108bb2 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bb2:	55                   	push   %ebp
f0108bb3:	89 e5                	mov    %esp,%ebp
f0108bb5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bb8:	83 ec 04             	sub    $0x4,%esp
f0108bbb:	68 e8 5f 13 f0       	push   $0xf0135fe8
f0108bc0:	68 d1 00 00 00       	push   $0xd1
f0108bc5:	68 20 60 13 f0       	push   $0xf0136020
f0108bca:	e8 2c 76 ff ff       	call   f01001fb <_panic>

f0108bcf <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108bcf:	55                   	push   %ebp
f0108bd0:	89 e5                	mov    %esp,%ebp
f0108bd2:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0108bd5:	83 ec 04             	sub    $0x4,%esp
f0108bd8:	68 3c 60 13 f0       	push   $0xf013603c
f0108bdd:	68 e0 00 00 00       	push   $0xe0
f0108be2:	68 20 60 13 f0       	push   $0xf0136020
f0108be7:	e8 0f 76 ff ff       	call   f01001fb <_panic>

f0108bec <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108bec:	55                   	push   %ebp
f0108bed:	89 e5                	mov    %esp,%ebp
f0108bef:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f0108bf2:	83 ec 04             	sub    $0x4,%esp
f0108bf5:	68 74 60 13 f0       	push   $0xf0136074
f0108bfa:	68 f5 00 00 00       	push   $0xf5
f0108bff:	68 20 60 13 f0       	push   $0xf0136020
f0108c04:	e8 f2 75 ff ff       	call   f01001fb <_panic>

f0108c09 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c09:	55                   	push   %ebp
f0108c0a:	89 e5                	mov    %esp,%ebp
f0108c0c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f0108c0f:	83 ec 04             	sub    $0x4,%esp
f0108c12:	68 a4 60 13 f0       	push   $0xf01360a4
f0108c17:	68 ff 00 00 00       	push   $0xff
f0108c1c:	68 20 60 13 f0       	push   $0xf0136020
f0108c21:	e8 d5 75 ff ff       	call   f01001fb <_panic>

f0108c26 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c26:	55                   	push   %ebp
f0108c27:	89 e5                	mov    %esp,%ebp
f0108c29:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c2c:	83 ec 04             	sub    $0x4,%esp
f0108c2f:	68 d0 60 13 f0       	push   $0xf01360d0
f0108c34:	68 0d 01 00 00       	push   $0x10d
f0108c39:	68 20 60 13 f0       	push   $0xf0136020
f0108c3e:	e8 b8 75 ff ff       	call   f01001fb <_panic>

f0108c43 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c43:	55                   	push   %ebp
f0108c44:	89 e5                	mov    %esp,%ebp
f0108c46:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c49:	83 ec 04             	sub    $0x4,%esp
f0108c4c:	68 10 61 13 f0       	push   $0xf0136110
f0108c51:	68 1d 01 00 00       	push   $0x11d
f0108c56:	68 20 60 13 f0       	push   $0xf0136020
f0108c5b:	e8 9b 75 ff ff       	call   f01001fb <_panic>

f0108c60 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108c60:	55                   	push   %ebp
f0108c61:	89 e5                	mov    %esp,%ebp
f0108c63:	57                   	push   %edi
f0108c64:	56                   	push   %esi
f0108c65:	53                   	push   %ebx
f0108c66:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108c6c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108c73:	83 ec 0c             	sub    $0xc,%esp
f0108c76:	ff 75 08             	pushl  0x8(%ebp)
f0108c79:	e8 c2 21 00 00       	call   f010ae40 <get_user_program_info>
f0108c7e:	83 c4 10             	add    $0x10,%esp
f0108c81:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108c84:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108c88:	75 0a                	jne    f0108c94 <env_create+0x34>
f0108c8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0108c8f:	e9 cd 0b 00 00       	jmp    f0109861 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108c94:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108c97:	8b 40 08             	mov    0x8(%eax),%eax
f0108c9a:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108c9d:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0108ca4:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108ca7:	83 ec 0c             	sub    $0xc,%esp
f0108caa:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f0108cb0:	50                   	push   %eax
f0108cb1:	e8 d3 0e 00 00       	call   f0109b89 <allocate_environment>
f0108cb6:	83 c4 10             	add    $0x10,%esp
f0108cb9:	85 c0                	test   %eax,%eax
f0108cbb:	79 0a                	jns    f0108cc7 <env_create+0x67>
	{
		return 0;
f0108cbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cc2:	e9 9a 0b 00 00       	jmp    f0109861 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108cc7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108cca:	8b 00                	mov    (%eax),%eax
f0108ccc:	83 ec 0c             	sub    $0xc,%esp
f0108ccf:	50                   	push   %eax
f0108cd0:	e8 19 7f 02 00       	call   f0130bee <strlen>
f0108cd5:	83 c4 10             	add    $0x10,%esp
f0108cd8:	83 f8 3f             	cmp    $0x3f,%eax
f0108cdb:	7f 20                	jg     f0108cfd <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108cdd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108ce0:	8b 00                	mov    (%eax),%eax
f0108ce2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108ce8:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108cee:	83 ec 08             	sub    $0x8,%esp
f0108cf1:	50                   	push   %eax
f0108cf2:	52                   	push   %edx
f0108cf3:	e8 45 7f 02 00       	call   f0130c3d <strcpy>
f0108cf8:	83 c4 10             	add    $0x10,%esp
f0108cfb:	eb 20                	jmp    f0108d1d <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108cfd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d00:	8b 00                	mov    (%eax),%eax
f0108d02:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0108d08:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0108d0e:	83 ec 04             	sub    $0x4,%esp
f0108d11:	6a 3f                	push   $0x3f
f0108d13:	50                   	push   %eax
f0108d14:	52                   	push   %edx
f0108d15:	e8 51 7f 02 00       	call   f0130c6b <strncpy>
f0108d1a:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0108d1d:	e8 42 0f 00 00       	call   f0109c64 <create_user_directory>
f0108d22:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0108d25:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108d28:	83 ec 0c             	sub    $0xc,%esp
f0108d2b:	50                   	push   %eax
f0108d2c:	e8 e2 ec ff ff       	call   f0107a13 <kheap_physical_address>
f0108d31:	83 c4 10             	add    $0x10,%esp
f0108d34:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108d37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d3d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d40:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108d43:	83 ec 0c             	sub    $0xc,%esp
f0108d46:	6a 02                	push   $0x2
f0108d48:	e8 18 4d 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0108d4d:	83 c4 10             	add    $0x10,%esp
f0108d50:	85 c0                	test   %eax,%eax
f0108d52:	74 21                	je     f0108d75 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0108d54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d5a:	8b 55 10             	mov    0x10(%ebp),%edx
f0108d5d:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108d63:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d6c:	2b 55 10             	sub    0x10(%ebp),%edx
f0108d6f:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108d75:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108d79:	75 12                	jne    f0108d8d <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108d7b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d81:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0108d88:	00 00 00 
f0108d8b:	eb 0f                	jmp    f0108d9c <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108d8d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108d93:	8b 55 14             	mov    0x14(%ebp),%edx
f0108d96:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108d9c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108da2:	83 ec 04             	sub    $0x4,%esp
f0108da5:	ff 75 ac             	pushl  -0x54(%ebp)
f0108da8:	ff 75 b0             	pushl  -0x50(%ebp)
f0108dab:	50                   	push   %eax
f0108dac:	e8 b1 15 00 00       	call   f010a362 <initialize_environment>
f0108db1:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108db4:	0f 20 d8             	mov    %cr3,%eax
f0108db7:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0108dba:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108dbd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f0108dc0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108dc6:	8b 40 60             	mov    0x60(%eax),%eax
f0108dc9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108dcf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0108dd5:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108dd8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108ddf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108de6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108dec:	8b 40 74             	mov    0x74(%eax),%eax
f0108def:	48                   	dec    %eax
f0108df0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108df3:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0108dfa:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108dfd:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0108e03:	83 ec 08             	sub    $0x8,%esp
f0108e06:	ff 75 b8             	pushl  -0x48(%ebp)
f0108e09:	50                   	push   %eax
f0108e0a:	e8 66 1d 00 00       	call   f010ab75 <PROGRAM_SEGMENT_FIRST>
f0108e0f:	83 c4 0c             	add    $0xc,%esp
f0108e12:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108e18:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0108e1e:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108e23:	89 c7                	mov    %eax,%edi
f0108e25:	89 d6                	mov    %edx,%esi
f0108e27:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108e29:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0108e2f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108e32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e35:	8b 40 10             	mov    0x10(%eax),%eax
f0108e38:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108e3b:	75 07                	jne    f0108e44 <env_create+0x1e4>
f0108e3d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108e44:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108e4a:	e9 15 03 00 00       	jmp    f0109164 <env_create+0x504>
	{
		segment_counter++;
f0108e4f:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108e52:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0108e59:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108e5c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108e62:	83 ec 0c             	sub    $0xc,%esp
f0108e65:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0108e6b:	52                   	push   %edx
f0108e6c:	ff 75 dc             	pushl  -0x24(%ebp)
f0108e6f:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0108e75:	52                   	push   %edx
f0108e76:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108e79:	50                   	push   %eax
f0108e7a:	e8 02 0e 00 00       	call   f0109c81 <program_segment_alloc_map_copy_workingset>
f0108e7f:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108e82:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0108e88:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108e8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e8e:	8b 00                	mov    (%eax),%eax
f0108e90:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e96:	8b 40 0c             	mov    0xc(%eax),%eax
f0108e99:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108e9c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108e9f:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0108ea2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108ea5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108eaa:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108ead:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0108eb4:	8b 55 98             	mov    -0x68(%ebp),%edx
f0108eb7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108eba:	01 d0                	add    %edx,%eax
f0108ebc:	48                   	dec    %eax
f0108ebd:	89 45 88             	mov    %eax,-0x78(%ebp)
f0108ec0:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108ec3:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ec8:	f7 75 8c             	divl   -0x74(%ebp)
f0108ecb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0108ece:	29 d0                	sub    %edx,%eax
f0108ed0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108ed3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108ed6:	2b 45 90             	sub    -0x70(%ebp),%eax
f0108ed9:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108edc:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0108ee1:	83 ec 04             	sub    $0x4,%esp
f0108ee4:	68 00 10 00 00       	push   $0x1000
f0108ee9:	6a 00                	push   $0x0
f0108eeb:	50                   	push   %eax
f0108eec:	e8 eb 7e 02 00       	call   f0130ddc <memset>
f0108ef1:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108ef4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0108ef7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108efa:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108f00:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f03:	01 d0                	add    %edx,%eax
f0108f05:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108f08:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108f0e:	eb 13                	jmp    f0108f23 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0108f10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f13:	8a 10                	mov    (%eax),%dl
f0108f15:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f18:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108f1a:	ff 45 cc             	incl   -0x34(%ebp)
f0108f1d:	ff 45 d4             	incl   -0x2c(%ebp)
f0108f20:	ff 45 d0             	incl   -0x30(%ebp)
f0108f23:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108f26:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0108f29:	72 e5                	jb     f0108f10 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0108f2b:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0108f31:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108f37:	83 ec 04             	sub    $0x4,%esp
f0108f3a:	52                   	push   %edx
f0108f3b:	ff 75 90             	pushl  -0x70(%ebp)
f0108f3e:	50                   	push   %eax
f0108f3f:	e8 45 a7 ff ff       	call   f0103689 <pf_add_env_page>
f0108f44:	83 c4 10             	add    $0x10,%esp
f0108f47:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108f4a:	75 17                	jne    f0108f63 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108f4c:	83 ec 04             	sub    $0x4,%esp
f0108f4f:	68 3c 61 13 f0       	push   $0xf013613c
f0108f54:	68 e1 00 00 00       	push   $0xe1
f0108f59:	68 81 61 13 f0       	push   $0xf0136181
f0108f5e:	e8 98 72 ff ff       	call   f01001fb <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108f63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f66:	8b 50 04             	mov    0x4(%eax),%edx
f0108f69:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f6c:	01 d0                	add    %edx,%eax
f0108f6e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0108f74:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108f7a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f7f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108f85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f88:	8b 50 04             	mov    0x4(%eax),%edx
f0108f8b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0108f8e:	01 d0                	add    %edx,%eax
f0108f90:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108f96:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f99:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108f9c:	eb 43                	jmp    f0108fe1 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0108f9e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108fa1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0108fa7:	83 ec 04             	sub    $0x4,%esp
f0108faa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0108fad:	52                   	push   %edx
f0108fae:	50                   	push   %eax
f0108faf:	e8 d5 a6 ff ff       	call   f0103689 <pf_add_env_page>
f0108fb4:	83 c4 10             	add    $0x10,%esp
f0108fb7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108fba:	75 17                	jne    f0108fd3 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108fbc:	83 ec 04             	sub    $0x4,%esp
f0108fbf:	68 3c 61 13 f0       	push   $0xf013613c
f0108fc4:	68 ee 00 00 00       	push   $0xee
f0108fc9:	68 81 61 13 f0       	push   $0xf0136181
f0108fce:	e8 28 72 ff ff       	call   f01001fb <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108fd3:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0108fda:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108fe1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108fe4:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0108fea:	72 b2                	jb     f0108f9e <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0108fec:	a1 84 7b 65 f0       	mov    0xf0657b84,%eax
f0108ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108ff4:	83 ec 04             	sub    $0x4,%esp
f0108ff7:	68 00 10 00 00       	push   $0x1000
f0108ffc:	6a 00                	push   $0x0
f0108ffe:	ff 75 d0             	pushl  -0x30(%ebp)
f0109001:	e8 d6 7d 02 00       	call   f0130ddc <memset>
f0109006:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109009:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010900f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109012:	eb 13                	jmp    f0109027 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f0109014:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109017:	8a 10                	mov    (%eax),%dl
f0109019:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010901c:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010901e:	ff 45 cc             	incl   -0x34(%ebp)
f0109021:	ff 45 d4             	incl   -0x2c(%ebp)
f0109024:	ff 45 d0             	incl   -0x30(%ebp)
f0109027:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010902a:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109030:	72 e2                	jb     f0109014 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109032:	8b 15 84 7b 65 f0    	mov    0xf0657b84,%edx
f0109038:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010903e:	83 ec 04             	sub    $0x4,%esp
f0109041:	52                   	push   %edx
f0109042:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109048:	50                   	push   %eax
f0109049:	e8 3b a6 ff ff       	call   f0103689 <pf_add_env_page>
f010904e:	83 c4 10             	add    $0x10,%esp
f0109051:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109054:	75 17                	jne    f010906d <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109056:	83 ec 04             	sub    $0x4,%esp
f0109059:	68 3c 61 13 f0       	push   $0xf013613c
f010905e:	68 fd 00 00 00       	push   $0xfd
f0109063:	68 81 61 13 f0       	push   $0xf0136181
f0109068:	e8 8e 71 ff ff       	call   f01001fb <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010906d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109074:	10 00 00 
f0109077:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010907a:	8b 50 04             	mov    0x4(%eax),%edx
f010907d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109080:	01 c2                	add    %eax,%edx
f0109082:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109088:	01 d0                	add    %edx,%eax
f010908a:	48                   	dec    %eax
f010908b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109091:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109097:	ba 00 00 00 00       	mov    $0x0,%edx
f010909c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01090a2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01090a8:	29 d0                	sub    %edx,%eax
f01090aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01090ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01090b0:	8b 50 08             	mov    0x8(%eax),%edx
f01090b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01090b6:	01 d0                	add    %edx,%eax
f01090b8:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01090bb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01090c1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01090c8:	eb 41                	jmp    f010910b <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01090ca:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01090d0:	83 ec 04             	sub    $0x4,%esp
f01090d3:	6a 01                	push   $0x1
f01090d5:	ff 75 c8             	pushl  -0x38(%ebp)
f01090d8:	50                   	push   %eax
f01090d9:	e8 7a a4 ff ff       	call   f0103558 <pf_add_empty_env_page>
f01090de:	83 c4 10             	add    $0x10,%esp
f01090e1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090e4:	75 17                	jne    f01090fd <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090e6:	83 ec 04             	sub    $0x4,%esp
f01090e9:	68 3c 61 13 f0       	push   $0xf013613c
f01090ee:	68 0a 01 00 00       	push   $0x10a
f01090f3:	68 81 61 13 f0       	push   $0xf0136181
f01090f8:	e8 fe 70 ff ff       	call   f01001fb <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01090fd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109104:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010910b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109112:	10 00 00 
f0109115:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f010911b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109121:	01 d0                	add    %edx,%eax
f0109123:	48                   	dec    %eax
f0109124:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010912a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109130:	ba 00 00 00 00       	mov    $0x0,%edx
f0109135:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010913b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109141:	29 d0                	sub    %edx,%eax
f0109143:	89 c2                	mov    %eax,%edx
f0109145:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109148:	39 c2                	cmp    %eax,%edx
f010914a:	0f 87 7a ff ff ff    	ja     f01090ca <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109150:	83 ec 08             	sub    $0x8,%esp
f0109153:	ff 75 b8             	pushl  -0x48(%ebp)
f0109156:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109159:	e8 0c 19 00 00       	call   f010aa6a <PROGRAM_SEGMENT_NEXT>
f010915e:	83 c4 10             	add    $0x10,%esp
f0109161:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109164:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109168:	0f 85 e1 fc ff ff    	jne    f0108e4f <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010916e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109175:	e9 9d 00 00 00       	jmp    f0109217 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010917a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109180:	8b 48 78             	mov    0x78(%eax),%ecx
f0109183:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109186:	89 d0                	mov    %edx,%eax
f0109188:	01 c0                	add    %eax,%eax
f010918a:	01 d0                	add    %edx,%eax
f010918c:	c1 e0 03             	shl    $0x3,%eax
f010918f:	01 c8                	add    %ecx,%eax
f0109191:	8a 40 04             	mov    0x4(%eax),%al
f0109194:	84 c0                	test   %al,%al
f0109196:	75 7c                	jne    f0109214 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109198:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010919e:	8b 48 78             	mov    0x78(%eax),%ecx
f01091a1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01091a4:	89 d0                	mov    %edx,%eax
f01091a6:	01 c0                	add    %eax,%eax
f01091a8:	01 d0                	add    %edx,%eax
f01091aa:	c1 e0 03             	shl    $0x3,%eax
f01091ad:	01 c8                	add    %ecx,%eax
f01091af:	8b 00                	mov    (%eax),%eax
f01091b1:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01091b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01091bd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01091c0:	83 ec 04             	sub    $0x4,%esp
f01091c3:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01091c9:	52                   	push   %edx
f01091ca:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01091d0:	50                   	push   %eax
f01091d1:	e8 04 d8 ff ff       	call   f01069da <get_page_table>
f01091d6:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01091d9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01091df:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01091e5:	c1 ea 0c             	shr    $0xc,%edx
f01091e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01091ee:	c1 e2 02             	shl    $0x2,%edx
f01091f1:	01 d0                	add    %edx,%eax
f01091f3:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01091f9:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01091ff:	c1 e9 0c             	shr    $0xc,%ecx
f0109202:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109208:	c1 e1 02             	shl    $0x2,%ecx
f010920b:	01 ca                	add    %ecx,%edx
f010920d:	8b 12                	mov    (%edx),%edx
f010920f:	83 e2 bf             	and    $0xffffffbf,%edx
f0109212:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109214:	ff 45 c4             	incl   -0x3c(%ebp)
f0109217:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010921d:	8b 50 74             	mov    0x74(%eax),%edx
f0109220:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109223:	39 c2                	cmp    %eax,%edx
f0109225:	0f 87 4f ff ff ff    	ja     f010917a <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010922b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010922e:	8b 50 08             	mov    0x8(%eax),%edx
f0109231:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109237:	83 ec 08             	sub    $0x8,%esp
f010923a:	52                   	push   %edx
f010923b:	50                   	push   %eax
f010923c:	e8 73 16 00 00       	call   f010a8b4 <set_environment_entry_point>
f0109241:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109244:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010924a:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109251:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109254:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010925b:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010925e:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109265:	e9 53 05 00 00       	jmp    f01097bd <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f010926a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109271:	00 00 00 
		allocate_frame(&pp);
f0109274:	83 ec 0c             	sub    $0xc,%esp
f0109277:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010927d:	50                   	push   %eax
f010927e:	e8 98 d5 ff ff       	call   f010681b <allocate_frame>
f0109283:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109286:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010928c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109292:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109295:	6a 06                	push   $0x6
f0109297:	ff 75 c0             	pushl  -0x40(%ebp)
f010929a:	52                   	push   %edx
f010929b:	50                   	push   %eax
f010929c:	e8 85 db ff ff       	call   f0106e26 <loadtime_map_frame>
f01092a1:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01092a4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01092a7:	83 ec 04             	sub    $0x4,%esp
f01092aa:	68 00 10 00 00       	push   $0x1000
f01092af:	6a 00                	push   $0x0
f01092b1:	50                   	push   %eax
f01092b2:	e8 25 7b 02 00       	call   f0130ddc <memset>
f01092b7:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01092ba:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092c0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01092c6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092cc:	83 ec 04             	sub    $0x4,%esp
f01092cf:	ff 75 c0             	pushl  -0x40(%ebp)
f01092d2:	52                   	push   %edx
f01092d3:	50                   	push   %eax
f01092d4:	e8 61 eb ff ff       	call   f0107e3a <env_page_ws_set_entry>
f01092d9:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01092dc:	83 ec 0c             	sub    $0xc,%esp
f01092df:	6a 02                	push   $0x2
f01092e1:	e8 7f 47 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f01092e6:	83 c4 10             	add    $0x10,%esp
f01092e9:	85 c0                	test   %eax,%eax
f01092eb:	0f 84 6b 04 00 00    	je     f010975c <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01092f1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01092f7:	8b 48 78             	mov    0x78(%eax),%ecx
f01092fa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109300:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109306:	89 d0                	mov    %edx,%eax
f0109308:	01 c0                	add    %eax,%eax
f010930a:	01 d0                	add    %edx,%eax
f010930c:	c1 e0 03             	shl    $0x3,%eax
f010930f:	01 c8                	add    %ecx,%eax
f0109311:	85 c0                	test   %eax,%eax
f0109313:	75 17                	jne    f010932c <env_create+0x6cc>
f0109315:	83 ec 04             	sub    $0x4,%esp
f0109318:	68 9e 61 13 f0       	push   $0xf013619e
f010931d:	68 41 01 00 00       	push   $0x141
f0109322:	68 81 61 13 f0       	push   $0xf0136181
f0109327:	e8 cf 6e ff ff       	call   f01001fb <_panic>
f010932c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109332:	8b 48 78             	mov    0x78(%eax),%ecx
f0109335:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010933b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109341:	89 d0                	mov    %edx,%eax
f0109343:	01 c0                	add    %eax,%eax
f0109345:	01 d0                	add    %edx,%eax
f0109347:	c1 e0 03             	shl    $0x3,%eax
f010934a:	01 c8                	add    %ecx,%eax
f010934c:	8b 40 10             	mov    0x10(%eax),%eax
f010934f:	85 c0                	test   %eax,%eax
f0109351:	74 4b                	je     f010939e <env_create+0x73e>
f0109353:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109359:	8b 48 78             	mov    0x78(%eax),%ecx
f010935c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109362:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109368:	89 d0                	mov    %edx,%eax
f010936a:	01 c0                	add    %eax,%eax
f010936c:	01 d0                	add    %edx,%eax
f010936e:	c1 e0 03             	shl    $0x3,%eax
f0109371:	01 c8                	add    %ecx,%eax
f0109373:	8b 50 10             	mov    0x10(%eax),%edx
f0109376:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010937c:	8b 58 78             	mov    0x78(%eax),%ebx
f010937f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109385:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010938b:	89 c8                	mov    %ecx,%eax
f010938d:	01 c0                	add    %eax,%eax
f010938f:	01 c8                	add    %ecx,%eax
f0109391:	c1 e0 03             	shl    $0x3,%eax
f0109394:	01 d8                	add    %ebx,%eax
f0109396:	8b 40 14             	mov    0x14(%eax),%eax
f0109399:	89 42 14             	mov    %eax,0x14(%edx)
f010939c:	eb 2f                	jmp    f01093cd <env_create+0x76d>
f010939e:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093aa:	8b 58 78             	mov    0x78(%eax),%ebx
f01093ad:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093b3:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01093b9:	89 c8                	mov    %ecx,%eax
f01093bb:	01 c0                	add    %eax,%eax
f01093bd:	01 c8                	add    %ecx,%eax
f01093bf:	c1 e0 03             	shl    $0x3,%eax
f01093c2:	01 d8                	add    %ebx,%eax
f01093c4:	8b 40 14             	mov    0x14(%eax),%eax
f01093c7:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f01093cd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093d3:	8b 48 78             	mov    0x78(%eax),%ecx
f01093d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093dc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01093e2:	89 d0                	mov    %edx,%eax
f01093e4:	01 c0                	add    %eax,%eax
f01093e6:	01 d0                	add    %edx,%eax
f01093e8:	c1 e0 03             	shl    $0x3,%eax
f01093eb:	01 c8                	add    %ecx,%eax
f01093ed:	8b 40 14             	mov    0x14(%eax),%eax
f01093f0:	85 c0                	test   %eax,%eax
f01093f2:	74 4b                	je     f010943f <env_create+0x7df>
f01093f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093fa:	8b 48 78             	mov    0x78(%eax),%ecx
f01093fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109403:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109409:	89 d0                	mov    %edx,%eax
f010940b:	01 c0                	add    %eax,%eax
f010940d:	01 d0                	add    %edx,%eax
f010940f:	c1 e0 03             	shl    $0x3,%eax
f0109412:	01 c8                	add    %ecx,%eax
f0109414:	8b 50 14             	mov    0x14(%eax),%edx
f0109417:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010941d:	8b 58 78             	mov    0x78(%eax),%ebx
f0109420:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109426:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010942c:	89 c8                	mov    %ecx,%eax
f010942e:	01 c0                	add    %eax,%eax
f0109430:	01 c8                	add    %ecx,%eax
f0109432:	c1 e0 03             	shl    $0x3,%eax
f0109435:	01 d8                	add    %ebx,%eax
f0109437:	8b 40 10             	mov    0x10(%eax),%eax
f010943a:	89 42 10             	mov    %eax,0x10(%edx)
f010943d:	eb 2f                	jmp    f010946e <env_create+0x80e>
f010943f:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109445:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010944b:	8b 58 78             	mov    0x78(%eax),%ebx
f010944e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109454:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010945a:	89 c8                	mov    %ecx,%eax
f010945c:	01 c0                	add    %eax,%eax
f010945e:	01 c8                	add    %ecx,%eax
f0109460:	c1 e0 03             	shl    $0x3,%eax
f0109463:	01 d8                	add    %ebx,%eax
f0109465:	8b 40 10             	mov    0x10(%eax),%eax
f0109468:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f010946e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109474:	8b 48 78             	mov    0x78(%eax),%ecx
f0109477:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010947d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109483:	89 d0                	mov    %edx,%eax
f0109485:	01 c0                	add    %eax,%eax
f0109487:	01 d0                	add    %edx,%eax
f0109489:	c1 e0 03             	shl    $0x3,%eax
f010948c:	01 c8                	add    %ecx,%eax
f010948e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109495:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010949b:	8b 48 78             	mov    0x78(%eax),%ecx
f010949e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094a4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01094aa:	89 d0                	mov    %edx,%eax
f01094ac:	01 c0                	add    %eax,%eax
f01094ae:	01 d0                	add    %edx,%eax
f01094b0:	c1 e0 03             	shl    $0x3,%eax
f01094b3:	01 c8                	add    %ecx,%eax
f01094b5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f01094bc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094c2:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f01094c8:	4a                   	dec    %edx
f01094c9:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01094cf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094d5:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f01094db:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094e1:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f01094e7:	39 c2                	cmp    %eax,%edx
f01094e9:	0f 83 39 01 00 00    	jae    f0109628 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01094ef:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094f5:	8b 48 78             	mov    0x78(%eax),%ecx
f01094f8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094fe:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109504:	89 d0                	mov    %edx,%eax
f0109506:	01 c0                	add    %eax,%eax
f0109508:	01 d0                	add    %edx,%eax
f010950a:	c1 e0 03             	shl    $0x3,%eax
f010950d:	01 c8                	add    %ecx,%eax
f010950f:	85 c0                	test   %eax,%eax
f0109511:	75 17                	jne    f010952a <env_create+0x8ca>
f0109513:	83 ec 04             	sub    $0x4,%esp
f0109516:	68 bc 61 13 f0       	push   $0xf01361bc
f010951b:	68 46 01 00 00       	push   $0x146
f0109520:	68 81 61 13 f0       	push   $0xf0136181
f0109525:	e8 d1 6c ff ff       	call   f01001fb <_panic>
f010952a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109530:	8b 48 78             	mov    0x78(%eax),%ecx
f0109533:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109539:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010953f:	89 d0                	mov    %edx,%eax
f0109541:	01 c0                	add    %eax,%eax
f0109543:	01 d0                	add    %edx,%eax
f0109545:	c1 e0 03             	shl    $0x3,%eax
f0109548:	01 c8                	add    %ecx,%eax
f010954a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109550:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109556:	89 50 10             	mov    %edx,0x10(%eax)
f0109559:	8b 40 10             	mov    0x10(%eax),%eax
f010955c:	85 c0                	test   %eax,%eax
f010955e:	74 31                	je     f0109591 <env_create+0x931>
f0109560:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109566:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010956c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109572:	8b 58 78             	mov    0x78(%eax),%ebx
f0109575:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010957b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109581:	89 c8                	mov    %ecx,%eax
f0109583:	01 c0                	add    %eax,%eax
f0109585:	01 c8                	add    %ecx,%eax
f0109587:	c1 e0 03             	shl    $0x3,%eax
f010958a:	01 d8                	add    %ebx,%eax
f010958c:	89 42 14             	mov    %eax,0x14(%edx)
f010958f:	eb 2c                	jmp    f01095bd <env_create+0x95d>
f0109591:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109597:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010959d:	8b 58 78             	mov    0x78(%eax),%ebx
f01095a0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095a6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095ac:	89 c8                	mov    %ecx,%eax
f01095ae:	01 c0                	add    %eax,%eax
f01095b0:	01 c8                	add    %ecx,%eax
f01095b2:	c1 e0 03             	shl    $0x3,%eax
f01095b5:	01 d8                	add    %ebx,%eax
f01095b7:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f01095bd:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095c3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095c9:	8b 58 78             	mov    0x78(%eax),%ebx
f01095cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095d2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01095d8:	89 c8                	mov    %ecx,%eax
f01095da:	01 c0                	add    %eax,%eax
f01095dc:	01 c8                	add    %ecx,%eax
f01095de:	c1 e0 03             	shl    $0x3,%eax
f01095e1:	01 d8                	add    %ebx,%eax
f01095e3:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f01095e9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095ef:	8b 48 78             	mov    0x78(%eax),%ecx
f01095f2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095f8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01095fe:	89 d0                	mov    %edx,%eax
f0109600:	01 c0                	add    %eax,%eax
f0109602:	01 d0                	add    %edx,%eax
f0109604:	c1 e0 03             	shl    $0x3,%eax
f0109607:	01 c8                	add    %ecx,%eax
f0109609:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109610:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109616:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010961c:	42                   	inc    %edx
f010961d:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109623:	e9 34 01 00 00       	jmp    f010975c <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109628:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010962e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109631:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109637:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010963d:	89 d0                	mov    %edx,%eax
f010963f:	01 c0                	add    %eax,%eax
f0109641:	01 d0                	add    %edx,%eax
f0109643:	c1 e0 03             	shl    $0x3,%eax
f0109646:	01 c8                	add    %ecx,%eax
f0109648:	85 c0                	test   %eax,%eax
f010964a:	75 17                	jne    f0109663 <env_create+0xa03>
f010964c:	83 ec 04             	sub    $0x4,%esp
f010964f:	68 bc 61 13 f0       	push   $0xf01361bc
f0109654:	68 4a 01 00 00       	push   $0x14a
f0109659:	68 81 61 13 f0       	push   $0xf0136181
f010965e:	e8 98 6b ff ff       	call   f01001fb <_panic>
f0109663:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109669:	8b 48 78             	mov    0x78(%eax),%ecx
f010966c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109672:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109678:	89 d0                	mov    %edx,%eax
f010967a:	01 c0                	add    %eax,%eax
f010967c:	01 d0                	add    %edx,%eax
f010967e:	c1 e0 03             	shl    $0x3,%eax
f0109681:	01 c8                	add    %ecx,%eax
f0109683:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109689:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010968f:	89 50 10             	mov    %edx,0x10(%eax)
f0109692:	8b 40 10             	mov    0x10(%eax),%eax
f0109695:	85 c0                	test   %eax,%eax
f0109697:	74 31                	je     f01096ca <env_create+0xa6a>
f0109699:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010969f:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f01096a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096ab:	8b 58 78             	mov    0x78(%eax),%ebx
f01096ae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096b4:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01096ba:	89 c8                	mov    %ecx,%eax
f01096bc:	01 c0                	add    %eax,%eax
f01096be:	01 c8                	add    %ecx,%eax
f01096c0:	c1 e0 03             	shl    $0x3,%eax
f01096c3:	01 d8                	add    %ebx,%eax
f01096c5:	89 42 14             	mov    %eax,0x14(%edx)
f01096c8:	eb 2c                	jmp    f01096f6 <env_create+0xa96>
f01096ca:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096d0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096d6:	8b 58 78             	mov    0x78(%eax),%ebx
f01096d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096df:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f01096e5:	89 c8                	mov    %ecx,%eax
f01096e7:	01 c0                	add    %eax,%eax
f01096e9:	01 c8                	add    %ecx,%eax
f01096eb:	c1 e0 03             	shl    $0x3,%eax
f01096ee:	01 d8                	add    %ebx,%eax
f01096f0:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f01096f6:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01096fc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109702:	8b 58 78             	mov    0x78(%eax),%ebx
f0109705:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010970b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109711:	89 c8                	mov    %ecx,%eax
f0109713:	01 c0                	add    %eax,%eax
f0109715:	01 c8                	add    %ecx,%eax
f0109717:	c1 e0 03             	shl    $0x3,%eax
f010971a:	01 d8                	add    %ebx,%eax
f010971c:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109722:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109728:	8b 48 78             	mov    0x78(%eax),%ecx
f010972b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109731:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109737:	89 d0                	mov    %edx,%eax
f0109739:	01 c0                	add    %eax,%eax
f010973b:	01 d0                	add    %edx,%eax
f010973d:	c1 e0 03             	shl    $0x3,%eax
f0109740:	01 c8                	add    %ecx,%eax
f0109742:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109749:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010974f:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109755:	42                   	inc    %edx
f0109756:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f010975c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109762:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109768:	42                   	inc    %edx
f0109769:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f010976f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109775:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010977b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109781:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109787:	8b 5a 74             	mov    0x74(%edx),%ebx
f010978a:	ba 00 00 00 00       	mov    $0x0,%edx
f010978f:	f7 f3                	div    %ebx
f0109791:	89 d0                	mov    %edx,%eax
f0109793:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109799:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010979f:	83 ec 04             	sub    $0x4,%esp
f01097a2:	6a 01                	push   $0x1
f01097a4:	ff 75 c0             	pushl  -0x40(%ebp)
f01097a7:	50                   	push   %eax
f01097a8:	e8 ab 9d ff ff       	call   f0103558 <pf_add_empty_env_page>
f01097ad:	83 c4 10             	add    $0x10,%esp
f01097b0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01097b6:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01097bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01097c0:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f01097c6:	0f 83 9e fa ff ff    	jae    f010926a <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01097cc:	83 ec 0c             	sub    $0xc,%esp
f01097cf:	6a 02                	push   $0x2
f01097d1:	e8 8f 42 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f01097d6:	83 c4 10             	add    $0x10,%esp
f01097d9:	85 c0                	test   %eax,%eax
f01097db:	74 72                	je     f010984f <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f01097dd:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01097e4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097ea:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01097f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01097f3:	eb 2b                	jmp    f0109820 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01097f5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01097f8:	8b 10                	mov    (%eax),%edx
f01097fa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109800:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109803:	6a 01                	push   $0x1
f0109805:	6a 00                	push   $0x0
f0109807:	52                   	push   %edx
f0109808:	50                   	push   %eax
f0109809:	e8 0f e3 ff ff       	call   f0107b1d <pt_set_page_permissions>
f010980e:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109811:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109817:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010981d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109820:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109826:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010982a:	74 08                	je     f0109834 <env_create+0xbd4>
f010982c:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010982f:	8b 52 10             	mov    0x10(%edx),%edx
f0109832:	eb 05                	jmp    f0109839 <env_create+0xbd9>
f0109834:	ba 00 00 00 00       	mov    $0x0,%edx
f0109839:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f010983f:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109845:	85 c0                	test   %eax,%eax
f0109847:	75 ac                	jne    f01097f5 <env_create+0xb95>
f0109849:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010984d:	75 a6                	jne    f01097f5 <env_create+0xb95>
f010984f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109852:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109855:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109858:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010985b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109861:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109864:	5b                   	pop    %ebx
f0109865:	5e                   	pop    %esi
f0109866:	5f                   	pop    %edi
f0109867:	5d                   	pop    %ebp
f0109868:	c3                   	ret    

f0109869 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109869:	55                   	push   %ebp
f010986a:	89 e5                	mov    %esp,%ebp
f010986c:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010986f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109874:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109877:	74 25                	je     f010989e <env_run+0x35>
	{
		curenv = e ;
f0109879:	8b 45 08             	mov    0x8(%ebp),%eax
f010987c:	a3 14 72 65 f0       	mov    %eax,0xf0657214
		curenv->env_runs++ ;
f0109881:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109886:	8b 50 58             	mov    0x58(%eax),%edx
f0109889:	42                   	inc    %edx
f010988a:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010988d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109892:	8b 40 60             	mov    0x60(%eax),%eax
f0109895:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109898:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010989b:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010989e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098a3:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f01098aa:	e8 84 a8 ff ff       	call   f0104133 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f01098af:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098b4:	83 ec 0c             	sub    $0xc,%esp
f01098b7:	50                   	push   %eax
f01098b8:	e8 0f 01 00 00       	call   f01099cc <env_pop_tf>

f01098bd <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01098bd:	55                   	push   %ebp
f01098be:	89 e5                	mov    %esp,%ebp
f01098c0:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f01098c3:	83 ec 0c             	sub    $0xc,%esp
f01098c6:	ff 75 08             	pushl  0x8(%ebp)
f01098c9:	e8 f5 10 00 00       	call   f010a9c3 <unshare_pws_at_user_space>
f01098ce:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f01098d1:	83 ec 04             	sub    $0x4,%esp
f01098d4:	68 e0 61 13 f0       	push   $0xf01361e0
f01098d9:	68 9d 01 00 00       	push   $0x19d
f01098de:	68 81 61 13 f0       	push   $0xf0136181
f01098e3:	e8 13 69 ff ff       	call   f01001fb <_panic>

f01098e8 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01098e8:	55                   	push   %ebp
f01098e9:	89 e5                	mov    %esp,%ebp
f01098eb:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01098ee:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01098f3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01098f6:	83 ec 0c             	sub    $0xc,%esp
f01098f9:	50                   	push   %eax
f01098fa:	e8 cc b8 ff ff       	call   f01051cb <sched_exit_env>
f01098ff:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109902:	e8 3e ad ff ff       	call   f0104645 <fos_scheduler>

f0109907 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109907:	55                   	push   %ebp
f0109908:	89 e5                	mov    %esp,%ebp
f010990a:	53                   	push   %ebx
f010990b:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010990e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109912:	75 15                	jne    f0109929 <envid2env+0x22>
		*env_store = curenv;
f0109914:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010991a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010991d:	89 10                	mov    %edx,(%eax)
		return 0;
f010991f:	b8 00 00 00 00       	mov    $0x0,%eax
f0109924:	e9 9e 00 00 00       	jmp    f01099c7 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109929:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f010992f:	83 ec 0c             	sub    $0xc,%esp
f0109932:	68 b1 02 00 00       	push   $0x2b1
f0109937:	e8 24 60 02 00       	call   f012f960 <nearest_pow2_ceil>
f010993c:	83 c4 10             	add    $0x10,%esp
f010993f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109942:	8b 45 08             	mov    0x8(%ebp),%eax
f0109945:	21 c2                	and    %eax,%edx
f0109947:	89 d0                	mov    %edx,%eax
f0109949:	c1 e0 03             	shl    $0x3,%eax
f010994c:	01 d0                	add    %edx,%eax
f010994e:	01 c0                	add    %eax,%eax
f0109950:	01 d0                	add    %edx,%eax
f0109952:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109959:	01 d0                	add    %edx,%eax
f010995b:	c1 e0 04             	shl    $0x4,%eax
f010995e:	01 d8                	add    %ebx,%eax
f0109960:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109963:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109966:	8b 40 54             	mov    0x54(%eax),%eax
f0109969:	85 c0                	test   %eax,%eax
f010996b:	74 0b                	je     f0109978 <envid2env+0x71>
f010996d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109970:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109973:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109976:	74 10                	je     f0109988 <envid2env+0x81>
		*env_store = 0;
f0109978:	8b 45 0c             	mov    0xc(%ebp),%eax
f010997b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109981:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109986:	eb 3f                	jmp    f01099c7 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109988:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010998c:	74 2c                	je     f01099ba <envid2env+0xb3>
f010998e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f0109993:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109996:	74 22                	je     f01099ba <envid2env+0xb3>
f0109998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010999b:	8b 50 50             	mov    0x50(%eax),%edx
f010999e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f01099a3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099a6:	39 c2                	cmp    %eax,%edx
f01099a8:	74 10                	je     f01099ba <envid2env+0xb3>
		*env_store = 0;
f01099aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01099b3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01099b8:	eb 0d                	jmp    f01099c7 <envid2env+0xc0>
	}

	*env_store = e;
f01099ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099c0:	89 10                	mov    %edx,(%eax)
	return 0;
f01099c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01099c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01099ca:	c9                   	leave  
f01099cb:	c3                   	ret    

f01099cc <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01099cc:	55                   	push   %ebp
f01099cd:	89 e5                	mov    %esp,%ebp
f01099cf:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01099d2:	8b 65 08             	mov    0x8(%ebp),%esp
f01099d5:	61                   	popa   
f01099d6:	07                   	pop    %es
f01099d7:	1f                   	pop    %ds
f01099d8:	83 c4 08             	add    $0x8,%esp
f01099db:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01099dc:	83 ec 04             	sub    $0x4,%esp
f01099df:	68 07 62 13 f0       	push   $0xf0136207
f01099e4:	68 fc 01 00 00       	push   $0x1fc
f01099e9:	68 81 61 13 f0       	push   $0xf0136181
f01099ee:	e8 08 68 ff ff       	call   f01001fb <_panic>

f01099f3 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01099f3:	55                   	push   %ebp
f01099f4:	89 e5                	mov    %esp,%ebp
f01099f6:	53                   	push   %ebx
f01099f7:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f01099fa:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109a01:	e9 73 01 00 00       	jmp    f0109b79 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109a06:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a0f:	89 d0                	mov    %edx,%eax
f0109a11:	c1 e0 03             	shl    $0x3,%eax
f0109a14:	01 d0                	add    %edx,%eax
f0109a16:	01 c0                	add    %eax,%eax
f0109a18:	01 d0                	add    %edx,%eax
f0109a1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	c1 e0 04             	shl    $0x4,%eax
f0109a26:	01 c8                	add    %ecx,%eax
f0109a28:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109a2f:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a38:	89 d0                	mov    %edx,%eax
f0109a3a:	c1 e0 03             	shl    $0x3,%eax
f0109a3d:	01 d0                	add    %edx,%eax
f0109a3f:	01 c0                	add    %eax,%eax
f0109a41:	01 d0                	add    %edx,%eax
f0109a43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a4a:	01 d0                	add    %edx,%eax
f0109a4c:	c1 e0 04             	shl    $0x4,%eax
f0109a4f:	01 c8                	add    %ecx,%eax
f0109a51:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109a58:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a61:	89 d0                	mov    %edx,%eax
f0109a63:	c1 e0 03             	shl    $0x3,%eax
f0109a66:	01 d0                	add    %edx,%eax
f0109a68:	01 c0                	add    %eax,%eax
f0109a6a:	01 d0                	add    %edx,%eax
f0109a6c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a73:	01 d0                	add    %edx,%eax
f0109a75:	c1 e0 04             	shl    $0x4,%eax
f0109a78:	01 c8                	add    %ecx,%eax
f0109a7a:	85 c0                	test   %eax,%eax
f0109a7c:	75 17                	jne    f0109a95 <env_init+0xa2>
f0109a7e:	83 ec 04             	sub    $0x4,%esp
f0109a81:	68 bc 61 13 f0       	push   $0xf01361bc
f0109a86:	68 18 02 00 00       	push   $0x218
f0109a8b:	68 81 61 13 f0       	push   $0xf0136181
f0109a90:	e8 66 67 ff ff       	call   f01001fb <_panic>
f0109a95:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109a9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a9e:	89 d0                	mov    %edx,%eax
f0109aa0:	c1 e0 03             	shl    $0x3,%eax
f0109aa3:	01 d0                	add    %edx,%eax
f0109aa5:	01 c0                	add    %eax,%eax
f0109aa7:	01 d0                	add    %edx,%eax
f0109aa9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ab0:	01 d0                	add    %edx,%eax
f0109ab2:	c1 e0 04             	shl    $0x4,%eax
f0109ab5:	01 c8                	add    %ecx,%eax
f0109ab7:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109abd:	89 50 44             	mov    %edx,0x44(%eax)
f0109ac0:	8b 40 44             	mov    0x44(%eax),%eax
f0109ac3:	85 c0                	test   %eax,%eax
f0109ac5:	74 2d                	je     f0109af4 <env_init+0x101>
f0109ac7:	8b 0d 18 72 65 f0    	mov    0xf0657218,%ecx
f0109acd:	8b 1d 10 72 65 f0    	mov    0xf0657210,%ebx
f0109ad3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ad6:	89 d0                	mov    %edx,%eax
f0109ad8:	c1 e0 03             	shl    $0x3,%eax
f0109adb:	01 d0                	add    %edx,%eax
f0109add:	01 c0                	add    %eax,%eax
f0109adf:	01 d0                	add    %edx,%eax
f0109ae1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109ae8:	01 d0                	add    %edx,%eax
f0109aea:	c1 e0 04             	shl    $0x4,%eax
f0109aed:	01 d8                	add    %ebx,%eax
f0109aef:	89 41 48             	mov    %eax,0x48(%ecx)
f0109af2:	eb 27                	jmp    f0109b1b <env_init+0x128>
f0109af4:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109afa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109afd:	89 d0                	mov    %edx,%eax
f0109aff:	c1 e0 03             	shl    $0x3,%eax
f0109b02:	01 d0                	add    %edx,%eax
f0109b04:	01 c0                	add    %eax,%eax
f0109b06:	01 d0                	add    %edx,%eax
f0109b08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b0f:	01 d0                	add    %edx,%eax
f0109b11:	c1 e0 04             	shl    $0x4,%eax
f0109b14:	01 c8                	add    %ecx,%eax
f0109b16:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109b1b:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b24:	89 d0                	mov    %edx,%eax
f0109b26:	c1 e0 03             	shl    $0x3,%eax
f0109b29:	01 d0                	add    %edx,%eax
f0109b2b:	01 c0                	add    %eax,%eax
f0109b2d:	01 d0                	add    %edx,%eax
f0109b2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b36:	01 d0                	add    %edx,%eax
f0109b38:	c1 e0 04             	shl    $0x4,%eax
f0109b3b:	01 c8                	add    %ecx,%eax
f0109b3d:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109b42:	8b 0d 10 72 65 f0    	mov    0xf0657210,%ecx
f0109b48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4b:	89 d0                	mov    %edx,%eax
f0109b4d:	c1 e0 03             	shl    $0x3,%eax
f0109b50:	01 d0                	add    %edx,%eax
f0109b52:	01 c0                	add    %eax,%eax
f0109b54:	01 d0                	add    %edx,%eax
f0109b56:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109b5d:	01 d0                	add    %edx,%eax
f0109b5f:	c1 e0 04             	shl    $0x4,%eax
f0109b62:	01 c8                	add    %ecx,%eax
f0109b64:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109b6b:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109b70:	40                   	inc    %eax
f0109b71:	a3 24 72 65 f0       	mov    %eax,0xf0657224
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109b76:	ff 4d f4             	decl   -0xc(%ebp)
f0109b79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b7d:	0f 89 83 fe ff ff    	jns    f0109a06 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109b83:	90                   	nop
f0109b84:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109b87:	c9                   	leave  
f0109b88:	c3                   	ret    

f0109b89 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109b89:	55                   	push   %ebp
f0109b8a:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109b8c:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109b92:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b95:	89 10                	mov    %edx,(%eax)
f0109b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b9a:	8b 00                	mov    (%eax),%eax
f0109b9c:	85 c0                	test   %eax,%eax
f0109b9e:	75 07                	jne    f0109ba7 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109ba0:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109ba5:	eb 11                	jmp    f0109bb8 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ba7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109baa:	8b 00                	mov    (%eax),%eax
f0109bac:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109bb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109bb8:	5d                   	pop    %ebp
f0109bb9:	c3                   	ret    

f0109bba <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109bba:	55                   	push   %ebp
f0109bbb:	89 e5                	mov    %esp,%ebp
f0109bbd:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109bc0:	83 ec 04             	sub    $0x4,%esp
f0109bc3:	68 f0 05 00 00       	push   $0x5f0
f0109bc8:	6a 00                	push   $0x0
f0109bca:	ff 75 08             	pushl  0x8(%ebp)
f0109bcd:	e8 0a 72 02 00       	call   f0130ddc <memset>
f0109bd2:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109bd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bd8:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109bdf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109be3:	75 17                	jne    f0109bfc <free_environment+0x42>
f0109be5:	83 ec 04             	sub    $0x4,%esp
f0109be8:	68 bc 61 13 f0       	push   $0xf01361bc
f0109bed:	68 35 02 00 00       	push   $0x235
f0109bf2:	68 81 61 13 f0       	push   $0xf0136181
f0109bf7:	e8 ff 65 ff ff       	call   f01001fb <_panic>
f0109bfc:	8b 15 18 72 65 f0    	mov    0xf0657218,%edx
f0109c02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c05:	89 50 44             	mov    %edx,0x44(%eax)
f0109c08:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c0b:	8b 40 44             	mov    0x44(%eax),%eax
f0109c0e:	85 c0                	test   %eax,%eax
f0109c10:	74 0d                	je     f0109c1f <free_environment+0x65>
f0109c12:	a1 18 72 65 f0       	mov    0xf0657218,%eax
f0109c17:	8b 55 08             	mov    0x8(%ebp),%edx
f0109c1a:	89 50 48             	mov    %edx,0x48(%eax)
f0109c1d:	eb 08                	jmp    f0109c27 <free_environment+0x6d>
f0109c1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c22:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f0109c27:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c2a:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f0109c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c32:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109c39:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f0109c3e:	40                   	inc    %eax
f0109c3f:	a3 24 72 65 f0       	mov    %eax,0xf0657224
}
f0109c44:	90                   	nop
f0109c45:	c9                   	leave  
f0109c46:	c3                   	ret    

f0109c47 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0109c47:	55                   	push   %ebp
f0109c48:	89 e5                	mov    %esp,%ebp
f0109c4a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f0109c4d:	83 ec 04             	sub    $0x4,%esp
f0109c50:	68 14 62 13 f0       	push   $0xf0136214
f0109c55:	68 3f 02 00 00       	push   $0x23f
f0109c5a:	68 81 61 13 f0       	push   $0xf0136181
f0109c5f:	e8 97 65 ff ff       	call   f01001fb <_panic>

f0109c64 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f0109c64:	55                   	push   %ebp
f0109c65:	89 e5                	mov    %esp,%ebp
f0109c67:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f0109c6a:	83 ec 04             	sub    $0x4,%esp
f0109c6d:	68 48 62 13 f0       	push   $0xf0136248
f0109c72:	68 4b 02 00 00       	push   $0x24b
f0109c77:	68 81 61 13 f0       	push   $0xf0136181
f0109c7c:	e8 7a 65 ff ff       	call   f01001fb <_panic>

f0109c81 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109c81:	55                   	push   %ebp
f0109c82:	89 e5                	mov    %esp,%ebp
f0109c84:	53                   	push   %ebx
f0109c85:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109c88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109c8b:	8b 40 0c             	mov    0xc(%eax),%eax
f0109c8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109c91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109c94:	8b 40 08             	mov    0x8(%eax),%eax
f0109c97:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109c9a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109ca1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109ca4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109ca7:	01 c2                	add    %eax,%edx
f0109ca9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109cac:	01 d0                	add    %edx,%eax
f0109cae:	48                   	dec    %eax
f0109caf:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0109cba:	f7 75 dc             	divl   -0x24(%ebp)
f0109cbd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc0:	29 d0                	sub    %edx,%eax
f0109cc2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109cc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109cc8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109ccb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109cce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109cd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109cd6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109cdd:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109ce4:	8b 45 10             	mov    0x10(%ebp),%eax
f0109ce7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109ced:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109cf4:	0f 85 c8 05 00 00    	jne    f010a2c2 <program_segment_alloc_map_copy_workingset+0x641>
f0109cfa:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cfd:	05 5c 05 00 00       	add    $0x55c,%eax
f0109d02:	83 ec 08             	sub    $0x8,%esp
f0109d05:	68 7c 62 13 f0       	push   $0xf013627c
f0109d0a:	50                   	push   %eax
f0109d0b:	e8 ea 6f 02 00       	call   f0130cfa <strcmp>
f0109d10:	83 c4 10             	add    $0x10,%esp
f0109d13:	85 c0                	test   %eax,%eax
f0109d15:	0f 84 a7 05 00 00    	je     f010a2c2 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109d1b:	8b 45 14             	mov    0x14(%ebp),%eax
f0109d1e:	83 f8 06             	cmp    $0x6,%eax
f0109d21:	76 05                	jbe    f0109d28 <program_segment_alloc_map_copy_workingset+0xa7>
f0109d23:	b8 06 00 00 00       	mov    $0x6,%eax
f0109d28:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109d2b:	e9 92 05 00 00       	jmp    f010a2c2 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109d30:	83 ec 0c             	sub    $0xc,%esp
f0109d33:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109d36:	50                   	push   %eax
f0109d37:	e8 df ca ff ff       	call   f010681b <allocate_frame>
f0109d3c:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109d3f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109d42:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d45:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d48:	6a 06                	push   $0x6
f0109d4a:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d4d:	52                   	push   %edx
f0109d4e:	50                   	push   %eax
f0109d4f:	e8 d2 d0 ff ff       	call   f0106e26 <loadtime_map_frame>
f0109d54:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d5a:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d60:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d66:	89 d0                	mov    %edx,%eax
f0109d68:	01 c0                	add    %eax,%eax
f0109d6a:	01 d0                	add    %edx,%eax
f0109d6c:	c1 e0 03             	shl    $0x3,%eax
f0109d6f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d75:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109d77:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d7a:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d80:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d86:	89 d0                	mov    %edx,%eax
f0109d88:	01 c0                	add    %eax,%eax
f0109d8a:	01 d0                	add    %edx,%eax
f0109d8c:	c1 e0 03             	shl    $0x3,%eax
f0109d8f:	01 c8                	add    %ecx,%eax
f0109d91:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d98:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d9e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109da4:	89 d0                	mov    %edx,%eax
f0109da6:	01 c0                	add    %eax,%eax
f0109da8:	01 d0                	add    %edx,%eax
f0109daa:	c1 e0 03             	shl    $0x3,%eax
f0109dad:	01 c8                	add    %ecx,%eax
f0109daf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109db6:	83 ec 0c             	sub    $0xc,%esp
f0109db9:	6a 02                	push   $0x2
f0109dbb:	e8 a5 3c 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f0109dc0:	83 c4 10             	add    $0x10,%esp
f0109dc3:	85 c0                	test   %eax,%eax
f0109dc5:	0f 84 c8 03 00 00    	je     f010a193 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109dcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dce:	8b 48 78             	mov    0x78(%eax),%ecx
f0109dd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109dda:	89 d0                	mov    %edx,%eax
f0109ddc:	01 c0                	add    %eax,%eax
f0109dde:	01 d0                	add    %edx,%eax
f0109de0:	c1 e0 03             	shl    $0x3,%eax
f0109de3:	01 c8                	add    %ecx,%eax
f0109de5:	85 c0                	test   %eax,%eax
f0109de7:	75 17                	jne    f0109e00 <program_segment_alloc_map_copy_workingset+0x17f>
f0109de9:	83 ec 04             	sub    $0x4,%esp
f0109dec:	68 9e 61 13 f0       	push   $0xf013619e
f0109df1:	68 7d 02 00 00       	push   $0x27d
f0109df6:	68 81 61 13 f0       	push   $0xf0136181
f0109dfb:	e8 fb 63 ff ff       	call   f01001fb <_panic>
f0109e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e03:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e09:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e0f:	89 d0                	mov    %edx,%eax
f0109e11:	01 c0                	add    %eax,%eax
f0109e13:	01 d0                	add    %edx,%eax
f0109e15:	c1 e0 03             	shl    $0x3,%eax
f0109e18:	01 c8                	add    %ecx,%eax
f0109e1a:	8b 40 10             	mov    0x10(%eax),%eax
f0109e1d:	85 c0                	test   %eax,%eax
f0109e1f:	74 3f                	je     f0109e60 <program_segment_alloc_map_copy_workingset+0x1df>
f0109e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e24:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e27:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e30:	89 d0                	mov    %edx,%eax
f0109e32:	01 c0                	add    %eax,%eax
f0109e34:	01 d0                	add    %edx,%eax
f0109e36:	c1 e0 03             	shl    $0x3,%eax
f0109e39:	01 c8                	add    %ecx,%eax
f0109e3b:	8b 50 10             	mov    0x10(%eax),%edx
f0109e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e41:	8b 58 78             	mov    0x78(%eax),%ebx
f0109e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e47:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109e4d:	89 c8                	mov    %ecx,%eax
f0109e4f:	01 c0                	add    %eax,%eax
f0109e51:	01 c8                	add    %ecx,%eax
f0109e53:	c1 e0 03             	shl    $0x3,%eax
f0109e56:	01 d8                	add    %ebx,%eax
f0109e58:	8b 40 14             	mov    0x14(%eax),%eax
f0109e5b:	89 42 14             	mov    %eax,0x14(%edx)
f0109e5e:	eb 26                	jmp    f0109e86 <program_segment_alloc_map_copy_workingset+0x205>
f0109e60:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e63:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e69:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e6f:	89 d0                	mov    %edx,%eax
f0109e71:	01 c0                	add    %eax,%eax
f0109e73:	01 d0                	add    %edx,%eax
f0109e75:	c1 e0 03             	shl    $0x3,%eax
f0109e78:	01 c8                	add    %ecx,%eax
f0109e7a:	8b 50 14             	mov    0x14(%eax),%edx
f0109e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e80:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f0109e86:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e89:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e8f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e95:	89 d0                	mov    %edx,%eax
f0109e97:	01 c0                	add    %eax,%eax
f0109e99:	01 d0                	add    %edx,%eax
f0109e9b:	c1 e0 03             	shl    $0x3,%eax
f0109e9e:	01 c8                	add    %ecx,%eax
f0109ea0:	8b 40 14             	mov    0x14(%eax),%eax
f0109ea3:	85 c0                	test   %eax,%eax
f0109ea5:	74 3f                	je     f0109ee6 <program_segment_alloc_map_copy_workingset+0x265>
f0109ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eaa:	8b 48 78             	mov    0x78(%eax),%ecx
f0109ead:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109eb6:	89 d0                	mov    %edx,%eax
f0109eb8:	01 c0                	add    %eax,%eax
f0109eba:	01 d0                	add    %edx,%eax
f0109ebc:	c1 e0 03             	shl    $0x3,%eax
f0109ebf:	01 c8                	add    %ecx,%eax
f0109ec1:	8b 50 14             	mov    0x14(%eax),%edx
f0109ec4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ec7:	8b 58 78             	mov    0x78(%eax),%ebx
f0109eca:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ecd:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ed3:	89 c8                	mov    %ecx,%eax
f0109ed5:	01 c0                	add    %eax,%eax
f0109ed7:	01 c8                	add    %ecx,%eax
f0109ed9:	c1 e0 03             	shl    $0x3,%eax
f0109edc:	01 d8                	add    %ebx,%eax
f0109ede:	8b 40 10             	mov    0x10(%eax),%eax
f0109ee1:	89 42 10             	mov    %eax,0x10(%edx)
f0109ee4:	eb 26                	jmp    f0109f0c <program_segment_alloc_map_copy_workingset+0x28b>
f0109ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ee9:	8b 48 78             	mov    0x78(%eax),%ecx
f0109eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eef:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ef5:	89 d0                	mov    %edx,%eax
f0109ef7:	01 c0                	add    %eax,%eax
f0109ef9:	01 d0                	add    %edx,%eax
f0109efb:	c1 e0 03             	shl    $0x3,%eax
f0109efe:	01 c8                	add    %ecx,%eax
f0109f00:	8b 50 10             	mov    0x10(%eax),%edx
f0109f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f06:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f0109f0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f0f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f12:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f15:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f1b:	89 d0                	mov    %edx,%eax
f0109f1d:	01 c0                	add    %eax,%eax
f0109f1f:	01 d0                	add    %edx,%eax
f0109f21:	c1 e0 03             	shl    $0x3,%eax
f0109f24:	01 c8                	add    %ecx,%eax
f0109f26:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109f2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f30:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f33:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f36:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f3c:	89 d0                	mov    %edx,%eax
f0109f3e:	01 c0                	add    %eax,%eax
f0109f40:	01 d0                	add    %edx,%eax
f0109f42:	c1 e0 03             	shl    $0x3,%eax
f0109f45:	01 c8                	add    %ecx,%eax
f0109f47:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f51:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f0109f57:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109f5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5d:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0109f63:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f66:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f6f:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109f75:	48                   	dec    %eax
f0109f76:	39 c2                	cmp    %eax,%edx
f0109f78:	0f 83 0d 01 00 00    	jae    f010a08b <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109f7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f81:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f84:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f87:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f8d:	89 d0                	mov    %edx,%eax
f0109f8f:	01 c0                	add    %eax,%eax
f0109f91:	01 d0                	add    %edx,%eax
f0109f93:	c1 e0 03             	shl    $0x3,%eax
f0109f96:	01 c8                	add    %ecx,%eax
f0109f98:	85 c0                	test   %eax,%eax
f0109f9a:	75 17                	jne    f0109fb3 <program_segment_alloc_map_copy_workingset+0x332>
f0109f9c:	83 ec 04             	sub    $0x4,%esp
f0109f9f:	68 bc 61 13 f0       	push   $0xf01361bc
f0109fa4:	68 81 02 00 00       	push   $0x281
f0109fa9:	68 81 61 13 f0       	push   $0xf0136181
f0109fae:	e8 48 62 ff ff       	call   f01001fb <_panic>
f0109fb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb6:	8b 48 78             	mov    0x78(%eax),%ecx
f0109fb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fbc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109fc2:	89 d0                	mov    %edx,%eax
f0109fc4:	01 c0                	add    %eax,%eax
f0109fc6:	01 d0                	add    %edx,%eax
f0109fc8:	c1 e0 03             	shl    $0x3,%eax
f0109fcb:	01 c8                	add    %ecx,%eax
f0109fcd:	8b 55 08             	mov    0x8(%ebp),%edx
f0109fd0:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109fd6:	89 50 10             	mov    %edx,0x10(%eax)
f0109fd9:	8b 40 10             	mov    0x10(%eax),%eax
f0109fdc:	85 c0                	test   %eax,%eax
f0109fde:	74 28                	je     f010a008 <program_segment_alloc_map_copy_workingset+0x387>
f0109fe0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe3:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109fe9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fec:	8b 58 78             	mov    0x78(%eax),%ebx
f0109fef:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff2:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ff8:	89 c8                	mov    %ecx,%eax
f0109ffa:	01 c0                	add    %eax,%eax
f0109ffc:	01 c8                	add    %ecx,%eax
f0109ffe:	c1 e0 03             	shl    $0x3,%eax
f010a001:	01 d8                	add    %ebx,%eax
f010a003:	89 42 14             	mov    %eax,0x14(%edx)
f010a006:	eb 24                	jmp    f010a02c <program_segment_alloc_map_copy_workingset+0x3ab>
f010a008:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a00e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a011:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a017:	89 d0                	mov    %edx,%eax
f010a019:	01 c0                	add    %eax,%eax
f010a01b:	01 d0                	add    %edx,%eax
f010a01d:	c1 e0 03             	shl    $0x3,%eax
f010a020:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a023:	8b 45 08             	mov    0x8(%ebp),%eax
f010a026:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a02c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a032:	8b 45 08             	mov    0x8(%ebp),%eax
f010a035:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a03b:	89 d0                	mov    %edx,%eax
f010a03d:	01 c0                	add    %eax,%eax
f010a03f:	01 d0                	add    %edx,%eax
f010a041:	c1 e0 03             	shl    $0x3,%eax
f010a044:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a047:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04a:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a050:	8b 45 08             	mov    0x8(%ebp),%eax
f010a053:	8b 48 78             	mov    0x78(%eax),%ecx
f010a056:	8b 45 08             	mov    0x8(%ebp),%eax
f010a059:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a05f:	89 d0                	mov    %edx,%eax
f010a061:	01 c0                	add    %eax,%eax
f010a063:	01 d0                	add    %edx,%eax
f010a065:	c1 e0 03             	shl    $0x3,%eax
f010a068:	01 c8                	add    %ecx,%eax
f010a06a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a071:	8b 45 08             	mov    0x8(%ebp),%eax
f010a074:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a07a:	8d 50 01             	lea    0x1(%eax),%edx
f010a07d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a080:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a086:	e9 08 01 00 00       	jmp    f010a193 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a08b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a091:	8b 45 08             	mov    0x8(%ebp),%eax
f010a094:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a09a:	89 d0                	mov    %edx,%eax
f010a09c:	01 c0                	add    %eax,%eax
f010a09e:	01 d0                	add    %edx,%eax
f010a0a0:	c1 e0 03             	shl    $0x3,%eax
f010a0a3:	01 c8                	add    %ecx,%eax
f010a0a5:	85 c0                	test   %eax,%eax
f010a0a7:	75 17                	jne    f010a0c0 <program_segment_alloc_map_copy_workingset+0x43f>
f010a0a9:	83 ec 04             	sub    $0x4,%esp
f010a0ac:	68 bc 61 13 f0       	push   $0xf01361bc
f010a0b1:	68 86 02 00 00       	push   $0x286
f010a0b6:	68 81 61 13 f0       	push   $0xf0136181
f010a0bb:	e8 3b 61 ff ff       	call   f01001fb <_panic>
f010a0c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a0c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0c9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a0cf:	89 d0                	mov    %edx,%eax
f010a0d1:	01 c0                	add    %eax,%eax
f010a0d3:	01 d0                	add    %edx,%eax
f010a0d5:	c1 e0 03             	shl    $0x3,%eax
f010a0d8:	01 c8                	add    %ecx,%eax
f010a0da:	8b 55 08             	mov    0x8(%ebp),%edx
f010a0dd:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a0e3:	89 50 10             	mov    %edx,0x10(%eax)
f010a0e6:	8b 40 10             	mov    0x10(%eax),%eax
f010a0e9:	85 c0                	test   %eax,%eax
f010a0eb:	74 28                	je     f010a115 <program_segment_alloc_map_copy_workingset+0x494>
f010a0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f0:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a0f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0f9:	8b 58 78             	mov    0x78(%eax),%ebx
f010a0fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0ff:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a105:	89 c8                	mov    %ecx,%eax
f010a107:	01 c0                	add    %eax,%eax
f010a109:	01 c8                	add    %ecx,%eax
f010a10b:	c1 e0 03             	shl    $0x3,%eax
f010a10e:	01 d8                	add    %ebx,%eax
f010a110:	89 42 14             	mov    %eax,0x14(%edx)
f010a113:	eb 24                	jmp    f010a139 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a115:	8b 45 08             	mov    0x8(%ebp),%eax
f010a118:	8b 48 78             	mov    0x78(%eax),%ecx
f010a11b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a11e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a124:	89 d0                	mov    %edx,%eax
f010a126:	01 c0                	add    %eax,%eax
f010a128:	01 d0                	add    %edx,%eax
f010a12a:	c1 e0 03             	shl    $0x3,%eax
f010a12d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a130:	8b 45 08             	mov    0x8(%ebp),%eax
f010a133:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a139:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a13f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a142:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a148:	89 d0                	mov    %edx,%eax
f010a14a:	01 c0                	add    %eax,%eax
f010a14c:	01 d0                	add    %edx,%eax
f010a14e:	c1 e0 03             	shl    $0x3,%eax
f010a151:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a154:	8b 45 08             	mov    0x8(%ebp),%eax
f010a157:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a15d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a160:	8b 48 78             	mov    0x78(%eax),%ecx
f010a163:	8b 45 08             	mov    0x8(%ebp),%eax
f010a166:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a16c:	89 d0                	mov    %edx,%eax
f010a16e:	01 c0                	add    %eax,%eax
f010a170:	01 d0                	add    %edx,%eax
f010a172:	c1 e0 03             	shl    $0x3,%eax
f010a175:	01 c8                	add    %ecx,%eax
f010a177:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a17e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a181:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a187:	8d 50 01             	lea    0x1(%eax),%edx
f010a18a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a18d:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a193:	8b 45 08             	mov    0x8(%ebp),%eax
f010a196:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a19c:	8d 50 01             	lea    0x1(%eax),%edx
f010a19f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1a2:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ab:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a1b1:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1b4:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1bc:	f7 f1                	div    %ecx
f010a1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c1:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a1c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ca:	c1 e8 16             	shr    $0x16,%eax
f010a1cd:	89 c2                	mov    %eax,%edx
f010a1cf:	8b 45 18             	mov    0x18(%ebp),%eax
f010a1d2:	8b 00                	mov    (%eax),%eax
f010a1d4:	39 c2                	cmp    %eax,%edx
f010a1d6:	0f 84 cf 00 00 00    	je     f010a2ab <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a1dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1df:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a1e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1e8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a1eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a1ee:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a1f3:	89 c1                	mov    %eax,%ecx
f010a1f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a1f8:	89 d0                	mov    %edx,%eax
f010a1fa:	01 c0                	add    %eax,%eax
f010a1fc:	01 d0                	add    %edx,%eax
f010a1fe:	c1 e0 03             	shl    $0x3,%eax
f010a201:	01 d8                	add    %ebx,%eax
f010a203:	83 c0 7c             	add    $0x7c,%eax
f010a206:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a208:	8b 45 08             	mov    0x8(%ebp),%eax
f010a20b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a211:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a214:	89 d0                	mov    %edx,%eax
f010a216:	01 c0                	add    %eax,%eax
f010a218:	01 d0                	add    %edx,%eax
f010a21a:	c1 e0 03             	shl    $0x3,%eax
f010a21d:	01 c8                	add    %ecx,%eax
f010a21f:	83 e8 80             	sub    $0xffffff80,%eax
f010a222:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a225:	8b 45 08             	mov    0x8(%ebp),%eax
f010a228:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a22e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a231:	89 d0                	mov    %edx,%eax
f010a233:	01 c0                	add    %eax,%eax
f010a235:	01 d0                	add    %edx,%eax
f010a237:	c1 e0 03             	shl    $0x3,%eax
f010a23a:	01 c8                	add    %ecx,%eax
f010a23c:	05 84 00 00 00       	add    $0x84,%eax
f010a241:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a247:	8b 45 08             	mov    0x8(%ebp),%eax
f010a24a:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a250:	8d 50 01             	lea    0x1(%eax),%edx
f010a253:	8b 45 08             	mov    0x8(%ebp),%eax
f010a256:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a25c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a25f:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a265:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a26a:	ba 00 00 00 00       	mov    $0x0,%edx
f010a26f:	f7 f1                	div    %ecx
f010a271:	8b 45 08             	mov    0x8(%ebp),%eax
f010a274:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a27a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27d:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a283:	85 c0                	test   %eax,%eax
f010a285:	75 17                	jne    f010a29e <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a287:	83 ec 04             	sub    $0x4,%esp
f010a28a:	68 80 62 13 f0       	push   $0xf0136280
f010a28f:	68 96 02 00 00       	push   $0x296
f010a294:	68 81 61 13 f0       	push   $0xf0136181
f010a299:	e8 5d 5f ff ff       	call   f01001fb <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a29e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2a1:	c1 e8 16             	shr    $0x16,%eax
f010a2a4:	89 c2                	mov    %eax,%edx
f010a2a6:	8b 45 18             	mov    0x18(%ebp),%eax
f010a2a9:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a2ab:	8b 45 10             	mov    0x10(%ebp),%eax
f010a2ae:	8b 00                	mov    (%eax),%eax
f010a2b0:	8d 50 01             	lea    0x1(%eax),%edx
f010a2b3:	8b 45 10             	mov    0x10(%ebp),%eax
f010a2b6:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a2b8:	ff 45 f0             	incl   -0x10(%ebp)
f010a2bb:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a2c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2c5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a2c8:	73 0c                	jae    f010a2d6 <program_segment_alloc_map_copy_workingset+0x655>
f010a2ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2cd:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a2d0:	0f 82 5a fa ff ff    	jb     f0109d30 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a2d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2d9:	8b 00                	mov    (%eax),%eax
f010a2db:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a2de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2e1:	8b 40 0c             	mov    0xc(%eax),%eax
f010a2e4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a2e7:	eb 10                	jmp    f010a2f9 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a2e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a2ec:	8a 10                	mov    (%eax),%dl
f010a2ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a2f1:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a2f3:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a2f6:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a2f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a2fc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a2ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a302:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a307:	89 c2                	mov    %eax,%edx
f010a309:	8b 45 10             	mov    0x10(%ebp),%eax
f010a30c:	8b 00                	mov    (%eax),%eax
f010a30e:	c1 e0 0c             	shl    $0xc,%eax
f010a311:	01 c2                	add    %eax,%edx
f010a313:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a316:	39 c2                	cmp    %eax,%edx
f010a318:	76 1d                	jbe    f010a337 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a31a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a31d:	8b 50 04             	mov    0x4(%eax),%edx
f010a320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a323:	01 c2                	add    %eax,%edx
f010a325:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a328:	39 c2                	cmp    %eax,%edx
f010a32a:	77 bd                	ja     f010a2e9 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a32c:	eb 09                	jmp    f010a337 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010a32e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a331:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a334:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a337:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a33a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a33d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a340:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a345:	89 c2                	mov    %eax,%edx
f010a347:	8b 45 10             	mov    0x10(%ebp),%eax
f010a34a:	8b 00                	mov    (%eax),%eax
f010a34c:	c1 e0 0c             	shl    $0xc,%eax
f010a34f:	01 c2                	add    %eax,%edx
f010a351:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a354:	39 c2                	cmp    %eax,%edx
f010a356:	77 d6                	ja     f010a32e <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a358:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a35d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a360:	c9                   	leave  
f010a361:	c3                   	ret    

f010a362 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a362:	55                   	push   %ebp
f010a363:	89 e5                	mov    %esp,%ebp
f010a365:	53                   	push   %ebx
f010a366:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a369:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a36f:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a372:	8b 45 08             	mov    0x8(%ebp),%eax
f010a375:	8b 55 10             	mov    0x10(%ebp),%edx
f010a378:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a37b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a382:	eb 17                	jmp    f010a39b <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010a384:	8b 45 08             	mov    0x8(%ebp),%eax
f010a387:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a38a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a38d:	c1 e2 02             	shl    $0x2,%edx
f010a390:	01 d0                	add    %edx,%eax
f010a392:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a398:	ff 45 f4             	incl   -0xc(%ebp)
f010a39b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a39e:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a3a3:	76 df                	jbe    f010a384 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a3a5:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a3ac:	eb 22                	jmp    f010a3d0 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b1:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a3b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3b7:	c1 e2 02             	shl    $0x2,%edx
f010a3ba:	01 c2                	add    %eax,%edx
f010a3bc:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f010a3c1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a3c4:	c1 e1 02             	shl    $0x2,%ecx
f010a3c7:	01 c8                	add    %ecx,%eax
f010a3c9:	8b 00                	mov    (%eax),%eax
f010a3cb:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a3cd:	ff 45 f4             	incl   -0xc(%ebp)
f010a3d0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a3d7:	7e d5                	jle    f010a3ae <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010a3d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3dc:	8b 40 74             	mov    0x74(%eax),%eax
f010a3df:	83 ec 08             	sub    $0x8,%esp
f010a3e2:	50                   	push   %eax
f010a3e3:	ff 75 08             	pushl  0x8(%ebp)
f010a3e6:	e8 5c f8 ff ff       	call   f0109c47 <create_user_page_WS>
f010a3eb:	83 c4 10             	add    $0x10,%esp
f010a3ee:	89 c2                	mov    %eax,%edx
f010a3f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f3:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010a3f6:	83 ec 0c             	sub    $0xc,%esp
f010a3f9:	ff 75 08             	pushl  0x8(%ebp)
f010a3fc:	e8 f3 04 00 00       	call   f010a8f4 <share_pws_at_user_space>
f010a401:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a404:	83 ec 0c             	sub    $0xc,%esp
f010a407:	6a 02                	push   $0x2
f010a409:	e8 57 36 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f010a40e:	83 c4 10             	add    $0x10,%esp
f010a411:	85 c0                	test   %eax,%eax
f010a413:	0f 84 04 01 00 00    	je     f010a51d <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a419:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a420:	e9 e7 00 00 00       	jmp    f010a50c <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a425:	8b 45 08             	mov    0x8(%ebp),%eax
f010a428:	8b 48 78             	mov    0x78(%eax),%ecx
f010a42b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a42e:	89 d0                	mov    %edx,%eax
f010a430:	01 c0                	add    %eax,%eax
f010a432:	01 d0                	add    %edx,%eax
f010a434:	c1 e0 03             	shl    $0x3,%eax
f010a437:	01 c8                	add    %ecx,%eax
f010a439:	85 c0                	test   %eax,%eax
f010a43b:	75 17                	jne    f010a454 <initialize_environment+0xf2>
f010a43d:	83 ec 04             	sub    $0x4,%esp
f010a440:	68 bc 61 13 f0       	push   $0xf01361bc
f010a445:	68 f4 02 00 00       	push   $0x2f4
f010a44a:	68 81 61 13 f0       	push   $0xf0136181
f010a44f:	e8 a7 5d ff ff       	call   f01001fb <_panic>
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 48 78             	mov    0x78(%eax),%ecx
f010a45a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a45d:	89 d0                	mov    %edx,%eax
f010a45f:	01 c0                	add    %eax,%eax
f010a461:	01 d0                	add    %edx,%eax
f010a463:	c1 e0 03             	shl    $0x3,%eax
f010a466:	01 c8                	add    %ecx,%eax
f010a468:	8b 55 08             	mov    0x8(%ebp),%edx
f010a46b:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010a471:	89 50 10             	mov    %edx,0x10(%eax)
f010a474:	8b 40 10             	mov    0x10(%eax),%eax
f010a477:	85 c0                	test   %eax,%eax
f010a479:	74 22                	je     f010a49d <initialize_environment+0x13b>
f010a47b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a47e:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010a484:	8b 45 08             	mov    0x8(%ebp),%eax
f010a487:	8b 58 78             	mov    0x78(%eax),%ebx
f010a48a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a48d:	89 c8                	mov    %ecx,%eax
f010a48f:	01 c0                	add    %eax,%eax
f010a491:	01 c8                	add    %ecx,%eax
f010a493:	c1 e0 03             	shl    $0x3,%eax
f010a496:	01 d8                	add    %ebx,%eax
f010a498:	89 42 14             	mov    %eax,0x14(%edx)
f010a49b:	eb 1e                	jmp    f010a4bb <initialize_environment+0x159>
f010a49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4a6:	89 d0                	mov    %edx,%eax
f010a4a8:	01 c0                	add    %eax,%eax
f010a4aa:	01 d0                	add    %edx,%eax
f010a4ac:	c1 e0 03             	shl    $0x3,%eax
f010a4af:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4b5:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a4bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4be:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4c4:	89 d0                	mov    %edx,%eax
f010a4c6:	01 c0                	add    %eax,%eax
f010a4c8:	01 d0                	add    %edx,%eax
f010a4ca:	c1 e0 03             	shl    $0x3,%eax
f010a4cd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a4d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d3:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a4d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dc:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a4e2:	89 d0                	mov    %edx,%eax
f010a4e4:	01 c0                	add    %eax,%eax
f010a4e6:	01 d0                	add    %edx,%eax
f010a4e8:	c1 e0 03             	shl    $0x3,%eax
f010a4eb:	01 c8                	add    %ecx,%eax
f010a4ed:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a4f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f7:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a4fd:	8d 50 01             	lea    0x1(%eax),%edx
f010a500:	8b 45 08             	mov    0x8(%ebp),%eax
f010a503:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a509:	ff 45 f0             	incl   -0x10(%ebp)
f010a50c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50f:	8b 50 74             	mov    0x74(%eax),%edx
f010a512:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a515:	39 c2                	cmp    %eax,%edx
f010a517:	0f 87 08 ff ff ff    	ja     f010a425 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a51d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a524:	eb 50                	jmp    f010a576 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a526:	8b 45 08             	mov    0x8(%ebp),%eax
f010a529:	8b 48 78             	mov    0x78(%eax),%ecx
f010a52c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a52f:	89 d0                	mov    %edx,%eax
f010a531:	01 c0                	add    %eax,%eax
f010a533:	01 d0                	add    %edx,%eax
f010a535:	c1 e0 03             	shl    $0x3,%eax
f010a538:	01 c8                	add    %ecx,%eax
f010a53a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a540:	8b 45 08             	mov    0x8(%ebp),%eax
f010a543:	8b 48 78             	mov    0x78(%eax),%ecx
f010a546:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a549:	89 d0                	mov    %edx,%eax
f010a54b:	01 c0                	add    %eax,%eax
f010a54d:	01 d0                	add    %edx,%eax
f010a54f:	c1 e0 03             	shl    $0x3,%eax
f010a552:	01 c8                	add    %ecx,%eax
f010a554:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a558:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a55e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a561:	89 d0                	mov    %edx,%eax
f010a563:	01 c0                	add    %eax,%eax
f010a565:	01 d0                	add    %edx,%eax
f010a567:	c1 e0 03             	shl    $0x3,%eax
f010a56a:	01 c8                	add    %ecx,%eax
f010a56c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010a573:	ff 45 f4             	incl   -0xc(%ebp)
f010a576:	8b 45 08             	mov    0x8(%ebp),%eax
f010a579:	8b 50 74             	mov    0x74(%eax),%edx
f010a57c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a57f:	39 c2                	cmp    %eax,%edx
f010a581:	77 a3                	ja     f010a526 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a583:	8b 45 08             	mov    0x8(%ebp),%eax
f010a586:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010a58d:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a590:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a597:	eb 50                	jmp    f010a5e9 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a599:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a59c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a59f:	89 d0                	mov    %edx,%eax
f010a5a1:	01 c0                	add    %eax,%eax
f010a5a3:	01 d0                	add    %edx,%eax
f010a5a5:	c1 e0 03             	shl    $0x3,%eax
f010a5a8:	01 c8                	add    %ecx,%eax
f010a5aa:	83 c0 7c             	add    $0x7c,%eax
f010a5ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a5b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a5b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5b9:	89 d0                	mov    %edx,%eax
f010a5bb:	01 c0                	add    %eax,%eax
f010a5bd:	01 d0                	add    %edx,%eax
f010a5bf:	c1 e0 03             	shl    $0x3,%eax
f010a5c2:	01 c8                	add    %ecx,%eax
f010a5c4:	83 e8 80             	sub    $0xffffff80,%eax
f010a5c7:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a5ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a5cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5d0:	89 d0                	mov    %edx,%eax
f010a5d2:	01 c0                	add    %eax,%eax
f010a5d4:	01 d0                	add    %edx,%eax
f010a5d6:	c1 e0 03             	shl    $0x3,%eax
f010a5d9:	01 c8                	add    %ecx,%eax
f010a5db:	05 84 00 00 00       	add    $0x84,%eax
f010a5e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a5e6:	ff 45 f4             	incl   -0xc(%ebp)
f010a5e9:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a5ed:	7e aa                	jle    f010a599 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a5ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f2:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010a5f9:	00 00 00 

	e->pageFaultsCounter=0;
f010a5fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ff:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010a606:	00 00 00 
	e->tableFaultsCounter=0;
f010a609:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60c:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010a613:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a616:	8b 45 08             	mov    0x8(%ebp),%eax
f010a619:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010a620:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a623:	8b 45 08             	mov    0x8(%ebp),%eax
f010a626:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010a62d:	00 00 00 

	e->nModifiedPages=0;
f010a630:	8b 45 08             	mov    0x8(%ebp),%eax
f010a633:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010a63a:	00 00 00 
	e->nNotModifiedPages=0;
f010a63d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a640:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010a647:	00 00 00 
	e->nClocks = 0;
f010a64a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64d:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010a654:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a657:	8b 45 08             	mov    0x8(%ebp),%eax
f010a65a:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010a661:	00 00 00 
	e->nPageOut = 0;
f010a664:	8b 45 08             	mov    0x8(%ebp),%eax
f010a667:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010a66e:	00 00 00 
	e->nNewPageAdded = 0;
f010a671:	8b 45 08             	mov    0x8(%ebp),%eax
f010a674:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010a67b:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a67e:	83 ec 0c             	sub    $0xc,%esp
f010a681:	ff 75 08             	pushl  0x8(%ebp)
f010a684:	e8 09 00 00 00       	call   f010a692 <complete_environment_initialization>
f010a689:	83 c4 10             	add    $0x10,%esp
}
f010a68c:	90                   	nop
f010a68d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a690:	c9                   	leave  
f010a691:	c3                   	ret    

f010a692 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a692:	55                   	push   %ebp
f010a693:	89 e5                	mov    %esp,%ebp
f010a695:	53                   	push   %ebx
f010a696:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a699:	8b 45 08             	mov    0x8(%ebp),%eax
f010a69c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a69f:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a6a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a8:	8b 40 60             	mov    0x60(%eax),%eax
f010a6ab:	83 c8 03             	or     $0x3,%eax
f010a6ae:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a6b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a6b6:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a6bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6bf:	8b 40 60             	mov    0x60(%eax),%eax
f010a6c2:	83 c8 05             	or     $0x5,%eax
f010a6c5:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a6c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ca:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a6d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d4:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a6db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6de:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a6ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f2:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a6f5:	83 ec 0c             	sub    $0xc,%esp
f010a6f8:	68 b1 02 00 00       	push   $0x2b1
f010a6fd:	e8 93 52 02 00       	call   f012f995 <log2_ceil>
f010a702:	83 c4 10             	add    $0x10,%esp
f010a705:	ba 01 00 00 00       	mov    $0x1,%edx
f010a70a:	88 c1                	mov    %al,%cl
f010a70c:	d3 e2                	shl    %cl,%edx
f010a70e:	89 d0                	mov    %edx,%eax
f010a710:	01 d8                	add    %ebx,%eax
f010a712:	89 c3                	mov    %eax,%ebx
f010a714:	83 ec 0c             	sub    $0xc,%esp
f010a717:	68 b1 02 00 00       	push   $0x2b1
f010a71c:	e8 3f 52 02 00       	call   f012f960 <nearest_pow2_ceil>
f010a721:	83 c4 10             	add    $0x10,%esp
f010a724:	f7 d8                	neg    %eax
f010a726:	21 d8                	and    %ebx,%eax
f010a728:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a72b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a72f:	7f 1e                	jg     f010a74f <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010a731:	83 ec 0c             	sub    $0xc,%esp
f010a734:	68 b1 02 00 00       	push   $0x2b1
f010a739:	e8 57 52 02 00       	call   f012f995 <log2_ceil>
f010a73e:	83 c4 10             	add    $0x10,%esp
f010a741:	ba 01 00 00 00       	mov    $0x1,%edx
f010a746:	88 c1                	mov    %al,%cl
f010a748:	d3 e2                	shl    %cl,%edx
f010a74a:	89 d0                	mov    %edx,%eax
f010a74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a74f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a752:	8b 15 10 72 65 f0    	mov    0xf0657210,%edx
f010a758:	29 d0                	sub    %edx,%eax
f010a75a:	c1 f8 04             	sar    $0x4,%eax
f010a75d:	89 c2                	mov    %eax,%edx
f010a75f:	89 d0                	mov    %edx,%eax
f010a761:	c1 e0 03             	shl    $0x3,%eax
f010a764:	01 d0                	add    %edx,%eax
f010a766:	01 c0                	add    %eax,%eax
f010a768:	01 d0                	add    %edx,%eax
f010a76a:	c1 e0 03             	shl    $0x3,%eax
f010a76d:	01 d0                	add    %edx,%eax
f010a76f:	89 c1                	mov    %eax,%ecx
f010a771:	c1 e1 08             	shl    $0x8,%ecx
f010a774:	01 c8                	add    %ecx,%eax
f010a776:	01 c0                	add    %eax,%eax
f010a778:	01 d0                	add    %edx,%eax
f010a77a:	01 c0                	add    %eax,%eax
f010a77c:	01 d0                	add    %edx,%eax
f010a77e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a785:	01 d0                	add    %edx,%eax
f010a787:	89 c2                	mov    %eax,%edx
f010a789:	c1 e2 09             	shl    $0x9,%edx
f010a78c:	29 c2                	sub    %eax,%edx
f010a78e:	89 d0                	mov    %edx,%eax
f010a790:	f7 d8                	neg    %eax
f010a792:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a795:	89 c2                	mov    %eax,%edx
f010a797:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79a:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a79d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a7a2:	85 c0                	test   %eax,%eax
f010a7a4:	75 0c                	jne    f010a7b2 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010a7a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7a9:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a7b0:	eb 0e                	jmp    f010a7c0 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a7b2:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010a7b7:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a7ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7bd:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a7c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c3:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a7ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cd:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a7d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d7:	83 ec 04             	sub    $0x4,%esp
f010a7da:	6a 44                	push   $0x44
f010a7dc:	6a 00                	push   $0x0
f010a7de:	50                   	push   %eax
f010a7df:	e8 f8 65 02 00       	call   f0130ddc <memset>
f010a7e4:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a7e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ea:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a7f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f3:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a802:	8b 45 08             	mov    0x8(%ebp),%eax
f010a805:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a80c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a80f:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a815:	8b 45 08             	mov    0x8(%ebp),%eax
f010a818:	8b 40 38             	mov    0x38(%eax),%eax
f010a81b:	80 cc 02             	or     $0x2,%ah
f010a81e:	89 c2                	mov    %eax,%edx
f010a820:	8b 45 08             	mov    0x8(%ebp),%eax
f010a823:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a826:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a82a:	75 17                	jne    f010a843 <complete_environment_initialization+0x1b1>
f010a82c:	83 ec 04             	sub    $0x4,%esp
f010a82f:	68 9e 61 13 f0       	push   $0xf013619e
f010a834:	68 58 03 00 00       	push   $0x358
f010a839:	68 81 61 13 f0       	push   $0xf0136181
f010a83e:	e8 b8 59 ff ff       	call   f01001fb <_panic>
f010a843:	8b 45 08             	mov    0x8(%ebp),%eax
f010a846:	8b 40 44             	mov    0x44(%eax),%eax
f010a849:	85 c0                	test   %eax,%eax
f010a84b:	74 11                	je     f010a85e <complete_environment_initialization+0x1cc>
f010a84d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a850:	8b 40 44             	mov    0x44(%eax),%eax
f010a853:	8b 55 08             	mov    0x8(%ebp),%edx
f010a856:	8b 52 48             	mov    0x48(%edx),%edx
f010a859:	89 50 48             	mov    %edx,0x48(%eax)
f010a85c:	eb 0b                	jmp    f010a869 <complete_environment_initialization+0x1d7>
f010a85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a861:	8b 40 48             	mov    0x48(%eax),%eax
f010a864:	a3 1c 72 65 f0       	mov    %eax,0xf065721c
f010a869:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86c:	8b 40 48             	mov    0x48(%eax),%eax
f010a86f:	85 c0                	test   %eax,%eax
f010a871:	74 11                	je     f010a884 <complete_environment_initialization+0x1f2>
f010a873:	8b 45 08             	mov    0x8(%ebp),%eax
f010a876:	8b 40 48             	mov    0x48(%eax),%eax
f010a879:	8b 55 08             	mov    0x8(%ebp),%edx
f010a87c:	8b 52 44             	mov    0x44(%edx),%edx
f010a87f:	89 50 44             	mov    %edx,0x44(%eax)
f010a882:	eb 0b                	jmp    f010a88f <complete_environment_initialization+0x1fd>
f010a884:	8b 45 08             	mov    0x8(%ebp),%eax
f010a887:	8b 40 44             	mov    0x44(%eax),%eax
f010a88a:	a3 18 72 65 f0       	mov    %eax,0xf0657218
f010a88f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a892:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a899:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a8a3:	a1 24 72 65 f0       	mov    0xf0657224,%eax
f010a8a8:	48                   	dec    %eax
f010a8a9:	a3 24 72 65 f0       	mov    %eax,0xf0657224
	return ;
f010a8ae:	90                   	nop
}
f010a8af:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a8b2:	c9                   	leave  
f010a8b3:	c3                   	ret    

f010a8b4 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a8b4:	55                   	push   %ebp
f010a8b5:	89 e5                	mov    %esp,%ebp
f010a8b7:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a8ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a8c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8c3:	8b 00                	mov    (%eax),%eax
f010a8c5:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a8ca:	74 17                	je     f010a8e3 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a8cc:	83 ec 04             	sub    $0x4,%esp
f010a8cf:	68 23 63 13 f0       	push   $0xf0136323
f010a8d4:	68 64 03 00 00       	push   $0x364
f010a8d9:	68 81 61 13 f0       	push   $0xf0136181
f010a8de:	e8 18 59 ff ff       	call   f01001fb <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a8e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8e6:	8b 40 18             	mov    0x18(%eax),%eax
f010a8e9:	89 c2                	mov    %eax,%edx
f010a8eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ee:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a8f1:	90                   	nop
f010a8f2:	c9                   	leave  
f010a8f3:	c3                   	ret    

f010a8f4 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a8f4:	55                   	push   %ebp
f010a8f5:	89 e5                	mov    %esp,%ebp
f010a8f7:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010a8fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8fd:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010a904:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010a907:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90a:	8b 40 78             	mov    0x78(%eax),%eax
f010a90d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010a910:	8b 45 08             	mov    0x8(%ebp),%eax
f010a913:	8b 50 74             	mov    0x74(%eax),%edx
f010a916:	89 d0                	mov    %edx,%eax
f010a918:	01 c0                	add    %eax,%eax
f010a91a:	01 d0                	add    %edx,%eax
f010a91c:	c1 e0 03             	shl    $0x3,%eax
f010a91f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010a922:	8b 45 08             	mov    0x8(%ebp),%eax
f010a925:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a92b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010a92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a931:	8b 40 78             	mov    0x78(%eax),%eax
f010a934:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a937:	eb 71                	jmp    f010a9aa <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010a939:	83 ec 0c             	sub    $0xc,%esp
f010a93c:	ff 75 f4             	pushl  -0xc(%ebp)
f010a93f:	e8 cf d0 ff ff       	call   f0107a13 <kheap_physical_address>
f010a944:	83 c4 10             	add    $0x10,%esp
f010a947:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010a94a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a950:	83 ec 04             	sub    $0x4,%esp
f010a953:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010a956:	52                   	push   %edx
f010a957:	ff 75 f0             	pushl  -0x10(%ebp)
f010a95a:	50                   	push   %eax
f010a95b:	e8 7a c0 ff ff       	call   f01069da <get_page_table>
f010a960:	83 c4 10             	add    $0x10,%esp
f010a963:	83 f8 01             	cmp    $0x1,%eax
f010a966:	75 18                	jne    f010a980 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010a968:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a96e:	83 ec 08             	sub    $0x8,%esp
f010a971:	ff 75 f0             	pushl  -0x10(%ebp)
f010a974:	50                   	push   %eax
f010a975:	e8 b6 c1 ff ff       	call   f0106b30 <create_page_table>
f010a97a:	83 c4 10             	add    $0x10,%esp
f010a97d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010a980:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a983:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a986:	c1 ea 0c             	shr    $0xc,%edx
f010a989:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a98f:	c1 e2 02             	shl    $0x2,%edx
f010a992:	01 d0                	add    %edx,%eax
f010a994:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a997:	83 ca 05             	or     $0x5,%edx
f010a99a:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010a99c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a9a3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010a9aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ad:	8b 40 78             	mov    0x78(%eax),%eax
f010a9b0:	89 c2                	mov    %eax,%edx
f010a9b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a9b5:	01 d0                	add    %edx,%eax
f010a9b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a9ba:	0f 87 79 ff ff ff    	ja     f010a939 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010a9c0:	90                   	nop
f010a9c1:	c9                   	leave  
f010a9c2:	c3                   	ret    

f010a9c3 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a9c3:	55                   	push   %ebp
f010a9c4:	89 e5                	mov    %esp,%ebp
f010a9c6:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010a9c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9cc:	8b 50 74             	mov    0x74(%eax),%edx
f010a9cf:	89 d0                	mov    %edx,%eax
f010a9d1:	01 c0                	add    %eax,%eax
f010a9d3:	01 d0                	add    %edx,%eax
f010a9d5:	c1 e0 03             	shl    $0x3,%eax
f010a9d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9de:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a9e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010a9e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ea:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010a9f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a9f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9f6:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a9fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010a9fe:	eb 46                	jmp    f010aa46 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010aa00:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa03:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa06:	83 ec 04             	sub    $0x4,%esp
f010aa09:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010aa0c:	52                   	push   %edx
f010aa0d:	ff 75 f4             	pushl  -0xc(%ebp)
f010aa10:	50                   	push   %eax
f010aa11:	e8 c4 bf ff ff       	call   f01069da <get_page_table>
f010aa16:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010aa19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010aa1c:	83 ec 0c             	sub    $0xc,%esp
f010aa1f:	50                   	push   %eax
f010aa20:	e8 9b ce ff ff       	call   f01078c0 <kfree>
f010aa25:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010aa28:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa2b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa31:	c1 ea 16             	shr    $0x16,%edx
f010aa34:	c1 e2 02             	shl    $0x2,%edx
f010aa37:	01 d0                	add    %edx,%eax
f010aa39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010aa3f:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010aa46:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa49:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010aa4f:	89 c2                	mov    %eax,%edx
f010aa51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa54:	01 d0                	add    %edx,%eax
f010aa56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010aa59:	77 a5                	ja     f010aa00 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010aa5b:	0f 20 d8             	mov    %cr3,%eax
f010aa5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010aa61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa64:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010aa67:	90                   	nop
f010aa68:	c9                   	leave  
f010aa69:	c3                   	ret    

f010aa6a <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010aa6a:	55                   	push   %ebp
f010aa6b:	89 e5                	mov    %esp,%ebp
f010aa6d:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010aa70:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa73:	8b 40 10             	mov    0x10(%eax),%eax
f010aa76:	8d 48 01             	lea    0x1(%eax),%ecx
f010aa79:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa7c:	89 4a 10             	mov    %ecx,0x10(%edx)
f010aa7f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010aa82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa85:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010aa88:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa8b:	8b 00                	mov    (%eax),%eax
f010aa8d:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aa92:	74 17                	je     f010aaab <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010aa94:	83 ec 04             	sub    $0x4,%esp
f010aa97:	68 23 63 13 f0       	push   $0xf0136323
f010aa9c:	68 ae 03 00 00       	push   $0x3ae
f010aaa1:	68 81 61 13 f0       	push   $0xf0136181
f010aaa6:	e8 50 57 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010aaab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aaae:	8b 50 1c             	mov    0x1c(%eax),%edx
f010aab1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aab4:	01 d0                	add    %edx,%eax
f010aab6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010aab9:	eb 0f                	jmp    f010aaca <PROGRAM_SEGMENT_NEXT+0x60>
f010aabb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aabe:	8b 40 10             	mov    0x10(%eax),%eax
f010aac1:	8d 50 01             	lea    0x1(%eax),%edx
f010aac4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aac7:	89 50 10             	mov    %edx,0x10(%eax)
f010aaca:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacd:	8b 40 10             	mov    0x10(%eax),%eax
f010aad0:	c1 e0 05             	shl    $0x5,%eax
f010aad3:	89 c2                	mov    %eax,%edx
f010aad5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010aad8:	01 d0                	add    %edx,%eax
f010aada:	8b 00                	mov    (%eax),%eax
f010aadc:	83 f8 01             	cmp    $0x1,%eax
f010aadf:	74 13                	je     f010aaf4 <PROGRAM_SEGMENT_NEXT+0x8a>
f010aae1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae4:	8b 50 10             	mov    0x10(%eax),%edx
f010aae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aaea:	8b 40 2c             	mov    0x2c(%eax),%eax
f010aaed:	0f b7 c0             	movzwl %ax,%eax
f010aaf0:	39 c2                	cmp    %eax,%edx
f010aaf2:	72 c7                	jb     f010aabb <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010aaf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf7:	8b 40 10             	mov    0x10(%eax),%eax
f010aafa:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010aafd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab00:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ab03:	0f b7 c0             	movzwl %ax,%eax
f010ab06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ab09:	7e 63                	jle    f010ab6e <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ab0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab0e:	c1 e0 05             	shl    $0x5,%eax
f010ab11:	89 c2                	mov    %eax,%edx
f010ab13:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab16:	01 d0                	add    %edx,%eax
f010ab18:	8b 50 04             	mov    0x4(%eax),%edx
f010ab1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab1e:	01 c2                	add    %eax,%edx
f010ab20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab23:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ab25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab28:	c1 e0 05             	shl    $0x5,%eax
f010ab2b:	89 c2                	mov    %eax,%edx
f010ab2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab30:	01 d0                	add    %edx,%eax
f010ab32:	8b 50 14             	mov    0x14(%eax),%edx
f010ab35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab38:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ab3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab3e:	c1 e0 05             	shl    $0x5,%eax
f010ab41:	89 c2                	mov    %eax,%edx
f010ab43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab46:	01 d0                	add    %edx,%eax
f010ab48:	8b 50 10             	mov    0x10(%eax),%edx
f010ab4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab4e:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ab51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab54:	c1 e0 05             	shl    $0x5,%eax
f010ab57:	89 c2                	mov    %eax,%edx
f010ab59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab5c:	01 d0                	add    %edx,%eax
f010ab5e:	8b 40 08             	mov    0x8(%eax),%eax
f010ab61:	89 c2                	mov    %eax,%edx
f010ab63:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab66:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ab69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab6c:	eb 05                	jmp    f010ab73 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ab6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ab73:	c9                   	leave  
f010ab74:	c3                   	ret    

f010ab75 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ab75:	55                   	push   %ebp
f010ab76:	89 e5                	mov    %esp,%ebp
f010ab78:	57                   	push   %edi
f010ab79:	56                   	push   %esi
f010ab7a:	53                   	push   %ebx
f010ab7b:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ab7e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab85:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab8e:	8b 00                	mov    (%eax),%eax
f010ab90:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab95:	74 17                	je     f010abae <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010ab97:	83 ec 04             	sub    $0x4,%esp
f010ab9a:	68 23 63 13 f0       	push   $0xf0136323
f010ab9f:	68 ca 03 00 00       	push   $0x3ca
f010aba4:	68 81 61 13 f0       	push   $0xf0136181
f010aba9:	e8 4d 56 ff ff       	call   f01001fb <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abb1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abb7:	01 d0                	add    %edx,%eax
f010abb9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010abbc:	eb 07                	jmp    f010abc5 <PROGRAM_SEGMENT_FIRST+0x50>
f010abbe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abc1:	40                   	inc    %eax
f010abc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010abc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abc8:	c1 e0 05             	shl    $0x5,%eax
f010abcb:	89 c2                	mov    %eax,%edx
f010abcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010abd0:	01 d0                	add    %edx,%eax
f010abd2:	8b 00                	mov    (%eax),%eax
f010abd4:	83 f8 01             	cmp    $0x1,%eax
f010abd7:	74 10                	je     f010abe9 <PROGRAM_SEGMENT_FIRST+0x74>
f010abd9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010abdc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abdf:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abe2:	0f b7 c0             	movzwl %ax,%eax
f010abe5:	39 c2                	cmp    %eax,%edx
f010abe7:	72 d5                	jb     f010abbe <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010abe9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010abec:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010abef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010abf2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abf5:	0f b7 c0             	movzwl %ax,%eax
f010abf8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010abfb:	7e 68                	jle    f010ac65 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010abfd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac00:	c1 e0 05             	shl    $0x5,%eax
f010ac03:	89 c2                	mov    %eax,%edx
f010ac05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac08:	01 d0                	add    %edx,%eax
f010ac0a:	8b 50 04             	mov    0x4(%eax),%edx
f010ac0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac10:	01 d0                	add    %edx,%eax
f010ac12:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ac15:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac18:	c1 e0 05             	shl    $0x5,%eax
f010ac1b:	89 c2                	mov    %eax,%edx
f010ac1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac20:	01 d0                	add    %edx,%eax
f010ac22:	8b 40 14             	mov    0x14(%eax),%eax
f010ac25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ac28:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac2b:	c1 e0 05             	shl    $0x5,%eax
f010ac2e:	89 c2                	mov    %eax,%edx
f010ac30:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac33:	01 d0                	add    %edx,%eax
f010ac35:	8b 40 10             	mov    0x10(%eax),%eax
f010ac38:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ac3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ac3e:	c1 e0 05             	shl    $0x5,%eax
f010ac41:	89 c2                	mov    %eax,%edx
f010ac43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ac46:	01 d0                	add    %edx,%eax
f010ac48:	8b 40 08             	mov    0x8(%eax),%eax
f010ac4b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ac4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac51:	89 c3                	mov    %eax,%ebx
f010ac53:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ac56:	ba 05 00 00 00       	mov    $0x5,%edx
f010ac5b:	89 df                	mov    %ebx,%edi
f010ac5d:	89 c6                	mov    %eax,%esi
f010ac5f:	89 d1                	mov    %edx,%ecx
f010ac61:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ac63:	eb 1c                	jmp    f010ac81 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ac65:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ac6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6f:	89 c3                	mov    %eax,%ebx
f010ac71:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ac74:	ba 05 00 00 00       	mov    $0x5,%edx
f010ac79:	89 df                	mov    %ebx,%edi
f010ac7b:	89 c6                	mov    %eax,%esi
f010ac7d:	89 d1                	mov    %edx,%ecx
f010ac7f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ac81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac84:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ac87:	5b                   	pop    %ebx
f010ac88:	5e                   	pop    %esi
f010ac89:	5f                   	pop    %edi
f010ac8a:	5d                   	pop    %ebp
f010ac8b:	c2 04 00             	ret    $0x4

f010ac8e <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010ac8e:	55                   	push   %ebp
f010ac8f:	89 e5                	mov    %esp,%ebp
f010ac91:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ac94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ac9b:	a1 b8 7a 65 f0       	mov    0xf0657ab8,%eax
f010aca0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aca3:	e9 c3 00 00 00       	jmp    f010ad6b <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010aca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acab:	8b 40 10             	mov    0x10(%eax),%eax
f010acae:	3b 45 08             	cmp    0x8(%ebp),%eax
f010acb1:	0f 85 ac 00 00 00    	jne    f010ad63 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010acb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acba:	8b 50 0c             	mov    0xc(%eax),%edx
f010acbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acc0:	8b 40 10             	mov    0x10(%eax),%eax
f010acc3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010acc6:	83 ec 08             	sub    $0x8,%esp
f010acc9:	52                   	push   %edx
f010acca:	50                   	push   %eax
f010accb:	e8 5c cf ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f010acd0:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010acd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010acd7:	75 17                	jne    f010acf0 <cleanup_buffers+0x62>
f010acd9:	83 ec 04             	sub    $0x4,%esp
f010acdc:	68 9e 61 13 f0       	push   $0xf013619e
f010ace1:	68 f1 03 00 00       	push   $0x3f1
f010ace6:	68 81 61 13 f0       	push   $0xf0136181
f010aceb:	e8 0b 55 ff ff       	call   f01001fb <_panic>
f010acf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acf3:	8b 00                	mov    (%eax),%eax
f010acf5:	85 c0                	test   %eax,%eax
f010acf7:	74 10                	je     f010ad09 <cleanup_buffers+0x7b>
f010acf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acfc:	8b 00                	mov    (%eax),%eax
f010acfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad01:	8b 52 04             	mov    0x4(%edx),%edx
f010ad04:	89 50 04             	mov    %edx,0x4(%eax)
f010ad07:	eb 0b                	jmp    f010ad14 <cleanup_buffers+0x86>
f010ad09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad0c:	8b 40 04             	mov    0x4(%eax),%eax
f010ad0f:	a3 bc 7a 65 f0       	mov    %eax,0xf0657abc
f010ad14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad17:	8b 40 04             	mov    0x4(%eax),%eax
f010ad1a:	85 c0                	test   %eax,%eax
f010ad1c:	74 0f                	je     f010ad2d <cleanup_buffers+0x9f>
f010ad1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad21:	8b 40 04             	mov    0x4(%eax),%eax
f010ad24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad27:	8b 12                	mov    (%edx),%edx
f010ad29:	89 10                	mov    %edx,(%eax)
f010ad2b:	eb 0a                	jmp    f010ad37 <cleanup_buffers+0xa9>
f010ad2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad30:	8b 00                	mov    (%eax),%eax
f010ad32:	a3 b8 7a 65 f0       	mov    %eax,0xf0657ab8
f010ad37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ad40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad43:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ad4a:	a1 c4 7a 65 f0       	mov    0xf0657ac4,%eax
f010ad4f:	48                   	dec    %eax
f010ad50:	a3 c4 7a 65 f0       	mov    %eax,0xf0657ac4

			free_frame(ptr_fi);
f010ad55:	83 ec 0c             	sub    $0xc,%esp
f010ad58:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad5b:	e8 d0 bb ff ff       	call   f0106930 <free_frame>
f010ad60:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ad63:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ad68:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ad6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad6f:	74 07                	je     f010ad78 <cleanup_buffers+0xea>
f010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad74:	8b 00                	mov    (%eax),%eax
f010ad76:	eb 05                	jmp    f010ad7d <cleanup_buffers+0xef>
f010ad78:	b8 00 00 00 00       	mov    $0x0,%eax
f010ad7d:	a3 c0 7a 65 f0       	mov    %eax,0xf0657ac0
f010ad82:	a1 c0 7a 65 f0       	mov    0xf0657ac0,%eax
f010ad87:	85 c0                	test   %eax,%eax
f010ad89:	0f 85 19 ff ff ff    	jne    f010aca8 <cleanup_buffers+0x1a>
f010ad8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad93:	0f 85 0f ff ff ff    	jne    f010aca8 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010ad99:	90                   	nop
f010ad9a:	c9                   	leave  
f010ad9b:	c3                   	ret    

f010ad9c <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010ad9c:	55                   	push   %ebp
f010ad9d:	89 e5                	mov    %esp,%ebp
f010ad9f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010ada2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010ada6:	7e 06                	jle    f010adae <set_program_priority+0x12>
f010ada8:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010adac:	7e 14                	jle    f010adc2 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010adae:	83 ec 04             	sub    $0x4,%esp
f010adb1:	68 3c 63 13 f0       	push   $0xf013633c
f010adb6:	6a 10                	push   $0x10
f010adb8:	68 60 63 13 f0       	push   $0xf0136360
f010adbd:	e8 39 54 ff ff       	call   f01001fb <_panic>
		return;
	}
	if(env == NULL)
f010adc2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010adc6:	74 75                	je     f010ae3d <set_program_priority+0xa1>
		return;
	switch(priority)
f010adc8:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010adcc:	77 56                	ja     f010ae24 <set_program_priority+0x88>
f010adce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010add1:	c1 e0 02             	shl    $0x2,%eax
f010add4:	05 9c 63 13 f0       	add    $0xf013639c,%eax
f010add9:	8b 00                	mov    (%eax),%eax
f010addb:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010addd:	83 ec 08             	sub    $0x8,%esp
f010ade0:	6a 01                	push   $0x1
f010ade2:	ff 75 08             	pushl  0x8(%ebp)
f010ade5:	e8 b9 d8 ff ff       	call   f01086a3 <half_WS_Size>
f010adea:	83 c4 10             	add    $0x10,%esp
			break;
f010aded:	eb 35                	jmp    f010ae24 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010adef:	83 ec 08             	sub    $0x8,%esp
f010adf2:	6a 00                	push   $0x0
f010adf4:	ff 75 08             	pushl  0x8(%ebp)
f010adf7:	e8 a7 d8 ff ff       	call   f01086a3 <half_WS_Size>
f010adfc:	83 c4 10             	add    $0x10,%esp
			break;
f010adff:	eb 23                	jmp    f010ae24 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010ae01:	83 ec 08             	sub    $0x8,%esp
f010ae04:	6a 01                	push   $0x1
f010ae06:	ff 75 08             	pushl  0x8(%ebp)
f010ae09:	e8 78 d8 ff ff       	call   f0108686 <double_WS_Size>
f010ae0e:	83 c4 10             	add    $0x10,%esp
			break;
f010ae11:	eb 11                	jmp    f010ae24 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010ae13:	83 ec 08             	sub    $0x8,%esp
f010ae16:	6a 00                	push   $0x0
f010ae18:	ff 75 08             	pushl  0x8(%ebp)
f010ae1b:	e8 66 d8 ff ff       	call   f0108686 <double_WS_Size>
f010ae20:	83 c4 10             	add    $0x10,%esp
			break;
f010ae23:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010ae24:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae27:	8b 40 74             	mov    0x74(%eax),%eax
f010ae2a:	83 ec 08             	sub    $0x8,%esp
f010ae2d:	50                   	push   %eax
f010ae2e:	68 7d 63 13 f0       	push   $0xf013637d
f010ae33:	e8 4a 5e ff ff       	call   f0100c82 <cprintf>
f010ae38:	83 c4 10             	add    $0x10,%esp
f010ae3b:	eb 01                	jmp    f010ae3e <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010ae3d:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010ae3e:	c9                   	leave  
f010ae3f:	c3                   	ret    

f010ae40 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010ae40:	55                   	push   %ebp
f010ae41:	89 e5                	mov    %esp,%ebp
f010ae43:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ae46:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ae4d:	eb 29                	jmp    f010ae78 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010ae4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae52:	89 d0                	mov    %edx,%eax
f010ae54:	01 c0                	add    %eax,%eax
f010ae56:	01 d0                	add    %edx,%eax
f010ae58:	c1 e0 02             	shl    $0x2,%eax
f010ae5b:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010ae60:	8b 00                	mov    (%eax),%eax
f010ae62:	83 ec 08             	sub    $0x8,%esp
f010ae65:	50                   	push   %eax
f010ae66:	ff 75 08             	pushl  0x8(%ebp)
f010ae69:	e8 8c 5e 02 00       	call   f0130cfa <strcmp>
f010ae6e:	83 c4 10             	add    $0x10,%esp
f010ae71:	85 c0                	test   %eax,%eax
f010ae73:	74 0f                	je     f010ae84 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010ae75:	ff 45 f4             	incl   -0xc(%ebp)
f010ae78:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ae7d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ae80:	7c cd                	jl     f010ae4f <get_user_program_info+0xf>
f010ae82:	eb 01                	jmp    f010ae85 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010ae84:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010ae85:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010ae8a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010ae8d:	75 1a                	jne    f010aea9 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010ae8f:	83 ec 08             	sub    $0x8,%esp
f010ae92:	ff 75 08             	pushl  0x8(%ebp)
f010ae95:	68 c9 6d 13 f0       	push   $0xf0136dc9
f010ae9a:	e8 e3 5d ff ff       	call   f0100c82 <cprintf>
f010ae9f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010aea2:	b8 00 00 00 00       	mov    $0x0,%eax
f010aea7:	eb 11                	jmp    f010aeba <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010aea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeac:	89 d0                	mov    %edx,%eax
f010aeae:	01 c0                	add    %eax,%eax
f010aeb0:	01 d0                	add    %edx,%eax
f010aeb2:	c1 e0 02             	shl    $0x2,%eax
f010aeb5:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010aeba:	c9                   	leave  
f010aebb:	c3                   	ret    

f010aebc <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010aebc:	55                   	push   %ebp
f010aebd:	89 e5                	mov    %esp,%ebp
f010aebf:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aec2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aec9:	eb 30                	jmp    f010aefb <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010aecb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aece:	89 d0                	mov    %edx,%eax
f010aed0:	01 c0                	add    %eax,%eax
f010aed2:	01 d0                	add    %edx,%eax
f010aed4:	c1 e0 02             	shl    $0x2,%eax
f010aed7:	05 00 19 19 f0       	add    $0xf0191900,%eax
f010aedc:	8b 00                	mov    (%eax),%eax
f010aede:	8b 55 08             	mov    0x8(%ebp),%edx
f010aee1:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010aee7:	83 ec 08             	sub    $0x8,%esp
f010aeea:	50                   	push   %eax
f010aeeb:	52                   	push   %edx
f010aeec:	e8 09 5e 02 00       	call   f0130cfa <strcmp>
f010aef1:	83 c4 10             	add    $0x10,%esp
f010aef4:	85 c0                	test   %eax,%eax
f010aef6:	74 0f                	je     f010af07 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aef8:	ff 45 f4             	incl   -0xc(%ebp)
f010aefb:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af00:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af03:	7c c6                	jl     f010aecb <get_user_program_info_by_env+0xf>
f010af05:	eb 01                	jmp    f010af08 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af07:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af08:	a1 c4 1c 19 f0       	mov    0xf0191cc4,%eax
f010af0d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af10:	75 17                	jne    f010af29 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010af12:	83 ec 0c             	sub    $0xc,%esp
f010af15:	68 e4 6d 13 f0       	push   $0xf0136de4
f010af1a:	e8 63 5d ff ff       	call   f0100c82 <cprintf>
f010af1f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af22:	b8 00 00 00 00       	mov    $0x0,%eax
f010af27:	eb 11                	jmp    f010af3a <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010af29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af2c:	89 d0                	mov    %edx,%eax
f010af2e:	01 c0                	add    %eax,%eax
f010af30:	01 d0                	add    %edx,%eax
f010af32:	c1 e0 02             	shl    $0x2,%eax
f010af35:	05 00 19 19 f0       	add    $0xf0191900,%eax
}
f010af3a:	c9                   	leave  
f010af3b:	c3                   	ret    

f010af3c <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010af3c:	55                   	push   %ebp
f010af3d:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010af3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af42:	83 f8 13             	cmp    $0x13,%eax
f010af45:	77 0c                	ja     f010af53 <trapname+0x17>
		return excnames[trapno];
f010af47:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4a:	8b 04 85 60 71 13 f0 	mov    -0xfec8ea0(,%eax,4),%eax
f010af51:	eb 12                	jmp    f010af65 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010af53:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010af57:	75 07                	jne    f010af60 <trapname+0x24>
		return "System call";
f010af59:	b8 00 6e 13 f0       	mov    $0xf0136e00,%eax
f010af5e:	eb 05                	jmp    f010af65 <trapname+0x29>
	return "(unknown trap)";
f010af60:	b8 0c 6e 13 f0       	mov    $0xf0136e0c,%eax
}
f010af65:	5d                   	pop    %ebp
f010af66:	c3                   	ret    

f010af67 <idt_init>:


void
idt_init(void)
{
f010af67:	55                   	push   %ebp
f010af68:	89 e5                	mov    %esp,%ebp
f010af6a:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010af6d:	b8 6a c5 10 f0       	mov    $0xf010c56a,%eax
f010af72:	66 a3 b0 72 65 f0    	mov    %ax,0xf06572b0
f010af78:	66 c7 05 b2 72 65 f0 	movw   $0x8,0xf06572b2
f010af7f:	08 00 
f010af81:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010af86:	83 e0 e0             	and    $0xffffffe0,%eax
f010af89:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010af8e:	a0 b4 72 65 f0       	mov    0xf06572b4,%al
f010af93:	83 e0 1f             	and    $0x1f,%eax
f010af96:	a2 b4 72 65 f0       	mov    %al,0xf06572b4
f010af9b:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afa0:	83 e0 f0             	and    $0xfffffff0,%eax
f010afa3:	83 c8 0e             	or     $0xe,%eax
f010afa6:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afab:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afb0:	83 e0 ef             	and    $0xffffffef,%eax
f010afb3:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afb8:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afbd:	83 e0 9f             	and    $0xffffff9f,%eax
f010afc0:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afc5:	a0 b5 72 65 f0       	mov    0xf06572b5,%al
f010afca:	83 c8 80             	or     $0xffffff80,%eax
f010afcd:	a2 b5 72 65 f0       	mov    %al,0xf06572b5
f010afd2:	b8 6a c5 10 f0       	mov    $0xf010c56a,%eax
f010afd7:	c1 e8 10             	shr    $0x10,%eax
f010afda:	66 a3 b6 72 65 f0    	mov    %ax,0xf06572b6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010afe0:	b8 72 c5 10 f0       	mov    $0xf010c572,%eax
f010afe5:	66 a3 c0 73 65 f0    	mov    %ax,0xf06573c0
f010afeb:	66 c7 05 c2 73 65 f0 	movw   $0x8,0xf06573c2
f010aff2:	08 00 
f010aff4:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010aff9:	83 e0 e0             	and    $0xffffffe0,%eax
f010affc:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b001:	a0 c4 73 65 f0       	mov    0xf06573c4,%al
f010b006:	83 e0 1f             	and    $0x1f,%eax
f010b009:	a2 c4 73 65 f0       	mov    %al,0xf06573c4
f010b00e:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b013:	83 e0 f0             	and    $0xfffffff0,%eax
f010b016:	83 c8 0e             	or     $0xe,%eax
f010b019:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b01e:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b023:	83 e0 ef             	and    $0xffffffef,%eax
f010b026:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b02b:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b030:	83 c8 60             	or     $0x60,%eax
f010b033:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b038:	a0 c5 73 65 f0       	mov    0xf06573c5,%al
f010b03d:	83 c8 80             	or     $0xffffff80,%eax
f010b040:	a2 c5 73 65 f0       	mov    %al,0xf06573c5
f010b045:	b8 72 c5 10 f0       	mov    $0xf010c572,%eax
f010b04a:	c1 e8 10             	shr    $0x10,%eax
f010b04d:	66 a3 c6 73 65 f0    	mov    %ax,0xf06573c6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b053:	b8 7c c5 10 f0       	mov    $0xf010c57c,%eax
f010b058:	66 a3 80 72 65 f0    	mov    %ax,0xf0657280
f010b05e:	66 c7 05 82 72 65 f0 	movw   $0x8,0xf0657282
f010b065:	08 00 
f010b067:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b06c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b06f:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b074:	a0 84 72 65 f0       	mov    0xf0657284,%al
f010b079:	83 e0 1f             	and    $0x1f,%eax
f010b07c:	a2 84 72 65 f0       	mov    %al,0xf0657284
f010b081:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b086:	83 e0 f0             	and    $0xfffffff0,%eax
f010b089:	83 c8 0e             	or     $0xe,%eax
f010b08c:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b091:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b096:	83 e0 ef             	and    $0xffffffef,%eax
f010b099:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b09e:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b0a3:	83 e0 9f             	and    $0xffffff9f,%eax
f010b0a6:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b0ab:	a0 85 72 65 f0       	mov    0xf0657285,%al
f010b0b0:	83 c8 80             	or     $0xffffff80,%eax
f010b0b3:	a2 85 72 65 f0       	mov    %al,0xf0657285
f010b0b8:	b8 7c c5 10 f0       	mov    $0xf010c57c,%eax
f010b0bd:	c1 e8 10             	shr    $0x10,%eax
f010b0c0:	66 a3 86 72 65 f0    	mov    %ax,0xf0657286


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b0c6:	b8 84 c5 10 f0       	mov    $0xf010c584,%eax
f010b0cb:	66 a3 40 72 65 f0    	mov    %ax,0xf0657240
f010b0d1:	66 c7 05 42 72 65 f0 	movw   $0x8,0xf0657242
f010b0d8:	08 00 
f010b0da:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b0df:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0e2:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b0e7:	a0 44 72 65 f0       	mov    0xf0657244,%al
f010b0ec:	83 e0 1f             	and    $0x1f,%eax
f010b0ef:	a2 44 72 65 f0       	mov    %al,0xf0657244
f010b0f4:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b0f9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0fc:	83 c8 0e             	or     $0xe,%eax
f010b0ff:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b104:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b109:	83 e0 ef             	and    $0xffffffef,%eax
f010b10c:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b111:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b116:	83 c8 60             	or     $0x60,%eax
f010b119:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b11e:	a0 45 72 65 f0       	mov    0xf0657245,%al
f010b123:	83 c8 80             	or     $0xffffff80,%eax
f010b126:	a2 45 72 65 f0       	mov    %al,0xf0657245
f010b12b:	b8 84 c5 10 f0       	mov    $0xf010c584,%eax
f010b130:	c1 e8 10             	shr    $0x10,%eax
f010b133:	66 a3 46 72 65 f0    	mov    %ax,0xf0657246
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b139:	b8 8e c5 10 f0       	mov    $0xf010c58e,%eax
f010b13e:	66 a3 48 72 65 f0    	mov    %ax,0xf0657248
f010b144:	66 c7 05 4a 72 65 f0 	movw   $0x8,0xf065724a
f010b14b:	08 00 
f010b14d:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b152:	83 e0 e0             	and    $0xffffffe0,%eax
f010b155:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b15a:	a0 4c 72 65 f0       	mov    0xf065724c,%al
f010b15f:	83 e0 1f             	and    $0x1f,%eax
f010b162:	a2 4c 72 65 f0       	mov    %al,0xf065724c
f010b167:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b16c:	83 c8 0f             	or     $0xf,%eax
f010b16f:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b174:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b179:	83 e0 ef             	and    $0xffffffef,%eax
f010b17c:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b181:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b186:	83 c8 60             	or     $0x60,%eax
f010b189:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b18e:	a0 4d 72 65 f0       	mov    0xf065724d,%al
f010b193:	83 c8 80             	or     $0xffffff80,%eax
f010b196:	a2 4d 72 65 f0       	mov    %al,0xf065724d
f010b19b:	b8 8e c5 10 f0       	mov    $0xf010c58e,%eax
f010b1a0:	c1 e8 10             	shr    $0x10,%eax
f010b1a3:	66 a3 4e 72 65 f0    	mov    %ax,0xf065724e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b1a9:	b8 98 c5 10 f0       	mov    $0xf010c598,%eax
f010b1ae:	66 a3 50 72 65 f0    	mov    %ax,0xf0657250
f010b1b4:	66 c7 05 52 72 65 f0 	movw   $0x8,0xf0657252
f010b1bb:	08 00 
f010b1bd:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b1c2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1c5:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b1ca:	a0 54 72 65 f0       	mov    0xf0657254,%al
f010b1cf:	83 e0 1f             	and    $0x1f,%eax
f010b1d2:	a2 54 72 65 f0       	mov    %al,0xf0657254
f010b1d7:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b1dc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1df:	83 c8 0e             	or     $0xe,%eax
f010b1e2:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b1e7:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b1ec:	83 e0 ef             	and    $0xffffffef,%eax
f010b1ef:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b1f4:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b1f9:	83 c8 60             	or     $0x60,%eax
f010b1fc:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b201:	a0 55 72 65 f0       	mov    0xf0657255,%al
f010b206:	83 c8 80             	or     $0xffffff80,%eax
f010b209:	a2 55 72 65 f0       	mov    %al,0xf0657255
f010b20e:	b8 98 c5 10 f0       	mov    $0xf010c598,%eax
f010b213:	c1 e8 10             	shr    $0x10,%eax
f010b216:	66 a3 56 72 65 f0    	mov    %ax,0xf0657256
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b21c:	b8 a2 c5 10 f0       	mov    $0xf010c5a2,%eax
f010b221:	66 a3 58 72 65 f0    	mov    %ax,0xf0657258
f010b227:	66 c7 05 5a 72 65 f0 	movw   $0x8,0xf065725a
f010b22e:	08 00 
f010b230:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b235:	83 e0 e0             	and    $0xffffffe0,%eax
f010b238:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b23d:	a0 5c 72 65 f0       	mov    0xf065725c,%al
f010b242:	83 e0 1f             	and    $0x1f,%eax
f010b245:	a2 5c 72 65 f0       	mov    %al,0xf065725c
f010b24a:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b24f:	83 c8 0f             	or     $0xf,%eax
f010b252:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b257:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b25c:	83 e0 ef             	and    $0xffffffef,%eax
f010b25f:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b264:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b269:	83 c8 60             	or     $0x60,%eax
f010b26c:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b271:	a0 5d 72 65 f0       	mov    0xf065725d,%al
f010b276:	83 c8 80             	or     $0xffffff80,%eax
f010b279:	a2 5d 72 65 f0       	mov    %al,0xf065725d
f010b27e:	b8 a2 c5 10 f0       	mov    $0xf010c5a2,%eax
f010b283:	c1 e8 10             	shr    $0x10,%eax
f010b286:	66 a3 5e 72 65 f0    	mov    %ax,0xf065725e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b28c:	b8 ac c5 10 f0       	mov    $0xf010c5ac,%eax
f010b291:	66 a3 60 72 65 f0    	mov    %ax,0xf0657260
f010b297:	66 c7 05 62 72 65 f0 	movw   $0x8,0xf0657262
f010b29e:	08 00 
f010b2a0:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b2a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2a8:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b2ad:	a0 64 72 65 f0       	mov    0xf0657264,%al
f010b2b2:	83 e0 1f             	and    $0x1f,%eax
f010b2b5:	a2 64 72 65 f0       	mov    %al,0xf0657264
f010b2ba:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2bf:	83 c8 0f             	or     $0xf,%eax
f010b2c2:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2c7:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2cc:	83 e0 ef             	and    $0xffffffef,%eax
f010b2cf:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2d4:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2d9:	83 c8 60             	or     $0x60,%eax
f010b2dc:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2e1:	a0 65 72 65 f0       	mov    0xf0657265,%al
f010b2e6:	83 c8 80             	or     $0xffffff80,%eax
f010b2e9:	a2 65 72 65 f0       	mov    %al,0xf0657265
f010b2ee:	b8 ac c5 10 f0       	mov    $0xf010c5ac,%eax
f010b2f3:	c1 e8 10             	shr    $0x10,%eax
f010b2f6:	66 a3 66 72 65 f0    	mov    %ax,0xf0657266
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b2fc:	b8 b6 c5 10 f0       	mov    $0xf010c5b6,%eax
f010b301:	66 a3 68 72 65 f0    	mov    %ax,0xf0657268
f010b307:	66 c7 05 6a 72 65 f0 	movw   $0x8,0xf065726a
f010b30e:	08 00 
f010b310:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b315:	83 e0 e0             	and    $0xffffffe0,%eax
f010b318:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b31d:	a0 6c 72 65 f0       	mov    0xf065726c,%al
f010b322:	83 e0 1f             	and    $0x1f,%eax
f010b325:	a2 6c 72 65 f0       	mov    %al,0xf065726c
f010b32a:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b32f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b332:	83 c8 0e             	or     $0xe,%eax
f010b335:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b33a:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b33f:	83 e0 ef             	and    $0xffffffef,%eax
f010b342:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b347:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b34c:	83 c8 60             	or     $0x60,%eax
f010b34f:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b354:	a0 6d 72 65 f0       	mov    0xf065726d,%al
f010b359:	83 c8 80             	or     $0xffffff80,%eax
f010b35c:	a2 6d 72 65 f0       	mov    %al,0xf065726d
f010b361:	b8 b6 c5 10 f0       	mov    $0xf010c5b6,%eax
f010b366:	c1 e8 10             	shr    $0x10,%eax
f010b369:	66 a3 6e 72 65 f0    	mov    %ax,0xf065726e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b36f:	b8 c0 c5 10 f0       	mov    $0xf010c5c0,%eax
f010b374:	66 a3 70 72 65 f0    	mov    %ax,0xf0657270
f010b37a:	66 c7 05 72 72 65 f0 	movw   $0x8,0xf0657272
f010b381:	08 00 
f010b383:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b388:	83 e0 e0             	and    $0xffffffe0,%eax
f010b38b:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b390:	a0 74 72 65 f0       	mov    0xf0657274,%al
f010b395:	83 e0 1f             	and    $0x1f,%eax
f010b398:	a2 74 72 65 f0       	mov    %al,0xf0657274
f010b39d:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3a5:	83 c8 0e             	or     $0xe,%eax
f010b3a8:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3ad:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3b2:	83 e0 ef             	and    $0xffffffef,%eax
f010b3b5:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3ba:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3bf:	83 c8 60             	or     $0x60,%eax
f010b3c2:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3c7:	a0 75 72 65 f0       	mov    0xf0657275,%al
f010b3cc:	83 c8 80             	or     $0xffffff80,%eax
f010b3cf:	a2 75 72 65 f0       	mov    %al,0xf0657275
f010b3d4:	b8 c0 c5 10 f0       	mov    $0xf010c5c0,%eax
f010b3d9:	c1 e8 10             	shr    $0x10,%eax
f010b3dc:	66 a3 76 72 65 f0    	mov    %ax,0xf0657276
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b3e2:	b8 ca c5 10 f0       	mov    $0xf010c5ca,%eax
f010b3e7:	66 a3 78 72 65 f0    	mov    %ax,0xf0657278
f010b3ed:	66 c7 05 7a 72 65 f0 	movw   $0x8,0xf065727a
f010b3f4:	08 00 
f010b3f6:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b3fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3fe:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b403:	a0 7c 72 65 f0       	mov    0xf065727c,%al
f010b408:	83 e0 1f             	and    $0x1f,%eax
f010b40b:	a2 7c 72 65 f0       	mov    %al,0xf065727c
f010b410:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b415:	83 e0 f0             	and    $0xfffffff0,%eax
f010b418:	83 c8 0e             	or     $0xe,%eax
f010b41b:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b420:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b425:	83 e0 ef             	and    $0xffffffef,%eax
f010b428:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b42d:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b432:	83 c8 60             	or     $0x60,%eax
f010b435:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b43a:	a0 7d 72 65 f0       	mov    0xf065727d,%al
f010b43f:	83 c8 80             	or     $0xffffff80,%eax
f010b442:	a2 7d 72 65 f0       	mov    %al,0xf065727d
f010b447:	b8 ca c5 10 f0       	mov    $0xf010c5ca,%eax
f010b44c:	c1 e8 10             	shr    $0x10,%eax
f010b44f:	66 a3 7e 72 65 f0    	mov    %ax,0xf065727e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b455:	b8 d4 c5 10 f0       	mov    $0xf010c5d4,%eax
f010b45a:	66 a3 90 72 65 f0    	mov    %ax,0xf0657290
f010b460:	66 c7 05 92 72 65 f0 	movw   $0x8,0xf0657292
f010b467:	08 00 
f010b469:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b46e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b471:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b476:	a0 94 72 65 f0       	mov    0xf0657294,%al
f010b47b:	83 e0 1f             	and    $0x1f,%eax
f010b47e:	a2 94 72 65 f0       	mov    %al,0xf0657294
f010b483:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b488:	83 e0 f0             	and    $0xfffffff0,%eax
f010b48b:	83 c8 0e             	or     $0xe,%eax
f010b48e:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b493:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b498:	83 e0 ef             	and    $0xffffffef,%eax
f010b49b:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4a0:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b4a5:	83 c8 60             	or     $0x60,%eax
f010b4a8:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4ad:	a0 95 72 65 f0       	mov    0xf0657295,%al
f010b4b2:	83 c8 80             	or     $0xffffff80,%eax
f010b4b5:	a2 95 72 65 f0       	mov    %al,0xf0657295
f010b4ba:	b8 d4 c5 10 f0       	mov    $0xf010c5d4,%eax
f010b4bf:	c1 e8 10             	shr    $0x10,%eax
f010b4c2:	66 a3 96 72 65 f0    	mov    %ax,0xf0657296
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b4c8:	b8 dc c5 10 f0       	mov    $0xf010c5dc,%eax
f010b4cd:	66 a3 98 72 65 f0    	mov    %ax,0xf0657298
f010b4d3:	66 c7 05 9a 72 65 f0 	movw   $0x8,0xf065729a
f010b4da:	08 00 
f010b4dc:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b4e1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4e4:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b4e9:	a0 9c 72 65 f0       	mov    0xf065729c,%al
f010b4ee:	83 e0 1f             	and    $0x1f,%eax
f010b4f1:	a2 9c 72 65 f0       	mov    %al,0xf065729c
f010b4f6:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b4fb:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4fe:	83 c8 0e             	or     $0xe,%eax
f010b501:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b506:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b50b:	83 e0 ef             	and    $0xffffffef,%eax
f010b50e:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b513:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b518:	83 c8 60             	or     $0x60,%eax
f010b51b:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b520:	a0 9d 72 65 f0       	mov    0xf065729d,%al
f010b525:	83 c8 80             	or     $0xffffff80,%eax
f010b528:	a2 9d 72 65 f0       	mov    %al,0xf065729d
f010b52d:	b8 dc c5 10 f0       	mov    $0xf010c5dc,%eax
f010b532:	c1 e8 10             	shr    $0x10,%eax
f010b535:	66 a3 9e 72 65 f0    	mov    %ax,0xf065729e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b53b:	b8 e0 c5 10 f0       	mov    $0xf010c5e0,%eax
f010b540:	66 a3 a0 72 65 f0    	mov    %ax,0xf06572a0
f010b546:	66 c7 05 a2 72 65 f0 	movw   $0x8,0xf06572a2
f010b54d:	08 00 
f010b54f:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b554:	83 e0 e0             	and    $0xffffffe0,%eax
f010b557:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b55c:	a0 a4 72 65 f0       	mov    0xf06572a4,%al
f010b561:	83 e0 1f             	and    $0x1f,%eax
f010b564:	a2 a4 72 65 f0       	mov    %al,0xf06572a4
f010b569:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b56e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b571:	83 c8 0e             	or     $0xe,%eax
f010b574:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b579:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b57e:	83 e0 ef             	and    $0xffffffef,%eax
f010b581:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b586:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b58b:	83 c8 60             	or     $0x60,%eax
f010b58e:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b593:	a0 a5 72 65 f0       	mov    0xf06572a5,%al
f010b598:	83 c8 80             	or     $0xffffff80,%eax
f010b59b:	a2 a5 72 65 f0       	mov    %al,0xf06572a5
f010b5a0:	b8 e0 c5 10 f0       	mov    $0xf010c5e0,%eax
f010b5a5:	c1 e8 10             	shr    $0x10,%eax
f010b5a8:	66 a3 a6 72 65 f0    	mov    %ax,0xf06572a6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b5ae:	b8 e4 c5 10 f0       	mov    $0xf010c5e4,%eax
f010b5b3:	66 a3 a8 72 65 f0    	mov    %ax,0xf06572a8
f010b5b9:	66 c7 05 aa 72 65 f0 	movw   $0x8,0xf06572aa
f010b5c0:	08 00 
f010b5c2:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b5c7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5ca:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b5cf:	a0 ac 72 65 f0       	mov    0xf06572ac,%al
f010b5d4:	83 e0 1f             	and    $0x1f,%eax
f010b5d7:	a2 ac 72 65 f0       	mov    %al,0xf06572ac
f010b5dc:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b5e1:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5e4:	83 c8 0e             	or     $0xe,%eax
f010b5e7:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b5ec:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b5f1:	83 e0 ef             	and    $0xffffffef,%eax
f010b5f4:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b5f9:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b5fe:	83 c8 60             	or     $0x60,%eax
f010b601:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b606:	a0 ad 72 65 f0       	mov    0xf06572ad,%al
f010b60b:	83 c8 80             	or     $0xffffff80,%eax
f010b60e:	a2 ad 72 65 f0       	mov    %al,0xf06572ad
f010b613:	b8 e4 c5 10 f0       	mov    $0xf010c5e4,%eax
f010b618:	c1 e8 10             	shr    $0x10,%eax
f010b61b:	66 a3 ae 72 65 f0    	mov    %ax,0xf06572ae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b621:	b8 e8 c5 10 f0       	mov    $0xf010c5e8,%eax
f010b626:	66 a3 c0 72 65 f0    	mov    %ax,0xf06572c0
f010b62c:	66 c7 05 c2 72 65 f0 	movw   $0x8,0xf06572c2
f010b633:	08 00 
f010b635:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b63a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b63d:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b642:	a0 c4 72 65 f0       	mov    0xf06572c4,%al
f010b647:	83 e0 1f             	and    $0x1f,%eax
f010b64a:	a2 c4 72 65 f0       	mov    %al,0xf06572c4
f010b64f:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b654:	83 e0 f0             	and    $0xfffffff0,%eax
f010b657:	83 c8 0e             	or     $0xe,%eax
f010b65a:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b65f:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b664:	83 e0 ef             	and    $0xffffffef,%eax
f010b667:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b66c:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b671:	83 c8 60             	or     $0x60,%eax
f010b674:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b679:	a0 c5 72 65 f0       	mov    0xf06572c5,%al
f010b67e:	83 c8 80             	or     $0xffffff80,%eax
f010b681:	a2 c5 72 65 f0       	mov    %al,0xf06572c5
f010b686:	b8 e8 c5 10 f0       	mov    $0xf010c5e8,%eax
f010b68b:	c1 e8 10             	shr    $0x10,%eax
f010b68e:	66 a3 c6 72 65 f0    	mov    %ax,0xf06572c6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b694:	b8 ee c5 10 f0       	mov    $0xf010c5ee,%eax
f010b699:	66 a3 c8 72 65 f0    	mov    %ax,0xf06572c8
f010b69f:	66 c7 05 ca 72 65 f0 	movw   $0x8,0xf06572ca
f010b6a6:	08 00 
f010b6a8:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b6ad:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6b0:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b6b5:	a0 cc 72 65 f0       	mov    0xf06572cc,%al
f010b6ba:	83 e0 1f             	and    $0x1f,%eax
f010b6bd:	a2 cc 72 65 f0       	mov    %al,0xf06572cc
f010b6c2:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6c7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6ca:	83 c8 0e             	or     $0xe,%eax
f010b6cd:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6d2:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6d7:	83 e0 ef             	and    $0xffffffef,%eax
f010b6da:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6df:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6e4:	83 c8 60             	or     $0x60,%eax
f010b6e7:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6ec:	a0 cd 72 65 f0       	mov    0xf06572cd,%al
f010b6f1:	83 c8 80             	or     $0xffffff80,%eax
f010b6f4:	a2 cd 72 65 f0       	mov    %al,0xf06572cd
f010b6f9:	b8 ee c5 10 f0       	mov    $0xf010c5ee,%eax
f010b6fe:	c1 e8 10             	shr    $0x10,%eax
f010b701:	66 a3 ce 72 65 f0    	mov    %ax,0xf06572ce
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b707:	b8 f2 c5 10 f0       	mov    $0xf010c5f2,%eax
f010b70c:	66 a3 d0 72 65 f0    	mov    %ax,0xf06572d0
f010b712:	66 c7 05 d2 72 65 f0 	movw   $0x8,0xf06572d2
f010b719:	08 00 
f010b71b:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b720:	83 e0 e0             	and    $0xffffffe0,%eax
f010b723:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b728:	a0 d4 72 65 f0       	mov    0xf06572d4,%al
f010b72d:	83 e0 1f             	and    $0x1f,%eax
f010b730:	a2 d4 72 65 f0       	mov    %al,0xf06572d4
f010b735:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b73a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b73d:	83 c8 0e             	or     $0xe,%eax
f010b740:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b745:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b74a:	83 e0 ef             	and    $0xffffffef,%eax
f010b74d:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b752:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b757:	83 c8 60             	or     $0x60,%eax
f010b75a:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b75f:	a0 d5 72 65 f0       	mov    0xf06572d5,%al
f010b764:	83 c8 80             	or     $0xffffff80,%eax
f010b767:	a2 d5 72 65 f0       	mov    %al,0xf06572d5
f010b76c:	b8 f2 c5 10 f0       	mov    $0xf010c5f2,%eax
f010b771:	c1 e8 10             	shr    $0x10,%eax
f010b774:	66 a3 d6 72 65 f0    	mov    %ax,0xf06572d6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b77a:	b8 f8 c5 10 f0       	mov    $0xf010c5f8,%eax
f010b77f:	66 a3 d8 72 65 f0    	mov    %ax,0xf06572d8
f010b785:	66 c7 05 da 72 65 f0 	movw   $0x8,0xf06572da
f010b78c:	08 00 
f010b78e:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b793:	83 e0 e0             	and    $0xffffffe0,%eax
f010b796:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b79b:	a0 dc 72 65 f0       	mov    0xf06572dc,%al
f010b7a0:	83 e0 1f             	and    $0x1f,%eax
f010b7a3:	a2 dc 72 65 f0       	mov    %al,0xf06572dc
f010b7a8:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7ad:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7b0:	83 c8 0e             	or     $0xe,%eax
f010b7b3:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7b8:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7bd:	83 e0 ef             	and    $0xffffffef,%eax
f010b7c0:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7c5:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7ca:	83 c8 60             	or     $0x60,%eax
f010b7cd:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7d2:	a0 dd 72 65 f0       	mov    0xf06572dd,%al
f010b7d7:	83 c8 80             	or     $0xffffff80,%eax
f010b7da:	a2 dd 72 65 f0       	mov    %al,0xf06572dd
f010b7df:	b8 f8 c5 10 f0       	mov    $0xf010c5f8,%eax
f010b7e4:	c1 e8 10             	shr    $0x10,%eax
f010b7e7:	66 a3 de 72 65 f0    	mov    %ax,0xf06572de


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b7ed:	b8 fe c5 10 f0       	mov    $0xf010c5fe,%eax
f010b7f2:	66 a3 40 73 65 f0    	mov    %ax,0xf0657340
f010b7f8:	66 c7 05 42 73 65 f0 	movw   $0x8,0xf0657342
f010b7ff:	08 00 
f010b801:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b806:	83 e0 e0             	and    $0xffffffe0,%eax
f010b809:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b80e:	a0 44 73 65 f0       	mov    0xf0657344,%al
f010b813:	83 e0 1f             	and    $0x1f,%eax
f010b816:	a2 44 73 65 f0       	mov    %al,0xf0657344
f010b81b:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b820:	83 e0 f0             	and    $0xfffffff0,%eax
f010b823:	83 c8 0e             	or     $0xe,%eax
f010b826:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b82b:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b830:	83 e0 ef             	and    $0xffffffef,%eax
f010b833:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b838:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b83d:	83 c8 60             	or     $0x60,%eax
f010b840:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b845:	a0 45 73 65 f0       	mov    0xf0657345,%al
f010b84a:	83 c8 80             	or     $0xffffff80,%eax
f010b84d:	a2 45 73 65 f0       	mov    %al,0xf0657345
f010b852:	b8 fe c5 10 f0       	mov    $0xf010c5fe,%eax
f010b857:	c1 e8 10             	shr    $0x10,%eax
f010b85a:	66 a3 46 73 65 f0    	mov    %ax,0xf0657346
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b860:	b8 04 c6 10 f0       	mov    $0xf010c604,%eax
f010b865:	66 a3 48 73 65 f0    	mov    %ax,0xf0657348
f010b86b:	66 c7 05 4a 73 65 f0 	movw   $0x8,0xf065734a
f010b872:	08 00 
f010b874:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b879:	83 e0 e0             	and    $0xffffffe0,%eax
f010b87c:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b881:	a0 4c 73 65 f0       	mov    0xf065734c,%al
f010b886:	83 e0 1f             	and    $0x1f,%eax
f010b889:	a2 4c 73 65 f0       	mov    %al,0xf065734c
f010b88e:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b893:	83 e0 f0             	and    $0xfffffff0,%eax
f010b896:	83 c8 0e             	or     $0xe,%eax
f010b899:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b89e:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8a3:	83 e0 ef             	and    $0xffffffef,%eax
f010b8a6:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8ab:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8b0:	83 c8 60             	or     $0x60,%eax
f010b8b3:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8b8:	a0 4d 73 65 f0       	mov    0xf065734d,%al
f010b8bd:	83 c8 80             	or     $0xffffff80,%eax
f010b8c0:	a2 4d 73 65 f0       	mov    %al,0xf065734d
f010b8c5:	b8 04 c6 10 f0       	mov    $0xf010c604,%eax
f010b8ca:	c1 e8 10             	shr    $0x10,%eax
f010b8cd:	66 a3 4e 73 65 f0    	mov    %ax,0xf065734e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b8d3:	b8 0a c6 10 f0       	mov    $0xf010c60a,%eax
f010b8d8:	66 a3 50 73 65 f0    	mov    %ax,0xf0657350
f010b8de:	66 c7 05 52 73 65 f0 	movw   $0x8,0xf0657352
f010b8e5:	08 00 
f010b8e7:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b8ec:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8ef:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b8f4:	a0 54 73 65 f0       	mov    0xf0657354,%al
f010b8f9:	83 e0 1f             	and    $0x1f,%eax
f010b8fc:	a2 54 73 65 f0       	mov    %al,0xf0657354
f010b901:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b906:	83 e0 f0             	and    $0xfffffff0,%eax
f010b909:	83 c8 0e             	or     $0xe,%eax
f010b90c:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b911:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b916:	83 e0 ef             	and    $0xffffffef,%eax
f010b919:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b91e:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b923:	83 c8 60             	or     $0x60,%eax
f010b926:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b92b:	a0 55 73 65 f0       	mov    0xf0657355,%al
f010b930:	83 c8 80             	or     $0xffffff80,%eax
f010b933:	a2 55 73 65 f0       	mov    %al,0xf0657355
f010b938:	b8 0a c6 10 f0       	mov    $0xf010c60a,%eax
f010b93d:	c1 e8 10             	shr    $0x10,%eax
f010b940:	66 a3 56 73 65 f0    	mov    %ax,0xf0657356
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b946:	b8 10 c6 10 f0       	mov    $0xf010c610,%eax
f010b94b:	66 a3 58 73 65 f0    	mov    %ax,0xf0657358
f010b951:	66 c7 05 5a 73 65 f0 	movw   $0x8,0xf065735a
f010b958:	08 00 
f010b95a:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010b95f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b962:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010b967:	a0 5c 73 65 f0       	mov    0xf065735c,%al
f010b96c:	83 e0 1f             	and    $0x1f,%eax
f010b96f:	a2 5c 73 65 f0       	mov    %al,0xf065735c
f010b974:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b979:	83 e0 f0             	and    $0xfffffff0,%eax
f010b97c:	83 c8 0e             	or     $0xe,%eax
f010b97f:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b984:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b989:	83 e0 ef             	and    $0xffffffef,%eax
f010b98c:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b991:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b996:	83 c8 60             	or     $0x60,%eax
f010b999:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b99e:	a0 5d 73 65 f0       	mov    0xf065735d,%al
f010b9a3:	83 c8 80             	or     $0xffffff80,%eax
f010b9a6:	a2 5d 73 65 f0       	mov    %al,0xf065735d
f010b9ab:	b8 10 c6 10 f0       	mov    $0xf010c610,%eax
f010b9b0:	c1 e8 10             	shr    $0x10,%eax
f010b9b3:	66 a3 5e 73 65 f0    	mov    %ax,0xf065735e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b9b9:	b8 16 c6 10 f0       	mov    $0xf010c616,%eax
f010b9be:	66 a3 60 73 65 f0    	mov    %ax,0xf0657360
f010b9c4:	66 c7 05 62 73 65 f0 	movw   $0x8,0xf0657362
f010b9cb:	08 00 
f010b9cd:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010b9d2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9d5:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010b9da:	a0 64 73 65 f0       	mov    0xf0657364,%al
f010b9df:	83 e0 1f             	and    $0x1f,%eax
f010b9e2:	a2 64 73 65 f0       	mov    %al,0xf0657364
f010b9e7:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010b9ec:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9ef:	83 c8 0e             	or     $0xe,%eax
f010b9f2:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010b9f7:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010b9fc:	83 e0 ef             	and    $0xffffffef,%eax
f010b9ff:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba04:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba09:	83 c8 60             	or     $0x60,%eax
f010ba0c:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba11:	a0 65 73 65 f0       	mov    0xf0657365,%al
f010ba16:	83 c8 80             	or     $0xffffff80,%eax
f010ba19:	a2 65 73 65 f0       	mov    %al,0xf0657365
f010ba1e:	b8 16 c6 10 f0       	mov    $0xf010c616,%eax
f010ba23:	c1 e8 10             	shr    $0x10,%eax
f010ba26:	66 a3 66 73 65 f0    	mov    %ax,0xf0657366
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010ba2c:	b8 1c c6 10 f0       	mov    $0xf010c61c,%eax
f010ba31:	66 a3 68 73 65 f0    	mov    %ax,0xf0657368
f010ba37:	66 c7 05 6a 73 65 f0 	movw   $0x8,0xf065736a
f010ba3e:	08 00 
f010ba40:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010ba45:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba48:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010ba4d:	a0 6c 73 65 f0       	mov    0xf065736c,%al
f010ba52:	83 e0 1f             	and    $0x1f,%eax
f010ba55:	a2 6c 73 65 f0       	mov    %al,0xf065736c
f010ba5a:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba5f:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba62:	83 c8 0e             	or     $0xe,%eax
f010ba65:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba6a:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba6f:	83 e0 ef             	and    $0xffffffef,%eax
f010ba72:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba77:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba7c:	83 c8 60             	or     $0x60,%eax
f010ba7f:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba84:	a0 6d 73 65 f0       	mov    0xf065736d,%al
f010ba89:	83 c8 80             	or     $0xffffff80,%eax
f010ba8c:	a2 6d 73 65 f0       	mov    %al,0xf065736d
f010ba91:	b8 1c c6 10 f0       	mov    $0xf010c61c,%eax
f010ba96:	c1 e8 10             	shr    $0x10,%eax
f010ba99:	66 a3 6e 73 65 f0    	mov    %ax,0xf065736e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010ba9f:	b8 22 c6 10 f0       	mov    $0xf010c622,%eax
f010baa4:	66 a3 70 73 65 f0    	mov    %ax,0xf0657370
f010baaa:	66 c7 05 72 73 65 f0 	movw   $0x8,0xf0657372
f010bab1:	08 00 
f010bab3:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bab8:	83 e0 e0             	and    $0xffffffe0,%eax
f010babb:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bac0:	a0 74 73 65 f0       	mov    0xf0657374,%al
f010bac5:	83 e0 1f             	and    $0x1f,%eax
f010bac8:	a2 74 73 65 f0       	mov    %al,0xf0657374
f010bacd:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bad2:	83 e0 f0             	and    $0xfffffff0,%eax
f010bad5:	83 c8 0e             	or     $0xe,%eax
f010bad8:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010badd:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bae2:	83 e0 ef             	and    $0xffffffef,%eax
f010bae5:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010baea:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010baef:	83 c8 60             	or     $0x60,%eax
f010baf2:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010baf7:	a0 75 73 65 f0       	mov    0xf0657375,%al
f010bafc:	83 c8 80             	or     $0xffffff80,%eax
f010baff:	a2 75 73 65 f0       	mov    %al,0xf0657375
f010bb04:	b8 22 c6 10 f0       	mov    $0xf010c622,%eax
f010bb09:	c1 e8 10             	shr    $0x10,%eax
f010bb0c:	66 a3 76 73 65 f0    	mov    %ax,0xf0657376
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb12:	b8 28 c6 10 f0       	mov    $0xf010c628,%eax
f010bb17:	66 a3 78 73 65 f0    	mov    %ax,0xf0657378
f010bb1d:	66 c7 05 7a 73 65 f0 	movw   $0x8,0xf065737a
f010bb24:	08 00 
f010bb26:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bb2b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb2e:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bb33:	a0 7c 73 65 f0       	mov    0xf065737c,%al
f010bb38:	83 e0 1f             	and    $0x1f,%eax
f010bb3b:	a2 7c 73 65 f0       	mov    %al,0xf065737c
f010bb40:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb45:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb48:	83 c8 0e             	or     $0xe,%eax
f010bb4b:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb50:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb55:	83 e0 ef             	and    $0xffffffef,%eax
f010bb58:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb5d:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb62:	83 c8 60             	or     $0x60,%eax
f010bb65:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb6a:	a0 7d 73 65 f0       	mov    0xf065737d,%al
f010bb6f:	83 c8 80             	or     $0xffffff80,%eax
f010bb72:	a2 7d 73 65 f0       	mov    %al,0xf065737d
f010bb77:	b8 28 c6 10 f0       	mov    $0xf010c628,%eax
f010bb7c:	c1 e8 10             	shr    $0x10,%eax
f010bb7f:	66 a3 7e 73 65 f0    	mov    %ax,0xf065737e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bb85:	b8 2e c6 10 f0       	mov    $0xf010c62e,%eax
f010bb8a:	66 a3 80 73 65 f0    	mov    %ax,0xf0657380
f010bb90:	66 c7 05 82 73 65 f0 	movw   $0x8,0xf0657382
f010bb97:	08 00 
f010bb99:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bb9e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bba1:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bba6:	a0 84 73 65 f0       	mov    0xf0657384,%al
f010bbab:	83 e0 1f             	and    $0x1f,%eax
f010bbae:	a2 84 73 65 f0       	mov    %al,0xf0657384
f010bbb3:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbb8:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbbb:	83 c8 0e             	or     $0xe,%eax
f010bbbe:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbc3:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbc8:	83 e0 ef             	and    $0xffffffef,%eax
f010bbcb:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbd0:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbd5:	83 c8 60             	or     $0x60,%eax
f010bbd8:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbdd:	a0 85 73 65 f0       	mov    0xf0657385,%al
f010bbe2:	83 c8 80             	or     $0xffffff80,%eax
f010bbe5:	a2 85 73 65 f0       	mov    %al,0xf0657385
f010bbea:	b8 2e c6 10 f0       	mov    $0xf010c62e,%eax
f010bbef:	c1 e8 10             	shr    $0x10,%eax
f010bbf2:	66 a3 86 73 65 f0    	mov    %ax,0xf0657386
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bbf8:	b8 34 c6 10 f0       	mov    $0xf010c634,%eax
f010bbfd:	66 a3 88 73 65 f0    	mov    %ax,0xf0657388
f010bc03:	66 c7 05 8a 73 65 f0 	movw   $0x8,0xf065738a
f010bc0a:	08 00 
f010bc0c:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bc11:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc14:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bc19:	a0 8c 73 65 f0       	mov    0xf065738c,%al
f010bc1e:	83 e0 1f             	and    $0x1f,%eax
f010bc21:	a2 8c 73 65 f0       	mov    %al,0xf065738c
f010bc26:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc2b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc2e:	83 c8 0e             	or     $0xe,%eax
f010bc31:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc36:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc3b:	83 e0 ef             	and    $0xffffffef,%eax
f010bc3e:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc43:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc48:	83 c8 60             	or     $0x60,%eax
f010bc4b:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc50:	a0 8d 73 65 f0       	mov    0xf065738d,%al
f010bc55:	83 c8 80             	or     $0xffffff80,%eax
f010bc58:	a2 8d 73 65 f0       	mov    %al,0xf065738d
f010bc5d:	b8 34 c6 10 f0       	mov    $0xf010c634,%eax
f010bc62:	c1 e8 10             	shr    $0x10,%eax
f010bc65:	66 a3 8e 73 65 f0    	mov    %ax,0xf065738e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bc6b:	b8 3a c6 10 f0       	mov    $0xf010c63a,%eax
f010bc70:	66 a3 90 73 65 f0    	mov    %ax,0xf0657390
f010bc76:	66 c7 05 92 73 65 f0 	movw   $0x8,0xf0657392
f010bc7d:	08 00 
f010bc7f:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bc84:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc87:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bc8c:	a0 94 73 65 f0       	mov    0xf0657394,%al
f010bc91:	83 e0 1f             	and    $0x1f,%eax
f010bc94:	a2 94 73 65 f0       	mov    %al,0xf0657394
f010bc99:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bc9e:	83 e0 f0             	and    $0xfffffff0,%eax
f010bca1:	83 c8 0e             	or     $0xe,%eax
f010bca4:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bca9:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcae:	83 e0 ef             	and    $0xffffffef,%eax
f010bcb1:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcb6:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcbb:	83 c8 60             	or     $0x60,%eax
f010bcbe:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcc3:	a0 95 73 65 f0       	mov    0xf0657395,%al
f010bcc8:	83 c8 80             	or     $0xffffff80,%eax
f010bccb:	a2 95 73 65 f0       	mov    %al,0xf0657395
f010bcd0:	b8 3a c6 10 f0       	mov    $0xf010c63a,%eax
f010bcd5:	c1 e8 10             	shr    $0x10,%eax
f010bcd8:	66 a3 96 73 65 f0    	mov    %ax,0xf0657396
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bcde:	b8 40 c6 10 f0       	mov    $0xf010c640,%eax
f010bce3:	66 a3 98 73 65 f0    	mov    %ax,0xf0657398
f010bce9:	66 c7 05 9a 73 65 f0 	movw   $0x8,0xf065739a
f010bcf0:	08 00 
f010bcf2:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bcf7:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcfa:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bcff:	a0 9c 73 65 f0       	mov    0xf065739c,%al
f010bd04:	83 e0 1f             	and    $0x1f,%eax
f010bd07:	a2 9c 73 65 f0       	mov    %al,0xf065739c
f010bd0c:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd11:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd14:	83 c8 0e             	or     $0xe,%eax
f010bd17:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd1c:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd21:	83 e0 ef             	and    $0xffffffef,%eax
f010bd24:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd29:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd2e:	83 c8 60             	or     $0x60,%eax
f010bd31:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd36:	a0 9d 73 65 f0       	mov    0xf065739d,%al
f010bd3b:	83 c8 80             	or     $0xffffff80,%eax
f010bd3e:	a2 9d 73 65 f0       	mov    %al,0xf065739d
f010bd43:	b8 40 c6 10 f0       	mov    $0xf010c640,%eax
f010bd48:	c1 e8 10             	shr    $0x10,%eax
f010bd4b:	66 a3 9e 73 65 f0    	mov    %ax,0xf065739e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bd51:	b8 46 c6 10 f0       	mov    $0xf010c646,%eax
f010bd56:	66 a3 a0 73 65 f0    	mov    %ax,0xf06573a0
f010bd5c:	66 c7 05 a2 73 65 f0 	movw   $0x8,0xf06573a2
f010bd63:	08 00 
f010bd65:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010bd6a:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd6d:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bd72:	a0 a4 73 65 f0       	mov    0xf06573a4,%al
f010bd77:	83 e0 1f             	and    $0x1f,%eax
f010bd7a:	a2 a4 73 65 f0       	mov    %al,0xf06573a4
f010bd7f:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bd84:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd87:	83 c8 0e             	or     $0xe,%eax
f010bd8a:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bd8f:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bd94:	83 e0 ef             	and    $0xffffffef,%eax
f010bd97:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bd9c:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bda1:	83 c8 60             	or     $0x60,%eax
f010bda4:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bda9:	a0 a5 73 65 f0       	mov    0xf06573a5,%al
f010bdae:	83 c8 80             	or     $0xffffff80,%eax
f010bdb1:	a2 a5 73 65 f0       	mov    %al,0xf06573a5
f010bdb6:	b8 46 c6 10 f0       	mov    $0xf010c646,%eax
f010bdbb:	c1 e8 10             	shr    $0x10,%eax
f010bdbe:	66 a3 a6 73 65 f0    	mov    %ax,0xf06573a6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010bdc4:	b8 4c c6 10 f0       	mov    $0xf010c64c,%eax
f010bdc9:	66 a3 a8 73 65 f0    	mov    %ax,0xf06573a8
f010bdcf:	66 c7 05 aa 73 65 f0 	movw   $0x8,0xf06573aa
f010bdd6:	08 00 
f010bdd8:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bddd:	83 e0 e0             	and    $0xffffffe0,%eax
f010bde0:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bde5:	a0 ac 73 65 f0       	mov    0xf06573ac,%al
f010bdea:	83 e0 1f             	and    $0x1f,%eax
f010bded:	a2 ac 73 65 f0       	mov    %al,0xf06573ac
f010bdf2:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010bdf7:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdfa:	83 c8 0e             	or     $0xe,%eax
f010bdfd:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be02:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be07:	83 e0 ef             	and    $0xffffffef,%eax
f010be0a:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be0f:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be14:	83 c8 60             	or     $0x60,%eax
f010be17:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be1c:	a0 ad 73 65 f0       	mov    0xf06573ad,%al
f010be21:	83 c8 80             	or     $0xffffff80,%eax
f010be24:	a2 ad 73 65 f0       	mov    %al,0xf06573ad
f010be29:	b8 4c c6 10 f0       	mov    $0xf010c64c,%eax
f010be2e:	c1 e8 10             	shr    $0x10,%eax
f010be31:	66 a3 ae 73 65 f0    	mov    %ax,0xf06573ae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010be37:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010be3c:	66 a3 b0 73 65 f0    	mov    %ax,0xf06573b0
f010be42:	66 c7 05 b2 73 65 f0 	movw   $0x8,0xf06573b2
f010be49:	08 00 
f010be4b:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010be50:	83 e0 e0             	and    $0xffffffe0,%eax
f010be53:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010be58:	a0 b4 73 65 f0       	mov    0xf06573b4,%al
f010be5d:	83 e0 1f             	and    $0x1f,%eax
f010be60:	a2 b4 73 65 f0       	mov    %al,0xf06573b4
f010be65:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be6a:	83 e0 f0             	and    $0xfffffff0,%eax
f010be6d:	83 c8 0e             	or     $0xe,%eax
f010be70:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be75:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be7a:	83 e0 ef             	and    $0xffffffef,%eax
f010be7d:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be82:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be87:	83 c8 60             	or     $0x60,%eax
f010be8a:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be8f:	a0 b5 73 65 f0       	mov    0xf06573b5,%al
f010be94:	83 c8 80             	or     $0xffffff80,%eax
f010be97:	a2 b5 73 65 f0       	mov    %al,0xf06573b5
f010be9c:	b8 52 c6 10 f0       	mov    $0xf010c652,%eax
f010bea1:	c1 e8 10             	shr    $0x10,%eax
f010bea4:	66 a3 b6 73 65 f0    	mov    %ax,0xf06573b6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010beaa:	b8 58 c6 10 f0       	mov    $0xf010c658,%eax
f010beaf:	66 a3 b8 73 65 f0    	mov    %ax,0xf06573b8
f010beb5:	66 c7 05 ba 73 65 f0 	movw   $0x8,0xf06573ba
f010bebc:	08 00 
f010bebe:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010bec3:	83 e0 e0             	and    $0xffffffe0,%eax
f010bec6:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010becb:	a0 bc 73 65 f0       	mov    0xf06573bc,%al
f010bed0:	83 e0 1f             	and    $0x1f,%eax
f010bed3:	a2 bc 73 65 f0       	mov    %al,0xf06573bc
f010bed8:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bedd:	83 e0 f0             	and    $0xfffffff0,%eax
f010bee0:	83 c8 0e             	or     $0xe,%eax
f010bee3:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bee8:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010beed:	83 e0 ef             	and    $0xffffffef,%eax
f010bef0:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bef5:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010befa:	83 c8 60             	or     $0x60,%eax
f010befd:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf02:	a0 bd 73 65 f0       	mov    0xf06573bd,%al
f010bf07:	83 c8 80             	or     $0xffffff80,%eax
f010bf0a:	a2 bd 73 65 f0       	mov    %al,0xf06573bd
f010bf0f:	b8 58 c6 10 f0       	mov    $0xf010c658,%eax
f010bf14:	c1 e8 10             	shr    $0x10,%eax
f010bf17:	66 a3 be 73 65 f0    	mov    %ax,0xf06573be



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bf1d:	c7 05 44 7a 65 f0 00 	movl   $0xefc00000,0xf0657a44
f010bf24:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bf27:	66 c7 05 48 7a 65 f0 	movw   $0x10,0xf0657a48
f010bf2e:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bf30:	66 c7 05 e8 18 19 f0 	movw   $0x68,0xf01918e8
f010bf37:	68 00 
f010bf39:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bf3e:	66 a3 ea 18 19 f0    	mov    %ax,0xf01918ea
f010bf44:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bf49:	c1 e8 10             	shr    $0x10,%eax
f010bf4c:	a2 ec 18 19 f0       	mov    %al,0xf01918ec
f010bf51:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf56:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf59:	83 c8 09             	or     $0x9,%eax
f010bf5c:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf61:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf66:	83 c8 10             	or     $0x10,%eax
f010bf69:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf6e:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf73:	83 e0 9f             	and    $0xffffff9f,%eax
f010bf76:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf7b:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bf80:	83 c8 80             	or     $0xffffff80,%eax
f010bf83:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bf88:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bf8d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf90:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bf95:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bf9a:	83 e0 ef             	and    $0xffffffef,%eax
f010bf9d:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfa2:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfa7:	83 e0 df             	and    $0xffffffdf,%eax
f010bfaa:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfaf:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfb4:	83 c8 40             	or     $0x40,%eax
f010bfb7:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfbc:	a0 ee 18 19 f0       	mov    0xf01918ee,%al
f010bfc1:	83 e0 7f             	and    $0x7f,%eax
f010bfc4:	a2 ee 18 19 f0       	mov    %al,0xf01918ee
f010bfc9:	b8 40 7a 65 f0       	mov    $0xf0657a40,%eax
f010bfce:	c1 e8 18             	shr    $0x18,%eax
f010bfd1:	a2 ef 18 19 f0       	mov    %al,0xf01918ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010bfd6:	a0 ed 18 19 f0       	mov    0xf01918ed,%al
f010bfdb:	83 e0 ef             	and    $0xffffffef,%eax
f010bfde:	a2 ed 18 19 f0       	mov    %al,0xf01918ed
f010bfe3:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010bfe9:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010bfed:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010bff0:	0f 01 1d c8 1c 19 f0 	lidtl  0xf0191cc8
}
f010bff7:	90                   	nop
f010bff8:	c9                   	leave  
f010bff9:	c3                   	ret    

f010bffa <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010bffa:	55                   	push   %ebp
f010bffb:	89 e5                	mov    %esp,%ebp
f010bffd:	53                   	push   %ebx
f010bffe:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c001:	83 ec 08             	sub    $0x8,%esp
f010c004:	ff 75 08             	pushl  0x8(%ebp)
f010c007:	68 1b 6e 13 f0       	push   $0xf0136e1b
f010c00c:	e8 71 4c ff ff       	call   f0100c82 <cprintf>
f010c011:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c014:	8b 45 08             	mov    0x8(%ebp),%eax
f010c017:	83 ec 0c             	sub    $0xc,%esp
f010c01a:	50                   	push   %eax
f010c01b:	e8 fd 00 00 00       	call   f010c11d <print_regs>
f010c020:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c023:	8b 45 08             	mov    0x8(%ebp),%eax
f010c026:	8b 40 20             	mov    0x20(%eax),%eax
f010c029:	0f b7 c0             	movzwl %ax,%eax
f010c02c:	83 ec 08             	sub    $0x8,%esp
f010c02f:	50                   	push   %eax
f010c030:	68 2d 6e 13 f0       	push   $0xf0136e2d
f010c035:	e8 48 4c ff ff       	call   f0100c82 <cprintf>
f010c03a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c03d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c040:	8b 40 24             	mov    0x24(%eax),%eax
f010c043:	0f b7 c0             	movzwl %ax,%eax
f010c046:	83 ec 08             	sub    $0x8,%esp
f010c049:	50                   	push   %eax
f010c04a:	68 40 6e 13 f0       	push   $0xf0136e40
f010c04f:	e8 2e 4c ff ff       	call   f0100c82 <cprintf>
f010c054:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c057:	8b 45 08             	mov    0x8(%ebp),%eax
f010c05a:	8b 58 28             	mov    0x28(%eax),%ebx
f010c05d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c060:	8b 40 28             	mov    0x28(%eax),%eax
f010c063:	83 ec 0c             	sub    $0xc,%esp
f010c066:	50                   	push   %eax
f010c067:	e8 d0 ee ff ff       	call   f010af3c <trapname>
f010c06c:	83 c4 10             	add    $0x10,%esp
f010c06f:	89 c2                	mov    %eax,%edx
f010c071:	8b 45 08             	mov    0x8(%ebp),%eax
f010c074:	8b 40 28             	mov    0x28(%eax),%eax
f010c077:	53                   	push   %ebx
f010c078:	52                   	push   %edx
f010c079:	50                   	push   %eax
f010c07a:	68 53 6e 13 f0       	push   $0xf0136e53
f010c07f:	e8 fe 4b ff ff       	call   f0100c82 <cprintf>
f010c084:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c087:	8b 45 08             	mov    0x8(%ebp),%eax
f010c08a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c08d:	83 ec 08             	sub    $0x8,%esp
f010c090:	50                   	push   %eax
f010c091:	68 6a 6e 13 f0       	push   $0xf0136e6a
f010c096:	e8 e7 4b ff ff       	call   f0100c82 <cprintf>
f010c09b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c09e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0a1:	8b 40 30             	mov    0x30(%eax),%eax
f010c0a4:	83 ec 08             	sub    $0x8,%esp
f010c0a7:	50                   	push   %eax
f010c0a8:	68 79 6e 13 f0       	push   $0xf0136e79
f010c0ad:	e8 d0 4b ff ff       	call   f0100c82 <cprintf>
f010c0b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c0b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b8:	8b 40 34             	mov    0x34(%eax),%eax
f010c0bb:	0f b7 c0             	movzwl %ax,%eax
f010c0be:	83 ec 08             	sub    $0x8,%esp
f010c0c1:	50                   	push   %eax
f010c0c2:	68 88 6e 13 f0       	push   $0xf0136e88
f010c0c7:	e8 b6 4b ff ff       	call   f0100c82 <cprintf>
f010c0cc:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c0cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0d2:	8b 40 38             	mov    0x38(%eax),%eax
f010c0d5:	83 ec 08             	sub    $0x8,%esp
f010c0d8:	50                   	push   %eax
f010c0d9:	68 9b 6e 13 f0       	push   $0xf0136e9b
f010c0de:	e8 9f 4b ff ff       	call   f0100c82 <cprintf>
f010c0e3:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c0e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0e9:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c0ec:	83 ec 08             	sub    $0x8,%esp
f010c0ef:	50                   	push   %eax
f010c0f0:	68 aa 6e 13 f0       	push   $0xf0136eaa
f010c0f5:	e8 88 4b ff ff       	call   f0100c82 <cprintf>
f010c0fa:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c0fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c100:	8b 40 40             	mov    0x40(%eax),%eax
f010c103:	0f b7 c0             	movzwl %ax,%eax
f010c106:	83 ec 08             	sub    $0x8,%esp
f010c109:	50                   	push   %eax
f010c10a:	68 b9 6e 13 f0       	push   $0xf0136eb9
f010c10f:	e8 6e 4b ff ff       	call   f0100c82 <cprintf>
f010c114:	83 c4 10             	add    $0x10,%esp
}
f010c117:	90                   	nop
f010c118:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c11b:	c9                   	leave  
f010c11c:	c3                   	ret    

f010c11d <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c11d:	55                   	push   %ebp
f010c11e:	89 e5                	mov    %esp,%ebp
f010c120:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c123:	8b 45 08             	mov    0x8(%ebp),%eax
f010c126:	8b 00                	mov    (%eax),%eax
f010c128:	83 ec 08             	sub    $0x8,%esp
f010c12b:	50                   	push   %eax
f010c12c:	68 cc 6e 13 f0       	push   $0xf0136ecc
f010c131:	e8 4c 4b ff ff       	call   f0100c82 <cprintf>
f010c136:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c139:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13c:	8b 40 04             	mov    0x4(%eax),%eax
f010c13f:	83 ec 08             	sub    $0x8,%esp
f010c142:	50                   	push   %eax
f010c143:	68 db 6e 13 f0       	push   $0xf0136edb
f010c148:	e8 35 4b ff ff       	call   f0100c82 <cprintf>
f010c14d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c150:	8b 45 08             	mov    0x8(%ebp),%eax
f010c153:	8b 40 08             	mov    0x8(%eax),%eax
f010c156:	83 ec 08             	sub    $0x8,%esp
f010c159:	50                   	push   %eax
f010c15a:	68 ea 6e 13 f0       	push   $0xf0136eea
f010c15f:	e8 1e 4b ff ff       	call   f0100c82 <cprintf>
f010c164:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c167:	8b 45 08             	mov    0x8(%ebp),%eax
f010c16a:	8b 40 0c             	mov    0xc(%eax),%eax
f010c16d:	83 ec 08             	sub    $0x8,%esp
f010c170:	50                   	push   %eax
f010c171:	68 f9 6e 13 f0       	push   $0xf0136ef9
f010c176:	e8 07 4b ff ff       	call   f0100c82 <cprintf>
f010c17b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c17e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c181:	8b 40 10             	mov    0x10(%eax),%eax
f010c184:	83 ec 08             	sub    $0x8,%esp
f010c187:	50                   	push   %eax
f010c188:	68 08 6f 13 f0       	push   $0xf0136f08
f010c18d:	e8 f0 4a ff ff       	call   f0100c82 <cprintf>
f010c192:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c195:	8b 45 08             	mov    0x8(%ebp),%eax
f010c198:	8b 40 14             	mov    0x14(%eax),%eax
f010c19b:	83 ec 08             	sub    $0x8,%esp
f010c19e:	50                   	push   %eax
f010c19f:	68 17 6f 13 f0       	push   $0xf0136f17
f010c1a4:	e8 d9 4a ff ff       	call   f0100c82 <cprintf>
f010c1a9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c1ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1af:	8b 40 18             	mov    0x18(%eax),%eax
f010c1b2:	83 ec 08             	sub    $0x8,%esp
f010c1b5:	50                   	push   %eax
f010c1b6:	68 26 6f 13 f0       	push   $0xf0136f26
f010c1bb:	e8 c2 4a ff ff       	call   f0100c82 <cprintf>
f010c1c0:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c1c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c6:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c1c9:	83 ec 08             	sub    $0x8,%esp
f010c1cc:	50                   	push   %eax
f010c1cd:	68 35 6f 13 f0       	push   $0xf0136f35
f010c1d2:	e8 ab 4a ff ff       	call   f0100c82 <cprintf>
f010c1d7:	83 c4 10             	add    $0x10,%esp
}
f010c1da:	90                   	nop
f010c1db:	c9                   	leave  
f010c1dc:	c3                   	ret    

f010c1dd <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c1dd:	55                   	push   %ebp
f010c1de:	89 e5                	mov    %esp,%ebp
f010c1e0:	57                   	push   %edi
f010c1e1:	56                   	push   %esi
f010c1e2:	53                   	push   %ebx
f010c1e3:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c1e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1e9:	8b 40 28             	mov    0x28(%eax),%eax
f010c1ec:	83 f8 0e             	cmp    $0xe,%eax
f010c1ef:	75 29                	jne    f010c21a <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c1f1:	83 ec 0c             	sub    $0xc,%esp
f010c1f4:	6a 01                	push   $0x1
f010c1f6:	e8 6a 18 00 00       	call   f010da65 <isPageReplacmentAlgorithmLRU>
f010c1fb:	83 c4 10             	add    $0x10,%esp
f010c1fe:	85 c0                	test   %eax,%eax
f010c200:	74 05                	je     f010c207 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c202:	e8 4e 97 ff ff       	call   f0105955 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c207:	83 ec 0c             	sub    $0xc,%esp
f010c20a:	ff 75 08             	pushl  0x8(%ebp)
f010c20d:	e8 3b 02 00 00       	call   f010c44d <fault_handler>
f010c212:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c215:	e9 a5 00 00 00       	jmp    f010c2bf <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c21a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21d:	8b 40 28             	mov    0x28(%eax),%eax
f010c220:	83 f8 30             	cmp    $0x30,%eax
f010c223:	75 42                	jne    f010c267 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c225:	8b 45 08             	mov    0x8(%ebp),%eax
f010c228:	8b 78 04             	mov    0x4(%eax),%edi
f010c22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c22e:	8b 30                	mov    (%eax),%esi
f010c230:	8b 45 08             	mov    0x8(%ebp),%eax
f010c233:	8b 58 10             	mov    0x10(%eax),%ebx
f010c236:	8b 45 08             	mov    0x8(%ebp),%eax
f010c239:	8b 48 18             	mov    0x18(%eax),%ecx
f010c23c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c23f:	8b 50 14             	mov    0x14(%eax),%edx
f010c242:	8b 45 08             	mov    0x8(%ebp),%eax
f010c245:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c248:	83 ec 08             	sub    $0x8,%esp
f010c24b:	57                   	push   %edi
f010c24c:	56                   	push   %esi
f010c24d:	53                   	push   %ebx
f010c24e:	51                   	push   %ecx
f010c24f:	52                   	push   %edx
f010c250:	50                   	push   %eax
f010c251:	e8 5a 0f 00 00       	call   f010d1b0 <syscall>
f010c256:	83 c4 20             	add    $0x20,%esp
f010c259:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c25c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c25f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c262:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c265:	eb 58                	jmp    f010c2bf <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c267:	8b 45 08             	mov    0x8(%ebp),%eax
f010c26a:	8b 40 28             	mov    0x28(%eax),%eax
f010c26d:	83 f8 08             	cmp    $0x8,%eax
f010c270:	75 17                	jne    f010c289 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c272:	83 ec 04             	sub    $0x4,%esp
f010c275:	68 44 6f 13 f0       	push   $0xf0136f44
f010c27a:	68 e7 00 00 00       	push   $0xe7
f010c27f:	68 53 6f 13 f0       	push   $0xf0136f53
f010c284:	e8 72 3f ff ff       	call   f01001fb <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c289:	8b 45 08             	mov    0x8(%ebp),%eax
f010c28c:	8b 40 28             	mov    0x28(%eax),%eax
f010c28f:	83 f8 20             	cmp    $0x20,%eax
f010c292:	75 07                	jne    f010c29b <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c294:	e8 9b 96 ff ff       	call   f0105934 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010c299:	eb 24                	jmp    f010c2bf <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c29b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c29e:	8b 40 34             	mov    0x34(%eax),%eax
f010c2a1:	66 83 f8 08          	cmp    $0x8,%ax
f010c2a5:	75 17                	jne    f010c2be <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c2a7:	83 ec 04             	sub    $0x4,%esp
f010c2aa:	68 64 6f 13 f0       	push   $0xf0136f64
f010c2af:	68 f4 00 00 00       	push   $0xf4
f010c2b4:	68 53 6f 13 f0       	push   $0xf0136f53
f010c2b9:	e8 3d 3f ff ff       	call   f01001fb <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010c2be:	90                   	nop
		}
	}
	return;
}
f010c2bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c2c2:	5b                   	pop    %ebx
f010c2c3:	5e                   	pop    %esi
f010c2c4:	5f                   	pop    %edi
f010c2c5:	5d                   	pop    %ebp
f010c2c6:	c3                   	ret    

f010c2c7 <trap>:

void trap(struct Trapframe *tf)
{
f010c2c7:	55                   	push   %ebp
f010c2c8:	89 e5                	mov    %esp,%ebp
f010c2ca:	57                   	push   %edi
f010c2cb:	56                   	push   %esi
f010c2cc:	53                   	push   %ebx
f010c2cd:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c2d0:	e8 33 7e ff ff       	call   f0104108 <kclock_stop>

	int userTrap = 0;
f010c2d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c2dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2df:	8b 40 34             	mov    0x34(%eax),%eax
f010c2e2:	0f b7 c0             	movzwl %ax,%eax
f010c2e5:	83 e0 03             	and    $0x3,%eax
f010c2e8:	83 f8 03             	cmp    $0x3,%eax
f010c2eb:	75 49                	jne    f010c336 <trap+0x6f>
		assert(curenv);
f010c2ed:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c2f2:	85 c0                	test   %eax,%eax
f010c2f4:	75 19                	jne    f010c30f <trap+0x48>
f010c2f6:	68 7d 6f 13 f0       	push   $0xf0136f7d
f010c2fb:	68 84 6f 13 f0       	push   $0xf0136f84
f010c300:	68 04 01 00 00       	push   $0x104
f010c305:	68 53 6f 13 f0       	push   $0xf0136f53
f010c30a:	e8 ec 3e ff ff       	call   f01001fb <_panic>
		curenv->env_tf = *tf;
f010c30f:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c315:	8b 45 08             	mov    0x8(%ebp),%eax
f010c318:	89 c3                	mov    %eax,%ebx
f010c31a:	b8 11 00 00 00       	mov    $0x11,%eax
f010c31f:	89 d7                	mov    %edx,%edi
f010c321:	89 de                	mov    %ebx,%esi
f010c323:	89 c1                	mov    %eax,%ecx
f010c325:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c327:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c32c:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c32f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c336:	8b 45 08             	mov    0x8(%ebp),%eax
f010c339:	8b 40 28             	mov    0x28(%eax),%eax
f010c33c:	83 f8 20             	cmp    $0x20,%eax
f010c33f:	75 40                	jne    f010c381 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c341:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c345:	0f 84 a6 00 00 00    	je     f010c3f1 <trap+0x12a>
		{
			assert(curenv);
f010c34b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c350:	85 c0                	test   %eax,%eax
f010c352:	75 19                	jne    f010c36d <trap+0xa6>
f010c354:	68 7d 6f 13 f0       	push   $0xf0136f7d
f010c359:	68 84 6f 13 f0       	push   $0xf0136f84
f010c35e:	68 10 01 00 00       	push   $0x110
f010c363:	68 53 6f 13 f0       	push   $0xf0136f53
f010c368:	e8 8e 3e ff ff       	call   f01001fb <_panic>
			curenv->nClocks++ ;
f010c36d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c372:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010c378:	42                   	inc    %edx
f010c379:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010c37f:	eb 70                	jmp    f010c3f1 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c381:	8b 45 08             	mov    0x8(%ebp),%eax
f010c384:	8b 40 28             	mov    0x28(%eax),%eax
f010c387:	83 f8 0e             	cmp    $0xe,%eax
f010c38a:	75 65                	jne    f010c3f1 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c38c:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c391:	84 c0                	test   %al,%al
f010c393:	74 5c                	je     f010c3f1 <trap+0x12a>
			if (userTrap){
f010c395:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c399:	74 2c                	je     f010c3c7 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c39b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3a0:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c3a6:	8b 52 30             	mov    0x30(%edx),%edx
f010c3a9:	89 d1                	mov    %edx,%ecx
f010c3ab:	8a 15 a8 7a 65 f0    	mov    0xf0657aa8,%dl
f010c3b1:	0f b6 d2             	movzbl %dl,%edx
f010c3b4:	01 ca                	add    %ecx,%edx
f010c3b6:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c3b9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c3be:	83 ec 0c             	sub    $0xc,%esp
f010c3c1:	50                   	push   %eax
f010c3c2:	e8 a2 d4 ff ff       	call   f0109869 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c3c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3ca:	8b 40 30             	mov    0x30(%eax),%eax
f010c3cd:	89 c2                	mov    %eax,%edx
f010c3cf:	a0 a8 7a 65 f0       	mov    0xf0657aa8,%al
f010c3d4:	0f b6 c0             	movzbl %al,%eax
f010c3d7:	01 d0                	add    %edx,%eax
f010c3d9:	89 c2                	mov    %eax,%edx
f010c3db:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3de:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c3e1:	e8 4d 7d ff ff       	call   f0104133 <kclock_resume>
				env_pop_tf(tf);
f010c3e6:	83 ec 0c             	sub    $0xc,%esp
f010c3e9:	ff 75 08             	pushl  0x8(%ebp)
f010c3ec:	e8 db d5 ff ff       	call   f01099cc <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c3f1:	83 ec 0c             	sub    $0xc,%esp
f010c3f4:	ff 75 08             	pushl  0x8(%ebp)
f010c3f7:	e8 e1 fd ff ff       	call   f010c1dd <trap_dispatch>
f010c3fc:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c3ff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c403:	74 3d                	je     f010c442 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c405:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c40a:	85 c0                	test   %eax,%eax
f010c40c:	74 0d                	je     f010c41b <trap+0x154>
f010c40e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c413:	8b 40 54             	mov    0x54(%eax),%eax
f010c416:	83 f8 02             	cmp    $0x2,%eax
f010c419:	74 19                	je     f010c434 <trap+0x16d>
f010c41b:	68 9c 6f 13 f0       	push   $0xf0136f9c
f010c420:	68 84 6f 13 f0       	push   $0xf0136f84
f010c425:	68 25 01 00 00       	push   $0x125
f010c42a:	68 53 6f 13 f0       	push   $0xf0136f53
f010c42f:	e8 c7 3d ff ff       	call   f01001fb <_panic>
		env_run(curenv);
f010c434:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c439:	83 ec 0c             	sub    $0xc,%esp
f010c43c:	50                   	push   %eax
f010c43d:	e8 27 d4 ff ff       	call   f0109869 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c442:	83 ec 0c             	sub    $0xc,%esp
f010c445:	ff 75 08             	pushl  0x8(%ebp)
f010c448:	e8 7f d5 ff ff       	call   f01099cc <env_pop_tf>

f010c44d <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010c44d:	55                   	push   %ebp
f010c44e:	89 e5                	mov    %esp,%ebp
f010c450:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c453:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c45a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c45d:	8b 40 34             	mov    0x34(%eax),%eax
f010c460:	0f b7 c0             	movzwl %ax,%eax
f010c463:	83 e0 03             	and    $0x3,%eax
f010c466:	83 f8 03             	cmp    $0x3,%eax
f010c469:	75 07                	jne    f010c472 <fault_handler+0x25>
		userTrap = 1;
f010c46b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c472:	0f 20 d0             	mov    %cr2,%eax
f010c475:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010c478:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c47b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c47e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c482:	75 29                	jne    f010c4ad <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c484:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c48b:	77 40                	ja     f010c4cd <fault_handler+0x80>
f010c48d:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c494:	76 37                	jbe    f010c4cd <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010c496:	83 ec 04             	sub    $0x4,%esp
f010c499:	68 cc 6f 13 f0       	push   $0xf0136fcc
f010c49e:	68 42 01 00 00       	push   $0x142
f010c4a3:	68 53 6f 13 f0       	push   $0xf0136f53
f010c4a8:	e8 4e 3d ff ff       	call   f01001fb <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c4ad:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c4b4:	76 17                	jbe    f010c4cd <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010c4b6:	83 ec 04             	sub    $0x4,%esp
f010c4b9:	68 f0 6f 13 f0       	push   $0xf0136ff0
f010c4be:	68 48 01 00 00       	push   $0x148
f010c4c3:	68 53 6f 13 f0       	push   $0xf0136f53
f010c4c8:	e8 2e 3d ff ff       	call   f01001fb <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c4cd:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4d2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c4d5:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c4da:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c4dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c4e0:	c1 ea 16             	shr    $0x16,%edx
f010c4e3:	c1 e2 02             	shl    $0x2,%edx
f010c4e6:	01 d0                	add    %edx,%eax
f010c4e8:	8b 00                	mov    (%eax),%eax
f010c4ea:	83 e0 01             	and    $0x1,%eax
f010c4ed:	85 c0                	test   %eax,%eax
f010c4ef:	75 28                	jne    f010c519 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c4f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c4f4:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010c4fa:	8d 50 01             	lea    0x1(%eax),%edx
f010c4fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c500:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c506:	83 ec 08             	sub    $0x8,%esp
f010c509:	ff 75 ec             	pushl  -0x14(%ebp)
f010c50c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c50f:	e8 36 16 00 00       	call   f010db4a <table_fault_handler>
f010c514:	83 c4 10             	add    $0x10,%esp
f010c517:	eb 42                	jmp    f010c55b <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c519:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c51c:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010c522:	8d 50 01             	lea    0x1(%eax),%edx
f010c525:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c528:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c52e:	e8 f5 15 00 00       	call   f010db28 <isBufferingEnabled>
f010c533:	84 c0                	test   %al,%al
f010c535:	74 13                	je     f010c54a <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c537:	83 ec 08             	sub    $0x8,%esp
f010c53a:	ff 75 ec             	pushl  -0x14(%ebp)
f010c53d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c540:	e8 40 16 00 00       	call   f010db85 <__page_fault_handler_with_buffering>
f010c545:	83 c4 10             	add    $0x10,%esp
f010c548:	eb 11                	jmp    f010c55b <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c54a:	83 ec 08             	sub    $0x8,%esp
f010c54d:	ff 75 ec             	pushl  -0x14(%ebp)
f010c550:	ff 75 e8             	pushl  -0x18(%ebp)
f010c553:	e8 13 16 00 00       	call   f010db6b <page_fault_handler>
f010c558:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c55b:	0f 20 d8             	mov    %cr3,%eax
f010c55e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c561:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c564:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c567:	90                   	nop
f010c568:	c9                   	leave  
f010c569:	c3                   	ret    

f010c56a <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c56a:	6a 0e                	push   $0xe
f010c56c:	e9 ed 00 00 00       	jmp    f010c65e <_alltraps>
f010c571:	90                   	nop

f010c572 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c572:	6a 00                	push   $0x0
f010c574:	6a 30                	push   $0x30
f010c576:	e9 e3 00 00 00       	jmp    f010c65e <_alltraps>
f010c57b:	90                   	nop

f010c57c <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c57c:	6a 08                	push   $0x8
f010c57e:	e9 db 00 00 00       	jmp    f010c65e <_alltraps>
f010c583:	90                   	nop

f010c584 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c584:	6a 00                	push   $0x0
f010c586:	6a 00                	push   $0x0
f010c588:	e9 d1 00 00 00       	jmp    f010c65e <_alltraps>
f010c58d:	90                   	nop

f010c58e <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c58e:	6a 00                	push   $0x0
f010c590:	6a 01                	push   $0x1
f010c592:	e9 c7 00 00 00       	jmp    f010c65e <_alltraps>
f010c597:	90                   	nop

f010c598 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c598:	6a 00                	push   $0x0
f010c59a:	6a 02                	push   $0x2
f010c59c:	e9 bd 00 00 00       	jmp    f010c65e <_alltraps>
f010c5a1:	90                   	nop

f010c5a2 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c5a2:	6a 00                	push   $0x0
f010c5a4:	6a 03                	push   $0x3
f010c5a6:	e9 b3 00 00 00       	jmp    f010c65e <_alltraps>
f010c5ab:	90                   	nop

f010c5ac <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c5ac:	6a 00                	push   $0x0
f010c5ae:	6a 04                	push   $0x4
f010c5b0:	e9 a9 00 00 00       	jmp    f010c65e <_alltraps>
f010c5b5:	90                   	nop

f010c5b6 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c5b6:	6a 00                	push   $0x0
f010c5b8:	6a 05                	push   $0x5
f010c5ba:	e9 9f 00 00 00       	jmp    f010c65e <_alltraps>
f010c5bf:	90                   	nop

f010c5c0 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c5c0:	6a 00                	push   $0x0
f010c5c2:	6a 06                	push   $0x6
f010c5c4:	e9 95 00 00 00       	jmp    f010c65e <_alltraps>
f010c5c9:	90                   	nop

f010c5ca <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c5ca:	6a 00                	push   $0x0
f010c5cc:	6a 07                	push   $0x7
f010c5ce:	e9 8b 00 00 00       	jmp    f010c65e <_alltraps>
f010c5d3:	90                   	nop

f010c5d4 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c5d4:	6a 0a                	push   $0xa
f010c5d6:	e9 83 00 00 00       	jmp    f010c65e <_alltraps>
f010c5db:	90                   	nop

f010c5dc <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c5dc:	6a 0b                	push   $0xb
f010c5de:	eb 7e                	jmp    f010c65e <_alltraps>

f010c5e0 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c5e0:	6a 0c                	push   $0xc
f010c5e2:	eb 7a                	jmp    f010c65e <_alltraps>

f010c5e4 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c5e4:	6a 0d                	push   $0xd
f010c5e6:	eb 76                	jmp    f010c65e <_alltraps>

f010c5e8 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c5e8:	6a 00                	push   $0x0
f010c5ea:	6a 10                	push   $0x10
f010c5ec:	eb 70                	jmp    f010c65e <_alltraps>

f010c5ee <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c5ee:	6a 11                	push   $0x11
f010c5f0:	eb 6c                	jmp    f010c65e <_alltraps>

f010c5f2 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c5f2:	6a 00                	push   $0x0
f010c5f4:	6a 12                	push   $0x12
f010c5f6:	eb 66                	jmp    f010c65e <_alltraps>

f010c5f8 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c5f8:	6a 00                	push   $0x0
f010c5fa:	6a 13                	push   $0x13
f010c5fc:	eb 60                	jmp    f010c65e <_alltraps>

f010c5fe <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c5fe:	6a 00                	push   $0x0
f010c600:	6a 20                	push   $0x20
f010c602:	eb 5a                	jmp    f010c65e <_alltraps>

f010c604 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c604:	6a 00                	push   $0x0
f010c606:	6a 21                	push   $0x21
f010c608:	eb 54                	jmp    f010c65e <_alltraps>

f010c60a <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c60a:	6a 00                	push   $0x0
f010c60c:	6a 22                	push   $0x22
f010c60e:	eb 4e                	jmp    f010c65e <_alltraps>

f010c610 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c610:	6a 00                	push   $0x0
f010c612:	6a 23                	push   $0x23
f010c614:	eb 48                	jmp    f010c65e <_alltraps>

f010c616 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c616:	6a 00                	push   $0x0
f010c618:	6a 24                	push   $0x24
f010c61a:	eb 42                	jmp    f010c65e <_alltraps>

f010c61c <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c61c:	6a 00                	push   $0x0
f010c61e:	6a 25                	push   $0x25
f010c620:	eb 3c                	jmp    f010c65e <_alltraps>

f010c622 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c622:	6a 00                	push   $0x0
f010c624:	6a 26                	push   $0x26
f010c626:	eb 36                	jmp    f010c65e <_alltraps>

f010c628 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c628:	6a 00                	push   $0x0
f010c62a:	6a 27                	push   $0x27
f010c62c:	eb 30                	jmp    f010c65e <_alltraps>

f010c62e <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c62e:	6a 00                	push   $0x0
f010c630:	6a 28                	push   $0x28
f010c632:	eb 2a                	jmp    f010c65e <_alltraps>

f010c634 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c634:	6a 00                	push   $0x0
f010c636:	6a 29                	push   $0x29
f010c638:	eb 24                	jmp    f010c65e <_alltraps>

f010c63a <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c63a:	6a 00                	push   $0x0
f010c63c:	6a 2a                	push   $0x2a
f010c63e:	eb 1e                	jmp    f010c65e <_alltraps>

f010c640 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c640:	6a 00                	push   $0x0
f010c642:	6a 2b                	push   $0x2b
f010c644:	eb 18                	jmp    f010c65e <_alltraps>

f010c646 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c646:	6a 00                	push   $0x0
f010c648:	6a 2c                	push   $0x2c
f010c64a:	eb 12                	jmp    f010c65e <_alltraps>

f010c64c <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c64c:	6a 00                	push   $0x0
f010c64e:	6a 2d                	push   $0x2d
f010c650:	eb 0c                	jmp    f010c65e <_alltraps>

f010c652 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c652:	6a 00                	push   $0x0
f010c654:	6a 2e                	push   $0x2e
f010c656:	eb 06                	jmp    f010c65e <_alltraps>

f010c658 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c658:	6a 00                	push   $0x0
f010c65a:	6a 2f                	push   $0x2f
f010c65c:	eb 00                	jmp    f010c65e <_alltraps>

f010c65e <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c65e:	1e                   	push   %ds
push %es
f010c65f:	06                   	push   %es
pushal
f010c660:	60                   	pusha  

mov $(GD_KD), %ax
f010c661:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c665:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c667:	8e c0                	mov    %eax,%es

push %esp
f010c669:	54                   	push   %esp

call trap
f010c66a:	e8 58 fc ff ff       	call   f010c2c7 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c66f:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c670:	61                   	popa   
pop %es
f010c671:	07                   	pop    %es
pop %ds
f010c672:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c673:	83 c4 08             	add    $0x8,%esp

iret
f010c676:	cf                   	iret   

f010c677 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c677:	55                   	push   %ebp
f010c678:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c67a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c67d:	8b 15 54 7b 65 f0    	mov    0xf0657b54,%edx
f010c683:	29 d0                	sub    %edx,%eax
f010c685:	c1 f8 03             	sar    $0x3,%eax
f010c688:	89 c2                	mov    %eax,%edx
f010c68a:	89 d0                	mov    %edx,%eax
f010c68c:	c1 e0 02             	shl    $0x2,%eax
f010c68f:	01 d0                	add    %edx,%eax
f010c691:	c1 e0 02             	shl    $0x2,%eax
f010c694:	01 d0                	add    %edx,%eax
f010c696:	c1 e0 02             	shl    $0x2,%eax
f010c699:	01 d0                	add    %edx,%eax
f010c69b:	89 c1                	mov    %eax,%ecx
f010c69d:	c1 e1 08             	shl    $0x8,%ecx
f010c6a0:	01 c8                	add    %ecx,%eax
f010c6a2:	89 c1                	mov    %eax,%ecx
f010c6a4:	c1 e1 10             	shl    $0x10,%ecx
f010c6a7:	01 c8                	add    %ecx,%eax
f010c6a9:	01 c0                	add    %eax,%eax
f010c6ab:	01 d0                	add    %edx,%eax
}
f010c6ad:	5d                   	pop    %ebp
f010c6ae:	c3                   	ret    

f010c6af <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c6b2:	ff 75 08             	pushl  0x8(%ebp)
f010c6b5:	e8 bd ff ff ff       	call   f010c677 <to_frame_number>
f010c6ba:	83 c4 04             	add    $0x4,%esp
f010c6bd:	c1 e0 0c             	shl    $0xc,%eax
}
f010c6c0:	c9                   	leave  
f010c6c1:	c3                   	ret    

f010c6c2 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c6c2:	55                   	push   %ebp
f010c6c3:	89 e5                	mov    %esp,%ebp
f010c6c5:	83 ec 18             	sub    $0x18,%esp
f010c6c8:	8b 45 10             	mov    0x10(%ebp),%eax
f010c6cb:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c6ce:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c6d2:	74 26                	je     f010c6fa <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c6d4:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c6d9:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c6dc:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010c6e2:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010c6e8:	83 ec 04             	sub    $0x4,%esp
f010c6eb:	50                   	push   %eax
f010c6ec:	52                   	push   %edx
f010c6ed:	68 b0 71 13 f0       	push   $0xf01371b0
f010c6f2:	e8 8b 45 ff ff       	call   f0100c82 <cprintf>
f010c6f7:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c6fa:	83 ec 04             	sub    $0x4,%esp
f010c6fd:	ff 75 08             	pushl  0x8(%ebp)
f010c700:	ff 75 0c             	pushl  0xc(%ebp)
f010c703:	68 b9 71 13 f0       	push   $0xf01371b9
f010c708:	e8 75 45 ff ff       	call   f0100c82 <cprintf>
f010c70d:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c710:	90                   	nop
f010c711:	c9                   	leave  
f010c712:	c3                   	ret    

f010c713 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c713:	55                   	push   %ebp
f010c714:	89 e5                	mov    %esp,%ebp
f010c716:	83 ec 18             	sub    $0x18,%esp
f010c719:	8b 45 08             	mov    0x8(%ebp),%eax
f010c71c:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c71f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c723:	83 ec 08             	sub    $0x8,%esp
f010c726:	50                   	push   %eax
f010c727:	68 be 71 13 f0       	push   $0xf01371be
f010c72c:	e8 51 45 ff ff       	call   f0100c82 <cprintf>
f010c731:	83 c4 10             	add    $0x10,%esp
}
f010c734:	90                   	nop
f010c735:	c9                   	leave  
f010c736:	c3                   	ret    

f010c737 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c737:	55                   	push   %ebp
f010c738:	89 e5                	mov    %esp,%ebp
f010c73a:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c73d:	e8 7a 43 ff ff       	call   f0100abc <cons_getc2>
f010c742:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c745:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c748:	c9                   	leave  
f010c749:	c3                   	ret    

f010c74a <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c74a:	55                   	push   %ebp
f010c74b:	89 e5                	mov    %esp,%ebp
f010c74d:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c750:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c755:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c758:	83 ec 0c             	sub    $0xc,%esp
f010c75b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c75e:	50                   	push   %eax
f010c75f:	e8 b7 a0 ff ff       	call   f010681b <allocate_frame>
f010c764:	83 c4 10             	add    $0x10,%esp
f010c767:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c76a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c76e:	75 08                	jne    f010c778 <__sys_allocate_page+0x2e>
		return r ;
f010c770:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c773:	e9 e9 00 00 00       	jmp    f010c861 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c778:	8b 45 08             	mov    0x8(%ebp),%eax
f010c77b:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c780:	77 0c                	ja     f010c78e <__sys_allocate_page+0x44>
f010c782:	8b 45 08             	mov    0x8(%ebp),%eax
f010c785:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c78a:	85 c0                	test   %eax,%eax
f010c78c:	74 0a                	je     f010c798 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c78e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c793:	e9 c9 00 00 00       	jmp    f010c861 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c798:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c79b:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c7a0:	83 f8 04             	cmp    $0x4,%eax
f010c7a3:	74 0a                	je     f010c7af <__sys_allocate_page+0x65>
		return E_INVAL;
f010c7a5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c7aa:	e9 b2 00 00 00       	jmp    f010c861 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c7af:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7b2:	83 ec 0c             	sub    $0xc,%esp
f010c7b5:	50                   	push   %eax
f010c7b6:	e8 f4 fe ff ff       	call   f010c6af <to_physical_address>
f010c7bb:	83 c4 10             	add    $0x10,%esp
f010c7be:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010c7c1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c7c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c7c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c7ca:	6a 02                	push   $0x2
f010c7cc:	68 00 00 80 ef       	push   $0xef800000
f010c7d1:	52                   	push   %edx
f010c7d2:	50                   	push   %eax
f010c7d3:	e8 92 a4 ff ff       	call   f0106c6a <map_frame>
f010c7d8:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010c7db:	83 ec 04             	sub    $0x4,%esp
f010c7de:	68 00 10 00 00       	push   $0x1000
f010c7e3:	6a 00                	push   $0x0
f010c7e5:	68 00 00 80 ef       	push   $0xef800000
f010c7ea:	e8 ed 45 02 00       	call   f0130ddc <memset>
f010c7ef:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010c7f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c7f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7f8:	8b 40 08             	mov    0x8(%eax),%eax
f010c7fb:	40                   	inc    %eax
f010c7fc:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010c800:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c803:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c806:	83 ec 08             	sub    $0x8,%esp
f010c809:	68 00 00 80 ef       	push   $0xef800000
f010c80e:	50                   	push   %eax
f010c80f:	e8 8b a5 ff ff       	call   f0106d9f <unmap_frame>
f010c814:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010c817:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c81a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c81d:	8b 40 08             	mov    0x8(%eax),%eax
f010c820:	48                   	dec    %eax
f010c821:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c825:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c828:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c82b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c82e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c831:	ff 75 0c             	pushl  0xc(%ebp)
f010c834:	51                   	push   %ecx
f010c835:	52                   	push   %edx
f010c836:	50                   	push   %eax
f010c837:	e8 2e a4 ff ff       	call   f0106c6a <map_frame>
f010c83c:	83 c4 10             	add    $0x10,%esp
f010c83f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c842:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c846:	75 14                	jne    f010c85c <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010c848:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c84b:	83 ec 0c             	sub    $0xc,%esp
f010c84e:	50                   	push   %eax
f010c84f:	e8 56 a1 ff ff       	call   f01069aa <decrement_references>
f010c854:	83 c4 10             	add    $0x10,%esp
		return r;
f010c857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c85a:	eb 05                	jmp    f010c861 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010c85c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c861:	c9                   	leave  
f010c862:	c3                   	ret    

f010c863 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c863:	55                   	push   %ebp
f010c864:	89 e5                	mov    %esp,%ebp
f010c866:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c869:	83 ec 04             	sub    $0x4,%esp
f010c86c:	68 c1 71 13 f0       	push   $0xf01371c1
f010c871:	68 b3 00 00 00       	push   $0xb3
f010c876:	68 df 71 13 f0       	push   $0xf01371df
f010c87b:	e8 7b 39 ff ff       	call   f01001fb <_panic>

f010c880 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c880:	55                   	push   %ebp
f010c881:	89 e5                	mov    %esp,%ebp
f010c883:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c886:	83 ec 04             	sub    $0x4,%esp
f010c889:	68 f4 71 13 f0       	push   $0xf01371f4
f010c88e:	68 c3 00 00 00       	push   $0xc3
f010c893:	68 df 71 13 f0       	push   $0xf01371df
f010c898:	e8 5e 39 ff ff       	call   f01001fb <_panic>

f010c89d <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c89d:	55                   	push   %ebp
f010c89e:	89 e5                	mov    %esp,%ebp
f010c8a0:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c8a3:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c8a8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c8ab:	83 ec 04             	sub    $0x4,%esp
f010c8ae:	ff 75 0c             	pushl  0xc(%ebp)
f010c8b1:	ff 75 08             	pushl  0x8(%ebp)
f010c8b4:	50                   	push   %eax
f010c8b5:	e8 15 c3 ff ff       	call   f0108bcf <calculate_required_frames>
f010c8ba:	83 c4 10             	add    $0x10,%esp
}
f010c8bd:	c9                   	leave  
f010c8be:	c3                   	ret    

f010c8bf <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c8bf:	55                   	push   %ebp
f010c8c0:	89 e5                	mov    %esp,%ebp
f010c8c2:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c8c5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c8c8:	83 ec 0c             	sub    $0xc,%esp
f010c8cb:	50                   	push   %eax
f010c8cc:	e8 33 a6 ff ff       	call   f0106f04 <calculate_available_frames>
f010c8d1:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c8d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c8d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c8da:	01 d0                	add    %edx,%eax
}
f010c8dc:	c9                   	leave  
f010c8dd:	c3                   	ret    

f010c8de <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c8de:	55                   	push   %ebp
f010c8df:	89 e5                	mov    %esp,%ebp
f010c8e1:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c8e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c8e7:	83 ec 0c             	sub    $0xc,%esp
f010c8ea:	50                   	push   %eax
f010c8eb:	e8 14 a6 ff ff       	call   f0106f04 <calculate_available_frames>
f010c8f0:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c8f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c8f6:	c9                   	leave  
f010c8f7:	c3                   	ret    

f010c8f8 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c8f8:	55                   	push   %ebp
f010c8f9:	89 e5                	mov    %esp,%ebp
f010c8fb:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c8fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c901:	83 ec 0c             	sub    $0xc,%esp
f010c904:	50                   	push   %eax
f010c905:	e8 fa a5 ff ff       	call   f0106f04 <calculate_available_frames>
f010c90a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c90d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c910:	c9                   	leave  
f010c911:	c3                   	ret    

f010c912 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c912:	55                   	push   %ebp
f010c913:	89 e5                	mov    %esp,%ebp
f010c915:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c918:	83 ec 0c             	sub    $0xc,%esp
f010c91b:	ff 75 08             	pushl  0x8(%ebp)
f010c91e:	e8 d6 31 02 00       	call   f012faf9 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c923:	83 c4 10             	add    $0x10,%esp
}
f010c926:	c9                   	leave  
f010c927:	c3                   	ret    

f010c928 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c928:	55                   	push   %ebp
f010c929:	89 e5                	mov    %esp,%ebp
f010c92b:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c92e:	e8 1e 31 02 00       	call   f012fa51 <scarce_memory>
}
f010c933:	90                   	nop
f010c934:	c9                   	leave  
f010c935:	c3                   	ret    

f010c936 <sys_clearFFL>:

void sys_clearFFL()
{
f010c936:	55                   	push   %ebp
f010c937:	89 e5                	mov    %esp,%ebp
f010c939:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c93c:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f010c941:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c944:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c94b:	eb 12                	jmp    f010c95f <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c94d:	83 ec 0c             	sub    $0xc,%esp
f010c950:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c953:	50                   	push   %eax
f010c954:	e8 c2 9e ff ff       	call   f010681b <allocate_frame>
f010c959:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c95c:	ff 45 f4             	incl   -0xc(%ebp)
f010c95f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c962:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c965:	7c e6                	jl     f010c94d <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c967:	90                   	nop
f010c968:	c9                   	leave  
f010c969:	c3                   	ret    

f010c96a <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c96a:	55                   	push   %ebp
f010c96b:	89 e5                	mov    %esp,%ebp
f010c96d:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c970:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c975:	83 ec 0c             	sub    $0xc,%esp
f010c978:	50                   	push   %eax
f010c979:	e8 1e 73 ff ff       	call   f0103c9c <pf_calculate_allocated_pages>
f010c97e:	83 c4 10             	add    $0x10,%esp
}
f010c981:	c9                   	leave  
f010c982:	c3                   	ret    

f010c983 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c983:	55                   	push   %ebp
f010c984:	89 e5                	mov    %esp,%ebp
f010c986:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c989:	e8 9a 11 00 00       	call   f010db28 <isBufferingEnabled>
f010c98e:	84 c0                	test   %al,%al
f010c990:	74 19                	je     f010c9ab <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c992:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c997:	83 ec 04             	sub    $0x4,%esp
f010c99a:	ff 75 0c             	pushl  0xc(%ebp)
f010c99d:	ff 75 08             	pushl  0x8(%ebp)
f010c9a0:	50                   	push   %eax
f010c9a1:	e8 80 c2 ff ff       	call   f0108c26 <__free_user_mem_with_buffering>
f010c9a6:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c9a9:	eb 18                	jmp    f010c9c3 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c9ab:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9b0:	83 ec 04             	sub    $0x4,%esp
f010c9b3:	ff 75 0c             	pushl  0xc(%ebp)
f010c9b6:	ff 75 08             	pushl  0x8(%ebp)
f010c9b9:	50                   	push   %eax
f010c9ba:	e8 4a c2 ff ff       	call   f0108c09 <free_user_mem>
f010c9bf:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c9c2:	90                   	nop
}
f010c9c3:	c9                   	leave  
f010c9c4:	c3                   	ret    

f010c9c5 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c9c5:	55                   	push   %ebp
f010c9c6:	89 e5                	mov    %esp,%ebp
f010c9c8:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c9cb:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9d0:	83 ec 04             	sub    $0x4,%esp
f010c9d3:	ff 75 0c             	pushl  0xc(%ebp)
f010c9d6:	ff 75 08             	pushl  0x8(%ebp)
f010c9d9:	50                   	push   %eax
f010c9da:	e8 0d c2 ff ff       	call   f0108bec <allocate_user_mem>
f010c9df:	83 c4 10             	add    $0x10,%esp
	return;
f010c9e2:	90                   	nop
}
f010c9e3:	c9                   	leave  
f010c9e4:	c3                   	ret    

f010c9e5 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c9e5:	55                   	push   %ebp
f010c9e6:	89 e5                	mov    %esp,%ebp
f010c9e8:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c9eb:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010c9f0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c9f3:	ff 75 10             	pushl  0x10(%ebp)
f010c9f6:	ff 75 0c             	pushl  0xc(%ebp)
f010c9f9:	ff 75 08             	pushl  0x8(%ebp)
f010c9fc:	50                   	push   %eax
f010c9fd:	e8 93 c0 ff ff       	call   f0108a95 <allocate_chunk>
f010ca02:	83 c4 10             	add    $0x10,%esp
	return;
f010ca05:	90                   	nop
}
f010ca06:	c9                   	leave  
f010ca07:	c3                   	ret    

f010ca08 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010ca08:	55                   	push   %ebp
f010ca09:	89 e5                	mov    %esp,%ebp
f010ca0b:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010ca0e:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca13:	ff 75 10             	pushl  0x10(%ebp)
f010ca16:	ff 75 0c             	pushl  0xc(%ebp)
f010ca19:	ff 75 08             	pushl  0x8(%ebp)
f010ca1c:	50                   	push   %eax
f010ca1d:	e8 21 c2 ff ff       	call   f0108c43 <move_user_mem>
f010ca22:	83 c4 10             	add    $0x10,%esp
	return;
f010ca25:	90                   	nop
}
f010ca26:	c9                   	leave  
f010ca27:	c3                   	ret    

f010ca28 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010ca28:	55                   	push   %ebp
f010ca29:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010ca2b:	a1 30 7b 65 f0       	mov    0xf0657b30,%eax
}
f010ca30:	5d                   	pop    %ebp
f010ca31:	c3                   	ret    

f010ca32 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010ca32:	55                   	push   %ebp
f010ca33:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010ca35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca38:	a3 30 7b 65 f0       	mov    %eax,0xf0657b30
}
f010ca3d:	90                   	nop
f010ca3e:	5d                   	pop    %ebp
f010ca3f:	c3                   	ret    

f010ca40 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010ca40:	55                   	push   %ebp
f010ca41:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010ca43:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca48:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010ca4e:	8b 52 38             	mov    0x38(%edx),%edx
f010ca51:	80 e6 fd             	and    $0xfd,%dh
f010ca54:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ca57:	90                   	nop
f010ca58:	5d                   	pop    %ebp
f010ca59:	c3                   	ret    

f010ca5a <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010ca5a:	55                   	push   %ebp
f010ca5b:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010ca5d:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca62:	8b 15 14 72 65 f0    	mov    0xf0657214,%edx
f010ca68:	8b 52 38             	mov    0x38(%edx),%edx
f010ca6b:	80 ce 02             	or     $0x2,%dh
f010ca6e:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ca71:	90                   	nop
f010ca72:	5d                   	pop    %ebp
f010ca73:	c3                   	ret    

f010ca74 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010ca74:	55                   	push   %ebp
f010ca75:	89 e5                	mov    %esp,%ebp
f010ca77:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010ca7a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010ca7f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ca82:	83 ec 04             	sub    $0x4,%esp
f010ca85:	ff 75 0c             	pushl  0xc(%ebp)
f010ca88:	ff 75 08             	pushl  0x8(%ebp)
f010ca8b:	50                   	push   %eax
f010ca8c:	e8 b0 14 00 00       	call   f010df41 <createSemaphore>
f010ca91:	83 c4 10             	add    $0x10,%esp
}
f010ca94:	c9                   	leave  
f010ca95:	c3                   	ret    

f010ca96 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ca96:	55                   	push   %ebp
f010ca97:	89 e5                	mov    %esp,%ebp
f010ca99:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010ca9c:	83 ec 08             	sub    $0x8,%esp
f010ca9f:	ff 75 0c             	pushl  0xc(%ebp)
f010caa2:	ff 75 08             	pushl  0x8(%ebp)
f010caa5:	e8 b4 14 00 00       	call   f010df5e <waitSemaphore>
f010caaa:	83 c4 10             	add    $0x10,%esp
}
f010caad:	90                   	nop
f010caae:	c9                   	leave  
f010caaf:	c3                   	ret    

f010cab0 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cab0:	55                   	push   %ebp
f010cab1:	89 e5                	mov    %esp,%ebp
f010cab3:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cab6:	83 ec 08             	sub    $0x8,%esp
f010cab9:	ff 75 0c             	pushl  0xc(%ebp)
f010cabc:	ff 75 08             	pushl  0x8(%ebp)
f010cabf:	e8 b7 14 00 00       	call   f010df7b <signalSemaphore>
f010cac4:	83 c4 10             	add    $0x10,%esp
}
f010cac7:	90                   	nop
f010cac8:	c9                   	leave  
f010cac9:	c3                   	ret    

f010caca <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010caca:	55                   	push   %ebp
f010cacb:	89 e5                	mov    %esp,%ebp
f010cacd:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cad0:	83 ec 08             	sub    $0x8,%esp
f010cad3:	ff 75 0c             	pushl  0xc(%ebp)
f010cad6:	ff 75 08             	pushl  0x8(%ebp)
f010cad9:	e8 db 12 00 00       	call   f010ddb9 <get_semaphore_object_ID>
f010cade:	83 c4 10             	add    $0x10,%esp
f010cae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cae8:	78 0c                	js     f010caf6 <sys_getSemaphoreValue+0x2c>
f010caea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010caed:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010caf2:	39 c2                	cmp    %eax,%edx
f010caf4:	72 19                	jb     f010cb0f <sys_getSemaphoreValue+0x45>
f010caf6:	68 14 72 13 f0       	push   $0xf0137214
f010cafb:	68 39 72 13 f0       	push   $0xf0137239
f010cb00:	68 4a 01 00 00       	push   $0x14a
f010cb05:	68 df 71 13 f0       	push   $0xf01371df
f010cb0a:	e8 ec 36 ff ff       	call   f01001fb <_panic>

	return semaphores[semID].value ;
f010cb0f:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010cb15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb18:	89 d0                	mov    %edx,%eax
f010cb1a:	c1 e0 02             	shl    $0x2,%eax
f010cb1d:	01 d0                	add    %edx,%eax
f010cb1f:	01 c0                	add    %eax,%eax
f010cb21:	01 d0                	add    %edx,%eax
f010cb23:	01 c0                	add    %eax,%eax
f010cb25:	01 d0                	add    %edx,%eax
f010cb27:	c1 e0 02             	shl    $0x2,%eax
f010cb2a:	01 c8                	add    %ecx,%eax
f010cb2c:	8b 40 54             	mov    0x54(%eax),%eax
}
f010cb2f:	c9                   	leave  
f010cb30:	c3                   	ret    

f010cb31 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cb31:	55                   	push   %ebp
f010cb32:	89 e5                	mov    %esp,%ebp
f010cb34:	83 ec 18             	sub    $0x18,%esp
f010cb37:	8b 45 10             	mov    0x10(%ebp),%eax
f010cb3a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cb3d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cb41:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cb46:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb49:	83 ec 0c             	sub    $0xc,%esp
f010cb4c:	ff 75 14             	pushl  0x14(%ebp)
f010cb4f:	52                   	push   %edx
f010cb50:	ff 75 0c             	pushl  0xc(%ebp)
f010cb53:	ff 75 08             	pushl  0x8(%ebp)
f010cb56:	50                   	push   %eax
f010cb57:	e8 a9 a9 ff ff       	call   f0107505 <createSharedObject>
f010cb5c:	83 c4 20             	add    $0x20,%esp
}
f010cb5f:	c9                   	leave  
f010cb60:	c3                   	ret    

f010cb61 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cb61:	55                   	push   %ebp
f010cb62:	89 e5                	mov    %esp,%ebp
f010cb64:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cb67:	83 ec 08             	sub    $0x8,%esp
f010cb6a:	ff 75 0c             	pushl  0xc(%ebp)
f010cb6d:	ff 75 08             	pushl  0x8(%ebp)
f010cb70:	e8 b3 a9 ff ff       	call   f0107528 <getSizeOfSharedObject>
f010cb75:	83 c4 10             	add    $0x10,%esp
}
f010cb78:	c9                   	leave  
f010cb79:	c3                   	ret    

f010cb7a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cb7a:	55                   	push   %ebp
f010cb7b:	89 e5                	mov    %esp,%ebp
f010cb7d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cb80:	83 ec 04             	sub    $0x4,%esp
f010cb83:	ff 75 10             	pushl  0x10(%ebp)
f010cb86:	ff 75 0c             	pushl  0xc(%ebp)
f010cb89:	ff 75 08             	pushl  0x8(%ebp)
f010cb8c:	e8 b4 a9 ff ff       	call   f0107545 <getSharedObject>
f010cb91:	83 c4 10             	add    $0x10,%esp
}
f010cb94:	c9                   	leave  
f010cb95:	c3                   	ret    

f010cb96 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cb96:	55                   	push   %ebp
f010cb97:	89 e5                	mov    %esp,%ebp
f010cb99:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cb9c:	83 ec 08             	sub    $0x8,%esp
f010cb9f:	ff 75 0c             	pushl  0xc(%ebp)
f010cba2:	ff 75 08             	pushl  0x8(%ebp)
f010cba5:	e8 b8 a9 ff ff       	call   f0107562 <freeSharedObject>
f010cbaa:	83 c4 10             	add    $0x10,%esp
}
f010cbad:	c9                   	leave  
f010cbae:	c3                   	ret    

f010cbaf <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010cbaf:	55                   	push   %ebp
f010cbb0:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010cbb2:	a1 28 7b 65 f0       	mov    0xf0657b28,%eax
}
f010cbb7:	5d                   	pop    %ebp
f010cbb8:	c3                   	ret    

f010cbb9 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010cbb9:	55                   	push   %ebp
f010cbba:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010cbbc:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbc1:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cbc4:	5d                   	pop    %ebp
f010cbc5:	c3                   	ret    

f010cbc6 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010cbc6:	55                   	push   %ebp
f010cbc7:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010cbc9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cbce:	89 c2                	mov    %eax,%edx
f010cbd0:	a1 10 72 65 f0       	mov    0xf0657210,%eax
f010cbd5:	29 c2                	sub    %eax,%edx
f010cbd7:	89 d0                	mov    %edx,%eax
f010cbd9:	c1 f8 04             	sar    $0x4,%eax
f010cbdc:	89 c2                	mov    %eax,%edx
f010cbde:	89 d0                	mov    %edx,%eax
f010cbe0:	c1 e0 03             	shl    $0x3,%eax
f010cbe3:	01 d0                	add    %edx,%eax
f010cbe5:	01 c0                	add    %eax,%eax
f010cbe7:	01 d0                	add    %edx,%eax
f010cbe9:	c1 e0 03             	shl    $0x3,%eax
f010cbec:	01 d0                	add    %edx,%eax
f010cbee:	89 c1                	mov    %eax,%ecx
f010cbf0:	c1 e1 08             	shl    $0x8,%ecx
f010cbf3:	01 c8                	add    %ecx,%eax
f010cbf5:	01 c0                	add    %eax,%eax
f010cbf7:	01 d0                	add    %edx,%eax
f010cbf9:	01 c0                	add    %eax,%eax
f010cbfb:	01 d0                	add    %edx,%eax
f010cbfd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cc04:	01 d0                	add    %edx,%eax
f010cc06:	89 c2                	mov    %eax,%edx
f010cc08:	c1 e2 09             	shl    $0x9,%edx
f010cc0b:	29 c2                	sub    %eax,%edx
f010cc0d:	89 d0                	mov    %edx,%eax
f010cc0f:	f7 d8                	neg    %eax
}
f010cc11:	5d                   	pop    %ebp
f010cc12:	c3                   	ret    

f010cc13 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cc13:	55                   	push   %ebp
f010cc14:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cc16:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc1b:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cc1e:	5d                   	pop    %ebp
f010cc1f:	c3                   	ret    

f010cc20 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cc20:	55                   	push   %ebp
f010cc21:	89 e5                	mov    %esp,%ebp
f010cc23:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cc26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cc2a:	75 0a                	jne    f010cc36 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cc2c:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc31:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cc34:	eb 22                	jmp    f010cc58 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cc36:	83 ec 04             	sub    $0x4,%esp
f010cc39:	6a 00                	push   $0x0
f010cc3b:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cc3e:	50                   	push   %eax
f010cc3f:	ff 75 08             	pushl  0x8(%ebp)
f010cc42:	e8 c0 cc ff ff       	call   f0109907 <envid2env>
f010cc47:	83 c4 10             	add    $0x10,%esp
f010cc4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cc4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cc51:	79 05                	jns    f010cc58 <sys_destroy_env+0x38>
	{
		return r;
f010cc53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cc56:	eb 5e                	jmp    f010ccb6 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cc58:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cc5b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc60:	39 c2                	cmp    %eax,%edx
f010cc62:	75 1b                	jne    f010cc7f <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cc64:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc69:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc6c:	83 ec 08             	sub    $0x8,%esp
f010cc6f:	50                   	push   %eax
f010cc70:	68 4e 72 13 f0       	push   $0xf013724e
f010cc75:	e8 08 40 ff ff       	call   f0100c82 <cprintf>
f010cc7a:	83 c4 10             	add    $0x10,%esp
f010cc7d:	eb 20                	jmp    f010cc9f <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cc7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cc82:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cc85:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cc8a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc8d:	83 ec 04             	sub    $0x4,%esp
f010cc90:	52                   	push   %edx
f010cc91:	50                   	push   %eax
f010cc92:	68 69 72 13 f0       	push   $0xf0137269
f010cc97:	e8 e6 3f ff ff       	call   f0100c82 <cprintf>
f010cc9c:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cc9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cca2:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cca5:	83 ec 0c             	sub    $0xc,%esp
f010cca8:	50                   	push   %eax
f010cca9:	e8 ba 88 ff ff       	call   f0105568 <sched_kill_env>
f010ccae:	83 c4 10             	add    $0x10,%esp

	return 0;
f010ccb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ccb6:	c9                   	leave  
f010ccb7:	c3                   	ret    

f010ccb8 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010ccb8:	55                   	push   %ebp
f010ccb9:	89 e5                	mov    %esp,%ebp
f010ccbb:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010ccbe:	e8 25 cc ff ff       	call   f01098e8 <env_exit>
	//env_run_cmd_prmpt();
}
f010ccc3:	90                   	nop
f010ccc4:	c9                   	leave  
f010ccc5:	c3                   	ret    

f010ccc6 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ccc6:	55                   	push   %ebp
f010ccc7:	89 e5                	mov    %esp,%ebp
f010ccc9:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cccc:	ff 75 14             	pushl  0x14(%ebp)
f010cccf:	ff 75 10             	pushl  0x10(%ebp)
f010ccd2:	ff 75 0c             	pushl  0xc(%ebp)
f010ccd5:	ff 75 08             	pushl  0x8(%ebp)
f010ccd8:	e8 83 bf ff ff       	call   f0108c60 <env_create>
f010ccdd:	83 c4 10             	add    $0x10,%esp
f010cce0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cce3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cce7:	75 07                	jne    f010ccf0 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cce9:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ccee:	eb 14                	jmp    f010cd04 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ccf0:	83 ec 0c             	sub    $0xc,%esp
f010ccf3:	ff 75 f4             	pushl  -0xc(%ebp)
f010ccf6:	e8 32 84 ff ff       	call   f010512d <sched_new_env>
f010ccfb:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ccfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd01:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010cd04:	c9                   	leave  
f010cd05:	c3                   	ret    

f010cd06 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010cd06:	55                   	push   %ebp
f010cd07:	89 e5                	mov    %esp,%ebp
f010cd09:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010cd0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd0f:	83 ec 0c             	sub    $0xc,%esp
f010cd12:	50                   	push   %eax
f010cd13:	e8 32 84 ff ff       	call   f010514a <sched_run_env>
f010cd18:	83 c4 10             	add    $0x10,%esp
}
f010cd1b:	90                   	nop
f010cd1c:	c9                   	leave  
f010cd1d:	c3                   	ret    

f010cd1e <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010cd1e:	55                   	push   %ebp
f010cd1f:	89 e5                	mov    %esp,%ebp
f010cd21:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010cd24:	0f 31                	rdtsc  
f010cd26:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd29:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010cd2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cd32:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cd35:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010cd38:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cd3b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cd3e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cd41:	89 01                	mov    %eax,(%ecx)
f010cd43:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010cd46:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd49:	c9                   	leave  
f010cd4a:	c2 04 00             	ret    $0x4

f010cd4d <sys_rcr2>:

uint32 sys_rcr2()
{
f010cd4d:	55                   	push   %ebp
f010cd4e:	89 e5                	mov    %esp,%ebp
f010cd50:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cd53:	0f 20 d0             	mov    %cr2,%eax
f010cd56:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010cd59:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010cd5c:	90                   	nop
}
f010cd5d:	c9                   	leave  
f010cd5e:	c3                   	ret    

f010cd5f <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010cd5f:	55                   	push   %ebp
f010cd60:	89 e5                	mov    %esp,%ebp
f010cd62:	83 ec 04             	sub    $0x4,%esp
f010cd65:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd68:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010cd6b:	8a 45 fc             	mov    -0x4(%ebp),%al
f010cd6e:	a2 a8 7a 65 f0       	mov    %al,0xf0657aa8
}
f010cd73:	90                   	nop
f010cd74:	c9                   	leave  
f010cd75:	c3                   	ret    

f010cd76 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010cd76:	55                   	push   %ebp
f010cd77:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010cd79:	c7 05 b0 7c 65 f0 00 	movl   $0x0,0xf0657cb0
f010cd80:	00 00 00 
}
f010cd83:	90                   	nop
f010cd84:	5d                   	pop    %ebp
f010cd85:	c3                   	ret    

f010cd86 <inctst>:
void inctst()
{
f010cd86:	55                   	push   %ebp
f010cd87:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010cd89:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010cd8e:	40                   	inc    %eax
f010cd8f:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
}
f010cd94:	90                   	nop
f010cd95:	5d                   	pop    %ebp
f010cd96:	c3                   	ret    

f010cd97 <gettst>:
uint32 gettst()
{
f010cd97:	55                   	push   %ebp
f010cd98:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010cd9a:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
}
f010cd9f:	5d                   	pop    %ebp
f010cda0:	c3                   	ret    

f010cda1 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010cda1:	55                   	push   %ebp
f010cda2:	89 e5                	mov    %esp,%ebp
f010cda4:	83 ec 28             	sub    $0x28,%esp
f010cda7:	8b 45 14             	mov    0x14(%ebp),%eax
f010cdaa:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010cdad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010cdb4:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010cdb8:	83 f8 65             	cmp    $0x65,%eax
f010cdbb:	74 5d                	je     f010ce1a <tst+0x79>
f010cdbd:	83 f8 65             	cmp    $0x65,%eax
f010cdc0:	7f 0a                	jg     f010cdcc <tst+0x2b>
f010cdc2:	83 f8 62             	cmp    $0x62,%eax
f010cdc5:	74 73                	je     f010ce3a <tst+0x99>
f010cdc7:	e9 91 00 00 00       	jmp    f010ce5d <tst+0xbc>
f010cdcc:	83 f8 67             	cmp    $0x67,%eax
f010cdcf:	74 29                	je     f010cdfa <tst+0x59>
f010cdd1:	83 f8 6c             	cmp    $0x6c,%eax
f010cdd4:	0f 85 83 00 00 00    	jne    f010ce5d <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010cdda:	8b 45 08             	mov    0x8(%ebp),%eax
f010cddd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cde0:	73 09                	jae    f010cdeb <tst+0x4a>
			chk = 1;
f010cde2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010cde9:	eb 68                	jmp    f010ce53 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010cdeb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010cdef:	74 62                	je     f010ce53 <tst+0xb2>
			chk = 1;
f010cdf1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010cdf8:	eb 59                	jmp    f010ce53 <tst+0xb2>
	case 'g':
		if (n > v1)
f010cdfa:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdfd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce00:	76 09                	jbe    f010ce0b <tst+0x6a>
			chk = 1;
f010ce02:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ce09:	eb 4b                	jmp    f010ce56 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010ce0b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ce0f:	74 45                	je     f010ce56 <tst+0xb5>
			chk = 1;
f010ce11:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce18:	eb 3c                	jmp    f010ce56 <tst+0xb5>
	case 'e':
		if (n == v1)
f010ce1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce1d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce20:	75 09                	jne    f010ce2b <tst+0x8a>
			chk = 1;
f010ce22:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ce29:	eb 2e                	jmp    f010ce59 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010ce2b:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ce2f:	74 28                	je     f010ce59 <tst+0xb8>
			chk = 1;
f010ce31:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce38:	eb 1f                	jmp    f010ce59 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ce3a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce3d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce40:	72 1a                	jb     f010ce5c <tst+0xbb>
f010ce42:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce45:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ce48:	77 12                	ja     f010ce5c <tst+0xbb>
			chk = 1;
f010ce4a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ce51:	eb 09                	jmp    f010ce5c <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce53:	90                   	nop
f010ce54:	eb 07                	jmp    f010ce5d <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce56:	90                   	nop
f010ce57:	eb 04                	jmp    f010ce5d <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ce59:	90                   	nop
f010ce5a:	eb 01                	jmp    f010ce5d <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010ce5c:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010ce5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ce61:	75 17                	jne    f010ce7a <tst+0xd9>
f010ce63:	83 ec 04             	sub    $0x4,%esp
f010ce66:	68 81 72 13 f0       	push   $0xf0137281
f010ce6b:	68 00 02 00 00       	push   $0x200
f010ce70:	68 df 71 13 f0       	push   $0xf01371df
f010ce75:	e8 81 33 ff ff       	call   f01001fb <_panic>
	tstcnt++ ;
f010ce7a:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010ce7f:	40                   	inc    %eax
f010ce80:	a3 b0 7c 65 f0       	mov    %eax,0xf0657cb0
	return;
f010ce85:	90                   	nop
}
f010ce86:	c9                   	leave  
f010ce87:	c3                   	ret    

f010ce88 <chktst>:

void chktst(uint32 n)
{
f010ce88:	55                   	push   %ebp
f010ce89:	89 e5                	mov    %esp,%ebp
f010ce8b:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010ce8e:	a1 b0 7c 65 f0       	mov    0xf0657cb0,%eax
f010ce93:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ce96:	75 12                	jne    f010ceaa <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010ce98:	83 ec 0c             	sub    $0xc,%esp
f010ce9b:	68 94 72 13 f0       	push   $0xf0137294
f010cea0:	e8 dd 3d ff ff       	call   f0100c82 <cprintf>
f010cea5:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010cea8:	eb 17                	jmp    f010cec1 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010ceaa:	83 ec 04             	sub    $0x4,%esp
f010cead:	68 c0 72 13 f0       	push   $0xf01372c0
f010ceb2:	68 0a 02 00 00       	push   $0x20a
f010ceb7:	68 df 71 13 f0       	push   $0xf01371df
f010cebc:	e8 3a 33 ff ff       	call   f01001fb <_panic>
}
f010cec1:	c9                   	leave  
f010cec2:	c3                   	ret    

f010cec3 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010cec3:	55                   	push   %ebp
f010cec4:	89 e5                	mov    %esp,%ebp
f010cec6:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010cec9:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010cece:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010ced1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010ced8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010cedf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cee3:	0f 84 a5 00 00 00    	je     f010cf8e <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010cee9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cef0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cef3:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010cef9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cefc:	eb 4a                	jmp    f010cf48 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010cefe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf01:	8b 00                	mov    (%eax),%eax
f010cf03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cf06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cf0e:	89 c2                	mov    %eax,%edx
f010cf10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf13:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cf1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf1d:	01 c8                	add    %ecx,%eax
f010cf1f:	8b 00                	mov    (%eax),%eax
f010cf21:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cf24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cf27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cf2c:	39 c2                	cmp    %eax,%edx
f010cf2e:	74 09                	je     f010cf39 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010cf30:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010cf37:	eb 3e                	jmp    f010cf77 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010cf39:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cf3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf3f:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010cf45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cf48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf4c:	74 08                	je     f010cf56 <sys_check_LRU_lists+0x93>
f010cf4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf51:	8b 40 10             	mov    0x10(%eax),%eax
f010cf54:	eb 05                	jmp    f010cf5b <sys_check_LRU_lists+0x98>
f010cf56:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf5e:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010cf64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf67:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010cf6d:	85 c0                	test   %eax,%eax
f010cf6f:	75 8d                	jne    f010cefe <sys_check_LRU_lists+0x3b>
f010cf71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cf75:	75 87                	jne    f010cefe <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010cf77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf7a:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010cf80:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf83:	39 c2                	cmp    %eax,%edx
f010cf85:	74 07                	je     f010cf8e <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010cf87:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010cf8e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010cf92:	0f 84 a5 00 00 00    	je     f010d03d <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010cf98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cf9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfa2:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010cfa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cfab:	eb 4a                	jmp    f010cff7 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010cfad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfb0:	8b 00                	mov    (%eax),%eax
f010cfb2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cfb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cfb8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfbd:	89 c2                	mov    %eax,%edx
f010cfbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfc2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cfc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfcc:	01 c8                	add    %ecx,%eax
f010cfce:	8b 00                	mov    (%eax),%eax
f010cfd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010cfd3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010cfd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cfdb:	39 c2                	cmp    %eax,%edx
f010cfdd:	74 09                	je     f010cfe8 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010cfdf:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010cfe6:	eb 3e                	jmp    f010d026 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010cfe8:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cfeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfee:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010cff4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cff7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cffb:	74 08                	je     f010d005 <sys_check_LRU_lists+0x142>
f010cffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d000:	8b 40 10             	mov    0x10(%eax),%eax
f010d003:	eb 05                	jmp    f010d00a <sys_check_LRU_lists+0x147>
f010d005:	b8 00 00 00 00       	mov    $0x0,%eax
f010d00a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d00d:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d013:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d016:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d01c:	85 c0                	test   %eax,%eax
f010d01e:	75 8d                	jne    f010cfad <sys_check_LRU_lists+0xea>
f010d020:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d024:	75 87                	jne    f010cfad <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d026:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d029:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d02f:	8b 45 14             	mov    0x14(%ebp),%eax
f010d032:	39 c2                	cmp    %eax,%edx
f010d034:	74 07                	je     f010d03d <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d036:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d03d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d040:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d043:	c9                   	leave  
f010d044:	c3                   	ret    

f010d045 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d045:	55                   	push   %ebp
f010d046:	89 e5                	mov    %esp,%ebp
f010d048:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d04b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f010d050:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d053:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d05a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d05d:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d063:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d066:	eb 65                	jmp    f010d0cd <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d068:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d06f:	eb 3a                	jmp    f010d0ab <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d071:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d074:	8b 00                	mov    (%eax),%eax
f010d076:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d079:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d07c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d081:	89 c2                	mov    %eax,%edx
f010d083:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d086:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d08d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d090:	01 c8                	add    %ecx,%eax
f010d092:	8b 00                	mov    (%eax),%eax
f010d094:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d097:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d09a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d09f:	39 c2                	cmp    %eax,%edx
f010d0a1:	75 05                	jne    f010d0a8 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d0a3:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d0a6:	eb 0b                	jmp    f010d0b3 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d0a8:	ff 45 f4             	incl   -0xc(%ebp)
f010d0ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d0b1:	7c be                	jl     f010d071 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d0b3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d0b7:	7e 08                	jle    f010d0c1 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d0b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d0bc:	e9 ed 00 00 00       	jmp    f010d1ae <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d0c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0c4:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d0cd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d0d1:	74 08                	je     f010d0db <sys_check_LRU_lists_free+0x96>
f010d0d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d0d6:	8b 40 10             	mov    0x10(%eax),%eax
f010d0d9:	eb 05                	jmp    f010d0e0 <sys_check_LRU_lists_free+0x9b>
f010d0db:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0e0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d0e3:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d0e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0ec:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d0f2:	85 c0                	test   %eax,%eax
f010d0f4:	0f 85 6e ff ff ff    	jne    f010d068 <sys_check_LRU_lists_free+0x23>
f010d0fa:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d0fe:	0f 85 64 ff ff ff    	jne    f010d068 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d104:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d107:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d10d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d110:	eb 62                	jmp    f010d174 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d112:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d119:	eb 3a                	jmp    f010d155 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d11b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d11e:	8b 00                	mov    (%eax),%eax
f010d120:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d123:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d126:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d12b:	89 c2                	mov    %eax,%edx
f010d12d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d130:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d137:	8b 45 08             	mov    0x8(%ebp),%eax
f010d13a:	01 c8                	add    %ecx,%eax
f010d13c:	8b 00                	mov    (%eax),%eax
f010d13e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d141:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d144:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d149:	39 c2                	cmp    %eax,%edx
f010d14b:	75 05                	jne    f010d152 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d14d:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d150:	eb 0b                	jmp    f010d15d <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d152:	ff 45 f0             	incl   -0x10(%ebp)
f010d155:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d158:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d15b:	7c be                	jl     f010d11b <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d15d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d161:	7e 05                	jle    f010d168 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d163:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d166:	eb 46                	jmp    f010d1ae <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d168:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d16b:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d171:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d174:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d178:	74 08                	je     f010d182 <sys_check_LRU_lists_free+0x13d>
f010d17a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d17d:	8b 40 10             	mov    0x10(%eax),%eax
f010d180:	eb 05                	jmp    f010d187 <sys_check_LRU_lists_free+0x142>
f010d182:	b8 00 00 00 00       	mov    $0x0,%eax
f010d187:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d18a:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d193:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d199:	85 c0                	test   %eax,%eax
f010d19b:	0f 85 71 ff ff ff    	jne    f010d112 <sys_check_LRU_lists_free+0xcd>
f010d1a1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d1a5:	0f 85 67 ff ff ff    	jne    f010d112 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d1ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d1ae:	c9                   	leave  
f010d1af:	c3                   	ret    

f010d1b0 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d1b0:	55                   	push   %ebp
f010d1b1:	89 e5                	mov    %esp,%ebp
f010d1b3:	56                   	push   %esi
f010d1b4:	53                   	push   %ebx
f010d1b5:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d1b8:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d1bc:	0f 87 0e 04 00 00    	ja     f010d5d0 <syscall+0x420>
f010d1c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1c5:	c1 e0 02             	shl    $0x2,%eax
f010d1c8:	05 dc 72 13 f0       	add    $0xf01372dc,%eax
f010d1cd:	8b 00                	mov    (%eax),%eax
f010d1cf:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d1d1:	8b 45 14             	mov    0x14(%ebp),%eax
f010d1d4:	0f b6 d0             	movzbl %al,%edx
f010d1d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1da:	83 ec 04             	sub    $0x4,%esp
f010d1dd:	52                   	push   %edx
f010d1de:	ff 75 10             	pushl  0x10(%ebp)
f010d1e1:	50                   	push   %eax
f010d1e2:	e8 db f4 ff ff       	call   f010c6c2 <sys_cputs>
f010d1e7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1ea:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1ef:	e9 e1 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d1f4:	e8 3e f5 ff ff       	call   f010c737 <sys_cgetc>
f010d1f9:	e9 d7 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d1fe:	83 ec 08             	sub    $0x8,%esp
f010d201:	ff 75 10             	pushl  0x10(%ebp)
f010d204:	ff 75 0c             	pushl  0xc(%ebp)
f010d207:	e8 91 f6 ff ff       	call   f010c89d <sys_calculate_required_frames>
f010d20c:	83 c4 10             	add    $0x10,%esp
f010d20f:	e9 c1 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d214:	e8 a6 f6 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f010d219:	e9 b7 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d21e:	e8 bb f6 ff ff       	call   f010c8de <sys_calculate_modified_frames>
f010d223:	e9 ad 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d228:	e8 cb f6 ff ff       	call   f010c8f8 <sys_calculate_notmod_frames>
f010d22d:	e9 a3 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d232:	e8 33 f7 ff ff       	call   f010c96a <sys_pf_calculate_allocated_pages>
f010d237:	e9 99 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d23c:	83 ec 0c             	sub    $0xc,%esp
f010d23f:	ff 75 0c             	pushl  0xc(%ebp)
f010d242:	e8 cb f6 ff ff       	call   f010c912 <sys_calculate_pages_tobe_removed_ready_exit>
f010d247:	83 c4 10             	add    $0x10,%esp
f010d24a:	e9 86 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d24f:	e8 d4 f6 ff ff       	call   f010c928 <sys_scarce_memory>
		return 0;
f010d254:	b8 00 00 00 00       	mov    $0x0,%eax
f010d259:	e9 77 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d25e:	83 ec 08             	sub    $0x8,%esp
f010d261:	ff 75 10             	pushl  0x10(%ebp)
f010d264:	ff 75 0c             	pushl  0xc(%ebp)
f010d267:	e8 17 f7 ff ff       	call   f010c983 <sys_free_user_mem>
f010d26c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d26f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d274:	e9 5c 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d279:	8b 55 10             	mov    0x10(%ebp),%edx
f010d27c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d27f:	83 ec 08             	sub    $0x8,%esp
f010d282:	52                   	push   %edx
f010d283:	50                   	push   %eax
f010d284:	e8 c1 f4 ff ff       	call   f010c74a <__sys_allocate_page>
f010d289:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d28c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d291:	e9 3f 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d296:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d299:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d29c:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d29f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2a5:	83 ec 0c             	sub    $0xc,%esp
f010d2a8:	56                   	push   %esi
f010d2a9:	53                   	push   %ebx
f010d2aa:	51                   	push   %ecx
f010d2ab:	52                   	push   %edx
f010d2ac:	50                   	push   %eax
f010d2ad:	e8 b1 f5 ff ff       	call   f010c863 <__sys_map_frame>
f010d2b2:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d2b5:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ba:	e9 16 03 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d2bf:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2c5:	83 ec 08             	sub    $0x8,%esp
f010d2c8:	52                   	push   %edx
f010d2c9:	50                   	push   %eax
f010d2ca:	e8 b1 f5 ff ff       	call   f010c880 <__sys_unmap_frame>
f010d2cf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2d7:	e9 f9 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d2dc:	83 ec 04             	sub    $0x4,%esp
f010d2df:	ff 75 14             	pushl  0x14(%ebp)
f010d2e2:	ff 75 10             	pushl  0x10(%ebp)
f010d2e5:	ff 75 0c             	pushl  0xc(%ebp)
f010d2e8:	e8 f8 f6 ff ff       	call   f010c9e5 <sys_allocate_chunk>
f010d2ed:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d2f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2f5:	e9 db 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010d2fa:	e8 41 f7 ff ff       	call   f010ca40 <sys_disable_interrupt>
		return 0;
f010d2ff:	b8 00 00 00 00       	mov    $0x0,%eax
f010d304:	e9 cc 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d309:	e8 4c f7 ff ff       	call   f010ca5a <sys_enable_interrupt>
		return 0;
f010d30e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d313:	e9 bd 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d318:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d31b:	0f be c0             	movsbl %al,%eax
f010d31e:	83 ec 0c             	sub    $0xc,%esp
f010d321:	50                   	push   %eax
f010d322:	e8 ec f3 ff ff       	call   f010c713 <sys_cputc>
f010d327:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d32a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d32f:	e9 a1 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d334:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d337:	0f be c0             	movsbl %al,%eax
f010d33a:	83 ec 0c             	sub    $0xc,%esp
f010d33d:	50                   	push   %eax
f010d33e:	e8 f3 f5 ff ff       	call   f010c936 <sys_clearFFL>
f010d343:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d346:	b8 00 00 00 00       	mov    $0x0,%eax
f010d34b:	e9 85 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d350:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d353:	83 ec 08             	sub    $0x8,%esp
f010d356:	ff 75 10             	pushl  0x10(%ebp)
f010d359:	50                   	push   %eax
f010d35a:	e8 15 f7 ff ff       	call   f010ca74 <sys_createSemaphore>
f010d35f:	83 c4 10             	add    $0x10,%esp
f010d362:	e9 6e 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d367:	8b 55 10             	mov    0x10(%ebp),%edx
f010d36a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d36d:	83 ec 08             	sub    $0x8,%esp
f010d370:	52                   	push   %edx
f010d371:	50                   	push   %eax
f010d372:	e8 1f f7 ff ff       	call   f010ca96 <sys_waitSemaphore>
f010d377:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d37a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d37f:	e9 51 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d384:	8b 55 10             	mov    0x10(%ebp),%edx
f010d387:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d38a:	83 ec 08             	sub    $0x8,%esp
f010d38d:	52                   	push   %edx
f010d38e:	50                   	push   %eax
f010d38f:	e8 1c f7 ff ff       	call   f010cab0 <sys_signalSemaphore>
f010d394:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d397:	b8 00 00 00 00       	mov    $0x0,%eax
f010d39c:	e9 34 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d3a1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d3a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3a7:	83 ec 08             	sub    $0x8,%esp
f010d3aa:	52                   	push   %edx
f010d3ab:	50                   	push   %eax
f010d3ac:	e8 19 f7 ff ff       	call   f010caca <sys_getSemaphoreValue>
f010d3b1:	83 c4 10             	add    $0x10,%esp
f010d3b4:	e9 1c 02 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d3b9:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d3bc:	8b 45 14             	mov    0x14(%ebp),%eax
f010d3bf:	0f b6 d0             	movzbl %al,%edx
f010d3c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3c5:	51                   	push   %ecx
f010d3c6:	52                   	push   %edx
f010d3c7:	ff 75 10             	pushl  0x10(%ebp)
f010d3ca:	50                   	push   %eax
f010d3cb:	e8 61 f7 ff ff       	call   f010cb31 <sys_createSharedObject>
f010d3d0:	83 c4 10             	add    $0x10,%esp
f010d3d3:	e9 fd 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d3d8:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d3db:	8b 55 10             	mov    0x10(%ebp),%edx
f010d3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3e1:	83 ec 04             	sub    $0x4,%esp
f010d3e4:	51                   	push   %ecx
f010d3e5:	52                   	push   %edx
f010d3e6:	50                   	push   %eax
f010d3e7:	e8 8e f7 ff ff       	call   f010cb7a <sys_getSharedObject>
f010d3ec:	83 c4 10             	add    $0x10,%esp
f010d3ef:	e9 e1 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d3f4:	8b 55 10             	mov    0x10(%ebp),%edx
f010d3f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3fa:	83 ec 08             	sub    $0x8,%esp
f010d3fd:	52                   	push   %edx
f010d3fe:	50                   	push   %eax
f010d3ff:	e8 92 f7 ff ff       	call   f010cb96 <sys_freeSharedObject>
f010d404:	83 c4 10             	add    $0x10,%esp
f010d407:	e9 c9 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d40c:	8b 55 10             	mov    0x10(%ebp),%edx
f010d40f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d412:	83 ec 08             	sub    $0x8,%esp
f010d415:	52                   	push   %edx
f010d416:	50                   	push   %eax
f010d417:	e8 45 f7 ff ff       	call   f010cb61 <sys_getSizeOfSharedObject>
f010d41c:	83 c4 10             	add    $0x10,%esp
f010d41f:	e9 b1 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d424:	e8 86 f7 ff ff       	call   f010cbaf <sys_getMaxShares>
f010d429:	e9 a7 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d42e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d431:	ff 75 18             	pushl  0x18(%ebp)
f010d434:	ff 75 14             	pushl  0x14(%ebp)
f010d437:	ff 75 10             	pushl  0x10(%ebp)
f010d43a:	50                   	push   %eax
f010d43b:	e8 86 f8 ff ff       	call   f010ccc6 <sys_create_env>
f010d440:	83 c4 10             	add    $0x10,%esp
f010d443:	e9 8d 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d448:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d44b:	83 ec 0c             	sub    $0xc,%esp
f010d44e:	50                   	push   %eax
f010d44f:	e8 b2 f8 ff ff       	call   f010cd06 <sys_run_env>
f010d454:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d457:	b8 00 00 00 00       	mov    $0x0,%eax
f010d45c:	e9 74 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d461:	e8 60 f7 ff ff       	call   f010cbc6 <sys_getenvindex>
f010d466:	e9 6a 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d46b:	e8 49 f7 ff ff       	call   f010cbb9 <sys_getenvid>
f010d470:	e9 60 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d475:	e8 99 f7 ff ff       	call   f010cc13 <sys_getparentenvid>
f010d47a:	e9 56 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d47f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d482:	83 ec 0c             	sub    $0xc,%esp
f010d485:	50                   	push   %eax
f010d486:	e8 95 f7 ff ff       	call   f010cc20 <sys_destroy_env>
f010d48b:	83 c4 10             	add    $0x10,%esp
f010d48e:	e9 42 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d493:	e8 20 f8 ff ff       	call   f010ccb8 <sys_exit_env>
		return 0;
f010d498:	b8 00 00 00 00       	mov    $0x0,%eax
f010d49d:	e9 33 01 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d4a2:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d4a5:	83 ec 0c             	sub    $0xc,%esp
f010d4a8:	50                   	push   %eax
f010d4a9:	e8 70 f8 ff ff       	call   f010cd1e <sys_get_virtual_time>
f010d4ae:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d4b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d4b7:	8b 45 10             	mov    0x10(%ebp),%eax
f010d4ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d4bd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d4c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4c3:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d4c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d4c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4cb:	89 10                	mov    %edx,(%eax)
		return 0;
f010d4cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4d2:	e9 fe 00 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d4d7:	83 ec 04             	sub    $0x4,%esp
f010d4da:	ff 75 14             	pushl  0x14(%ebp)
f010d4dd:	ff 75 10             	pushl  0x10(%ebp)
f010d4e0:	ff 75 0c             	pushl  0xc(%ebp)
f010d4e3:	e8 20 f5 ff ff       	call   f010ca08 <sys_move_user_mem>
f010d4e8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4eb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4f0:	e9 e0 00 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d4f5:	e8 53 f8 ff ff       	call   f010cd4d <sys_rcr2>
f010d4fa:	e9 d6 00 00 00       	jmp    f010d5d5 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d4ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d502:	0f b6 c0             	movzbl %al,%eax
f010d505:	83 ec 0c             	sub    $0xc,%esp
f010d508:	50                   	push   %eax
f010d509:	e8 51 f8 ff ff       	call   f010cd5f <sys_bypassPageFault>
f010d50e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d511:	b8 00 00 00 00       	mov    $0x0,%eax
f010d516:	e9 ba 00 00 00       	jmp    f010d5d5 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010d51b:	e8 56 f8 ff ff       	call   f010cd76 <rsttst>
		return 0;
f010d520:	b8 00 00 00 00       	mov    $0x0,%eax
f010d525:	e9 ab 00 00 00       	jmp    f010d5d5 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010d52a:	e8 57 f8 ff ff       	call   f010cd86 <inctst>
		return 0;
f010d52f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d534:	e9 9c 00 00 00       	jmp    f010d5d5 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010d539:	83 ec 0c             	sub    $0xc,%esp
f010d53c:	ff 75 0c             	pushl  0xc(%ebp)
f010d53f:	e8 44 f9 ff ff       	call   f010ce88 <chktst>
f010d544:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d547:	b8 00 00 00 00       	mov    $0x0,%eax
f010d54c:	e9 84 00 00 00       	jmp    f010d5d5 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010d551:	e8 41 f8 ff ff       	call   f010cd97 <gettst>
f010d556:	eb 7d                	jmp    f010d5d5 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d558:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d55b:	8b 45 18             	mov    0x18(%ebp),%eax
f010d55e:	0f be c0             	movsbl %al,%eax
f010d561:	83 ec 0c             	sub    $0xc,%esp
f010d564:	52                   	push   %edx
f010d565:	50                   	push   %eax
f010d566:	ff 75 14             	pushl  0x14(%ebp)
f010d569:	ff 75 10             	pushl  0x10(%ebp)
f010d56c:	ff 75 0c             	pushl  0xc(%ebp)
f010d56f:	e8 2d f8 ff ff       	call   f010cda1 <tst>
f010d574:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d577:	b8 00 00 00 00       	mov    $0x0,%eax
f010d57c:	eb 57                	jmp    f010d5d5 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d57e:	e8 a5 f4 ff ff       	call   f010ca28 <sys_get_heap_strategy>
f010d583:	eb 50                	jmp    f010d5d5 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d585:	83 ec 0c             	sub    $0xc,%esp
f010d588:	ff 75 0c             	pushl  0xc(%ebp)
f010d58b:	e8 a2 f4 ff ff       	call   f010ca32 <sys_set_uheap_strategy>
f010d590:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d593:	b8 00 00 00 00       	mov    $0x0,%eax
f010d598:	eb 3b                	jmp    f010d5d5 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d59a:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d59d:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d5a0:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a6:	53                   	push   %ebx
f010d5a7:	51                   	push   %ecx
f010d5a8:	52                   	push   %edx
f010d5a9:	50                   	push   %eax
f010d5aa:	e8 14 f9 ff ff       	call   f010cec3 <sys_check_LRU_lists>
f010d5af:	83 c4 10             	add    $0x10,%esp
f010d5b2:	eb 21                	jmp    f010d5d5 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d5b4:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5ba:	83 ec 08             	sub    $0x8,%esp
f010d5bd:	52                   	push   %edx
f010d5be:	50                   	push   %eax
f010d5bf:	e8 81 fa ff ff       	call   f010d045 <sys_check_LRU_lists_free>
f010d5c4:	83 c4 10             	add    $0x10,%esp
f010d5c7:	eb 0c                	jmp    f010d5d5 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d5c9:	b8 03 00 00 00       	mov    $0x3,%eax
f010d5ce:	eb 05                	jmp    f010d5d5 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d5d0:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d5d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d5d8:	5b                   	pop    %ebx
f010d5d9:	5e                   	pop    %esi
f010d5da:	5d                   	pop    %ebp
f010d5db:	c3                   	ret    

f010d5dc <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d5dc:	55                   	push   %ebp
f010d5dd:	89 e5                	mov    %esp,%ebp
f010d5df:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d5e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5e5:	8b 00                	mov    (%eax),%eax
f010d5e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d5ea:	8b 45 10             	mov    0x10(%ebp),%eax
f010d5ed:	8b 00                	mov    (%eax),%eax
f010d5ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d5f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d5f9:	e9 ca 00 00 00       	jmp    f010d6c8 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d5fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d601:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d604:	01 d0                	add    %edx,%eax
f010d606:	89 c2                	mov    %eax,%edx
f010d608:	c1 ea 1f             	shr    $0x1f,%edx
f010d60b:	01 d0                	add    %edx,%eax
f010d60d:	d1 f8                	sar    %eax
f010d60f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d612:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d615:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d618:	eb 03                	jmp    f010d61d <stab_binsearch+0x41>
			m--;
f010d61a:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d61d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d620:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d623:	7c 1e                	jl     f010d643 <stab_binsearch+0x67>
f010d625:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d628:	89 d0                	mov    %edx,%eax
f010d62a:	01 c0                	add    %eax,%eax
f010d62c:	01 d0                	add    %edx,%eax
f010d62e:	c1 e0 02             	shl    $0x2,%eax
f010d631:	89 c2                	mov    %eax,%edx
f010d633:	8b 45 08             	mov    0x8(%ebp),%eax
f010d636:	01 d0                	add    %edx,%eax
f010d638:	8a 40 04             	mov    0x4(%eax),%al
f010d63b:	0f b6 c0             	movzbl %al,%eax
f010d63e:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d641:	75 d7                	jne    f010d61a <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d643:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d646:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d649:	7d 09                	jge    f010d654 <stab_binsearch+0x78>
			l = true_m + 1;
f010d64b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d64e:	40                   	inc    %eax
f010d64f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d652:	eb 74                	jmp    f010d6c8 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d654:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d65b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d65e:	89 d0                	mov    %edx,%eax
f010d660:	01 c0                	add    %eax,%eax
f010d662:	01 d0                	add    %edx,%eax
f010d664:	c1 e0 02             	shl    $0x2,%eax
f010d667:	89 c2                	mov    %eax,%edx
f010d669:	8b 45 08             	mov    0x8(%ebp),%eax
f010d66c:	01 d0                	add    %edx,%eax
f010d66e:	8b 40 08             	mov    0x8(%eax),%eax
f010d671:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d674:	73 11                	jae    f010d687 <stab_binsearch+0xab>
			*region_left = m;
f010d676:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d679:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d67c:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d67e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d681:	40                   	inc    %eax
f010d682:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d685:	eb 41                	jmp    f010d6c8 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d687:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d68a:	89 d0                	mov    %edx,%eax
f010d68c:	01 c0                	add    %eax,%eax
f010d68e:	01 d0                	add    %edx,%eax
f010d690:	c1 e0 02             	shl    $0x2,%eax
f010d693:	89 c2                	mov    %eax,%edx
f010d695:	8b 45 08             	mov    0x8(%ebp),%eax
f010d698:	01 d0                	add    %edx,%eax
f010d69a:	8b 40 08             	mov    0x8(%eax),%eax
f010d69d:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d6a0:	76 14                	jbe    f010d6b6 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d6a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6a5:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d6a8:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6ab:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d6ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6b0:	48                   	dec    %eax
f010d6b1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d6b4:	eb 12                	jmp    f010d6c8 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d6b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d6bc:	89 10                	mov    %edx,(%eax)
			l = m;
f010d6be:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d6c4:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d6c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d6cb:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d6ce:	0f 8e 2a ff ff ff    	jle    f010d5fe <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d6d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6d8:	75 0f                	jne    f010d6e9 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d6da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6dd:	8b 00                	mov    (%eax),%eax
f010d6df:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d6e2:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6e5:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d6e7:	eb 3d                	jmp    f010d726 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d6e9:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6ec:	8b 00                	mov    (%eax),%eax
f010d6ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d6f1:	eb 03                	jmp    f010d6f6 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d6f3:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d6f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6f9:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d6fb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d6fe:	7d 1e                	jge    f010d71e <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d700:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d703:	89 d0                	mov    %edx,%eax
f010d705:	01 c0                	add    %eax,%eax
f010d707:	01 d0                	add    %edx,%eax
f010d709:	c1 e0 02             	shl    $0x2,%eax
f010d70c:	89 c2                	mov    %eax,%edx
f010d70e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d711:	01 d0                	add    %edx,%eax
f010d713:	8a 40 04             	mov    0x4(%eax),%al
f010d716:	0f b6 c0             	movzbl %al,%eax
f010d719:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d71c:	75 d5                	jne    f010d6f3 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d71e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d721:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d724:	89 10                	mov    %edx,(%eax)
	}
}
f010d726:	90                   	nop
f010d727:	c9                   	leave  
f010d728:	c3                   	ret    

f010d729 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d729:	55                   	push   %ebp
f010d72a:	89 e5                	mov    %esp,%ebp
f010d72c:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d72f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d732:	c7 00 a0 73 13 f0    	movl   $0xf01373a0,(%eax)
	info->eip_line = 0;
f010d738:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d73b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d742:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d745:	c7 40 08 a0 73 13 f0 	movl   $0xf01373a0,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d74c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d74f:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d756:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d759:	8b 55 08             	mov    0x8(%ebp),%edx
f010d75c:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d75f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d762:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d769:	8b 45 08             	mov    0x8(%ebp),%eax
f010d76c:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d771:	76 1e                	jbe    f010d791 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d773:	c7 45 f4 10 d0 13 f0 	movl   $0xf013d010,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d77a:	c7 45 f0 98 bf 17 f0 	movl   $0xf017bf98,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d781:	c7 45 ec 99 bf 17 f0 	movl   $0xf017bf99,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d788:	c7 45 e8 23 8a 18 f0 	movl   $0xf0188a23,-0x18(%ebp)
f010d78f:	eb 2a                	jmp    f010d7bb <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d791:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d798:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d79b:	8b 00                	mov    (%eax),%eax
f010d79d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d7a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7a3:	8b 40 04             	mov    0x4(%eax),%eax
f010d7a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d7a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7ac:	8b 40 08             	mov    0x8(%eax),%eax
f010d7af:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d7b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d7b5:	8b 40 0c             	mov    0xc(%eax),%eax
f010d7b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d7bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7be:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d7c1:	76 0a                	jbe    f010d7cd <debuginfo_eip+0xa4>
f010d7c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7c6:	48                   	dec    %eax
f010d7c7:	8a 00                	mov    (%eax),%al
f010d7c9:	84 c0                	test   %al,%al
f010d7cb:	74 0a                	je     f010d7d7 <debuginfo_eip+0xae>
		return -1;
f010d7cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d7d2:	e9 01 02 00 00       	jmp    f010d9d8 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d7d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d7de:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d7e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7e4:	29 c2                	sub    %eax,%edx
f010d7e6:	89 d0                	mov    %edx,%eax
f010d7e8:	c1 f8 02             	sar    $0x2,%eax
f010d7eb:	89 c2                	mov    %eax,%edx
f010d7ed:	89 d0                	mov    %edx,%eax
f010d7ef:	c1 e0 02             	shl    $0x2,%eax
f010d7f2:	01 d0                	add    %edx,%eax
f010d7f4:	c1 e0 02             	shl    $0x2,%eax
f010d7f7:	01 d0                	add    %edx,%eax
f010d7f9:	c1 e0 02             	shl    $0x2,%eax
f010d7fc:	01 d0                	add    %edx,%eax
f010d7fe:	89 c1                	mov    %eax,%ecx
f010d800:	c1 e1 08             	shl    $0x8,%ecx
f010d803:	01 c8                	add    %ecx,%eax
f010d805:	89 c1                	mov    %eax,%ecx
f010d807:	c1 e1 10             	shl    $0x10,%ecx
f010d80a:	01 c8                	add    %ecx,%eax
f010d80c:	01 c0                	add    %eax,%eax
f010d80e:	01 d0                	add    %edx,%eax
f010d810:	48                   	dec    %eax
f010d811:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d814:	ff 75 08             	pushl  0x8(%ebp)
f010d817:	6a 64                	push   $0x64
f010d819:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d81c:	50                   	push   %eax
f010d81d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d820:	50                   	push   %eax
f010d821:	ff 75 f4             	pushl  -0xc(%ebp)
f010d824:	e8 b3 fd ff ff       	call   f010d5dc <stab_binsearch>
f010d829:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d82c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d82f:	85 c0                	test   %eax,%eax
f010d831:	75 0a                	jne    f010d83d <debuginfo_eip+0x114>
		return -1;
f010d833:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d838:	e9 9b 01 00 00       	jmp    f010d9d8 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d83d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d840:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d843:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d846:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d849:	ff 75 08             	pushl  0x8(%ebp)
f010d84c:	6a 24                	push   $0x24
f010d84e:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d851:	50                   	push   %eax
f010d852:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d855:	50                   	push   %eax
f010d856:	ff 75 f4             	pushl  -0xc(%ebp)
f010d859:	e8 7e fd ff ff       	call   f010d5dc <stab_binsearch>
f010d85e:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d861:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d864:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d867:	39 c2                	cmp    %eax,%edx
f010d869:	0f 8f 86 00 00 00    	jg     f010d8f5 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d86f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d872:	89 c2                	mov    %eax,%edx
f010d874:	89 d0                	mov    %edx,%eax
f010d876:	01 c0                	add    %eax,%eax
f010d878:	01 d0                	add    %edx,%eax
f010d87a:	c1 e0 02             	shl    $0x2,%eax
f010d87d:	89 c2                	mov    %eax,%edx
f010d87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d882:	01 d0                	add    %edx,%eax
f010d884:	8b 00                	mov    (%eax),%eax
f010d886:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d889:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d88c:	29 d1                	sub    %edx,%ecx
f010d88e:	89 ca                	mov    %ecx,%edx
f010d890:	39 d0                	cmp    %edx,%eax
f010d892:	73 22                	jae    f010d8b6 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d894:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d897:	89 c2                	mov    %eax,%edx
f010d899:	89 d0                	mov    %edx,%eax
f010d89b:	01 c0                	add    %eax,%eax
f010d89d:	01 d0                	add    %edx,%eax
f010d89f:	c1 e0 02             	shl    $0x2,%eax
f010d8a2:	89 c2                	mov    %eax,%edx
f010d8a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8a7:	01 d0                	add    %edx,%eax
f010d8a9:	8b 10                	mov    (%eax),%edx
f010d8ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8ae:	01 c2                	add    %eax,%edx
f010d8b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8b3:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d8b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8b9:	89 c2                	mov    %eax,%edx
f010d8bb:	89 d0                	mov    %edx,%eax
f010d8bd:	01 c0                	add    %eax,%eax
f010d8bf:	01 d0                	add    %edx,%eax
f010d8c1:	c1 e0 02             	shl    $0x2,%eax
f010d8c4:	89 c2                	mov    %eax,%edx
f010d8c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8c9:	01 d0                	add    %edx,%eax
f010d8cb:	8b 50 08             	mov    0x8(%eax),%edx
f010d8ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8d1:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d8d4:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8da:	8b 40 10             	mov    0x10(%eax),%eax
f010d8dd:	29 c2                	sub    %eax,%edx
f010d8df:	89 d0                	mov    %edx,%eax
f010d8e1:	c1 f8 02             	sar    $0x2,%eax
f010d8e4:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d8e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d8ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d8ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d8f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d8f3:	eb 15                	jmp    f010d90a <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d8f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8f8:	8b 55 08             	mov    0x8(%ebp),%edx
f010d8fb:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d8fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d904:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d907:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d90a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d90d:	8b 40 08             	mov    0x8(%eax),%eax
f010d910:	83 ec 08             	sub    $0x8,%esp
f010d913:	6a 3a                	push   $0x3a
f010d915:	50                   	push   %eax
f010d916:	e8 95 34 02 00       	call   f0130db0 <strfind>
f010d91b:	83 c4 10             	add    $0x10,%esp
f010d91e:	89 c2                	mov    %eax,%edx
f010d920:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d923:	8b 40 08             	mov    0x8(%eax),%eax
f010d926:	29 c2                	sub    %eax,%edx
f010d928:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d92b:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d92e:	eb 03                	jmp    f010d933 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d930:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d933:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d936:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d939:	7c 4e                	jl     f010d989 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d93b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d93e:	89 d0                	mov    %edx,%eax
f010d940:	01 c0                	add    %eax,%eax
f010d942:	01 d0                	add    %edx,%eax
f010d944:	c1 e0 02             	shl    $0x2,%eax
f010d947:	89 c2                	mov    %eax,%edx
f010d949:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d94c:	01 d0                	add    %edx,%eax
f010d94e:	8a 40 04             	mov    0x4(%eax),%al
f010d951:	3c 84                	cmp    $0x84,%al
f010d953:	74 34                	je     f010d989 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d955:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d958:	89 d0                	mov    %edx,%eax
f010d95a:	01 c0                	add    %eax,%eax
f010d95c:	01 d0                	add    %edx,%eax
f010d95e:	c1 e0 02             	shl    $0x2,%eax
f010d961:	89 c2                	mov    %eax,%edx
f010d963:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d966:	01 d0                	add    %edx,%eax
f010d968:	8a 40 04             	mov    0x4(%eax),%al
f010d96b:	3c 64                	cmp    $0x64,%al
f010d96d:	75 c1                	jne    f010d930 <debuginfo_eip+0x207>
f010d96f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d972:	89 d0                	mov    %edx,%eax
f010d974:	01 c0                	add    %eax,%eax
f010d976:	01 d0                	add    %edx,%eax
f010d978:	c1 e0 02             	shl    $0x2,%eax
f010d97b:	89 c2                	mov    %eax,%edx
f010d97d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d980:	01 d0                	add    %edx,%eax
f010d982:	8b 40 08             	mov    0x8(%eax),%eax
f010d985:	85 c0                	test   %eax,%eax
f010d987:	74 a7                	je     f010d930 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d989:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d98c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d98f:	7c 42                	jl     f010d9d3 <debuginfo_eip+0x2aa>
f010d991:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d994:	89 d0                	mov    %edx,%eax
f010d996:	01 c0                	add    %eax,%eax
f010d998:	01 d0                	add    %edx,%eax
f010d99a:	c1 e0 02             	shl    $0x2,%eax
f010d99d:	89 c2                	mov    %eax,%edx
f010d99f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9a2:	01 d0                	add    %edx,%eax
f010d9a4:	8b 00                	mov    (%eax),%eax
f010d9a6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d9a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d9ac:	29 d1                	sub    %edx,%ecx
f010d9ae:	89 ca                	mov    %ecx,%edx
f010d9b0:	39 d0                	cmp    %edx,%eax
f010d9b2:	73 1f                	jae    f010d9d3 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d9b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d9b7:	89 d0                	mov    %edx,%eax
f010d9b9:	01 c0                	add    %eax,%eax
f010d9bb:	01 d0                	add    %edx,%eax
f010d9bd:	c1 e0 02             	shl    $0x2,%eax
f010d9c0:	89 c2                	mov    %eax,%edx
f010d9c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9c5:	01 d0                	add    %edx,%eax
f010d9c7:	8b 10                	mov    (%eax),%edx
f010d9c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9cc:	01 c2                	add    %eax,%edx
f010d9ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9d1:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d9d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9d8:	c9                   	leave  
f010d9d9:	c3                   	ret    

f010d9da <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d9da:	55                   	push   %ebp
f010d9db:	89 e5                	mov    %esp,%ebp
f010d9dd:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d9e0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d9e4:	74 1c                	je     f010da02 <setPageReplacmentAlgorithmLRU+0x28>
f010d9e6:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d9ea:	74 16                	je     f010da02 <setPageReplacmentAlgorithmLRU+0x28>
f010d9ec:	68 ac 73 13 f0       	push   $0xf01373ac
f010d9f1:	68 f6 73 13 f0       	push   $0xf01373f6
f010d9f6:	6a 18                	push   $0x18
f010d9f8:	68 0b 74 13 f0       	push   $0xf013740b
f010d9fd:	e8 f9 27 ff ff       	call   f01001fb <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010da02:	8b 45 08             	mov    0x8(%ebp),%eax
f010da05:	a3 88 7b 65 f0       	mov    %eax,0xf0657b88
}
f010da0a:	90                   	nop
f010da0b:	c9                   	leave  
f010da0c:	c3                   	ret    

f010da0d <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010da0d:	55                   	push   %ebp
f010da0e:	89 e5                	mov    %esp,%ebp
f010da10:	c7 05 88 7b 65 f0 03 	movl   $0x3,0xf0657b88
f010da17:	00 00 00 
f010da1a:	90                   	nop
f010da1b:	5d                   	pop    %ebp
f010da1c:	c3                   	ret    

f010da1d <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010da1d:	55                   	push   %ebp
f010da1e:	89 e5                	mov    %esp,%ebp
f010da20:	c7 05 88 7b 65 f0 04 	movl   $0x4,0xf0657b88
f010da27:	00 00 00 
f010da2a:	90                   	nop
f010da2b:	5d                   	pop    %ebp
f010da2c:	c3                   	ret    

f010da2d <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010da2d:	55                   	push   %ebp
f010da2e:	89 e5                	mov    %esp,%ebp
f010da30:	c7 05 88 7b 65 f0 05 	movl   $0x5,0xf0657b88
f010da37:	00 00 00 
f010da3a:	90                   	nop
f010da3b:	5d                   	pop    %ebp
f010da3c:	c3                   	ret    

f010da3d <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010da3d:	55                   	push   %ebp
f010da3e:	89 e5                	mov    %esp,%ebp
f010da40:	c7 05 88 7b 65 f0 07 	movl   $0x7,0xf0657b88
f010da47:	00 00 00 
f010da4a:	90                   	nop
f010da4b:	5d                   	pop    %ebp
f010da4c:	c3                   	ret    

f010da4d <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010da4d:	55                   	push   %ebp
f010da4e:	89 e5                	mov    %esp,%ebp
f010da50:	c7 05 88 7b 65 f0 06 	movl   $0x6,0xf0657b88
f010da57:	00 00 00 
f010da5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010da5d:	a3 e4 7a 65 f0       	mov    %eax,0xf0657ae4
f010da62:	90                   	nop
f010da63:	5d                   	pop    %ebp
f010da64:	c3                   	ret    

f010da65 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010da65:	55                   	push   %ebp
f010da66:	89 e5                	mov    %esp,%ebp
f010da68:	8b 15 88 7b 65 f0    	mov    0xf0657b88,%edx
f010da6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010da71:	39 c2                	cmp    %eax,%edx
f010da73:	0f 94 c0             	sete   %al
f010da76:	0f b6 c0             	movzbl %al,%eax
f010da79:	5d                   	pop    %ebp
f010da7a:	c3                   	ret    

f010da7b <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010da7b:	55                   	push   %ebp
f010da7c:	89 e5                	mov    %esp,%ebp
f010da7e:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010da83:	83 f8 03             	cmp    $0x3,%eax
f010da86:	75 07                	jne    f010da8f <isPageReplacmentAlgorithmCLOCK+0x14>
f010da88:	b8 01 00 00 00       	mov    $0x1,%eax
f010da8d:	eb 05                	jmp    f010da94 <isPageReplacmentAlgorithmCLOCK+0x19>
f010da8f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da94:	5d                   	pop    %ebp
f010da95:	c3                   	ret    

f010da96 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010da96:	55                   	push   %ebp
f010da97:	89 e5                	mov    %esp,%ebp
f010da99:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010da9e:	83 f8 04             	cmp    $0x4,%eax
f010daa1:	75 07                	jne    f010daaa <isPageReplacmentAlgorithmFIFO+0x14>
f010daa3:	b8 01 00 00 00       	mov    $0x1,%eax
f010daa8:	eb 05                	jmp    f010daaf <isPageReplacmentAlgorithmFIFO+0x19>
f010daaa:	b8 00 00 00 00       	mov    $0x0,%eax
f010daaf:	5d                   	pop    %ebp
f010dab0:	c3                   	ret    

f010dab1 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dab1:	55                   	push   %ebp
f010dab2:	89 e5                	mov    %esp,%ebp
f010dab4:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dab9:	83 f8 05             	cmp    $0x5,%eax
f010dabc:	75 07                	jne    f010dac5 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dabe:	b8 01 00 00 00       	mov    $0x1,%eax
f010dac3:	eb 05                	jmp    f010daca <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dac5:	b8 00 00 00 00       	mov    $0x0,%eax
f010daca:	5d                   	pop    %ebp
f010dacb:	c3                   	ret    

f010dacc <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010dacc:	55                   	push   %ebp
f010dacd:	89 e5                	mov    %esp,%ebp
f010dacf:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010dad4:	83 f8 07             	cmp    $0x7,%eax
f010dad7:	75 07                	jne    f010dae0 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dad9:	b8 01 00 00 00       	mov    $0x1,%eax
f010dade:	eb 05                	jmp    f010dae5 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010dae0:	b8 00 00 00 00       	mov    $0x0,%eax
f010dae5:	5d                   	pop    %ebp
f010dae6:	c3                   	ret    

f010dae7 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010dae7:	55                   	push   %ebp
f010dae8:	89 e5                	mov    %esp,%ebp
f010daea:	a1 88 7b 65 f0       	mov    0xf0657b88,%eax
f010daef:	83 f8 06             	cmp    $0x6,%eax
f010daf2:	75 07                	jne    f010dafb <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010daf4:	b8 01 00 00 00       	mov    $0x1,%eax
f010daf9:	eb 05                	jmp    f010db00 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010dafb:	b8 00 00 00 00       	mov    $0x0,%eax
f010db00:	5d                   	pop    %ebp
f010db01:	c3                   	ret    

f010db02 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010db02:	55                   	push   %ebp
f010db03:	89 e5                	mov    %esp,%ebp
f010db05:	8b 45 08             	mov    0x8(%ebp),%eax
f010db08:	a3 50 7b 65 f0       	mov    %eax,0xf0657b50
f010db0d:	90                   	nop
f010db0e:	5d                   	pop    %ebp
f010db0f:	c3                   	ret    

f010db10 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010db10:	55                   	push   %ebp
f010db11:	89 e5                	mov    %esp,%ebp
f010db13:	a1 50 7b 65 f0       	mov    0xf0657b50,%eax
f010db18:	5d                   	pop    %ebp
f010db19:	c3                   	ret    

f010db1a <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010db1a:	55                   	push   %ebp
f010db1b:	89 e5                	mov    %esp,%ebp
f010db1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010db20:	a3 90 7b 65 f0       	mov    %eax,0xf0657b90
f010db25:	90                   	nop
f010db26:	5d                   	pop    %ebp
f010db27:	c3                   	ret    

f010db28 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010db28:	55                   	push   %ebp
f010db29:	89 e5                	mov    %esp,%ebp
f010db2b:	a1 90 7b 65 f0       	mov    0xf0657b90,%eax
f010db30:	5d                   	pop    %ebp
f010db31:	c3                   	ret    

f010db32 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010db32:	55                   	push   %ebp
f010db33:	89 e5                	mov    %esp,%ebp
f010db35:	8b 45 08             	mov    0x8(%ebp),%eax
f010db38:	a3 b0 7b 65 f0       	mov    %eax,0xf0657bb0
f010db3d:	90                   	nop
f010db3e:	5d                   	pop    %ebp
f010db3f:	c3                   	ret    

f010db40 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010db40:	55                   	push   %ebp
f010db41:	89 e5                	mov    %esp,%ebp
f010db43:	a1 b0 7b 65 f0       	mov    0xf0657bb0,%eax
f010db48:	5d                   	pop    %ebp
f010db49:	c3                   	ret    

f010db4a <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010db4a:	55                   	push   %ebp
f010db4b:	89 e5                	mov    %esp,%ebp
f010db4d:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010db50:	8b 45 08             	mov    0x8(%ebp),%eax
f010db53:	8b 40 5c             	mov    0x5c(%eax),%eax
f010db56:	83 ec 08             	sub    $0x8,%esp
f010db59:	ff 75 0c             	pushl  0xc(%ebp)
f010db5c:	50                   	push   %eax
f010db5d:	e8 ce 8f ff ff       	call   f0106b30 <create_page_table>
f010db62:	83 c4 10             	add    $0x10,%esp
f010db65:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010db68:	90                   	nop
f010db69:	c9                   	leave  
f010db6a:	c3                   	ret    

f010db6b <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010db6b:	55                   	push   %ebp
f010db6c:	89 e5                	mov    %esp,%ebp
f010db6e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010db71:	83 ec 04             	sub    $0x4,%esp
f010db74:	68 28 74 13 f0       	push   $0xf0137428
f010db79:	6a 50                	push   $0x50
f010db7b:	68 0b 74 13 f0       	push   $0xf013740b
f010db80:	e8 76 26 ff ff       	call   f01001fb <_panic>

f010db85 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010db85:	55                   	push   %ebp
f010db86:	89 e5                	mov    %esp,%ebp
f010db88:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010db8b:	83 ec 04             	sub    $0x4,%esp
f010db8e:	68 5c 74 13 f0       	push   $0xf013745c
f010db93:	6a 57                	push   $0x57
f010db95:	68 0b 74 13 f0       	push   $0xf013740b
f010db9a:	e8 5c 26 ff ff       	call   f01001fb <_panic>

f010db9f <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010db9f:	55                   	push   %ebp
f010dba0:	89 e5                	mov    %esp,%ebp
f010dba2:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010dba5:	8b 45 08             	mov    0x8(%ebp),%eax
f010dba8:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010dbad:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb0:	89 d0                	mov    %edx,%eax
f010dbb2:	c1 e0 02             	shl    $0x2,%eax
f010dbb5:	01 d0                	add    %edx,%eax
f010dbb7:	01 c0                	add    %eax,%eax
f010dbb9:	01 d0                	add    %edx,%eax
f010dbbb:	01 c0                	add    %eax,%eax
f010dbbd:	01 d0                	add    %edx,%eax
f010dbbf:	c1 e0 02             	shl    $0x2,%eax
f010dbc2:	83 ec 0c             	sub    $0xc,%esp
f010dbc5:	50                   	push   %eax
f010dbc6:	e8 33 9c ff ff       	call   f01077fe <kmalloc>
f010dbcb:	83 c4 10             	add    $0x10,%esp
f010dbce:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
	if (semaphores == NULL)
f010dbd3:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dbd8:	85 c0                	test   %eax,%eax
f010dbda:	75 14                	jne    f010dbf0 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010dbdc:	83 ec 04             	sub    $0x4,%esp
f010dbdf:	68 a0 74 13 f0       	push   $0xf01374a0
f010dbe4:	6a 1e                	push   $0x1e
f010dbe6:	68 e0 74 13 f0       	push   $0xf01374e0
f010dbeb:	e8 0b 26 ff ff       	call   f01001fb <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dbf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dbf7:	e9 bd 00 00 00       	jmp    f010dcb9 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010dbfc:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc05:	89 d0                	mov    %edx,%eax
f010dc07:	c1 e0 02             	shl    $0x2,%eax
f010dc0a:	01 d0                	add    %edx,%eax
f010dc0c:	01 c0                	add    %eax,%eax
f010dc0e:	01 d0                	add    %edx,%eax
f010dc10:	01 c0                	add    %eax,%eax
f010dc12:	01 d0                	add    %edx,%eax
f010dc14:	c1 e0 02             	shl    $0x2,%eax
f010dc17:	01 c8                	add    %ecx,%eax
f010dc19:	83 ec 04             	sub    $0x4,%esp
f010dc1c:	6a 5c                	push   $0x5c
f010dc1e:	6a 00                	push   $0x0
f010dc20:	50                   	push   %eax
f010dc21:	e8 b6 31 02 00       	call   f0130ddc <memset>
f010dc26:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010dc29:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc32:	89 d0                	mov    %edx,%eax
f010dc34:	c1 e0 02             	shl    $0x2,%eax
f010dc37:	01 d0                	add    %edx,%eax
f010dc39:	01 c0                	add    %eax,%eax
f010dc3b:	01 d0                	add    %edx,%eax
f010dc3d:	01 c0                	add    %eax,%eax
f010dc3f:	01 d0                	add    %edx,%eax
f010dc41:	c1 e0 02             	shl    $0x2,%eax
f010dc44:	01 c8                	add    %ecx,%eax
f010dc46:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010dc4a:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc53:	89 d0                	mov    %edx,%eax
f010dc55:	c1 e0 02             	shl    $0x2,%eax
f010dc58:	01 d0                	add    %edx,%eax
f010dc5a:	01 c0                	add    %eax,%eax
f010dc5c:	01 d0                	add    %edx,%eax
f010dc5e:	01 c0                	add    %eax,%eax
f010dc60:	01 d0                	add    %edx,%eax
f010dc62:	c1 e0 02             	shl    $0x2,%eax
f010dc65:	01 c8                	add    %ecx,%eax
f010dc67:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010dc6e:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc77:	89 d0                	mov    %edx,%eax
f010dc79:	c1 e0 02             	shl    $0x2,%eax
f010dc7c:	01 d0                	add    %edx,%eax
f010dc7e:	01 c0                	add    %eax,%eax
f010dc80:	01 d0                	add    %edx,%eax
f010dc82:	01 c0                	add    %eax,%eax
f010dc84:	01 d0                	add    %edx,%eax
f010dc86:	c1 e0 02             	shl    $0x2,%eax
f010dc89:	01 c8                	add    %ecx,%eax
f010dc8b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010dc92:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dc98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dc9b:	89 d0                	mov    %edx,%eax
f010dc9d:	c1 e0 02             	shl    $0x2,%eax
f010dca0:	01 d0                	add    %edx,%eax
f010dca2:	01 c0                	add    %eax,%eax
f010dca4:	01 d0                	add    %edx,%eax
f010dca6:	01 c0                	add    %eax,%eax
f010dca8:	01 d0                	add    %edx,%eax
f010dcaa:	c1 e0 02             	shl    $0x2,%eax
f010dcad:	01 c8                	add    %ecx,%eax
f010dcaf:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dcb6:	ff 45 f4             	incl   -0xc(%ebp)
f010dcb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dcbc:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dcc1:	39 c2                	cmp    %eax,%edx
f010dcc3:	0f 82 33 ff ff ff    	jb     f010dbfc <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010dcc9:	90                   	nop
f010dcca:	c9                   	leave  
f010dccb:	c3                   	ret    

f010dccc <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010dccc:	55                   	push   %ebp
f010dccd:	89 e5                	mov    %esp,%ebp
f010dccf:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010dcd2:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dcd9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010dce0:	eb 2f                	jmp    f010dd11 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010dce2:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dce8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dceb:	89 d0                	mov    %edx,%eax
f010dced:	c1 e0 02             	shl    $0x2,%eax
f010dcf0:	01 d0                	add    %edx,%eax
f010dcf2:	01 c0                	add    %eax,%eax
f010dcf4:	01 d0                	add    %edx,%eax
f010dcf6:	01 c0                	add    %eax,%eax
f010dcf8:	01 d0                	add    %edx,%eax
f010dcfa:	c1 e0 02             	shl    $0x2,%eax
f010dcfd:	01 c8                	add    %ecx,%eax
f010dcff:	8a 40 58             	mov    0x58(%eax),%al
f010dd02:	84 c0                	test   %al,%al
f010dd04:	74 08                	je     f010dd0e <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010dd06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd09:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010dd0c:	eb 0f                	jmp    f010dd1d <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010dd0e:	ff 45 f0             	incl   -0x10(%ebp)
f010dd11:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd14:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd19:	39 c2                	cmp    %eax,%edx
f010dd1b:	72 c5                	jb     f010dce2 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010dd1d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010dd21:	75 4d                	jne    f010dd70 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010dd23:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd28:	01 c0                	add    %eax,%eax
f010dd2a:	89 c2                	mov    %eax,%edx
f010dd2c:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dd31:	83 ec 08             	sub    $0x8,%esp
f010dd34:	52                   	push   %edx
f010dd35:	50                   	push   %eax
f010dd36:	e8 7a 9d ff ff       	call   f0107ab5 <krealloc>
f010dd3b:	83 c4 10             	add    $0x10,%esp
f010dd3e:	a3 0c 7b 65 f0       	mov    %eax,0xf0657b0c
			if (semaphores == NULL)
f010dd43:	a1 0c 7b 65 f0       	mov    0xf0657b0c,%eax
f010dd48:	85 c0                	test   %eax,%eax
f010dd4a:	75 10                	jne    f010dd5c <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010dd4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010dd55:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010dd5a:	eb 5b                	jmp    f010ddb7 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010dd5c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd61:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010dd64:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010dd69:	01 c0                	add    %eax,%eax
f010dd6b:	a3 b4 7a 65 f0       	mov    %eax,0xf0657ab4
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010dd70:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd79:	89 d0                	mov    %edx,%eax
f010dd7b:	c1 e0 02             	shl    $0x2,%eax
f010dd7e:	01 d0                	add    %edx,%eax
f010dd80:	01 c0                	add    %eax,%eax
f010dd82:	01 d0                	add    %edx,%eax
f010dd84:	01 c0                	add    %eax,%eax
f010dd86:	01 d0                	add    %edx,%eax
f010dd88:	c1 e0 02             	shl    $0x2,%eax
f010dd8b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010dd8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd91:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010dd93:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010dd99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd9c:	89 d0                	mov    %edx,%eax
f010dd9e:	c1 e0 02             	shl    $0x2,%eax
f010dda1:	01 d0                	add    %edx,%eax
f010dda3:	01 c0                	add    %eax,%eax
f010dda5:	01 d0                	add    %edx,%eax
f010dda7:	01 c0                	add    %eax,%eax
f010dda9:	01 d0                	add    %edx,%eax
f010ddab:	c1 e0 02             	shl    $0x2,%eax
f010ddae:	01 c8                	add    %ecx,%eax
f010ddb0:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010ddb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ddb7:	c9                   	leave  
f010ddb8:	c3                   	ret    

f010ddb9 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010ddb9:	55                   	push   %ebp
f010ddba:	89 e5                	mov    %esp,%ebp
f010ddbc:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010ddbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010ddc6:	e9 84 00 00 00       	jmp    f010de4f <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010ddcb:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010ddd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddd4:	89 d0                	mov    %edx,%eax
f010ddd6:	c1 e0 02             	shl    $0x2,%eax
f010ddd9:	01 d0                	add    %edx,%eax
f010dddb:	01 c0                	add    %eax,%eax
f010dddd:	01 d0                	add    %edx,%eax
f010dddf:	01 c0                	add    %eax,%eax
f010dde1:	01 d0                	add    %edx,%eax
f010dde3:	c1 e0 02             	shl    $0x2,%eax
f010dde6:	01 c8                	add    %ecx,%eax
f010dde8:	8a 40 58             	mov    0x58(%eax),%al
f010ddeb:	84 c0                	test   %al,%al
f010dded:	75 5c                	jne    f010de4b <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010ddef:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010ddf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddf8:	89 d0                	mov    %edx,%eax
f010ddfa:	c1 e0 02             	shl    $0x2,%eax
f010ddfd:	01 d0                	add    %edx,%eax
f010ddff:	01 c0                	add    %eax,%eax
f010de01:	01 d0                	add    %edx,%eax
f010de03:	01 c0                	add    %eax,%eax
f010de05:	01 d0                	add    %edx,%eax
f010de07:	c1 e0 02             	shl    $0x2,%eax
f010de0a:	01 c8                	add    %ecx,%eax
f010de0c:	8b 00                	mov    (%eax),%eax
f010de0e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010de11:	75 39                	jne    f010de4c <get_semaphore_object_ID+0x93>
f010de13:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de1c:	89 d0                	mov    %edx,%eax
f010de1e:	c1 e0 02             	shl    $0x2,%eax
f010de21:	01 d0                	add    %edx,%eax
f010de23:	01 c0                	add    %eax,%eax
f010de25:	01 d0                	add    %edx,%eax
f010de27:	01 c0                	add    %eax,%eax
f010de29:	01 d0                	add    %edx,%eax
f010de2b:	c1 e0 02             	shl    $0x2,%eax
f010de2e:	01 c8                	add    %ecx,%eax
f010de30:	83 c0 04             	add    $0x4,%eax
f010de33:	83 ec 08             	sub    $0x8,%esp
f010de36:	50                   	push   %eax
f010de37:	ff 75 0c             	pushl  0xc(%ebp)
f010de3a:	e8 bb 2e 02 00       	call   f0130cfa <strcmp>
f010de3f:	83 c4 10             	add    $0x10,%esp
f010de42:	85 c0                	test   %eax,%eax
f010de44:	75 06                	jne    f010de4c <get_semaphore_object_ID+0x93>
		{
			return i;
f010de46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de49:	eb 19                	jmp    f010de64 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010de4b:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010de4c:	ff 45 f4             	incl   -0xc(%ebp)
f010de4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de52:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de57:	39 c2                	cmp    %eax,%edx
f010de59:	0f 82 6c ff ff ff    	jb     f010ddcb <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010de5f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010de64:	c9                   	leave  
f010de65:	c3                   	ret    

f010de66 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010de66:	55                   	push   %ebp
f010de67:	89 e5                	mov    %esp,%ebp
f010de69:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010de6c:	a1 b4 7a 65 f0       	mov    0xf0657ab4,%eax
f010de71:	39 45 08             	cmp    %eax,0x8(%ebp)
f010de74:	72 0a                	jb     f010de80 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010de76:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010de7b:	e9 bf 00 00 00       	jmp    f010df3f <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010de80:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010de86:	8b 55 08             	mov    0x8(%ebp),%edx
f010de89:	89 d0                	mov    %edx,%eax
f010de8b:	c1 e0 02             	shl    $0x2,%eax
f010de8e:	01 d0                	add    %edx,%eax
f010de90:	01 c0                	add    %eax,%eax
f010de92:	01 d0                	add    %edx,%eax
f010de94:	01 c0                	add    %eax,%eax
f010de96:	01 d0                	add    %edx,%eax
f010de98:	c1 e0 02             	shl    $0x2,%eax
f010de9b:	01 c8                	add    %ecx,%eax
f010de9d:	83 ec 04             	sub    $0x4,%esp
f010dea0:	6a 5c                	push   $0x5c
f010dea2:	6a 00                	push   $0x0
f010dea4:	50                   	push   %eax
f010dea5:	e8 32 2f 02 00       	call   f0130ddc <memset>
f010deaa:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010dead:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010deb3:	8b 55 08             	mov    0x8(%ebp),%edx
f010deb6:	89 d0                	mov    %edx,%eax
f010deb8:	c1 e0 02             	shl    $0x2,%eax
f010debb:	01 d0                	add    %edx,%eax
f010debd:	01 c0                	add    %eax,%eax
f010debf:	01 d0                	add    %edx,%eax
f010dec1:	01 c0                	add    %eax,%eax
f010dec3:	01 d0                	add    %edx,%eax
f010dec5:	c1 e0 02             	shl    $0x2,%eax
f010dec8:	01 c8                	add    %ecx,%eax
f010deca:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010dece:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010ded4:	8b 55 08             	mov    0x8(%ebp),%edx
f010ded7:	89 d0                	mov    %edx,%eax
f010ded9:	c1 e0 02             	shl    $0x2,%eax
f010dedc:	01 d0                	add    %edx,%eax
f010dede:	01 c0                	add    %eax,%eax
f010dee0:	01 d0                	add    %edx,%eax
f010dee2:	01 c0                	add    %eax,%eax
f010dee4:	01 d0                	add    %edx,%eax
f010dee6:	c1 e0 02             	shl    $0x2,%eax
f010dee9:	01 c8                	add    %ecx,%eax
f010deeb:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010def2:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010def8:	8b 55 08             	mov    0x8(%ebp),%edx
f010defb:	89 d0                	mov    %edx,%eax
f010defd:	c1 e0 02             	shl    $0x2,%eax
f010df00:	01 d0                	add    %edx,%eax
f010df02:	01 c0                	add    %eax,%eax
f010df04:	01 d0                	add    %edx,%eax
f010df06:	01 c0                	add    %eax,%eax
f010df08:	01 d0                	add    %edx,%eax
f010df0a:	c1 e0 02             	shl    $0x2,%eax
f010df0d:	01 c8                	add    %ecx,%eax
f010df0f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010df16:	8b 0d 0c 7b 65 f0    	mov    0xf0657b0c,%ecx
f010df1c:	8b 55 08             	mov    0x8(%ebp),%edx
f010df1f:	89 d0                	mov    %edx,%eax
f010df21:	c1 e0 02             	shl    $0x2,%eax
f010df24:	01 d0                	add    %edx,%eax
f010df26:	01 c0                	add    %eax,%eax
f010df28:	01 d0                	add    %edx,%eax
f010df2a:	01 c0                	add    %eax,%eax
f010df2c:	01 d0                	add    %edx,%eax
f010df2e:	c1 e0 02             	shl    $0x2,%eax
f010df31:	01 c8                	add    %ecx,%eax
f010df33:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010df3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010df3f:	c9                   	leave  
f010df40:	c3                   	ret    

f010df41 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010df41:	55                   	push   %ebp
f010df42:	89 e5                	mov    %esp,%ebp
f010df44:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010df47:	83 ec 04             	sub    $0x4,%esp
f010df4a:	68 00 75 13 f0       	push   $0xf0137500
f010df4f:	68 94 00 00 00       	push   $0x94
f010df54:	68 e0 74 13 f0       	push   $0xf01374e0
f010df59:	e8 9d 22 ff ff       	call   f01001fb <_panic>

f010df5e <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010df5e:	55                   	push   %ebp
f010df5f:	89 e5                	mov    %esp,%ebp
f010df61:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010df64:	83 ec 04             	sub    $0x4,%esp
f010df67:	68 30 75 13 f0       	push   $0xf0137530
f010df6c:	68 a6 00 00 00       	push   $0xa6
f010df71:	68 e0 74 13 f0       	push   $0xf01374e0
f010df76:	e8 80 22 ff ff       	call   f01001fb <_panic>

f010df7b <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010df7b:	55                   	push   %ebp
f010df7c:	89 e5                	mov    %esp,%ebp
f010df7e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010df81:	83 ec 04             	sub    $0x4,%esp
f010df84:	68 5c 75 13 f0       	push   $0xf013755c
f010df89:	68 ba 00 00 00       	push   $0xba
f010df8e:	68 e0 74 13 f0       	push   $0xf01374e0
f010df93:	e8 63 22 ff ff       	call   f01001fb <_panic>

f010df98 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010df98:	55                   	push   %ebp
f010df99:	89 e5                	mov    %esp,%ebp
f010df9b:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010df9e:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dfa5:	83 ec 0c             	sub    $0xc,%esp
f010dfa8:	ff 75 ec             	pushl  -0x14(%ebp)
f010dfab:	e8 a8 37 02 00       	call   f0131758 <initialize_MemBlocksList>
f010dfb0:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010dfb3:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010dfb8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010dfbb:	74 17                	je     f010dfd4 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010dfbd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010dfc2:	50                   	push   %eax
f010dfc3:	68 a0 75 13 f0       	push   $0xf01375a0
f010dfc8:	6a 1f                	push   $0x1f
f010dfca:	68 f4 75 13 f0       	push   $0xf01375f4
f010dfcf:	e8 27 22 ff ff       	call   f01001fb <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010dfd4:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010dfd9:	85 c0                	test   %eax,%eax
f010dfdb:	74 17                	je     f010dff4 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010dfdd:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010dfe2:	50                   	push   %eax
f010dfe3:	68 18 76 13 f0       	push   $0xf0137618
f010dfe8:	6a 26                	push   $0x26
f010dfea:	68 f4 75 13 f0       	push   $0xf01375f4
f010dfef:	e8 07 22 ff ff       	call   f01001fb <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010dff4:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010dff9:	85 c0                	test   %eax,%eax
f010dffb:	74 17                	je     f010e014 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010dffd:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e002:	50                   	push   %eax
f010e003:	68 68 76 13 f0       	push   $0xf0137668
f010e008:	6a 2c                	push   $0x2c
f010e00a:	68 f4 75 13 f0       	push   $0xf01375f4
f010e00f:	e8 e7 21 ff ff       	call   f01001fb <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010e014:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010e01b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e022:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f010e027:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e02a:	eb 29                	jmp    f010e055 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010e02c:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010e02f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e032:	8b 50 0c             	mov    0xc(%eax),%edx
f010e035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e038:	8b 40 08             	mov    0x8(%eax),%eax
f010e03b:	83 ec 04             	sub    $0x4,%esp
f010e03e:	52                   	push   %edx
f010e03f:	50                   	push   %eax
f010e040:	68 b8 76 13 f0       	push   $0xf01376b8
f010e045:	e8 38 2c ff ff       	call   f0100c82 <cprintf>
f010e04a:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010e04d:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e052:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e055:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e059:	74 07                	je     f010e062 <test_initialize_MemBlocksList+0xca>
f010e05b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e05e:	8b 00                	mov    (%eax),%eax
f010e060:	eb 05                	jmp    f010e067 <test_initialize_MemBlocksList+0xcf>
f010e062:	b8 00 00 00 00       	mov    $0x0,%eax
f010e067:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f010e06c:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f010e071:	85 c0                	test   %eax,%eax
f010e073:	75 b7                	jne    f010e02c <test_initialize_MemBlocksList+0x94>
f010e075:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e079:	75 b1                	jne    f010e02c <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010e07b:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e080:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e083:	74 14                	je     f010e099 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010e085:	83 ec 04             	sub    $0x4,%esp
f010e088:	68 d8 76 13 f0       	push   $0xf01376d8
f010e08d:	6a 38                	push   $0x38
f010e08f:	68 f4 75 13 f0       	push   $0xf01375f4
f010e094:	e8 62 21 ff ff       	call   f01001fb <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010e099:	83 ec 0c             	sub    $0xc,%esp
f010e09c:	68 30 77 13 f0       	push   $0xf0137730
f010e0a1:	e8 dc 2b ff ff       	call   f0100c82 <cprintf>
f010e0a6:	83 c4 10             	add    $0x10,%esp
}
f010e0a9:	90                   	nop
f010e0aa:	c9                   	leave  
f010e0ab:	c3                   	ret    

f010e0ac <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010e0ac:	55                   	push   %ebp
f010e0ad:	89 e5                	mov    %esp,%ebp
f010e0af:	57                   	push   %edi
f010e0b0:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010e0b6:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e0bd:	83 ec 0c             	sub    $0xc,%esp
f010e0c0:	ff 75 f4             	pushl  -0xc(%ebp)
f010e0c3:	e8 90 36 02 00       	call   f0131758 <initialize_MemBlocksList>
f010e0c8:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e0cb:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e0d2:	00 00 00 
f010e0d5:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e0dc:	00 00 00 
f010e0df:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e0e6:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010e0e9:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e0f0:	00 00 00 
f010e0f3:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e0fa:	00 00 00 
f010e0fd:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e104:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010e107:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010e10a:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e10f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e114:	89 d7                	mov    %edx,%edi
f010e116:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010e118:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010e11b:	b9 05 00 00 00       	mov    $0x5,%ecx
f010e120:	b8 00 00 00 00       	mov    $0x0,%eax
f010e125:	89 d7                	mov    %edx,%edi
f010e127:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010e129:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010e130:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010e137:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010e13e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010e145:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e148:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010e14b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e14e:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010e151:	83 ec 0c             	sub    $0xc,%esp
f010e154:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010e157:	50                   	push   %eax
f010e158:	e8 30 37 02 00       	call   f013188d <insert_sorted_allocList>
f010e15d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010e160:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e167:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e16c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e16f:	74 14                	je     f010e185 <test_insert_sorted_allocList+0xd9>
f010e171:	83 ec 04             	sub    $0x4,%esp
f010e174:	68 7c 77 13 f0       	push   $0xf013777c
f010e179:	6a 56                	push   $0x56
f010e17b:	68 f4 75 13 f0       	push   $0xf01375f4
f010e180:	e8 76 20 ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e185:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e18a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e18d:	74 14                	je     f010e1a3 <test_insert_sorted_allocList+0xf7>
f010e18f:	83 ec 04             	sub    $0x4,%esp
f010e192:	68 c8 77 13 f0       	push   $0xf01377c8
f010e197:	6a 59                	push   $0x59
f010e199:	68 f4 75 13 f0       	push   $0xf01375f4
f010e19e:	e8 58 20 ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e1a3:	83 ec 0c             	sub    $0xc,%esp
f010e1a6:	ff 75 f0             	pushl  -0x10(%ebp)
f010e1a9:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e1ac:	50                   	push   %eax
f010e1ad:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e1b0:	50                   	push   %eax
f010e1b1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e1b4:	50                   	push   %eax
f010e1b5:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e1ba:	e8 7d 26 00 00       	call   f011083c <check_list_data>
f010e1bf:	83 c4 20             	add    $0x20,%esp
f010e1c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e1c5:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e1c9:	74 14                	je     f010e1df <test_insert_sorted_allocList+0x133>
f010e1cb:	83 ec 04             	sub    $0x4,%esp
f010e1ce:	68 18 78 13 f0       	push   $0xf0137818
f010e1d3:	6a 5d                	push   $0x5d
f010e1d5:	68 f4 75 13 f0       	push   $0xf01375f4
f010e1da:	e8 1c 20 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e1df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e1e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e1e5:	74 14                	je     f010e1fb <test_insert_sorted_allocList+0x14f>
f010e1e7:	83 ec 04             	sub    $0x4,%esp
f010e1ea:	68 68 78 13 f0       	push   $0xf0137868
f010e1ef:	6a 5e                	push   $0x5e
f010e1f1:	68 f4 75 13 f0       	push   $0xf01375f4
f010e1f6:	e8 00 20 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010e1fb:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010e202:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010e209:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e20c:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010e20f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e212:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010e215:	83 ec 0c             	sub    $0xc,%esp
f010e218:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010e21b:	50                   	push   %eax
f010e21c:	e8 6c 36 02 00       	call   f013188d <insert_sorted_allocList>
f010e221:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010e224:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e22b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e230:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e233:	74 14                	je     f010e249 <test_insert_sorted_allocList+0x19d>
f010e235:	83 ec 04             	sub    $0x4,%esp
f010e238:	68 7c 77 13 f0       	push   $0xf013777c
f010e23d:	6a 6d                	push   $0x6d
f010e23f:	68 f4 75 13 f0       	push   $0xf01375f4
f010e244:	e8 b2 1f ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e249:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e24e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e251:	74 14                	je     f010e267 <test_insert_sorted_allocList+0x1bb>
f010e253:	83 ec 04             	sub    $0x4,%esp
f010e256:	68 c8 77 13 f0       	push   $0xf01377c8
f010e25b:	6a 70                	push   $0x70
f010e25d:	68 f4 75 13 f0       	push   $0xf01375f4
f010e262:	e8 94 1f ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e267:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e26e:	83 ec 0c             	sub    $0xc,%esp
f010e271:	ff 75 f0             	pushl  -0x10(%ebp)
f010e274:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e277:	50                   	push   %eax
f010e278:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e27b:	50                   	push   %eax
f010e27c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e27f:	50                   	push   %eax
f010e280:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e285:	e8 b2 25 00 00       	call   f011083c <check_list_data>
f010e28a:	83 c4 20             	add    $0x20,%esp
f010e28d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e290:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e294:	74 14                	je     f010e2aa <test_insert_sorted_allocList+0x1fe>
f010e296:	83 ec 04             	sub    $0x4,%esp
f010e299:	68 18 78 13 f0       	push   $0xf0137818
f010e29e:	6a 75                	push   $0x75
f010e2a0:	68 f4 75 13 f0       	push   $0xf01375f4
f010e2a5:	e8 51 1f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e2aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e2ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e2b0:	74 14                	je     f010e2c6 <test_insert_sorted_allocList+0x21a>
f010e2b2:	83 ec 04             	sub    $0x4,%esp
f010e2b5:	68 68 78 13 f0       	push   $0xf0137868
f010e2ba:	6a 76                	push   $0x76
f010e2bc:	68 f4 75 13 f0       	push   $0xf01375f4
f010e2c1:	e8 35 1f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010e2c6:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010e2cd:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010e2d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e2d7:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010e2da:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e2dd:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010e2e0:	83 ec 0c             	sub    $0xc,%esp
f010e2e3:	8d 45 90             	lea    -0x70(%ebp),%eax
f010e2e6:	50                   	push   %eax
f010e2e7:	e8 a1 35 02 00       	call   f013188d <insert_sorted_allocList>
f010e2ec:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010e2ef:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e2f6:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e2fb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e2fe:	74 17                	je     f010e317 <test_insert_sorted_allocList+0x26b>
f010e300:	83 ec 04             	sub    $0x4,%esp
f010e303:	68 7c 77 13 f0       	push   $0xf013777c
f010e308:	68 85 00 00 00       	push   $0x85
f010e30d:	68 f4 75 13 f0       	push   $0xf01375f4
f010e312:	e8 e4 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010e317:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e31c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e31f:	74 17                	je     f010e338 <test_insert_sorted_allocList+0x28c>
f010e321:	83 ec 04             	sub    $0x4,%esp
f010e324:	68 b4 78 13 f0       	push   $0xf01378b4
f010e329:	68 88 00 00 00       	push   $0x88
f010e32e:	68 f4 75 13 f0       	push   $0xf01375f4
f010e333:	e8 c3 1e ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e338:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e33f:	83 ec 0c             	sub    $0xc,%esp
f010e342:	ff 75 f0             	pushl  -0x10(%ebp)
f010e345:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e348:	50                   	push   %eax
f010e349:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e34c:	50                   	push   %eax
f010e34d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e350:	50                   	push   %eax
f010e351:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e356:	e8 e1 24 00 00       	call   f011083c <check_list_data>
f010e35b:	83 c4 20             	add    $0x20,%esp
f010e35e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e361:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e365:	74 17                	je     f010e37e <test_insert_sorted_allocList+0x2d2>
f010e367:	83 ec 04             	sub    $0x4,%esp
f010e36a:	68 18 78 13 f0       	push   $0xf0137818
f010e36f:	68 8d 00 00 00       	push   $0x8d
f010e374:	68 f4 75 13 f0       	push   $0xf01375f4
f010e379:	e8 7d 1e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e37e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e381:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e384:	74 17                	je     f010e39d <test_insert_sorted_allocList+0x2f1>
f010e386:	83 ec 04             	sub    $0x4,%esp
f010e389:	68 68 78 13 f0       	push   $0xf0137868
f010e38e:	68 8e 00 00 00       	push   $0x8e
f010e393:	68 f4 75 13 f0       	push   $0xf01375f4
f010e398:	e8 5e 1e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010e39d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010e3a4:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010e3ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e3ae:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010e3b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e3b4:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010e3b7:	83 ec 0c             	sub    $0xc,%esp
f010e3ba:	8d 45 80             	lea    -0x80(%ebp),%eax
f010e3bd:	50                   	push   %eax
f010e3be:	e8 ca 34 02 00       	call   f013188d <insert_sorted_allocList>
f010e3c3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010e3c6:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e3cd:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e3d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e3d5:	74 17                	je     f010e3ee <test_insert_sorted_allocList+0x342>
f010e3d7:	83 ec 04             	sub    $0x4,%esp
f010e3da:	68 7c 77 13 f0       	push   $0xf013777c
f010e3df:	68 9c 00 00 00       	push   $0x9c
f010e3e4:	68 f4 75 13 f0       	push   $0xf01375f4
f010e3e9:	e8 0d 1e ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e3ee:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e3f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e3f6:	74 17                	je     f010e40f <test_insert_sorted_allocList+0x363>
f010e3f8:	83 ec 04             	sub    $0x4,%esp
f010e3fb:	68 c8 77 13 f0       	push   $0xf01377c8
f010e400:	68 9f 00 00 00       	push   $0x9f
f010e405:	68 f4 75 13 f0       	push   $0xf01375f4
f010e40a:	e8 ec 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e40f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e416:	83 ec 0c             	sub    $0xc,%esp
f010e419:	ff 75 f0             	pushl  -0x10(%ebp)
f010e41c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e41f:	50                   	push   %eax
f010e420:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e423:	50                   	push   %eax
f010e424:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e427:	50                   	push   %eax
f010e428:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e42d:	e8 0a 24 00 00       	call   f011083c <check_list_data>
f010e432:	83 c4 20             	add    $0x20,%esp
f010e435:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e438:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e43c:	74 17                	je     f010e455 <test_insert_sorted_allocList+0x3a9>
f010e43e:	83 ec 04             	sub    $0x4,%esp
f010e441:	68 18 78 13 f0       	push   $0xf0137818
f010e446:	68 a4 00 00 00       	push   $0xa4
f010e44b:	68 f4 75 13 f0       	push   $0xf01375f4
f010e450:	e8 a6 1d ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e455:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e458:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e45b:	74 17                	je     f010e474 <test_insert_sorted_allocList+0x3c8>
f010e45d:	83 ec 04             	sub    $0x4,%esp
f010e460:	68 68 78 13 f0       	push   $0xf0137868
f010e465:	68 a5 00 00 00       	push   $0xa5
f010e46a:	68 f4 75 13 f0       	push   $0xf01375f4
f010e46f:	e8 87 1d ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010e474:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010e47b:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010e482:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e485:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010e48b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e48e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010e494:	83 ec 0c             	sub    $0xc,%esp
f010e497:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010e49d:	50                   	push   %eax
f010e49e:	e8 ea 33 02 00       	call   f013188d <insert_sorted_allocList>
f010e4a3:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010e4a6:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010e4ad:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e4b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e4b5:	74 17                	je     f010e4ce <test_insert_sorted_allocList+0x422>
f010e4b7:	83 ec 04             	sub    $0x4,%esp
f010e4ba:	68 7c 77 13 f0       	push   $0xf013777c
f010e4bf:	68 b3 00 00 00       	push   $0xb3
f010e4c4:	68 f4 75 13 f0       	push   $0xf01375f4
f010e4c9:	e8 2d 1d ff ff       	call   f01001fb <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010e4ce:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e4d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e4d6:	74 17                	je     f010e4ef <test_insert_sorted_allocList+0x443>
f010e4d8:	83 ec 04             	sub    $0x4,%esp
f010e4db:	68 c8 77 13 f0       	push   $0xf01377c8
f010e4e0:	68 b6 00 00 00       	push   $0xb6
f010e4e5:	68 f4 75 13 f0       	push   $0xf01375f4
f010e4ea:	e8 0c 1d ff ff       	call   f01001fb <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010e4ef:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010e4f6:	83 ec 0c             	sub    $0xc,%esp
f010e4f9:	ff 75 f0             	pushl  -0x10(%ebp)
f010e4fc:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e4ff:	50                   	push   %eax
f010e500:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e503:	50                   	push   %eax
f010e504:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e507:	50                   	push   %eax
f010e508:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e50d:	e8 2a 23 00 00       	call   f011083c <check_list_data>
f010e512:	83 c4 20             	add    $0x20,%esp
f010e515:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010e518:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e51c:	74 17                	je     f010e535 <test_insert_sorted_allocList+0x489>
f010e51e:	83 ec 04             	sub    $0x4,%esp
f010e521:	68 18 78 13 f0       	push   $0xf0137818
f010e526:	68 bb 00 00 00       	push   $0xbb
f010e52b:	68 f4 75 13 f0       	push   $0xf01375f4
f010e530:	e8 c6 1c ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010e535:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e538:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e53b:	74 17                	je     f010e554 <test_insert_sorted_allocList+0x4a8>
f010e53d:	83 ec 04             	sub    $0x4,%esp
f010e540:	68 68 78 13 f0       	push   $0xf0137868
f010e545:	68 bc 00 00 00       	push   $0xbc
f010e54a:	68 f4 75 13 f0       	push   $0xf01375f4
f010e54f:	e8 a7 1c ff ff       	call   f01001fb <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010e554:	83 ec 0c             	sub    $0xc,%esp
f010e557:	68 04 79 13 f0       	push   $0xf0137904
f010e55c:	e8 21 27 ff ff       	call   f0100c82 <cprintf>
f010e561:	83 c4 10             	add    $0x10,%esp
}
f010e564:	90                   	nop
f010e565:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010e568:	c9                   	leave  
f010e569:	c3                   	ret    

f010e56a <test_find_block>:

void test_find_block()
{
f010e56a:	55                   	push   %ebp
f010e56b:	89 e5                	mov    %esp,%ebp
f010e56d:	57                   	push   %edi
f010e56e:	56                   	push   %esi
f010e56f:	53                   	push   %ebx
f010e570:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010e576:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e57d:	83 ec 0c             	sub    $0xc,%esp
f010e580:	ff 75 e0             	pushl  -0x20(%ebp)
f010e583:	e8 d0 31 02 00       	call   f0131758 <initialize_MemBlocksList>
f010e588:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010e58b:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e592:	00 00 00 
f010e595:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e59c:	00 00 00 
f010e59f:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e5a6:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010e5a9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e5ac:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f010e5b1:	ba 06 00 00 00       	mov    $0x6,%edx
f010e5b6:	89 c7                	mov    %eax,%edi
f010e5b8:	89 de                	mov    %ebx,%esi
f010e5ba:	89 d1                	mov    %edx,%ecx
f010e5bc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010e5be:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010e5c1:	bb 94 7a 13 f0       	mov    $0xf0137a94,%ebx
f010e5c6:	ba 06 00 00 00       	mov    $0x6,%edx
f010e5cb:	89 c7                	mov    %eax,%edi
f010e5cd:	89 de                	mov    %ebx,%esi
f010e5cf:	89 d1                	mov    %edx,%ecx
f010e5d1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010e5d3:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e5da:	00 00 00 
f010e5dd:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e5e4:	00 00 00 
f010e5e7:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e5ee:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e5f1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e5f8:	e9 5f 01 00 00       	jmp    f010e75c <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010e5fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e600:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010e604:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e607:	c1 e2 04             	shl    $0x4,%edx
f010e60a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e60d:	01 da                	add    %ebx,%edx
f010e60f:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010e615:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010e617:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e61a:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010e61e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e621:	c1 e2 04             	shl    $0x4,%edx
f010e624:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e627:	01 f2                	add    %esi,%edx
f010e629:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010e62f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e631:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e635:	0f 85 92 00 00 00    	jne    f010e6cd <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010e63b:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e640:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e643:	c1 e2 04             	shl    $0x4,%edx
f010e646:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e649:	01 fa                	add    %edi,%edx
f010e64b:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010e651:	89 02                	mov    %eax,(%edx)
f010e653:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e656:	c1 e0 04             	shl    $0x4,%eax
f010e659:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e65c:	01 d8                	add    %ebx,%eax
f010e65e:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e663:	8b 00                	mov    (%eax),%eax
f010e665:	85 c0                	test   %eax,%eax
f010e667:	74 18                	je     f010e681 <test_find_block+0x117>
f010e669:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f010e66e:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e674:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e677:	c1 e1 04             	shl    $0x4,%ecx
f010e67a:	01 ca                	add    %ecx,%edx
f010e67c:	89 50 04             	mov    %edx,0x4(%eax)
f010e67f:	eb 13                	jmp    f010e694 <test_find_block+0x12a>
f010e681:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e687:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e68a:	c1 e2 04             	shl    $0x4,%edx
f010e68d:	01 d0                	add    %edx,%eax
f010e68f:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e694:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e69a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e69d:	c1 e2 04             	shl    $0x4,%edx
f010e6a0:	01 d0                	add    %edx,%eax
f010e6a2:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e6a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6aa:	c1 e0 04             	shl    $0x4,%eax
f010e6ad:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e6b0:	01 f0                	add    %esi,%eax
f010e6b2:	2d 98 00 00 00       	sub    $0x98,%eax
f010e6b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e6bd:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e6c2:	40                   	inc    %eax
f010e6c3:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
f010e6c8:	e9 8c 00 00 00       	jmp    f010e759 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010e6cd:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e6d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e6d5:	c1 e2 04             	shl    $0x4,%edx
f010e6d8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e6db:	01 fa                	add    %edi,%edx
f010e6dd:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010e6e3:	89 02                	mov    %eax,(%edx)
f010e6e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e6e8:	c1 e0 04             	shl    $0x4,%eax
f010e6eb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e6ee:	01 d8                	add    %ebx,%eax
f010e6f0:	2d 98 00 00 00       	sub    $0x98,%eax
f010e6f5:	8b 00                	mov    (%eax),%eax
f010e6f7:	85 c0                	test   %eax,%eax
f010e6f9:	74 17                	je     f010e712 <test_find_block+0x1a8>
f010e6fb:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f010e700:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010e706:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e709:	c1 e1 04             	shl    $0x4,%ecx
f010e70c:	01 ca                	add    %ecx,%edx
f010e70e:	89 10                	mov    %edx,(%eax)
f010e710:	eb 13                	jmp    f010e725 <test_find_block+0x1bb>
f010e712:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e718:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e71b:	c1 e2 04             	shl    $0x4,%edx
f010e71e:	01 d0                	add    %edx,%eax
f010e720:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f010e725:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010e72b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e72e:	c1 e2 04             	shl    $0x4,%edx
f010e731:	01 d0                	add    %edx,%eax
f010e733:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f010e738:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e73b:	c1 e0 04             	shl    $0x4,%eax
f010e73e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e741:	01 f0                	add    %esi,%eax
f010e743:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010e748:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e74e:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010e753:	40                   	inc    %eax
f010e754:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010e759:	ff 45 e4             	incl   -0x1c(%ebp)
f010e75c:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010e760:	0f 8e 97 fe ff ff    	jle    f010e5fd <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010e766:	83 ec 08             	sub    $0x8,%esp
f010e769:	68 00 10 00 00       	push   $0x1000
f010e76e:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e773:	e8 bd 30 02 00       	call   f0131835 <find_block>
f010e778:	83 c4 10             	add    $0x10,%esp
f010e77b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010e77e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e782:	74 17                	je     f010e79b <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010e784:	83 ec 04             	sub    $0x4,%esp
f010e787:	68 44 79 13 f0       	push   $0xf0137944
f010e78c:	68 de 00 00 00       	push   $0xde
f010e791:	68 f4 75 13 f0       	push   $0xf01375f4
f010e796:	e8 60 1a ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010e79b:	83 ec 08             	sub    $0x8,%esp
f010e79e:	6a 00                	push   $0x0
f010e7a0:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e7a5:	e8 8b 30 02 00       	call   f0131835 <find_block>
f010e7aa:	83 c4 10             	add    $0x10,%esp
f010e7ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010e7b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e7b4:	74 17                	je     f010e7cd <test_find_block+0x263>
f010e7b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7b9:	8b 40 0c             	mov    0xc(%eax),%eax
f010e7bc:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e7c1:	75 0a                	jne    f010e7cd <test_find_block+0x263>
f010e7c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7c6:	8b 40 08             	mov    0x8(%eax),%eax
f010e7c9:	85 c0                	test   %eax,%eax
f010e7cb:	74 17                	je     f010e7e4 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e7cd:	83 ec 04             	sub    $0x4,%esp
f010e7d0:	68 a8 79 13 f0       	push   $0xf01379a8
f010e7d5:	68 e3 00 00 00       	push   $0xe3
f010e7da:	68 f4 75 13 f0       	push   $0xf01375f4
f010e7df:	e8 17 1a ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010e7e4:	83 ec 08             	sub    $0x8,%esp
f010e7e7:	68 00 70 00 00       	push   $0x7000
f010e7ec:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e7f1:	e8 3f 30 02 00       	call   f0131835 <find_block>
f010e7f6:	83 c4 10             	add    $0x10,%esp
f010e7f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010e7fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e800:	74 1a                	je     f010e81c <test_find_block+0x2b2>
f010e802:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e805:	8b 40 0c             	mov    0xc(%eax),%eax
f010e808:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e80d:	75 0d                	jne    f010e81c <test_find_block+0x2b2>
f010e80f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e812:	8b 40 08             	mov    0x8(%eax),%eax
f010e815:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e81a:	74 17                	je     f010e833 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e81c:	83 ec 04             	sub    $0x4,%esp
f010e81f:	68 a8 79 13 f0       	push   $0xf01379a8
f010e824:	68 e8 00 00 00       	push   $0xe8
f010e829:	68 f4 75 13 f0       	push   $0xf01375f4
f010e82e:	e8 c8 19 ff ff       	call   f01001fb <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010e833:	83 ec 08             	sub    $0x8,%esp
f010e836:	68 00 a4 01 00       	push   $0x1a400
f010e83b:	68 c8 7a 65 f0       	push   $0xf0657ac8
f010e840:	e8 f0 2f 02 00       	call   f0131835 <find_block>
f010e845:	83 c4 10             	add    $0x10,%esp
f010e848:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010e84b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e84f:	74 1a                	je     f010e86b <test_find_block+0x301>
f010e851:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e854:	8b 40 0c             	mov    0xc(%eax),%eax
f010e857:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010e85c:	75 0d                	jne    f010e86b <test_find_block+0x301>
f010e85e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e861:	8b 40 08             	mov    0x8(%eax),%eax
f010e864:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e869:	74 17                	je     f010e882 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010e86b:	83 ec 04             	sub    $0x4,%esp
f010e86e:	68 a8 79 13 f0       	push   $0xf01379a8
f010e873:	68 ed 00 00 00       	push   $0xed
f010e878:	68 f4 75 13 f0       	push   $0xf01375f4
f010e87d:	e8 79 19 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010e882:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010e887:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e88a:	75 09                	jne    f010e895 <test_find_block+0x32b>
f010e88c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010e891:	85 c0                	test   %eax,%eax
f010e893:	74 17                	je     f010e8ac <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010e895:	83 ec 04             	sub    $0x4,%esp
f010e898:	68 dc 79 13 f0       	push   $0xf01379dc
f010e89d:	68 f2 00 00 00       	push   $0xf2
f010e8a2:	68 f4 75 13 f0       	push   $0xf01375f4
f010e8a7:	e8 4f 19 ff ff       	call   f01001fb <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010e8ac:	83 ec 0c             	sub    $0xc,%esp
f010e8af:	68 40 7a 13 f0       	push   $0xf0137a40
f010e8b4:	e8 c9 23 ff ff       	call   f0100c82 <cprintf>
f010e8b9:	83 c4 10             	add    $0x10,%esp
}
f010e8bc:	90                   	nop
f010e8bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e8c0:	5b                   	pop    %ebx
f010e8c1:	5e                   	pop    %esi
f010e8c2:	5f                   	pop    %edi
f010e8c3:	5d                   	pop    %ebp
f010e8c4:	c3                   	ret    

f010e8c5 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e8c5:	55                   	push   %ebp
f010e8c6:	89 e5                	mov    %esp,%ebp
f010e8c8:	57                   	push   %edi
f010e8c9:	56                   	push   %esi
f010e8ca:	53                   	push   %ebx
f010e8cb:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e8d1:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e8d8:	83 ec 0c             	sub    $0xc,%esp
f010e8db:	ff 75 e0             	pushl  -0x20(%ebp)
f010e8de:	e8 75 2e 02 00       	call   f0131758 <initialize_MemBlocksList>
f010e8e3:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e8e6:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010e8ed:	00 00 00 
f010e8f0:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010e8f7:	00 00 00 
f010e8fa:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010e901:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e904:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e907:	bb 20 7d 13 f0       	mov    $0xf0137d20,%ebx
f010e90c:	ba 08 00 00 00       	mov    $0x8,%edx
f010e911:	89 c7                	mov    %eax,%edi
f010e913:	89 de                	mov    %ebx,%esi
f010e915:	89 d1                	mov    %edx,%ecx
f010e917:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e919:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e91c:	bb 40 7d 13 f0       	mov    $0xf0137d40,%ebx
f010e921:	ba 08 00 00 00       	mov    $0x8,%edx
f010e926:	89 c7                	mov    %eax,%edi
f010e928:	89 de                	mov    %ebx,%esi
f010e92a:	89 d1                	mov    %edx,%ecx
f010e92c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e92e:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010e935:	00 00 00 
f010e938:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010e93f:	00 00 00 
f010e942:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010e949:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e94c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e953:	e9 5f 01 00 00       	jmp    f010eab7 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e958:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e95b:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e95f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e962:	c1 e2 04             	shl    $0x4,%edx
f010e965:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e968:	01 da                	add    %ebx,%edx
f010e96a:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e970:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e972:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e975:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e979:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e97c:	c1 e2 04             	shl    $0x4,%edx
f010e97f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e982:	01 f2                	add    %esi,%edx
f010e984:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e98a:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e98c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e990:	0f 85 92 00 00 00    	jne    f010ea28 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e996:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010e99b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e99e:	c1 e2 04             	shl    $0x4,%edx
f010e9a1:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e9a4:	01 fa                	add    %edi,%edx
f010e9a6:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e9ac:	89 02                	mov    %eax,(%edx)
f010e9ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e9b1:	c1 e0 04             	shl    $0x4,%eax
f010e9b4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e9b7:	01 d8                	add    %ebx,%eax
f010e9b9:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e9be:	8b 00                	mov    (%eax),%eax
f010e9c0:	85 c0                	test   %eax,%eax
f010e9c2:	74 18                	je     f010e9dc <test_alloc_block_FF+0x117>
f010e9c4:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010e9c9:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e9cf:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e9d2:	c1 e1 04             	shl    $0x4,%ecx
f010e9d5:	01 ca                	add    %ecx,%edx
f010e9d7:	89 50 04             	mov    %edx,0x4(%eax)
f010e9da:	eb 13                	jmp    f010e9ef <test_alloc_block_FF+0x12a>
f010e9dc:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9e5:	c1 e2 04             	shl    $0x4,%edx
f010e9e8:	01 d0                	add    %edx,%eax
f010e9ea:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010e9ef:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e9f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e9f8:	c1 e2 04             	shl    $0x4,%edx
f010e9fb:	01 d0                	add    %edx,%eax
f010e9fd:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ea02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea05:	c1 e0 04             	shl    $0x4,%eax
f010ea08:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea0b:	01 f0                	add    %esi,%eax
f010ea0d:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ea12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ea18:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ea1d:	40                   	inc    %eax
f010ea1e:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010ea23:	e9 8c 00 00 00       	jmp    f010eab4 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ea28:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ea2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea30:	c1 e2 04             	shl    $0x4,%edx
f010ea33:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ea36:	01 fa                	add    %edi,%edx
f010ea38:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ea3e:	89 02                	mov    %eax,(%edx)
f010ea40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea43:	c1 e0 04             	shl    $0x4,%eax
f010ea46:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ea49:	01 d8                	add    %ebx,%eax
f010ea4b:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ea50:	8b 00                	mov    (%eax),%eax
f010ea52:	85 c0                	test   %eax,%eax
f010ea54:	74 17                	je     f010ea6d <test_alloc_block_FF+0x1a8>
f010ea56:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010ea5b:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ea61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ea64:	c1 e1 04             	shl    $0x4,%ecx
f010ea67:	01 ca                	add    %ecx,%edx
f010ea69:	89 10                	mov    %edx,(%eax)
f010ea6b:	eb 13                	jmp    f010ea80 <test_alloc_block_FF+0x1bb>
f010ea6d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea76:	c1 e2 04             	shl    $0x4,%edx
f010ea79:	01 d0                	add    %edx,%eax
f010ea7b:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ea80:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ea86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ea89:	c1 e2 04             	shl    $0x4,%edx
f010ea8c:	01 d0                	add    %edx,%eax
f010ea8e:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ea93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ea96:	c1 e0 04             	shl    $0x4,%eax
f010ea99:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ea9c:	01 f0                	add    %esi,%eax
f010ea9e:	2d d4 00 00 00       	sub    $0xd4,%eax
f010eaa3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eaa9:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eaae:	40                   	inc    %eax
f010eaaf:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010eab4:	ff 45 e4             	incl   -0x1c(%ebp)
f010eab7:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010eabb:	0f 8e 97 fe ff ff    	jle    f010e958 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010eac1:	83 ec 0c             	sub    $0xc,%esp
f010eac4:	68 00 00 30 00       	push   $0x300000
f010eac9:	e8 4c 30 02 00       	call   f0131b1a <alloc_block_FF>
f010eace:	83 c4 10             	add    $0x10,%esp
f010ead1:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010ead4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ead8:	74 17                	je     f010eaf1 <test_alloc_block_FF+0x22c>
f010eada:	83 ec 04             	sub    $0x4,%esp
f010eadd:	68 ac 7a 13 f0       	push   $0xf0137aac
f010eae2:	68 15 01 00 00       	push   $0x115
f010eae7:	68 f4 75 13 f0       	push   $0xf01375f4
f010eaec:	e8 0a 17 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eaf1:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eaf6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eaf9:	75 13                	jne    f010eb0e <test_alloc_block_FF+0x249>
f010eafb:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb00:	83 f8 08             	cmp    $0x8,%eax
f010eb03:	75 09                	jne    f010eb0e <test_alloc_block_FF+0x249>
f010eb05:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010eb0a:	85 c0                	test   %eax,%eax
f010eb0c:	74 17                	je     f010eb25 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010eb0e:	83 ec 04             	sub    $0x4,%esp
f010eb11:	68 20 7b 13 f0       	push   $0xf0137b20
f010eb16:	68 19 01 00 00       	push   $0x119
f010eb1b:	68 f4 75 13 f0       	push   $0xf01375f4
f010eb20:	e8 d6 16 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010eb25:	83 ec 0c             	sub    $0xc,%esp
f010eb28:	68 00 24 00 00       	push   $0x2400
f010eb2d:	e8 e8 2f 02 00       	call   f0131b1a <alloc_block_FF>
f010eb32:	83 c4 10             	add    $0x10,%esp
f010eb35:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010eb38:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010eb3c:	74 1a                	je     f010eb58 <test_alloc_block_FF+0x293>
f010eb3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb41:	8b 40 0c             	mov    0xc(%eax),%eax
f010eb44:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010eb49:	75 0d                	jne    f010eb58 <test_alloc_block_FF+0x293>
f010eb4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010eb4e:	8b 40 08             	mov    0x8(%eax),%eax
f010eb51:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010eb56:	74 17                	je     f010eb6f <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010eb58:	83 ec 04             	sub    $0x4,%esp
f010eb5b:	68 98 7b 13 f0       	push   $0xf0137b98
f010eb60:	68 21 01 00 00       	push   $0x121
f010eb65:	68 f4 75 13 f0       	push   $0xf01375f4
f010eb6a:	e8 8c 16 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eb6f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eb74:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eb77:	75 13                	jne    f010eb8c <test_alloc_block_FF+0x2c7>
f010eb79:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010eb7e:	83 f8 07             	cmp    $0x7,%eax
f010eb81:	75 09                	jne    f010eb8c <test_alloc_block_FF+0x2c7>
f010eb83:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010eb88:	85 c0                	test   %eax,%eax
f010eb8a:	74 17                	je     f010eba3 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eb8c:	83 ec 04             	sub    $0x4,%esp
f010eb8f:	68 dc 7b 13 f0       	push   $0xf0137bdc
f010eb94:	68 25 01 00 00       	push   $0x125
f010eb99:	68 f4 75 13 f0       	push   $0xf01375f4
f010eb9e:	e8 58 16 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010eba3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ebaa:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010ebad:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010ebb4:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010ebbb:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ebc2:	83 ec 0c             	sub    $0xc,%esp
f010ebc5:	ff 75 d8             	pushl  -0x28(%ebp)
f010ebc8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ebce:	50                   	push   %eax
f010ebcf:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ebd2:	50                   	push   %eax
f010ebd3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ebd6:	50                   	push   %eax
f010ebd7:	68 64 7b 65 f0       	push   $0xf0657b64
f010ebdc:	e8 5b 1c 00 00       	call   f011083c <check_list_data>
f010ebe1:	83 c4 20             	add    $0x20,%esp
f010ebe4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010ebe7:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ebeb:	74 17                	je     f010ec04 <test_alloc_block_FF+0x33f>
f010ebed:	83 ec 04             	sub    $0x4,%esp
f010ebf0:	68 40 7c 13 f0       	push   $0xf0137c40
f010ebf5:	68 2d 01 00 00       	push   $0x12d
f010ebfa:	68 f4 75 13 f0       	push   $0xf01375f4
f010ebff:	e8 f7 15 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ec04:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ec0a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ec0d:	74 17                	je     f010ec26 <test_alloc_block_FF+0x361>
f010ec0f:	83 ec 04             	sub    $0x4,%esp
f010ec12:	68 8c 7c 13 f0       	push   $0xf0137c8c
f010ec17:	68 2e 01 00 00       	push   $0x12e
f010ec1c:	68 f4 75 13 f0       	push   $0xf01375f4
f010ec21:	e8 d5 15 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010ec26:	83 ec 0c             	sub    $0xc,%esp
f010ec29:	68 00 00 10 00       	push   $0x100000
f010ec2e:	e8 e7 2e 02 00       	call   f0131b1a <alloc_block_FF>
f010ec33:	83 c4 10             	add    $0x10,%esp
f010ec36:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ec39:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ec3d:	74 1a                	je     f010ec59 <test_alloc_block_FF+0x394>
f010ec3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec42:	8b 40 0c             	mov    0xc(%eax),%eax
f010ec45:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ec4a:	75 0d                	jne    f010ec59 <test_alloc_block_FF+0x394>
f010ec4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ec4f:	8b 40 08             	mov    0x8(%eax),%eax
f010ec52:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ec57:	74 17                	je     f010ec70 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010ec59:	83 ec 04             	sub    $0x4,%esp
f010ec5c:	68 98 7b 13 f0       	push   $0xf0137b98
f010ec61:	68 36 01 00 00       	push   $0x136
f010ec66:	68 f4 75 13 f0       	push   $0xf01375f4
f010ec6b:	e8 8b 15 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ec70:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ec75:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ec78:	4a                   	dec    %edx
f010ec79:	39 d0                	cmp    %edx,%eax
f010ec7b:	75 13                	jne    f010ec90 <test_alloc_block_FF+0x3cb>
f010ec7d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ec82:	83 f8 07             	cmp    $0x7,%eax
f010ec85:	75 09                	jne    f010ec90 <test_alloc_block_FF+0x3cb>
f010ec87:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ec8c:	85 c0                	test   %eax,%eax
f010ec8e:	74 17                	je     f010eca7 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ec90:	83 ec 04             	sub    $0x4,%esp
f010ec93:	68 dc 7b 13 f0       	push   $0xf0137bdc
f010ec98:	68 3a 01 00 00       	push   $0x13a
f010ec9d:	68 f4 75 13 f0       	push   $0xf01375f4
f010eca2:	e8 54 15 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eca7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010ecae:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010ecb1:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ecb8:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ecbf:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ecc6:	83 ec 0c             	sub    $0xc,%esp
f010ecc9:	ff 75 d8             	pushl  -0x28(%ebp)
f010eccc:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ecd2:	50                   	push   %eax
f010ecd3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ecd6:	50                   	push   %eax
f010ecd7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ecda:	50                   	push   %eax
f010ecdb:	68 64 7b 65 f0       	push   $0xf0657b64
f010ece0:	e8 57 1b 00 00       	call   f011083c <check_list_data>
f010ece5:	83 c4 20             	add    $0x20,%esp
f010ece8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010eceb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ecef:	74 17                	je     f010ed08 <test_alloc_block_FF+0x443>
f010ecf1:	83 ec 04             	sub    $0x4,%esp
f010ecf4:	68 40 7c 13 f0       	push   $0xf0137c40
f010ecf9:	68 42 01 00 00       	push   $0x142
f010ecfe:	68 f4 75 13 f0       	push   $0xf01375f4
f010ed03:	e8 f3 14 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010ed08:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ed0e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed11:	74 17                	je     f010ed2a <test_alloc_block_FF+0x465>
f010ed13:	83 ec 04             	sub    $0x4,%esp
f010ed16:	68 8c 7c 13 f0       	push   $0xf0137c8c
f010ed1b:	68 43 01 00 00       	push   $0x143
f010ed20:	68 f4 75 13 f0       	push   $0xf01375f4
f010ed25:	e8 d1 14 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010ed2a:	83 ec 0c             	sub    $0xc,%esp
f010ed2d:	68 d8 7c 13 f0       	push   $0xf0137cd8
f010ed32:	e8 4b 1f ff ff       	call   f0100c82 <cprintf>
f010ed37:	83 c4 10             	add    $0x10,%esp
}
f010ed3a:	90                   	nop
f010ed3b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ed3e:	5b                   	pop    %ebx
f010ed3f:	5e                   	pop    %esi
f010ed40:	5f                   	pop    %edi
f010ed41:	5d                   	pop    %ebp
f010ed42:	c3                   	ret    

f010ed43 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ed43:	55                   	push   %ebp
f010ed44:	89 e5                	mov    %esp,%ebp
f010ed46:	57                   	push   %edi
f010ed47:	56                   	push   %esi
f010ed48:	53                   	push   %ebx
f010ed49:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010ed4f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ed56:	83 ec 0c             	sub    $0xc,%esp
f010ed59:	ff 75 e0             	pushl  -0x20(%ebp)
f010ed5c:	e8 f7 29 02 00       	call   f0131758 <initialize_MemBlocksList>
f010ed61:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ed64:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010ed6b:	00 00 00 
f010ed6e:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010ed75:	00 00 00 
f010ed78:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010ed7f:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010ed82:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ed85:	bb 54 7f 13 f0       	mov    $0xf0137f54,%ebx
f010ed8a:	ba 07 00 00 00       	mov    $0x7,%edx
f010ed8f:	89 c7                	mov    %eax,%edi
f010ed91:	89 de                	mov    %ebx,%esi
f010ed93:	89 d1                	mov    %edx,%ecx
f010ed95:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010ed97:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ed9a:	bb 70 7f 13 f0       	mov    $0xf0137f70,%ebx
f010ed9f:	ba 07 00 00 00       	mov    $0x7,%edx
f010eda4:	89 c7                	mov    %eax,%edi
f010eda6:	89 de                	mov    %ebx,%esi
f010eda8:	89 d1                	mov    %edx,%ecx
f010edaa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010edac:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010edb3:	00 00 00 
f010edb6:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010edbd:	00 00 00 
f010edc0:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010edc7:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010edca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010edd1:	e9 5f 01 00 00       	jmp    f010ef35 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010edd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010edd9:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010eddd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ede0:	c1 e2 04             	shl    $0x4,%edx
f010ede3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ede6:	01 da                	add    %ebx,%edx
f010ede8:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010edee:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010edf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010edf3:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010edf7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010edfa:	c1 e2 04             	shl    $0x4,%edx
f010edfd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ee00:	01 f2                	add    %esi,%edx
f010ee02:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010ee08:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ee0a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ee0e:	0f 85 92 00 00 00    	jne    f010eea6 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ee14:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ee19:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee1c:	c1 e2 04             	shl    $0x4,%edx
f010ee1f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ee22:	01 fa                	add    %edi,%edx
f010ee24:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010ee2a:	89 02                	mov    %eax,(%edx)
f010ee2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee2f:	c1 e0 04             	shl    $0x4,%eax
f010ee32:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ee35:	01 d8                	add    %ebx,%eax
f010ee37:	2d bc 00 00 00       	sub    $0xbc,%eax
f010ee3c:	8b 00                	mov    (%eax),%eax
f010ee3e:	85 c0                	test   %eax,%eax
f010ee40:	74 18                	je     f010ee5a <test_alloc_block_BF+0x117>
f010ee42:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010ee47:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010ee4d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ee50:	c1 e1 04             	shl    $0x4,%ecx
f010ee53:	01 ca                	add    %ecx,%edx
f010ee55:	89 50 04             	mov    %edx,0x4(%eax)
f010ee58:	eb 13                	jmp    f010ee6d <test_alloc_block_BF+0x12a>
f010ee5a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ee60:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee63:	c1 e2 04             	shl    $0x4,%edx
f010ee66:	01 d0                	add    %edx,%eax
f010ee68:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ee6d:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ee73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ee76:	c1 e2 04             	shl    $0x4,%edx
f010ee79:	01 d0                	add    %edx,%eax
f010ee7b:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010ee80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee83:	c1 e0 04             	shl    $0x4,%eax
f010ee86:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ee89:	01 f0                	add    %esi,%eax
f010ee8b:	2d b8 00 00 00       	sub    $0xb8,%eax
f010ee90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ee96:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ee9b:	40                   	inc    %eax
f010ee9c:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010eea1:	e9 8c 00 00 00       	jmp    f010ef32 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010eea6:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eeab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eeae:	c1 e2 04             	shl    $0x4,%edx
f010eeb1:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010eeb4:	01 fa                	add    %edi,%edx
f010eeb6:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010eebc:	89 02                	mov    %eax,(%edx)
f010eebe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eec1:	c1 e0 04             	shl    $0x4,%eax
f010eec4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010eec7:	01 d8                	add    %ebx,%eax
f010eec9:	2d b8 00 00 00       	sub    $0xb8,%eax
f010eece:	8b 00                	mov    (%eax),%eax
f010eed0:	85 c0                	test   %eax,%eax
f010eed2:	74 17                	je     f010eeeb <test_alloc_block_BF+0x1a8>
f010eed4:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010eed9:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010eedf:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eee2:	c1 e1 04             	shl    $0x4,%ecx
f010eee5:	01 ca                	add    %ecx,%edx
f010eee7:	89 10                	mov    %edx,(%eax)
f010eee9:	eb 13                	jmp    f010eefe <test_alloc_block_BF+0x1bb>
f010eeeb:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010eef1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eef4:	c1 e2 04             	shl    $0x4,%edx
f010eef7:	01 d0                	add    %edx,%eax
f010eef9:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010eefe:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010ef04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ef07:	c1 e2 04             	shl    $0x4,%edx
f010ef0a:	01 d0                	add    %edx,%eax
f010ef0c:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010ef11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ef14:	c1 e0 04             	shl    $0x4,%eax
f010ef17:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ef1a:	01 f0                	add    %esi,%eax
f010ef1c:	2d bc 00 00 00       	sub    $0xbc,%eax
f010ef21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ef27:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ef2c:	40                   	inc    %eax
f010ef2d:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010ef32:	ff 45 e4             	incl   -0x1c(%ebp)
f010ef35:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010ef39:	0f 8e 97 fe ff ff    	jle    f010edd6 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010ef3f:	83 ec 0c             	sub    $0xc,%esp
f010ef42:	68 00 00 40 00       	push   $0x400000
f010ef47:	e8 9b 2d 02 00       	call   f0131ce7 <alloc_block_BF>
f010ef4c:	83 c4 10             	add    $0x10,%esp
f010ef4f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010ef52:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef56:	74 17                	je     f010ef6f <test_alloc_block_BF+0x22c>
f010ef58:	83 ec 04             	sub    $0x4,%esp
f010ef5b:	68 60 7d 13 f0       	push   $0xf0137d60
f010ef60:	68 66 01 00 00       	push   $0x166
f010ef65:	68 f4 75 13 f0       	push   $0xf01375f4
f010ef6a:	e8 8c 12 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ef6f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ef74:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ef77:	75 13                	jne    f010ef8c <test_alloc_block_BF+0x249>
f010ef79:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ef7e:	83 f8 07             	cmp    $0x7,%eax
f010ef81:	75 09                	jne    f010ef8c <test_alloc_block_BF+0x249>
f010ef83:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ef88:	85 c0                	test   %eax,%eax
f010ef8a:	74 17                	je     f010efa3 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ef8c:	83 ec 04             	sub    $0x4,%esp
f010ef8f:	68 20 7b 13 f0       	push   $0xf0137b20
f010ef94:	68 6a 01 00 00       	push   $0x16a
f010ef99:	68 f4 75 13 f0       	push   $0xf01375f4
f010ef9e:	e8 58 12 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010efa3:	83 ec 0c             	sub    $0xc,%esp
f010efa6:	68 00 00 10 00       	push   $0x100000
f010efab:	e8 37 2d 02 00       	call   f0131ce7 <alloc_block_BF>
f010efb0:	83 c4 10             	add    $0x10,%esp
f010efb3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010efb6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010efba:	74 1a                	je     f010efd6 <test_alloc_block_BF+0x293>
f010efbc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efbf:	8b 40 0c             	mov    0xc(%eax),%eax
f010efc2:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010efc7:	75 0d                	jne    f010efd6 <test_alloc_block_BF+0x293>
f010efc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efcc:	8b 40 08             	mov    0x8(%eax),%eax
f010efcf:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010efd4:	74 17                	je     f010efed <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010efd6:	83 ec 04             	sub    $0x4,%esp
f010efd9:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010efde:	68 72 01 00 00       	push   $0x172
f010efe3:	68 f4 75 13 f0       	push   $0xf01375f4
f010efe8:	e8 0e 12 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010efed:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010eff2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eff5:	75 13                	jne    f010f00a <test_alloc_block_BF+0x2c7>
f010eff7:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010effc:	83 f8 06             	cmp    $0x6,%eax
f010efff:	75 09                	jne    f010f00a <test_alloc_block_BF+0x2c7>
f010f001:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f006:	85 c0                	test   %eax,%eax
f010f008:	74 17                	je     f010f021 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f00a:	83 ec 04             	sub    $0x4,%esp
f010f00d:	68 18 7e 13 f0       	push   $0xf0137e18
f010f012:	68 76 01 00 00       	push   $0x176
f010f017:	68 f4 75 13 f0       	push   $0xf01375f4
f010f01c:	e8 da 11 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f021:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f028:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010f02b:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010f032:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010f039:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f040:	83 ec 0c             	sub    $0xc,%esp
f010f043:	ff 75 d8             	pushl  -0x28(%ebp)
f010f046:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f04c:	50                   	push   %eax
f010f04d:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f050:	50                   	push   %eax
f010f051:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f054:	50                   	push   %eax
f010f055:	68 64 7b 65 f0       	push   $0xf0657b64
f010f05a:	e8 dd 17 00 00       	call   f011083c <check_list_data>
f010f05f:	83 c4 20             	add    $0x20,%esp
f010f062:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f065:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f069:	74 17                	je     f010f082 <test_alloc_block_BF+0x33f>
f010f06b:	83 ec 04             	sub    $0x4,%esp
f010f06e:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f073:	68 7e 01 00 00       	push   $0x17e
f010f078:	68 f4 75 13 f0       	push   $0xf01375f4
f010f07d:	e8 79 11 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f082:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f088:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f08b:	74 17                	je     f010f0a4 <test_alloc_block_BF+0x361>
f010f08d:	83 ec 04             	sub    $0x4,%esp
f010f090:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f095:	68 7f 01 00 00       	push   $0x17f
f010f09a:	68 f4 75 13 f0       	push   $0xf01375f4
f010f09f:	e8 57 11 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010f0a4:	83 ec 0c             	sub    $0xc,%esp
f010f0a7:	68 00 00 10 00       	push   $0x100000
f010f0ac:	e8 36 2c 02 00       	call   f0131ce7 <alloc_block_BF>
f010f0b1:	83 c4 10             	add    $0x10,%esp
f010f0b4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010f0b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f0bb:	74 1a                	je     f010f0d7 <test_alloc_block_BF+0x394>
f010f0bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0c0:	8b 40 0c             	mov    0xc(%eax),%eax
f010f0c3:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010f0c8:	75 0d                	jne    f010f0d7 <test_alloc_block_BF+0x394>
f010f0ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f0cd:	8b 40 08             	mov    0x8(%eax),%eax
f010f0d0:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f0d5:	74 17                	je     f010f0ee <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f0d7:	83 ec 04             	sub    $0x4,%esp
f010f0da:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f0df:	68 87 01 00 00       	push   $0x187
f010f0e4:	68 f4 75 13 f0       	push   $0xf01375f4
f010f0e9:	e8 0d 11 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f0ee:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f0f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f0f6:	4a                   	dec    %edx
f010f0f7:	39 d0                	cmp    %edx,%eax
f010f0f9:	75 13                	jne    f010f10e <test_alloc_block_BF+0x3cb>
f010f0fb:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f100:	83 f8 06             	cmp    $0x6,%eax
f010f103:	75 09                	jne    f010f10e <test_alloc_block_BF+0x3cb>
f010f105:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f10a:	85 c0                	test   %eax,%eax
f010f10c:	74 17                	je     f010f125 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f10e:	83 ec 04             	sub    $0x4,%esp
f010f111:	68 18 7e 13 f0       	push   $0xf0137e18
f010f116:	68 8b 01 00 00       	push   $0x18b
f010f11b:	68 f4 75 13 f0       	push   $0xf01375f4
f010f120:	e8 d6 10 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f125:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f12c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f12f:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010f136:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010f13d:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f144:	83 ec 0c             	sub    $0xc,%esp
f010f147:	ff 75 d8             	pushl  -0x28(%ebp)
f010f14a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f150:	50                   	push   %eax
f010f151:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f154:	50                   	push   %eax
f010f155:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f158:	50                   	push   %eax
f010f159:	68 64 7b 65 f0       	push   $0xf0657b64
f010f15e:	e8 d9 16 00 00       	call   f011083c <check_list_data>
f010f163:	83 c4 20             	add    $0x20,%esp
f010f166:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f169:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f16d:	74 17                	je     f010f186 <test_alloc_block_BF+0x443>
f010f16f:	83 ec 04             	sub    $0x4,%esp
f010f172:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f177:	68 93 01 00 00       	push   $0x193
f010f17c:	68 f4 75 13 f0       	push   $0xf01375f4
f010f181:	e8 75 10 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f186:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f18c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f18f:	74 17                	je     f010f1a8 <test_alloc_block_BF+0x465>
f010f191:	83 ec 04             	sub    $0x4,%esp
f010f194:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f199:	68 94 01 00 00       	push   $0x194
f010f19e:	68 f4 75 13 f0       	push   $0xf01375f4
f010f1a3:	e8 53 10 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010f1a8:	83 ec 0c             	sub    $0xc,%esp
f010f1ab:	68 00 0c 00 00       	push   $0xc00
f010f1b0:	e8 32 2b 02 00       	call   f0131ce7 <alloc_block_BF>
f010f1b5:	83 c4 10             	add    $0x10,%esp
f010f1b8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010f1bb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f1bf:	74 1a                	je     f010f1db <test_alloc_block_BF+0x498>
f010f1c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1c4:	8b 40 0c             	mov    0xc(%eax),%eax
f010f1c7:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f1cc:	75 0d                	jne    f010f1db <test_alloc_block_BF+0x498>
f010f1ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f1d1:	8b 40 08             	mov    0x8(%eax),%eax
f010f1d4:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010f1d9:	74 17                	je     f010f1f2 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f1db:	83 ec 04             	sub    $0x4,%esp
f010f1de:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f1e3:	68 9c 01 00 00       	push   $0x19c
f010f1e8:	68 f4 75 13 f0       	push   $0xf01375f4
f010f1ed:	e8 09 10 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f1f2:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f1f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f1fa:	83 ea 02             	sub    $0x2,%edx
f010f1fd:	39 d0                	cmp    %edx,%eax
f010f1ff:	75 13                	jne    f010f214 <test_alloc_block_BF+0x4d1>
f010f201:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f206:	83 f8 06             	cmp    $0x6,%eax
f010f209:	75 09                	jne    f010f214 <test_alloc_block_BF+0x4d1>
f010f20b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f210:	85 c0                	test   %eax,%eax
f010f212:	74 17                	je     f010f22b <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f214:	83 ec 04             	sub    $0x4,%esp
f010f217:	68 18 7e 13 f0       	push   $0xf0137e18
f010f21c:	68 a0 01 00 00       	push   $0x1a0
f010f221:	68 f4 75 13 f0       	push   $0xf01375f4
f010f226:	e8 d0 0f ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f22b:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f232:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010f235:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010f23c:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010f243:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f24a:	83 ec 0c             	sub    $0xc,%esp
f010f24d:	ff 75 d8             	pushl  -0x28(%ebp)
f010f250:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f256:	50                   	push   %eax
f010f257:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f25a:	50                   	push   %eax
f010f25b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f25e:	50                   	push   %eax
f010f25f:	68 64 7b 65 f0       	push   $0xf0657b64
f010f264:	e8 d3 15 00 00       	call   f011083c <check_list_data>
f010f269:	83 c4 20             	add    $0x20,%esp
f010f26c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f26f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f273:	74 17                	je     f010f28c <test_alloc_block_BF+0x549>
f010f275:	83 ec 04             	sub    $0x4,%esp
f010f278:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f27d:	68 a8 01 00 00       	push   $0x1a8
f010f282:	68 f4 75 13 f0       	push   $0xf01375f4
f010f287:	e8 6f 0f ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f28c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f292:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f295:	74 17                	je     f010f2ae <test_alloc_block_BF+0x56b>
f010f297:	83 ec 04             	sub    $0x4,%esp
f010f29a:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f29f:	68 a9 01 00 00       	push   $0x1a9
f010f2a4:	68 f4 75 13 f0       	push   $0xf01375f4
f010f2a9:	e8 4d 0f ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010f2ae:	83 ec 0c             	sub    $0xc,%esp
f010f2b1:	68 00 08 00 00       	push   $0x800
f010f2b6:	e8 2c 2a 02 00       	call   f0131ce7 <alloc_block_BF>
f010f2bb:	83 c4 10             	add    $0x10,%esp
f010f2be:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010f2c1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f2c5:	74 17                	je     f010f2de <test_alloc_block_BF+0x59b>
f010f2c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2ca:	8b 40 0c             	mov    0xc(%eax),%eax
f010f2cd:	3d 00 08 00 00       	cmp    $0x800,%eax
f010f2d2:	75 0a                	jne    f010f2de <test_alloc_block_BF+0x59b>
f010f2d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2d7:	8b 40 08             	mov    0x8(%eax),%eax
f010f2da:	85 c0                	test   %eax,%eax
f010f2dc:	74 17                	je     f010f2f5 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010f2de:	83 ec 04             	sub    $0x4,%esp
f010f2e1:	68 d4 7d 13 f0       	push   $0xf0137dd4
f010f2e6:	68 b1 01 00 00       	push   $0x1b1
f010f2eb:	68 f4 75 13 f0       	push   $0xf01375f4
f010f2f0:	e8 06 0f ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2f5:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f2fa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f2fd:	83 ea 02             	sub    $0x2,%edx
f010f300:	39 d0                	cmp    %edx,%eax
f010f302:	75 13                	jne    f010f317 <test_alloc_block_BF+0x5d4>
f010f304:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f309:	83 f8 05             	cmp    $0x5,%eax
f010f30c:	75 09                	jne    f010f317 <test_alloc_block_BF+0x5d4>
f010f30e:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f313:	85 c0                	test   %eax,%eax
f010f315:	74 17                	je     f010f32e <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f317:	83 ec 04             	sub    $0x4,%esp
f010f31a:	68 18 7e 13 f0       	push   $0xf0137e18
f010f31f:	68 b5 01 00 00       	push   $0x1b5
f010f324:	68 f4 75 13 f0       	push   $0xf01375f4
f010f329:	e8 cd 0e ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f32e:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010f335:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010f338:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010f33f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010f346:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f34d:	83 ec 0c             	sub    $0xc,%esp
f010f350:	ff 75 d8             	pushl  -0x28(%ebp)
f010f353:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010f359:	50                   	push   %eax
f010f35a:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010f35d:	50                   	push   %eax
f010f35e:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010f361:	50                   	push   %eax
f010f362:	68 64 7b 65 f0       	push   $0xf0657b64
f010f367:	e8 d0 14 00 00       	call   f011083c <check_list_data>
f010f36c:	83 c4 20             	add    $0x20,%esp
f010f36f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010f372:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f376:	74 17                	je     f010f38f <test_alloc_block_BF+0x64c>
f010f378:	83 ec 04             	sub    $0x4,%esp
f010f37b:	68 7c 7e 13 f0       	push   $0xf0137e7c
f010f380:	68 bd 01 00 00       	push   $0x1bd
f010f385:	68 f4 75 13 f0       	push   $0xf01375f4
f010f38a:	e8 6c 0e ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010f38f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f395:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f398:	74 17                	je     f010f3b1 <test_alloc_block_BF+0x66e>
f010f39a:	83 ec 04             	sub    $0x4,%esp
f010f39d:	68 c8 7e 13 f0       	push   $0xf0137ec8
f010f3a2:	68 be 01 00 00       	push   $0x1be
f010f3a7:	68 f4 75 13 f0       	push   $0xf01375f4
f010f3ac:	e8 4a 0e ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010f3b1:	83 ec 0c             	sub    $0xc,%esp
f010f3b4:	68 14 7f 13 f0       	push   $0xf0137f14
f010f3b9:	e8 c4 18 ff ff       	call   f0100c82 <cprintf>
f010f3be:	83 c4 10             	add    $0x10,%esp
}
f010f3c1:	90                   	nop
f010f3c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f3c5:	5b                   	pop    %ebx
f010f3c6:	5e                   	pop    %esi
f010f3c7:	5f                   	pop    %edi
f010f3c8:	5d                   	pop    %ebp
f010f3c9:	c3                   	ret    

f010f3ca <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f3ca:	55                   	push   %ebp
f010f3cb:	89 e5                	mov    %esp,%ebp
f010f3cd:	57                   	push   %edi
f010f3ce:	56                   	push   %esi
f010f3cf:	53                   	push   %ebx
f010f3d0:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f3d6:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f3dd:	83 ec 0c             	sub    $0xc,%esp
f010f3e0:	ff 75 e0             	pushl  -0x20(%ebp)
f010f3e3:	e8 70 23 02 00       	call   f0131758 <initialize_MemBlocksList>
f010f3e8:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f3eb:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010f3f2:	00 00 00 
f010f3f5:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010f3fc:	00 00 00 
f010f3ff:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010f406:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f409:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f40c:	bb 20 7d 13 f0       	mov    $0xf0137d20,%ebx
f010f411:	ba 08 00 00 00       	mov    $0x8,%edx
f010f416:	89 c7                	mov    %eax,%edi
f010f418:	89 de                	mov    %ebx,%esi
f010f41a:	89 d1                	mov    %edx,%ecx
f010f41c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010f41e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f421:	bb 80 81 13 f0       	mov    $0xf0138180,%ebx
f010f426:	ba 08 00 00 00       	mov    $0x8,%edx
f010f42b:	89 c7                	mov    %eax,%edi
f010f42d:	89 de                	mov    %ebx,%esi
f010f42f:	89 d1                	mov    %edx,%ecx
f010f431:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f433:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010f43a:	00 00 00 
f010f43d:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010f444:	00 00 00 
f010f447:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010f44e:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f451:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f458:	e9 5f 01 00 00       	jmp    f010f5bc <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f45d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f460:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f464:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f467:	c1 e2 04             	shl    $0x4,%edx
f010f46a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f46d:	01 da                	add    %ebx,%edx
f010f46f:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f475:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f477:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f47a:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f47e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f481:	c1 e2 04             	shl    $0x4,%edx
f010f484:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f487:	01 f2                	add    %esi,%edx
f010f489:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f48f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f491:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f495:	0f 85 92 00 00 00    	jne    f010f52d <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f49b:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f4a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4a3:	c1 e2 04             	shl    $0x4,%edx
f010f4a6:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4a9:	01 fa                	add    %edi,%edx
f010f4ab:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f4b1:	89 02                	mov    %eax,(%edx)
f010f4b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4b6:	c1 e0 04             	shl    $0x4,%eax
f010f4b9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4bc:	01 d8                	add    %ebx,%eax
f010f4be:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f4c3:	8b 00                	mov    (%eax),%eax
f010f4c5:	85 c0                	test   %eax,%eax
f010f4c7:	74 18                	je     f010f4e1 <test_alloc_block_NF+0x117>
f010f4c9:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f010f4ce:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f4d4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4d7:	c1 e1 04             	shl    $0x4,%ecx
f010f4da:	01 ca                	add    %ecx,%edx
f010f4dc:	89 50 04             	mov    %edx,0x4(%eax)
f010f4df:	eb 13                	jmp    f010f4f4 <test_alloc_block_NF+0x12a>
f010f4e1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4ea:	c1 e2 04             	shl    $0x4,%edx
f010f4ed:	01 d0                	add    %edx,%eax
f010f4ef:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f4f4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f4fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4fd:	c1 e2 04             	shl    $0x4,%edx
f010f500:	01 d0                	add    %edx,%eax
f010f502:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f507:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f50a:	c1 e0 04             	shl    $0x4,%eax
f010f50d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f510:	01 f0                	add    %esi,%eax
f010f512:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f517:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f51d:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f522:	40                   	inc    %eax
f010f523:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
f010f528:	e9 8c 00 00 00       	jmp    f010f5b9 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f52d:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f532:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f535:	c1 e2 04             	shl    $0x4,%edx
f010f538:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f53b:	01 fa                	add    %edi,%edx
f010f53d:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f543:	89 02                	mov    %eax,(%edx)
f010f545:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f548:	c1 e0 04             	shl    $0x4,%eax
f010f54b:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f54e:	01 d8                	add    %ebx,%eax
f010f550:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f555:	8b 00                	mov    (%eax),%eax
f010f557:	85 c0                	test   %eax,%eax
f010f559:	74 17                	je     f010f572 <test_alloc_block_NF+0x1a8>
f010f55b:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f010f560:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f566:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f569:	c1 e1 04             	shl    $0x4,%ecx
f010f56c:	01 ca                	add    %ecx,%edx
f010f56e:	89 10                	mov    %edx,(%eax)
f010f570:	eb 13                	jmp    f010f585 <test_alloc_block_NF+0x1bb>
f010f572:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f578:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f57b:	c1 e2 04             	shl    $0x4,%edx
f010f57e:	01 d0                	add    %edx,%eax
f010f580:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f010f585:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f58b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f58e:	c1 e2 04             	shl    $0x4,%edx
f010f591:	01 d0                	add    %edx,%eax
f010f593:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f010f598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f59b:	c1 e0 04             	shl    $0x4,%eax
f010f59e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f5a1:	01 f0                	add    %esi,%eax
f010f5a3:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f5a8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f5ae:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f5b3:	40                   	inc    %eax
f010f5b4:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010f5b9:	ff 45 e4             	incl   -0x1c(%ebp)
f010f5bc:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f5c0:	0f 8e 97 fe ff ff    	jle    f010f45d <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010f5c6:	83 ec 0c             	sub    $0xc,%esp
f010f5c9:	68 00 00 a0 00       	push   $0xa00000
f010f5ce:	e8 25 29 02 00       	call   f0131ef8 <alloc_block_NF>
f010f5d3:	83 c4 10             	add    $0x10,%esp
f010f5d6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010f5d9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5dd:	74 17                	je     f010f5f6 <test_alloc_block_NF+0x22c>
f010f5df:	83 ec 04             	sub    $0x4,%esp
f010f5e2:	68 8c 7f 13 f0       	push   $0xf0137f8c
f010f5e7:	68 e1 01 00 00       	push   $0x1e1
f010f5ec:	68 f4 75 13 f0       	push   $0xf01375f4
f010f5f1:	e8 05 0c ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f5f6:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f5fb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f5fe:	75 13                	jne    f010f613 <test_alloc_block_NF+0x249>
f010f600:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f605:	83 f8 08             	cmp    $0x8,%eax
f010f608:	75 09                	jne    f010f613 <test_alloc_block_NF+0x249>
f010f60a:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f60f:	85 c0                	test   %eax,%eax
f010f611:	74 17                	je     f010f62a <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f613:	83 ec 04             	sub    $0x4,%esp
f010f616:	68 20 7b 13 f0       	push   $0xf0137b20
f010f61b:	68 e5 01 00 00       	push   $0x1e5
f010f620:	68 f4 75 13 f0       	push   $0xf01375f4
f010f625:	e8 d1 0b ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010f62a:	83 ec 0c             	sub    $0xc,%esp
f010f62d:	68 00 28 00 00       	push   $0x2800
f010f632:	e8 c1 28 02 00       	call   f0131ef8 <alloc_block_NF>
f010f637:	83 c4 10             	add    $0x10,%esp
f010f63a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010f63d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f641:	74 1a                	je     f010f65d <test_alloc_block_NF+0x293>
f010f643:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f646:	8b 40 0c             	mov    0xc(%eax),%eax
f010f649:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010f64e:	75 0d                	jne    f010f65d <test_alloc_block_NF+0x293>
f010f650:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f653:	8b 40 08             	mov    0x8(%eax),%eax
f010f656:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f65b:	74 17                	je     f010f674 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f65d:	83 ec 04             	sub    $0x4,%esp
f010f660:	68 00 80 13 f0       	push   $0xf0138000
f010f665:	68 ed 01 00 00       	push   $0x1ed
f010f66a:	68 f4 75 13 f0       	push   $0xf01375f4
f010f66f:	e8 87 0b ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f674:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f679:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f67c:	75 13                	jne    f010f691 <test_alloc_block_NF+0x2c7>
f010f67e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f683:	83 f8 07             	cmp    $0x7,%eax
f010f686:	75 09                	jne    f010f691 <test_alloc_block_NF+0x2c7>
f010f688:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f68d:	85 c0                	test   %eax,%eax
f010f68f:	74 17                	je     f010f6a8 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f691:	83 ec 04             	sub    $0x4,%esp
f010f694:	68 44 80 13 f0       	push   $0xf0138044
f010f699:	68 f1 01 00 00       	push   $0x1f1
f010f69e:	68 f4 75 13 f0       	push   $0xf01375f4
f010f6a3:	e8 53 0b ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f6a8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f6af:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010f6b2:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f6b9:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f6c0:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f6c7:	83 ec 0c             	sub    $0xc,%esp
f010f6ca:	ff 75 d8             	pushl  -0x28(%ebp)
f010f6cd:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f6d3:	50                   	push   %eax
f010f6d4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f6d7:	50                   	push   %eax
f010f6d8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f6db:	50                   	push   %eax
f010f6dc:	68 64 7b 65 f0       	push   $0xf0657b64
f010f6e1:	e8 56 11 00 00       	call   f011083c <check_list_data>
f010f6e6:	83 c4 20             	add    $0x20,%esp
f010f6e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f6ec:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f6f0:	74 17                	je     f010f709 <test_alloc_block_NF+0x33f>
f010f6f2:	83 ec 04             	sub    $0x4,%esp
f010f6f5:	68 a8 80 13 f0       	push   $0xf01380a8
f010f6fa:	68 f9 01 00 00       	push   $0x1f9
f010f6ff:	68 f4 75 13 f0       	push   $0xf01375f4
f010f704:	e8 f2 0a ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f709:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f70f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f712:	74 17                	je     f010f72b <test_alloc_block_NF+0x361>
f010f714:	83 ec 04             	sub    $0x4,%esp
f010f717:	68 f4 80 13 f0       	push   $0xf01380f4
f010f71c:	68 fa 01 00 00       	push   $0x1fa
f010f721:	68 f4 75 13 f0       	push   $0xf01375f4
f010f726:	e8 d0 0a ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010f72b:	83 ec 0c             	sub    $0xc,%esp
f010f72e:	68 00 00 20 00       	push   $0x200000
f010f733:	e8 c0 27 02 00       	call   f0131ef8 <alloc_block_NF>
f010f738:	83 c4 10             	add    $0x10,%esp
f010f73b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010f73e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f742:	74 1a                	je     f010f75e <test_alloc_block_NF+0x394>
f010f744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f747:	8b 40 0c             	mov    0xc(%eax),%eax
f010f74a:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f74f:	75 0d                	jne    f010f75e <test_alloc_block_NF+0x394>
f010f751:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f754:	8b 40 08             	mov    0x8(%eax),%eax
f010f757:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f75c:	74 17                	je     f010f775 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f75e:	83 ec 04             	sub    $0x4,%esp
f010f761:	68 00 80 13 f0       	push   $0xf0138000
f010f766:	68 03 02 00 00       	push   $0x203
f010f76b:	68 f4 75 13 f0       	push   $0xf01375f4
f010f770:	e8 86 0a ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f775:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f77a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f77d:	75 13                	jne    f010f792 <test_alloc_block_NF+0x3c8>
f010f77f:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f784:	83 f8 06             	cmp    $0x6,%eax
f010f787:	75 09                	jne    f010f792 <test_alloc_block_NF+0x3c8>
f010f789:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f78e:	85 c0                	test   %eax,%eax
f010f790:	74 17                	je     f010f7a9 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f792:	83 ec 04             	sub    $0x4,%esp
f010f795:	68 44 80 13 f0       	push   $0xf0138044
f010f79a:	68 07 02 00 00       	push   $0x207
f010f79f:	68 f4 75 13 f0       	push   $0xf01375f4
f010f7a4:	e8 52 0a ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f7a9:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f7b0:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f7b3:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010f7ba:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010f7c1:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f7c8:	83 ec 0c             	sub    $0xc,%esp
f010f7cb:	ff 75 d8             	pushl  -0x28(%ebp)
f010f7ce:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f7d4:	50                   	push   %eax
f010f7d5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f7d8:	50                   	push   %eax
f010f7d9:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f7dc:	50                   	push   %eax
f010f7dd:	68 64 7b 65 f0       	push   $0xf0657b64
f010f7e2:	e8 55 10 00 00       	call   f011083c <check_list_data>
f010f7e7:	83 c4 20             	add    $0x20,%esp
f010f7ea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f7ed:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f7f1:	74 17                	je     f010f80a <test_alloc_block_NF+0x440>
f010f7f3:	83 ec 04             	sub    $0x4,%esp
f010f7f6:	68 a8 80 13 f0       	push   $0xf01380a8
f010f7fb:	68 0f 02 00 00       	push   $0x20f
f010f800:	68 f4 75 13 f0       	push   $0xf01375f4
f010f805:	e8 f1 09 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f80a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f810:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f813:	74 17                	je     f010f82c <test_alloc_block_NF+0x462>
f010f815:	83 ec 04             	sub    $0x4,%esp
f010f818:	68 f4 80 13 f0       	push   $0xf01380f4
f010f81d:	68 10 02 00 00       	push   $0x210
f010f822:	68 f4 75 13 f0       	push   $0xf01375f4
f010f827:	e8 cf 09 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010f82c:	83 ec 0c             	sub    $0xc,%esp
f010f82f:	68 00 00 08 00       	push   $0x80000
f010f834:	e8 bf 26 02 00       	call   f0131ef8 <alloc_block_NF>
f010f839:	83 c4 10             	add    $0x10,%esp
f010f83c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010f83f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f843:	74 1a                	je     f010f85f <test_alloc_block_NF+0x495>
f010f845:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f848:	8b 40 0c             	mov    0xc(%eax),%eax
f010f84b:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010f850:	75 0d                	jne    f010f85f <test_alloc_block_NF+0x495>
f010f852:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f855:	8b 40 08             	mov    0x8(%eax),%eax
f010f858:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010f85d:	74 17                	je     f010f876 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f85f:	83 ec 04             	sub    $0x4,%esp
f010f862:	68 00 80 13 f0       	push   $0xf0138000
f010f867:	68 19 02 00 00       	push   $0x219
f010f86c:	68 f4 75 13 f0       	push   $0xf01375f4
f010f871:	e8 85 09 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f876:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f87b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f87e:	4a                   	dec    %edx
f010f87f:	39 d0                	cmp    %edx,%eax
f010f881:	75 13                	jne    f010f896 <test_alloc_block_NF+0x4cc>
f010f883:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f888:	83 f8 06             	cmp    $0x6,%eax
f010f88b:	75 09                	jne    f010f896 <test_alloc_block_NF+0x4cc>
f010f88d:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f892:	85 c0                	test   %eax,%eax
f010f894:	74 17                	je     f010f8ad <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f896:	83 ec 04             	sub    $0x4,%esp
f010f899:	68 44 80 13 f0       	push   $0xf0138044
f010f89e:	68 1d 02 00 00       	push   $0x21d
f010f8a3:	68 f4 75 13 f0       	push   $0xf01375f4
f010f8a8:	e8 4e 09 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f8ad:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f8b4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f8b7:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010f8be:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f8c5:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f8cc:	83 ec 0c             	sub    $0xc,%esp
f010f8cf:	ff 75 d8             	pushl  -0x28(%ebp)
f010f8d2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f8d8:	50                   	push   %eax
f010f8d9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8dc:	50                   	push   %eax
f010f8dd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f8e0:	50                   	push   %eax
f010f8e1:	68 64 7b 65 f0       	push   $0xf0657b64
f010f8e6:	e8 51 0f 00 00       	call   f011083c <check_list_data>
f010f8eb:	83 c4 20             	add    $0x20,%esp
f010f8ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f8f1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f8f5:	74 17                	je     f010f90e <test_alloc_block_NF+0x544>
f010f8f7:	83 ec 04             	sub    $0x4,%esp
f010f8fa:	68 a8 80 13 f0       	push   $0xf01380a8
f010f8ff:	68 25 02 00 00       	push   $0x225
f010f904:	68 f4 75 13 f0       	push   $0xf01375f4
f010f909:	e8 ed 08 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f90e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f914:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f917:	74 17                	je     f010f930 <test_alloc_block_NF+0x566>
f010f919:	83 ec 04             	sub    $0x4,%esp
f010f91c:	68 f4 80 13 f0       	push   $0xf01380f4
f010f921:	68 26 02 00 00       	push   $0x226
f010f926:	68 f4 75 13 f0       	push   $0xf01375f4
f010f92b:	e8 cb 08 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f930:	83 ec 0c             	sub    $0xc,%esp
f010f933:	68 00 fc 07 00       	push   $0x7fc00
f010f938:	e8 bb 25 02 00       	call   f0131ef8 <alloc_block_NF>
f010f93d:	83 c4 10             	add    $0x10,%esp
f010f940:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f943:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f947:	74 1a                	je     f010f963 <test_alloc_block_NF+0x599>
f010f949:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f94c:	8b 40 0c             	mov    0xc(%eax),%eax
f010f94f:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f954:	75 0d                	jne    f010f963 <test_alloc_block_NF+0x599>
f010f956:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f959:	8b 40 08             	mov    0x8(%eax),%eax
f010f95c:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f961:	74 17                	je     f010f97a <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f963:	83 ec 04             	sub    $0x4,%esp
f010f966:	68 00 80 13 f0       	push   $0xf0138000
f010f96b:	68 2f 02 00 00       	push   $0x22f
f010f970:	68 f4 75 13 f0       	push   $0xf01375f4
f010f975:	e8 81 08 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f97a:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010f97f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f982:	83 ea 02             	sub    $0x2,%edx
f010f985:	39 d0                	cmp    %edx,%eax
f010f987:	75 13                	jne    f010f99c <test_alloc_block_NF+0x5d2>
f010f989:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010f98e:	83 f8 06             	cmp    $0x6,%eax
f010f991:	75 09                	jne    f010f99c <test_alloc_block_NF+0x5d2>
f010f993:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010f998:	85 c0                	test   %eax,%eax
f010f99a:	74 17                	je     f010f9b3 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f99c:	83 ec 04             	sub    $0x4,%esp
f010f99f:	68 44 80 13 f0       	push   $0xf0138044
f010f9a4:	68 33 02 00 00       	push   $0x233
f010f9a9:	68 f4 75 13 f0       	push   $0xf01375f4
f010f9ae:	e8 48 08 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f9b3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f9ba:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f9bd:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f9c4:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f9cb:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9d2:	83 ec 0c             	sub    $0xc,%esp
f010f9d5:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9d8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9de:	50                   	push   %eax
f010f9df:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9e2:	50                   	push   %eax
f010f9e3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9e6:	50                   	push   %eax
f010f9e7:	68 64 7b 65 f0       	push   $0xf0657b64
f010f9ec:	e8 4b 0e 00 00       	call   f011083c <check_list_data>
f010f9f1:	83 c4 20             	add    $0x20,%esp
f010f9f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9f7:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f9fb:	74 17                	je     f010fa14 <test_alloc_block_NF+0x64a>
f010f9fd:	83 ec 04             	sub    $0x4,%esp
f010fa00:	68 a8 80 13 f0       	push   $0xf01380a8
f010fa05:	68 3b 02 00 00       	push   $0x23b
f010fa0a:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa0f:	e8 e7 07 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa14:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa1a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa1d:	74 17                	je     f010fa36 <test_alloc_block_NF+0x66c>
f010fa1f:	83 ec 04             	sub    $0x4,%esp
f010fa22:	68 f4 80 13 f0       	push   $0xf01380f4
f010fa27:	68 3c 02 00 00       	push   $0x23c
f010fa2c:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa31:	e8 c5 07 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010fa36:	83 ec 0c             	sub    $0xc,%esp
f010fa39:	68 00 0c 00 00       	push   $0xc00
f010fa3e:	e8 b5 24 02 00       	call   f0131ef8 <alloc_block_NF>
f010fa43:	83 c4 10             	add    $0x10,%esp
f010fa46:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010fa49:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa4d:	74 17                	je     f010fa66 <test_alloc_block_NF+0x69c>
f010fa4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa52:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa55:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010fa5a:	75 0a                	jne    f010fa66 <test_alloc_block_NF+0x69c>
f010fa5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa5f:	8b 40 08             	mov    0x8(%eax),%eax
f010fa62:	85 c0                	test   %eax,%eax
f010fa64:	74 17                	je     f010fa7d <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fa66:	83 ec 04             	sub    $0x4,%esp
f010fa69:	68 00 80 13 f0       	push   $0xf0138000
f010fa6e:	68 45 02 00 00       	push   $0x245
f010fa73:	68 f4 75 13 f0       	push   $0xf01375f4
f010fa78:	e8 7e 07 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa7d:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fa82:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa85:	83 ea 02             	sub    $0x2,%edx
f010fa88:	39 d0                	cmp    %edx,%eax
f010fa8a:	75 13                	jne    f010fa9f <test_alloc_block_NF+0x6d5>
f010fa8c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fa91:	83 f8 05             	cmp    $0x5,%eax
f010fa94:	75 09                	jne    f010fa9f <test_alloc_block_NF+0x6d5>
f010fa96:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fa9b:	85 c0                	test   %eax,%eax
f010fa9d:	74 17                	je     f010fab6 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa9f:	83 ec 04             	sub    $0x4,%esp
f010faa2:	68 44 80 13 f0       	push   $0xf0138044
f010faa7:	68 49 02 00 00       	push   $0x249
f010faac:	68 f4 75 13 f0       	push   $0xf01375f4
f010fab1:	e8 45 07 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fab6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fabd:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fac0:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010fac7:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010face:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fad5:	83 ec 0c             	sub    $0xc,%esp
f010fad8:	ff 75 d8             	pushl  -0x28(%ebp)
f010fadb:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fae1:	50                   	push   %eax
f010fae2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fae5:	50                   	push   %eax
f010fae6:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fae9:	50                   	push   %eax
f010faea:	68 64 7b 65 f0       	push   $0xf0657b64
f010faef:	e8 48 0d 00 00       	call   f011083c <check_list_data>
f010faf4:	83 c4 20             	add    $0x20,%esp
f010faf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fafa:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fafe:	74 17                	je     f010fb17 <test_alloc_block_NF+0x74d>
f010fb00:	83 ec 04             	sub    $0x4,%esp
f010fb03:	68 a8 80 13 f0       	push   $0xf01380a8
f010fb08:	68 51 02 00 00       	push   $0x251
f010fb0d:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb12:	e8 e4 06 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb17:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fb1d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb20:	74 17                	je     f010fb39 <test_alloc_block_NF+0x76f>
f010fb22:	83 ec 04             	sub    $0x4,%esp
f010fb25:	68 f4 80 13 f0       	push   $0xf01380f4
f010fb2a:	68 52 02 00 00       	push   $0x252
f010fb2f:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb34:	e8 c2 06 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010fb39:	83 ec 0c             	sub    $0xc,%esp
f010fb3c:	68 00 04 00 00       	push   $0x400
f010fb41:	e8 b2 23 02 00       	call   f0131ef8 <alloc_block_NF>
f010fb46:	83 c4 10             	add    $0x10,%esp
f010fb49:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010fb4c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fb50:	74 1a                	je     f010fb6c <test_alloc_block_NF+0x7a2>
f010fb52:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb55:	8b 40 0c             	mov    0xc(%eax),%eax
f010fb58:	3d 00 04 00 00       	cmp    $0x400,%eax
f010fb5d:	75 0d                	jne    f010fb6c <test_alloc_block_NF+0x7a2>
f010fb5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb62:	8b 40 08             	mov    0x8(%eax),%eax
f010fb65:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010fb6a:	74 17                	je     f010fb83 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010fb6c:	83 ec 04             	sub    $0x4,%esp
f010fb6f:	68 00 80 13 f0       	push   $0xf0138000
f010fb74:	68 5b 02 00 00       	push   $0x25b
f010fb79:	68 f4 75 13 f0       	push   $0xf01375f4
f010fb7e:	e8 78 06 ff ff       	call   f01001fb <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fb83:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fb88:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fb8b:	83 ea 03             	sub    $0x3,%edx
f010fb8e:	39 d0                	cmp    %edx,%eax
f010fb90:	75 13                	jne    f010fba5 <test_alloc_block_NF+0x7db>
f010fb92:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fb97:	83 f8 05             	cmp    $0x5,%eax
f010fb9a:	75 09                	jne    f010fba5 <test_alloc_block_NF+0x7db>
f010fb9c:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fba1:	85 c0                	test   %eax,%eax
f010fba3:	74 17                	je     f010fbbc <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fba5:	83 ec 04             	sub    $0x4,%esp
f010fba8:	68 44 80 13 f0       	push   $0xf0138044
f010fbad:	68 5f 02 00 00       	push   $0x25f
f010fbb2:	68 f4 75 13 f0       	push   $0xf01375f4
f010fbb7:	e8 3f 06 ff ff       	call   f01001fb <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fbbc:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fbc3:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010fbc6:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010fbcd:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010fbd4:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fbdb:	83 ec 0c             	sub    $0xc,%esp
f010fbde:	ff 75 d8             	pushl  -0x28(%ebp)
f010fbe1:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fbe7:	50                   	push   %eax
f010fbe8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbeb:	50                   	push   %eax
f010fbec:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fbef:	50                   	push   %eax
f010fbf0:	68 64 7b 65 f0       	push   $0xf0657b64
f010fbf5:	e8 42 0c 00 00       	call   f011083c <check_list_data>
f010fbfa:	83 c4 20             	add    $0x20,%esp
f010fbfd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010fc00:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fc04:	74 17                	je     f010fc1d <test_alloc_block_NF+0x853>
f010fc06:	83 ec 04             	sub    $0x4,%esp
f010fc09:	68 a8 80 13 f0       	push   $0xf01380a8
f010fc0e:	68 67 02 00 00       	push   $0x267
f010fc13:	68 f4 75 13 f0       	push   $0xf01375f4
f010fc18:	e8 de 05 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010fc1d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fc23:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fc26:	74 17                	je     f010fc3f <test_alloc_block_NF+0x875>
f010fc28:	83 ec 04             	sub    $0x4,%esp
f010fc2b:	68 f4 80 13 f0       	push   $0xf01380f4
f010fc30:	68 68 02 00 00       	push   $0x268
f010fc35:	68 f4 75 13 f0       	push   $0xf01375f4
f010fc3a:	e8 bc 05 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010fc3f:	83 ec 0c             	sub    $0xc,%esp
f010fc42:	68 40 81 13 f0       	push   $0xf0138140
f010fc47:	e8 36 10 ff ff       	call   f0100c82 <cprintf>
f010fc4c:	83 c4 10             	add    $0x10,%esp

}
f010fc4f:	90                   	nop
f010fc50:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fc53:	5b                   	pop    %ebx
f010fc54:	5e                   	pop    %esi
f010fc55:	5f                   	pop    %edi
f010fc56:	5d                   	pop    %ebp
f010fc57:	c3                   	ret    

f010fc58 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010fc58:	55                   	push   %ebp
f010fc59:	89 e5                	mov    %esp,%ebp
f010fc5b:	57                   	push   %edi
f010fc5c:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010fc62:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fc69:	83 ec 0c             	sub    $0xc,%esp
f010fc6c:	ff 75 f4             	pushl  -0xc(%ebp)
f010fc6f:	e8 e4 1a 02 00       	call   f0131758 <initialize_MemBlocksList>
f010fc74:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fc77:	c7 05 c8 7a 65 f0 00 	movl   $0x0,0xf0657ac8
f010fc7e:	00 00 00 
f010fc81:	c7 05 cc 7a 65 f0 00 	movl   $0x0,0xf0657acc
f010fc88:	00 00 00 
f010fc8b:	c7 05 d4 7a 65 f0 00 	movl   $0x0,0xf0657ad4
f010fc92:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010fc95:	c7 05 64 7b 65 f0 00 	movl   $0x0,0xf0657b64
f010fc9c:	00 00 00 
f010fc9f:	c7 05 68 7b 65 f0 00 	movl   $0x0,0xf0657b68
f010fca6:	00 00 00 
f010fca9:	c7 05 70 7b 65 f0 00 	movl   $0x0,0xf0657b70
f010fcb0:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010fcb3:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010fcb6:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fcbb:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcc0:	89 d7                	mov    %edx,%edi
f010fcc2:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010fcc4:	8d 55 98             	lea    -0x68(%ebp),%edx
f010fcc7:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010fccc:	b8 00 00 00 00       	mov    $0x0,%eax
f010fcd1:	89 d7                	mov    %edx,%edi
f010fcd3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010fcd5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010fcdc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010fce3:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010fcea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fced:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010fcf4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fcf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcf8:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fcff:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fd00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd03:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fd07:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010fd0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd0d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fd11:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010fd14:	83 ec 0c             	sub    $0xc,%esp
f010fd17:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010fd1a:	50                   	push   %eax
f010fd1b:	e8 a5 27 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f010fd20:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010fd23:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fd28:	85 c0                	test   %eax,%eax
f010fd2a:	75 14                	jne    f010fd40 <test_insert_sorted_with_merge_freeList+0xe8>
f010fd2c:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fd31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fd34:	75 0a                	jne    f010fd40 <test_insert_sorted_with_merge_freeList+0xe8>
f010fd36:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fd3b:	83 f8 01             	cmp    $0x1,%eax
f010fd3e:	74 17                	je     f010fd57 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fd40:	83 ec 04             	sub    $0x4,%esp
f010fd43:	68 a0 81 13 f0       	push   $0xf01381a0
f010fd48:	68 88 02 00 00       	push   $0x288
f010fd4d:	68 f4 75 13 f0       	push   $0xf01375f4
f010fd52:	e8 a4 04 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the free list content
	size = 0;
f010fd57:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010fd5e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fd65:	83 ec 0c             	sub    $0xc,%esp
f010fd68:	ff 75 f0             	pushl  -0x10(%ebp)
f010fd6b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd6e:	50                   	push   %eax
f010fd6f:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fd72:	50                   	push   %eax
f010fd73:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fd76:	50                   	push   %eax
f010fd77:	68 64 7b 65 f0       	push   $0xf0657b64
f010fd7c:	e8 bb 0a 00 00       	call   f011083c <check_list_data>
f010fd81:	83 c4 20             	add    $0x20,%esp
f010fd84:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fd87:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd8b:	74 17                	je     f010fda4 <test_insert_sorted_with_merge_freeList+0x14c>
f010fd8d:	83 ec 04             	sub    $0x4,%esp
f010fd90:	68 0c 82 13 f0       	push   $0xf013820c
f010fd95:	68 8e 02 00 00       	push   $0x28e
f010fd9a:	68 f4 75 13 f0       	push   $0xf01375f4
f010fd9f:	e8 57 04 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fda4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fda7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fdaa:	74 17                	je     f010fdc3 <test_insert_sorted_with_merge_freeList+0x16b>
f010fdac:	83 ec 04             	sub    $0x4,%esp
f010fdaf:	68 60 82 13 f0       	push   $0xf0138260
f010fdb4:	68 8f 02 00 00       	push   $0x28f
f010fdb9:	68 f4 75 13 f0       	push   $0xf01375f4
f010fdbe:	e8 38 04 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010fdc3:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010fdca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdcd:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010fdd4:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010fdd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdd8:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010fddf:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fde0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fde3:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fde7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010fded:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdf0:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdf4:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010fdf7:	83 ec 0c             	sub    $0xc,%esp
f010fdfa:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010fe00:	50                   	push   %eax
f010fe01:	e8 bf 26 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f010fe06:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010fe09:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fe0e:	85 c0                	test   %eax,%eax
f010fe10:	75 14                	jne    f010fe26 <test_insert_sorted_with_merge_freeList+0x1ce>
f010fe12:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010fe17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010fe1a:	75 0a                	jne    f010fe26 <test_insert_sorted_with_merge_freeList+0x1ce>
f010fe1c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fe21:	83 f8 02             	cmp    $0x2,%eax
f010fe24:	74 17                	je     f010fe3d <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe26:	83 ec 04             	sub    $0x4,%esp
f010fe29:	68 a0 81 13 f0       	push   $0xf01381a0
f010fe2e:	68 9e 02 00 00       	push   $0x29e
f010fe33:	68 f4 75 13 f0       	push   $0xf01375f4
f010fe38:	e8 be 03 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fe3d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010fe44:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fe4b:	83 ec 0c             	sub    $0xc,%esp
f010fe4e:	ff 75 f0             	pushl  -0x10(%ebp)
f010fe51:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fe54:	50                   	push   %eax
f010fe55:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fe58:	50                   	push   %eax
f010fe59:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fe5c:	50                   	push   %eax
f010fe5d:	68 64 7b 65 f0       	push   $0xf0657b64
f010fe62:	e8 d5 09 00 00       	call   f011083c <check_list_data>
f010fe67:	83 c4 20             	add    $0x20,%esp
f010fe6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fe6d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fe71:	74 17                	je     f010fe8a <test_insert_sorted_with_merge_freeList+0x232>
f010fe73:	83 ec 04             	sub    $0x4,%esp
f010fe76:	68 0c 82 13 f0       	push   $0xf013820c
f010fe7b:	68 a4 02 00 00       	push   $0x2a4
f010fe80:	68 f4 75 13 f0       	push   $0xf01375f4
f010fe85:	e8 71 03 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fe8a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fe8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fe90:	74 17                	je     f010fea9 <test_insert_sorted_with_merge_freeList+0x251>
f010fe92:	83 ec 04             	sub    $0x4,%esp
f010fe95:	68 60 82 13 f0       	push   $0xf0138260
f010fe9a:	68 a5 02 00 00       	push   $0x2a5
f010fe9f:	68 f4 75 13 f0       	push   $0xf01375f4
f010fea4:	e8 52 03 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010fea9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010feb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010feb3:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010feba:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010febb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010febe:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fec5:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fec9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fecd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010fed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fed6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010feda:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010fee0:	83 ec 0c             	sub    $0xc,%esp
f010fee3:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010fee9:	50                   	push   %eax
f010feea:	e8 d6 25 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f010feef:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fef2:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010fef7:	85 c0                	test   %eax,%eax
f010fef9:	75 14                	jne    f010ff0f <test_insert_sorted_with_merge_freeList+0x2b7>
f010fefb:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ff00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ff03:	75 0a                	jne    f010ff0f <test_insert_sorted_with_merge_freeList+0x2b7>
f010ff05:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010ff0a:	83 f8 03             	cmp    $0x3,%eax
f010ff0d:	74 17                	je     f010ff26 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff0f:	83 ec 04             	sub    $0x4,%esp
f010ff12:	68 a0 81 13 f0       	push   $0xf01381a0
f010ff17:	68 b4 02 00 00       	push   $0x2b4
f010ff1c:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff21:	e8 d5 02 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010ff26:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010ff2d:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010ff34:	83 ec 0c             	sub    $0xc,%esp
f010ff37:	ff 75 f0             	pushl  -0x10(%ebp)
f010ff3a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff3d:	50                   	push   %eax
f010ff3e:	8d 45 98             	lea    -0x68(%ebp),%eax
f010ff41:	50                   	push   %eax
f010ff42:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ff45:	50                   	push   %eax
f010ff46:	68 64 7b 65 f0       	push   $0xf0657b64
f010ff4b:	e8 ec 08 00 00       	call   f011083c <check_list_data>
f010ff50:	83 c4 20             	add    $0x20,%esp
f010ff53:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010ff56:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff5a:	74 17                	je     f010ff73 <test_insert_sorted_with_merge_freeList+0x31b>
f010ff5c:	83 ec 04             	sub    $0x4,%esp
f010ff5f:	68 0c 82 13 f0       	push   $0xf013820c
f010ff64:	68 ba 02 00 00       	push   $0x2ba
f010ff69:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff6e:	e8 88 02 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010ff73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ff79:	74 17                	je     f010ff92 <test_insert_sorted_with_merge_freeList+0x33a>
f010ff7b:	83 ec 04             	sub    $0x4,%esp
f010ff7e:	68 60 82 13 f0       	push   $0xf0138260
f010ff83:	68 bb 02 00 00       	push   $0x2bb
f010ff88:	68 f4 75 13 f0       	push   $0xf01375f4
f010ff8d:	e8 69 02 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010ff92:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010ff99:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ff9c:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010ffa3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010ffa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffa7:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010ffae:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010ffaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffb2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010ffb6:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010ffbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ffbf:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010ffc3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010ffc9:	83 ec 0c             	sub    $0xc,%esp
f010ffcc:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010ffd2:	50                   	push   %eax
f010ffd3:	e8 ed 24 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f010ffd8:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010ffdb:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f010ffe0:	85 c0                	test   %eax,%eax
f010ffe2:	75 14                	jne    f010fff8 <test_insert_sorted_with_merge_freeList+0x3a0>
f010ffe4:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f010ffe9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ffec:	75 0a                	jne    f010fff8 <test_insert_sorted_with_merge_freeList+0x3a0>
f010ffee:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f010fff3:	83 f8 04             	cmp    $0x4,%eax
f010fff6:	74 17                	je     f011000f <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fff8:	83 ec 04             	sub    $0x4,%esp
f010fffb:	68 a0 81 13 f0       	push   $0xf01381a0
f0110000:	68 ca 02 00 00       	push   $0x2ca
f0110005:	68 f4 75 13 f0       	push   $0xf01375f4
f011000a:	e8 ec 01 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011000f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110016:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011001d:	83 ec 0c             	sub    $0xc,%esp
f0110020:	ff 75 f0             	pushl  -0x10(%ebp)
f0110023:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110026:	50                   	push   %eax
f0110027:	8d 45 98             	lea    -0x68(%ebp),%eax
f011002a:	50                   	push   %eax
f011002b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011002e:	50                   	push   %eax
f011002f:	68 64 7b 65 f0       	push   $0xf0657b64
f0110034:	e8 03 08 00 00       	call   f011083c <check_list_data>
f0110039:	83 c4 20             	add    $0x20,%esp
f011003c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011003f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110043:	74 17                	je     f011005c <test_insert_sorted_with_merge_freeList+0x404>
f0110045:	83 ec 04             	sub    $0x4,%esp
f0110048:	68 0c 82 13 f0       	push   $0xf013820c
f011004d:	68 d0 02 00 00       	push   $0x2d0
f0110052:	68 f4 75 13 f0       	push   $0xf01375f4
f0110057:	e8 9f 01 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011005c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011005f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110062:	74 17                	je     f011007b <test_insert_sorted_with_merge_freeList+0x423>
f0110064:	83 ec 04             	sub    $0x4,%esp
f0110067:	68 60 82 13 f0       	push   $0xf0138260
f011006c:	68 d1 02 00 00       	push   $0x2d1
f0110071:	68 f4 75 13 f0       	push   $0xf01375f4
f0110076:	e8 80 01 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f011007b:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110082:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110085:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f011008c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f011008d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110090:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110097:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110098:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011009b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011009f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f01100a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01100a8:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01100ac:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f01100b2:	83 ec 0c             	sub    $0xc,%esp
f01100b5:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01100bb:	50                   	push   %eax
f01100bc:	e8 04 24 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f01100c1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01100c4:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01100c9:	85 c0                	test   %eax,%eax
f01100cb:	75 17                	jne    f01100e4 <test_insert_sorted_with_merge_freeList+0x48c>
f01100cd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01100d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01100d5:	42                   	inc    %edx
f01100d6:	39 d0                	cmp    %edx,%eax
f01100d8:	75 0a                	jne    f01100e4 <test_insert_sorted_with_merge_freeList+0x48c>
f01100da:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01100df:	83 f8 04             	cmp    $0x4,%eax
f01100e2:	74 17                	je     f01100fb <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01100e4:	83 ec 04             	sub    $0x4,%esp
f01100e7:	68 a0 81 13 f0       	push   $0xf01381a0
f01100ec:	68 e3 02 00 00       	push   $0x2e3
f01100f1:	68 f4 75 13 f0       	push   $0xf01375f4
f01100f6:	e8 00 01 ff ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01100fb:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110102:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110109:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011010c:	8d 50 ff             	lea    -0x1(%eax),%edx
f011010f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110112:	48                   	dec    %eax
f0110113:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110117:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011011a:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011011e:	01 c8                	add    %ecx,%eax
f0110120:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110124:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110127:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011012e:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011012f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110132:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110139:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011013a:	83 ec 0c             	sub    $0xc,%esp
f011013d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110140:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110143:	50                   	push   %eax
f0110144:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110147:	50                   	push   %eax
f0110148:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011014b:	50                   	push   %eax
f011014c:	68 64 7b 65 f0       	push   $0xf0657b64
f0110151:	e8 e6 06 00 00       	call   f011083c <check_list_data>
f0110156:	83 c4 20             	add    $0x20,%esp
f0110159:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011015c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110160:	74 17                	je     f0110179 <test_insert_sorted_with_merge_freeList+0x521>
f0110162:	83 ec 04             	sub    $0x4,%esp
f0110165:	68 0c 82 13 f0       	push   $0xf013820c
f011016a:	68 ec 02 00 00       	push   $0x2ec
f011016f:	68 f4 75 13 f0       	push   $0xf01375f4
f0110174:	e8 82 00 ff ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110179:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011017c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011017f:	74 17                	je     f0110198 <test_insert_sorted_with_merge_freeList+0x540>
f0110181:	83 ec 04             	sub    $0x4,%esp
f0110184:	68 60 82 13 f0       	push   $0xf0138260
f0110189:	68 ed 02 00 00       	push   $0x2ed
f011018e:	68 f4 75 13 f0       	push   $0xf01375f4
f0110193:	e8 63 00 ff ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110198:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011019f:	83 ec 0c             	sub    $0xc,%esp
f01101a2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01101a5:	50                   	push   %eax
f01101a6:	e8 5d 07 00 00       	call   f0110908 <check_avaliable_list_data>
f01101ab:	83 c4 10             	add    $0x10,%esp
f01101ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01101b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01101b4:	8d 50 01             	lea    0x1(%eax),%edx
f01101b7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01101ba:	39 c2                	cmp    %eax,%edx
f01101bc:	74 17                	je     f01101d5 <test_insert_sorted_with_merge_freeList+0x57d>
f01101be:	83 ec 04             	sub    $0x4,%esp
f01101c1:	68 b4 82 13 f0       	push   $0xf01382b4
f01101c6:	68 f2 02 00 00       	push   $0x2f2
f01101cb:	68 f4 75 13 f0       	push   $0xf01375f4
f01101d0:	e8 26 00 ff ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01101d5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01101d9:	74 17                	je     f01101f2 <test_insert_sorted_with_merge_freeList+0x59a>
f01101db:	83 ec 04             	sub    $0x4,%esp
f01101de:	68 0c 83 13 f0       	push   $0xf013830c
f01101e3:	68 f3 02 00 00       	push   $0x2f3
f01101e8:	68 f4 75 13 f0       	push   $0xf01375f4
f01101ed:	e8 09 00 ff ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f01101f2:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f01101f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101fc:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f0110203:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110204:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110207:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011020e:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011020f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110212:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110216:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f011021c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011021f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110223:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0110229:	83 ec 0c             	sub    $0xc,%esp
f011022c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0110232:	50                   	push   %eax
f0110233:	e8 8d 22 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f0110238:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011023b:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110240:	85 c0                	test   %eax,%eax
f0110242:	75 19                	jne    f011025d <test_insert_sorted_with_merge_freeList+0x605>
f0110244:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0110249:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011024c:	83 c2 02             	add    $0x2,%edx
f011024f:	39 d0                	cmp    %edx,%eax
f0110251:	75 0a                	jne    f011025d <test_insert_sorted_with_merge_freeList+0x605>
f0110253:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0110258:	83 f8 04             	cmp    $0x4,%eax
f011025b:	74 17                	je     f0110274 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011025d:	83 ec 04             	sub    $0x4,%esp
f0110260:	68 a0 81 13 f0       	push   $0xf01381a0
f0110265:	68 05 03 00 00       	push   $0x305
f011026a:	68 f4 75 13 f0       	push   $0xf01375f4
f011026f:	e8 87 ff fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110274:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011027b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110282:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110285:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110288:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011028b:	48                   	dec    %eax
f011028c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110290:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110293:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110297:	01 c8                	add    %ecx,%eax
f0110299:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011029d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102a0:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01102a7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01102a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102ab:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01102b2:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01102b3:	83 ec 0c             	sub    $0xc,%esp
f01102b6:	ff 75 f0             	pushl  -0x10(%ebp)
f01102b9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01102bc:	50                   	push   %eax
f01102bd:	8d 45 98             	lea    -0x68(%ebp),%eax
f01102c0:	50                   	push   %eax
f01102c1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01102c4:	50                   	push   %eax
f01102c5:	68 64 7b 65 f0       	push   $0xf0657b64
f01102ca:	e8 6d 05 00 00       	call   f011083c <check_list_data>
f01102cf:	83 c4 20             	add    $0x20,%esp
f01102d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01102d5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01102d9:	74 17                	je     f01102f2 <test_insert_sorted_with_merge_freeList+0x69a>
f01102db:	83 ec 04             	sub    $0x4,%esp
f01102de:	68 0c 82 13 f0       	push   $0xf013820c
f01102e3:	68 0e 03 00 00       	push   $0x30e
f01102e8:	68 f4 75 13 f0       	push   $0xf01375f4
f01102ed:	e8 09 ff fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01102f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01102f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01102f8:	74 17                	je     f0110311 <test_insert_sorted_with_merge_freeList+0x6b9>
f01102fa:	83 ec 04             	sub    $0x4,%esp
f01102fd:	68 60 82 13 f0       	push   $0xf0138260
f0110302:	68 0f 03 00 00       	push   $0x30f
f0110307:	68 f4 75 13 f0       	push   $0xf01375f4
f011030c:	e8 ea fe fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110311:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110318:	83 ec 0c             	sub    $0xc,%esp
f011031b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011031e:	50                   	push   %eax
f011031f:	e8 e4 05 00 00       	call   f0110908 <check_avaliable_list_data>
f0110324:	83 c4 10             	add    $0x10,%esp
f0110327:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011032a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011032d:	8d 50 02             	lea    0x2(%eax),%edx
f0110330:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110333:	39 c2                	cmp    %eax,%edx
f0110335:	74 17                	je     f011034e <test_insert_sorted_with_merge_freeList+0x6f6>
f0110337:	83 ec 04             	sub    $0x4,%esp
f011033a:	68 b4 82 13 f0       	push   $0xf01382b4
f011033f:	68 14 03 00 00       	push   $0x314
f0110344:	68 f4 75 13 f0       	push   $0xf01375f4
f0110349:	e8 ad fe fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011034e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110352:	74 17                	je     f011036b <test_insert_sorted_with_merge_freeList+0x713>
f0110354:	83 ec 04             	sub    $0x4,%esp
f0110357:	68 0c 83 13 f0       	push   $0xf013830c
f011035c:	68 15 03 00 00       	push   $0x315
f0110361:	68 f4 75 13 f0       	push   $0xf01375f4
f0110366:	e8 90 fe fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f011036b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110372:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110375:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011037c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011037d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110380:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110387:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110388:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011038b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011038f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f0110395:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110398:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011039c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01103a2:	83 ec 0c             	sub    $0xc,%esp
f01103a5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01103ab:	50                   	push   %eax
f01103ac:	e8 14 21 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f01103b1:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01103b4:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01103b9:	85 c0                	test   %eax,%eax
f01103bb:	75 19                	jne    f01103d6 <test_insert_sorted_with_merge_freeList+0x77e>
f01103bd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01103c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01103c5:	83 c2 03             	add    $0x3,%edx
f01103c8:	39 d0                	cmp    %edx,%eax
f01103ca:	75 0a                	jne    f01103d6 <test_insert_sorted_with_merge_freeList+0x77e>
f01103cc:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01103d1:	83 f8 04             	cmp    $0x4,%eax
f01103d4:	74 17                	je     f01103ed <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01103d6:	83 ec 04             	sub    $0x4,%esp
f01103d9:	68 a0 81 13 f0       	push   $0xf01381a0
f01103de:	68 28 03 00 00       	push   $0x328
f01103e3:	68 f4 75 13 f0       	push   $0xf01375f4
f01103e8:	e8 0e fe fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01103ed:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01103f4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01103fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103fe:	8d 50 01             	lea    0x1(%eax),%edx
f0110401:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110404:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110408:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011040c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011040f:	8d 50 01             	lea    0x1(%eax),%edx
f0110412:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110415:	40                   	inc    %eax
f0110416:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011041a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011041d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110421:	01 c8                	add    %ecx,%eax
f0110423:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110427:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011042a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110431:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110432:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110435:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011043c:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011043d:	83 ec 0c             	sub    $0xc,%esp
f0110440:	ff 75 f0             	pushl  -0x10(%ebp)
f0110443:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110446:	50                   	push   %eax
f0110447:	8d 45 98             	lea    -0x68(%ebp),%eax
f011044a:	50                   	push   %eax
f011044b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011044e:	50                   	push   %eax
f011044f:	68 64 7b 65 f0       	push   $0xf0657b64
f0110454:	e8 e3 03 00 00       	call   f011083c <check_list_data>
f0110459:	83 c4 20             	add    $0x20,%esp
f011045c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011045f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110463:	74 17                	je     f011047c <test_insert_sorted_with_merge_freeList+0x824>
f0110465:	83 ec 04             	sub    $0x4,%esp
f0110468:	68 0c 82 13 f0       	push   $0xf013820c
f011046d:	68 32 03 00 00       	push   $0x332
f0110472:	68 f4 75 13 f0       	push   $0xf01375f4
f0110477:	e8 7f fd fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011047c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011047f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110482:	74 17                	je     f011049b <test_insert_sorted_with_merge_freeList+0x843>
f0110484:	83 ec 04             	sub    $0x4,%esp
f0110487:	68 60 82 13 f0       	push   $0xf0138260
f011048c:	68 33 03 00 00       	push   $0x333
f0110491:	68 f4 75 13 f0       	push   $0xf01375f4
f0110496:	e8 60 fd fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011049b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01104a2:	83 ec 0c             	sub    $0xc,%esp
f01104a5:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104a8:	50                   	push   %eax
f01104a9:	e8 5a 04 00 00       	call   f0110908 <check_avaliable_list_data>
f01104ae:	83 c4 10             	add    $0x10,%esp
f01104b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01104b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01104b7:	8d 50 03             	lea    0x3(%eax),%edx
f01104ba:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01104bd:	39 c2                	cmp    %eax,%edx
f01104bf:	74 17                	je     f01104d8 <test_insert_sorted_with_merge_freeList+0x880>
f01104c1:	83 ec 04             	sub    $0x4,%esp
f01104c4:	68 b4 82 13 f0       	push   $0xf01382b4
f01104c9:	68 38 03 00 00       	push   $0x338
f01104ce:	68 f4 75 13 f0       	push   $0xf01375f4
f01104d3:	e8 23 fd fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01104d8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104dc:	74 17                	je     f01104f5 <test_insert_sorted_with_merge_freeList+0x89d>
f01104de:	83 ec 04             	sub    $0x4,%esp
f01104e1:	68 0c 83 13 f0       	push   $0xf013830c
f01104e6:	68 39 03 00 00       	push   $0x339
f01104eb:	68 f4 75 13 f0       	push   $0xf01375f4
f01104f0:	e8 06 fd fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f01104f5:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f01104fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01104ff:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f0110506:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110507:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011050a:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110511:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110512:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110515:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110519:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f011051f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110522:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110526:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f011052c:	83 ec 0c             	sub    $0xc,%esp
f011052f:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110535:	50                   	push   %eax
f0110536:	e8 8a 1f 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f011053b:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011053e:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0110543:	85 c0                	test   %eax,%eax
f0110545:	75 19                	jne    f0110560 <test_insert_sorted_with_merge_freeList+0x908>
f0110547:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f011054c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011054f:	83 c2 04             	add    $0x4,%edx
f0110552:	39 d0                	cmp    %edx,%eax
f0110554:	75 0a                	jne    f0110560 <test_insert_sorted_with_merge_freeList+0x908>
f0110556:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f011055b:	83 f8 04             	cmp    $0x4,%eax
f011055e:	74 17                	je     f0110577 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110560:	83 ec 04             	sub    $0x4,%esp
f0110563:	68 a0 81 13 f0       	push   $0xf01381a0
f0110568:	68 4c 03 00 00       	push   $0x34c
f011056d:	68 f4 75 13 f0       	push   $0xf01375f4
f0110572:	e8 84 fc fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110577:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011057e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0110585:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110588:	8d 50 01             	lea    0x1(%eax),%edx
f011058b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011058e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110592:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0110596:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110599:	8d 50 01             	lea    0x1(%eax),%edx
f011059c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011059f:	40                   	inc    %eax
f01105a0:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01105a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105a7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01105ab:	01 c8                	add    %ecx,%eax
f01105ad:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01105b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105b4:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01105bb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01105bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01105bf:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01105c6:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01105c7:	83 ec 0c             	sub    $0xc,%esp
f01105ca:	ff 75 f0             	pushl  -0x10(%ebp)
f01105cd:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105d0:	50                   	push   %eax
f01105d1:	8d 45 98             	lea    -0x68(%ebp),%eax
f01105d4:	50                   	push   %eax
f01105d5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01105d8:	50                   	push   %eax
f01105d9:	68 64 7b 65 f0       	push   $0xf0657b64
f01105de:	e8 59 02 00 00       	call   f011083c <check_list_data>
f01105e3:	83 c4 20             	add    $0x20,%esp
f01105e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01105e9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01105ed:	74 17                	je     f0110606 <test_insert_sorted_with_merge_freeList+0x9ae>
f01105ef:	83 ec 04             	sub    $0x4,%esp
f01105f2:	68 0c 82 13 f0       	push   $0xf013820c
f01105f7:	68 56 03 00 00       	push   $0x356
f01105fc:	68 f4 75 13 f0       	push   $0xf01375f4
f0110601:	e8 f5 fb fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110606:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110609:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011060c:	74 17                	je     f0110625 <test_insert_sorted_with_merge_freeList+0x9cd>
f011060e:	83 ec 04             	sub    $0x4,%esp
f0110611:	68 60 82 13 f0       	push   $0xf0138260
f0110616:	68 57 03 00 00       	push   $0x357
f011061b:	68 f4 75 13 f0       	push   $0xf01375f4
f0110620:	e8 d6 fb fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110625:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011062c:	83 ec 0c             	sub    $0xc,%esp
f011062f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110632:	50                   	push   %eax
f0110633:	e8 d0 02 00 00       	call   f0110908 <check_avaliable_list_data>
f0110638:	83 c4 10             	add    $0x10,%esp
f011063b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011063e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110641:	8d 50 04             	lea    0x4(%eax),%edx
f0110644:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110647:	39 c2                	cmp    %eax,%edx
f0110649:	74 17                	je     f0110662 <test_insert_sorted_with_merge_freeList+0xa0a>
f011064b:	83 ec 04             	sub    $0x4,%esp
f011064e:	68 b4 82 13 f0       	push   $0xf01382b4
f0110653:	68 5c 03 00 00       	push   $0x35c
f0110658:	68 f4 75 13 f0       	push   $0xf01375f4
f011065d:	e8 99 fb fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110662:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110666:	74 17                	je     f011067f <test_insert_sorted_with_merge_freeList+0xa27>
f0110668:	83 ec 04             	sub    $0x4,%esp
f011066b:	68 0c 83 13 f0       	push   $0xf013830c
f0110670:	68 5d 03 00 00       	push   $0x35d
f0110675:	68 f4 75 13 f0       	push   $0xf01375f4
f011067a:	e8 7c fb fe ff       	call   f01001fb <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f011067f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f0110686:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110689:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0110690:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f0110691:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110694:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f011069b:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011069c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011069f:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01106a3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01106a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01106ac:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01106b0:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01106b6:	83 ec 0c             	sub    $0xc,%esp
f01106b9:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01106bf:	50                   	push   %eax
f01106c0:	e8 00 1e 02 00       	call   f01324c5 <insert_sorted_with_merge_freeList>
f01106c5:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01106c8:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01106cd:	85 c0                	test   %eax,%eax
f01106cf:	75 19                	jne    f01106ea <test_insert_sorted_with_merge_freeList+0xa92>
f01106d1:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01106d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01106d9:	83 c2 06             	add    $0x6,%edx
f01106dc:	39 d0                	cmp    %edx,%eax
f01106de:	75 0a                	jne    f01106ea <test_insert_sorted_with_merge_freeList+0xa92>
f01106e0:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01106e5:	83 f8 03             	cmp    $0x3,%eax
f01106e8:	74 17                	je     f0110701 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106ea:	83 ec 04             	sub    $0x4,%esp
f01106ed:	68 a0 81 13 f0       	push   $0xf01381a0
f01106f2:	68 70 03 00 00       	push   $0x370
f01106f7:	68 f4 75 13 f0       	push   $0xf01375f4
f01106fc:	e8 fa fa fe ff       	call   f01001fb <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110701:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110708:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f011070f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110712:	48                   	dec    %eax
f0110713:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011071a:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f011071b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110721:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110724:	48                   	dec    %eax
f0110725:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110729:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011072c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110730:	01 c1                	add    %eax,%ecx
f0110732:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110735:	40                   	inc    %eax
f0110736:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011073a:	01 c8                	add    %ecx,%eax
f011073c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110740:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110743:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f011074a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f011074b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011074e:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110755:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f0110756:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110759:	40                   	inc    %eax
f011075a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110761:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0110762:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110765:	40                   	inc    %eax
f0110766:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011076d:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011076e:	83 ec 0c             	sub    $0xc,%esp
f0110771:	ff 75 f0             	pushl  -0x10(%ebp)
f0110774:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110777:	50                   	push   %eax
f0110778:	8d 45 98             	lea    -0x68(%ebp),%eax
f011077b:	50                   	push   %eax
f011077c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011077f:	50                   	push   %eax
f0110780:	68 64 7b 65 f0       	push   $0xf0657b64
f0110785:	e8 b2 00 00 00       	call   f011083c <check_list_data>
f011078a:	83 c4 20             	add    $0x20,%esp
f011078d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110790:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110794:	74 17                	je     f01107ad <test_insert_sorted_with_merge_freeList+0xb55>
f0110796:	83 ec 04             	sub    $0x4,%esp
f0110799:	68 0c 82 13 f0       	push   $0xf013820c
f011079e:	68 7c 03 00 00       	push   $0x37c
f01107a3:	68 f4 75 13 f0       	push   $0xf01375f4
f01107a8:	e8 4e fa fe ff       	call   f01001fb <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01107ad:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01107b3:	74 17                	je     f01107cc <test_insert_sorted_with_merge_freeList+0xb74>
f01107b5:	83 ec 04             	sub    $0x4,%esp
f01107b8:	68 60 82 13 f0       	push   $0xf0138260
f01107bd:	68 7d 03 00 00       	push   $0x37d
f01107c2:	68 f4 75 13 f0       	push   $0xf01375f4
f01107c7:	e8 2f fa fe ff       	call   f01001fb <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01107cc:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01107d3:	83 ec 0c             	sub    $0xc,%esp
f01107d6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107d9:	50                   	push   %eax
f01107da:	e8 29 01 00 00       	call   f0110908 <check_avaliable_list_data>
f01107df:	83 c4 10             	add    $0x10,%esp
f01107e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01107e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01107e8:	8d 50 06             	lea    0x6(%eax),%edx
f01107eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01107ee:	39 c2                	cmp    %eax,%edx
f01107f0:	74 17                	je     f0110809 <test_insert_sorted_with_merge_freeList+0xbb1>
f01107f2:	83 ec 04             	sub    $0x4,%esp
f01107f5:	68 b4 82 13 f0       	push   $0xf01382b4
f01107fa:	68 82 03 00 00       	push   $0x382
f01107ff:	68 f4 75 13 f0       	push   $0xf01375f4
f0110804:	e8 f2 f9 fe ff       	call   f01001fb <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110809:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011080d:	74 17                	je     f0110826 <test_insert_sorted_with_merge_freeList+0xbce>
f011080f:	83 ec 04             	sub    $0x4,%esp
f0110812:	68 0c 83 13 f0       	push   $0xf013830c
f0110817:	68 83 03 00 00       	push   $0x383
f011081c:	68 f4 75 13 f0       	push   $0xf01375f4
f0110821:	e8 d5 f9 fe ff       	call   f01001fb <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f0110826:	83 ec 0c             	sub    $0xc,%esp
f0110829:	68 68 83 13 f0       	push   $0xf0138368
f011082e:	e8 4f 04 ff ff       	call   f0100c82 <cprintf>
f0110833:	83 c4 10             	add    $0x10,%esp

}
f0110836:	90                   	nop
f0110837:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011083a:	c9                   	leave  
f011083b:	c3                   	ret    

f011083c <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f011083c:	55                   	push   %ebp
f011083d:	89 e5                	mov    %esp,%ebp
f011083f:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0110842:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110849:	8b 45 14             	mov    0x14(%ebp),%eax
f011084c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0110852:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0110859:	8b 45 08             	mov    0x8(%ebp),%eax
f011085c:	8b 00                	mov    (%eax),%eax
f011085e:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110861:	eb 6e                	jmp    f01108d1 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f0110863:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f0110866:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110869:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110870:	8b 45 10             	mov    0x10(%ebp),%eax
f0110873:	01 d0                	add    %edx,%eax
f0110875:	8b 00                	mov    (%eax),%eax
f0110877:	85 c0                	test   %eax,%eax
f0110879:	74 e8                	je     f0110863 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f011087b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011087e:	8b 50 08             	mov    0x8(%eax),%edx
f0110881:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0110884:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011088b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011088e:	01 c8                	add    %ecx,%eax
f0110890:	8b 00                	mov    (%eax),%eax
f0110892:	39 c2                	cmp    %eax,%edx
f0110894:	75 1b                	jne    f01108b1 <check_list_data+0x75>
f0110896:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110899:	8b 50 0c             	mov    0xc(%eax),%edx
f011089c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011089f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01108a6:	8b 45 10             	mov    0x10(%ebp),%eax
f01108a9:	01 c8                	add    %ecx,%eax
f01108ab:	8b 00                	mov    (%eax),%eax
f01108ad:	39 c2                	cmp    %eax,%edx
f01108af:	74 07                	je     f01108b8 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01108b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01108b6:	eb 4e                	jmp    f0110906 <check_list_data+0xca>
		}
		(*size)++;
f01108b8:	8b 45 14             	mov    0x14(%ebp),%eax
f01108bb:	8b 00                	mov    (%eax),%eax
f01108bd:	8d 50 01             	lea    0x1(%eax),%edx
f01108c0:	8b 45 14             	mov    0x14(%ebp),%eax
f01108c3:	89 10                	mov    %edx,(%eax)
		i++;
f01108c5:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01108c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01108cb:	8b 40 08             	mov    0x8(%eax),%eax
f01108ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01108d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01108d5:	74 07                	je     f01108de <check_list_data+0xa2>
f01108d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01108da:	8b 00                	mov    (%eax),%eax
f01108dc:	eb 05                	jmp    f01108e3 <check_list_data+0xa7>
f01108de:	b8 00 00 00 00       	mov    $0x0,%eax
f01108e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01108e6:	89 42 08             	mov    %eax,0x8(%edx)
f01108e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01108ec:	8b 40 08             	mov    0x8(%eax),%eax
f01108ef:	85 c0                	test   %eax,%eax
f01108f1:	0f 85 6f ff ff ff    	jne    f0110866 <check_list_data+0x2a>
f01108f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01108fb:	0f 85 65 ff ff ff    	jne    f0110866 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110901:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110906:	c9                   	leave  
f0110907:	c3                   	ret    

f0110908 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110908:	55                   	push   %ebp
f0110909:	89 e5                	mov    %esp,%ebp
f011090b:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011090e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110915:	8b 45 08             	mov    0x8(%ebp),%eax
f0110918:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011091e:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0110923:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110926:	eb 30                	jmp    f0110958 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110928:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011092b:	8b 40 08             	mov    0x8(%eax),%eax
f011092e:	85 c0                	test   %eax,%eax
f0110930:	75 0a                	jne    f011093c <check_avaliable_list_data+0x34>
f0110932:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110935:	8b 40 0c             	mov    0xc(%eax),%eax
f0110938:	85 c0                	test   %eax,%eax
f011093a:	74 07                	je     f0110943 <check_avaliable_list_data+0x3b>
		{
			return 0;
f011093c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110941:	eb 40                	jmp    f0110983 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110943:	8b 45 08             	mov    0x8(%ebp),%eax
f0110946:	8b 00                	mov    (%eax),%eax
f0110948:	8d 50 01             	lea    0x1(%eax),%edx
f011094b:	8b 45 08             	mov    0x8(%ebp),%eax
f011094e:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0110950:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f0110955:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110958:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011095c:	74 07                	je     f0110965 <check_avaliable_list_data+0x5d>
f011095e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110961:	8b 00                	mov    (%eax),%eax
f0110963:	eb 05                	jmp    f011096a <check_avaliable_list_data+0x62>
f0110965:	b8 00 00 00 00       	mov    $0x0,%eax
f011096a:	a3 a0 7b 65 f0       	mov    %eax,0xf0657ba0
f011096f:	a1 a0 7b 65 f0       	mov    0xf0657ba0,%eax
f0110974:	85 c0                	test   %eax,%eax
f0110976:	75 b0                	jne    f0110928 <check_avaliable_list_data+0x20>
f0110978:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011097c:	75 aa                	jne    f0110928 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f011097e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110983:	c9                   	leave  
f0110984:	c3                   	ret    

f0110985 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f0110985:	55                   	push   %ebp
f0110986:	89 e5                	mov    %esp,%ebp
f0110988:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f011098b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f0110992:	8b 45 08             	mov    0x8(%ebp),%eax
f0110995:	8b 00                	mov    (%eax),%eax
f0110997:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011099a:	eb 27                	jmp    f01109c3 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f011099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011099f:	8b 50 0c             	mov    0xc(%eax),%edx
f01109a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109a5:	8b 40 08             	mov    0x8(%eax),%eax
f01109a8:	83 ec 04             	sub    $0x4,%esp
f01109ab:	52                   	push   %edx
f01109ac:	50                   	push   %eax
f01109ad:	68 b8 76 13 f0       	push   $0xf01376b8
f01109b2:	e8 cb 02 ff ff       	call   f0100c82 <cprintf>
f01109b7:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01109ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01109bd:	8b 40 08             	mov    0x8(%eax),%eax
f01109c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01109c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01109c7:	74 07                	je     f01109d0 <show_list_content+0x4b>
f01109c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01109cc:	8b 00                	mov    (%eax),%eax
f01109ce:	eb 05                	jmp    f01109d5 <show_list_content+0x50>
f01109d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01109d5:	8b 55 08             	mov    0x8(%ebp),%edx
f01109d8:	89 42 08             	mov    %eax,0x8(%edx)
f01109db:	8b 45 08             	mov    0x8(%ebp),%eax
f01109de:	8b 40 08             	mov    0x8(%eax),%eax
f01109e1:	85 c0                	test   %eax,%eax
f01109e3:	75 b7                	jne    f011099c <show_list_content+0x17>
f01109e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01109e9:	75 b1                	jne    f011099c <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f01109eb:	90                   	nop
f01109ec:	c9                   	leave  
f01109ed:	c3                   	ret    

f01109ee <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f01109ee:	55                   	push   %ebp
f01109ef:	89 e5                	mov    %esp,%ebp
f01109f1:	57                   	push   %edi
f01109f2:	56                   	push   %esi
f01109f3:	53                   	push   %ebx
f01109f4:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01109fa:	83 ec 0c             	sub    $0xc,%esp
f01109fd:	68 bc 83 13 f0       	push   $0xf01383bc
f0110a02:	e8 7b 02 ff ff       	call   f0100c82 <cprintf>
f0110a07:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110a0a:	83 ec 0c             	sub    $0xc,%esp
f0110a0d:	68 e0 83 13 f0       	push   $0xf01383e0
f0110a12:	e8 6b 02 ff ff       	call   f0100c82 <cprintf>
f0110a17:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110a1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110a21:	83 ec 0c             	sub    $0xc,%esp
f0110a24:	68 fc 83 13 f0       	push   $0xf01383fc
f0110a29:	e8 54 02 ff ff       	call   f0100c82 <cprintf>
f0110a2e:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110a31:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110a34:	bb b6 84 13 f0       	mov    $0xf01384b6,%ebx
f0110a39:	ba 03 00 00 00       	mov    $0x3,%edx
f0110a3e:	89 c7                	mov    %eax,%edi
f0110a40:	89 de                	mov    %ebx,%esi
f0110a42:	89 d1                	mov    %edx,%ecx
f0110a44:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110a46:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110a49:	b9 16 00 00 00       	mov    $0x16,%ecx
f0110a4e:	b8 00 00 00 00       	mov    $0x0,%eax
f0110a53:	89 d7                	mov    %edx,%edi
f0110a55:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110a57:	83 ec 0c             	sub    $0xc,%esp
f0110a5a:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110a5d:	50                   	push   %eax
f0110a5e:	e8 81 02 ff ff       	call   f0100ce4 <execute_command>
f0110a63:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110a66:	83 ec 0c             	sub    $0xc,%esp
f0110a69:	68 2a 84 13 f0       	push   $0xf013842a
f0110a6e:	e8 0f 02 ff ff       	call   f0100c82 <cprintf>
f0110a73:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0110a76:	83 ec 0c             	sub    $0xc,%esp
f0110a79:	68 40 84 13 f0       	push   $0xf0138440
f0110a7e:	e8 ff 01 ff ff       	call   f0100c82 <cprintf>
f0110a83:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0110a86:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0110a8d:	65 00 00 
f0110a90:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0110a96:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110a9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110aa0:	89 d7                	mov    %edx,%edi
f0110aa2:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0110aa4:	83 ec 0c             	sub    $0xc,%esp
f0110aa7:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0110aad:	50                   	push   %eax
f0110aae:	e8 31 02 ff ff       	call   f0100ce4 <execute_command>
f0110ab3:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110ab6:	83 ec 0c             	sub    $0xc,%esp
f0110ab9:	68 2a 84 13 f0       	push   $0xf013842a
f0110abe:	e8 bf 01 ff ff       	call   f0100c82 <cprintf>
f0110ac3:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110ac6:	83 ec 0c             	sub    $0xc,%esp
f0110ac9:	68 68 84 13 f0       	push   $0xf0138468
f0110ace:	e8 af 01 ff ff       	call   f0100c82 <cprintf>
f0110ad3:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110ad6:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0110add:	75 00 00 
f0110ae0:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110ae6:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110aeb:	b8 00 00 00 00       	mov    $0x0,%eax
f0110af0:	89 d7                	mov    %edx,%edi
f0110af2:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110af4:	83 ec 0c             	sub    $0xc,%esp
f0110af7:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0110afd:	50                   	push   %eax
f0110afe:	e8 e1 01 ff ff       	call   f0100ce4 <execute_command>
f0110b03:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b06:	83 ec 0c             	sub    $0xc,%esp
f0110b09:	68 2a 84 13 f0       	push   $0xf013842a
f0110b0e:	e8 6f 01 ff ff       	call   f0100c82 <cprintf>
f0110b13:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110b16:	83 ec 0c             	sub    $0xc,%esp
f0110b19:	68 90 84 13 f0       	push   $0xf0138490
f0110b1e:	e8 5f 01 ff ff       	call   f0100c82 <cprintf>
f0110b23:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110b26:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0110b2d:	6d 6d 00 
f0110b30:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110b36:	b9 18 00 00 00       	mov    $0x18,%ecx
f0110b3b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b40:	89 d7                	mov    %edx,%edi
f0110b42:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110b44:	83 ec 0c             	sub    $0xc,%esp
f0110b47:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0110b4d:	50                   	push   %eax
f0110b4e:	e8 91 01 ff ff       	call   f0100ce4 <execute_command>
f0110b53:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110b56:	83 ec 0c             	sub    $0xc,%esp
f0110b59:	68 2a 84 13 f0       	push   $0xf013842a
f0110b5e:	e8 1f 01 ff ff       	call   f0100c82 <cprintf>
f0110b63:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110b66:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110b6b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110b6e:	5b                   	pop    %ebx
f0110b6f:	5e                   	pop    %esi
f0110b70:	5f                   	pop    %edi
f0110b71:	5d                   	pop    %ebp
f0110b72:	c3                   	ret    

f0110b73 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0110b73:	55                   	push   %ebp
f0110b74:	89 e5                	mov    %esp,%ebp
f0110b76:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0110b79:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110b80:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110b87:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110b8e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110b93:	ff 75 ec             	pushl  -0x14(%ebp)
f0110b96:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b99:	ff 75 f4             	pushl  -0xc(%ebp)
f0110b9c:	50                   	push   %eax
f0110b9d:	e8 7b 6f ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110ba2:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110ba5:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110baa:	ff 75 ec             	pushl  -0x14(%ebp)
f0110bad:	ff 75 f0             	pushl  -0x10(%ebp)
f0110bb0:	ff 75 f4             	pushl  -0xc(%ebp)
f0110bb3:	50                   	push   %eax
f0110bb4:	e8 9e 4e 00 00       	call   f0115a57 <CP>
f0110bb9:	83 c4 10             	add    $0x10,%esp
f0110bbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110bbf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110bc3:	74 14                	je     f0110bd9 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110bc5:	83 ec 04             	sub    $0x4,%esp
f0110bc8:	68 1c 85 13 f0       	push   $0xf013851c
f0110bcd:	6a 5a                	push   $0x5a
f0110bcf:	68 3e 85 13 f0       	push   $0xf013853e
f0110bd4:	e8 22 f6 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110bd9:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0110be0:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110be7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110bee:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110bf3:	ff 75 ec             	pushl  -0x14(%ebp)
f0110bf6:	ff 75 f0             	pushl  -0x10(%ebp)
f0110bf9:	ff 75 f4             	pushl  -0xc(%ebp)
f0110bfc:	50                   	push   %eax
f0110bfd:	e8 1b 6f ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c02:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c05:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c0a:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c0d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c10:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c13:	50                   	push   %eax
f0110c14:	e8 3e 4e 00 00       	call   f0115a57 <CP>
f0110c19:	83 c4 10             	add    $0x10,%esp
f0110c1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110c1f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c23:	74 14                	je     f0110c39 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110c25:	83 ec 04             	sub    $0x4,%esp
f0110c28:	68 5c 85 13 f0       	push   $0xf013855c
f0110c2d:	6a 66                	push   $0x66
f0110c2f:	68 3e 85 13 f0       	push   $0xf013853e
f0110c34:	e8 c2 f5 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0110c39:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0110c40:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110c47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c4e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c53:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c56:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c59:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c5c:	50                   	push   %eax
f0110c5d:	e8 bb 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110c62:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110c65:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110c6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0110c6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c70:	ff 75 f4             	pushl  -0xc(%ebp)
f0110c73:	50                   	push   %eax
f0110c74:	e8 de 4d 00 00       	call   f0115a57 <CP>
f0110c79:	83 c4 10             	add    $0x10,%esp
f0110c7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110c7f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c83:	74 14                	je     f0110c99 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0110c85:	83 ec 04             	sub    $0x4,%esp
f0110c88:	68 80 85 13 f0       	push   $0xf0138580
f0110c8d:	6a 71                	push   $0x71
f0110c8f:	68 3e 85 13 f0       	push   $0xf013853e
f0110c94:	e8 62 f5 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0110c99:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0110ca0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0110ca7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110cae:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110cb3:	ff 75 ec             	pushl  -0x14(%ebp)
f0110cb6:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cb9:	ff 75 f4             	pushl  -0xc(%ebp)
f0110cbc:	50                   	push   %eax
f0110cbd:	e8 5b 6e ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110cc2:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110cc5:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110cca:	ff 75 ec             	pushl  -0x14(%ebp)
f0110ccd:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cd0:	ff 75 f4             	pushl  -0xc(%ebp)
f0110cd3:	50                   	push   %eax
f0110cd4:	e8 7e 4d 00 00       	call   f0115a57 <CP>
f0110cd9:	83 c4 10             	add    $0x10,%esp
f0110cdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110cdf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ce3:	74 14                	je     f0110cf9 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110ce5:	83 ec 04             	sub    $0x4,%esp
f0110ce8:	68 a4 85 13 f0       	push   $0xf01385a4
f0110ced:	6a 7d                	push   $0x7d
f0110cef:	68 3e 85 13 f0       	push   $0xf013853e
f0110cf4:	e8 02 f5 fe ff       	call   f01001fb <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110cf9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0110d00:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110d07:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d0e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d13:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d16:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d19:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d1c:	50                   	push   %eax
f0110d1d:	e8 fb 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110d22:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d25:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d2a:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d2d:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d30:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d33:	50                   	push   %eax
f0110d34:	e8 1e 4d 00 00       	call   f0115a57 <CP>
f0110d39:	83 c4 10             	add    $0x10,%esp
f0110d3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110d3f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d43:	74 17                	je     f0110d5c <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110d45:	83 ec 04             	sub    $0x4,%esp
f0110d48:	68 c8 85 13 f0       	push   $0xf01385c8
f0110d4d:	68 89 00 00 00       	push   $0x89
f0110d52:	68 3e 85 13 f0       	push   $0xf013853e
f0110d57:	e8 9f f4 fe ff       	call   f01001fb <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0110d5c:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0110d63:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0110d6a:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d71:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d76:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d79:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d7f:	50                   	push   %eax
f0110d80:	e8 98 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110d85:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110d88:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110d8d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110d90:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d93:	ff 75 f4             	pushl  -0xc(%ebp)
f0110d96:	50                   	push   %eax
f0110d97:	e8 bb 4c 00 00       	call   f0115a57 <CP>
f0110d9c:	83 c4 10             	add    $0x10,%esp
f0110d9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0110da2:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110da6:	74 17                	je     f0110dbf <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0110da8:	83 ec 04             	sub    $0x4,%esp
f0110dab:	68 ec 85 13 f0       	push   $0xf01385ec
f0110db0:	68 95 00 00 00       	push   $0x95
f0110db5:	68 3e 85 13 f0       	push   $0xf013853e
f0110dba:	e8 3c f4 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0110dbf:	83 ec 0c             	sub    $0xc,%esp
f0110dc2:	68 18 86 13 f0       	push   $0xf0138618
f0110dc7:	e8 b6 fe fe ff       	call   f0100c82 <cprintf>
f0110dcc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110dcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110dd4:	c9                   	leave  
f0110dd5:	c3                   	ret    

f0110dd6 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110dd6:	55                   	push   %ebp
f0110dd7:	89 e5                	mov    %esp,%ebp
f0110dd9:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0110ddc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110de3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110dea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110df1:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110df6:	ff 75 ec             	pushl  -0x14(%ebp)
f0110df9:	ff 75 f0             	pushl  -0x10(%ebp)
f0110dfc:	ff 75 f4             	pushl  -0xc(%ebp)
f0110dff:	50                   	push   %eax
f0110e00:	e8 18 6d ff ff       	call   f0107b1d <pt_set_page_permissions>
f0110e05:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110e08:	83 ec 04             	sub    $0x4,%esp
f0110e0b:	68 68 86 13 f0       	push   $0xf0138668
f0110e10:	68 a2 00 00 00       	push   $0xa2
f0110e15:	68 3e 85 13 f0       	push   $0xf013853e
f0110e1a:	e8 dc f3 fe ff       	call   f01001fb <_panic>

f0110e1f <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0110e1f:	55                   	push   %ebp
f0110e20:	89 e5                	mov    %esp,%ebp
f0110e22:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110e25:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0110e2c:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e31:	83 ec 08             	sub    $0x8,%esp
f0110e34:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e37:	50                   	push   %eax
f0110e38:	e8 94 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110e3d:	83 c4 10             	add    $0x10,%esp
f0110e40:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110e43:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110e47:	74 17                	je     f0110e60 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110e49:	83 ec 04             	sub    $0x4,%esp
f0110e4c:	68 04 87 13 f0       	push   $0xf0138704
f0110e51:	68 b0 00 00 00       	push   $0xb0
f0110e56:	68 3e 85 13 f0       	push   $0xf013853e
f0110e5b:	e8 9b f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0110e60:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110e67:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110e6c:	83 ec 08             	sub    $0x8,%esp
f0110e6f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110e72:	50                   	push   %eax
f0110e73:	e8 59 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110e78:	83 c4 10             	add    $0x10,%esp
f0110e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0110e7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e82:	74 17                	je     f0110e9b <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0110e84:	83 ec 04             	sub    $0x4,%esp
f0110e87:	68 28 87 13 f0       	push   $0xf0138728
f0110e8c:	68 b8 00 00 00       	push   $0xb8
f0110e91:	68 3e 85 13 f0       	push   $0xf013853e
f0110e96:	e8 60 f3 fe ff       	call   f01001fb <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0110e9b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110ea2:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ea7:	83 ec 08             	sub    $0x8,%esp
f0110eaa:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ead:	50                   	push   %eax
f0110eae:	e8 1e 6d ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110eb3:	83 c4 10             	add    $0x10,%esp
f0110eb6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110eb9:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110ebd:	74 17                	je     f0110ed6 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0110ebf:	83 ec 04             	sub    $0x4,%esp
f0110ec2:	68 4c 87 13 f0       	push   $0xf013874c
f0110ec7:	68 c0 00 00 00       	push   $0xc0
f0110ecc:	68 3e 85 13 f0       	push   $0xf013853e
f0110ed1:	e8 25 f3 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF1000000;
f0110ed6:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110edd:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110ee2:	83 ec 08             	sub    $0x8,%esp
f0110ee5:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ee8:	50                   	push   %eax
f0110ee9:	e8 e3 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110eee:	83 c4 10             	add    $0x10,%esp
f0110ef1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110ef4:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110ef8:	74 17                	je     f0110f11 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110efa:	83 ec 04             	sub    $0x4,%esp
f0110efd:	68 70 87 13 f0       	push   $0xf0138770
f0110f02:	68 c7 00 00 00       	push   $0xc7
f0110f07:	68 3e 85 13 f0       	push   $0xf013853e
f0110f0c:	e8 ea f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0110f11:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110f18:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f1d:	83 ec 08             	sub    $0x8,%esp
f0110f20:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f23:	50                   	push   %eax
f0110f24:	e8 a8 6c ff ff       	call   f0107bd1 <pt_get_page_permissions>
f0110f29:	83 c4 10             	add    $0x10,%esp
f0110f2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0110f2f:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110f33:	74 17                	je     f0110f4c <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110f35:	83 ec 04             	sub    $0x4,%esp
f0110f38:	68 94 87 13 f0       	push   $0xf0138794
f0110f3d:	68 ce 00 00 00       	push   $0xce
f0110f42:	68 3e 85 13 f0       	push   $0xf013853e
f0110f47:	e8 af f2 fe ff       	call   f01001fb <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0110f4c:	83 ec 0c             	sub    $0xc,%esp
f0110f4f:	68 b8 87 13 f0       	push   $0xf01387b8
f0110f54:	e8 29 fd fe ff       	call   f0100c82 <cprintf>
f0110f59:	83 c4 10             	add    $0x10,%esp
	return 0;
f0110f5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110f61:	c9                   	leave  
f0110f62:	c3                   	ret    

f0110f63 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0110f63:	55                   	push   %ebp
f0110f64:	89 e5                	mov    %esp,%ebp
f0110f66:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0110f69:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110f70:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f75:	83 ec 08             	sub    $0x8,%esp
f0110f78:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f7b:	50                   	push   %eax
f0110f7c:	e8 ab 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0110f81:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0110f84:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110f89:	83 ec 08             	sub    $0x8,%esp
f0110f8c:	ff 75 f4             	pushl  -0xc(%ebp)
f0110f8f:	50                   	push   %eax
f0110f90:	e8 1e 4a 00 00       	call   f01159b3 <CE>
f0110f95:	83 c4 10             	add    $0x10,%esp
f0110f98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110f9b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110f9f:	74 17                	je     f0110fb8 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0110fa1:	83 ec 04             	sub    $0x4,%esp
f0110fa4:	68 00 88 13 f0       	push   $0xf0138800
f0110fa9:	68 de 00 00 00       	push   $0xde
f0110fae:	68 3e 85 13 f0       	push   $0xf013853e
f0110fb3:	e8 43 f2 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0001000;
f0110fb8:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110fbf:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fc4:	83 ec 08             	sub    $0x8,%esp
f0110fc7:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fca:	50                   	push   %eax
f0110fcb:	e8 5c 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f0110fd0:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110fd3:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0110fd8:	83 ec 08             	sub    $0x8,%esp
f0110fdb:	ff 75 f4             	pushl  -0xc(%ebp)
f0110fde:	50                   	push   %eax
f0110fdf:	e8 cf 49 00 00       	call   f01159b3 <CE>
f0110fe4:	83 c4 10             	add    $0x10,%esp
f0110fe7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110fea:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0110fee:	74 17                	je     f0111007 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0110ff0:	83 ec 04             	sub    $0x4,%esp
f0110ff3:	68 2c 88 13 f0       	push   $0xf013882c
f0110ff8:	68 e6 00 00 00       	push   $0xe6
f0110ffd:	68 3e 85 13 f0       	push   $0xf013853e
f0111002:	e8 f4 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xEF800000;
f0111007:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011100e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111013:	83 ec 08             	sub    $0x8,%esp
f0111016:	ff 75 f4             	pushl  -0xc(%ebp)
f0111019:	50                   	push   %eax
f011101a:	e8 0d 6c ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f011101f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111022:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111027:	83 ec 08             	sub    $0x8,%esp
f011102a:	ff 75 f4             	pushl  -0xc(%ebp)
f011102d:	50                   	push   %eax
f011102e:	e8 80 49 00 00       	call   f01159b3 <CE>
f0111033:	83 c4 10             	add    $0x10,%esp
f0111036:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111039:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011103d:	74 17                	je     f0111056 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011103f:	83 ec 04             	sub    $0x4,%esp
f0111042:	68 58 88 13 f0       	push   $0xf0138858
f0111047:	68 ee 00 00 00       	push   $0xee
f011104c:	68 3e 85 13 f0       	push   $0xf013853e
f0111051:	e8 a5 f1 fe ff       	call   f01001fb <_panic>
	}

	va = 0xF0000000;
f0111056:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011105d:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111062:	83 ec 08             	sub    $0x8,%esp
f0111065:	ff 75 f4             	pushl  -0xc(%ebp)
f0111068:	50                   	push   %eax
f0111069:	e8 be 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f011106e:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111071:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111076:	83 ec 08             	sub    $0x8,%esp
f0111079:	ff 75 f4             	pushl  -0xc(%ebp)
f011107c:	50                   	push   %eax
f011107d:	e8 31 49 00 00       	call   f01159b3 <CE>
f0111082:	83 c4 10             	add    $0x10,%esp
f0111085:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111088:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011108c:	74 17                	je     f01110a5 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f011108e:	83 ec 04             	sub    $0x4,%esp
f0111091:	68 84 88 13 f0       	push   $0xf0138884
f0111096:	68 f6 00 00 00       	push   $0xf6
f011109b:	68 3e 85 13 f0       	push   $0xf013853e
f01110a0:	e8 56 f1 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01110a5:	83 ec 0c             	sub    $0xc,%esp
f01110a8:	68 b0 88 13 f0       	push   $0xf01388b0
f01110ad:	e8 d0 fb fe ff       	call   f0100c82 <cprintf>
f01110b2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01110b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01110ba:	c9                   	leave  
f01110bb:	c3                   	ret    

f01110bc <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01110bc:	55                   	push   %ebp
f01110bd:	89 e5                	mov    %esp,%ebp
f01110bf:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f01110c2:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01110c9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01110ce:	83 ec 08             	sub    $0x8,%esp
f01110d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01110d4:	50                   	push   %eax
f01110d5:	e8 52 6b ff ff       	call   f0107c2c <pt_clear_page_table_entry>
f01110da:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f01110dd:	83 ec 04             	sub    $0x4,%esp
f01110e0:	68 fc 88 13 f0       	push   $0xf01388fc
f01110e5:	68 01 01 00 00       	push   $0x101
f01110ea:	68 3e 85 13 f0       	push   $0xf013853e
f01110ef:	e8 07 f1 fe ff       	call   f01001fb <_panic>

f01110f4 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f01110f4:	55                   	push   %ebp
f01110f5:	89 e5                	mov    %esp,%ebp
f01110f7:	57                   	push   %edi
f01110f8:	56                   	push   %esi
f01110f9:	53                   	push   %ebx
f01110fa:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111100:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111107:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f011110e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111113:	83 ec 0c             	sub    $0xc,%esp
f0111116:	50                   	push   %eax
f0111117:	e8 79 49 00 00       	call   f0115a95 <ClearUserSpace>
f011111c:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f011111f:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111126:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011112b:	83 ec 08             	sub    $0x8,%esp
f011112e:	ff 75 dc             	pushl  -0x24(%ebp)
f0111131:	50                   	push   %eax
f0111132:	e8 61 6b ff ff       	call   f0107c98 <virtual_to_physical>
f0111137:	83 c4 10             	add    $0x10,%esp
f011113a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f011113d:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111141:	74 17                	je     f011115a <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111143:	83 ec 04             	sub    $0x4,%esp
f0111146:	68 94 89 13 f0       	push   $0xf0138994
f011114b:	68 16 01 00 00       	push   $0x116
f0111150:	68 3e 85 13 f0       	push   $0xf013853e
f0111155:	e8 a1 f0 fe ff       	call   f01001fb <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f011115a:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111161:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111166:	83 ec 08             	sub    $0x8,%esp
f0111169:	ff 75 dc             	pushl  -0x24(%ebp)
f011116c:	50                   	push   %eax
f011116d:	e8 26 6b ff ff       	call   f0107c98 <virtual_to_physical>
f0111172:	83 c4 10             	add    $0x10,%esp
f0111175:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111178:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011117d:	83 ec 08             	sub    $0x8,%esp
f0111180:	ff 75 dc             	pushl  -0x24(%ebp)
f0111183:	50                   	push   %eax
f0111184:	e8 0b 48 00 00       	call   f0115994 <CA>
f0111189:	83 c4 10             	add    $0x10,%esp
f011118c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011118f:	74 17                	je     f01111a8 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111191:	83 ec 04             	sub    $0x4,%esp
f0111194:	68 cc 89 13 f0       	push   $0xf01389cc
f0111199:	68 1f 01 00 00       	push   $0x11f
f011119e:	68 3e 85 13 f0       	push   $0xf013853e
f01111a3:	e8 53 f0 fe ff       	call   f01001fb <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01111a8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01111ae:	bb 98 8b 13 f0       	mov    $0xf0138b98,%ebx
f01111b3:	ba 0d 00 00 00       	mov    $0xd,%edx
f01111b8:	89 c7                	mov    %eax,%edi
f01111ba:	89 de                	mov    %ebx,%esi
f01111bc:	89 d1                	mov    %edx,%ecx
f01111be:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01111c0:	8d 55 81             	lea    -0x7f(%ebp),%edx
f01111c3:	b9 57 00 00 00       	mov    $0x57,%ecx
f01111c8:	b0 00                	mov    $0x0,%al
f01111ca:	89 d7                	mov    %edx,%edi
f01111cc:	f3 aa                	rep stos %al,%es:(%edi)
f01111ce:	83 ec 0c             	sub    $0xc,%esp
f01111d1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01111d7:	50                   	push   %eax
f01111d8:	e8 07 fb fe ff       	call   f0100ce4 <execute_command>
f01111dd:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f01111e0:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01111e7:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01111ec:	83 ec 08             	sub    $0x8,%esp
f01111ef:	ff 75 dc             	pushl  -0x24(%ebp)
f01111f2:	50                   	push   %eax
f01111f3:	e8 a0 6a ff ff       	call   f0107c98 <virtual_to_physical>
f01111f8:	83 c4 10             	add    $0x10,%esp
f01111fb:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01111fe:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111203:	83 ec 08             	sub    $0x8,%esp
f0111206:	ff 75 dc             	pushl  -0x24(%ebp)
f0111209:	50                   	push   %eax
f011120a:	e8 85 47 00 00       	call   f0115994 <CA>
f011120f:	83 c4 10             	add    $0x10,%esp
f0111212:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111215:	74 17                	je     f011122e <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0111217:	83 ec 04             	sub    $0x4,%esp
f011121a:	68 04 8a 13 f0       	push   $0xf0138a04
f011121f:	68 28 01 00 00       	push   $0x128
f0111224:	68 3e 85 13 f0       	push   $0xf013853e
f0111229:	e8 cd ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011122e:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111234:	bb fc 8b 13 f0       	mov    $0xf0138bfc,%ebx
f0111239:	ba 0d 00 00 00       	mov    $0xd,%edx
f011123e:	89 c7                	mov    %eax,%edi
f0111240:	89 de                	mov    %ebx,%esi
f0111242:	89 d1                	mov    %edx,%ecx
f0111244:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111246:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f011124c:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111251:	b0 00                	mov    $0x0,%al
f0111253:	89 d7                	mov    %edx,%edi
f0111255:	f3 aa                	rep stos %al,%es:(%edi)
f0111257:	83 ec 0c             	sub    $0xc,%esp
f011125a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0111260:	50                   	push   %eax
f0111261:	e8 7e fa fe ff       	call   f0100ce4 <execute_command>
f0111266:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0111269:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111270:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111275:	83 ec 08             	sub    $0x8,%esp
f0111278:	ff 75 dc             	pushl  -0x24(%ebp)
f011127b:	50                   	push   %eax
f011127c:	e8 17 6a ff ff       	call   f0107c98 <virtual_to_physical>
f0111281:	83 c4 10             	add    $0x10,%esp
f0111284:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111287:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011128c:	83 ec 08             	sub    $0x8,%esp
f011128f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111292:	50                   	push   %eax
f0111293:	e8 fc 46 00 00       	call   f0115994 <CA>
f0111298:	83 c4 10             	add    $0x10,%esp
f011129b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011129e:	74 17                	je     f01112b7 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01112a0:	83 ec 04             	sub    $0x4,%esp
f01112a3:	68 3c 8a 13 f0       	push   $0xf0138a3c
f01112a8:	68 31 01 00 00       	push   $0x131
f01112ad:	68 3e 85 13 f0       	push   $0xf013853e
f01112b2:	e8 44 ef fe ff       	call   f01001fb <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01112b7:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01112bd:	bb 60 8c 13 f0       	mov    $0xf0138c60,%ebx
f01112c2:	ba 0d 00 00 00       	mov    $0xd,%edx
f01112c7:	89 c7                	mov    %eax,%edi
f01112c9:	89 de                	mov    %ebx,%esi
f01112cb:	89 d1                	mov    %edx,%ecx
f01112cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01112cf:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01112d5:	b9 57 00 00 00       	mov    $0x57,%ecx
f01112da:	b0 00                	mov    $0x0,%al
f01112dc:	89 d7                	mov    %edx,%edi
f01112de:	f3 aa                	rep stos %al,%es:(%edi)
f01112e0:	83 ec 0c             	sub    $0xc,%esp
f01112e3:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01112e9:	50                   	push   %eax
f01112ea:	e8 f5 f9 fe ff       	call   f0100ce4 <execute_command>
f01112ef:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f01112f2:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01112f9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01112fe:	83 ec 08             	sub    $0x8,%esp
f0111301:	ff 75 dc             	pushl  -0x24(%ebp)
f0111304:	50                   	push   %eax
f0111305:	e8 8e 69 ff ff       	call   f0107c98 <virtual_to_physical>
f011130a:	83 c4 10             	add    $0x10,%esp
f011130d:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111310:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111315:	83 ec 08             	sub    $0x8,%esp
f0111318:	ff 75 dc             	pushl  -0x24(%ebp)
f011131b:	50                   	push   %eax
f011131c:	e8 73 46 00 00       	call   f0115994 <CA>
f0111321:	83 c4 10             	add    $0x10,%esp
f0111324:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111327:	74 17                	je     f0111340 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0111329:	83 ec 04             	sub    $0x4,%esp
f011132c:	68 74 8a 13 f0       	push   $0xf0138a74
f0111331:	68 3a 01 00 00       	push   $0x13a
f0111336:	68 3e 85 13 f0       	push   $0xf013853e
f011133b:	e8 bb ee fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001000;
f0111340:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111347:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011134c:	83 ec 08             	sub    $0x8,%esp
f011134f:	ff 75 dc             	pushl  -0x24(%ebp)
f0111352:	50                   	push   %eax
f0111353:	e8 40 69 ff ff       	call   f0107c98 <virtual_to_physical>
f0111358:	83 c4 10             	add    $0x10,%esp
f011135b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011135e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111363:	83 ec 08             	sub    $0x8,%esp
f0111366:	ff 75 dc             	pushl  -0x24(%ebp)
f0111369:	50                   	push   %eax
f011136a:	e8 25 46 00 00       	call   f0115994 <CA>
f011136f:	83 c4 10             	add    $0x10,%esp
f0111372:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111375:	74 17                	je     f011138e <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0111377:	83 ec 04             	sub    $0x4,%esp
f011137a:	68 ac 8a 13 f0       	push   $0xf0138aac
f011137f:	68 42 01 00 00       	push   $0x142
f0111384:	68 3e 85 13 f0       	push   $0xf013853e
f0111389:	e8 6d ee fe ff       	call   f01001fb <_panic>

	//============================
	va = 0xF0001005;
f011138e:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111395:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011139a:	83 ec 08             	sub    $0x8,%esp
f011139d:	ff 75 dc             	pushl  -0x24(%ebp)
f01113a0:	50                   	push   %eax
f01113a1:	e8 f2 68 ff ff       	call   f0107c98 <virtual_to_physical>
f01113a6:	83 c4 10             	add    $0x10,%esp
f01113a9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01113ac:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01113b1:	83 ec 08             	sub    $0x8,%esp
f01113b4:	ff 75 dc             	pushl  -0x24(%ebp)
f01113b7:	50                   	push   %eax
f01113b8:	e8 d7 45 00 00       	call   f0115994 <CA>
f01113bd:	83 c4 10             	add    $0x10,%esp
f01113c0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01113c3:	74 17                	je     f01113dc <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01113c5:	83 ec 04             	sub    $0x4,%esp
f01113c8:	68 e4 8a 13 f0       	push   $0xf0138ae4
f01113cd:	68 4a 01 00 00       	push   $0x14a
f01113d2:	68 3e 85 13 f0       	push   $0xf013853e
f01113d7:	e8 1f ee fe ff       	call   f01001fb <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01113dc:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01113e2:	bb c4 8c 13 f0       	mov    $0xf0138cc4,%ebx
f01113e7:	ba 0e 00 00 00       	mov    $0xe,%edx
f01113ec:	89 c7                	mov    %eax,%edi
f01113ee:	89 de                	mov    %ebx,%esi
f01113f0:	89 d1                	mov    %edx,%ecx
f01113f2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01113f4:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f01113fa:	b9 56 00 00 00       	mov    $0x56,%ecx
f01113ff:	b0 00                	mov    $0x0,%al
f0111401:	89 d7                	mov    %edx,%edi
f0111403:	f3 aa                	rep stos %al,%es:(%edi)
f0111405:	83 ec 0c             	sub    $0xc,%esp
f0111408:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011140e:	50                   	push   %eax
f011140f:	e8 d0 f8 fe ff       	call   f0100ce4 <execute_command>
f0111414:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0111417:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011141e:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0111423:	83 ec 08             	sub    $0x8,%esp
f0111426:	ff 75 dc             	pushl  -0x24(%ebp)
f0111429:	50                   	push   %eax
f011142a:	e8 69 68 ff ff       	call   f0107c98 <virtual_to_physical>
f011142f:	83 c4 10             	add    $0x10,%esp
f0111432:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111435:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011143a:	83 ec 08             	sub    $0x8,%esp
f011143d:	ff 75 dc             	pushl  -0x24(%ebp)
f0111440:	50                   	push   %eax
f0111441:	e8 4e 45 00 00       	call   f0115994 <CA>
f0111446:	83 c4 10             	add    $0x10,%esp
f0111449:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011144c:	74 17                	je     f0111465 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f011144e:	83 ec 04             	sub    $0x4,%esp
f0111451:	68 1c 8b 13 f0       	push   $0xf0138b1c
f0111456:	68 53 01 00 00       	push   $0x153
f011145b:	68 3e 85 13 f0       	push   $0xf013853e
f0111460:	e8 96 ed fe ff       	call   f01001fb <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0111465:	83 ec 0c             	sub    $0xc,%esp
f0111468:	68 54 8b 13 f0       	push   $0xf0138b54
f011146d:	e8 10 f8 fe ff       	call   f0100c82 <cprintf>
f0111472:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111475:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011147a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011147d:	5b                   	pop    %ebx
f011147e:	5e                   	pop    %esi
f011147f:	5f                   	pop    %edi
f0111480:	5d                   	pop    %ebp
f0111481:	c3                   	ret    

f0111482 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0111482:	55                   	push   %ebp
f0111483:	89 e5                	mov    %esp,%ebp
f0111485:	57                   	push   %edi
f0111486:	56                   	push   %esi
f0111487:	53                   	push   %ebx
f0111488:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011148e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0111494:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0111499:	ba 0f 00 00 00       	mov    $0xf,%edx
f011149e:	89 c7                	mov    %eax,%edi
f01114a0:	89 de                	mov    %ebx,%esi
f01114a2:	89 d1                	mov    %edx,%ecx
f01114a4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01114a6:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01114ac:	b9 23 00 00 00       	mov    $0x23,%ecx
f01114b1:	b0 00                	mov    $0x0,%al
f01114b3:	89 d7                	mov    %edx,%edi
f01114b5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01114b7:	6a 00                	push   $0x0
f01114b9:	6a 0a                	push   $0xa
f01114bb:	6a 14                	push   $0x14
f01114bd:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01114c3:	50                   	push   %eax
f01114c4:	e8 97 77 ff ff       	call   f0108c60 <env_create>
f01114c9:	83 c4 10             	add    $0x10,%esp
f01114cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01114cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114d2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01114d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01114d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114db:	8b 40 60             	mov    0x60(%eax),%eax
f01114de:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01114e1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01114e4:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01114e7:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01114ee:	75 70 20 
f01114f1:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01114f8:	00 00 00 
f01114fb:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0111501:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111506:	b8 00 00 00 00       	mov    $0x0,%eax
f011150b:	89 d7                	mov    %edx,%edi
f011150d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011150f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111512:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111515:	83 ec 08             	sub    $0x8,%esp
f0111518:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011151e:	52                   	push   %edx
f011151f:	50                   	push   %eax
f0111520:	e8 6f fb 01 00       	call   f0131094 <ltostr>
f0111525:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111528:	83 ec 04             	sub    $0x4,%esp
f011152b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111531:	50                   	push   %eax
f0111532:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0111538:	50                   	push   %eax
f0111539:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f011153f:	50                   	push   %eax
f0111540:	e8 47 fc 01 00       	call   f013118c <strcconcat>
f0111545:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0111548:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f011154f:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0111556:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f011155d:	83 ec 0c             	sub    $0xc,%esp
f0111560:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111563:	e8 2d 45 00 00       	call   f0115a95 <ClearUserSpace>
f0111568:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f011156b:	83 ec 04             	sub    $0x4,%esp
f011156e:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111574:	50                   	push   %eax
f0111575:	68 28 8d 13 f0       	push   $0xf0138d28
f011157a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111580:	50                   	push   %eax
f0111581:	e8 06 fc 01 00       	call   f013118c <strcconcat>
f0111586:	83 c4 10             	add    $0x10,%esp
f0111589:	83 ec 0c             	sub    $0xc,%esp
f011158c:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0111592:	50                   	push   %eax
f0111593:	e8 4c f7 fe ff       	call   f0100ce4 <execute_command>
f0111598:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f011159b:	83 ec 04             	sub    $0x4,%esp
f011159e:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01115a4:	50                   	push   %eax
f01115a5:	68 33 8d 13 f0       	push   $0xf0138d33
f01115aa:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115b0:	50                   	push   %eax
f01115b1:	e8 d6 fb 01 00       	call   f013118c <strcconcat>
f01115b6:	83 c4 10             	add    $0x10,%esp
f01115b9:	83 ec 0c             	sub    $0xc,%esp
f01115bc:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01115c2:	50                   	push   %eax
f01115c3:	e8 1c f7 fe ff       	call   f0100ce4 <execute_command>
f01115c8:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01115cb:	83 ec 04             	sub    $0x4,%esp
f01115ce:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01115d4:	50                   	push   %eax
f01115d5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01115da:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01115e0:	50                   	push   %eax
f01115e1:	e8 a6 fb 01 00       	call   f013118c <strcconcat>
f01115e6:	83 c4 10             	add    $0x10,%esp
f01115e9:	83 ec 0c             	sub    $0xc,%esp
f01115ec:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01115f2:	50                   	push   %eax
f01115f3:	e8 ec f6 fe ff       	call   f0100ce4 <execute_command>
f01115f8:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01115fb:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0111602:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111605:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0111608:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f011160f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111612:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0111615:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f011161c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011161f:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0111622:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111625:	83 ec 08             	sub    $0x8,%esp
f0111628:	50                   	push   %eax
f0111629:	ff 75 d4             	pushl  -0x2c(%ebp)
f011162c:	e8 45 44 00 00       	call   f0115a76 <GP>
f0111631:	83 c4 10             	add    $0x10,%esp
f0111634:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0111637:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f011163e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0111645:	e8 75 b2 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011164a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f011164d:	83 ec 0c             	sub    $0xc,%esp
f0111650:	68 4c 8d 13 f0       	push   $0xf0138d4c
f0111655:	e8 28 f6 fe ff       	call   f0100c82 <cprintf>
f011165a:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f011165d:	6a 03                	push   $0x3
f011165f:	68 00 00 90 02       	push   $0x2900000
f0111664:	68 00 00 80 02       	push   $0x2800000
f0111669:	ff 75 d4             	pushl  -0x2c(%ebp)
f011166c:	e8 4f 70 ff ff       	call   f01086c0 <cut_paste_pages>
f0111671:	83 c4 10             	add    $0x10,%esp
f0111674:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0111677:	e8 43 b2 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011167c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011167f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0111686:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011168a:	75 08                	jne    f0111694 <test_cut_paste_pages+0x212>
f011168c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011168f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111692:	74 2b                	je     f01116bf <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111694:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111697:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011169a:	83 ec 0c             	sub    $0xc,%esp
f011169d:	50                   	push   %eax
f011169e:	ff 75 b4             	pushl  -0x4c(%ebp)
f01116a1:	68 7c 8d 13 f0       	push   $0xf0138d7c
f01116a6:	68 91 01 00 00       	push   $0x191
f01116ab:	68 3e 85 13 f0       	push   $0xf013853e
f01116b0:	e8 d2 ec fe ff       	call   f0100387 <_warn>
f01116b5:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01116b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01116bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01116c3:	74 04                	je     f01116c9 <test_cut_paste_pages+0x247>
f01116c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01116c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01116d0:	83 ec 08             	sub    $0x8,%esp
f01116d3:	6a 00                	push   $0x0
f01116d5:	6a 01                	push   $0x1
f01116d7:	6a 00                	push   $0x0
f01116d9:	68 ff 0f 00 00       	push   $0xfff
f01116de:	ff 75 bc             	pushl  -0x44(%ebp)
f01116e1:	6a 01                	push   $0x1
f01116e3:	68 00 30 00 00       	push   $0x3000
f01116e8:	68 00 00 90 02       	push   $0x2900000
f01116ed:	68 00 00 80 02       	push   $0x2800000
f01116f2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116f5:	e8 cf 43 00 00       	call   f0115ac9 <CCP>
f01116fa:	83 c4 30             	add    $0x30,%esp
f01116fd:	83 f8 01             	cmp    $0x1,%eax
f0111700:	74 21                	je     f0111723 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111702:	83 ec 04             	sub    $0x4,%esp
f0111705:	68 d0 8d 13 f0       	push   $0xf0138dd0
f011170a:	68 99 01 00 00       	push   $0x199
f011170f:	68 3e 85 13 f0       	push   $0xf013853e
f0111714:	e8 6e ec fe ff       	call   f0100387 <_warn>
f0111719:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011171c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0111723:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111727:	74 04                	je     f011172d <test_cut_paste_pages+0x2ab>
f0111729:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f011172d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0111734:	83 ec 04             	sub    $0x4,%esp
f0111737:	6a 00                	push   $0x0
f0111739:	68 00 00 90 02       	push   $0x2900000
f011173e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111741:	e8 5f 41 00 00       	call   f01158a5 <CB>
f0111746:	83 c4 10             	add    $0x10,%esp
f0111749:	85 c0                	test   %eax,%eax
f011174b:	0f 84 f6 00 00 00    	je     f0111847 <test_cut_paste_pages+0x3c5>
f0111751:	83 ec 04             	sub    $0x4,%esp
f0111754:	6a 00                	push   $0x0
f0111756:	68 00 10 90 02       	push   $0x2901000
f011175b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011175e:	e8 42 41 00 00       	call   f01158a5 <CB>
f0111763:	83 c4 10             	add    $0x10,%esp
f0111766:	85 c0                	test   %eax,%eax
f0111768:	0f 84 d9 00 00 00    	je     f0111847 <test_cut_paste_pages+0x3c5>
f011176e:	83 ec 04             	sub    $0x4,%esp
f0111771:	6a 00                	push   $0x0
f0111773:	68 00 20 90 02       	push   $0x2902000
f0111778:	ff 75 d4             	pushl  -0x2c(%ebp)
f011177b:	e8 25 41 00 00       	call   f01158a5 <CB>
f0111780:	83 c4 10             	add    $0x10,%esp
f0111783:	85 c0                	test   %eax,%eax
f0111785:	0f 84 bc 00 00 00    	je     f0111847 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f011178b:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0111792:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0111799:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01117a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01117a3:	8a 00                	mov    (%eax),%al
f01117a5:	3c 61                	cmp    $0x61,%al
f01117a7:	75 12                	jne    f01117bb <test_cut_paste_pages+0x339>
f01117a9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117ac:	8a 00                	mov    (%eax),%al
f01117ae:	3c 62                	cmp    $0x62,%al
f01117b0:	75 09                	jne    f01117bb <test_cut_paste_pages+0x339>
f01117b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01117b5:	8a 00                	mov    (%eax),%al
f01117b7:	3c 63                	cmp    $0x63,%al
f01117b9:	74 21                	je     f01117dc <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01117bb:	83 ec 04             	sub    $0x4,%esp
f01117be:	68 1c 8e 13 f0       	push   $0xf0138e1c
f01117c3:	68 a6 01 00 00       	push   $0x1a6
f01117c8:	68 3e 85 13 f0       	push   $0xf013853e
f01117cd:	e8 b5 eb fe ff       	call   f0100387 <_warn>
f01117d2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01117d5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01117dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01117e0:	74 04                	je     f01117e6 <test_cut_paste_pages+0x364>
f01117e2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01117e6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01117ed:	83 ec 04             	sub    $0x4,%esp
f01117f0:	6a 01                	push   $0x1
f01117f2:	68 00 10 90 02       	push   $0x2901000
f01117f7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01117fa:	e8 a6 40 00 00       	call   f01158a5 <CB>
f01117ff:	83 c4 10             	add    $0x10,%esp
f0111802:	85 c0                	test   %eax,%eax
f0111804:	74 41                	je     f0111847 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0111806:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111809:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f011180c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011180f:	8a 00                	mov    (%eax),%al
f0111811:	3c 79                	cmp    $0x79,%al
f0111813:	74 21                	je     f0111836 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111815:	83 ec 04             	sub    $0x4,%esp
f0111818:	68 1c 8e 13 f0       	push   $0xf0138e1c
f011181d:	68 b1 01 00 00       	push   $0x1b1
f0111822:	68 3e 85 13 f0       	push   $0xf013853e
f0111827:	e8 5b eb fe ff       	call   f0100387 <_warn>
f011182c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011182f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0111836:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011183a:	74 04                	je     f0111840 <test_cut_paste_pages+0x3be>
f011183c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0111840:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0111847:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011184a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f011184d:	6a 02                	push   $0x2
f011184f:	68 00 f0 bf 02       	push   $0x2bff000
f0111854:	68 00 10 90 02       	push   $0x2901000
f0111859:	ff 75 d4             	pushl  -0x2c(%ebp)
f011185c:	e8 5f 6e ff ff       	call   f01086c0 <cut_paste_pages>
f0111861:	83 c4 10             	add    $0x10,%esp
f0111864:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111867:	e8 53 b0 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011186c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f011186f:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0111873:	75 0b                	jne    f0111880 <test_cut_paste_pages+0x3fe>
f0111875:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111878:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011187b:	83 f8 01             	cmp    $0x1,%eax
f011187e:	74 2b                	je     f01118ab <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111880:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111883:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111886:	83 ec 0c             	sub    $0xc,%esp
f0111889:	50                   	push   %eax
f011188a:	ff 75 b4             	pushl  -0x4c(%ebp)
f011188d:	68 7c 8d 13 f0       	push   $0xf0138d7c
f0111892:	68 c2 01 00 00       	push   $0x1c2
f0111897:	68 3e 85 13 f0       	push   $0xf013853e
f011189c:	e8 e6 ea fe ff       	call   f0100387 <_warn>
f01118a1:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01118a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01118ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01118af:	74 04                	je     f01118b5 <test_cut_paste_pages+0x433>
f01118b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01118b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01118bc:	83 ec 08             	sub    $0x8,%esp
f01118bf:	6a 00                	push   $0x0
f01118c1:	6a 01                	push   $0x1
f01118c3:	6a 00                	push   $0x0
f01118c5:	68 ff 0f 00 00       	push   $0xfff
f01118ca:	ff 75 bc             	pushl  -0x44(%ebp)
f01118cd:	6a 01                	push   $0x1
f01118cf:	68 00 20 00 00       	push   $0x2000
f01118d4:	68 00 f0 bf 02       	push   $0x2bff000
f01118d9:	68 00 10 90 02       	push   $0x2901000
f01118de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01118e1:	e8 e3 41 00 00       	call   f0115ac9 <CCP>
f01118e6:	83 c4 30             	add    $0x30,%esp
f01118e9:	83 f8 01             	cmp    $0x1,%eax
f01118ec:	74 21                	je     f011190f <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01118ee:	83 ec 04             	sub    $0x4,%esp
f01118f1:	68 d0 8d 13 f0       	push   $0xf0138dd0
f01118f6:	68 ca 01 00 00       	push   $0x1ca
f01118fb:	68 3e 85 13 f0       	push   $0xf013853e
f0111900:	e8 82 ea fe ff       	call   f0100387 <_warn>
f0111905:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111908:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011190f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111913:	74 04                	je     f0111919 <test_cut_paste_pages+0x497>
f0111915:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111919:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0111920:	83 ec 04             	sub    $0x4,%esp
f0111923:	6a 00                	push   $0x0
f0111925:	68 ff f7 bf 02       	push   $0x2bff7ff
f011192a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011192d:	e8 73 3f 00 00       	call   f01158a5 <CB>
f0111932:	83 c4 10             	add    $0x10,%esp
f0111935:	85 c0                	test   %eax,%eax
f0111937:	74 6b                	je     f01119a4 <test_cut_paste_pages+0x522>
f0111939:	83 ec 04             	sub    $0x4,%esp
f011193c:	6a 00                	push   $0x0
f011193e:	68 ff 0f c0 02       	push   $0x2c00fff
f0111943:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111946:	e8 5a 3f 00 00       	call   f01158a5 <CB>
f011194b:	83 c4 10             	add    $0x10,%esp
f011194e:	85 c0                	test   %eax,%eax
f0111950:	74 52                	je     f01119a4 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111952:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111959:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0111960:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111963:	8a 00                	mov    (%eax),%al
f0111965:	3c 79                	cmp    $0x79,%al
f0111967:	75 09                	jne    f0111972 <test_cut_paste_pages+0x4f0>
f0111969:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011196c:	8a 00                	mov    (%eax),%al
f011196e:	3c 63                	cmp    $0x63,%al
f0111970:	74 21                	je     f0111993 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111972:	83 ec 04             	sub    $0x4,%esp
f0111975:	68 1c 8e 13 f0       	push   $0xf0138e1c
f011197a:	68 d6 01 00 00       	push   $0x1d6
f011197f:	68 3e 85 13 f0       	push   $0xf013853e
f0111984:	e8 fe e9 fe ff       	call   f0100387 <_warn>
f0111989:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011198c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111993:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111997:	74 04                	je     f011199d <test_cut_paste_pages+0x51b>
f0111999:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011199d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01119a4:	83 ec 0c             	sub    $0xc,%esp
f01119a7:	68 55 8e 13 f0       	push   $0xf0138e55
f01119ac:	e8 d1 f2 fe ff       	call   f0100c82 <cprintf>
f01119b1:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01119b4:	83 ec 0c             	sub    $0xc,%esp
f01119b7:	68 64 8e 13 f0       	push   $0xf0138e64
f01119bc:	e8 c1 f2 fe ff       	call   f0100c82 <cprintf>
f01119c1:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01119c4:	83 ec 04             	sub    $0x4,%esp
f01119c7:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01119cd:	50                   	push   %eax
f01119ce:	68 8d 8e 13 f0       	push   $0xf0138e8d
f01119d3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01119d9:	50                   	push   %eax
f01119da:	e8 ad f7 01 00       	call   f013118c <strcconcat>
f01119df:	83 c4 10             	add    $0x10,%esp
f01119e2:	83 ec 0c             	sub    $0xc,%esp
f01119e5:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01119eb:	50                   	push   %eax
f01119ec:	e8 f3 f2 fe ff       	call   f0100ce4 <execute_command>
f01119f1:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01119f4:	83 ec 04             	sub    $0x4,%esp
f01119f7:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01119fd:	50                   	push   %eax
f01119fe:	68 98 8e 13 f0       	push   $0xf0138e98
f0111a03:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a09:	50                   	push   %eax
f0111a0a:	e8 7d f7 01 00       	call   f013118c <strcconcat>
f0111a0f:	83 c4 10             	add    $0x10,%esp
f0111a12:	83 ec 0c             	sub    $0xc,%esp
f0111a15:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0111a1b:	50                   	push   %eax
f0111a1c:	e8 c3 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a21:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111a24:	83 ec 04             	sub    $0x4,%esp
f0111a27:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111a2d:	50                   	push   %eax
f0111a2e:	68 a3 8e 13 f0       	push   $0xf0138ea3
f0111a33:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a39:	50                   	push   %eax
f0111a3a:	e8 4d f7 01 00       	call   f013118c <strcconcat>
f0111a3f:	83 c4 10             	add    $0x10,%esp
f0111a42:	83 ec 0c             	sub    $0xc,%esp
f0111a45:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0111a4b:	50                   	push   %eax
f0111a4c:	e8 93 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a51:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111a54:	83 ec 04             	sub    $0x4,%esp
f0111a57:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111a5d:	50                   	push   %eax
f0111a5e:	68 ae 8e 13 f0       	push   $0xf0138eae
f0111a63:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111a69:	50                   	push   %eax
f0111a6a:	e8 1d f7 01 00       	call   f013118c <strcconcat>
f0111a6f:	83 c4 10             	add    $0x10,%esp
f0111a72:	83 ec 0c             	sub    $0xc,%esp
f0111a75:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0111a7b:	50                   	push   %eax
f0111a7c:	e8 63 f2 fe ff       	call   f0100ce4 <execute_command>
f0111a81:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0111a84:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0111a8b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111a8e:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0111a91:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0111a98:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111a9b:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0111a9e:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0111aa5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111aa8:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0111aab:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0111ab2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ab5:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0111ab8:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0111abf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111ac2:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111ac5:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0111acc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111acf:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111ad2:	83 ec 08             	sub    $0x8,%esp
f0111ad5:	68 00 00 c0 01       	push   $0x1c00000
f0111ada:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111add:	e8 94 3f 00 00       	call   f0115a76 <GP>
f0111ae2:	83 c4 10             	add    $0x10,%esp
f0111ae5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111ae8:	83 ec 08             	sub    $0x8,%esp
f0111aeb:	68 00 00 40 01       	push   $0x1400000
f0111af0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111af3:	e8 7e 3f 00 00       	call   f0115a76 <GP>
f0111af8:	83 c4 10             	add    $0x10,%esp
f0111afb:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0111afe:	e8 bc ad ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0111b03:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111b06:	6a 01                	push   $0x1
f0111b08:	68 00 00 40 01       	push   $0x1400000
f0111b0d:	68 00 00 c0 01       	push   $0x1c00000
f0111b12:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111b15:	e8 a6 6b ff ff       	call   f01086c0 <cut_paste_pages>
f0111b1a:	83 c4 10             	add    $0x10,%esp
f0111b1d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111b20:	e8 9a ad ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0111b25:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111b28:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111b2c:	75 08                	jne    f0111b36 <test_cut_paste_pages+0x6b4>
f0111b2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b31:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111b34:	74 2b                	je     f0111b61 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111b36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111b39:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111b3c:	83 ec 0c             	sub    $0xc,%esp
f0111b3f:	50                   	push   %eax
f0111b40:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111b43:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111b48:	68 f9 01 00 00       	push   $0x1f9
f0111b4d:	68 3e 85 13 f0       	push   $0xf013853e
f0111b52:	e8 30 e8 fe ff       	call   f0100387 <_warn>
f0111b57:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111b5a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111b61:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b65:	74 04                	je     f0111b6b <test_cut_paste_pages+0x6e9>
f0111b67:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111b6b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0111b72:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0111b79:	83 ec 08             	sub    $0x8,%esp
f0111b7c:	6a 00                	push   $0x0
f0111b7e:	68 ff 0f 00 00       	push   $0xfff
f0111b83:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111b86:	68 ff 0f 00 00       	push   $0xfff
f0111b8b:	ff 75 a0             	pushl  -0x60(%ebp)
f0111b8e:	6a 01                	push   $0x1
f0111b90:	68 00 10 00 00       	push   $0x1000
f0111b95:	68 00 00 40 01       	push   $0x1400000
f0111b9a:	68 00 00 c0 01       	push   $0x1c00000
f0111b9f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111ba2:	e8 22 3f 00 00       	call   f0115ac9 <CCP>
f0111ba7:	83 c4 30             	add    $0x30,%esp
f0111baa:	83 f8 01             	cmp    $0x1,%eax
f0111bad:	74 28                	je     f0111bd7 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0111baf:	83 ec 04             	sub    $0x4,%esp
f0111bb2:	68 d0 8d 13 f0       	push   $0xf0138dd0
f0111bb7:	68 02 02 00 00       	push   $0x202
f0111bbc:	68 3e 85 13 f0       	push   $0xf013853e
f0111bc1:	e8 c1 e7 fe ff       	call   f0100387 <_warn>
f0111bc6:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111bc9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111bd0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111bd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111bdb:	74 04                	je     f0111be1 <test_cut_paste_pages+0x75f>
f0111bdd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111be1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111be8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111bec:	0f 84 92 00 00 00    	je     f0111c84 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111bf2:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111bf9:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111c00:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111c07:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111c0e:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111c15:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111c1c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111c1f:	8a 00                	mov    (%eax),%al
f0111c21:	3c 61                	cmp    $0x61,%al
f0111c23:	75 2d                	jne    f0111c52 <test_cut_paste_pages+0x7d0>
f0111c25:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c28:	8a 00                	mov    (%eax),%al
f0111c2a:	3c 78                	cmp    $0x78,%al
f0111c2c:	75 24                	jne    f0111c52 <test_cut_paste_pages+0x7d0>
f0111c2e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111c31:	8a 00                	mov    (%eax),%al
f0111c33:	3c 62                	cmp    $0x62,%al
f0111c35:	75 1b                	jne    f0111c52 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111c37:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111c3a:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111c3c:	3c 79                	cmp    $0x79,%al
f0111c3e:	75 12                	jne    f0111c52 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111c40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111c43:	8a 00                	mov    (%eax),%al
f0111c45:	3c 63                	cmp    $0x63,%al
f0111c47:	75 09                	jne    f0111c52 <test_cut_paste_pages+0x7d0>
f0111c49:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111c4c:	8a 00                	mov    (%eax),%al
f0111c4e:	3c 7a                	cmp    $0x7a,%al
f0111c50:	74 21                	je     f0111c73 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111c52:	83 ec 04             	sub    $0x4,%esp
f0111c55:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111c5a:	68 14 02 00 00       	push   $0x214
f0111c5f:	68 3e 85 13 f0       	push   $0xf013853e
f0111c64:	e8 1e e7 fe ff       	call   f0100387 <_warn>
f0111c69:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111c6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111c73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111c77:	74 04                	je     f0111c7d <test_cut_paste_pages+0x7fb>
f0111c79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111c7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0111c84:	e8 36 ac ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0111c89:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0111c8c:	6a 03                	push   $0x3
f0111c8e:	68 00 f0 bf 01       	push   $0x1bff000
f0111c93:	68 00 00 40 01       	push   $0x1400000
f0111c98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111c9b:	e8 20 6a ff ff       	call   f01086c0 <cut_paste_pages>
f0111ca0:	83 c4 10             	add    $0x10,%esp
f0111ca3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0111ca6:	e8 14 ac ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0111cab:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111cae:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0111cb2:	75 08                	jne    f0111cbc <test_cut_paste_pages+0x83a>
f0111cb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cb7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111cba:	74 2b                	je     f0111ce7 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111cbc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111cbf:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111cc2:	83 ec 0c             	sub    $0xc,%esp
f0111cc5:	50                   	push   %eax
f0111cc6:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111cc9:	68 bc 8e 13 f0       	push   $0xf0138ebc
f0111cce:	68 23 02 00 00       	push   $0x223
f0111cd3:	68 3e 85 13 f0       	push   $0xf013853e
f0111cd8:	e8 aa e6 fe ff       	call   f0100387 <_warn>
f0111cdd:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111ce0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111ce7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111ceb:	74 04                	je     f0111cf1 <test_cut_paste_pages+0x86f>
f0111ced:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111cf1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111cf8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111cff:	83 ec 04             	sub    $0x4,%esp
f0111d02:	6a 00                	push   $0x0
f0111d04:	68 00 00 40 01       	push   $0x1400000
f0111d09:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d0c:	e8 94 3b 00 00       	call   f01158a5 <CB>
f0111d11:	83 c4 10             	add    $0x10,%esp
f0111d14:	83 f8 01             	cmp    $0x1,%eax
f0111d17:	0f 85 80 00 00 00    	jne    f0111d9d <test_cut_paste_pages+0x91b>
f0111d1d:	83 ec 04             	sub    $0x4,%esp
f0111d20:	6a 00                	push   $0x0
f0111d22:	68 00 10 40 01       	push   $0x1401000
f0111d27:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d2a:	e8 76 3b 00 00       	call   f01158a5 <CB>
f0111d2f:	83 c4 10             	add    $0x10,%esp
f0111d32:	83 f8 01             	cmp    $0x1,%eax
f0111d35:	75 66                	jne    f0111d9d <test_cut_paste_pages+0x91b>
f0111d37:	83 ec 04             	sub    $0x4,%esp
f0111d3a:	6a 00                	push   $0x0
f0111d3c:	68 00 20 40 01       	push   $0x1402000
f0111d41:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d44:	e8 5c 3b 00 00       	call   f01158a5 <CB>
f0111d49:	83 c4 10             	add    $0x10,%esp
f0111d4c:	83 f8 01             	cmp    $0x1,%eax
f0111d4f:	75 4c                	jne    f0111d9d <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111d51:	83 ec 04             	sub    $0x4,%esp
f0111d54:	6a 00                	push   $0x0
f0111d56:	68 00 f0 bf 01       	push   $0x1bff000
f0111d5b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d5e:	e8 42 3b 00 00       	call   f01158a5 <CB>
f0111d63:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0111d66:	85 c0                	test   %eax,%eax
f0111d68:	75 33                	jne    f0111d9d <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111d6a:	83 ec 04             	sub    $0x4,%esp
f0111d6d:	6a 00                	push   $0x0
f0111d6f:	68 00 00 c0 01       	push   $0x1c00000
f0111d74:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d77:	e8 29 3b 00 00       	call   f01158a5 <CB>
f0111d7c:	83 c4 10             	add    $0x10,%esp
f0111d7f:	83 f8 01             	cmp    $0x1,%eax
f0111d82:	75 19                	jne    f0111d9d <test_cut_paste_pages+0x91b>
f0111d84:	83 ec 04             	sub    $0x4,%esp
f0111d87:	6a 00                	push   $0x0
f0111d89:	68 00 10 c0 01       	push   $0x1c01000
f0111d8e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d91:	e8 0f 3b 00 00       	call   f01158a5 <CB>
f0111d96:	83 c4 10             	add    $0x10,%esp
f0111d99:	85 c0                	test   %eax,%eax
f0111d9b:	74 28                	je     f0111dc5 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0111d9d:	83 ec 04             	sub    $0x4,%esp
f0111da0:	68 1c 8f 13 f0       	push   $0xf0138f1c
f0111da5:	68 2c 02 00 00       	push   $0x22c
f0111daa:	68 3e 85 13 f0       	push   $0xf013853e
f0111daf:	e8 d3 e5 fe ff       	call   f0100387 <_warn>
f0111db4:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111db7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0111dbe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111dc5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111dc9:	74 04                	je     f0111dcf <test_cut_paste_pages+0x94d>
f0111dcb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111dcf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111dd6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111dda:	0f 84 99 00 00 00    	je     f0111e79 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0111de0:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111de7:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0111dee:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111df5:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0111dfc:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111e03:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111e0a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111e0d:	8a 00                	mov    (%eax),%al
f0111e0f:	3c 61                	cmp    $0x61,%al
f0111e11:	75 2d                	jne    f0111e40 <test_cut_paste_pages+0x9be>
f0111e13:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e16:	8a 00                	mov    (%eax),%al
f0111e18:	3c 78                	cmp    $0x78,%al
f0111e1a:	75 24                	jne    f0111e40 <test_cut_paste_pages+0x9be>
f0111e1c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e1f:	8a 00                	mov    (%eax),%al
f0111e21:	3c 62                	cmp    $0x62,%al
f0111e23:	75 1b                	jne    f0111e40 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111e25:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111e28:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111e2a:	3c 79                	cmp    $0x79,%al
f0111e2c:	75 12                	jne    f0111e40 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111e2e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111e31:	8a 00                	mov    (%eax),%al
f0111e33:	3c 63                	cmp    $0x63,%al
f0111e35:	75 09                	jne    f0111e40 <test_cut_paste_pages+0x9be>
f0111e37:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111e3a:	8a 00                	mov    (%eax),%al
f0111e3c:	3c 7a                	cmp    $0x7a,%al
f0111e3e:	74 28                	je     f0111e68 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0111e40:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111e47:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111e4e:	83 ec 04             	sub    $0x4,%esp
f0111e51:	68 1c 8e 13 f0       	push   $0xf0138e1c
f0111e56:	68 40 02 00 00       	push   $0x240
f0111e5b:	68 3e 85 13 f0       	push   $0xf013853e
f0111e60:	e8 22 e5 fe ff       	call   f0100387 <_warn>
f0111e65:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0111e68:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111e6c:	74 04                	je     f0111e72 <test_cut_paste_pages+0x9f0>
f0111e6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111e72:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0111e79:	83 ec 0c             	sub    $0xc,%esp
f0111e7c:	68 55 8f 13 f0       	push   $0xf0138f55
f0111e81:	e8 fc ed fe ff       	call   f0100c82 <cprintf>
f0111e86:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0111e89:	83 ec 08             	sub    $0x8,%esp
f0111e8c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111e8f:	68 64 8f 13 f0       	push   $0xf0138f64
f0111e94:	e8 e9 ed fe ff       	call   f0100c82 <cprintf>
f0111e99:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0111e9c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0111ea0:	75 10                	jne    f0111eb2 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0111ea2:	83 ec 0c             	sub    $0xc,%esp
f0111ea5:	68 98 8f 13 f0       	push   $0xf0138f98
f0111eaa:	e8 d3 ed fe ff       	call   f0100c82 <cprintf>
f0111eaf:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0111eb2:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0111eb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111eba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111ebd:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0111ec0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ec5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111ec8:	5b                   	pop    %ebx
f0111ec9:	5e                   	pop    %esi
f0111eca:	5f                   	pop    %edi
f0111ecb:	5d                   	pop    %ebp
f0111ecc:	c3                   	ret    

f0111ecd <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0111ecd:	55                   	push   %ebp
f0111ece:	89 e5                	mov    %esp,%ebp
f0111ed0:	57                   	push   %edi
f0111ed1:	56                   	push   %esi
f0111ed2:	53                   	push   %ebx
f0111ed3:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111ed9:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111edf:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0111ee4:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ee9:	89 c7                	mov    %eax,%edi
f0111eeb:	89 de                	mov    %ebx,%esi
f0111eed:	89 d1                	mov    %edx,%ecx
f0111eef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ef1:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111ef7:	b9 23 00 00 00       	mov    $0x23,%ecx
f0111efc:	b0 00                	mov    $0x0,%al
f0111efe:	89 d7                	mov    %edx,%edi
f0111f00:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111f02:	6a 00                	push   $0x0
f0111f04:	6a 0a                	push   $0xa
f0111f06:	6a 14                	push   $0x14
f0111f08:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0111f0e:	50                   	push   %eax
f0111f0f:	e8 4c 6d ff ff       	call   f0108c60 <env_create>
f0111f14:	83 c4 10             	add    $0x10,%esp
f0111f17:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111f1a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0111f20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f26:	8b 40 60             	mov    0x60(%eax),%eax
f0111f29:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0111f2f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111f35:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111f38:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0111f3f:	75 70 20 
f0111f42:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111f49:	00 00 00 
f0111f4c:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111f52:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111f57:	b8 00 00 00 00       	mov    $0x0,%eax
f0111f5c:	89 d7                	mov    %edx,%edi
f0111f5e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0111f60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111f63:	8b 40 4c             	mov    0x4c(%eax),%eax
f0111f66:	83 ec 08             	sub    $0x8,%esp
f0111f69:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0111f6f:	52                   	push   %edx
f0111f70:	50                   	push   %eax
f0111f71:	e8 1e f1 01 00       	call   f0131094 <ltostr>
f0111f76:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0111f79:	83 ec 04             	sub    $0x4,%esp
f0111f7c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111f82:	50                   	push   %eax
f0111f83:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0111f89:	50                   	push   %eax
f0111f8a:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0111f90:	50                   	push   %eax
f0111f91:	e8 f6 f1 01 00       	call   f013118c <strcconcat>
f0111f96:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0111f99:	83 ec 0c             	sub    $0xc,%esp
f0111f9c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f9f:	e8 f1 3a 00 00       	call   f0115a95 <ClearUserSpace>
f0111fa4:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0111fa7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0111fae:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0111fb5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111fbc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0111fc3:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111fca:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0111fd1:	83 ec 0c             	sub    $0xc,%esp
f0111fd4:	68 0c 90 13 f0       	push   $0xf013900c
f0111fd9:	e8 a4 ec fe ff       	call   f0100c82 <cprintf>
f0111fde:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111fe1:	83 ec 04             	sub    $0x4,%esp
f0111fe4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111fea:	50                   	push   %eax
f0111feb:	68 42 90 13 f0       	push   $0xf0139042
f0111ff0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111ff6:	50                   	push   %eax
f0111ff7:	e8 90 f1 01 00       	call   f013118c <strcconcat>
f0111ffc:	83 c4 10             	add    $0x10,%esp
f0111fff:	83 ec 0c             	sub    $0xc,%esp
f0112002:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112008:	50                   	push   %eax
f0112009:	e8 d6 ec fe ff       	call   f0100ce4 <execute_command>
f011200e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112011:	83 ec 04             	sub    $0x4,%esp
f0112014:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011201a:	50                   	push   %eax
f011201b:	68 47 90 13 f0       	push   $0xf0139047
f0112020:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112026:	50                   	push   %eax
f0112027:	e8 60 f1 01 00       	call   f013118c <strcconcat>
f011202c:	83 c4 10             	add    $0x10,%esp
f011202f:	83 ec 0c             	sub    $0xc,%esp
f0112032:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112038:	50                   	push   %eax
f0112039:	e8 a6 ec fe ff       	call   f0100ce4 <execute_command>
f011203e:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112041:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112047:	bb 4d 93 13 f0       	mov    $0xf013934d,%ebx
f011204c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112051:	89 c7                	mov    %eax,%edi
f0112053:	89 de                	mov    %ebx,%esi
f0112055:	89 d1                	mov    %edx,%ecx
f0112057:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112059:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011205f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112064:	b0 00                	mov    $0x0,%al
f0112066:	89 d7                	mov    %edx,%edi
f0112068:	f3 aa                	rep stos %al,%es:(%edi)
f011206a:	83 ec 0c             	sub    $0xc,%esp
f011206d:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112073:	50                   	push   %eax
f0112074:	e8 6b ec fe ff       	call   f0100ce4 <execute_command>
f0112079:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f011207c:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112082:	bb b1 93 13 f0       	mov    $0xf01393b1,%ebx
f0112087:	ba 0f 00 00 00       	mov    $0xf,%edx
f011208c:	89 c7                	mov    %eax,%edi
f011208e:	89 de                	mov    %ebx,%esi
f0112090:	89 d1                	mov    %edx,%ecx
f0112092:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112094:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011209a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011209f:	b0 00                	mov    $0x0,%al
f01120a1:	89 d7                	mov    %edx,%edi
f01120a3:	f3 aa                	rep stos %al,%es:(%edi)
f01120a5:	83 ec 0c             	sub    $0xc,%esp
f01120a8:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01120ae:	50                   	push   %eax
f01120af:	e8 30 ec fe ff       	call   f0100ce4 <execute_command>
f01120b4:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01120b7:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120bd:	bb 15 94 13 f0       	mov    $0xf0139415,%ebx
f01120c2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01120c7:	89 c7                	mov    %eax,%edi
f01120c9:	89 de                	mov    %ebx,%esi
f01120cb:	89 d1                	mov    %edx,%ecx
f01120cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120cf:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01120d5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01120da:	b0 00                	mov    $0x0,%al
f01120dc:	89 d7                	mov    %edx,%edi
f01120de:	f3 aa                	rep stos %al,%es:(%edi)
f01120e0:	83 ec 0c             	sub    $0xc,%esp
f01120e3:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01120e9:	50                   	push   %eax
f01120ea:	e8 f5 eb fe ff       	call   f0100ce4 <execute_command>
f01120ef:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f01120f2:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01120f8:	bb 79 94 13 f0       	mov    $0xf0139479,%ebx
f01120fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112102:	89 c7                	mov    %eax,%edi
f0112104:	89 de                	mov    %ebx,%esi
f0112106:	89 d1                	mov    %edx,%ecx
f0112108:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011210a:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112110:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112115:	b0 00                	mov    $0x0,%al
f0112117:	89 d7                	mov    %edx,%edi
f0112119:	f3 aa                	rep stos %al,%es:(%edi)
f011211b:	83 ec 0c             	sub    $0xc,%esp
f011211e:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112124:	50                   	push   %eax
f0112125:	e8 ba eb fe ff       	call   f0100ce4 <execute_command>
f011212a:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011212d:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112133:	bb dd 94 13 f0       	mov    $0xf01394dd,%ebx
f0112138:	ba 0f 00 00 00       	mov    $0xf,%edx
f011213d:	89 c7                	mov    %eax,%edi
f011213f:	89 de                	mov    %ebx,%esi
f0112141:	89 d1                	mov    %edx,%ecx
f0112143:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112145:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011214b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112150:	b0 00                	mov    $0x0,%al
f0112152:	89 d7                	mov    %edx,%edi
f0112154:	f3 aa                	rep stos %al,%es:(%edi)
f0112156:	83 ec 0c             	sub    $0xc,%esp
f0112159:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011215f:	50                   	push   %eax
f0112160:	e8 7f eb fe ff       	call   f0100ce4 <execute_command>
f0112165:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112168:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011216e:	bb 41 95 13 f0       	mov    $0xf0139541,%ebx
f0112173:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112178:	89 c7                	mov    %eax,%edi
f011217a:	89 de                	mov    %ebx,%esi
f011217c:	89 d1                	mov    %edx,%ecx
f011217e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112180:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112186:	b9 55 00 00 00       	mov    $0x55,%ecx
f011218b:	b0 00                	mov    $0x0,%al
f011218d:	89 d7                	mov    %edx,%edi
f011218f:	f3 aa                	rep stos %al,%es:(%edi)
f0112191:	83 ec 0c             	sub    $0xc,%esp
f0112194:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011219a:	50                   	push   %eax
f011219b:	e8 44 eb fe ff       	call   f0100ce4 <execute_command>
f01121a0:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01121a3:	83 ec 04             	sub    $0x4,%esp
f01121a6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121ac:	50                   	push   %eax
f01121ad:	68 4f 90 13 f0       	push   $0xf013904f
f01121b2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121b8:	50                   	push   %eax
f01121b9:	e8 ce ef 01 00       	call   f013118c <strcconcat>
f01121be:	83 c4 10             	add    $0x10,%esp
f01121c1:	83 ec 0c             	sub    $0xc,%esp
f01121c4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121ca:	50                   	push   %eax
f01121cb:	e8 14 eb fe ff       	call   f0100ce4 <execute_command>
f01121d0:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01121d3:	83 ec 04             	sub    $0x4,%esp
f01121d6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121dc:	50                   	push   %eax
f01121dd:	68 59 90 13 f0       	push   $0xf0139059
f01121e2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01121e8:	50                   	push   %eax
f01121e9:	e8 9e ef 01 00       	call   f013118c <strcconcat>
f01121ee:	83 c4 10             	add    $0x10,%esp
f01121f1:	83 ec 0c             	sub    $0xc,%esp
f01121f4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01121fa:	50                   	push   %eax
f01121fb:	e8 e4 ea fe ff       	call   f0100ce4 <execute_command>
f0112200:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0112203:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112209:	bb a5 95 13 f0       	mov    $0xf01395a5,%ebx
f011220e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112213:	89 c7                	mov    %eax,%edi
f0112215:	89 de                	mov    %ebx,%esi
f0112217:	89 d1                	mov    %edx,%ecx
f0112219:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011221b:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112221:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112226:	b0 00                	mov    $0x0,%al
f0112228:	89 d7                	mov    %edx,%edi
f011222a:	f3 aa                	rep stos %al,%es:(%edi)
f011222c:	83 ec 0c             	sub    $0xc,%esp
f011222f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112235:	50                   	push   %eax
f0112236:	e8 a9 ea fe ff       	call   f0100ce4 <execute_command>
f011223b:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011223e:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112244:	bb 09 96 13 f0       	mov    $0xf0139609,%ebx
f0112249:	ba 0f 00 00 00       	mov    $0xf,%edx
f011224e:	89 c7                	mov    %eax,%edi
f0112250:	89 de                	mov    %ebx,%esi
f0112252:	89 d1                	mov    %edx,%ecx
f0112254:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112256:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011225c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112261:	b0 00                	mov    $0x0,%al
f0112263:	89 d7                	mov    %edx,%edi
f0112265:	f3 aa                	rep stos %al,%es:(%edi)
f0112267:	83 ec 0c             	sub    $0xc,%esp
f011226a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112270:	50                   	push   %eax
f0112271:	e8 6e ea fe ff       	call   f0100ce4 <execute_command>
f0112276:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0112279:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011227f:	bb 6d 96 13 f0       	mov    $0xf013966d,%ebx
f0112284:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112289:	89 c7                	mov    %eax,%edi
f011228b:	89 de                	mov    %ebx,%esi
f011228d:	89 d1                	mov    %edx,%ecx
f011228f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112291:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112297:	b9 55 00 00 00       	mov    $0x55,%ecx
f011229c:	b0 00                	mov    $0x0,%al
f011229e:	89 d7                	mov    %edx,%edi
f01122a0:	f3 aa                	rep stos %al,%es:(%edi)
f01122a2:	83 ec 0c             	sub    $0xc,%esp
f01122a5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01122ab:	50                   	push   %eax
f01122ac:	e8 33 ea fe ff       	call   f0100ce4 <execute_command>
f01122b1:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01122b4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01122bb:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01122c2:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01122c9:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01122d0:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01122d7:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01122de:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01122e5:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01122ec:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01122f3:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01122fa:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0112301:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0112308:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011230b:	8a 00                	mov    (%eax),%al
f011230d:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0112313:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112316:	8a 00                	mov    (%eax),%al
f0112318:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011231e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112321:	8a 00                	mov    (%eax),%al
f0112323:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112329:	e8 91 a5 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011232e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0112331:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112334:	89 d0                	mov    %edx,%eax
f0112336:	01 c0                	add    %eax,%eax
f0112338:	01 d0                	add    %edx,%eax
f011233a:	01 c0                	add    %eax,%eax
f011233c:	50                   	push   %eax
f011233d:	68 00 00 10 00       	push   $0x100000
f0112342:	6a 00                	push   $0x0
f0112344:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112347:	e8 f2 64 ff ff       	call   f010883e <copy_paste_chunk>
f011234c:	83 c4 10             	add    $0x10,%esp
f011234f:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112352:	e8 68 a5 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112357:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011235a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112361:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0112365:	75 08                	jne    f011236f <test_copy_paste_chunk+0x4a2>
f0112367:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011236a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011236d:	74 2b                	je     f011239a <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011236f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112372:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112375:	83 ec 0c             	sub    $0xc,%esp
f0112378:	50                   	push   %eax
f0112379:	ff 75 88             	pushl  -0x78(%ebp)
f011237c:	68 68 90 13 f0       	push   $0xf0139068
f0112381:	68 93 02 00 00       	push   $0x293
f0112386:	68 3e 85 13 f0       	push   $0xf013853e
f011238b:	e8 f7 df fe ff       	call   f0100387 <_warn>
f0112390:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112393:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011239a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011239e:	74 04                	je     f01123a4 <test_copy_paste_chunk+0x4d7>
f01123a0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01123a4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01123ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01123ae:	8a 00                	mov    (%eax),%al
f01123b0:	3c 61                	cmp    $0x61,%al
f01123b2:	75 75                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01123b7:	8a 00                	mov    (%eax),%al
f01123b9:	3c 78                	cmp    $0x78,%al
f01123bb:	75 6c                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123bd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01123c0:	8a 00                	mov    (%eax),%al
f01123c2:	3c 62                	cmp    $0x62,%al
f01123c4:	75 63                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01123c9:	8a 00                	mov    (%eax),%al
f01123cb:	3c 79                	cmp    $0x79,%al
f01123cd:	75 5a                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01123d2:	8a 00                	mov    (%eax),%al
f01123d4:	3c 63                	cmp    $0x63,%al
f01123d6:	75 51                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123d8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01123db:	8a 00                	mov    (%eax),%al
f01123dd:	3c 7a                	cmp    $0x7a,%al
f01123df:	75 48                	jne    f0112429 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01123e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01123e4:	8a 00                	mov    (%eax),%al
f01123e6:	3c 64                	cmp    $0x64,%al
f01123e8:	75 3f                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01123ed:	8a 10                	mov    (%eax),%dl
f01123ef:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01123f5:	38 c2                	cmp    %al,%dl
f01123f7:	75 30                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f01123f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01123fc:	8a 00                	mov    (%eax),%al
f01123fe:	3c 65                	cmp    $0x65,%al
f0112400:	75 27                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f0112402:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112405:	8a 10                	mov    (%eax),%dl
f0112407:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f011240d:	38 c2                	cmp    %al,%dl
f011240f:	75 18                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f0112411:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112414:	8a 00                	mov    (%eax),%al
f0112416:	3c 66                	cmp    $0x66,%al
f0112418:	75 0f                	jne    f0112429 <test_copy_paste_chunk+0x55c>
f011241a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011241d:	8a 10                	mov    (%eax),%dl
f011241f:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112425:	38 c2                	cmp    %al,%dl
f0112427:	74 21                	je     f011244a <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112429:	83 ec 04             	sub    $0x4,%esp
f011242c:	68 cc 90 13 f0       	push   $0xf01390cc
f0112431:	68 9c 02 00 00       	push   $0x29c
f0112436:	68 3e 85 13 f0       	push   $0xf013853e
f011243b:	e8 47 df fe ff       	call   f0100387 <_warn>
f0112440:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112443:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011244a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011244e:	74 04                	je     f0112454 <test_copy_paste_chunk+0x587>
f0112450:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112454:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f011245b:	83 ec 0c             	sub    $0xc,%esp
f011245e:	68 06 91 13 f0       	push   $0xf0139106
f0112463:	e8 1a e8 fe ff       	call   f0100c82 <cprintf>
f0112468:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f011246b:	83 ec 0c             	sub    $0xc,%esp
f011246e:	68 18 91 13 f0       	push   $0xf0139118
f0112473:	e8 0a e8 fe ff       	call   f0100c82 <cprintf>
f0112478:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f011247b:	83 ec 04             	sub    $0x4,%esp
f011247e:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112484:	50                   	push   %eax
f0112485:	68 4e 91 13 f0       	push   $0xf013914e
f011248a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112490:	50                   	push   %eax
f0112491:	e8 f6 ec 01 00       	call   f013118c <strcconcat>
f0112496:	83 c4 10             	add    $0x10,%esp
f0112499:	83 ec 0c             	sub    $0xc,%esp
f011249c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124a2:	50                   	push   %eax
f01124a3:	e8 3c e8 fe ff       	call   f0100ce4 <execute_command>
f01124a8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01124ab:	83 ec 04             	sub    $0x4,%esp
f01124ae:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124b4:	50                   	push   %eax
f01124b5:	68 58 91 13 f0       	push   $0xf0139158
f01124ba:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01124c0:	50                   	push   %eax
f01124c1:	e8 c6 ec 01 00       	call   f013118c <strcconcat>
f01124c6:	83 c4 10             	add    $0x10,%esp
f01124c9:	83 ec 0c             	sub    $0xc,%esp
f01124cc:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01124d2:	50                   	push   %eax
f01124d3:	e8 0c e8 fe ff       	call   f0100ce4 <execute_command>
f01124d8:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01124db:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01124e1:	bb d1 96 13 f0       	mov    $0xf01396d1,%ebx
f01124e6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01124eb:	89 c7                	mov    %eax,%edi
f01124ed:	89 de                	mov    %ebx,%esi
f01124ef:	89 d1                	mov    %edx,%ecx
f01124f1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01124f3:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01124f9:	b9 55 00 00 00       	mov    $0x55,%ecx
f01124fe:	b0 00                	mov    $0x0,%al
f0112500:	89 d7                	mov    %edx,%edi
f0112502:	f3 aa                	rep stos %al,%es:(%edi)
f0112504:	83 ec 0c             	sub    $0xc,%esp
f0112507:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011250d:	50                   	push   %eax
f011250e:	e8 d1 e7 fe ff       	call   f0100ce4 <execute_command>
f0112513:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0112516:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011251c:	bb 35 97 13 f0       	mov    $0xf0139735,%ebx
f0112521:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112526:	89 c7                	mov    %eax,%edi
f0112528:	89 de                	mov    %ebx,%esi
f011252a:	89 d1                	mov    %edx,%ecx
f011252c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011252e:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112534:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112539:	b0 00                	mov    $0x0,%al
f011253b:	89 d7                	mov    %edx,%edi
f011253d:	f3 aa                	rep stos %al,%es:(%edi)
f011253f:	83 ec 0c             	sub    $0xc,%esp
f0112542:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112548:	50                   	push   %eax
f0112549:	e8 96 e7 fe ff       	call   f0100ce4 <execute_command>
f011254e:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0112551:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112557:	bb 99 97 13 f0       	mov    $0xf0139799,%ebx
f011255c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112561:	89 c7                	mov    %eax,%edi
f0112563:	89 de                	mov    %ebx,%esi
f0112565:	89 d1                	mov    %edx,%ecx
f0112567:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112569:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011256f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112574:	b0 00                	mov    $0x0,%al
f0112576:	89 d7                	mov    %edx,%edi
f0112578:	f3 aa                	rep stos %al,%es:(%edi)
f011257a:	83 ec 0c             	sub    $0xc,%esp
f011257d:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112583:	50                   	push   %eax
f0112584:	e8 5b e7 fe ff       	call   f0100ce4 <execute_command>
f0112589:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f011258c:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112592:	bb fd 97 13 f0       	mov    $0xf01397fd,%ebx
f0112597:	ba 0f 00 00 00       	mov    $0xf,%edx
f011259c:	89 c7                	mov    %eax,%edi
f011259e:	89 de                	mov    %ebx,%esi
f01125a0:	89 d1                	mov    %edx,%ecx
f01125a2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125a4:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01125aa:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125af:	b0 00                	mov    $0x0,%al
f01125b1:	89 d7                	mov    %edx,%edi
f01125b3:	f3 aa                	rep stos %al,%es:(%edi)
f01125b5:	83 ec 0c             	sub    $0xc,%esp
f01125b8:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01125be:	50                   	push   %eax
f01125bf:	e8 20 e7 fe ff       	call   f0100ce4 <execute_command>
f01125c4:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01125c7:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01125cd:	bb 61 98 13 f0       	mov    $0xf0139861,%ebx
f01125d2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01125d7:	89 c7                	mov    %eax,%edi
f01125d9:	89 de                	mov    %ebx,%esi
f01125db:	89 d1                	mov    %edx,%ecx
f01125dd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01125df:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01125e5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01125ea:	b0 00                	mov    $0x0,%al
f01125ec:	89 d7                	mov    %edx,%edi
f01125ee:	f3 aa                	rep stos %al,%es:(%edi)
f01125f0:	83 ec 0c             	sub    $0xc,%esp
f01125f3:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01125f9:	50                   	push   %eax
f01125fa:	e8 e5 e6 fe ff       	call   f0100ce4 <execute_command>
f01125ff:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0112602:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112608:	bb c5 98 13 f0       	mov    $0xf01398c5,%ebx
f011260d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112612:	89 c7                	mov    %eax,%edi
f0112614:	89 de                	mov    %ebx,%esi
f0112616:	89 d1                	mov    %edx,%ecx
f0112618:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011261a:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112620:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112625:	b0 00                	mov    $0x0,%al
f0112627:	89 d7                	mov    %edx,%edi
f0112629:	f3 aa                	rep stos %al,%es:(%edi)
f011262b:	83 ec 0c             	sub    $0xc,%esp
f011262e:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112634:	50                   	push   %eax
f0112635:	e8 aa e6 fe ff       	call   f0100ce4 <execute_command>
f011263a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011263d:	83 ec 04             	sub    $0x4,%esp
f0112640:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112646:	50                   	push   %eax
f0112647:	68 62 91 13 f0       	push   $0xf0139162
f011264c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112652:	50                   	push   %eax
f0112653:	e8 34 eb 01 00       	call   f013118c <strcconcat>
f0112658:	83 c4 10             	add    $0x10,%esp
f011265b:	83 ec 0c             	sub    $0xc,%esp
f011265e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112664:	50                   	push   %eax
f0112665:	e8 7a e6 fe ff       	call   f0100ce4 <execute_command>
f011266a:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011266d:	83 ec 04             	sub    $0x4,%esp
f0112670:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112676:	50                   	push   %eax
f0112677:	68 6c 91 13 f0       	push   $0xf013916c
f011267c:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112682:	50                   	push   %eax
f0112683:	e8 04 eb 01 00       	call   f013118c <strcconcat>
f0112688:	83 c4 10             	add    $0x10,%esp
f011268b:	83 ec 0c             	sub    $0xc,%esp
f011268e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112694:	50                   	push   %eax
f0112695:	e8 4a e6 fe ff       	call   f0100ce4 <execute_command>
f011269a:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011269d:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01126a3:	bb 29 99 13 f0       	mov    $0xf0139929,%ebx
f01126a8:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126ad:	89 c7                	mov    %eax,%edi
f01126af:	89 de                	mov    %ebx,%esi
f01126b1:	89 d1                	mov    %edx,%ecx
f01126b3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126b5:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01126bb:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126c0:	b0 00                	mov    $0x0,%al
f01126c2:	89 d7                	mov    %edx,%edi
f01126c4:	f3 aa                	rep stos %al,%es:(%edi)
f01126c6:	83 ec 0c             	sub    $0xc,%esp
f01126c9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01126cf:	50                   	push   %eax
f01126d0:	e8 0f e6 fe ff       	call   f0100ce4 <execute_command>
f01126d5:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01126d8:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01126de:	bb 8d 99 13 f0       	mov    $0xf013998d,%ebx
f01126e3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01126e8:	89 c7                	mov    %eax,%edi
f01126ea:	89 de                	mov    %ebx,%esi
f01126ec:	89 d1                	mov    %edx,%ecx
f01126ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01126f0:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01126f6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01126fb:	b0 00                	mov    $0x0,%al
f01126fd:	89 d7                	mov    %edx,%edi
f01126ff:	f3 aa                	rep stos %al,%es:(%edi)
f0112701:	83 ec 0c             	sub    $0xc,%esp
f0112704:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011270a:	50                   	push   %eax
f011270b:	e8 d4 e5 fe ff       	call   f0100ce4 <execute_command>
f0112710:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0112713:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112719:	bb f1 99 13 f0       	mov    $0xf01399f1,%ebx
f011271e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112723:	89 c7                	mov    %eax,%edi
f0112725:	89 de                	mov    %ebx,%esi
f0112727:	89 d1                	mov    %edx,%ecx
f0112729:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011272b:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112731:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112736:	b0 00                	mov    $0x0,%al
f0112738:	89 d7                	mov    %edx,%edi
f011273a:	f3 aa                	rep stos %al,%es:(%edi)
f011273c:	83 ec 0c             	sub    $0xc,%esp
f011273f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112745:	50                   	push   %eax
f0112746:	e8 99 e5 fe ff       	call   f0100ce4 <execute_command>
f011274b:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011274e:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0112755:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f011275c:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0112763:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f011276a:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0112771:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0112778:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011277f:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0112786:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011278d:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0112794:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f011279b:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01127a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01127a5:	8a 00                	mov    (%eax),%al
f01127a7:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01127ad:	e8 0d a1 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01127b2:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01127b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127b8:	89 d0                	mov    %edx,%eax
f01127ba:	01 c0                	add    %eax,%eax
f01127bc:	01 d0                	add    %edx,%eax
f01127be:	01 c0                	add    %eax,%eax
f01127c0:	50                   	push   %eax
f01127c1:	68 00 00 40 00       	push   $0x400000
f01127c6:	68 00 00 20 00       	push   $0x200000
f01127cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127ce:	e8 6b 60 ff ff       	call   f010883e <copy_paste_chunk>
f01127d3:	83 c4 10             	add    $0x10,%esp
f01127d6:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01127d9:	e8 e1 a0 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01127de:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01127e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01127e8:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01127ec:	75 08                	jne    f01127f6 <test_copy_paste_chunk+0x929>
f01127ee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01127f1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01127f4:	74 2b                	je     f0112821 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01127f6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01127f9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01127fc:	83 ec 0c             	sub    $0xc,%esp
f01127ff:	50                   	push   %eax
f0112800:	ff 75 80             	pushl  -0x80(%ebp)
f0112803:	68 78 91 13 f0       	push   $0xf0139178
f0112808:	68 cc 02 00 00       	push   $0x2cc
f011280d:	68 3e 85 13 f0       	push   $0xf013853e
f0112812:	e8 70 db fe ff       	call   f0100387 <_warn>
f0112817:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011281a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112821:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112825:	74 04                	je     f011282b <test_copy_paste_chunk+0x95e>
f0112827:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011282b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0112832:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0112839:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011283c:	83 ec 08             	sub    $0x8,%esp
f011283f:	6a 01                	push   $0x1
f0112841:	6a 07                	push   $0x7
f0112843:	6a 07                	push   $0x7
f0112845:	6a 07                	push   $0x7
f0112847:	6a 07                	push   $0x7
f0112849:	6a 01                	push   $0x1
f011284b:	68 00 20 00 00       	push   $0x2000
f0112850:	68 00 00 40 00       	push   $0x400000
f0112855:	68 00 00 20 00       	push   $0x200000
f011285a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011285d:	e8 67 32 00 00       	call   f0115ac9 <CCP>
f0112862:	83 c4 30             	add    $0x30,%esp
f0112865:	83 f8 01             	cmp    $0x1,%eax
f0112868:	74 2b                	je     f0112895 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f011286a:	83 ec 04             	sub    $0x4,%esp
f011286d:	68 cc 91 13 f0       	push   $0xf01391cc
f0112872:	68 d5 02 00 00       	push   $0x2d5
f0112877:	68 3e 85 13 f0       	push   $0xf013853e
f011287c:	e8 06 db fe ff       	call   f0100387 <_warn>
f0112881:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112884:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f011288b:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0112892:	00 00 00 
		}
		if (correct) eval += 5 ;
f0112895:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112899:	74 04                	je     f011289f <test_copy_paste_chunk+0x9d2>
f011289b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011289f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01128a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128a9:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01128ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128af:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01128b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01128b5:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01128b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128bb:	8a 00                	mov    (%eax),%al
f01128bd:	3c 61                	cmp    $0x61,%al
f01128bf:	75 69                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128c1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128c4:	8a 00                	mov    (%eax),%al
f01128c6:	3c 61                	cmp    $0x61,%al
f01128c8:	75 60                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01128cd:	8a 00                	mov    (%eax),%al
f01128cf:	3c 79                	cmp    $0x79,%al
f01128d1:	75 57                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128d3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01128d6:	8a 00                	mov    (%eax),%al
f01128d8:	3c 62                	cmp    $0x62,%al
f01128da:	75 4e                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01128df:	8a 00                	mov    (%eax),%al
f01128e1:	3c 63                	cmp    $0x63,%al
f01128e3:	75 45                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128e5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01128e8:	8a 00                	mov    (%eax),%al
f01128ea:	3c 7a                	cmp    $0x7a,%al
f01128ec:	75 3c                	jne    f011292a <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01128ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01128f1:	8a 00                	mov    (%eax),%al
f01128f3:	3c 77                	cmp    $0x77,%al
f01128f5:	75 33                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f01128f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01128fa:	8a 00                	mov    (%eax),%al
f01128fc:	3c 64                	cmp    $0x64,%al
f01128fe:	75 2a                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f0112900:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112903:	8a 00                	mov    (%eax),%al
f0112905:	3c 65                	cmp    $0x65,%al
f0112907:	75 21                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f0112909:	8b 45 98             	mov    -0x68(%ebp),%eax
f011290c:	8a 00                	mov    (%eax),%al
f011290e:	3c 65                	cmp    $0x65,%al
f0112910:	75 18                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f0112912:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112915:	8a 00                	mov    (%eax),%al
f0112917:	3c 66                	cmp    $0x66,%al
f0112919:	75 0f                	jne    f011292a <test_copy_paste_chunk+0xa5d>
f011291b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011291e:	8a 10                	mov    (%eax),%dl
f0112920:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112926:	38 c2                	cmp    %al,%dl
f0112928:	74 21                	je     f011294b <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011292a:	83 ec 04             	sub    $0x4,%esp
f011292d:	68 cc 90 13 f0       	push   $0xf01390cc
f0112932:	68 e3 02 00 00       	push   $0x2e3
f0112937:	68 3e 85 13 f0       	push   $0xf013853e
f011293c:	e8 46 da fe ff       	call   f0100387 <_warn>
f0112941:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112944:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011294b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011294f:	74 04                	je     f0112955 <test_copy_paste_chunk+0xa88>
f0112951:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112955:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011295c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011295f:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112962:	e8 58 9f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112967:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f011296a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011296d:	89 c2                	mov    %eax,%edx
f011296f:	01 d2                	add    %edx,%edx
f0112971:	01 d0                	add    %edx,%eax
f0112973:	50                   	push   %eax
f0112974:	68 00 08 20 00       	push   $0x200800
f0112979:	68 00 08 40 00       	push   $0x400800
f011297e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112981:	e8 b8 5e ff ff       	call   f010883e <copy_paste_chunk>
f0112986:	83 c4 10             	add    $0x10,%esp
f0112989:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011298c:	e8 2e 9f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112991:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0112994:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0112998:	75 08                	jne    f01129a2 <test_copy_paste_chunk+0xad5>
f011299a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011299d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01129a0:	74 2b                	je     f01129cd <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01129a2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129a5:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01129a8:	83 ec 0c             	sub    $0xc,%esp
f01129ab:	50                   	push   %eax
f01129ac:	ff 75 80             	pushl  -0x80(%ebp)
f01129af:	68 78 91 13 f0       	push   $0xf0139178
f01129b4:	68 f3 02 00 00       	push   $0x2f3
f01129b9:	68 3e 85 13 f0       	push   $0xf013853e
f01129be:	e8 c4 d9 fe ff       	call   f0100387 <_warn>
f01129c3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129c6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01129cd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129d1:	74 04                	je     f01129d7 <test_copy_paste_chunk+0xb0a>
f01129d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129d7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01129de:	83 ec 08             	sub    $0x8,%esp
f01129e1:	6a 01                	push   $0x1
f01129e3:	6a 07                	push   $0x7
f01129e5:	6a 07                	push   $0x7
f01129e7:	6a 07                	push   $0x7
f01129e9:	6a 07                	push   $0x7
f01129eb:	6a 01                	push   $0x1
f01129ed:	68 00 20 00 00       	push   $0x2000
f01129f2:	68 00 00 20 00       	push   $0x200000
f01129f7:	68 00 00 40 00       	push   $0x400000
f01129fc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129ff:	e8 c5 30 00 00       	call   f0115ac9 <CCP>
f0112a04:	83 c4 30             	add    $0x30,%esp
f0112a07:	83 f8 01             	cmp    $0x1,%eax
f0112a0a:	74 21                	je     f0112a2d <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112a0c:	83 ec 04             	sub    $0x4,%esp
f0112a0f:	68 18 92 13 f0       	push   $0xf0139218
f0112a14:	68 fb 02 00 00       	push   $0x2fb
f0112a19:	68 3e 85 13 f0       	push   $0xf013853e
f0112a1e:	e8 64 d9 fe ff       	call   f0100387 <_warn>
f0112a23:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a26:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a2d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a31:	74 04                	je     f0112a37 <test_copy_paste_chunk+0xb6a>
f0112a33:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a37:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112a3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112a41:	8a 00                	mov    (%eax),%al
f0112a43:	3c 61                	cmp    $0x61,%al
f0112a45:	75 69                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a47:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a4a:	8a 00                	mov    (%eax),%al
f0112a4c:	3c 61                	cmp    $0x61,%al
f0112a4e:	75 60                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a50:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112a53:	8a 00                	mov    (%eax),%al
f0112a55:	3c 79                	cmp    $0x79,%al
f0112a57:	75 57                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a59:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112a5c:	8a 00                	mov    (%eax),%al
f0112a5e:	3c 62                	cmp    $0x62,%al
f0112a60:	75 4e                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a62:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a65:	8a 00                	mov    (%eax),%al
f0112a67:	3c 7a                	cmp    $0x7a,%al
f0112a69:	75 45                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a6e:	8a 00                	mov    (%eax),%al
f0112a70:	3c 7a                	cmp    $0x7a,%al
f0112a72:	75 3c                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112a74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a77:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0112a79:	3c 64                	cmp    $0x64,%al
f0112a7b:	75 33                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0112a7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112a80:	8a 00                	mov    (%eax),%al
f0112a82:	3c 64                	cmp    $0x64,%al
f0112a84:	75 2a                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a86:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a89:	8a 00                	mov    (%eax),%al
f0112a8b:	3c 65                	cmp    $0x65,%al
f0112a8d:	75 21                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a8f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a92:	8a 00                	mov    (%eax),%al
f0112a94:	3c 78                	cmp    $0x78,%al
f0112a96:	75 18                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112a98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112a9b:	8a 00                	mov    (%eax),%al
f0112a9d:	3c 66                	cmp    $0x66,%al
f0112a9f:	75 0f                	jne    f0112ab0 <test_copy_paste_chunk+0xbe3>
f0112aa1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112aa4:	8a 10                	mov    (%eax),%dl
f0112aa6:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112aac:	38 c2                	cmp    %al,%dl
f0112aae:	74 21                	je     f0112ad1 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112ab0:	83 ec 04             	sub    $0x4,%esp
f0112ab3:	68 cc 90 13 f0       	push   $0xf01390cc
f0112ab8:	68 04 03 00 00       	push   $0x304
f0112abd:	68 3e 85 13 f0       	push   $0xf013853e
f0112ac2:	e8 c0 d8 fe ff       	call   f0100387 <_warn>
f0112ac7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112aca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112ad1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ad5:	74 04                	je     f0112adb <test_copy_paste_chunk+0xc0e>
f0112ad7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112adb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112ae2:	83 ec 0c             	sub    $0xc,%esp
f0112ae5:	68 63 92 13 f0       	push   $0xf0139263
f0112aea:	e8 93 e1 fe ff       	call   f0100c82 <cprintf>
f0112aef:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112af2:	83 ec 0c             	sub    $0xc,%esp
f0112af5:	68 74 92 13 f0       	push   $0xf0139274
f0112afa:	e8 83 e1 fe ff       	call   f0100c82 <cprintf>
f0112aff:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112b02:	83 ec 04             	sub    $0x4,%esp
f0112b05:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b0b:	50                   	push   %eax
f0112b0c:	68 a8 92 13 f0       	push   $0xf01392a8
f0112b11:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b17:	50                   	push   %eax
f0112b18:	e8 6f e6 01 00       	call   f013118c <strcconcat>
f0112b1d:	83 c4 10             	add    $0x10,%esp
f0112b20:	83 ec 0c             	sub    $0xc,%esp
f0112b23:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b29:	50                   	push   %eax
f0112b2a:	e8 b5 e1 fe ff       	call   f0100ce4 <execute_command>
f0112b2f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112b32:	83 ec 04             	sub    $0x4,%esp
f0112b35:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b3b:	50                   	push   %eax
f0112b3c:	68 b2 92 13 f0       	push   $0xf01392b2
f0112b41:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b47:	50                   	push   %eax
f0112b48:	e8 3f e6 01 00       	call   f013118c <strcconcat>
f0112b4d:	83 c4 10             	add    $0x10,%esp
f0112b50:	83 ec 0c             	sub    $0xc,%esp
f0112b53:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b59:	50                   	push   %eax
f0112b5a:	e8 85 e1 fe ff       	call   f0100ce4 <execute_command>
f0112b5f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0112b62:	83 ec 04             	sub    $0x4,%esp
f0112b65:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b6b:	50                   	push   %eax
f0112b6c:	68 bc 92 13 f0       	push   $0xf01392bc
f0112b71:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112b77:	50                   	push   %eax
f0112b78:	e8 0f e6 01 00       	call   f013118c <strcconcat>
f0112b7d:	83 c4 10             	add    $0x10,%esp
f0112b80:	83 ec 0c             	sub    $0xc,%esp
f0112b83:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112b89:	50                   	push   %eax
f0112b8a:	e8 55 e1 fe ff       	call   f0100ce4 <execute_command>
f0112b8f:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0112b92:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112b98:	bb 55 9a 13 f0       	mov    $0xf0139a55,%ebx
f0112b9d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ba2:	89 c7                	mov    %eax,%edi
f0112ba4:	89 de                	mov    %ebx,%esi
f0112ba6:	89 d1                	mov    %edx,%ecx
f0112ba8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112baa:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0112bb0:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bb5:	b0 00                	mov    $0x0,%al
f0112bb7:	89 d7                	mov    %edx,%edi
f0112bb9:	f3 aa                	rep stos %al,%es:(%edi)
f0112bbb:	83 ec 0c             	sub    $0xc,%esp
f0112bbe:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112bc4:	50                   	push   %eax
f0112bc5:	e8 1a e1 fe ff       	call   f0100ce4 <execute_command>
f0112bca:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0112bcd:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112bd3:	bb b9 9a 13 f0       	mov    $0xf0139ab9,%ebx
f0112bd8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112bdd:	89 c7                	mov    %eax,%edi
f0112bdf:	89 de                	mov    %ebx,%esi
f0112be1:	89 d1                	mov    %edx,%ecx
f0112be3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112be5:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0112beb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112bf0:	b0 00                	mov    $0x0,%al
f0112bf2:	89 d7                	mov    %edx,%edi
f0112bf4:	f3 aa                	rep stos %al,%es:(%edi)
f0112bf6:	83 ec 0c             	sub    $0xc,%esp
f0112bf9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112bff:	50                   	push   %eax
f0112c00:	e8 df e0 fe ff       	call   f0100ce4 <execute_command>
f0112c05:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112c08:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c0e:	bb 1d 9b 13 f0       	mov    $0xf0139b1d,%ebx
f0112c13:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112c18:	89 c7                	mov    %eax,%edi
f0112c1a:	89 de                	mov    %ebx,%esi
f0112c1c:	89 d1                	mov    %edx,%ecx
f0112c1e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112c20:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112c26:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112c2b:	b0 00                	mov    $0x0,%al
f0112c2d:	89 d7                	mov    %edx,%edi
f0112c2f:	f3 aa                	rep stos %al,%es:(%edi)
f0112c31:	83 ec 0c             	sub    $0xc,%esp
f0112c34:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112c3a:	50                   	push   %eax
f0112c3b:	e8 a4 e0 fe ff       	call   f0100ce4 <execute_command>
f0112c40:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112c43:	e8 77 9c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112c48:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0112c4b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112c4e:	89 d0                	mov    %edx,%eax
f0112c50:	01 c0                	add    %eax,%eax
f0112c52:	01 d0                	add    %edx,%eax
f0112c54:	c1 e0 02             	shl    $0x2,%eax
f0112c57:	50                   	push   %eax
f0112c58:	68 00 00 90 00       	push   $0x900000
f0112c5d:	68 00 00 80 00       	push   $0x800000
f0112c62:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c65:	e8 d4 5b ff ff       	call   f010883e <copy_paste_chunk>
f0112c6a:	83 c4 10             	add    $0x10,%esp
f0112c6d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112c73:	e8 47 9c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112c78:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112c7b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112c82:	75 0b                	jne    f0112c8f <test_copy_paste_chunk+0xdc2>
f0112c84:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c87:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c8a:	83 f8 03             	cmp    $0x3,%eax
f0112c8d:	74 2e                	je     f0112cbd <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c8f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112c92:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112c95:	83 ec 0c             	sub    $0xc,%esp
f0112c98:	50                   	push   %eax
f0112c99:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112c9f:	68 78 91 13 f0       	push   $0xf0139178
f0112ca4:	68 22 03 00 00       	push   $0x322
f0112ca9:	68 3e 85 13 f0       	push   $0xf013853e
f0112cae:	e8 d4 d6 fe ff       	call   f0100387 <_warn>
f0112cb3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112cb6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112cbd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112cc1:	74 04                	je     f0112cc7 <test_copy_paste_chunk+0xdfa>
f0112cc3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cc7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0112cce:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112cd5:	83 ec 08             	sub    $0x8,%esp
f0112cd8:	6a 01                	push   $0x1
f0112cda:	6a 07                	push   $0x7
f0112cdc:	6a 07                	push   $0x7
f0112cde:	6a 07                	push   $0x7
f0112ce0:	6a 07                	push   $0x7
f0112ce2:	6a 01                	push   $0x1
f0112ce4:	68 00 30 00 00       	push   $0x3000
f0112ce9:	68 00 00 90 00       	push   $0x900000
f0112cee:	68 00 00 80 00       	push   $0x800000
f0112cf3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112cf6:	e8 ce 2d 00 00       	call   f0115ac9 <CCP>
f0112cfb:	83 c4 30             	add    $0x30,%esp
f0112cfe:	83 f8 01             	cmp    $0x1,%eax
f0112d01:	74 28                	je     f0112d2b <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112d03:	83 ec 04             	sub    $0x4,%esp
f0112d06:	68 18 92 13 f0       	push   $0xf0139218
f0112d0b:	68 2b 03 00 00       	push   $0x32b
f0112d10:	68 3e 85 13 f0       	push   $0xf013853e
f0112d15:	e8 6d d6 fe ff       	call   f0100387 <_warn>
f0112d1a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d1d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112d24:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0112d2b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d2f:	74 04                	je     f0112d35 <test_copy_paste_chunk+0xe68>
f0112d31:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d35:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112d3c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112d40:	0f 84 9e 00 00 00    	je     f0112de4 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112d46:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0112d4d:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112d54:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0112d5b:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0112d62:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0112d69:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0112d70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d73:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0112d76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d79:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0112d7c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112d7f:	8a 00                	mov    (%eax),%al
f0112d81:	3c 61                	cmp    $0x61,%al
f0112d83:	75 2d                	jne    f0112db2 <test_copy_paste_chunk+0xee5>
f0112d85:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d88:	8a 00                	mov    (%eax),%al
f0112d8a:	3c 61                	cmp    $0x61,%al
f0112d8c:	75 24                	jne    f0112db2 <test_copy_paste_chunk+0xee5>
f0112d8e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112d91:	8a 00                	mov    (%eax),%al
f0112d93:	3c 79                	cmp    $0x79,%al
f0112d95:	75 1b                	jne    f0112db2 <test_copy_paste_chunk+0xee5>
f0112d97:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112d9a:	8a 00                	mov    (%eax),%al
f0112d9c:	3c 62                	cmp    $0x62,%al
f0112d9e:	75 12                	jne    f0112db2 <test_copy_paste_chunk+0xee5>
f0112da0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112da3:	8a 00                	mov    (%eax),%al
f0112da5:	3c 63                	cmp    $0x63,%al
f0112da7:	75 09                	jne    f0112db2 <test_copy_paste_chunk+0xee5>
f0112da9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112dac:	8a 00                	mov    (%eax),%al
f0112dae:	3c 7a                	cmp    $0x7a,%al
f0112db0:	74 21                	je     f0112dd3 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112db2:	83 ec 04             	sub    $0x4,%esp
f0112db5:	68 cc 90 13 f0       	push   $0xf01390cc
f0112dba:	68 3d 03 00 00       	push   $0x33d
f0112dbf:	68 3e 85 13 f0       	push   $0xf013853e
f0112dc4:	e8 be d5 fe ff       	call   f0100387 <_warn>
f0112dc9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112dcc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112dd3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dd7:	74 04                	je     f0112ddd <test_copy_paste_chunk+0xf10>
f0112dd9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0112ddd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112de4:	e8 d6 9a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112de9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0112dec:	6a 00                	push   $0x0
f0112dee:	6a 02                	push   $0x2
f0112df0:	68 00 10 90 00       	push   $0x901000
f0112df5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112df8:	e8 59 2b 00 00       	call   f0115956 <SB>
f0112dfd:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0112e00:	6a 00                	push   $0x0
f0112e02:	6a 02                	push   $0x2
f0112e04:	68 00 20 90 00       	push   $0x902000
f0112e09:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e0c:	e8 45 2b 00 00       	call   f0115956 <SB>
f0112e11:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112e14:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112e17:	c1 e0 03             	shl    $0x3,%eax
f0112e1a:	50                   	push   %eax
f0112e1b:	68 00 f0 bf 00       	push   $0xbff000
f0112e20:	68 00 10 90 00       	push   $0x901000
f0112e25:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e28:	e8 11 5a ff ff       	call   f010883e <copy_paste_chunk>
f0112e2d:	83 c4 10             	add    $0x10,%esp
f0112e30:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112e36:	e8 84 9a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0112e3b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0112e3e:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112e45:	75 0b                	jne    f0112e52 <test_copy_paste_chunk+0xf85>
f0112e47:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e4a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e4d:	83 f8 03             	cmp    $0x3,%eax
f0112e50:	74 2e                	je     f0112e80 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112e52:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112e55:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112e58:	83 ec 0c             	sub    $0xc,%esp
f0112e5b:	50                   	push   %eax
f0112e5c:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0112e62:	68 78 91 13 f0       	push   $0xf0139178
f0112e67:	68 4d 03 00 00       	push   $0x34d
f0112e6c:	68 3e 85 13 f0       	push   $0xf013853e
f0112e71:	e8 11 d5 fe ff       	call   f0100387 <_warn>
f0112e76:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112e79:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112e80:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e84:	74 04                	je     f0112e8a <test_copy_paste_chunk+0xfbd>
f0112e86:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e8a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0112e91:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0112e98:	83 ec 08             	sub    $0x8,%esp
f0112e9b:	6a 01                	push   $0x1
f0112e9d:	6a 07                	push   $0x7
f0112e9f:	6a 03                	push   $0x3
f0112ea1:	6a 07                	push   $0x7
f0112ea3:	6a 03                	push   $0x3
f0112ea5:	6a 01                	push   $0x1
f0112ea7:	68 00 20 00 00       	push   $0x2000
f0112eac:	68 00 f0 bf 00       	push   $0xbff000
f0112eb1:	68 00 10 90 00       	push   $0x901000
f0112eb6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112eb9:	e8 0b 2c 00 00       	call   f0115ac9 <CCP>
f0112ebe:	83 c4 30             	add    $0x30,%esp
f0112ec1:	83 f8 01             	cmp    $0x1,%eax
f0112ec4:	74 28                	je     f0112eee <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112ec6:	83 ec 04             	sub    $0x4,%esp
f0112ec9:	68 18 92 13 f0       	push   $0xf0139218
f0112ece:	68 56 03 00 00       	push   $0x356
f0112ed3:	68 3e 85 13 f0       	push   $0xf013853e
f0112ed8:	e8 aa d4 fe ff       	call   f0100387 <_warn>
f0112edd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ee0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112ee7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0112eee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ef2:	74 04                	je     f0112ef8 <test_copy_paste_chunk+0x102b>
f0112ef4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ef8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0112eff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112f03:	74 72                	je     f0112f77 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112f05:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0112f0c:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112f13:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112f1a:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112f21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112f24:	8a 00                	mov    (%eax),%al
f0112f26:	3c 62                	cmp    $0x62,%al
f0112f28:	75 1b                	jne    f0112f45 <test_copy_paste_chunk+0x1078>
f0112f2a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112f2d:	8a 00                	mov    (%eax),%al
f0112f2f:	3c 62                	cmp    $0x62,%al
f0112f31:	75 12                	jne    f0112f45 <test_copy_paste_chunk+0x1078>
f0112f33:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112f36:	8a 00                	mov    (%eax),%al
f0112f38:	3c 7a                	cmp    $0x7a,%al
f0112f3a:	75 09                	jne    f0112f45 <test_copy_paste_chunk+0x1078>
f0112f3c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112f3f:	8a 00                	mov    (%eax),%al
f0112f41:	3c 7a                	cmp    $0x7a,%al
f0112f43:	74 21                	je     f0112f66 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112f45:	83 ec 04             	sub    $0x4,%esp
f0112f48:	68 cc 90 13 f0       	push   $0xf01390cc
f0112f4d:	68 62 03 00 00       	push   $0x362
f0112f52:	68 3e 85 13 f0       	push   $0xf013853e
f0112f57:	e8 2b d4 fe ff       	call   f0100387 <_warn>
f0112f5c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112f5f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112f66:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112f6a:	74 04                	je     f0112f70 <test_copy_paste_chunk+0x10a3>
f0112f6c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112f70:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112f77:	83 ec 0c             	sub    $0xc,%esp
f0112f7a:	68 c6 92 13 f0       	push   $0xf01392c6
f0112f7f:	e8 fe dc fe ff       	call   f0100c82 <cprintf>
f0112f84:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0112f87:	83 ec 08             	sub    $0x8,%esp
f0112f8a:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112f8d:	68 d8 92 13 f0       	push   $0xf01392d8
f0112f92:	e8 eb dc fe ff       	call   f0100c82 <cprintf>
f0112f97:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112f9a:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112f9e:	75 10                	jne    f0112fb0 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0112fa0:	83 ec 0c             	sub    $0xc,%esp
f0112fa3:	68 0c 93 13 f0       	push   $0xf013930c
f0112fa8:	e8 d5 dc fe ff       	call   f0100c82 <cprintf>
f0112fad:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112fb0:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0112fb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112fb8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112fbb:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112fbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112fc3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112fc6:	5b                   	pop    %ebx
f0112fc7:	5e                   	pop    %esi
f0112fc8:	5f                   	pop    %edi
f0112fc9:	5d                   	pop    %ebp
f0112fca:	c3                   	ret    

f0112fcb <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0112fcb:	55                   	push   %ebp
f0112fcc:	89 e5                	mov    %esp,%ebp
f0112fce:	57                   	push   %edi
f0112fcf:	56                   	push   %esi
f0112fd0:	53                   	push   %ebx
f0112fd1:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112fd7:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0112fdd:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0112fe2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fe7:	89 c7                	mov    %eax,%edi
f0112fe9:	89 de                	mov    %ebx,%esi
f0112feb:	89 d1                	mov    %edx,%ecx
f0112fed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fef:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112ff5:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112ffa:	b0 00                	mov    $0x0,%al
f0112ffc:	89 d7                	mov    %edx,%edi
f0112ffe:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113000:	6a 00                	push   $0x0
f0113002:	6a 0a                	push   $0xa
f0113004:	6a 14                	push   $0x14
f0113006:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011300c:	50                   	push   %eax
f011300d:	e8 4e 5c ff ff       	call   f0108c60 <env_create>
f0113012:	83 c4 10             	add    $0x10,%esp
f0113015:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113018:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011301b:	8b 40 5c             	mov    0x5c(%eax),%eax
f011301e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113021:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113024:	8b 40 60             	mov    0x60(%eax),%eax
f0113027:	89 45 80             	mov    %eax,-0x80(%ebp)
f011302a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011302d:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113030:	83 ec 0c             	sub    $0xc,%esp
f0113033:	ff 75 cc             	pushl  -0x34(%ebp)
f0113036:	e8 5a 2a 00 00       	call   f0115a95 <ClearUserSpace>
f011303b:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011303e:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113045:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011304c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113053:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113057:	83 ec 0c             	sub    $0xc,%esp
f011305a:	68 84 9b 13 f0       	push   $0xf0139b84
f011305f:	e8 1e dc fe ff       	call   f0100c82 <cprintf>
f0113064:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113067:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f011306e:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113075:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113078:	8a 00                	mov    (%eax),%al
f011307a:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113080:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113083:	8a 00                	mov    (%eax),%al
f0113085:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011308b:	e8 2f 98 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113090:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113093:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113096:	89 d0                	mov    %edx,%eax
f0113098:	01 c0                	add    %eax,%eax
f011309a:	01 d0                	add    %edx,%eax
f011309c:	01 c0                	add    %eax,%eax
f011309e:	83 ec 0c             	sub    $0xc,%esp
f01130a1:	6a 02                	push   $0x2
f01130a3:	50                   	push   %eax
f01130a4:	68 00 40 10 f0       	push   $0xf0104000
f01130a9:	68 00 00 10 f0       	push   $0xf0100000
f01130ae:	ff 75 cc             	pushl  -0x34(%ebp)
f01130b1:	e8 cc 58 ff ff       	call   f0108982 <share_chunk>
f01130b6:	83 c4 20             	add    $0x20,%esp
f01130b9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01130bc:	e8 fe 97 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01130c1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01130c4:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01130c8:	75 08                	jne    f01130d2 <test_share_chunk+0x107>
f01130ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130cd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01130d0:	74 28                	je     f01130fa <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01130d2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01130d5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01130d8:	83 ec 0c             	sub    $0xc,%esp
f01130db:	50                   	push   %eax
f01130dc:	ff 75 b0             	pushl  -0x50(%ebp)
f01130df:	68 b0 9b 13 f0       	push   $0xf0139bb0
f01130e4:	68 9e 03 00 00       	push   $0x39e
f01130e9:	68 3e 85 13 f0       	push   $0xf013853e
f01130ee:	e8 94 d2 fe ff       	call   f0100387 <_warn>
f01130f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01130f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01130fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01130fe:	74 04                	je     f0113104 <test_share_chunk+0x139>
f0113100:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113104:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113108:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011310b:	c1 e0 03             	shl    $0x3,%eax
f011310e:	83 ec 08             	sub    $0x8,%esp
f0113111:	68 fd 00 00 00       	push   $0xfd
f0113116:	6a 07                	push   $0x7
f0113118:	6a 03                	push   $0x3
f011311a:	6a 07                	push   $0x7
f011311c:	6a 03                	push   $0x3
f011311e:	6a 01                	push   $0x1
f0113120:	50                   	push   %eax
f0113121:	68 00 40 10 f0       	push   $0xf0104000
f0113126:	68 00 00 10 f0       	push   $0xf0100000
f011312b:	ff 75 cc             	pushl  -0x34(%ebp)
f011312e:	e8 96 29 00 00       	call   f0115ac9 <CCP>
f0113133:	83 c4 30             	add    $0x30,%esp
f0113136:	85 c0                	test   %eax,%eax
f0113138:	75 1e                	jne    f0113158 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011313a:	83 ec 04             	sub    $0x4,%esp
f011313d:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113142:	68 a6 03 00 00       	push   $0x3a6
f0113147:	68 3e 85 13 f0       	push   $0xf013853e
f011314c:	e8 36 d2 fe ff       	call   f0100387 <_warn>
f0113151:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113154:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113158:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011315c:	74 04                	je     f0113162 <test_share_chunk+0x197>
f011315e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113162:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113165:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113168:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011316b:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011316e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113171:	8a 00                	mov    (%eax),%al
f0113173:	3c 41                	cmp    $0x41,%al
f0113175:	75 09                	jne    f0113180 <test_share_chunk+0x1b5>
f0113177:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011317a:	8a 00                	mov    (%eax),%al
f011317c:	3c 42                	cmp    $0x42,%al
f011317e:	74 1e                	je     f011319e <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113180:	83 ec 04             	sub    $0x4,%esp
f0113183:	68 54 9c 13 f0       	push   $0xf0139c54
f0113188:	68 b0 03 00 00       	push   $0x3b0
f011318d:	68 3e 85 13 f0       	push   $0xf013853e
f0113192:	e8 f0 d1 fe ff       	call   f0100387 <_warn>
f0113197:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011319a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011319e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01131a2:	74 04                	je     f01131a8 <test_share_chunk+0x1dd>
f01131a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01131a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01131ac:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01131b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131b5:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01131b7:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01131bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131c0:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01131c2:	83 ec 0c             	sub    $0xc,%esp
f01131c5:	68 89 9c 13 f0       	push   $0xf0139c89
f01131ca:	e8 b3 da fe ff       	call   f0100c82 <cprintf>
f01131cf:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01131d2:	83 ec 0c             	sub    $0xc,%esp
f01131d5:	68 98 9c 13 f0       	push   $0xf0139c98
f01131da:	e8 a3 da fe ff       	call   f0100c82 <cprintf>
f01131df:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131e2:	e8 d8 96 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01131e7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01131ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131ed:	c1 e0 05             	shl    $0x5,%eax
f01131f0:	83 ec 0c             	sub    $0xc,%esp
f01131f3:	68 02 0e 00 00       	push   $0xe02
f01131f8:	50                   	push   %eax
f01131f9:	68 00 00 00 40       	push   $0x40000000
f01131fe:	68 00 00 00 f0       	push   $0xf0000000
f0113203:	ff 75 cc             	pushl  -0x34(%ebp)
f0113206:	e8 77 57 ff ff       	call   f0108982 <share_chunk>
f011320b:	83 c4 20             	add    $0x20,%esp
f011320e:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113211:	e8 a9 96 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113216:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0113219:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011321d:	75 1f                	jne    f011323e <test_share_chunk+0x273>
f011321f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113222:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113225:	89 c1                	mov    %eax,%ecx
f0113227:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011322a:	c1 e0 05             	shl    $0x5,%eax
f011322d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0113230:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113237:	99                   	cltd   
f0113238:	f7 fb                	idiv   %ebx
f011323a:	39 c1                	cmp    %eax,%ecx
f011323c:	74 28                	je     f0113266 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011323e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113241:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113244:	83 ec 0c             	sub    $0xc,%esp
f0113247:	50                   	push   %eax
f0113248:	ff 75 a8             	pushl  -0x58(%ebp)
f011324b:	68 d4 9c 13 f0       	push   $0xf0139cd4
f0113250:	68 c8 03 00 00       	push   $0x3c8
f0113255:	68 3e 85 13 f0       	push   $0xf013853e
f011325a:	e8 28 d1 fe ff       	call   f0100387 <_warn>
f011325f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113262:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113266:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011326a:	74 04                	je     f0113270 <test_share_chunk+0x2a5>
f011326c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113270:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113274:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011327b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011327e:	c1 e0 05             	shl    $0x5,%eax
f0113281:	83 ec 08             	sub    $0x8,%esp
f0113284:	6a 02                	push   $0x2
f0113286:	6a 07                	push   $0x7
f0113288:	6a 03                	push   $0x3
f011328a:	68 07 0e 00 00       	push   $0xe07
f011328f:	68 03 0e 00 00       	push   $0xe03
f0113294:	6a ff                	push   $0xffffffff
f0113296:	50                   	push   %eax
f0113297:	68 00 00 00 40       	push   $0x40000000
f011329c:	68 00 00 00 f0       	push   $0xf0000000
f01132a1:	ff 75 cc             	pushl  -0x34(%ebp)
f01132a4:	e8 20 28 00 00       	call   f0115ac9 <CCP>
f01132a9:	83 c4 30             	add    $0x30,%esp
f01132ac:	85 c0                	test   %eax,%eax
f01132ae:	75 25                	jne    f01132d5 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01132b0:	83 ec 04             	sub    $0x4,%esp
f01132b3:	68 0c 9c 13 f0       	push   $0xf0139c0c
f01132b8:	68 d1 03 00 00       	push   $0x3d1
f01132bd:	68 3e 85 13 f0       	push   $0xf013853e
f01132c2:	e8 c0 d0 fe ff       	call   f0100387 <_warn>
f01132c7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01132ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01132d5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01132d8:	89 d0                	mov    %edx,%eax
f01132da:	01 c0                	add    %eax,%eax
f01132dc:	01 d0                	add    %edx,%eax
f01132de:	c1 e0 02             	shl    $0x2,%eax
f01132e1:	83 ec 08             	sub    $0x8,%esp
f01132e4:	6a 02                	push   $0x2
f01132e6:	6a 07                	push   $0x7
f01132e8:	6a 03                	push   $0x3
f01132ea:	68 07 0e 00 00       	push   $0xe07
f01132ef:	68 03 0e 00 00       	push   $0xe03
f01132f4:	6a 02                	push   $0x2
f01132f6:	50                   	push   %eax
f01132f7:	68 00 00 00 40       	push   $0x40000000
f01132fc:	68 00 00 00 f0       	push   $0xf0000000
f0113301:	ff 75 cc             	pushl  -0x34(%ebp)
f0113304:	e8 c0 27 00 00       	call   f0115ac9 <CCP>
f0113309:	83 c4 30             	add    $0x30,%esp
f011330c:	85 c0                	test   %eax,%eax
f011330e:	75 1e                	jne    f011332e <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113310:	83 ec 04             	sub    $0x4,%esp
f0113313:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113318:	68 d8 03 00 00       	push   $0x3d8
f011331d:	68 3e 85 13 f0       	push   $0xf013853e
f0113322:	e8 60 d0 fe ff       	call   f0100387 <_warn>
f0113327:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011332a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011332e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113332:	74 04                	je     f0113338 <test_share_chunk+0x36d>
f0113334:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113338:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011333c:	b8 bc 7c 65 f0       	mov    $0xf0657cbc,%eax
f0113341:	05 00 00 00 10       	add    $0x10000000,%eax
f0113346:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0113349:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011334c:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0113351:	83 ec 08             	sub    $0x8,%esp
f0113354:	6a 02                	push   $0x2
f0113356:	6a 07                	push   $0x7
f0113358:	6a 03                	push   $0x3
f011335a:	68 07 0e 00 00       	push   $0xe07
f011335f:	68 03 0e 00 00       	push   $0xe03
f0113364:	6a 02                	push   $0x2
f0113366:	50                   	push   %eax
f0113367:	68 00 00 0a 40       	push   $0x400a0000
f011336c:	68 00 00 0a f0       	push   $0xf00a0000
f0113371:	ff 75 cc             	pushl  -0x34(%ebp)
f0113374:	e8 50 27 00 00       	call   f0115ac9 <CCP>
f0113379:	83 c4 30             	add    $0x30,%esp
f011337c:	85 c0                	test   %eax,%eax
f011337e:	75 1e                	jne    f011339e <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113380:	83 ec 04             	sub    $0x4,%esp
f0113383:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113388:	68 e2 03 00 00       	push   $0x3e2
f011338d:	68 3e 85 13 f0       	push   $0xf013853e
f0113392:	e8 f0 cf fe ff       	call   f0100387 <_warn>
f0113397:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011339a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011339e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133a2:	74 04                	je     f01133a8 <test_share_chunk+0x3dd>
f01133a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01133a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01133ac:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01133b0:	0f 84 a4 00 00 00    	je     f011345a <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01133b6:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01133bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133c0:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01133c3:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01133ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133cd:	8a 00                	mov    (%eax),%al
f01133cf:	3c 41                	cmp    $0x41,%al
f01133d1:	75 09                	jne    f01133dc <test_share_chunk+0x411>
f01133d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01133d6:	8a 00                	mov    (%eax),%al
f01133d8:	3c 41                	cmp    $0x41,%al
f01133da:	74 1e                	je     f01133fa <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01133dc:	83 ec 04             	sub    $0x4,%esp
f01133df:	68 54 9c 13 f0       	push   $0xf0139c54
f01133e4:	68 ef 03 00 00       	push   $0x3ef
f01133e9:	68 3e 85 13 f0       	push   $0xf013853e
f01133ee:	e8 94 cf fe ff       	call   f0100387 <_warn>
f01133f3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01133f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01133fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01133fe:	74 04                	je     f0113404 <test_share_chunk+0x439>
f0113400:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113404:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0113408:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f011340f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113412:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0113415:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f011341c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011341f:	8a 00                	mov    (%eax),%al
f0113421:	3c 43                	cmp    $0x43,%al
f0113423:	75 09                	jne    f011342e <test_share_chunk+0x463>
f0113425:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113428:	8a 00                	mov    (%eax),%al
f011342a:	3c 43                	cmp    $0x43,%al
f011342c:	74 1e                	je     f011344c <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011342e:	83 ec 04             	sub    $0x4,%esp
f0113431:	68 54 9c 13 f0       	push   $0xf0139c54
f0113436:	68 fa 03 00 00       	push   $0x3fa
f011343b:	68 3e 85 13 f0       	push   $0xf013853e
f0113440:	e8 42 cf fe ff       	call   f0100387 <_warn>
f0113445:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113448:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011344c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113450:	74 04                	je     f0113456 <test_share_chunk+0x48b>
f0113452:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113456:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011345a:	83 ec 0c             	sub    $0xc,%esp
f011345d:	68 63 92 13 f0       	push   $0xf0139263
f0113462:	e8 1b d8 fe ff       	call   f0100c82 <cprintf>
f0113467:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f011346a:	83 ec 0c             	sub    $0xc,%esp
f011346d:	68 24 9d 13 f0       	push   $0xf0139d24
f0113472:	e8 0b d8 fe ff       	call   f0100c82 <cprintf>
f0113477:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011347a:	e8 40 94 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011347f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0113482:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113485:	89 d0                	mov    %edx,%eax
f0113487:	c1 e0 03             	shl    $0x3,%eax
f011348a:	01 d0                	add    %edx,%eax
f011348c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0113493:	01 d0                	add    %edx,%eax
f0113495:	c1 e0 03             	shl    $0x3,%eax
f0113498:	83 ec 0c             	sub    $0xc,%esp
f011349b:	6a 06                	push   $0x6
f011349d:	50                   	push   %eax
f011349e:	6a 00                	push   $0x0
f01134a0:	68 00 00 00 40       	push   $0x40000000
f01134a5:	ff 75 cc             	pushl  -0x34(%ebp)
f01134a8:	e8 d5 54 ff ff       	call   f0108982 <share_chunk>
f01134ad:	83 c4 20             	add    $0x20,%esp
f01134b0:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01134b3:	e8 07 94 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01134b8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01134bb:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01134bf:	75 0b                	jne    f01134cc <test_share_chunk+0x501>
f01134c1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01134c4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01134c7:	83 f8 01             	cmp    $0x1,%eax
f01134ca:	74 28                	je     f01134f4 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01134cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01134cf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01134d2:	83 ec 0c             	sub    $0xc,%esp
f01134d5:	50                   	push   %eax
f01134d6:	ff 75 a0             	pushl  -0x60(%ebp)
f01134d9:	68 d4 9c 13 f0       	push   $0xf0139cd4
f01134de:	68 10 04 00 00       	push   $0x410
f01134e3:	68 3e 85 13 f0       	push   $0xf013853e
f01134e8:	e8 9a ce fe ff       	call   f0100387 <_warn>
f01134ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01134f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01134f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134f8:	74 04                	je     f01134fe <test_share_chunk+0x533>
f01134fa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01134fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113502:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113509:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011350c:	05 00 80 02 00       	add    $0x28000,%eax
f0113511:	c1 e0 02             	shl    $0x2,%eax
f0113514:	83 ec 08             	sub    $0x8,%esp
f0113517:	6a 02                	push   $0x2
f0113519:	6a 07                	push   $0x7
f011351b:	6a 03                	push   $0x3
f011351d:	6a 07                	push   $0x7
f011351f:	6a 07                	push   $0x7
f0113521:	6a ff                	push   $0xffffffff
f0113523:	50                   	push   %eax
f0113524:	6a 00                	push   $0x0
f0113526:	68 00 00 00 40       	push   $0x40000000
f011352b:	ff 75 cc             	pushl  -0x34(%ebp)
f011352e:	e8 96 25 00 00       	call   f0115ac9 <CCP>
f0113533:	83 c4 30             	add    $0x30,%esp
f0113536:	85 c0                	test   %eax,%eax
f0113538:	75 25                	jne    f011355f <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011353a:	83 ec 04             	sub    $0x4,%esp
f011353d:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113542:	68 19 04 00 00       	push   $0x419
f0113547:	68 3e 85 13 f0       	push   $0xf013853e
f011354c:	e8 36 ce fe ff       	call   f0100387 <_warn>
f0113551:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113554:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113558:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011355f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113562:	89 d0                	mov    %edx,%eax
f0113564:	01 c0                	add    %eax,%eax
f0113566:	01 d0                	add    %edx,%eax
f0113568:	c1 e0 02             	shl    $0x2,%eax
f011356b:	83 ec 08             	sub    $0x8,%esp
f011356e:	6a 02                	push   $0x2
f0113570:	6a 07                	push   $0x7
f0113572:	6a 03                	push   $0x3
f0113574:	6a 07                	push   $0x7
f0113576:	6a 07                	push   $0x7
f0113578:	6a 03                	push   $0x3
f011357a:	50                   	push   %eax
f011357b:	6a 00                	push   $0x0
f011357d:	68 00 00 00 40       	push   $0x40000000
f0113582:	ff 75 cc             	pushl  -0x34(%ebp)
f0113585:	e8 3f 25 00 00       	call   f0115ac9 <CCP>
f011358a:	83 c4 30             	add    $0x30,%esp
f011358d:	85 c0                	test   %eax,%eax
f011358f:	75 1e                	jne    f01135af <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113591:	83 ec 04             	sub    $0x4,%esp
f0113594:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113599:	68 20 04 00 00       	push   $0x420
f011359e:	68 3e 85 13 f0       	push   $0xf013853e
f01135a3:	e8 df cd fe ff       	call   f0100387 <_warn>
f01135a8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01135ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01135af:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01135b3:	74 04                	je     f01135b9 <test_share_chunk+0x5ee>
f01135b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01135b9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01135bd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135c0:	89 d0                	mov    %edx,%eax
f01135c2:	01 c0                	add    %eax,%eax
f01135c4:	01 d0                	add    %edx,%eax
f01135c6:	c1 e0 02             	shl    $0x2,%eax
f01135c9:	f7 d8                	neg    %eax
f01135cb:	05 00 00 0a 00       	add    $0xa0000,%eax
f01135d0:	83 ec 08             	sub    $0x8,%esp
f01135d3:	6a 02                	push   $0x2
f01135d5:	6a 07                	push   $0x7
f01135d7:	6a 03                	push   $0x3
f01135d9:	6a 07                	push   $0x7
f01135db:	6a 07                	push   $0x7
f01135dd:	6a 02                	push   $0x2
f01135df:	50                   	push   %eax
f01135e0:	68 00 30 00 00       	push   $0x3000
f01135e5:	68 00 30 00 40       	push   $0x40003000
f01135ea:	ff 75 cc             	pushl  -0x34(%ebp)
f01135ed:	e8 d7 24 00 00       	call   f0115ac9 <CCP>
f01135f2:	83 c4 30             	add    $0x30,%esp
f01135f5:	85 c0                	test   %eax,%eax
f01135f7:	75 1e                	jne    f0113617 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01135f9:	83 ec 04             	sub    $0x4,%esp
f01135fc:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113601:	68 28 04 00 00       	push   $0x428
f0113606:	68 3e 85 13 f0       	push   $0xf013853e
f011360b:	e8 77 cd fe ff       	call   f0100387 <_warn>
f0113610:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113613:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113617:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011361b:	74 04                	je     f0113621 <test_share_chunk+0x656>
f011361d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113621:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0113625:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113628:	c1 e0 02             	shl    $0x2,%eax
f011362b:	83 ec 08             	sub    $0x8,%esp
f011362e:	6a 02                	push   $0x2
f0113630:	6a 07                	push   $0x7
f0113632:	6a 03                	push   $0x3
f0113634:	6a 07                	push   $0x7
f0113636:	6a 07                	push   $0x7
f0113638:	6a 03                	push   $0x3
f011363a:	50                   	push   %eax
f011363b:	68 00 00 0a 00       	push   $0xa0000
f0113640:	68 00 00 0a 40       	push   $0x400a0000
f0113645:	ff 75 cc             	pushl  -0x34(%ebp)
f0113648:	e8 7c 24 00 00       	call   f0115ac9 <CCP>
f011364d:	83 c4 30             	add    $0x30,%esp
f0113650:	85 c0                	test   %eax,%eax
f0113652:	75 1e                	jne    f0113672 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113654:	83 ec 04             	sub    $0x4,%esp
f0113657:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011365c:	68 30 04 00 00       	push   $0x430
f0113661:	68 3e 85 13 f0       	push   $0xf013853e
f0113666:	e8 1c cd fe ff       	call   f0100387 <_warn>
f011366b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011366e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113672:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113676:	74 04                	je     f011367c <test_share_chunk+0x6b1>
f0113678:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011367c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113680:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0113684:	0f 84 92 00 00 00    	je     f011371c <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f011368a:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0113691:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0113698:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f011369f:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01136a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01136a9:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01136ac:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01136b3:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01136ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136bd:	8a 00                	mov    (%eax),%al
f01136bf:	3c 41                	cmp    $0x41,%al
f01136c1:	75 2d                	jne    f01136f0 <test_share_chunk+0x725>
f01136c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136c6:	8a 00                	mov    (%eax),%al
f01136c8:	3c 41                	cmp    $0x41,%al
f01136ca:	75 24                	jne    f01136f0 <test_share_chunk+0x725>
f01136cc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01136cf:	8a 00                	mov    (%eax),%al
f01136d1:	3c 41                	cmp    $0x41,%al
f01136d3:	75 1b                	jne    f01136f0 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01136d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01136d8:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01136da:	3c 44                	cmp    $0x44,%al
f01136dc:	75 12                	jne    f01136f0 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01136de:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01136e1:	8a 00                	mov    (%eax),%al
f01136e3:	3c 44                	cmp    $0x44,%al
f01136e5:	75 09                	jne    f01136f0 <test_share_chunk+0x725>
f01136e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01136ea:	8a 00                	mov    (%eax),%al
f01136ec:	3c 44                	cmp    $0x44,%al
f01136ee:	74 1e                	je     f011370e <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01136f0:	83 ec 04             	sub    $0x4,%esp
f01136f3:	68 54 9c 13 f0       	push   $0xf0139c54
f01136f8:	68 42 04 00 00       	push   $0x442
f01136fd:	68 3e 85 13 f0       	push   $0xf013853e
f0113702:	e8 80 cc fe ff       	call   f0100387 <_warn>
f0113707:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011370a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011370e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113712:	74 04                	je     f0113718 <test_share_chunk+0x74d>
f0113714:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113718:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011371c:	83 ec 0c             	sub    $0xc,%esp
f011371f:	68 c6 92 13 f0       	push   $0xf01392c6
f0113724:	e8 59 d5 fe ff       	call   f0100c82 <cprintf>
f0113729:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f011372c:	83 ec 0c             	sub    $0xc,%esp
f011372f:	68 60 9d 13 f0       	push   $0xf0139d60
f0113734:	e8 49 d5 fe ff       	call   f0100c82 <cprintf>
f0113739:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011373c:	e8 7e 91 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113741:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0113744:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113747:	89 d0                	mov    %edx,%eax
f0113749:	01 c0                	add    %eax,%eax
f011374b:	01 d0                	add    %edx,%eax
f011374d:	01 c0                	add    %eax,%eax
f011374f:	01 d0                	add    %edx,%eax
f0113751:	83 ec 0c             	sub    $0xc,%esp
f0113754:	6a 04                	push   $0x4
f0113756:	50                   	push   %eax
f0113757:	68 00 fc 3f 00       	push   $0x3ffc00
f011375c:	68 00 fc 09 00       	push   $0x9fc00
f0113761:	ff 75 cc             	pushl  -0x34(%ebp)
f0113764:	e8 19 52 ff ff       	call   f0108982 <share_chunk>
f0113769:	83 c4 20             	add    $0x20,%esp
f011376c:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011376f:	e8 4b 91 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113774:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0113777:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011377b:	75 0b                	jne    f0113788 <test_share_chunk+0x7bd>
f011377d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113780:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113783:	83 f8 01             	cmp    $0x1,%eax
f0113786:	74 28                	je     f01137b0 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113788:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011378b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011378e:	83 ec 0c             	sub    $0xc,%esp
f0113791:	50                   	push   %eax
f0113792:	ff 75 8c             	pushl  -0x74(%ebp)
f0113795:	68 d4 9c 13 f0       	push   $0xf0139cd4
f011379a:	68 58 04 00 00       	push   $0x458
f011379f:	68 3e 85 13 f0       	push   $0xf013853e
f01137a4:	e8 de cb fe ff       	call   f0100387 <_warn>
f01137a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01137b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137b4:	74 04                	je     f01137ba <test_share_chunk+0x7ef>
f01137b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01137be:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01137c5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01137c8:	89 d0                	mov    %edx,%eax
f01137ca:	01 c0                	add    %eax,%eax
f01137cc:	01 d0                	add    %edx,%eax
f01137ce:	c1 e0 02             	shl    $0x2,%eax
f01137d1:	83 ec 08             	sub    $0x8,%esp
f01137d4:	6a 02                	push   $0x2
f01137d6:	6a 07                	push   $0x7
f01137d8:	6a 07                	push   $0x7
f01137da:	6a 07                	push   $0x7
f01137dc:	6a 05                	push   $0x5
f01137de:	6a ff                	push   $0xffffffff
f01137e0:	50                   	push   %eax
f01137e1:	68 00 f0 3f 00       	push   $0x3ff000
f01137e6:	68 00 f0 09 00       	push   $0x9f000
f01137eb:	ff 75 cc             	pushl  -0x34(%ebp)
f01137ee:	e8 d6 22 00 00       	call   f0115ac9 <CCP>
f01137f3:	83 c4 30             	add    $0x30,%esp
f01137f6:	85 c0                	test   %eax,%eax
f01137f8:	75 25                	jne    f011381f <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01137fa:	83 ec 04             	sub    $0x4,%esp
f01137fd:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113802:	68 61 04 00 00       	push   $0x461
f0113807:	68 3e 85 13 f0       	push   $0xf013853e
f011380c:	e8 76 cb fe ff       	call   f0100387 <_warn>
f0113811:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113814:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113818:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f011381f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113823:	74 04                	je     f0113829 <test_share_chunk+0x85e>
f0113825:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113829:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011382d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113830:	c1 e0 02             	shl    $0x2,%eax
f0113833:	83 ec 08             	sub    $0x8,%esp
f0113836:	6a 02                	push   $0x2
f0113838:	6a 07                	push   $0x7
f011383a:	6a 07                	push   $0x7
f011383c:	6a 07                	push   $0x7
f011383e:	6a 05                	push   $0x5
f0113840:	6a 03                	push   $0x3
f0113842:	50                   	push   %eax
f0113843:	68 00 f0 3f 00       	push   $0x3ff000
f0113848:	68 00 f0 09 00       	push   $0x9f000
f011384d:	ff 75 cc             	pushl  -0x34(%ebp)
f0113850:	e8 74 22 00 00       	call   f0115ac9 <CCP>
f0113855:	83 c4 30             	add    $0x30,%esp
f0113858:	85 c0                	test   %eax,%eax
f011385a:	75 1e                	jne    f011387a <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011385c:	83 ec 04             	sub    $0x4,%esp
f011385f:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0113864:	68 6a 04 00 00       	push   $0x46a
f0113869:	68 3e 85 13 f0       	push   $0xf013853e
f011386e:	e8 14 cb fe ff       	call   f0100387 <_warn>
f0113873:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113876:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011387a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011387e:	74 04                	je     f0113884 <test_share_chunk+0x8b9>
f0113880:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113884:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0113888:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011388b:	c1 e0 03             	shl    $0x3,%eax
f011388e:	83 ec 08             	sub    $0x8,%esp
f0113891:	6a 02                	push   $0x2
f0113893:	6a 07                	push   $0x7
f0113895:	6a 07                	push   $0x7
f0113897:	6a 07                	push   $0x7
f0113899:	6a 05                	push   $0x5
f011389b:	6a 04                	push   $0x4
f011389d:	50                   	push   %eax
f011389e:	68 00 00 40 00       	push   $0x400000
f01138a3:	68 00 00 0a 00       	push   $0xa0000
f01138a8:	ff 75 cc             	pushl  -0x34(%ebp)
f01138ab:	e8 19 22 00 00       	call   f0115ac9 <CCP>
f01138b0:	83 c4 30             	add    $0x30,%esp
f01138b3:	85 c0                	test   %eax,%eax
f01138b5:	75 1e                	jne    f01138d5 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01138b7:	83 ec 04             	sub    $0x4,%esp
f01138ba:	68 0c 9c 13 f0       	push   $0xf0139c0c
f01138bf:	68 72 04 00 00       	push   $0x472
f01138c4:	68 3e 85 13 f0       	push   $0xf013853e
f01138c9:	e8 b9 ca fe ff       	call   f0100387 <_warn>
f01138ce:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138d1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01138d5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01138d9:	74 04                	je     f01138df <test_share_chunk+0x914>
f01138db:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138df:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01138e3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01138e7:	0f 84 b2 00 00 00    	je     f011399f <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f01138ed:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01138f4:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01138fb:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113902:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113909:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0113910:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113917:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f011391e:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113925:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113928:	8a 00                	mov    (%eax),%al
f011392a:	3c 44                	cmp    $0x44,%al
f011392c:	75 45                	jne    f0113973 <test_share_chunk+0x9a8>
f011392e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113931:	8a 00                	mov    (%eax),%al
f0113933:	3c 44                	cmp    $0x44,%al
f0113935:	75 3c                	jne    f0113973 <test_share_chunk+0x9a8>
f0113937:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011393a:	8a 00                	mov    (%eax),%al
f011393c:	3c 44                	cmp    $0x44,%al
f011393e:	75 33                	jne    f0113973 <test_share_chunk+0x9a8>
f0113940:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113943:	8a 00                	mov    (%eax),%al
f0113945:	3c 44                	cmp    $0x44,%al
f0113947:	75 2a                	jne    f0113973 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113949:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011394c:	8a 10                	mov    (%eax),%dl
f011394e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113951:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113953:	38 c2                	cmp    %al,%dl
f0113955:	75 1c                	jne    f0113973 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113957:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011395a:	8a 10                	mov    (%eax),%dl
f011395c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011395f:	8a 00                	mov    (%eax),%al
f0113961:	38 c2                	cmp    %al,%dl
f0113963:	75 0e                	jne    f0113973 <test_share_chunk+0x9a8>
f0113965:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113968:	8a 10                	mov    (%eax),%dl
f011396a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011396d:	8a 00                	mov    (%eax),%al
f011396f:	38 c2                	cmp    %al,%dl
f0113971:	74 1e                	je     f0113991 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113973:	83 ec 04             	sub    $0x4,%esp
f0113976:	68 54 9c 13 f0       	push   $0xf0139c54
f011397b:	68 87 04 00 00       	push   $0x487
f0113980:	68 3e 85 13 f0       	push   $0xf013853e
f0113985:	e8 fd c9 fe ff       	call   f0100387 <_warn>
f011398a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011398d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113991:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113995:	74 04                	je     f011399b <test_share_chunk+0x9d0>
f0113997:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011399b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f011399f:	83 ec 0c             	sub    $0xc,%esp
f01139a2:	68 98 9d 13 f0       	push   $0xf0139d98
f01139a7:	e8 d6 d2 fe ff       	call   f0100c82 <cprintf>
f01139ac:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01139af:	83 ec 08             	sub    $0x8,%esp
f01139b2:	ff 75 e4             	pushl  -0x1c(%ebp)
f01139b5:	68 a8 9d 13 f0       	push   $0xf0139da8
f01139ba:	e8 c3 d2 fe ff       	call   f0100c82 <cprintf>
f01139bf:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01139c2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01139c6:	75 10                	jne    f01139d8 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01139c8:	83 ec 0c             	sub    $0xc,%esp
f01139cb:	68 d8 9d 13 f0       	push   $0xf0139dd8
f01139d0:	e8 ad d2 fe ff       	call   f0100c82 <cprintf>
f01139d5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01139d8:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f01139dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01139e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01139e3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01139e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01139eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01139ee:	5b                   	pop    %ebx
f01139ef:	5e                   	pop    %esi
f01139f0:	5f                   	pop    %edi
f01139f1:	5d                   	pop    %ebp
f01139f2:	c3                   	ret    

f01139f3 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01139f3:	55                   	push   %ebp
f01139f4:	89 e5                	mov    %esp,%ebp
f01139f6:	57                   	push   %edi
f01139f7:	56                   	push   %esi
f01139f8:	53                   	push   %ebx
f01139f9:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01139ff:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113a05:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0113a0a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a0f:	89 c7                	mov    %eax,%edi
f0113a11:	89 de                	mov    %ebx,%esi
f0113a13:	89 d1                	mov    %edx,%ecx
f0113a15:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a17:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113a1d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113a22:	b0 00                	mov    $0x0,%al
f0113a24:	89 d7                	mov    %edx,%edi
f0113a26:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113a28:	6a 00                	push   $0x0
f0113a2a:	6a 0a                	push   $0xa
f0113a2c:	6a 14                	push   $0x14
f0113a2e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113a34:	50                   	push   %eax
f0113a35:	e8 26 52 ff ff       	call   f0108c60 <env_create>
f0113a3a:	83 c4 10             	add    $0x10,%esp
f0113a3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113a40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113a43:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113a46:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113a49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113a4c:	8b 40 60             	mov    0x60(%eax),%eax
f0113a4f:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113a52:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113a55:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113a58:	83 ec 0c             	sub    $0xc,%esp
f0113a5b:	ff 75 d0             	pushl  -0x30(%ebp)
f0113a5e:	e8 32 20 00 00       	call   f0115a95 <ClearUserSpace>
f0113a63:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113a66:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113a6d:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f0113a74:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113a7b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0113a7f:	83 ec 0c             	sub    $0xc,%esp
f0113a82:	68 14 9e 13 f0       	push   $0xf0139e14
f0113a87:	e8 f6 d1 fe ff       	call   f0100c82 <cprintf>
f0113a8c:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0113a8f:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0113a96:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0113a9d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113aa0:	8a 00                	mov    (%eax),%al
f0113aa2:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0113aa8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113aab:	8a 00                	mov    (%eax),%al
f0113aad:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0113ab3:	83 ec 08             	sub    $0x8,%esp
f0113ab6:	68 00 f0 bf ef       	push   $0xefbff000
f0113abb:	ff 75 d0             	pushl  -0x30(%ebp)
f0113abe:	e8 b3 1f 00 00       	call   f0115a76 <GP>
f0113ac3:	83 c4 10             	add    $0x10,%esp
f0113ac6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ac9:	e8 f1 8d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113ace:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113ad1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113ad4:	c1 e0 02             	shl    $0x2,%eax
f0113ad7:	6a 02                	push   $0x2
f0113ad9:	50                   	push   %eax
f0113ada:	68 00 f0 bf ef       	push   $0xefbff000
f0113adf:	ff 75 d0             	pushl  -0x30(%ebp)
f0113ae2:	e8 ae 4f ff ff       	call   f0108a95 <allocate_chunk>
f0113ae7:	83 c4 10             	add    $0x10,%esp
f0113aea:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113aed:	e8 cd 8d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113af2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113af5:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113af9:	75 08                	jne    f0113b03 <test_allocate_chunk+0x110>
f0113afb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113afe:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b01:	74 2a                	je     f0113b2d <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113b03:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b06:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b09:	83 ec 08             	sub    $0x8,%esp
f0113b0c:	6a 00                	push   $0x0
f0113b0e:	50                   	push   %eax
f0113b0f:	ff 75 b0             	pushl  -0x50(%ebp)
f0113b12:	68 40 9e 13 f0       	push   $0xf0139e40
f0113b17:	68 c3 04 00 00       	push   $0x4c3
f0113b1c:	68 3e 85 13 f0       	push   $0xf013853e
f0113b21:	e8 61 c8 fe ff       	call   f0100387 <_warn>
f0113b26:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b29:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113b2d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b31:	74 04                	je     f0113b37 <test_allocate_chunk+0x144>
f0113b33:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113b37:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b3b:	e8 7f 8d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113b40:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113b43:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113b46:	01 c0                	add    %eax,%eax
f0113b48:	89 c1                	mov    %eax,%ecx
f0113b4a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113b4d:	89 d0                	mov    %edx,%eax
f0113b4f:	c1 e0 02             	shl    $0x2,%eax
f0113b52:	01 d0                	add    %edx,%eax
f0113b54:	f7 d8                	neg    %eax
f0113b56:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0113b5b:	6a 02                	push   $0x2
f0113b5d:	51                   	push   %ecx
f0113b5e:	50                   	push   %eax
f0113b5f:	ff 75 d0             	pushl  -0x30(%ebp)
f0113b62:	e8 2e 4f ff ff       	call   f0108a95 <allocate_chunk>
f0113b67:	83 c4 10             	add    $0x10,%esp
f0113b6a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b6d:	e8 4d 8d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113b72:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113b75:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113b79:	75 08                	jne    f0113b83 <test_allocate_chunk+0x190>
f0113b7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b7e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113b81:	74 2a                	je     f0113bad <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113b83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b86:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113b89:	83 ec 08             	sub    $0x8,%esp
f0113b8c:	6a 00                	push   $0x0
f0113b8e:	50                   	push   %eax
f0113b8f:	ff 75 b0             	pushl  -0x50(%ebp)
f0113b92:	68 40 9e 13 f0       	push   $0xf0139e40
f0113b97:	68 d1 04 00 00       	push   $0x4d1
f0113b9c:	68 3e 85 13 f0       	push   $0xf013853e
f0113ba1:	e8 e1 c7 fe ff       	call   f0100387 <_warn>
f0113ba6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ba9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113bad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113bb1:	74 04                	je     f0113bb7 <test_allocate_chunk+0x1c4>
f0113bb3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113bb7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0113bbb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113bbe:	c1 e0 02             	shl    $0x2,%eax
f0113bc1:	83 ec 08             	sub    $0x8,%esp
f0113bc4:	6a 03                	push   $0x3
f0113bc6:	6a 00                	push   $0x0
f0113bc8:	6a 00                	push   $0x0
f0113bca:	68 ff 0f 00 00       	push   $0xfff
f0113bcf:	ff 75 b8             	pushl  -0x48(%ebp)
f0113bd2:	6a 01                	push   $0x1
f0113bd4:	50                   	push   %eax
f0113bd5:	68 00 f0 bf ef       	push   $0xefbff000
f0113bda:	6a 00                	push   $0x0
f0113bdc:	ff 75 d0             	pushl  -0x30(%ebp)
f0113bdf:	e8 e5 1e 00 00       	call   f0115ac9 <CCP>
f0113be4:	83 c4 30             	add    $0x30,%esp
f0113be7:	85 c0                	test   %eax,%eax
f0113be9:	75 1e                	jne    f0113c09 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113beb:	83 ec 04             	sub    $0x4,%esp
f0113bee:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113bf3:	68 d9 04 00 00       	push   $0x4d9
f0113bf8:	68 3e 85 13 f0       	push   $0xf013853e
f0113bfd:	e8 85 c7 fe ff       	call   f0100387 <_warn>
f0113c02:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c05:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c09:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c0d:	74 04                	je     f0113c13 <test_allocate_chunk+0x220>
f0113c0f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c13:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113c17:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113c1a:	8a 10                	mov    (%eax),%dl
f0113c1c:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113c22:	38 c2                	cmp    %al,%dl
f0113c24:	75 0f                	jne    f0113c35 <test_allocate_chunk+0x242>
f0113c26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c29:	8a 10                	mov    (%eax),%dl
f0113c2b:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113c31:	38 c2                	cmp    %al,%dl
f0113c33:	74 1e                	je     f0113c53 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113c35:	83 ec 04             	sub    $0x4,%esp
f0113c38:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0113c3d:	68 e1 04 00 00       	push   $0x4e1
f0113c42:	68 3e 85 13 f0       	push   $0xf013853e
f0113c47:	e8 3b c7 fe ff       	call   f0100387 <_warn>
f0113c4c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c4f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c53:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c57:	74 04                	je     f0113c5d <test_allocate_chunk+0x26a>
f0113c59:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c5d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113c61:	83 ec 0c             	sub    $0xc,%esp
f0113c64:	68 89 9c 13 f0       	push   $0xf0139c89
f0113c69:	e8 14 d0 fe ff       	call   f0100c82 <cprintf>
f0113c6e:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0113c71:	83 ec 0c             	sub    $0xc,%esp
f0113c74:	68 2c 9f 13 f0       	push   $0xf0139f2c
f0113c79:	e8 04 d0 fe ff       	call   f0100c82 <cprintf>
f0113c7e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c81:	e8 39 8c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113c86:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0113c89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c8c:	c1 e0 05             	shl    $0x5,%eax
f0113c8f:	68 02 0e 00 00       	push   $0xe02
f0113c94:	50                   	push   %eax
f0113c95:	6a 00                	push   $0x0
f0113c97:	ff 75 d0             	pushl  -0x30(%ebp)
f0113c9a:	e8 f6 4d ff ff       	call   f0108a95 <allocate_chunk>
f0113c9f:	83 c4 10             	add    $0x10,%esp
f0113ca2:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ca5:	e8 15 8c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113caa:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0113cad:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0113cb1:	75 36                	jne    f0113ce9 <test_allocate_chunk+0x2f6>
f0113cb3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113cb6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113cb9:	89 c1                	mov    %eax,%ecx
f0113cbb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cbe:	c1 e0 05             	shl    $0x5,%eax
f0113cc1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cc4:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ccb:	99                   	cltd   
f0113ccc:	f7 fe                	idiv   %esi
f0113cce:	89 c3                	mov    %eax,%ebx
f0113cd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cd3:	c1 e0 05             	shl    $0x5,%eax
f0113cd6:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113cd9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ce0:	99                   	cltd   
f0113ce1:	f7 fe                	idiv   %esi
f0113ce3:	01 d8                	add    %ebx,%eax
f0113ce5:	39 c1                	cmp    %eax,%ecx
f0113ce7:	74 54                	je     f0113d3d <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113ce9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113cec:	c1 e0 05             	shl    $0x5,%eax
f0113cef:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113cf2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113cf9:	99                   	cltd   
f0113cfa:	f7 ff                	idiv   %edi
f0113cfc:	89 c1                	mov    %eax,%ecx
f0113cfe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d01:	c1 e0 05             	shl    $0x5,%eax
f0113d04:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113d07:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113d0e:	99                   	cltd   
f0113d0f:	f7 fe                	idiv   %esi
f0113d11:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113d14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d17:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113d1a:	83 ec 08             	sub    $0x8,%esp
f0113d1d:	52                   	push   %edx
f0113d1e:	50                   	push   %eax
f0113d1f:	ff 75 a8             	pushl  -0x58(%ebp)
f0113d22:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0113d27:	68 f6 04 00 00       	push   $0x4f6
f0113d2c:	68 3e 85 13 f0       	push   $0xf013853e
f0113d31:	e8 51 c6 fe ff       	call   f0100387 <_warn>
f0113d36:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d39:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d3d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d41:	74 04                	je     f0113d47 <test_allocate_chunk+0x354>
f0113d43:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d47:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113d4b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113d52:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d55:	c1 e0 05             	shl    $0x5,%eax
f0113d58:	83 ec 08             	sub    $0x8,%esp
f0113d5b:	6a 03                	push   $0x3
f0113d5d:	6a 00                	push   $0x0
f0113d5f:	6a 00                	push   $0x0
f0113d61:	68 07 0e 00 00       	push   $0xe07
f0113d66:	68 03 0e 00 00       	push   $0xe03
f0113d6b:	6a 01                	push   $0x1
f0113d6d:	50                   	push   %eax
f0113d6e:	6a 00                	push   $0x0
f0113d70:	6a 00                	push   $0x0
f0113d72:	ff 75 d0             	pushl  -0x30(%ebp)
f0113d75:	e8 4f 1d 00 00       	call   f0115ac9 <CCP>
f0113d7a:	83 c4 30             	add    $0x30,%esp
f0113d7d:	85 c0                	test   %eax,%eax
f0113d7f:	75 25                	jne    f0113da6 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113d81:	83 ec 04             	sub    $0x4,%esp
f0113d84:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113d89:	68 ff 04 00 00       	push   $0x4ff
f0113d8e:	68 3e 85 13 f0       	push   $0xf013853e
f0113d93:	e8 ef c5 fe ff       	call   f0100387 <_warn>
f0113d98:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d9b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113d9f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113da6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113daa:	74 04                	je     f0113db0 <test_allocate_chunk+0x3bd>
f0113dac:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113db0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113db4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113db8:	74 5a                	je     f0113e14 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0113dba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113dbd:	01 c0                	add    %eax,%eax
f0113dbf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113dc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113dc5:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113dc8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113dcb:	01 c0                	add    %eax,%eax
f0113dcd:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113dd0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113dd3:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113dd6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113dd9:	8a 00                	mov    (%eax),%al
f0113ddb:	3c 4b                	cmp    $0x4b,%al
f0113ddd:	75 09                	jne    f0113de8 <test_allocate_chunk+0x3f5>
f0113ddf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113de2:	8a 00                	mov    (%eax),%al
f0113de4:	3c 4d                	cmp    $0x4d,%al
f0113de6:	74 1e                	je     f0113e06 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113de8:	83 ec 04             	sub    $0x4,%esp
f0113deb:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0113df0:	68 0d 05 00 00       	push   $0x50d
f0113df5:	68 3e 85 13 f0       	push   $0xf013853e
f0113dfa:	e8 88 c5 fe ff       	call   f0100387 <_warn>
f0113dff:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e02:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113e06:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e0a:	74 04                	je     f0113e10 <test_allocate_chunk+0x41d>
f0113e0c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e10:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113e14:	83 ec 0c             	sub    $0xc,%esp
f0113e17:	68 63 92 13 f0       	push   $0xf0139263
f0113e1c:	e8 61 ce fe ff       	call   f0100c82 <cprintf>
f0113e21:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113e24:	83 ec 0c             	sub    $0xc,%esp
f0113e27:	68 cc 9f 13 f0       	push   $0xf0139fcc
f0113e2c:	e8 51 ce fe ff       	call   f0100c82 <cprintf>
f0113e31:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e34:	e8 86 8a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113e39:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0113e3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e3f:	c1 e0 06             	shl    $0x6,%eax
f0113e42:	89 c2                	mov    %eax,%edx
f0113e44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e47:	c1 e0 05             	shl    $0x5,%eax
f0113e4a:	6a 00                	push   $0x0
f0113e4c:	52                   	push   %edx
f0113e4d:	50                   	push   %eax
f0113e4e:	ff 75 d0             	pushl  -0x30(%ebp)
f0113e51:	e8 3f 4c ff ff       	call   f0108a95 <allocate_chunk>
f0113e56:	83 c4 10             	add    $0x10,%esp
f0113e59:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e5c:	e8 5e 8a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113e61:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0113e64:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0113e68:	75 36                	jne    f0113ea0 <test_allocate_chunk+0x4ad>
f0113e6a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e6d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113e70:	89 c1                	mov    %eax,%ecx
f0113e72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e75:	c1 e0 06             	shl    $0x6,%eax
f0113e78:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113e7b:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113e82:	99                   	cltd   
f0113e83:	f7 ff                	idiv   %edi
f0113e85:	89 c3                	mov    %eax,%ebx
f0113e87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e8a:	c1 e0 06             	shl    $0x6,%eax
f0113e8d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113e90:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113e97:	99                   	cltd   
f0113e98:	f7 fe                	idiv   %esi
f0113e9a:	01 d8                	add    %ebx,%eax
f0113e9c:	39 c1                	cmp    %eax,%ecx
f0113e9e:	74 54                	je     f0113ef4 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0113ea0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ea3:	c1 e0 06             	shl    $0x6,%eax
f0113ea6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ea9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113eb0:	99                   	cltd   
f0113eb1:	f7 fb                	idiv   %ebx
f0113eb3:	89 c1                	mov    %eax,%ecx
f0113eb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113eb8:	c1 e0 06             	shl    $0x6,%eax
f0113ebb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113ebe:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113ec5:	99                   	cltd   
f0113ec6:	f7 ff                	idiv   %edi
f0113ec8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113ecb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ece:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113ed1:	83 ec 08             	sub    $0x8,%esp
f0113ed4:	52                   	push   %edx
f0113ed5:	50                   	push   %eax
f0113ed6:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113ed9:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0113ede:	68 23 05 00 00       	push   $0x523
f0113ee3:	68 3e 85 13 f0       	push   $0xf013853e
f0113ee8:	e8 9a c4 fe ff       	call   f0100387 <_warn>
f0113eed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ef0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113ef4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ef8:	74 04                	je     f0113efe <test_allocate_chunk+0x50b>
f0113efa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113efe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113f02:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113f09:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f0c:	c1 e0 06             	shl    $0x6,%eax
f0113f0f:	89 c2                	mov    %eax,%edx
f0113f11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f14:	c1 e0 05             	shl    $0x5,%eax
f0113f17:	83 ec 08             	sub    $0x8,%esp
f0113f1a:	6a 03                	push   $0x3
f0113f1c:	6a 00                	push   $0x0
f0113f1e:	6a 00                	push   $0x0
f0113f20:	68 07 0e 00 00       	push   $0xe07
f0113f25:	6a 01                	push   $0x1
f0113f27:	6a 01                	push   $0x1
f0113f29:	52                   	push   %edx
f0113f2a:	50                   	push   %eax
f0113f2b:	6a 00                	push   $0x0
f0113f2d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113f30:	e8 94 1b 00 00       	call   f0115ac9 <CCP>
f0113f35:	83 c4 30             	add    $0x30,%esp
f0113f38:	85 c0                	test   %eax,%eax
f0113f3a:	75 25                	jne    f0113f61 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0113f3c:	83 ec 04             	sub    $0x4,%esp
f0113f3f:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0113f44:	68 2c 05 00 00       	push   $0x52c
f0113f49:	68 3e 85 13 f0       	push   $0xf013853e
f0113f4e:	e8 34 c4 fe ff       	call   f0100387 <_warn>
f0113f53:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f56:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113f5a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0113f61:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f65:	74 04                	je     f0113f6b <test_allocate_chunk+0x578>
f0113f67:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f6b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0113f6f:	83 ec 0c             	sub    $0xc,%esp
f0113f72:	68 c6 92 13 f0       	push   $0xf01392c6
f0113f77:	e8 06 cd fe ff       	call   f0100c82 <cprintf>
f0113f7c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0113f7f:	83 ec 0c             	sub    $0xc,%esp
f0113f82:	68 0c a0 13 f0       	push   $0xf013a00c
f0113f87:	e8 f6 cc fe ff       	call   f0100c82 <cprintf>
f0113f8c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f8f:	e8 2b 89 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113f94:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0113f97:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f9a:	c1 e0 06             	shl    $0x6,%eax
f0113f9d:	68 06 0e 00 00       	push   $0xe06
f0113fa2:	50                   	push   %eax
f0113fa3:	68 00 00 00 80       	push   $0x80000000
f0113fa8:	ff 75 d0             	pushl  -0x30(%ebp)
f0113fab:	e8 e5 4a ff ff       	call   f0108a95 <allocate_chunk>
f0113fb0:	83 c4 10             	add    $0x10,%esp
f0113fb3:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113fb6:	e8 04 89 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0113fbb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0113fbe:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0113fc2:	75 36                	jne    f0113ffa <test_allocate_chunk+0x607>
f0113fc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fc7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113fca:	89 c1                	mov    %eax,%ecx
f0113fcc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fcf:	c1 e0 06             	shl    $0x6,%eax
f0113fd2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113fd5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113fdc:	99                   	cltd   
f0113fdd:	f7 fb                	idiv   %ebx
f0113fdf:	89 c3                	mov    %eax,%ebx
f0113fe1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fe4:	c1 e0 06             	shl    $0x6,%eax
f0113fe7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113fea:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113ff1:	99                   	cltd   
f0113ff2:	f7 fe                	idiv   %esi
f0113ff4:	01 d8                	add    %ebx,%eax
f0113ff6:	39 c1                	cmp    %eax,%ecx
f0113ff8:	74 54                	je     f011404e <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113ffa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ffd:	c1 e0 06             	shl    $0x6,%eax
f0114000:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114003:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011400a:	99                   	cltd   
f011400b:	f7 ff                	idiv   %edi
f011400d:	89 c1                	mov    %eax,%ecx
f011400f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114012:	c1 e0 06             	shl    $0x6,%eax
f0114015:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114018:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011401f:	99                   	cltd   
f0114020:	f7 fb                	idiv   %ebx
f0114022:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114025:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114028:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011402b:	83 ec 08             	sub    $0x8,%esp
f011402e:	52                   	push   %edx
f011402f:	50                   	push   %eax
f0114030:	ff 75 9c             	pushl  -0x64(%ebp)
f0114033:	68 6c 9f 13 f0       	push   $0xf0139f6c
f0114038:	68 42 05 00 00       	push   $0x542
f011403d:	68 3e 85 13 f0       	push   $0xf013853e
f0114042:	e8 40 c3 fe ff       	call   f0100387 <_warn>
f0114047:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011404a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011404e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114052:	74 04                	je     f0114058 <test_allocate_chunk+0x665>
f0114054:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114058:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011405c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114063:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114066:	c1 e0 06             	shl    $0x6,%eax
f0114069:	83 ec 08             	sub    $0x8,%esp
f011406c:	6a 03                	push   $0x3
f011406e:	6a 00                	push   $0x0
f0114070:	6a 00                	push   $0x0
f0114072:	68 07 0e 00 00       	push   $0xe07
f0114077:	68 07 0e 00 00       	push   $0xe07
f011407c:	6a 01                	push   $0x1
f011407e:	50                   	push   %eax
f011407f:	68 00 00 00 80       	push   $0x80000000
f0114084:	6a 00                	push   $0x0
f0114086:	ff 75 d0             	pushl  -0x30(%ebp)
f0114089:	e8 3b 1a 00 00       	call   f0115ac9 <CCP>
f011408e:	83 c4 30             	add    $0x30,%esp
f0114091:	85 c0                	test   %eax,%eax
f0114093:	75 25                	jne    f01140ba <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114095:	83 ec 04             	sub    $0x4,%esp
f0114098:	68 a8 9e 13 f0       	push   $0xf0139ea8
f011409d:	68 4b 05 00 00       	push   $0x54b
f01140a2:	68 3e 85 13 f0       	push   $0xf013853e
f01140a7:	e8 db c2 fe ff       	call   f0100387 <_warn>
f01140ac:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140b3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01140ba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140be:	74 04                	je     f01140c4 <test_allocate_chunk+0x6d1>
f01140c0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01140c4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01140c8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01140cc:	74 6f                	je     f011413d <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f01140ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01140d1:	01 c0                	add    %eax,%eax
f01140d3:	05 00 00 00 80       	add    $0x80000000,%eax
f01140d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01140db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140de:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f01140e1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140e4:	89 d0                	mov    %edx,%eax
f01140e6:	c1 e0 02             	shl    $0x2,%eax
f01140e9:	01 d0                	add    %edx,%eax
f01140eb:	01 c0                	add    %eax,%eax
f01140ed:	01 d0                	add    %edx,%eax
f01140ef:	01 c0                	add    %eax,%eax
f01140f1:	05 00 00 00 80       	add    $0x80000000,%eax
f01140f6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01140f9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140fc:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01140ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114102:	8a 00                	mov    (%eax),%al
f0114104:	3c 4b                	cmp    $0x4b,%al
f0114106:	75 09                	jne    f0114111 <test_allocate_chunk+0x71e>
f0114108:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011410b:	8a 00                	mov    (%eax),%al
f011410d:	3c 4d                	cmp    $0x4d,%al
f011410f:	74 1e                	je     f011412f <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114111:	83 ec 04             	sub    $0x4,%esp
f0114114:	68 f4 9e 13 f0       	push   $0xf0139ef4
f0114119:	68 59 05 00 00       	push   $0x559
f011411e:	68 3e 85 13 f0       	push   $0xf013853e
f0114123:	e8 5f c2 fe ff       	call   f0100387 <_warn>
f0114128:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011412b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011412f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114133:	74 04                	je     f0114139 <test_allocate_chunk+0x746>
f0114135:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114139:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011413d:	83 ec 0c             	sub    $0xc,%esp
f0114140:	68 98 9d 13 f0       	push   $0xf0139d98
f0114145:	e8 38 cb fe ff       	call   f0100c82 <cprintf>
f011414a:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011414d:	83 ec 0c             	sub    $0xc,%esp
f0114150:	68 48 a0 13 f0       	push   $0xf013a048
f0114155:	e8 28 cb fe ff       	call   f0100c82 <cprintf>
f011415a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011415d:	e8 5d 87 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0114162:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114165:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114168:	89 d0                	mov    %edx,%eax
f011416a:	01 c0                	add    %eax,%eax
f011416c:	01 d0                	add    %edx,%eax
f011416e:	01 c0                	add    %eax,%eax
f0114170:	01 d0                	add    %edx,%eax
f0114172:	68 04 0e 00 00       	push   $0xe04
f0114177:	50                   	push   %eax
f0114178:	68 00 fc 3f 40       	push   $0x403ffc00
f011417d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114180:	e8 10 49 ff ff       	call   f0108a95 <allocate_chunk>
f0114185:	83 c4 10             	add    $0x10,%esp
f0114188:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011418b:	e8 2f 87 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0114190:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114193:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114197:	75 0b                	jne    f01141a4 <test_allocate_chunk+0x7b1>
f0114199:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011419c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011419f:	83 f8 05             	cmp    $0x5,%eax
f01141a2:	74 2a                	je     f01141ce <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01141a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01141a7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01141aa:	83 ec 08             	sub    $0x8,%esp
f01141ad:	6a 05                	push   $0x5
f01141af:	50                   	push   %eax
f01141b0:	ff 75 98             	pushl  -0x68(%ebp)
f01141b3:	68 6c 9f 13 f0       	push   $0xf0139f6c
f01141b8:	68 70 05 00 00       	push   $0x570
f01141bd:	68 3e 85 13 f0       	push   $0xf013853e
f01141c2:	e8 c0 c1 fe ff       	call   f0100387 <_warn>
f01141c7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141ce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141d2:	74 04                	je     f01141d8 <test_allocate_chunk+0x7e5>
f01141d4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141d8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01141dc:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01141e3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01141e6:	89 d0                	mov    %edx,%eax
f01141e8:	01 c0                	add    %eax,%eax
f01141ea:	01 d0                	add    %edx,%eax
f01141ec:	c1 e0 02             	shl    $0x2,%eax
f01141ef:	83 ec 08             	sub    $0x8,%esp
f01141f2:	6a 03                	push   $0x3
f01141f4:	6a 00                	push   $0x0
f01141f6:	6a 00                	push   $0x0
f01141f8:	68 07 0e 00 00       	push   $0xe07
f01141fd:	68 05 0e 00 00       	push   $0xe05
f0114202:	6a 01                	push   $0x1
f0114204:	50                   	push   %eax
f0114205:	68 00 f0 3f 40       	push   $0x403ff000
f011420a:	6a 00                	push   $0x0
f011420c:	ff 75 d0             	pushl  -0x30(%ebp)
f011420f:	e8 b5 18 00 00       	call   f0115ac9 <CCP>
f0114214:	83 c4 30             	add    $0x30,%esp
f0114217:	85 c0                	test   %eax,%eax
f0114219:	75 25                	jne    f0114240 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011421b:	83 ec 04             	sub    $0x4,%esp
f011421e:	68 a8 9e 13 f0       	push   $0xf0139ea8
f0114223:	68 79 05 00 00       	push   $0x579
f0114228:	68 3e 85 13 f0       	push   $0xf013853e
f011422d:	e8 55 c1 fe ff       	call   f0100387 <_warn>
f0114232:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114235:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114239:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0114240:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114244:	74 04                	je     f011424a <test_allocate_chunk+0x857>
f0114246:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011424a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011424e:	83 ec 0c             	sub    $0xc,%esp
f0114251:	68 7f a0 13 f0       	push   $0xf013a07f
f0114256:	e8 27 ca fe ff       	call   f0100c82 <cprintf>
f011425b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011425e:	83 ec 08             	sub    $0x8,%esp
f0114261:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114264:	68 90 a0 13 f0       	push   $0xf013a090
f0114269:	e8 14 ca fe ff       	call   f0100c82 <cprintf>
f011426e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114271:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114275:	75 10                	jne    f0114287 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0114277:	83 ec 0c             	sub    $0xc,%esp
f011427a:	68 c4 a0 13 f0       	push   $0xf013a0c4
f011427f:	e8 fe c9 fe ff       	call   f0100c82 <cprintf>
f0114284:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114287:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f011428c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011428f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114292:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114295:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011429a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011429d:	5b                   	pop    %ebx
f011429e:	5e                   	pop    %esi
f011429f:	5f                   	pop    %edi
f01142a0:	5d                   	pop    %ebp
f01142a1:	c3                   	ret    

f01142a2 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01142a2:	55                   	push   %ebp
f01142a3:	89 e5                	mov    %esp,%ebp
f01142a5:	57                   	push   %edi
f01142a6:	56                   	push   %esi
f01142a7:	53                   	push   %ebx
f01142a8:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01142ae:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01142b1:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f01142b6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01142bb:	89 c7                	mov    %eax,%edi
f01142bd:	89 de                	mov    %ebx,%esi
f01142bf:	89 d1                	mov    %edx,%ecx
f01142c1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01142c3:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01142c6:	b9 23 00 00 00       	mov    $0x23,%ecx
f01142cb:	b0 00                	mov    $0x0,%al
f01142cd:	89 d7                	mov    %edx,%edi
f01142cf:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01142d1:	6a 00                	push   $0x0
f01142d3:	6a 0a                	push   $0xa
f01142d5:	6a 14                	push   $0x14
f01142d7:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01142da:	50                   	push   %eax
f01142db:	e8 80 49 ff ff       	call   f0108c60 <env_create>
f01142e0:	83 c4 10             	add    $0x10,%esp
f01142e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01142e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142e9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01142ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01142ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142f2:	8b 40 60             	mov    0x60(%eax),%eax
f01142f5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01142f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142fb:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01142fe:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114305:	75 70 20 
f0114308:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011430f:	00 00 00 
f0114312:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114315:	b9 03 00 00 00       	mov    $0x3,%ecx
f011431a:	b8 00 00 00 00       	mov    $0x0,%eax
f011431f:	89 d7                	mov    %edx,%edi
f0114321:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114323:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114326:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114329:	83 ec 08             	sub    $0x8,%esp
f011432c:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114332:	52                   	push   %edx
f0114333:	50                   	push   %eax
f0114334:	e8 5b cd 01 00       	call   f0131094 <ltostr>
f0114339:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011433c:	83 ec 04             	sub    $0x4,%esp
f011433f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114345:	50                   	push   %eax
f0114346:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011434c:	50                   	push   %eax
f011434d:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114353:	50                   	push   %eax
f0114354:	e8 33 ce 01 00       	call   f013118c <strcconcat>
f0114359:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011435c:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114363:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011436a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0114371:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0114378:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f011437c:	83 ec 0c             	sub    $0xc,%esp
f011437f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114382:	e8 0e 17 00 00       	call   f0115a95 <ClearUserSpace>
f0114387:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011438a:	83 ec 0c             	sub    $0xc,%esp
f011438d:	68 04 a1 13 f0       	push   $0xf013a104
f0114392:	e8 eb c8 fe ff       	call   f0100c82 <cprintf>
f0114397:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011439a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011439d:	c1 e0 03             	shl    $0x3,%eax
f01143a0:	83 ec 04             	sub    $0x4,%esp
f01143a3:	50                   	push   %eax
f01143a4:	6a 00                	push   $0x0
f01143a6:	ff 75 d8             	pushl  -0x28(%ebp)
f01143a9:	e8 21 48 ff ff       	call   f0108bcf <calculate_required_frames>
f01143ae:	83 c4 10             	add    $0x10,%esp
f01143b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01143b4:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01143b8:	74 23                	je     f01143dd <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01143ba:	83 ec 0c             	sub    $0xc,%esp
f01143bd:	6a 03                	push   $0x3
f01143bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01143c2:	68 38 a1 13 f0       	push   $0xf013a138
f01143c7:	68 b2 05 00 00       	push   $0x5b2
f01143cc:	68 3e 85 13 f0       	push   $0xf013853e
f01143d1:	e8 b1 bf fe ff       	call   f0100387 <_warn>
f01143d6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143e1:	74 04                	je     f01143e7 <test_calculate_required_frames+0x145>
f01143e3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f01143eb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01143ee:	c1 e0 02             	shl    $0x2,%eax
f01143f1:	83 ec 04             	sub    $0x4,%esp
f01143f4:	50                   	push   %eax
f01143f5:	6a 00                	push   $0x0
f01143f7:	ff 75 d8             	pushl  -0x28(%ebp)
f01143fa:	e8 d0 47 ff ff       	call   f0108bcf <calculate_required_frames>
f01143ff:	83 c4 10             	add    $0x10,%esp
f0114402:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0114405:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f011440c:	74 26                	je     f0114434 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f011440e:	83 ec 0c             	sub    $0xc,%esp
f0114411:	68 01 04 00 00       	push   $0x401
f0114416:	ff 75 c8             	pushl  -0x38(%ebp)
f0114419:	68 38 a1 13 f0       	push   $0xf013a138
f011441e:	68 bc 05 00 00       	push   $0x5bc
f0114423:	68 3e 85 13 f0       	push   $0xf013853e
f0114428:	e8 5a bf fe ff       	call   f0100387 <_warn>
f011442d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114430:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114434:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114438:	74 04                	je     f011443e <test_calculate_required_frames+0x19c>
f011443a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011443e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114442:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114445:	c1 e0 0a             	shl    $0xa,%eax
f0114448:	83 ec 04             	sub    $0x4,%esp
f011444b:	50                   	push   %eax
f011444c:	6a 00                	push   $0x0
f011444e:	ff 75 d8             	pushl  -0x28(%ebp)
f0114451:	e8 79 47 ff ff       	call   f0108bcf <calculate_required_frames>
f0114456:	83 c4 10             	add    $0x10,%esp
f0114459:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f011445c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011445f:	c1 e0 0a             	shl    $0xa,%eax
f0114462:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114465:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011446c:	99                   	cltd   
f011446d:	f7 fb                	idiv   %ebx
f011446f:	89 c1                	mov    %eax,%ecx
f0114471:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114474:	c1 e0 0a             	shl    $0xa,%eax
f0114477:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011447a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114481:	99                   	cltd   
f0114482:	f7 fe                	idiv   %esi
f0114484:	01 c8                	add    %ecx,%eax
f0114486:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114489:	74 4c                	je     f01144d7 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f011448b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011448e:	c1 e0 0a             	shl    $0xa,%eax
f0114491:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114494:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011449b:	99                   	cltd   
f011449c:	f7 fb                	idiv   %ebx
f011449e:	89 c1                	mov    %eax,%ecx
f01144a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01144a3:	c1 e0 0a             	shl    $0xa,%eax
f01144a6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01144a9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01144b0:	99                   	cltd   
f01144b1:	f7 fe                	idiv   %esi
f01144b3:	01 c8                	add    %ecx,%eax
f01144b5:	83 ec 0c             	sub    $0xc,%esp
f01144b8:	50                   	push   %eax
f01144b9:	ff 75 c8             	pushl  -0x38(%ebp)
f01144bc:	68 38 a1 13 f0       	push   $0xf013a138
f01144c1:	68 c6 05 00 00       	push   $0x5c6
f01144c6:	68 3e 85 13 f0       	push   $0xf013853e
f01144cb:	e8 b7 be fe ff       	call   f0100387 <_warn>
f01144d0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01144d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144d7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144db:	74 04                	je     f01144e1 <test_calculate_required_frames+0x23f>
f01144dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144e1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01144e5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01144e8:	89 d0                	mov    %edx,%eax
f01144ea:	01 c0                	add    %eax,%eax
f01144ec:	01 d0                	add    %edx,%eax
f01144ee:	01 c0                	add    %eax,%eax
f01144f0:	83 ec 04             	sub    $0x4,%esp
f01144f3:	50                   	push   %eax
f01144f4:	68 00 10 00 00       	push   $0x1000
f01144f9:	ff 75 d8             	pushl  -0x28(%ebp)
f01144fc:	e8 ce 46 ff ff       	call   f0108bcf <calculate_required_frames>
f0114501:	83 c4 10             	add    $0x10,%esp
f0114504:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0114507:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011450b:	74 23                	je     f0114530 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011450d:	83 ec 0c             	sub    $0xc,%esp
f0114510:	6a 03                	push   $0x3
f0114512:	ff 75 c8             	pushl  -0x38(%ebp)
f0114515:	68 38 a1 13 f0       	push   $0xf013a138
f011451a:	68 d2 05 00 00       	push   $0x5d2
f011451f:	68 3e 85 13 f0       	push   $0xf013853e
f0114524:	e8 5e be fe ff       	call   f0100387 <_warn>
f0114529:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011452c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114530:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114534:	74 04                	je     f011453a <test_calculate_required_frames+0x298>
f0114536:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011453a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011453e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114541:	89 c2                	mov    %eax,%edx
f0114543:	01 d2                	add    %edx,%edx
f0114545:	01 d0                	add    %edx,%eax
f0114547:	83 ec 04             	sub    $0x4,%esp
f011454a:	50                   	push   %eax
f011454b:	68 00 18 00 00       	push   $0x1800
f0114550:	ff 75 d8             	pushl  -0x28(%ebp)
f0114553:	e8 77 46 ff ff       	call   f0108bcf <calculate_required_frames>
f0114558:	83 c4 10             	add    $0x10,%esp
f011455b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011455e:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0114562:	74 23                	je     f0114587 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0114564:	83 ec 0c             	sub    $0xc,%esp
f0114567:	6a 03                	push   $0x3
f0114569:	ff 75 c8             	pushl  -0x38(%ebp)
f011456c:	68 38 a1 13 f0       	push   $0xf013a138
f0114571:	68 dc 05 00 00       	push   $0x5dc
f0114576:	68 3e 85 13 f0       	push   $0xf013853e
f011457b:	e8 07 be fe ff       	call   f0100387 <_warn>
f0114580:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114583:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114587:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011458b:	74 04                	je     f0114591 <test_calculate_required_frames+0x2ef>
f011458d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114591:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114595:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114598:	89 d0                	mov    %edx,%eax
f011459a:	c1 e0 02             	shl    $0x2,%eax
f011459d:	01 d0                	add    %edx,%eax
f011459f:	01 c0                	add    %eax,%eax
f01145a1:	83 ec 04             	sub    $0x4,%esp
f01145a4:	50                   	push   %eax
f01145a5:	68 00 00 40 00       	push   $0x400000
f01145aa:	ff 75 d8             	pushl  -0x28(%ebp)
f01145ad:	e8 1d 46 ff ff       	call   f0108bcf <calculate_required_frames>
f01145b2:	83 c4 10             	add    $0x10,%esp
f01145b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01145b8:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01145bf:	74 26                	je     f01145e7 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01145c1:	83 ec 0c             	sub    $0xc,%esp
f01145c4:	68 03 0a 00 00       	push   $0xa03
f01145c9:	ff 75 c8             	pushl  -0x38(%ebp)
f01145cc:	68 38 a1 13 f0       	push   $0xf013a138
f01145d1:	68 e6 05 00 00       	push   $0x5e6
f01145d6:	68 3e 85 13 f0       	push   $0xf013853e
f01145db:	e8 a7 bd fe ff       	call   f0100387 <_warn>
f01145e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145e7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145eb:	74 04                	je     f01145f1 <test_calculate_required_frames+0x34f>
f01145ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01145f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01145f8:	01 c0                	add    %eax,%eax
f01145fa:	83 ec 04             	sub    $0x4,%esp
f01145fd:	50                   	push   %eax
f01145fe:	68 00 00 70 00       	push   $0x700000
f0114603:	ff 75 d8             	pushl  -0x28(%ebp)
f0114606:	e8 c4 45 ff ff       	call   f0108bcf <calculate_required_frames>
f011460b:	83 c4 10             	add    $0x10,%esp
f011460e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0114611:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0114618:	74 26                	je     f0114640 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f011461a:	83 ec 0c             	sub    $0xc,%esp
f011461d:	68 02 02 00 00       	push   $0x202
f0114622:	ff 75 c8             	pushl  -0x38(%ebp)
f0114625:	68 38 a1 13 f0       	push   $0xf013a138
f011462a:	68 f2 05 00 00       	push   $0x5f2
f011462f:	68 3e 85 13 f0       	push   $0xf013853e
f0114634:	e8 4e bd fe ff       	call   f0100387 <_warn>
f0114639:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011463c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114640:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114644:	74 04                	je     f011464a <test_calculate_required_frames+0x3a8>
f0114646:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011464a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011464e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114651:	83 ec 04             	sub    $0x4,%esp
f0114654:	50                   	push   %eax
f0114655:	68 ff ff 3f 00       	push   $0x3fffff
f011465a:	ff 75 d8             	pushl  -0x28(%ebp)
f011465d:	e8 6d 45 ff ff       	call   f0108bcf <calculate_required_frames>
f0114662:	83 c4 10             	add    $0x10,%esp
f0114665:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0114668:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011466c:	74 23                	je     f0114691 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011466e:	83 ec 0c             	sub    $0xc,%esp
f0114671:	6a 04                	push   $0x4
f0114673:	ff 75 c8             	pushl  -0x38(%ebp)
f0114676:	68 38 a1 13 f0       	push   $0xf013a138
f011467b:	68 fc 05 00 00       	push   $0x5fc
f0114680:	68 3e 85 13 f0       	push   $0xf013853e
f0114685:	e8 fd bc fe ff       	call   f0100387 <_warn>
f011468a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011468d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114691:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114695:	74 04                	je     f011469b <test_calculate_required_frames+0x3f9>
f0114697:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011469b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011469f:	83 ec 0c             	sub    $0xc,%esp
f01146a2:	68 89 9c 13 f0       	push   $0xf0139c89
f01146a7:	e8 d6 c5 fe ff       	call   f0100c82 <cprintf>
f01146ac:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01146af:	83 ec 0c             	sub    $0xc,%esp
f01146b2:	68 90 a1 13 f0       	push   $0xf013a190
f01146b7:	e8 c6 c5 fe ff       	call   f0100c82 <cprintf>
f01146bc:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01146bf:	83 ec 04             	sub    $0x4,%esp
f01146c2:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01146c8:	50                   	push   %eax
f01146c9:	68 42 90 13 f0       	push   $0xf0139042
f01146ce:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01146d4:	50                   	push   %eax
f01146d5:	e8 b2 ca 01 00       	call   f013118c <strcconcat>
f01146da:	83 c4 10             	add    $0x10,%esp
f01146dd:	83 ec 0c             	sub    $0xc,%esp
f01146e0:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01146e6:	50                   	push   %eax
f01146e7:	e8 f8 c5 fe ff       	call   f0100ce4 <execute_command>
f01146ec:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01146ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01146f2:	c1 e0 03             	shl    $0x3,%eax
f01146f5:	83 ec 04             	sub    $0x4,%esp
f01146f8:	50                   	push   %eax
f01146f9:	6a 00                	push   $0x0
f01146fb:	ff 75 d8             	pushl  -0x28(%ebp)
f01146fe:	e8 cc 44 ff ff       	call   f0108bcf <calculate_required_frames>
f0114703:	83 c4 10             	add    $0x10,%esp
f0114706:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114709:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0114710:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114713:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114716:	74 24                	je     f011473c <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114718:	83 ec 0c             	sub    $0xc,%esp
f011471b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011471e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114721:	68 38 a1 13 f0       	push   $0xf013a138
f0114726:	68 10 06 00 00       	push   $0x610
f011472b:	68 3e 85 13 f0       	push   $0xf013853e
f0114730:	e8 52 bc fe ff       	call   f0100387 <_warn>
f0114735:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114738:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011473c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114740:	74 04                	je     f0114746 <test_calculate_required_frames+0x4a4>
f0114742:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114746:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011474a:	83 ec 04             	sub    $0x4,%esp
f011474d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114753:	50                   	push   %eax
f0114754:	68 4f 90 13 f0       	push   $0xf013904f
f0114759:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011475f:	50                   	push   %eax
f0114760:	e8 27 ca 01 00       	call   f013118c <strcconcat>
f0114765:	83 c4 10             	add    $0x10,%esp
f0114768:	83 ec 0c             	sub    $0xc,%esp
f011476b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114771:	50                   	push   %eax
f0114772:	e8 6d c5 fe ff       	call   f0100ce4 <execute_command>
f0114777:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011477a:	83 ec 04             	sub    $0x4,%esp
f011477d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114783:	50                   	push   %eax
f0114784:	68 c4 a1 13 f0       	push   $0xf013a1c4
f0114789:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011478f:	50                   	push   %eax
f0114790:	e8 f7 c9 01 00       	call   f013118c <strcconcat>
f0114795:	83 c4 10             	add    $0x10,%esp
f0114798:	83 ec 0c             	sub    $0xc,%esp
f011479b:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01147a1:	50                   	push   %eax
f01147a2:	e8 3d c5 fe ff       	call   f0100ce4 <execute_command>
f01147a7:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01147aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01147ad:	c1 e0 03             	shl    $0x3,%eax
f01147b0:	83 ec 04             	sub    $0x4,%esp
f01147b3:	50                   	push   %eax
f01147b4:	6a 00                	push   $0x0
f01147b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01147b9:	e8 11 44 ff ff       	call   f0108bcf <calculate_required_frames>
f01147be:	83 c4 10             	add    $0x10,%esp
f01147c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01147c4:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01147cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147ce:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01147d1:	74 24                	je     f01147f7 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01147d3:	83 ec 0c             	sub    $0xc,%esp
f01147d6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01147d9:	ff 75 c8             	pushl  -0x38(%ebp)
f01147dc:	68 38 a1 13 f0       	push   $0xf013a138
f01147e1:	68 1e 06 00 00       	push   $0x61e
f01147e6:	68 3e 85 13 f0       	push   $0xf013853e
f01147eb:	e8 97 bb fe ff       	call   f0100387 <_warn>
f01147f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147fb:	74 04                	je     f0114801 <test_calculate_required_frames+0x55f>
f01147fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114801:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0114805:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114808:	c1 e0 0a             	shl    $0xa,%eax
f011480b:	83 ec 04             	sub    $0x4,%esp
f011480e:	50                   	push   %eax
f011480f:	6a 00                	push   $0x0
f0114811:	ff 75 d8             	pushl  -0x28(%ebp)
f0114814:	e8 b6 43 ff ff       	call   f0108bcf <calculate_required_frames>
f0114819:	83 c4 10             	add    $0x10,%esp
f011481c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f011481f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114822:	c1 e0 0a             	shl    $0xa,%eax
f0114825:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114828:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011482f:	99                   	cltd   
f0114830:	f7 fb                	idiv   %ebx
f0114832:	89 c1                	mov    %eax,%ecx
f0114834:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114837:	c1 e0 0a             	shl    $0xa,%eax
f011483a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011483d:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114844:	99                   	cltd   
f0114845:	f7 fe                	idiv   %esi
f0114847:	01 c8                	add    %ecx,%eax
f0114849:	83 e8 05             	sub    $0x5,%eax
f011484c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f011484f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114852:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114855:	74 24                	je     f011487b <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114857:	83 ec 0c             	sub    $0xc,%esp
f011485a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011485d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114860:	68 38 a1 13 f0       	push   $0xf013a138
f0114865:	68 29 06 00 00       	push   $0x629
f011486a:	68 3e 85 13 f0       	push   $0xf013853e
f011486f:	e8 13 bb fe ff       	call   f0100387 <_warn>
f0114874:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114877:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011487b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011487f:	74 04                	je     f0114885 <test_calculate_required_frames+0x5e3>
f0114881:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114885:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114889:	83 ec 04             	sub    $0x4,%esp
f011488c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114892:	50                   	push   %eax
f0114893:	68 d0 a1 13 f0       	push   $0xf013a1d0
f0114898:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011489e:	50                   	push   %eax
f011489f:	e8 e8 c8 01 00       	call   f013118c <strcconcat>
f01148a4:	83 c4 10             	add    $0x10,%esp
f01148a7:	83 ec 0c             	sub    $0xc,%esp
f01148aa:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01148b0:	50                   	push   %eax
f01148b1:	e8 2e c4 fe ff       	call   f0100ce4 <execute_command>
f01148b6:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01148b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01148bc:	89 c2                	mov    %eax,%edx
f01148be:	01 d2                	add    %edx,%edx
f01148c0:	01 d0                	add    %edx,%eax
f01148c2:	83 ec 04             	sub    $0x4,%esp
f01148c5:	50                   	push   %eax
f01148c6:	68 00 18 00 00       	push   $0x1800
f01148cb:	ff 75 d8             	pushl  -0x28(%ebp)
f01148ce:	e8 fc 42 ff ff       	call   f0108bcf <calculate_required_frames>
f01148d3:	83 c4 10             	add    $0x10,%esp
f01148d6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01148d9:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01148e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148e3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01148e6:	74 24                	je     f011490c <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01148e8:	83 ec 0c             	sub    $0xc,%esp
f01148eb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01148ee:	ff 75 c8             	pushl  -0x38(%ebp)
f01148f1:	68 38 a1 13 f0       	push   $0xf013a138
f01148f6:	68 38 06 00 00       	push   $0x638
f01148fb:	68 3e 85 13 f0       	push   $0xf013853e
f0114900:	e8 82 ba fe ff       	call   f0100387 <_warn>
f0114905:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114908:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011490c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114910:	74 04                	je     f0114916 <test_calculate_required_frames+0x674>
f0114912:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114916:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011491a:	83 ec 04             	sub    $0x4,%esp
f011491d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114923:	50                   	push   %eax
f0114924:	68 a8 92 13 f0       	push   $0xf01392a8
f0114929:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011492f:	50                   	push   %eax
f0114930:	e8 57 c8 01 00       	call   f013118c <strcconcat>
f0114935:	83 c4 10             	add    $0x10,%esp
f0114938:	83 ec 0c             	sub    $0xc,%esp
f011493b:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114941:	50                   	push   %eax
f0114942:	e8 9d c3 fe ff       	call   f0100ce4 <execute_command>
f0114947:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011494a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011494d:	89 d0                	mov    %edx,%eax
f011494f:	c1 e0 02             	shl    $0x2,%eax
f0114952:	01 d0                	add    %edx,%eax
f0114954:	01 c0                	add    %eax,%eax
f0114956:	83 ec 04             	sub    $0x4,%esp
f0114959:	50                   	push   %eax
f011495a:	68 00 00 40 00       	push   $0x400000
f011495f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114962:	e8 68 42 ff ff       	call   f0108bcf <calculate_required_frames>
f0114967:	83 c4 10             	add    $0x10,%esp
f011496a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011496d:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0114974:	74 26                	je     f011499c <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0114976:	83 ec 0c             	sub    $0xc,%esp
f0114979:	68 03 0a 00 00       	push   $0xa03
f011497e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114981:	68 38 a1 13 f0       	push   $0xf013a138
f0114986:	68 44 06 00 00       	push   $0x644
f011498b:	68 3e 85 13 f0       	push   $0xf013853e
f0114990:	e8 f2 b9 fe ff       	call   f0100387 <_warn>
f0114995:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114998:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011499c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149a0:	74 04                	je     f01149a6 <test_calculate_required_frames+0x704>
f01149a2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149a6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01149aa:	83 ec 04             	sub    $0x4,%esp
f01149ad:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01149b3:	50                   	push   %eax
f01149b4:	68 b2 92 13 f0       	push   $0xf01392b2
f01149b9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149bf:	50                   	push   %eax
f01149c0:	e8 c7 c7 01 00       	call   f013118c <strcconcat>
f01149c5:	83 c4 10             	add    $0x10,%esp
f01149c8:	83 ec 0c             	sub    $0xc,%esp
f01149cb:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01149d1:	50                   	push   %eax
f01149d2:	e8 0d c3 fe ff       	call   f0100ce4 <execute_command>
f01149d7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01149da:	83 ec 04             	sub    $0x4,%esp
f01149dd:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01149e3:	50                   	push   %eax
f01149e4:	68 d8 a1 13 f0       	push   $0xf013a1d8
f01149e9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149ef:	50                   	push   %eax
f01149f0:	e8 97 c7 01 00       	call   f013118c <strcconcat>
f01149f5:	83 c4 10             	add    $0x10,%esp
f01149f8:	83 ec 0c             	sub    $0xc,%esp
f01149fb:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114a01:	50                   	push   %eax
f0114a02:	e8 dd c2 fe ff       	call   f0100ce4 <execute_command>
f0114a07:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114a0a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a0d:	01 c0                	add    %eax,%eax
f0114a0f:	83 ec 04             	sub    $0x4,%esp
f0114a12:	50                   	push   %eax
f0114a13:	68 00 00 70 00       	push   $0x700000
f0114a18:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a1b:	e8 af 41 ff ff       	call   f0108bcf <calculate_required_frames>
f0114a20:	83 c4 10             	add    $0x10,%esp
f0114a23:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114a26:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0114a2d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a30:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a33:	74 24                	je     f0114a59 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114a35:	83 ec 0c             	sub    $0xc,%esp
f0114a38:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a3b:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a3e:	68 38 a1 13 f0       	push   $0xf013a138
f0114a43:	68 54 06 00 00       	push   $0x654
f0114a48:	68 3e 85 13 f0       	push   $0xf013853e
f0114a4d:	e8 35 b9 fe ff       	call   f0100387 <_warn>
f0114a52:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a55:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114a59:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a5d:	74 04                	je     f0114a63 <test_calculate_required_frames+0x7c1>
f0114a5f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a63:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0114a67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a6a:	83 ec 04             	sub    $0x4,%esp
f0114a6d:	50                   	push   %eax
f0114a6e:	68 ff ff 3f 00       	push   $0x3fffff
f0114a73:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a76:	e8 54 41 ff ff       	call   f0108bcf <calculate_required_frames>
f0114a7b:	83 c4 10             	add    $0x10,%esp
f0114a7e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0114a81:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0114a88:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a8b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114a8e:	74 24                	je     f0114ab4 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114a90:	83 ec 0c             	sub    $0xc,%esp
f0114a93:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114a96:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a99:	68 38 a1 13 f0       	push   $0xf013a138
f0114a9e:	68 5f 06 00 00       	push   $0x65f
f0114aa3:	68 3e 85 13 f0       	push   $0xf013853e
f0114aa8:	e8 da b8 fe ff       	call   f0100387 <_warn>
f0114aad:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ab0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ab4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ab8:	74 04                	je     f0114abe <test_calculate_required_frames+0x81c>
f0114aba:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114abe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114ac2:	83 ec 0c             	sub    $0xc,%esp
f0114ac5:	68 63 92 13 f0       	push   $0xf0139263
f0114aca:	e8 b3 c1 fe ff       	call   f0100c82 <cprintf>
f0114acf:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114ad2:	83 ec 08             	sub    $0x8,%esp
f0114ad5:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114ad8:	68 e4 a1 13 f0       	push   $0xf013a1e4
f0114add:	e8 a0 c1 fe ff       	call   f0100c82 <cprintf>
f0114ae2:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114ae5:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114ae9:	75 10                	jne    f0114afb <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0114aeb:	83 ec 0c             	sub    $0xc,%esp
f0114aee:	68 24 a2 13 f0       	push   $0xf013a224
f0114af3:	e8 8a c1 fe ff       	call   f0100c82 <cprintf>
f0114af8:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114afb:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f0114b00:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114b03:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114b06:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114b09:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114b0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114b11:	5b                   	pop    %ebx
f0114b12:	5e                   	pop    %esi
f0114b13:	5f                   	pop    %edi
f0114b14:	5d                   	pop    %ebp
f0114b15:	c3                   	ret    

f0114b16 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114b16:	55                   	push   %ebp
f0114b17:	89 e5                	mov    %esp,%ebp
f0114b19:	57                   	push   %edi
f0114b1a:	56                   	push   %esi
f0114b1b:	53                   	push   %ebx
f0114b1c:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114b22:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b25:	bb d8 8f 13 f0       	mov    $0xf0138fd8,%ebx
f0114b2a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b2f:	89 c7                	mov    %eax,%edi
f0114b31:	89 de                	mov    %ebx,%esi
f0114b33:	89 d1                	mov    %edx,%ecx
f0114b35:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b37:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114b3a:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114b3f:	b0 00                	mov    $0x0,%al
f0114b41:	89 d7                	mov    %edx,%edi
f0114b43:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114b45:	6a 00                	push   $0x0
f0114b47:	6a 0a                	push   $0xa
f0114b49:	6a 14                	push   $0x14
f0114b4b:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114b4e:	50                   	push   %eax
f0114b4f:	e8 0c 41 ff ff       	call   f0108c60 <env_create>
f0114b54:	83 c4 10             	add    $0x10,%esp
f0114b57:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114b5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b5d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0114b60:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0114b63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b66:	8b 40 60             	mov    0x60(%eax),%eax
f0114b69:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114b6c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b6f:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114b72:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0114b79:	75 70 20 
f0114b7c:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0114b83:	00 00 00 
f0114b86:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0114b89:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114b8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0114b93:	89 d7                	mov    %edx,%edi
f0114b95:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114b97:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114b9a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0114b9d:	83 ec 08             	sub    $0x8,%esp
f0114ba0:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0114ba6:	52                   	push   %edx
f0114ba7:	50                   	push   %eax
f0114ba8:	e8 e7 c4 01 00       	call   f0131094 <ltostr>
f0114bad:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114bb0:	83 ec 04             	sub    $0x4,%esp
f0114bb3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114bb9:	50                   	push   %eax
f0114bba:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0114bc0:	50                   	push   %eax
f0114bc1:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114bc7:	50                   	push   %eax
f0114bc8:	e8 bf c5 01 00       	call   f013118c <strcconcat>
f0114bcd:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114bd0:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114bd7:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0114bde:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114be5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114be9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bf0:	00 00 00 
	uint32 num_tables = 0;
f0114bf3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114bfa:	00 00 00 
	ClearUserSpace(proc_directory);
f0114bfd:	83 ec 0c             	sub    $0xc,%esp
f0114c00:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c03:	e8 8d 0e 00 00       	call   f0115a95 <ClearUserSpace>
f0114c08:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0114c0b:	83 ec 0c             	sub    $0xc,%esp
f0114c0e:	68 04 a1 13 f0       	push   $0xf013a104
f0114c13:	e8 6a c0 fe ff       	call   f0100c82 <cprintf>
f0114c18:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114c1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114c1e:	c1 e0 03             	shl    $0x3,%eax
f0114c21:	89 c2                	mov    %eax,%edx
f0114c23:	83 ec 0c             	sub    $0xc,%esp
f0114c26:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114c2c:	50                   	push   %eax
f0114c2d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114c33:	50                   	push   %eax
f0114c34:	52                   	push   %edx
f0114c35:	6a 00                	push   $0x0
f0114c37:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c3a:	e8 73 3f ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114c3f:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114c42:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c48:	85 c0                	test   %eax,%eax
f0114c4a:	74 27                	je     f0114c73 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114c4c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c52:	83 ec 0c             	sub    $0xc,%esp
f0114c55:	6a 00                	push   $0x0
f0114c57:	50                   	push   %eax
f0114c58:	68 70 a2 13 f0       	push   $0xf013a270
f0114c5d:	68 94 06 00 00       	push   $0x694
f0114c62:	68 3e 85 13 f0       	push   $0xf013853e
f0114c67:	e8 1b b7 fe ff       	call   f0100387 <_warn>
f0114c6c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c6f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114c73:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c79:	85 c0                	test   %eax,%eax
f0114c7b:	74 27                	je     f0114ca4 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114c7d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c83:	83 ec 0c             	sub    $0xc,%esp
f0114c86:	6a 00                	push   $0x0
f0114c88:	50                   	push   %eax
f0114c89:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114c8e:	68 99 06 00 00       	push   $0x699
f0114c93:	68 3e 85 13 f0       	push   $0xf013853e
f0114c98:	e8 ea b6 fe ff       	call   f0100387 <_warn>
f0114c9d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ca0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ca4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ca8:	74 04                	je     f0114cae <test_calculate_allocated_space+0x198>
f0114caa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114cae:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0114cb2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114cb9:	00 00 00 
		num_pages = 0;
f0114cbc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114cc3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114cc6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114cc9:	c1 e0 02             	shl    $0x2,%eax
f0114ccc:	89 c2                	mov    %eax,%edx
f0114cce:	83 ec 0c             	sub    $0xc,%esp
f0114cd1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114cd7:	50                   	push   %eax
f0114cd8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114cde:	50                   	push   %eax
f0114cdf:	52                   	push   %edx
f0114ce0:	6a 00                	push   $0x0
f0114ce2:	ff 75 d8             	pushl  -0x28(%ebp)
f0114ce5:	e8 c8 3e ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114cea:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114ced:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114cf3:	85 c0                	test   %eax,%eax
f0114cf5:	74 27                	je     f0114d1e <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114cf7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114cfd:	83 ec 0c             	sub    $0xc,%esp
f0114d00:	6a 00                	push   $0x0
f0114d02:	50                   	push   %eax
f0114d03:	68 70 a2 13 f0       	push   $0xf013a270
f0114d08:	68 a5 06 00 00       	push   $0x6a5
f0114d0d:	68 3e 85 13 f0       	push   $0xf013853e
f0114d12:	e8 70 b6 fe ff       	call   f0100387 <_warn>
f0114d17:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d1a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114d1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d24:	85 c0                	test   %eax,%eax
f0114d26:	74 27                	je     f0114d4f <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114d28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d2e:	83 ec 0c             	sub    $0xc,%esp
f0114d31:	6a 00                	push   $0x0
f0114d33:	50                   	push   %eax
f0114d34:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114d39:	68 aa 06 00 00       	push   $0x6aa
f0114d3e:	68 3e 85 13 f0       	push   $0xf013853e
f0114d43:	e8 3f b6 fe ff       	call   f0100387 <_warn>
f0114d48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d4f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d53:	74 04                	je     f0114d59 <test_calculate_allocated_space+0x243>
f0114d55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d59:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114d5d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114d64:	00 00 00 
		num_pages = 0;
f0114d67:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114d6e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114d71:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114d74:	c1 e0 0a             	shl    $0xa,%eax
f0114d77:	89 c2                	mov    %eax,%edx
f0114d79:	83 ec 0c             	sub    $0xc,%esp
f0114d7c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d82:	50                   	push   %eax
f0114d83:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d89:	50                   	push   %eax
f0114d8a:	52                   	push   %edx
f0114d8b:	6a 00                	push   $0x0
f0114d8d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d90:	e8 1d 3e ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114d95:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114d98:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d9e:	85 c0                	test   %eax,%eax
f0114da0:	74 27                	je     f0114dc9 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114da2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114da8:	83 ec 0c             	sub    $0xc,%esp
f0114dab:	6a 00                	push   $0x0
f0114dad:	50                   	push   %eax
f0114dae:	68 70 a2 13 f0       	push   $0xf013a270
f0114db3:	68 b6 06 00 00       	push   $0x6b6
f0114db8:	68 3e 85 13 f0       	push   $0xf013853e
f0114dbd:	e8 c5 b5 fe ff       	call   f0100387 <_warn>
f0114dc2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114dc5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114dc9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dcf:	85 c0                	test   %eax,%eax
f0114dd1:	74 27                	je     f0114dfa <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114dd3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114dd9:	83 ec 0c             	sub    $0xc,%esp
f0114ddc:	6a 00                	push   $0x0
f0114dde:	50                   	push   %eax
f0114ddf:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114de4:	68 bb 06 00 00       	push   $0x6bb
f0114de9:	68 3e 85 13 f0       	push   $0xf013853e
f0114dee:	e8 94 b5 fe ff       	call   f0100387 <_warn>
f0114df3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114df6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114dfa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dfe:	74 04                	je     f0114e04 <test_calculate_allocated_space+0x2ee>
f0114e00:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e04:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114e08:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e0f:	00 00 00 
		num_pages = 0;
f0114e12:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e19:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0114e1c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0114e1f:	89 d0                	mov    %edx,%eax
f0114e21:	01 c0                	add    %eax,%eax
f0114e23:	01 d0                	add    %edx,%eax
f0114e25:	01 c0                	add    %eax,%eax
f0114e27:	05 00 10 00 00       	add    $0x1000,%eax
f0114e2c:	89 c2                	mov    %eax,%edx
f0114e2e:	83 ec 0c             	sub    $0xc,%esp
f0114e31:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e37:	50                   	push   %eax
f0114e38:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e3e:	50                   	push   %eax
f0114e3f:	52                   	push   %edx
f0114e40:	68 00 10 00 00       	push   $0x1000
f0114e45:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e48:	e8 65 3d ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114e4d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114e50:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e56:	85 c0                	test   %eax,%eax
f0114e58:	74 27                	je     f0114e81 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114e5a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e60:	83 ec 0c             	sub    $0xc,%esp
f0114e63:	6a 00                	push   $0x0
f0114e65:	50                   	push   %eax
f0114e66:	68 70 a2 13 f0       	push   $0xf013a270
f0114e6b:	68 c8 06 00 00       	push   $0x6c8
f0114e70:	68 3e 85 13 f0       	push   $0xf013853e
f0114e75:	e8 0d b5 fe ff       	call   f0100387 <_warn>
f0114e7a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e7d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114e81:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e87:	85 c0                	test   %eax,%eax
f0114e89:	74 27                	je     f0114eb2 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114e8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e91:	83 ec 0c             	sub    $0xc,%esp
f0114e94:	6a 00                	push   $0x0
f0114e96:	50                   	push   %eax
f0114e97:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114e9c:	68 cd 06 00 00       	push   $0x6cd
f0114ea1:	68 3e 85 13 f0       	push   $0xf013853e
f0114ea6:	e8 dc b4 fe ff       	call   f0100387 <_warn>
f0114eab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114eae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114eb2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114eb6:	74 04                	je     f0114ebc <test_calculate_allocated_space+0x3a6>
f0114eb8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ebc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0114ec0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ec7:	00 00 00 
		num_pages = 0;
f0114eca:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114ed1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114ed4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ed7:	89 c2                	mov    %eax,%edx
f0114ed9:	01 d2                	add    %edx,%edx
f0114edb:	01 d0                	add    %edx,%eax
f0114edd:	05 00 18 00 00       	add    $0x1800,%eax
f0114ee2:	89 c2                	mov    %eax,%edx
f0114ee4:	83 ec 0c             	sub    $0xc,%esp
f0114ee7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114eed:	50                   	push   %eax
f0114eee:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114ef4:	50                   	push   %eax
f0114ef5:	52                   	push   %edx
f0114ef6:	68 00 18 00 00       	push   $0x1800
f0114efb:	ff 75 d8             	pushl  -0x28(%ebp)
f0114efe:	e8 af 3c ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114f03:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114f06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f0c:	85 c0                	test   %eax,%eax
f0114f0e:	74 27                	je     f0114f37 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114f10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f16:	83 ec 0c             	sub    $0xc,%esp
f0114f19:	6a 00                	push   $0x0
f0114f1b:	50                   	push   %eax
f0114f1c:	68 70 a2 13 f0       	push   $0xf013a270
f0114f21:	68 d9 06 00 00       	push   $0x6d9
f0114f26:	68 3e 85 13 f0       	push   $0xf013853e
f0114f2b:	e8 57 b4 fe ff       	call   f0100387 <_warn>
f0114f30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114f37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f3d:	85 c0                	test   %eax,%eax
f0114f3f:	74 27                	je     f0114f68 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114f41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f47:	83 ec 0c             	sub    $0xc,%esp
f0114f4a:	6a 00                	push   $0x0
f0114f4c:	50                   	push   %eax
f0114f4d:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0114f52:	68 de 06 00 00       	push   $0x6de
f0114f57:	68 3e 85 13 f0       	push   $0xf013853e
f0114f5c:	e8 26 b4 fe ff       	call   f0100387 <_warn>
f0114f61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114f68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f6c:	74 04                	je     f0114f72 <test_calculate_allocated_space+0x45c>
f0114f6e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114f72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0114f76:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114f7d:	00 00 00 
		num_pages = 0;
f0114f80:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114f87:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114f8a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114f8d:	89 d0                	mov    %edx,%eax
f0114f8f:	c1 e0 02             	shl    $0x2,%eax
f0114f92:	01 d0                	add    %edx,%eax
f0114f94:	01 c0                	add    %eax,%eax
f0114f96:	05 00 00 40 00       	add    $0x400000,%eax
f0114f9b:	89 c2                	mov    %eax,%edx
f0114f9d:	83 ec 0c             	sub    $0xc,%esp
f0114fa0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114fa6:	50                   	push   %eax
f0114fa7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114fad:	50                   	push   %eax
f0114fae:	52                   	push   %edx
f0114faf:	68 00 00 40 00       	push   $0x400000
f0114fb4:	ff 75 d8             	pushl  -0x28(%ebp)
f0114fb7:	e8 f6 3b ff ff       	call   f0108bb2 <calculate_allocated_space>
f0114fbc:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114fbf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fc5:	85 c0                	test   %eax,%eax
f0114fc7:	74 27                	je     f0114ff0 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114fc9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114fcf:	83 ec 0c             	sub    $0xc,%esp
f0114fd2:	6a 00                	push   $0x0
f0114fd4:	50                   	push   %eax
f0114fd5:	68 70 a2 13 f0       	push   $0xf013a270
f0114fda:	68 ea 06 00 00       	push   $0x6ea
f0114fdf:	68 3e 85 13 f0       	push   $0xf013853e
f0114fe4:	e8 9e b3 fe ff       	call   f0100387 <_warn>
f0114fe9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fec:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114ff0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114ff6:	85 c0                	test   %eax,%eax
f0114ff8:	74 27                	je     f0115021 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114ffa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115000:	83 ec 0c             	sub    $0xc,%esp
f0115003:	6a 00                	push   $0x0
f0115005:	50                   	push   %eax
f0115006:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011500b:	68 ef 06 00 00       	push   $0x6ef
f0115010:	68 3e 85 13 f0       	push   $0xf013853e
f0115015:	e8 6d b3 fe ff       	call   f0100387 <_warn>
f011501a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011501d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115021:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115025:	74 04                	je     f011502b <test_calculate_allocated_space+0x515>
f0115027:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011502b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011502f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115036:	00 00 00 
		num_pages = 0;
f0115039:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115040:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115043:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115046:	05 00 00 38 00       	add    $0x380000,%eax
f011504b:	01 c0                	add    %eax,%eax
f011504d:	89 c2                	mov    %eax,%edx
f011504f:	83 ec 0c             	sub    $0xc,%esp
f0115052:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115058:	50                   	push   %eax
f0115059:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011505f:	50                   	push   %eax
f0115060:	52                   	push   %edx
f0115061:	68 00 00 70 00       	push   $0x700000
f0115066:	ff 75 d8             	pushl  -0x28(%ebp)
f0115069:	e8 44 3b ff ff       	call   f0108bb2 <calculate_allocated_space>
f011506e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115071:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115077:	85 c0                	test   %eax,%eax
f0115079:	74 27                	je     f01150a2 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011507b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115081:	83 ec 0c             	sub    $0xc,%esp
f0115084:	6a 00                	push   $0x0
f0115086:	50                   	push   %eax
f0115087:	68 70 a2 13 f0       	push   $0xf013a270
f011508c:	68 fc 06 00 00       	push   $0x6fc
f0115091:	68 3e 85 13 f0       	push   $0xf013853e
f0115096:	e8 ec b2 fe ff       	call   f0100387 <_warn>
f011509b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011509e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01150a2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150a8:	85 c0                	test   %eax,%eax
f01150aa:	74 27                	je     f01150d3 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01150ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01150b2:	83 ec 0c             	sub    $0xc,%esp
f01150b5:	6a 00                	push   $0x0
f01150b7:	50                   	push   %eax
f01150b8:	68 d0 a2 13 f0       	push   $0xf013a2d0
f01150bd:	68 01 07 00 00       	push   $0x701
f01150c2:	68 3e 85 13 f0       	push   $0xf013853e
f01150c7:	e8 bb b2 fe ff       	call   f0100387 <_warn>
f01150cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150cf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01150d3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150d7:	74 04                	je     f01150dd <test_calculate_allocated_space+0x5c7>
f01150d9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01150dd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f01150e1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01150e8:	00 00 00 
		num_pages = 0;
f01150eb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01150f2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01150f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01150f8:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01150fd:	89 c2                	mov    %eax,%edx
f01150ff:	83 ec 0c             	sub    $0xc,%esp
f0115102:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115108:	50                   	push   %eax
f0115109:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011510f:	50                   	push   %eax
f0115110:	52                   	push   %edx
f0115111:	68 ff ff 3f 00       	push   $0x3fffff
f0115116:	ff 75 d8             	pushl  -0x28(%ebp)
f0115119:	e8 94 3a ff ff       	call   f0108bb2 <calculate_allocated_space>
f011511e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115121:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115127:	85 c0                	test   %eax,%eax
f0115129:	74 27                	je     f0115152 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011512b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115131:	83 ec 0c             	sub    $0xc,%esp
f0115134:	6a 00                	push   $0x0
f0115136:	50                   	push   %eax
f0115137:	68 70 a2 13 f0       	push   $0xf013a270
f011513c:	68 0d 07 00 00       	push   $0x70d
f0115141:	68 3e 85 13 f0       	push   $0xf013853e
f0115146:	e8 3c b2 fe ff       	call   f0100387 <_warn>
f011514b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011514e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115152:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115158:	85 c0                	test   %eax,%eax
f011515a:	74 27                	je     f0115183 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011515c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115162:	83 ec 0c             	sub    $0xc,%esp
f0115165:	6a 00                	push   $0x0
f0115167:	50                   	push   %eax
f0115168:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011516d:	68 12 07 00 00       	push   $0x712
f0115172:	68 3e 85 13 f0       	push   $0xf013853e
f0115177:	e8 0b b2 fe ff       	call   f0100387 <_warn>
f011517c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011517f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115183:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115187:	74 04                	je     f011518d <test_calculate_allocated_space+0x677>
f0115189:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011518d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115191:	83 ec 0c             	sub    $0xc,%esp
f0115194:	68 89 9c 13 f0       	push   $0xf0139c89
f0115199:	e8 e4 ba fe ff       	call   f0100c82 <cprintf>
f011519e:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01151a1:	83 ec 0c             	sub    $0xc,%esp
f01151a4:	68 90 a1 13 f0       	push   $0xf013a190
f01151a9:	e8 d4 ba fe ff       	call   f0100c82 <cprintf>
f01151ae:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01151b1:	83 ec 04             	sub    $0x4,%esp
f01151b4:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01151ba:	50                   	push   %eax
f01151bb:	68 42 90 13 f0       	push   $0xf0139042
f01151c0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151c6:	50                   	push   %eax
f01151c7:	e8 c0 bf 01 00       	call   f013118c <strcconcat>
f01151cc:	83 c4 10             	add    $0x10,%esp
f01151cf:	83 ec 0c             	sub    $0xc,%esp
f01151d2:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01151d8:	50                   	push   %eax
f01151d9:	e8 06 bb fe ff       	call   f0100ce4 <execute_command>
f01151de:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f01151e1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01151e8:	00 00 00 
		num_pages = 0;
f01151eb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01151f2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01151f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151f8:	c1 e0 03             	shl    $0x3,%eax
f01151fb:	89 c2                	mov    %eax,%edx
f01151fd:	83 ec 0c             	sub    $0xc,%esp
f0115200:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115206:	50                   	push   %eax
f0115207:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011520d:	50                   	push   %eax
f011520e:	52                   	push   %edx
f011520f:	6a 00                	push   $0x0
f0115211:	ff 75 d8             	pushl  -0x28(%ebp)
f0115214:	e8 99 39 ff ff       	call   f0108bb2 <calculate_allocated_space>
f0115219:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011521c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0115223:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011522a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115230:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115233:	74 28                	je     f011525d <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115235:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011523b:	83 ec 0c             	sub    $0xc,%esp
f011523e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115241:	50                   	push   %eax
f0115242:	68 70 a2 13 f0       	push   $0xf013a270
f0115247:	68 29 07 00 00       	push   $0x729
f011524c:	68 3e 85 13 f0       	push   $0xf013853e
f0115251:	e8 31 b1 fe ff       	call   f0100387 <_warn>
f0115256:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115259:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011525d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115263:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115266:	74 28                	je     f0115290 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115268:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011526e:	83 ec 0c             	sub    $0xc,%esp
f0115271:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115274:	50                   	push   %eax
f0115275:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011527a:	68 2e 07 00 00       	push   $0x72e
f011527f:	68 3e 85 13 f0       	push   $0xf013853e
f0115284:	e8 fe b0 fe ff       	call   f0100387 <_warn>
f0115289:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011528c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115290:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115294:	74 04                	je     f011529a <test_calculate_allocated_space+0x784>
f0115296:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011529a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011529e:	83 ec 04             	sub    $0x4,%esp
f01152a1:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01152a7:	50                   	push   %eax
f01152a8:	68 4f 90 13 f0       	push   $0xf013904f
f01152ad:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152b3:	50                   	push   %eax
f01152b4:	e8 d3 be 01 00       	call   f013118c <strcconcat>
f01152b9:	83 c4 10             	add    $0x10,%esp
f01152bc:	83 ec 0c             	sub    $0xc,%esp
f01152bf:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01152c5:	50                   	push   %eax
f01152c6:	e8 19 ba fe ff       	call   f0100ce4 <execute_command>
f01152cb:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01152ce:	83 ec 04             	sub    $0x4,%esp
f01152d1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01152d7:	50                   	push   %eax
f01152d8:	68 c4 a1 13 f0       	push   $0xf013a1c4
f01152dd:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01152e3:	50                   	push   %eax
f01152e4:	e8 a3 be 01 00       	call   f013118c <strcconcat>
f01152e9:	83 c4 10             	add    $0x10,%esp
f01152ec:	83 ec 0c             	sub    $0xc,%esp
f01152ef:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01152f5:	50                   	push   %eax
f01152f6:	e8 e9 b9 fe ff       	call   f0100ce4 <execute_command>
f01152fb:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f01152fe:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115305:	00 00 00 
		num_pages = 0;
f0115308:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011530f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0115312:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115315:	c1 e0 03             	shl    $0x3,%eax
f0115318:	89 c2                	mov    %eax,%edx
f011531a:	83 ec 0c             	sub    $0xc,%esp
f011531d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115323:	50                   	push   %eax
f0115324:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011532a:	50                   	push   %eax
f011532b:	52                   	push   %edx
f011532c:	6a 00                	push   $0x0
f011532e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115331:	e8 7c 38 ff ff       	call   f0108bb2 <calculate_allocated_space>
f0115336:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0115339:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0115340:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115347:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011534d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115350:	74 28                	je     f011537a <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115352:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115358:	83 ec 0c             	sub    $0xc,%esp
f011535b:	ff 75 c8             	pushl  -0x38(%ebp)
f011535e:	50                   	push   %eax
f011535f:	68 70 a2 13 f0       	push   $0xf013a270
f0115364:	68 3f 07 00 00       	push   $0x73f
f0115369:	68 3e 85 13 f0       	push   $0xf013853e
f011536e:	e8 14 b0 fe ff       	call   f0100387 <_warn>
f0115373:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115376:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011537a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115380:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115383:	74 28                	je     f01153ad <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115385:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011538b:	83 ec 0c             	sub    $0xc,%esp
f011538e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115391:	50                   	push   %eax
f0115392:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115397:	68 44 07 00 00       	push   $0x744
f011539c:	68 3e 85 13 f0       	push   $0xf013853e
f01153a1:	e8 e1 af fe ff       	call   f0100387 <_warn>
f01153a6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153a9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153ad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153b1:	74 04                	je     f01153b7 <test_calculate_allocated_space+0x8a1>
f01153b3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153b7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01153bb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01153c2:	00 00 00 
		num_pages = 0;
f01153c5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01153cc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01153cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153d2:	c1 e0 0a             	shl    $0xa,%eax
f01153d5:	89 c2                	mov    %eax,%edx
f01153d7:	83 ec 0c             	sub    $0xc,%esp
f01153da:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01153e0:	50                   	push   %eax
f01153e1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01153e7:	50                   	push   %eax
f01153e8:	52                   	push   %edx
f01153e9:	6a 00                	push   $0x0
f01153eb:	ff 75 d8             	pushl  -0x28(%ebp)
f01153ee:	e8 bf 37 ff ff       	call   f0108bb2 <calculate_allocated_space>
f01153f3:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f01153f6:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f01153fd:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0115404:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011540a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011540d:	74 28                	je     f0115437 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011540f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115415:	83 ec 0c             	sub    $0xc,%esp
f0115418:	ff 75 c8             	pushl  -0x38(%ebp)
f011541b:	50                   	push   %eax
f011541c:	68 70 a2 13 f0       	push   $0xf013a270
f0115421:	68 52 07 00 00       	push   $0x752
f0115426:	68 3e 85 13 f0       	push   $0xf013853e
f011542b:	e8 57 af fe ff       	call   f0100387 <_warn>
f0115430:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115433:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115437:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011543d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115440:	74 28                	je     f011546a <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115442:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115448:	83 ec 0c             	sub    $0xc,%esp
f011544b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011544e:	50                   	push   %eax
f011544f:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115454:	68 57 07 00 00       	push   $0x757
f0115459:	68 3e 85 13 f0       	push   $0xf013853e
f011545e:	e8 24 af fe ff       	call   f0100387 <_warn>
f0115463:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115466:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011546a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011546e:	74 04                	je     f0115474 <test_calculate_allocated_space+0x95e>
f0115470:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115474:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115478:	83 ec 04             	sub    $0x4,%esp
f011547b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115481:	50                   	push   %eax
f0115482:	68 d0 a1 13 f0       	push   $0xf013a1d0
f0115487:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011548d:	50                   	push   %eax
f011548e:	e8 f9 bc 01 00       	call   f013118c <strcconcat>
f0115493:	83 c4 10             	add    $0x10,%esp
f0115496:	83 ec 0c             	sub    $0xc,%esp
f0115499:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011549f:	50                   	push   %eax
f01154a0:	e8 3f b8 fe ff       	call   f0100ce4 <execute_command>
f01154a5:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01154a8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01154af:	00 00 00 
		num_pages = 0;
f01154b2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01154b9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01154bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154bf:	89 c2                	mov    %eax,%edx
f01154c1:	01 d2                	add    %edx,%edx
f01154c3:	01 d0                	add    %edx,%eax
f01154c5:	05 00 18 00 00       	add    $0x1800,%eax
f01154ca:	89 c2                	mov    %eax,%edx
f01154cc:	83 ec 0c             	sub    $0xc,%esp
f01154cf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01154d5:	50                   	push   %eax
f01154d6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01154dc:	50                   	push   %eax
f01154dd:	52                   	push   %edx
f01154de:	68 00 18 00 00       	push   $0x1800
f01154e3:	ff 75 d8             	pushl  -0x28(%ebp)
f01154e6:	e8 c7 36 ff ff       	call   f0108bb2 <calculate_allocated_space>
f01154eb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01154ee:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01154f5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01154fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115502:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115505:	74 28                	je     f011552f <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115507:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011550d:	83 ec 0c             	sub    $0xc,%esp
f0115510:	ff 75 c8             	pushl  -0x38(%ebp)
f0115513:	50                   	push   %eax
f0115514:	68 70 a2 13 f0       	push   $0xf013a270
f0115519:	68 68 07 00 00       	push   $0x768
f011551e:	68 3e 85 13 f0       	push   $0xf013853e
f0115523:	e8 5f ae fe ff       	call   f0100387 <_warn>
f0115528:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011552b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011552f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115535:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115538:	74 28                	je     f0115562 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011553a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115540:	83 ec 0c             	sub    $0xc,%esp
f0115543:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115546:	50                   	push   %eax
f0115547:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011554c:	68 6d 07 00 00       	push   $0x76d
f0115551:	68 3e 85 13 f0       	push   $0xf013853e
f0115556:	e8 2c ae fe ff       	call   f0100387 <_warn>
f011555b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011555e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115562:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115566:	74 04                	je     f011556c <test_calculate_allocated_space+0xa56>
f0115568:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011556c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115570:	83 ec 04             	sub    $0x4,%esp
f0115573:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115579:	50                   	push   %eax
f011557a:	68 a8 92 13 f0       	push   $0xf01392a8
f011557f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115585:	50                   	push   %eax
f0115586:	e8 01 bc 01 00       	call   f013118c <strcconcat>
f011558b:	83 c4 10             	add    $0x10,%esp
f011558e:	83 ec 0c             	sub    $0xc,%esp
f0115591:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0115597:	50                   	push   %eax
f0115598:	e8 47 b7 fe ff       	call   f0100ce4 <execute_command>
f011559d:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01155a0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01155a7:	00 00 00 
		num_pages = 0;
f01155aa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01155b1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01155b4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01155b7:	89 d0                	mov    %edx,%eax
f01155b9:	c1 e0 02             	shl    $0x2,%eax
f01155bc:	01 d0                	add    %edx,%eax
f01155be:	01 c0                	add    %eax,%eax
f01155c0:	05 00 00 40 00       	add    $0x400000,%eax
f01155c5:	89 c2                	mov    %eax,%edx
f01155c7:	83 ec 0c             	sub    $0xc,%esp
f01155ca:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01155d0:	50                   	push   %eax
f01155d1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01155d7:	50                   	push   %eax
f01155d8:	52                   	push   %edx
f01155d9:	68 00 00 40 00       	push   $0x400000
f01155de:	ff 75 d8             	pushl  -0x28(%ebp)
f01155e1:	e8 cc 35 ff ff       	call   f0108bb2 <calculate_allocated_space>
f01155e6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01155e9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01155f0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01155f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01155fd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115600:	74 28                	je     f011562a <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115602:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115608:	83 ec 0c             	sub    $0xc,%esp
f011560b:	ff 75 c8             	pushl  -0x38(%ebp)
f011560e:	50                   	push   %eax
f011560f:	68 70 a2 13 f0       	push   $0xf013a270
f0115614:	68 7d 07 00 00       	push   $0x77d
f0115619:	68 3e 85 13 f0       	push   $0xf013853e
f011561e:	e8 64 ad fe ff       	call   f0100387 <_warn>
f0115623:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115626:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011562a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115630:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115633:	74 28                	je     f011565d <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115635:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011563b:	83 ec 0c             	sub    $0xc,%esp
f011563e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115641:	50                   	push   %eax
f0115642:	68 d0 a2 13 f0       	push   $0xf013a2d0
f0115647:	68 82 07 00 00       	push   $0x782
f011564c:	68 3e 85 13 f0       	push   $0xf013853e
f0115651:	e8 31 ad fe ff       	call   f0100387 <_warn>
f0115656:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115659:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011565d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115661:	74 04                	je     f0115667 <test_calculate_allocated_space+0xb51>
f0115663:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115667:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011566b:	83 ec 04             	sub    $0x4,%esp
f011566e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115674:	50                   	push   %eax
f0115675:	68 b2 92 13 f0       	push   $0xf01392b2
f011567a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115680:	50                   	push   %eax
f0115681:	e8 06 bb 01 00       	call   f013118c <strcconcat>
f0115686:	83 c4 10             	add    $0x10,%esp
f0115689:	83 ec 0c             	sub    $0xc,%esp
f011568c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0115692:	50                   	push   %eax
f0115693:	e8 4c b6 fe ff       	call   f0100ce4 <execute_command>
f0115698:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011569b:	83 ec 04             	sub    $0x4,%esp
f011569e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01156a4:	50                   	push   %eax
f01156a5:	68 d8 a1 13 f0       	push   $0xf013a1d8
f01156aa:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156b0:	50                   	push   %eax
f01156b1:	e8 d6 ba 01 00       	call   f013118c <strcconcat>
f01156b6:	83 c4 10             	add    $0x10,%esp
f01156b9:	83 ec 0c             	sub    $0xc,%esp
f01156bc:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01156c2:	50                   	push   %eax
f01156c3:	e8 1c b6 fe ff       	call   f0100ce4 <execute_command>
f01156c8:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01156cb:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01156d2:	00 00 00 
		num_pages = 0;
f01156d5:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01156dc:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01156df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156e2:	05 00 00 38 00       	add    $0x380000,%eax
f01156e7:	01 c0                	add    %eax,%eax
f01156e9:	89 c2                	mov    %eax,%edx
f01156eb:	83 ec 0c             	sub    $0xc,%esp
f01156ee:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01156f4:	50                   	push   %eax
f01156f5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01156fb:	50                   	push   %eax
f01156fc:	52                   	push   %edx
f01156fd:	68 00 00 70 00       	push   $0x700000
f0115702:	ff 75 d8             	pushl  -0x28(%ebp)
f0115705:	e8 a8 34 ff ff       	call   f0108bb2 <calculate_allocated_space>
f011570a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011570d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0115714:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011571b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115721:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115724:	74 28                	je     f011574e <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0115726:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011572c:	83 ec 0c             	sub    $0xc,%esp
f011572f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115732:	50                   	push   %eax
f0115733:	68 70 a2 13 f0       	push   $0xf013a270
f0115738:	68 94 07 00 00       	push   $0x794
f011573d:	68 3e 85 13 f0       	push   $0xf013853e
f0115742:	e8 40 ac fe ff       	call   f0100387 <_warn>
f0115747:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011574a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011574e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115754:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115757:	74 28                	je     f0115781 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0115759:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011575f:	83 ec 0c             	sub    $0xc,%esp
f0115762:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115765:	50                   	push   %eax
f0115766:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011576b:	68 99 07 00 00       	push   $0x799
f0115770:	68 3e 85 13 f0       	push   $0xf013853e
f0115775:	e8 0d ac fe ff       	call   f0100387 <_warn>
f011577a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011577d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115781:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115785:	74 04                	je     f011578b <test_calculate_allocated_space+0xc75>
f0115787:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011578b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011578f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115796:	00 00 00 
		num_pages = 0;
f0115799:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01157a0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01157a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01157a6:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01157ab:	89 c2                	mov    %eax,%edx
f01157ad:	83 ec 0c             	sub    $0xc,%esp
f01157b0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01157b6:	50                   	push   %eax
f01157b7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01157bd:	50                   	push   %eax
f01157be:	52                   	push   %edx
f01157bf:	68 ff ff 3f 00       	push   $0x3fffff
f01157c4:	ff 75 d8             	pushl  -0x28(%ebp)
f01157c7:	e8 e6 33 ff ff       	call   f0108bb2 <calculate_allocated_space>
f01157cc:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01157cf:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01157d6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01157dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157e3:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01157e6:	74 28                	je     f0115810 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01157e8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01157ee:	83 ec 0c             	sub    $0xc,%esp
f01157f1:	ff 75 c8             	pushl  -0x38(%ebp)
f01157f4:	50                   	push   %eax
f01157f5:	68 70 a2 13 f0       	push   $0xf013a270
f01157fa:	68 a7 07 00 00       	push   $0x7a7
f01157ff:	68 3e 85 13 f0       	push   $0xf013853e
f0115804:	e8 7e ab fe ff       	call   f0100387 <_warn>
f0115809:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011580c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0115810:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115816:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115819:	74 28                	je     f0115843 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011581b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115821:	83 ec 0c             	sub    $0xc,%esp
f0115824:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115827:	50                   	push   %eax
f0115828:	68 d0 a2 13 f0       	push   $0xf013a2d0
f011582d:	68 ac 07 00 00       	push   $0x7ac
f0115832:	68 3e 85 13 f0       	push   $0xf013853e
f0115837:	e8 4b ab fe ff       	call   f0100387 <_warn>
f011583c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011583f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115843:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115847:	74 04                	je     f011584d <test_calculate_allocated_space+0xd37>
f0115849:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011584d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115851:	83 ec 0c             	sub    $0xc,%esp
f0115854:	68 63 92 13 f0       	push   $0xf0139263
f0115859:	e8 24 b4 fe ff       	call   f0100c82 <cprintf>
f011585e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0115861:	83 ec 08             	sub    $0x8,%esp
f0115864:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115867:	68 2c a3 13 f0       	push   $0xf013a32c
f011586c:	e8 11 b4 fe ff       	call   f0100c82 <cprintf>
f0115871:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115874:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115878:	75 10                	jne    f011588a <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011587a:	83 ec 0c             	sub    $0xc,%esp
f011587d:	68 6c a3 13 f0       	push   $0xf013a36c
f0115882:	e8 fb b3 fe ff       	call   f0100c82 <cprintf>
f0115887:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011588a:	a1 ac 7b 65 f0       	mov    0xf0657bac,%eax
f011588f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115892:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115895:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115898:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011589d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01158a0:	5b                   	pop    %ebx
f01158a1:	5e                   	pop    %esi
f01158a2:	5f                   	pop    %edi
f01158a3:	5d                   	pop    %ebp
f01158a4:	c3                   	ret    

f01158a5 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01158a5:	55                   	push   %ebp
f01158a6:	89 e5                	mov    %esp,%ebp
f01158a8:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01158ab:	8b 45 10             	mov    0x10(%ebp),%eax
f01158ae:	ba 01 00 00 00       	mov    $0x1,%edx
f01158b3:	88 c1                	mov    %al,%cl
f01158b5:	d3 e2                	shl    %cl,%edx
f01158b7:	89 d0                	mov    %edx,%eax
f01158b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01158bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158bf:	c1 e8 16             	shr    $0x16,%eax
f01158c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01158cc:	01 d0                	add    %edx,%eax
f01158ce:	8b 00                	mov    (%eax),%eax
f01158d0:	83 e0 01             	and    $0x1,%eax
f01158d3:	85 c0                	test   %eax,%eax
f01158d5:	75 07                	jne    f01158de <CB+0x39>
f01158d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01158dc:	eb 76                	jmp    f0115954 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01158de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01158e1:	c1 e8 16             	shr    $0x16,%eax
f01158e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01158eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01158ee:	01 d0                	add    %edx,%eax
f01158f0:	8b 00                	mov    (%eax),%eax
f01158f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01158f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01158fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01158fd:	c1 e8 0c             	shr    $0xc,%eax
f0115900:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115903:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115908:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011590b:	72 17                	jb     f0115924 <CB+0x7f>
f011590d:	ff 75 f0             	pushl  -0x10(%ebp)
f0115910:	68 b8 a3 13 f0       	push   $0xf013a3b8
f0115915:	68 c7 07 00 00       	push   $0x7c7
f011591a:	68 3e 85 13 f0       	push   $0xf013853e
f011591f:	e8 d7 a8 fe ff       	call   f01001fb <_panic>
f0115924:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115927:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011592c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011592f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115932:	c1 e8 0c             	shr    $0xc,%eax
f0115935:	25 ff 03 00 00       	and    $0x3ff,%eax
f011593a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115941:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115944:	01 d0                	add    %edx,%eax
f0115946:	8b 00                	mov    (%eax),%eax
f0115948:	23 45 f4             	and    -0xc(%ebp),%eax
f011594b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011594e:	0f 94 c0             	sete   %al
f0115951:	0f b6 c0             	movzbl %al,%eax
}
f0115954:	c9                   	leave  
f0115955:	c3                   	ret    

f0115956 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115956:	55                   	push   %ebp
f0115957:	89 e5                	mov    %esp,%ebp
f0115959:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011595c:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115961:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115966:	68 cc 07 00 00       	push   $0x7cc
f011596b:	68 3e 85 13 f0       	push   $0xf013853e
f0115970:	e8 86 a8 fe ff       	call   f01001fb <_panic>

f0115975 <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0115975:	55                   	push   %ebp
f0115976:	89 e5                	mov    %esp,%ebp
f0115978:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011597b:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115980:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115985:	68 d6 07 00 00       	push   $0x7d6
f011598a:	68 3e 85 13 f0       	push   $0xf013853e
f011598f:	e8 67 a8 fe ff       	call   f01001fb <_panic>

f0115994 <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f0115994:	55                   	push   %ebp
f0115995:	89 e5                	mov    %esp,%ebp
f0115997:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f011599a:	68 e7 a3 13 f0       	push   $0xf013a3e7
f011599f:	68 f6 a3 13 f0       	push   $0xf013a3f6
f01159a4:	68 e5 07 00 00       	push   $0x7e5
f01159a9:	68 3e 85 13 f0       	push   $0xf013853e
f01159ae:	e8 48 a8 fe ff       	call   f01001fb <_panic>

f01159b3 <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01159b3:	55                   	push   %ebp
f01159b4:	89 e5                	mov    %esp,%ebp
f01159b6:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01159b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01159bc:	c1 e8 16             	shr    $0x16,%eax
f01159bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01159c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01159c9:	01 d0                	add    %edx,%eax
f01159cb:	8b 00                	mov    (%eax),%eax
f01159cd:	83 e0 01             	and    $0x1,%eax
f01159d0:	85 c0                	test   %eax,%eax
f01159d2:	75 07                	jne    f01159db <CE+0x28>
f01159d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01159d9:	eb 7a                	jmp    f0115a55 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01159db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01159de:	c1 e8 16             	shr    $0x16,%eax
f01159e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01159e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01159eb:	01 d0                	add    %edx,%eax
f01159ed:	8b 00                	mov    (%eax),%eax
f01159ef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01159f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01159f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01159fa:	c1 e8 0c             	shr    $0xc,%eax
f01159fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115a00:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0115a05:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115a08:	72 17                	jb     f0115a21 <CE+0x6e>
f0115a0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0115a0d:	68 b8 a3 13 f0       	push   $0xf013a3b8
f0115a12:	68 ee 07 00 00       	push   $0x7ee
f0115a17:	68 3e 85 13 f0       	push   $0xf013853e
f0115a1c:	e8 da a7 fe ff       	call   f01001fb <_panic>
f0115a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115a24:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115a29:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115a2f:	c1 e8 0c             	shr    $0xc,%eax
f0115a32:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115a37:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115a3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115a41:	01 d0                	add    %edx,%eax
f0115a43:	8b 00                	mov    (%eax),%eax
f0115a45:	85 c0                	test   %eax,%eax
f0115a47:	74 07                	je     f0115a50 <CE+0x9d>
f0115a49:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a4e:	eb 05                	jmp    f0115a55 <CE+0xa2>
	return 1;
f0115a50:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115a55:	c9                   	leave  
f0115a56:	c3                   	ret    

f0115a57 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0115a57:	55                   	push   %ebp
f0115a58:	89 e5                	mov    %esp,%ebp
f0115a5a:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a5d:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115a62:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115a67:	68 f5 07 00 00       	push   $0x7f5
f0115a6c:	68 3e 85 13 f0       	push   $0xf013853e
f0115a71:	e8 85 a7 fe ff       	call   f01001fb <_panic>

f0115a76 <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115a76:	55                   	push   %ebp
f0115a77:	89 e5                	mov    %esp,%ebp
f0115a79:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0115a7c:	68 e7 a3 13 f0       	push   $0xf013a3e7
f0115a81:	68 f6 a3 13 f0       	push   $0xf013a3f6
f0115a86:	68 05 08 00 00       	push   $0x805
f0115a8b:	68 3e 85 13 f0       	push   $0xf013853e
f0115a90:	e8 66 a7 fe ff       	call   f01001fb <_panic>

f0115a95 <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f0115a95:	55                   	push   %ebp
f0115a96:	89 e5                	mov    %esp,%ebp
f0115a98:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115a9b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0115aa2:	eb 18                	jmp    f0115abc <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0115aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115aa7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115aae:	8b 45 08             	mov    0x8(%ebp),%eax
f0115ab1:	01 d0                	add    %edx,%eax
f0115ab3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115ab9:	ff 45 fc             	incl   -0x4(%ebp)
f0115abc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115abf:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0115ac4:	76 de                	jbe    f0115aa4 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115ac6:	90                   	nop
f0115ac7:	c9                   	leave  
f0115ac8:	c3                   	ret    

f0115ac9 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115ac9:	55                   	push   %ebp
f0115aca:	89 e5                	mov    %esp,%ebp
f0115acc:	83 ec 38             	sub    $0x38,%esp
f0115acf:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0115ad2:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0115ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115ad8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115add:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0115ae0:	8b 45 10             	mov    0x10(%ebp),%eax
f0115ae3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115aeb:	e9 ea 01 00 00       	jmp    f0115cda <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0115af0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115af4:	74 44                	je     f0115b3a <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115af9:	83 ec 04             	sub    $0x4,%esp
f0115afc:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115aff:	52                   	push   %edx
f0115b00:	50                   	push   %eax
f0115b01:	ff 75 08             	pushl  0x8(%ebp)
f0115b04:	e8 26 12 ff ff       	call   f0106d2f <get_frame_info>
f0115b09:	83 c4 10             	add    $0x10,%esp
f0115b0c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115b0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115b12:	85 c0                	test   %eax,%eax
f0115b14:	75 24                	jne    f0115b3a <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0115b16:	83 ec 04             	sub    $0x4,%esp
f0115b19:	68 0c a4 13 f0       	push   $0xf013a40c
f0115b1e:	68 22 08 00 00       	push   $0x822
f0115b23:	68 3e 85 13 f0       	push   $0xf013853e
f0115b28:	e8 5a a8 fe ff       	call   f0100387 <_warn>
f0115b2d:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115b30:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b35:	e9 b6 01 00 00       	jmp    f0115cf0 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0115b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115b3d:	83 ec 04             	sub    $0x4,%esp
f0115b40:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0115b43:	52                   	push   %edx
f0115b44:	50                   	push   %eax
f0115b45:	ff 75 08             	pushl  0x8(%ebp)
f0115b48:	e8 e2 11 ff ff       	call   f0106d2f <get_frame_info>
f0115b4d:	83 c4 10             	add    $0x10,%esp
f0115b50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0115b53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115b56:	85 c0                	test   %eax,%eax
f0115b58:	75 24                	jne    f0115b7e <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0115b5a:	83 ec 04             	sub    $0x4,%esp
f0115b5d:	68 38 a4 13 f0       	push   $0xf013a438
f0115b62:	68 29 08 00 00       	push   $0x829
f0115b67:	68 3e 85 13 f0       	push   $0xf013853e
f0115b6c:	e8 16 a8 fe ff       	call   f0100387 <_warn>
f0115b71:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115b74:	b8 00 00 00 00       	mov    $0x0,%eax
f0115b79:	e9 72 01 00 00       	jmp    f0115cf0 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115b7e:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0115b82:	75 70                	jne    f0115bf4 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0115b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115b87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115b8a:	c1 ea 0c             	shr    $0xc,%edx
f0115b8d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115b93:	c1 e2 02             	shl    $0x2,%edx
f0115b96:	01 d0                	add    %edx,%eax
f0115b98:	8b 00                	mov    (%eax),%eax
f0115b9a:	c1 e8 0c             	shr    $0xc,%eax
f0115b9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0115ba0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0115ba3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115ba6:	c1 ea 0c             	shr    $0xc,%edx
f0115ba9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115baf:	c1 e2 02             	shl    $0x2,%edx
f0115bb2:	01 d0                	add    %edx,%eax
f0115bb4:	8b 00                	mov    (%eax),%eax
f0115bb6:	c1 e8 0c             	shr    $0xc,%eax
f0115bb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115bbc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115bbf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0115bc2:	74 30                	je     f0115bf4 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0115bc4:	83 ec 04             	sub    $0x4,%esp
f0115bc7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115bca:	ff 75 e8             	pushl  -0x18(%ebp)
f0115bcd:	ff 75 f0             	pushl  -0x10(%ebp)
f0115bd0:	ff 75 f4             	pushl  -0xc(%ebp)
f0115bd3:	68 64 a4 13 f0       	push   $0xf013a464
f0115bd8:	68 33 08 00 00       	push   $0x833
f0115bdd:	68 3e 85 13 f0       	push   $0xf013853e
f0115be2:	e8 a0 a7 fe ff       	call   f0100387 <_warn>
f0115be7:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115bea:	b8 00 00 00 00       	mov    $0x0,%eax
f0115bef:	e9 fc 00 00 00       	jmp    f0115cf0 <CCP+0x227>
			}
		}
		if (ref != -1)
f0115bf4:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115bf8:	74 52                	je     f0115c4c <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115bfa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115bfe:	74 0e                	je     f0115c0e <CCP+0x145>
f0115c00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115c03:	8b 40 08             	mov    0x8(%eax),%eax
f0115c06:	0f b7 c0             	movzwl %ax,%eax
f0115c09:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115c0c:	74 3e                	je     f0115c4c <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115c0e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115c12:	74 0b                	je     f0115c1f <CCP+0x156>
f0115c14:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115c17:	8b 40 08             	mov    0x8(%eax),%eax
f0115c1a:	0f b7 c0             	movzwl %ax,%eax
f0115c1d:	eb 05                	jmp    f0115c24 <CCP+0x15b>
f0115c1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c24:	83 ec 0c             	sub    $0xc,%esp
f0115c27:	50                   	push   %eax
f0115c28:	ff 75 f0             	pushl  -0x10(%ebp)
f0115c2b:	68 c0 a4 13 f0       	push   $0xf013a4c0
f0115c30:	68 3b 08 00 00       	push   $0x83b
f0115c35:	68 3e 85 13 f0       	push   $0xf013853e
f0115c3a:	e8 48 a7 fe ff       	call   f0100387 <_warn>
f0115c3f:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115c42:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c47:	e9 a4 00 00 00       	jmp    f0115cf0 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0115c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115c4f:	ff 75 20             	pushl  0x20(%ebp)
f0115c52:	ff 75 1c             	pushl  0x1c(%ebp)
f0115c55:	50                   	push   %eax
f0115c56:	ff 75 08             	pushl  0x8(%ebp)
f0115c59:	e8 17 fd ff ff       	call   f0115975 <CPs>
f0115c5e:	83 c4 10             	add    $0x10,%esp
f0115c61:	85 c0                	test   %eax,%eax
f0115c63:	7f 21                	jg     f0115c86 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0115c65:	83 ec 04             	sub    $0x4,%esp
f0115c68:	68 30 a5 13 f0       	push   $0xf013a530
f0115c6d:	68 41 08 00 00       	push   $0x841
f0115c72:	68 3e 85 13 f0       	push   $0xf013853e
f0115c77:	e8 0b a7 fe ff       	call   f0100387 <_warn>
f0115c7c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115c7f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c84:	eb 6a                	jmp    f0115cf0 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115c86:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115c8a:	74 3a                	je     f0115cc6 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115c8f:	ff 75 28             	pushl  0x28(%ebp)
f0115c92:	ff 75 24             	pushl  0x24(%ebp)
f0115c95:	50                   	push   %eax
f0115c96:	ff 75 08             	pushl  0x8(%ebp)
f0115c99:	e8 d7 fc ff ff       	call   f0115975 <CPs>
f0115c9e:	83 c4 10             	add    $0x10,%esp
f0115ca1:	85 c0                	test   %eax,%eax
f0115ca3:	7f 21                	jg     f0115cc6 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0115ca5:	83 ec 04             	sub    $0x4,%esp
f0115ca8:	68 78 a5 13 f0       	push   $0xf013a578
f0115cad:	68 48 08 00 00       	push   $0x848
f0115cb2:	68 3e 85 13 f0       	push   $0xf013853e
f0115cb7:	e8 cb a6 fe ff       	call   f0100387 <_warn>
f0115cbc:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115cbf:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cc4:	eb 2a                	jmp    f0115cf0 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115cc6:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115cca:	74 07                	je     f0115cd3 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115ccc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115cd3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115cda:	8b 55 10             	mov    0x10(%ebp),%edx
f0115cdd:	8b 45 14             	mov    0x14(%ebp),%eax
f0115ce0:	01 d0                	add    %edx,%eax
f0115ce2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0115ce5:	0f 87 05 fe ff ff    	ja     f0115af0 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115ceb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115cf0:	c9                   	leave  
f0115cf1:	c3                   	ret    

f0115cf2 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0115cf2:	55                   	push   %ebp
f0115cf3:	89 e5                	mov    %esp,%ebp
f0115cf5:	57                   	push   %edi
f0115cf6:	56                   	push   %esi
f0115cf7:	53                   	push   %ebx
f0115cf8:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115cfe:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f0115d03:	84 c0                	test   %al,%al
f0115d05:	0f 84 b4 09 00 00    	je     f01166bf <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115d0b:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f0115d12:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115d18:	bb 18 a8 13 f0       	mov    $0xf013a818,%ebx
f0115d1d:	ba 04 00 00 00       	mov    $0x4,%edx
f0115d22:	89 c7                	mov    %eax,%edi
f0115d24:	89 de                	mov    %ebx,%esi
f0115d26:	89 d1                	mov    %edx,%ecx
f0115d28:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0115d2a:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0115d30:	b9 15 00 00 00       	mov    $0x15,%ecx
f0115d35:	b8 00 00 00 00       	mov    $0x0,%eax
f0115d3a:	89 d7                	mov    %edx,%edi
f0115d3c:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0115d3e:	83 ec 0c             	sub    $0xc,%esp
f0115d41:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0115d47:	50                   	push   %eax
f0115d48:	e8 97 af fe ff       	call   f0100ce4 <execute_command>
f0115d4d:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0115d50:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115d56:	bb 7c a8 13 f0       	mov    $0xf013a87c,%ebx
f0115d5b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0115d60:	89 c7                	mov    %eax,%edi
f0115d62:	89 de                	mov    %ebx,%esi
f0115d64:	89 d1                	mov    %edx,%ecx
f0115d66:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115d68:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0115d6e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0115d73:	b0 00                	mov    $0x0,%al
f0115d75:	89 d7                	mov    %edx,%edi
f0115d77:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115d79:	83 ec 0c             	sub    $0xc,%esp
f0115d7c:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0115d82:	50                   	push   %eax
f0115d83:	e8 5c af fe ff       	call   f0100ce4 <execute_command>
f0115d88:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115d8b:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115d91:	bb e0 a8 13 f0       	mov    $0xf013a8e0,%ebx
f0115d96:	ba 17 00 00 00       	mov    $0x17,%edx
f0115d9b:	89 c7                	mov    %eax,%edi
f0115d9d:	89 de                	mov    %ebx,%esi
f0115d9f:	89 d1                	mov    %edx,%ecx
f0115da1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115da3:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115da9:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115dae:	b0 00                	mov    $0x0,%al
f0115db0:	89 d7                	mov    %edx,%edi
f0115db2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0115db4:	83 ec 0c             	sub    $0xc,%esp
f0115db7:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115dbd:	50                   	push   %eax
f0115dbe:	e8 21 af fe ff       	call   f0100ce4 <execute_command>
f0115dc3:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115dc6:	83 ec 04             	sub    $0x4,%esp
f0115dc9:	6a 00                	push   $0x0
f0115dcb:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115dce:	50                   	push   %eax
f0115dcf:	68 00 10 00 00       	push   $0x1000
f0115dd4:	e8 2e 3b ff ff       	call   f0109907 <envid2env>
f0115dd9:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115ddc:	83 ec 04             	sub    $0x4,%esp
f0115ddf:	6a 00                	push   $0x0
f0115de1:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0115de4:	50                   	push   %eax
f0115de5:	68 01 10 00 00       	push   $0x1001
f0115dea:	e8 18 3b ff ff       	call   f0109907 <envid2env>
f0115def:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0115df2:	83 ec 04             	sub    $0x4,%esp
f0115df5:	6a 00                	push   $0x0
f0115df7:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115dfa:	50                   	push   %eax
f0115dfb:	68 02 10 00 00       	push   $0x1002
f0115e00:	e8 02 3b ff ff       	call   f0109907 <envid2env>
f0115e05:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115e08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e0b:	85 c0                	test   %eax,%eax
f0115e0d:	74 0e                	je     f0115e1d <test_priority_normal_and_higher+0x12b>
f0115e0f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e12:	85 c0                	test   %eax,%eax
f0115e14:	74 07                	je     f0115e1d <test_priority_normal_and_higher+0x12b>
f0115e16:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e19:	85 c0                	test   %eax,%eax
f0115e1b:	75 14                	jne    f0115e31 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0115e1d:	83 ec 04             	sub    $0x4,%esp
f0115e20:	68 b8 a5 13 f0       	push   $0xf013a5b8
f0115e25:	6a 26                	push   $0x26
f0115e27:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115e2c:	e8 ca a3 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115e31:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e34:	8b 40 74             	mov    0x74(%eax),%eax
f0115e37:	83 f8 14             	cmp    $0x14,%eax
f0115e3a:	75 16                	jne    f0115e52 <test_priority_normal_and_higher+0x160>
f0115e3c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e3f:	8b 40 74             	mov    0x74(%eax),%eax
f0115e42:	83 f8 0f             	cmp    $0xf,%eax
f0115e45:	75 0b                	jne    f0115e52 <test_priority_normal_and_higher+0x160>
f0115e47:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e4a:	8b 40 74             	mov    0x74(%eax),%eax
f0115e4d:	83 f8 0a             	cmp    $0xa,%eax
f0115e50:	74 14                	je     f0115e66 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0115e52:	83 ec 04             	sub    $0x4,%esp
f0115e55:	68 ec a5 13 f0       	push   $0xf013a5ec
f0115e5a:	6a 29                	push   $0x29
f0115e5c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115e61:	e8 95 a3 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f0115e66:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0115e6d:	eb 44                	jmp    f0115eb3 <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0115e6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e72:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115e78:	89 d0                	mov    %edx,%eax
f0115e7a:	01 c0                	add    %eax,%eax
f0115e7c:	01 d0                	add    %edx,%eax
f0115e7e:	c1 e0 03             	shl    $0x3,%eax
f0115e81:	01 c8                	add    %ecx,%eax
f0115e83:	8b 10                	mov    (%eax),%edx
f0115e85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115e88:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115e8f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e92:	8b 48 78             	mov    0x78(%eax),%ecx
f0115e95:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0115e98:	89 d0                	mov    %edx,%eax
f0115e9a:	01 c0                	add    %eax,%eax
f0115e9c:	01 d0                	add    %edx,%eax
f0115e9e:	c1 e0 03             	shl    $0x3,%eax
f0115ea1:	01 c8                	add    %ecx,%eax
f0115ea3:	8b 50 08             	mov    0x8(%eax),%edx
f0115ea6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115ea9:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115eb0:	ff 45 e4             	incl   -0x1c(%ebp)
f0115eb3:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115eb7:	7e b6                	jle    f0115e6f <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115eb9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115ec0:	eb 44                	jmp    f0115f06 <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0115ec2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ec5:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ec8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115ecb:	89 d0                	mov    %edx,%eax
f0115ecd:	01 c0                	add    %eax,%eax
f0115ecf:	01 d0                	add    %edx,%eax
f0115ed1:	c1 e0 03             	shl    $0x3,%eax
f0115ed4:	01 c8                	add    %ecx,%eax
f0115ed6:	8b 10                	mov    (%eax),%edx
f0115ed8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115edb:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0115ee2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ee5:	8b 48 78             	mov    0x78(%eax),%ecx
f0115ee8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115eeb:	89 d0                	mov    %edx,%eax
f0115eed:	01 c0                	add    %eax,%eax
f0115eef:	01 d0                	add    %edx,%eax
f0115ef1:	c1 e0 03             	shl    $0x3,%eax
f0115ef4:	01 c8                	add    %ecx,%eax
f0115ef6:	8b 50 08             	mov    0x8(%eax),%edx
f0115ef9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115efc:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115f03:	ff 45 e0             	incl   -0x20(%ebp)
f0115f06:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115f0a:	7e b6                	jle    f0115ec2 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115f0c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0115f13:	eb 44                	jmp    f0115f59 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0115f15:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f18:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115f1e:	89 d0                	mov    %edx,%eax
f0115f20:	01 c0                	add    %eax,%eax
f0115f22:	01 d0                	add    %edx,%eax
f0115f24:	c1 e0 03             	shl    $0x3,%eax
f0115f27:	01 c8                	add    %ecx,%eax
f0115f29:	8b 10                	mov    (%eax),%edx
f0115f2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115f2e:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0115f35:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f38:	8b 48 78             	mov    0x78(%eax),%ecx
f0115f3b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0115f3e:	89 d0                	mov    %edx,%eax
f0115f40:	01 c0                	add    %eax,%eax
f0115f42:	01 d0                	add    %edx,%eax
f0115f44:	c1 e0 03             	shl    $0x3,%eax
f0115f47:	01 c8                	add    %ecx,%eax
f0115f49:	8b 50 08             	mov    0x8(%eax),%edx
f0115f4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115f4f:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115f56:	ff 45 dc             	incl   -0x24(%ebp)
f0115f59:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0115f5d:	7e b6                	jle    f0115f15 <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0115f5f:	e8 5b 69 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0115f64:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0115f67:	e8 d0 dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0115f6c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0115f6f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115f72:	83 ec 08             	sub    $0x8,%esp
f0115f75:	6a 03                	push   $0x3
f0115f77:	50                   	push   %eax
f0115f78:	e8 1f 4e ff ff       	call   f010ad9c <set_program_priority>
f0115f7d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115f80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f83:	83 ec 08             	sub    $0x8,%esp
f0115f86:	6a 03                	push   $0x3
f0115f88:	50                   	push   %eax
f0115f89:	e8 0e 4e ff ff       	call   f010ad9c <set_program_priority>
f0115f8e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115f91:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f94:	83 ec 08             	sub    $0x8,%esp
f0115f97:	6a 03                	push   $0x3
f0115f99:	50                   	push   %eax
f0115f9a:	e8 fd 4d ff ff       	call   f010ad9c <set_program_priority>
f0115f9f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115fa2:	e8 95 dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0115fa7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115faa:	74 14                	je     f0115fc0 <test_priority_normal_and_higher+0x2ce>
f0115fac:	83 ec 04             	sub    $0x4,%esp
f0115faf:	68 38 a6 13 f0       	push   $0xf013a638
f0115fb4:	6a 45                	push   $0x45
f0115fb6:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115fbb:	e8 3b a2 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115fc0:	e8 fa 68 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0115fc5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115fc8:	74 14                	je     f0115fde <test_priority_normal_and_higher+0x2ec>
f0115fca:	83 ec 04             	sub    $0x4,%esp
f0115fcd:	68 38 a6 13 f0       	push   $0xf013a638
f0115fd2:	6a 46                	push   $0x46
f0115fd4:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0115fd9:	e8 1d a2 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115fde:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115fe1:	8b 40 74             	mov    0x74(%eax),%eax
f0115fe4:	83 f8 14             	cmp    $0x14,%eax
f0115fe7:	75 16                	jne    f0115fff <test_priority_normal_and_higher+0x30d>
f0115fe9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115fec:	8b 40 74             	mov    0x74(%eax),%eax
f0115fef:	83 f8 0f             	cmp    $0xf,%eax
f0115ff2:	75 0b                	jne    f0115fff <test_priority_normal_and_higher+0x30d>
f0115ff4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ff7:	8b 40 74             	mov    0x74(%eax),%eax
f0115ffa:	83 f8 0a             	cmp    $0xa,%eax
f0115ffd:	74 14                	je     f0116013 <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115fff:	83 ec 04             	sub    $0x4,%esp
f0116002:	68 64 a6 13 f0       	push   $0xf013a664
f0116007:	6a 49                	push   $0x49
f0116009:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011600e:	e8 e8 a1 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116013:	e8 a7 68 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116018:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011601b:	e8 1c dd fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116020:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116023:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116026:	83 ec 08             	sub    $0x8,%esp
f0116029:	6a 04                	push   $0x4
f011602b:	50                   	push   %eax
f011602c:	e8 6b 4d ff ff       	call   f010ad9c <set_program_priority>
f0116031:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116034:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116037:	83 ec 08             	sub    $0x8,%esp
f011603a:	6a 04                	push   $0x4
f011603c:	50                   	push   %eax
f011603d:	e8 5a 4d ff ff       	call   f010ad9c <set_program_priority>
f0116042:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116045:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116048:	83 ec 08             	sub    $0x8,%esp
f011604b:	6a 04                	push   $0x4
f011604d:	50                   	push   %eax
f011604e:	e8 49 4d ff ff       	call   f010ad9c <set_program_priority>
f0116053:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116056:	e8 e1 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011605b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011605e:	74 14                	je     f0116074 <test_priority_normal_and_higher+0x382>
f0116060:	83 ec 04             	sub    $0x4,%esp
f0116063:	68 38 a6 13 f0       	push   $0xf013a638
f0116068:	6a 53                	push   $0x53
f011606a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011606f:	e8 87 a1 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116074:	e8 46 68 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116079:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011607c:	74 14                	je     f0116092 <test_priority_normal_and_higher+0x3a0>
f011607e:	83 ec 04             	sub    $0x4,%esp
f0116081:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116086:	6a 54                	push   $0x54
f0116088:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011608d:	e8 69 a1 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116092:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116095:	8b 40 74             	mov    0x74(%eax),%eax
f0116098:	83 f8 14             	cmp    $0x14,%eax
f011609b:	75 16                	jne    f01160b3 <test_priority_normal_and_higher+0x3c1>
f011609d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01160a0:	8b 40 74             	mov    0x74(%eax),%eax
f01160a3:	83 f8 0f             	cmp    $0xf,%eax
f01160a6:	75 0b                	jne    f01160b3 <test_priority_normal_and_higher+0x3c1>
f01160a8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160ab:	8b 40 74             	mov    0x74(%eax),%eax
f01160ae:	83 f8 14             	cmp    $0x14,%eax
f01160b1:	74 14                	je     f01160c7 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f01160b3:	83 ec 04             	sub    $0x4,%esp
f01160b6:	68 e8 a6 13 f0       	push   $0xf013a6e8
f01160bb:	6a 57                	push   $0x57
f01160bd:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01160c2:	e8 34 a1 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f01160c7:	e8 f3 67 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01160cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160cf:	e8 68 dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160d4:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01160d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01160da:	83 ec 08             	sub    $0x8,%esp
f01160dd:	6a 04                	push   $0x4
f01160df:	50                   	push   %eax
f01160e0:	e8 b7 4c ff ff       	call   f010ad9c <set_program_priority>
f01160e5:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01160e8:	e8 4f dc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01160ed:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01160f0:	74 14                	je     f0116106 <test_priority_normal_and_higher+0x414>
f01160f2:	83 ec 04             	sub    $0x4,%esp
f01160f5:	68 38 a6 13 f0       	push   $0xf013a638
f01160fa:	6a 5f                	push   $0x5f
f01160fc:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116101:	e8 f5 a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116106:	e8 b4 67 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011610b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011610e:	74 14                	je     f0116124 <test_priority_normal_and_higher+0x432>
f0116110:	83 ec 04             	sub    $0x4,%esp
f0116113:	68 38 a6 13 f0       	push   $0xf013a638
f0116118:	6a 60                	push   $0x60
f011611a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011611f:	e8 d7 a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116124:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116127:	8b 40 74             	mov    0x74(%eax),%eax
f011612a:	83 f8 14             	cmp    $0x14,%eax
f011612d:	75 16                	jne    f0116145 <test_priority_normal_and_higher+0x453>
f011612f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116132:	8b 40 74             	mov    0x74(%eax),%eax
f0116135:	83 f8 0f             	cmp    $0xf,%eax
f0116138:	75 0b                	jne    f0116145 <test_priority_normal_and_higher+0x453>
f011613a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011613d:	8b 40 74             	mov    0x74(%eax),%eax
f0116140:	83 f8 14             	cmp    $0x14,%eax
f0116143:	74 14                	je     f0116159 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116145:	83 ec 04             	sub    $0x4,%esp
f0116148:	68 30 a7 13 f0       	push   $0xf013a730
f011614d:	6a 63                	push   $0x63
f011614f:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116154:	e8 a2 a0 fe ff       	call   f01001fb <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116159:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116160:	eb 1b                	jmp    f011617d <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116162:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116165:	8b 48 78             	mov    0x78(%eax),%ecx
f0116168:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011616b:	89 d0                	mov    %edx,%eax
f011616d:	01 c0                	add    %eax,%eax
f011616f:	01 d0                	add    %edx,%eax
f0116171:	c1 e0 03             	shl    $0x3,%eax
f0116174:	01 c8                	add    %ecx,%eax
f0116176:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011617a:	ff 45 d8             	incl   -0x28(%ebp)
f011617d:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116181:	7e df                	jle    f0116162 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116183:	e8 37 67 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116188:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011618b:	e8 ac db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116190:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116193:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116196:	83 ec 08             	sub    $0x8,%esp
f0116199:	6a 04                	push   $0x4
f011619b:	50                   	push   %eax
f011619c:	e8 fb 4b ff ff       	call   f010ad9c <set_program_priority>
f01161a1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01161a4:	e8 93 db fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01161a9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01161ac:	74 14                	je     f01161c2 <test_priority_normal_and_higher+0x4d0>
f01161ae:	83 ec 04             	sub    $0x4,%esp
f01161b1:	68 38 a6 13 f0       	push   $0xf013a638
f01161b6:	6a 70                	push   $0x70
f01161b8:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01161bd:	e8 39 a0 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01161c2:	e8 f8 66 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01161c7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01161ca:	74 14                	je     f01161e0 <test_priority_normal_and_higher+0x4ee>
f01161cc:	83 ec 04             	sub    $0x4,%esp
f01161cf:	68 38 a6 13 f0       	push   $0xf013a638
f01161d4:	6a 71                	push   $0x71
f01161d6:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01161db:	e8 1b a0 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01161e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01161e3:	8b 40 74             	mov    0x74(%eax),%eax
f01161e6:	83 f8 14             	cmp    $0x14,%eax
f01161e9:	75 16                	jne    f0116201 <test_priority_normal_and_higher+0x50f>
f01161eb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01161ee:	8b 40 74             	mov    0x74(%eax),%eax
f01161f1:	83 f8 0f             	cmp    $0xf,%eax
f01161f4:	75 0b                	jne    f0116201 <test_priority_normal_and_higher+0x50f>
f01161f6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01161f9:	8b 40 74             	mov    0x74(%eax),%eax
f01161fc:	83 f8 14             	cmp    $0x14,%eax
f01161ff:	74 14                	je     f0116215 <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0116201:	83 ec 04             	sub    $0x4,%esp
f0116204:	68 30 a7 13 f0       	push   $0xf013a730
f0116209:	6a 74                	push   $0x74
f011620b:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116210:	e8 e6 9f fe ff       	call   f01001fb <_panic>

		for(int i = 10; i < 15; i++)
f0116215:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f011621c:	eb 1b                	jmp    f0116239 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011621e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116221:	8b 48 78             	mov    0x78(%eax),%ecx
f0116224:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116227:	89 d0                	mov    %edx,%eax
f0116229:	01 c0                	add    %eax,%eax
f011622b:	01 d0                	add    %edx,%eax
f011622d:	c1 e0 03             	shl    $0x3,%eax
f0116230:	01 c8                	add    %ecx,%eax
f0116232:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0116236:	ff 45 d4             	incl   -0x2c(%ebp)
f0116239:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011623d:	7e df                	jle    f011621e <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011623f:	e8 7b 66 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116244:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116247:	e8 f0 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011624c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011624f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116252:	83 ec 08             	sub    $0x8,%esp
f0116255:	6a 05                	push   $0x5
f0116257:	50                   	push   %eax
f0116258:	e8 3f 4b ff ff       	call   f010ad9c <set_program_priority>
f011625d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0116260:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116263:	83 ec 08             	sub    $0x8,%esp
f0116266:	6a 05                	push   $0x5
f0116268:	50                   	push   %eax
f0116269:	e8 2e 4b ff ff       	call   f010ad9c <set_program_priority>
f011626e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116271:	e8 c6 da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116276:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116279:	74 14                	je     f011628f <test_priority_normal_and_higher+0x59d>
f011627b:	83 ec 04             	sub    $0x4,%esp
f011627e:	68 38 a6 13 f0       	push   $0xf013a638
f0116283:	6a 7f                	push   $0x7f
f0116285:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011628a:	e8 6c 9f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011628f:	e8 2b 66 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116294:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116297:	74 17                	je     f01162b0 <test_priority_normal_and_higher+0x5be>
f0116299:	83 ec 04             	sub    $0x4,%esp
f011629c:	68 38 a6 13 f0       	push   $0xf013a638
f01162a1:	68 80 00 00 00       	push   $0x80
f01162a6:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01162ab:	e8 4b 9f fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01162b0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01162b3:	8b 40 74             	mov    0x74(%eax),%eax
f01162b6:	83 f8 14             	cmp    $0x14,%eax
f01162b9:	75 16                	jne    f01162d1 <test_priority_normal_and_higher+0x5df>
f01162bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01162be:	8b 40 74             	mov    0x74(%eax),%eax
f01162c1:	83 f8 1e             	cmp    $0x1e,%eax
f01162c4:	75 0b                	jne    f01162d1 <test_priority_normal_and_higher+0x5df>
f01162c6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162c9:	8b 40 74             	mov    0x74(%eax),%eax
f01162cc:	83 f8 28             	cmp    $0x28,%eax
f01162cf:	74 17                	je     f01162e8 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01162d1:	83 ec 04             	sub    $0x4,%esp
f01162d4:	68 6c a7 13 f0       	push   $0xf013a76c
f01162d9:	68 83 00 00 00       	push   $0x83
f01162de:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01162e3:	e8 13 9f fe ff       	call   f01001fb <_panic>

		for(int i = 20; i < 40; i++)
f01162e8:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01162ef:	eb 1b                	jmp    f011630c <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01162f1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01162f4:	8b 48 78             	mov    0x78(%eax),%ecx
f01162f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01162fa:	89 d0                	mov    %edx,%eax
f01162fc:	01 c0                	add    %eax,%eax
f01162fe:	01 d0                	add    %edx,%eax
f0116300:	c1 e0 03             	shl    $0x3,%eax
f0116303:	01 c8                	add    %ecx,%eax
f0116305:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0116309:	ff 45 d0             	incl   -0x30(%ebp)
f011630c:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0116310:	7e df                	jle    f01162f1 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116312:	e8 a8 65 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116317:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011631a:	e8 1d da fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011631f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0116322:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116325:	83 ec 08             	sub    $0x8,%esp
f0116328:	6a 05                	push   $0x5
f011632a:	50                   	push   %eax
f011632b:	e8 6c 4a ff ff       	call   f010ad9c <set_program_priority>
f0116330:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116333:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116336:	83 ec 08             	sub    $0x8,%esp
f0116339:	6a 04                	push   $0x4
f011633b:	50                   	push   %eax
f011633c:	e8 5b 4a ff ff       	call   f010ad9c <set_program_priority>
f0116341:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116344:	e8 f3 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116349:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011634c:	74 17                	je     f0116365 <test_priority_normal_and_higher+0x673>
f011634e:	83 ec 04             	sub    $0x4,%esp
f0116351:	68 38 a6 13 f0       	push   $0xf013a638
f0116356:	68 8e 00 00 00       	push   $0x8e
f011635b:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116360:	e8 96 9e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116365:	e8 55 65 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011636a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011636d:	74 17                	je     f0116386 <test_priority_normal_and_higher+0x694>
f011636f:	83 ec 04             	sub    $0x4,%esp
f0116372:	68 38 a6 13 f0       	push   $0xf013a638
f0116377:	68 8f 00 00 00       	push   $0x8f
f011637c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116381:	e8 75 9e fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116386:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116389:	8b 40 74             	mov    0x74(%eax),%eax
f011638c:	83 f8 14             	cmp    $0x14,%eax
f011638f:	75 16                	jne    f01163a7 <test_priority_normal_and_higher+0x6b5>
f0116391:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116394:	8b 40 74             	mov    0x74(%eax),%eax
f0116397:	83 f8 1e             	cmp    $0x1e,%eax
f011639a:	75 0b                	jne    f01163a7 <test_priority_normal_and_higher+0x6b5>
f011639c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011639f:	8b 40 74             	mov    0x74(%eax),%eax
f01163a2:	83 f8 28             	cmp    $0x28,%eax
f01163a5:	74 17                	je     f01163be <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01163a7:	83 ec 04             	sub    $0x4,%esp
f01163aa:	68 6c a7 13 f0       	push   $0xf013a76c
f01163af:	68 92 00 00 00       	push   $0x92
f01163b4:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01163b9:	e8 3d 9e fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 30; i++)
f01163be:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01163c5:	eb 1b                	jmp    f01163e2 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01163c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01163cd:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01163d0:	89 d0                	mov    %edx,%eax
f01163d2:	01 c0                	add    %eax,%eax
f01163d4:	01 d0                	add    %edx,%eax
f01163d6:	c1 e0 03             	shl    $0x3,%eax
f01163d9:	01 c8                	add    %ecx,%eax
f01163db:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01163df:	ff 45 cc             	incl   -0x34(%ebp)
f01163e2:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01163e6:	7e df                	jle    f01163c7 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01163e8:	e8 d2 64 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01163ed:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163f0:	e8 47 d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01163f5:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01163f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01163fb:	83 ec 08             	sub    $0x8,%esp
f01163fe:	6a 05                	push   $0x5
f0116400:	50                   	push   %eax
f0116401:	e8 96 49 ff ff       	call   f010ad9c <set_program_priority>
f0116406:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116409:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011640c:	83 ec 08             	sub    $0x8,%esp
f011640f:	6a 04                	push   $0x4
f0116411:	50                   	push   %eax
f0116412:	e8 85 49 ff ff       	call   f010ad9c <set_program_priority>
f0116417:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011641a:	e8 1d d9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011641f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116422:	74 17                	je     f011643b <test_priority_normal_and_higher+0x749>
f0116424:	83 ec 04             	sub    $0x4,%esp
f0116427:	68 38 a6 13 f0       	push   $0xf013a638
f011642c:	68 9d 00 00 00       	push   $0x9d
f0116431:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116436:	e8 c0 9d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011643b:	e8 7f 64 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116440:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116443:	74 17                	je     f011645c <test_priority_normal_and_higher+0x76a>
f0116445:	83 ec 04             	sub    $0x4,%esp
f0116448:	68 38 a6 13 f0       	push   $0xf013a638
f011644d:	68 9e 00 00 00       	push   $0x9e
f0116452:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116457:	e8 9f 9d fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011645c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011645f:	8b 40 74             	mov    0x74(%eax),%eax
f0116462:	83 f8 14             	cmp    $0x14,%eax
f0116465:	75 16                	jne    f011647d <test_priority_normal_and_higher+0x78b>
f0116467:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011646a:	8b 40 74             	mov    0x74(%eax),%eax
f011646d:	83 f8 3c             	cmp    $0x3c,%eax
f0116470:	75 0b                	jne    f011647d <test_priority_normal_and_higher+0x78b>
f0116472:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116475:	8b 40 74             	mov    0x74(%eax),%eax
f0116478:	83 f8 28             	cmp    $0x28,%eax
f011647b:	74 17                	je     f0116494 <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f011647d:	83 ec 04             	sub    $0x4,%esp
f0116480:	68 6c a7 13 f0       	push   $0xf013a76c
f0116485:	68 a1 00 00 00       	push   $0xa1
f011648a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011648f:	e8 67 9d fe ff       	call   f01001fb <_panic>

		for(int i = 15; i < 60; i++)
f0116494:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f011649b:	eb 1b                	jmp    f01164b8 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011649d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01164a0:	8b 48 78             	mov    0x78(%eax),%ecx
f01164a3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01164a6:	89 d0                	mov    %edx,%eax
f01164a8:	01 c0                	add    %eax,%eax
f01164aa:	01 d0                	add    %edx,%eax
f01164ac:	c1 e0 03             	shl    $0x3,%eax
f01164af:	01 c8                	add    %ecx,%eax
f01164b1:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01164b5:	ff 45 c8             	incl   -0x38(%ebp)
f01164b8:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01164bc:	7e df                	jle    f011649d <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01164be:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01164c5:	eb 1b                	jmp    f01164e2 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01164c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01164ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01164cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01164d0:	89 d0                	mov    %edx,%eax
f01164d2:	01 c0                	add    %eax,%eax
f01164d4:	01 d0                	add    %edx,%eax
f01164d6:	c1 e0 03             	shl    $0x3,%eax
f01164d9:	01 c8                	add    %ecx,%eax
f01164db:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01164df:	ff 45 c4             	incl   -0x3c(%ebp)
f01164e2:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01164e6:	7e df                	jle    f01164c7 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01164e8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01164ef:	eb 7a                	jmp    f011656b <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01164f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01164f4:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f01164fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01164fe:	8b 58 78             	mov    0x78(%eax),%ebx
f0116501:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116504:	89 d0                	mov    %edx,%eax
f0116506:	01 c0                	add    %eax,%eax
f0116508:	01 d0                	add    %edx,%eax
f011650a:	c1 e0 03             	shl    $0x3,%eax
f011650d:	01 d8                	add    %ebx,%eax
f011650f:	8b 00                	mov    (%eax),%eax
f0116511:	39 c1                	cmp    %eax,%ecx
f0116513:	74 17                	je     f011652c <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f0116515:	83 ec 04             	sub    $0x4,%esp
f0116518:	68 a8 a7 13 f0       	push   $0xf013a7a8
f011651d:	68 af 00 00 00       	push   $0xaf
f0116522:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116527:	e8 cf 9c fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011652c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011652f:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0116536:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116539:	8b 58 78             	mov    0x78(%eax),%ebx
f011653c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011653f:	89 d0                	mov    %edx,%eax
f0116541:	01 c0                	add    %eax,%eax
f0116543:	01 d0                	add    %edx,%eax
f0116545:	c1 e0 03             	shl    $0x3,%eax
f0116548:	01 d8                	add    %ebx,%eax
f011654a:	8b 40 08             	mov    0x8(%eax),%eax
f011654d:	39 c1                	cmp    %eax,%ecx
f011654f:	74 17                	je     f0116568 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0116551:	83 ec 04             	sub    $0x4,%esp
f0116554:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116559:	68 b2 00 00 00       	push   $0xb2
f011655e:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116563:	e8 93 9c fe ff       	call   f01001fb <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0116568:	ff 45 c0             	incl   -0x40(%ebp)
f011656b:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011656f:	7e 80                	jle    f01164f1 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116571:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0116578:	eb 7a                	jmp    f01165f4 <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011657a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011657d:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116584:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116587:	8b 58 78             	mov    0x78(%eax),%ebx
f011658a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011658d:	89 d0                	mov    %edx,%eax
f011658f:	01 c0                	add    %eax,%eax
f0116591:	01 d0                	add    %edx,%eax
f0116593:	c1 e0 03             	shl    $0x3,%eax
f0116596:	01 d8                	add    %ebx,%eax
f0116598:	8b 00                	mov    (%eax),%eax
f011659a:	39 c1                	cmp    %eax,%ecx
f011659c:	74 17                	je     f01165b5 <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f011659e:	83 ec 04             	sub    $0x4,%esp
f01165a1:	68 a8 a7 13 f0       	push   $0xf013a7a8
f01165a6:	68 b8 00 00 00       	push   $0xb8
f01165ab:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01165b0:	e8 46 9c fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01165b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01165b8:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01165bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01165c2:	8b 58 78             	mov    0x78(%eax),%ebx
f01165c5:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01165c8:	89 d0                	mov    %edx,%eax
f01165ca:	01 c0                	add    %eax,%eax
f01165cc:	01 d0                	add    %edx,%eax
f01165ce:	c1 e0 03             	shl    $0x3,%eax
f01165d1:	01 d8                	add    %ebx,%eax
f01165d3:	8b 40 08             	mov    0x8(%eax),%eax
f01165d6:	39 c1                	cmp    %eax,%ecx
f01165d8:	74 17                	je     f01165f1 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01165da:	83 ec 04             	sub    $0x4,%esp
f01165dd:	68 a8 a7 13 f0       	push   $0xf013a7a8
f01165e2:	68 bb 00 00 00       	push   $0xbb
f01165e7:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01165ec:	e8 0a 9c fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01165f1:	ff 45 bc             	incl   -0x44(%ebp)
f01165f4:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01165f8:	7e 80                	jle    f011657a <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01165fa:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116601:	eb 7a                	jmp    f011667d <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116603:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116606:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011660d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116610:	8b 58 78             	mov    0x78(%eax),%ebx
f0116613:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116616:	89 d0                	mov    %edx,%eax
f0116618:	01 c0                	add    %eax,%eax
f011661a:	01 d0                	add    %edx,%eax
f011661c:	c1 e0 03             	shl    $0x3,%eax
f011661f:	01 d8                	add    %ebx,%eax
f0116621:	8b 00                	mov    (%eax),%eax
f0116623:	39 c1                	cmp    %eax,%ecx
f0116625:	74 17                	je     f011663e <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f0116627:	83 ec 04             	sub    $0x4,%esp
f011662a:	68 a8 a7 13 f0       	push   $0xf013a7a8
f011662f:	68 c1 00 00 00       	push   $0xc1
f0116634:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116639:	e8 bd 9b fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011663e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116641:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0116648:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011664b:	8b 58 78             	mov    0x78(%eax),%ebx
f011664e:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116651:	89 d0                	mov    %edx,%eax
f0116653:	01 c0                	add    %eax,%eax
f0116655:	01 d0                	add    %edx,%eax
f0116657:	c1 e0 03             	shl    $0x3,%eax
f011665a:	01 d8                	add    %ebx,%eax
f011665c:	8b 40 08             	mov    0x8(%eax),%eax
f011665f:	39 c1                	cmp    %eax,%ecx
f0116661:	74 17                	je     f011667a <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f0116663:	83 ec 04             	sub    $0x4,%esp
f0116666:	68 a8 a7 13 f0       	push   $0xf013a7a8
f011666b:	68 c4 00 00 00       	push   $0xc4
f0116670:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116675:	e8 81 9b fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011667a:	ff 45 b8             	incl   -0x48(%ebp)
f011667d:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0116681:	7e 80                	jle    f0116603 <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116683:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011668a:	75 6e 61 
f011668d:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116694:	6c 00 00 
f0116697:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011669d:	b9 17 00 00 00       	mov    $0x17,%ecx
f01166a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01166a7:	89 d7                	mov    %edx,%edi
f01166a9:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01166ab:	83 ec 0c             	sub    $0xc,%esp
f01166ae:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01166b4:	50                   	push   %eax
f01166b5:	e8 2a a6 fe ff       	call   f0100ce4 <execute_command>
f01166ba:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01166bd:	eb 10                	jmp    f01166cf <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01166bf:	83 ec 0c             	sub    $0xc,%esp
f01166c2:	68 dc a7 13 f0       	push   $0xf013a7dc
f01166c7:	e8 b6 a5 fe ff       	call   f0100c82 <cprintf>
f01166cc:	83 c4 10             	add    $0x10,%esp
	}
}
f01166cf:	90                   	nop
f01166d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01166d3:	5b                   	pop    %ebx
f01166d4:	5e                   	pop    %esi
f01166d5:	5f                   	pop    %edi
f01166d6:	5d                   	pop    %ebp
f01166d7:	c3                   	ret    

f01166d8 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01166d8:	55                   	push   %ebp
f01166d9:	89 e5                	mov    %esp,%ebp
f01166db:	57                   	push   %edi
f01166dc:	56                   	push   %esi
f01166dd:	53                   	push   %ebx
f01166de:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01166e4:	a0 ce 1c 19 f0       	mov    0xf0191cce,%al
f01166e9:	84 c0                	test   %al,%al
f01166eb:	0f 84 be 09 00 00    	je     f01170af <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01166f1:	c6 05 ce 1c 19 f0 00 	movb   $0x0,0xf0191cce
		char command[100] = "load fos_add 20";
f01166f8:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01166fe:	bb 18 a8 13 f0       	mov    $0xf013a818,%ebx
f0116703:	ba 04 00 00 00       	mov    $0x4,%edx
f0116708:	89 c7                	mov    %eax,%edi
f011670a:	89 de                	mov    %ebx,%esi
f011670c:	89 d1                	mov    %edx,%ecx
f011670e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116710:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116716:	b9 15 00 00 00       	mov    $0x15,%ecx
f011671b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116720:	89 d7                	mov    %edx,%edi
f0116722:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116724:	83 ec 0c             	sub    $0xc,%esp
f0116727:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011672d:	50                   	push   %eax
f011672e:	e8 b1 a5 fe ff       	call   f0100ce4 <execute_command>
f0116733:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0116736:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011673c:	bb d4 aa 13 f0       	mov    $0xf013aad4,%ebx
f0116741:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116746:	89 c7                	mov    %eax,%edi
f0116748:	89 de                	mov    %ebx,%esi
f011674a:	89 d1                	mov    %edx,%ecx
f011674c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011674e:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0116754:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116759:	b0 00                	mov    $0x0,%al
f011675b:	89 d7                	mov    %edx,%edi
f011675d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011675f:	83 ec 0c             	sub    $0xc,%esp
f0116762:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0116768:	50                   	push   %eax
f0116769:	e8 76 a5 fe ff       	call   f0100ce4 <execute_command>
f011676e:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0116771:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116777:	bb 38 ab 13 f0       	mov    $0xf013ab38,%ebx
f011677c:	ba 17 00 00 00       	mov    $0x17,%edx
f0116781:	89 c7                	mov    %eax,%edi
f0116783:	89 de                	mov    %ebx,%esi
f0116785:	89 d1                	mov    %edx,%ecx
f0116787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116789:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011678f:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116794:	b0 00                	mov    $0x0,%al
f0116796:	89 d7                	mov    %edx,%edi
f0116798:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011679a:	83 ec 0c             	sub    $0xc,%esp
f011679d:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01167a3:	50                   	push   %eax
f01167a4:	e8 3b a5 fe ff       	call   f0100ce4 <execute_command>
f01167a9:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01167ac:	83 ec 04             	sub    $0x4,%esp
f01167af:	6a 00                	push   $0x0
f01167b1:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01167b4:	50                   	push   %eax
f01167b5:	68 00 10 00 00       	push   $0x1000
f01167ba:	e8 48 31 ff ff       	call   f0109907 <envid2env>
f01167bf:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01167c2:	83 ec 04             	sub    $0x4,%esp
f01167c5:	6a 00                	push   $0x0
f01167c7:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01167ca:	50                   	push   %eax
f01167cb:	68 01 10 00 00       	push   $0x1001
f01167d0:	e8 32 31 ff ff       	call   f0109907 <envid2env>
f01167d5:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01167d8:	83 ec 04             	sub    $0x4,%esp
f01167db:	6a 00                	push   $0x0
f01167dd:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01167e0:	50                   	push   %eax
f01167e1:	68 02 10 00 00       	push   $0x1002
f01167e6:	e8 1c 31 ff ff       	call   f0109907 <envid2env>
f01167eb:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01167ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01167f1:	85 c0                	test   %eax,%eax
f01167f3:	74 0e                	je     f0116803 <test_priority_normal_and_lower+0x12b>
f01167f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01167f8:	85 c0                	test   %eax,%eax
f01167fa:	74 07                	je     f0116803 <test_priority_normal_and_lower+0x12b>
f01167fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167ff:	85 c0                	test   %eax,%eax
f0116801:	75 17                	jne    f011681a <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116803:	83 ec 04             	sub    $0x4,%esp
f0116806:	68 b8 a5 13 f0       	push   $0xf013a5b8
f011680b:	68 eb 00 00 00       	push   $0xeb
f0116810:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116815:	e8 e1 99 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011681a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011681d:	8b 40 74             	mov    0x74(%eax),%eax
f0116820:	83 f8 14             	cmp    $0x14,%eax
f0116823:	75 16                	jne    f011683b <test_priority_normal_and_lower+0x163>
f0116825:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116828:	8b 40 74             	mov    0x74(%eax),%eax
f011682b:	83 f8 1e             	cmp    $0x1e,%eax
f011682e:	75 0b                	jne    f011683b <test_priority_normal_and_lower+0x163>
f0116830:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116833:	8b 40 74             	mov    0x74(%eax),%eax
f0116836:	83 f8 28             	cmp    $0x28,%eax
f0116839:	74 17                	je     f0116852 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f011683b:	83 ec 04             	sub    $0x4,%esp
f011683e:	68 ec a5 13 f0       	push   $0xf013a5ec
f0116843:	68 ee 00 00 00       	push   $0xee
f0116848:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011684d:	e8 a9 99 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 20; i++)
f0116852:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116859:	eb 44                	jmp    f011689f <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011685b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011685e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116861:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116864:	89 d0                	mov    %edx,%eax
f0116866:	01 c0                	add    %eax,%eax
f0116868:	01 d0                	add    %edx,%eax
f011686a:	c1 e0 03             	shl    $0x3,%eax
f011686d:	01 c8                	add    %ecx,%eax
f011686f:	8b 10                	mov    (%eax),%edx
f0116871:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116874:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011687b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011687e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116881:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116884:	89 d0                	mov    %edx,%eax
f0116886:	01 c0                	add    %eax,%eax
f0116888:	01 d0                	add    %edx,%eax
f011688a:	c1 e0 03             	shl    $0x3,%eax
f011688d:	01 c8                	add    %ecx,%eax
f011688f:	8b 50 08             	mov    0x8(%eax),%edx
f0116892:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116895:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011689c:	ff 45 e4             	incl   -0x1c(%ebp)
f011689f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01168a3:	7e b6                	jle    f011685b <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01168a5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01168ac:	eb 44                	jmp    f01168f2 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01168ae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168b1:	8b 48 78             	mov    0x78(%eax),%ecx
f01168b4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168b7:	89 d0                	mov    %edx,%eax
f01168b9:	01 c0                	add    %eax,%eax
f01168bb:	01 d0                	add    %edx,%eax
f01168bd:	c1 e0 03             	shl    $0x3,%eax
f01168c0:	01 c8                	add    %ecx,%eax
f01168c2:	8b 10                	mov    (%eax),%edx
f01168c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168c7:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01168ce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168d1:	8b 48 78             	mov    0x78(%eax),%ecx
f01168d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01168d7:	89 d0                	mov    %edx,%eax
f01168d9:	01 c0                	add    %eax,%eax
f01168db:	01 d0                	add    %edx,%eax
f01168dd:	c1 e0 03             	shl    $0x3,%eax
f01168e0:	01 c8                	add    %ecx,%eax
f01168e2:	8b 50 08             	mov    0x8(%eax),%edx
f01168e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01168e8:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01168ef:	ff 45 e0             	incl   -0x20(%ebp)
f01168f2:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01168f6:	7e b6                	jle    f01168ae <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01168f8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01168ff:	eb 44                	jmp    f0116945 <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116901:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116904:	8b 48 78             	mov    0x78(%eax),%ecx
f0116907:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011690a:	89 d0                	mov    %edx,%eax
f011690c:	01 c0                	add    %eax,%eax
f011690e:	01 d0                	add    %edx,%eax
f0116910:	c1 e0 03             	shl    $0x3,%eax
f0116913:	01 c8                	add    %ecx,%eax
f0116915:	8b 10                	mov    (%eax),%edx
f0116917:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011691a:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116921:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116924:	8b 48 78             	mov    0x78(%eax),%ecx
f0116927:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011692a:	89 d0                	mov    %edx,%eax
f011692c:	01 c0                	add    %eax,%eax
f011692e:	01 d0                	add    %edx,%eax
f0116930:	c1 e0 03             	shl    $0x3,%eax
f0116933:	01 c8                	add    %ecx,%eax
f0116935:	8b 50 08             	mov    0x8(%eax),%edx
f0116938:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011693b:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116942:	ff 45 dc             	incl   -0x24(%ebp)
f0116945:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0116949:	7e b6                	jle    f0116901 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011694b:	e8 6f 5f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116950:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116953:	e8 e4 d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116958:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011695b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011695e:	83 ec 08             	sub    $0x8,%esp
f0116961:	6a 03                	push   $0x3
f0116963:	50                   	push   %eax
f0116964:	e8 33 44 ff ff       	call   f010ad9c <set_program_priority>
f0116969:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011696c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011696f:	83 ec 08             	sub    $0x8,%esp
f0116972:	6a 03                	push   $0x3
f0116974:	50                   	push   %eax
f0116975:	e8 22 44 ff ff       	call   f010ad9c <set_program_priority>
f011697a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011697d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116980:	83 ec 08             	sub    $0x8,%esp
f0116983:	6a 03                	push   $0x3
f0116985:	50                   	push   %eax
f0116986:	e8 11 44 ff ff       	call   f010ad9c <set_program_priority>
f011698b:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011698e:	e8 a9 d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116993:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116996:	74 17                	je     f01169af <test_priority_normal_and_lower+0x2d7>
f0116998:	83 ec 04             	sub    $0x4,%esp
f011699b:	68 38 a6 13 f0       	push   $0xf013a638
f01169a0:	68 0a 01 00 00       	push   $0x10a
f01169a5:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01169aa:	e8 4c 98 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01169af:	e8 0b 5f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01169b4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01169b7:	74 17                	je     f01169d0 <test_priority_normal_and_lower+0x2f8>
f01169b9:	83 ec 04             	sub    $0x4,%esp
f01169bc:	68 38 a6 13 f0       	push   $0xf013a638
f01169c1:	68 0b 01 00 00       	push   $0x10b
f01169c6:	68 d1 a5 13 f0       	push   $0xf013a5d1
f01169cb:	e8 2b 98 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01169d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01169d3:	8b 40 74             	mov    0x74(%eax),%eax
f01169d6:	83 f8 14             	cmp    $0x14,%eax
f01169d9:	75 16                	jne    f01169f1 <test_priority_normal_and_lower+0x319>
f01169db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169de:	8b 40 74             	mov    0x74(%eax),%eax
f01169e1:	83 f8 1e             	cmp    $0x1e,%eax
f01169e4:	75 0b                	jne    f01169f1 <test_priority_normal_and_lower+0x319>
f01169e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01169e9:	8b 40 74             	mov    0x74(%eax),%eax
f01169ec:	83 f8 28             	cmp    $0x28,%eax
f01169ef:	74 17                	je     f0116a08 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01169f1:	83 ec 04             	sub    $0x4,%esp
f01169f4:	68 64 a6 13 f0       	push   $0xf013a664
f01169f9:	68 0e 01 00 00       	push   $0x10e
f01169fe:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a03:	e8 f3 97 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116a08:	e8 b2 5e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116a0d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a10:	e8 27 d3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116a15:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116a18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a1b:	83 ec 08             	sub    $0x8,%esp
f0116a1e:	6a 02                	push   $0x2
f0116a20:	50                   	push   %eax
f0116a21:	e8 76 43 ff ff       	call   f010ad9c <set_program_priority>
f0116a26:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116a29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a2c:	83 ec 08             	sub    $0x8,%esp
f0116a2f:	6a 02                	push   $0x2
f0116a31:	50                   	push   %eax
f0116a32:	e8 65 43 ff ff       	call   f010ad9c <set_program_priority>
f0116a37:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116a3a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116a3d:	83 ec 08             	sub    $0x8,%esp
f0116a40:	6a 02                	push   $0x2
f0116a42:	50                   	push   %eax
f0116a43:	e8 54 43 ff ff       	call   f010ad9c <set_program_priority>
f0116a48:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116a4b:	e8 ec d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116a50:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116a53:	74 17                	je     f0116a6c <test_priority_normal_and_lower+0x394>
f0116a55:	83 ec 04             	sub    $0x4,%esp
f0116a58:	68 38 a6 13 f0       	push   $0xf013a638
f0116a5d:	68 18 01 00 00       	push   $0x118
f0116a62:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a67:	e8 8f 97 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116a6c:	e8 4e 5e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116a71:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116a74:	74 21                	je     f0116a97 <test_priority_normal_and_lower+0x3bf>
f0116a76:	e8 44 5e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116a7b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a7e:	29 c2                	sub    %eax,%edx
f0116a80:	89 d0                	mov    %edx,%eax
f0116a82:	50                   	push   %eax
f0116a83:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116a88:	68 19 01 00 00       	push   $0x119
f0116a8d:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116a92:	e8 64 97 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116a97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116a9a:	8b 40 74             	mov    0x74(%eax),%eax
f0116a9d:	83 f8 0a             	cmp    $0xa,%eax
f0116aa0:	75 16                	jne    f0116ab8 <test_priority_normal_and_lower+0x3e0>
f0116aa2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116aa5:	8b 40 74             	mov    0x74(%eax),%eax
f0116aa8:	83 f8 0f             	cmp    $0xf,%eax
f0116aab:	75 0b                	jne    f0116ab8 <test_priority_normal_and_lower+0x3e0>
f0116aad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116ab0:	8b 40 74             	mov    0x74(%eax),%eax
f0116ab3:	83 f8 14             	cmp    $0x14,%eax
f0116ab6:	74 17                	je     f0116acf <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116ab8:	83 ec 04             	sub    $0x4,%esp
f0116abb:	68 e8 a6 13 f0       	push   $0xf013a6e8
f0116ac0:	68 1c 01 00 00       	push   $0x11c
f0116ac5:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116aca:	e8 2c 97 fe ff       	call   f01001fb <_panic>

		freeFrames = sys_calculate_free_frames();
f0116acf:	e8 eb 5d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116ad4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ad7:	e8 60 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116adc:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116adf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ae2:	83 ec 08             	sub    $0x8,%esp
f0116ae5:	6a 02                	push   $0x2
f0116ae7:	50                   	push   %eax
f0116ae8:	e8 af 42 ff ff       	call   f010ad9c <set_program_priority>
f0116aed:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0116af0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116af3:	83 ec 08             	sub    $0x8,%esp
f0116af6:	6a 02                	push   $0x2
f0116af8:	50                   	push   %eax
f0116af9:	e8 9e 42 ff ff       	call   f010ad9c <set_program_priority>
f0116afe:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0116b01:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b04:	83 ec 08             	sub    $0x8,%esp
f0116b07:	6a 02                	push   $0x2
f0116b09:	50                   	push   %eax
f0116b0a:	e8 8d 42 ff ff       	call   f010ad9c <set_program_priority>
f0116b0f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116b12:	e8 25 d2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116b17:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116b1a:	74 17                	je     f0116b33 <test_priority_normal_and_lower+0x45b>
f0116b1c:	83 ec 04             	sub    $0x4,%esp
f0116b1f:	68 38 a6 13 f0       	push   $0xf013a638
f0116b24:	68 26 01 00 00       	push   $0x126
f0116b29:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b2e:	e8 c8 96 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0116b33:	e8 87 5d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116b38:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116b3b:	74 21                	je     f0116b5e <test_priority_normal_and_lower+0x486>
f0116b3d:	e8 7d 5d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116b42:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116b45:	29 c2                	sub    %eax,%edx
f0116b47:	89 d0                	mov    %edx,%eax
f0116b49:	50                   	push   %eax
f0116b4a:	68 b8 a6 13 f0       	push   $0xf013a6b8
f0116b4f:	68 27 01 00 00       	push   $0x127
f0116b54:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b59:	e8 9d 96 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116b5e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116b61:	8b 40 74             	mov    0x74(%eax),%eax
f0116b64:	83 f8 0a             	cmp    $0xa,%eax
f0116b67:	75 16                	jne    f0116b7f <test_priority_normal_and_lower+0x4a7>
f0116b69:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b6c:	8b 40 74             	mov    0x74(%eax),%eax
f0116b6f:	83 f8 0f             	cmp    $0xf,%eax
f0116b72:	75 0b                	jne    f0116b7f <test_priority_normal_and_lower+0x4a7>
f0116b74:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116b77:	8b 40 74             	mov    0x74(%eax),%eax
f0116b7a:	83 f8 0a             	cmp    $0xa,%eax
f0116b7d:	74 17                	je     f0116b96 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116b7f:	83 ec 04             	sub    $0x4,%esp
f0116b82:	68 e8 a6 13 f0       	push   $0xf013a6e8
f0116b87:	68 2a 01 00 00       	push   $0x12a
f0116b8c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116b91:	e8 65 96 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 10; i++)
f0116b96:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116b9d:	eb 7a                	jmp    f0116c19 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116b9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116ba2:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116ba9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116bac:	8b 58 78             	mov    0x78(%eax),%ebx
f0116baf:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116bb2:	89 d0                	mov    %edx,%eax
f0116bb4:	01 c0                	add    %eax,%eax
f0116bb6:	01 d0                	add    %edx,%eax
f0116bb8:	c1 e0 03             	shl    $0x3,%eax
f0116bbb:	01 d8                	add    %ebx,%eax
f0116bbd:	8b 00                	mov    (%eax),%eax
f0116bbf:	39 c1                	cmp    %eax,%ecx
f0116bc1:	74 17                	je     f0116bda <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0116bc3:	83 ec 04             	sub    $0x4,%esp
f0116bc6:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116bcb:	68 2f 01 00 00       	push   $0x12f
f0116bd0:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116bd5:	e8 21 96 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116bda:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116bdd:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116be4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116be7:	8b 58 78             	mov    0x78(%eax),%ebx
f0116bea:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116bed:	89 d0                	mov    %edx,%eax
f0116bef:	01 c0                	add    %eax,%eax
f0116bf1:	01 d0                	add    %edx,%eax
f0116bf3:	c1 e0 03             	shl    $0x3,%eax
f0116bf6:	01 d8                	add    %ebx,%eax
f0116bf8:	8b 40 08             	mov    0x8(%eax),%eax
f0116bfb:	39 c1                	cmp    %eax,%ecx
f0116bfd:	74 17                	je     f0116c16 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0116bff:	83 ec 04             	sub    $0x4,%esp
f0116c02:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c07:	68 32 01 00 00       	push   $0x132
f0116c0c:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116c11:	e8 e5 95 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116c16:	ff 45 d8             	incl   -0x28(%ebp)
f0116c19:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116c1d:	7e 80                	jle    f0116b9f <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116c1f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0116c26:	eb 7a                	jmp    f0116ca2 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116c28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116c2b:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116c32:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c35:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c38:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116c3b:	89 d0                	mov    %edx,%eax
f0116c3d:	01 c0                	add    %eax,%eax
f0116c3f:	01 d0                	add    %edx,%eax
f0116c41:	c1 e0 03             	shl    $0x3,%eax
f0116c44:	01 d8                	add    %ebx,%eax
f0116c46:	8b 00                	mov    (%eax),%eax
f0116c48:	39 c1                	cmp    %eax,%ecx
f0116c4a:	74 17                	je     f0116c63 <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0116c4c:	83 ec 04             	sub    $0x4,%esp
f0116c4f:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c54:	68 38 01 00 00       	push   $0x138
f0116c59:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116c5e:	e8 98 95 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116c63:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116c66:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116c6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c70:	8b 58 78             	mov    0x78(%eax),%ebx
f0116c73:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0116c76:	89 d0                	mov    %edx,%eax
f0116c78:	01 c0                	add    %eax,%eax
f0116c7a:	01 d0                	add    %edx,%eax
f0116c7c:	c1 e0 03             	shl    $0x3,%eax
f0116c7f:	01 d8                	add    %ebx,%eax
f0116c81:	8b 40 08             	mov    0x8(%eax),%eax
f0116c84:	39 c1                	cmp    %eax,%ecx
f0116c86:	74 17                	je     f0116c9f <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0116c88:	83 ec 04             	sub    $0x4,%esp
f0116c8b:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116c90:	68 3b 01 00 00       	push   $0x13b
f0116c95:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116c9a:	e8 5c 95 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116c9f:	ff 45 d4             	incl   -0x2c(%ebp)
f0116ca2:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0116ca6:	7e 80                	jle    f0116c28 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116ca8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116caf:	eb 7a                	jmp    f0116d2b <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116cb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116cb4:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116cbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116cbe:	8b 58 78             	mov    0x78(%eax),%ebx
f0116cc1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116cc4:	89 d0                	mov    %edx,%eax
f0116cc6:	01 c0                	add    %eax,%eax
f0116cc8:	01 d0                	add    %edx,%eax
f0116cca:	c1 e0 03             	shl    $0x3,%eax
f0116ccd:	01 d8                	add    %ebx,%eax
f0116ccf:	8b 00                	mov    (%eax),%eax
f0116cd1:	39 c1                	cmp    %eax,%ecx
f0116cd3:	74 17                	je     f0116cec <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0116cd5:	83 ec 04             	sub    $0x4,%esp
f0116cd8:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116cdd:	68 41 01 00 00       	push   $0x141
f0116ce2:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116ce7:	e8 0f 95 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116cec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116cef:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116cf6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116cf9:	8b 58 78             	mov    0x78(%eax),%ebx
f0116cfc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116cff:	89 d0                	mov    %edx,%eax
f0116d01:	01 c0                	add    %eax,%eax
f0116d03:	01 d0                	add    %edx,%eax
f0116d05:	c1 e0 03             	shl    $0x3,%eax
f0116d08:	01 d8                	add    %ebx,%eax
f0116d0a:	8b 40 08             	mov    0x8(%eax),%eax
f0116d0d:	39 c1                	cmp    %eax,%ecx
f0116d0f:	74 17                	je     f0116d28 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0116d11:	83 ec 04             	sub    $0x4,%esp
f0116d14:	68 a8 a7 13 f0       	push   $0xf013a7a8
f0116d19:	68 44 01 00 00       	push   $0x144
f0116d1e:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116d23:	e8 d3 94 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116d28:	ff 45 d0             	incl   -0x30(%ebp)
f0116d2b:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0116d2f:	7e 80                	jle    f0116cb1 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0116d31:	e8 89 5b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116d36:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d39:	e8 fe cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116d3e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116d41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d44:	83 ec 08             	sub    $0x8,%esp
f0116d47:	6a 01                	push   $0x1
f0116d49:	50                   	push   %eax
f0116d4a:	e8 4d 40 ff ff       	call   f010ad9c <set_program_priority>
f0116d4f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0116d52:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d55:	83 ec 08             	sub    $0x8,%esp
f0116d58:	6a 01                	push   $0x1
f0116d5a:	50                   	push   %eax
f0116d5b:	e8 3c 40 ff ff       	call   f010ad9c <set_program_priority>
f0116d60:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0116d63:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d66:	83 ec 08             	sub    $0x8,%esp
f0116d69:	6a 01                	push   $0x1
f0116d6b:	50                   	push   %eax
f0116d6c:	e8 2b 40 ff ff       	call   f010ad9c <set_program_priority>
f0116d71:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116d74:	e8 c3 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116d79:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116d7c:	74 17                	je     f0116d95 <test_priority_normal_and_lower+0x6bd>
f0116d7e:	83 ec 04             	sub    $0x4,%esp
f0116d81:	68 38 a6 13 f0       	push   $0xf013a638
f0116d86:	68 4d 01 00 00       	push   $0x14d
f0116d8b:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116d90:	e8 66 94 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0116d95:	e8 25 5b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116d9a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116d9d:	83 f8 0d             	cmp    $0xd,%eax
f0116da0:	74 17                	je     f0116db9 <test_priority_normal_and_lower+0x6e1>
f0116da2:	83 ec 04             	sub    $0x4,%esp
f0116da5:	68 44 a9 13 f0       	push   $0xf013a944
f0116daa:	68 4e 01 00 00       	push   $0x14e
f0116daf:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116db4:	e8 42 94 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116db9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116dbc:	8b 40 74             	mov    0x74(%eax),%eax
f0116dbf:	83 f8 05             	cmp    $0x5,%eax
f0116dc2:	75 16                	jne    f0116dda <test_priority_normal_and_lower+0x702>
f0116dc4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116dc7:	8b 40 74             	mov    0x74(%eax),%eax
f0116dca:	83 f8 07             	cmp    $0x7,%eax
f0116dcd:	75 0b                	jne    f0116dda <test_priority_normal_and_lower+0x702>
f0116dcf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116dd2:	8b 40 74             	mov    0x74(%eax),%eax
f0116dd5:	83 f8 05             	cmp    $0x5,%eax
f0116dd8:	74 17                	je     f0116df1 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0116dda:	83 ec 04             	sub    $0x4,%esp
f0116ddd:	68 8c a9 13 f0       	push   $0xf013a98c
f0116de2:	68 51 01 00 00       	push   $0x151
f0116de7:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116dec:	e8 0a 94 fe ff       	call   f01001fb <_panic>


		freeFrames = sys_calculate_free_frames();
f0116df1:	e8 c9 5a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116df6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116df9:	e8 3e cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116dfe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116e01:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e04:	83 ec 08             	sub    $0x8,%esp
f0116e07:	6a 01                	push   $0x1
f0116e09:	50                   	push   %eax
f0116e0a:	e8 8d 3f ff ff       	call   f010ad9c <set_program_priority>
f0116e0f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e12:	e8 25 cf fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0116e17:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116e1a:	74 17                	je     f0116e33 <test_priority_normal_and_lower+0x75b>
f0116e1c:	83 ec 04             	sub    $0x4,%esp
f0116e1f:	68 38 a6 13 f0       	push   $0xf013a638
f0116e24:	68 57 01 00 00       	push   $0x157
f0116e29:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e2e:	e8 c8 93 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0116e33:	e8 87 5a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0116e38:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116e3b:	83 f8 03             	cmp    $0x3,%eax
f0116e3e:	74 17                	je     f0116e57 <test_priority_normal_and_lower+0x77f>
f0116e40:	83 ec 04             	sub    $0x4,%esp
f0116e43:	68 38 a6 13 f0       	push   $0xf013a638
f0116e48:	68 58 01 00 00       	push   $0x158
f0116e4d:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e52:	e8 a4 93 fe ff       	call   f01001fb <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116e57:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116e5a:	8b 40 74             	mov    0x74(%eax),%eax
f0116e5d:	83 f8 02             	cmp    $0x2,%eax
f0116e60:	75 16                	jne    f0116e78 <test_priority_normal_and_lower+0x7a0>
f0116e62:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116e65:	8b 40 74             	mov    0x74(%eax),%eax
f0116e68:	83 f8 07             	cmp    $0x7,%eax
f0116e6b:	75 0b                	jne    f0116e78 <test_priority_normal_and_lower+0x7a0>
f0116e6d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116e70:	8b 40 74             	mov    0x74(%eax),%eax
f0116e73:	83 f8 05             	cmp    $0x5,%eax
f0116e76:	74 17                	je     f0116e8f <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0116e78:	83 ec 04             	sub    $0x4,%esp
f0116e7b:	68 6c a7 13 f0       	push   $0xf013a76c
f0116e80:	68 5b 01 00 00       	push   $0x15b
f0116e85:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116e8a:	e8 6c 93 fe ff       	call   f01001fb <_panic>

		for(int i = 0; i < 2; i++)
f0116e8f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0116e96:	e9 80 00 00 00       	jmp    f0116f1b <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116e9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116e9e:	83 c0 08             	add    $0x8,%eax
f0116ea1:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116ea8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116eab:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eae:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116eb1:	89 d0                	mov    %edx,%eax
f0116eb3:	01 c0                	add    %eax,%eax
f0116eb5:	01 d0                	add    %edx,%eax
f0116eb7:	c1 e0 03             	shl    $0x3,%eax
f0116eba:	01 d8                	add    %ebx,%eax
f0116ebc:	8b 00                	mov    (%eax),%eax
f0116ebe:	39 c1                	cmp    %eax,%ecx
f0116ec0:	74 17                	je     f0116ed9 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116ec2:	83 ec 04             	sub    $0x4,%esp
f0116ec5:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116eca:	68 60 01 00 00       	push   $0x160
f0116ecf:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116ed4:	e8 22 93 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116ed9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116edc:	83 c0 08             	add    $0x8,%eax
f0116edf:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0116ee6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ee9:	8b 58 78             	mov    0x78(%eax),%ebx
f0116eec:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116eef:	89 d0                	mov    %edx,%eax
f0116ef1:	01 c0                	add    %eax,%eax
f0116ef3:	01 d0                	add    %edx,%eax
f0116ef5:	c1 e0 03             	shl    $0x3,%eax
f0116ef8:	01 d8                	add    %ebx,%eax
f0116efa:	8b 40 08             	mov    0x8(%eax),%eax
f0116efd:	39 c1                	cmp    %eax,%ecx
f0116eff:	74 17                	je     f0116f18 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116f01:	83 ec 04             	sub    $0x4,%esp
f0116f04:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116f09:	68 63 01 00 00       	push   $0x163
f0116f0e:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116f13:	e8 e3 92 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0116f18:	ff 45 cc             	incl   -0x34(%ebp)
f0116f1b:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116f1f:	0f 8e 76 ff ff ff    	jle    f0116e9b <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116f25:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0116f2c:	e9 80 00 00 00       	jmp    f0116fb1 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0116f31:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116f34:	83 c0 03             	add    $0x3,%eax
f0116f37:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0116f3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f41:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f44:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116f47:	89 d0                	mov    %edx,%eax
f0116f49:	01 c0                	add    %eax,%eax
f0116f4b:	01 d0                	add    %edx,%eax
f0116f4d:	c1 e0 03             	shl    $0x3,%eax
f0116f50:	01 d8                	add    %ebx,%eax
f0116f52:	8b 00                	mov    (%eax),%eax
f0116f54:	39 c1                	cmp    %eax,%ecx
f0116f56:	74 17                	je     f0116f6f <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0116f58:	ff 75 c8             	pushl  -0x38(%ebp)
f0116f5b:	68 28 aa 13 f0       	push   $0xf013aa28
f0116f60:	68 69 01 00 00       	push   $0x169
f0116f65:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116f6a:	e8 8c 92 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116f6f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116f72:	83 c0 03             	add    $0x3,%eax
f0116f75:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0116f7c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116f7f:	8b 58 78             	mov    0x78(%eax),%ebx
f0116f82:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0116f85:	89 d0                	mov    %edx,%eax
f0116f87:	01 c0                	add    %eax,%eax
f0116f89:	01 d0                	add    %edx,%eax
f0116f8b:	c1 e0 03             	shl    $0x3,%eax
f0116f8e:	01 d8                	add    %ebx,%eax
f0116f90:	8b 40 08             	mov    0x8(%eax),%eax
f0116f93:	39 c1                	cmp    %eax,%ecx
f0116f95:	74 17                	je     f0116fae <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116f97:	83 ec 04             	sub    $0x4,%esp
f0116f9a:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116f9f:	68 6c 01 00 00       	push   $0x16c
f0116fa4:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0116fa9:	e8 4d 92 fe ff       	call   f01001fb <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116fae:	ff 45 c8             	incl   -0x38(%ebp)
f0116fb1:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116fb5:	0f 8e 76 ff ff ff    	jle    f0116f31 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116fbb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116fc2:	e9 80 00 00 00       	jmp    f0117047 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116fc7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116fca:	83 c0 05             	add    $0x5,%eax
f0116fcd:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116fd4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116fd7:	8b 58 78             	mov    0x78(%eax),%ebx
f0116fda:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116fdd:	89 d0                	mov    %edx,%eax
f0116fdf:	01 c0                	add    %eax,%eax
f0116fe1:	01 d0                	add    %edx,%eax
f0116fe3:	c1 e0 03             	shl    $0x3,%eax
f0116fe6:	01 d8                	add    %ebx,%eax
f0116fe8:	8b 00                	mov    (%eax),%eax
f0116fea:	39 c1                	cmp    %eax,%ecx
f0116fec:	74 17                	je     f0117005 <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116fee:	83 ec 04             	sub    $0x4,%esp
f0116ff1:	68 bc a9 13 f0       	push   $0xf013a9bc
f0116ff6:	68 72 01 00 00       	push   $0x172
f0116ffb:	68 d1 a5 13 f0       	push   $0xf013a5d1
f0117000:	e8 f6 91 fe ff       	call   f01001fb <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117005:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117008:	83 c0 05             	add    $0x5,%eax
f011700b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117012:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117015:	8b 58 78             	mov    0x78(%eax),%ebx
f0117018:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011701b:	89 d0                	mov    %edx,%eax
f011701d:	01 c0                	add    %eax,%eax
f011701f:	01 d0                	add    %edx,%eax
f0117021:	c1 e0 03             	shl    $0x3,%eax
f0117024:	01 d8                	add    %ebx,%eax
f0117026:	8b 40 08             	mov    0x8(%eax),%eax
f0117029:	39 c1                	cmp    %eax,%ecx
f011702b:	74 17                	je     f0117044 <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011702d:	83 ec 04             	sub    $0x4,%esp
f0117030:	68 bc a9 13 f0       	push   $0xf013a9bc
f0117035:	68 75 01 00 00       	push   $0x175
f011703a:	68 d1 a5 13 f0       	push   $0xf013a5d1
f011703f:	e8 b7 91 fe ff       	call   f01001fb <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117044:	ff 45 c4             	incl   -0x3c(%ebp)
f0117047:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f011704b:	0f 8e 76 ff ff ff    	jle    f0116fc7 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117051:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117054:	83 ec 08             	sub    $0x8,%esp
f0117057:	6a 05                	push   $0x5
f0117059:	50                   	push   %eax
f011705a:	e8 3d 3d ff ff       	call   f010ad9c <set_program_priority>
f011705f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117062:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117065:	83 ec 08             	sub    $0x8,%esp
f0117068:	6a 05                	push   $0x5
f011706a:	50                   	push   %eax
f011706b:	e8 2c 3d ff ff       	call   f010ad9c <set_program_priority>
f0117070:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117073:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011707a:	75 6e 61 
f011707d:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117084:	6c 00 00 
f0117087:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011708d:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117092:	b8 00 00 00 00       	mov    $0x0,%eax
f0117097:	89 d7                	mov    %edx,%edi
f0117099:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011709b:	83 ec 0c             	sub    $0xc,%esp
f011709e:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f01170a4:	50                   	push   %eax
f01170a5:	e8 3a 9c fe ff       	call   f0100ce4 <execute_command>
f01170aa:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f01170ad:	eb 10                	jmp    f01170bf <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f01170af:	83 ec 0c             	sub    $0xc,%esp
f01170b2:	68 98 aa 13 f0       	push   $0xf013aa98
f01170b7:	e8 c6 9b fe ff       	call   f0100c82 <cprintf>
f01170bc:	83 c4 10             	add    $0x10,%esp
	}
}
f01170bf:	90                   	nop
f01170c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01170c3:	5b                   	pop    %ebx
f01170c4:	5e                   	pop    %esi
f01170c5:	5f                   	pop    %edi
f01170c6:	5d                   	pop    %ebp
f01170c7:	c3                   	ret    

f01170c8 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01170c8:	55                   	push   %ebp
f01170c9:	89 e5                	mov    %esp,%ebp
f01170cb:	a1 5c 7b 65 f0       	mov    0xf0657b5c,%eax
f01170d0:	83 f8 03             	cmp    $0x3,%eax
f01170d3:	75 04                	jne    f01170d9 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01170d5:	b0 01                	mov    $0x1,%al
f01170d7:	eb 02                	jmp    f01170db <isKHeapPlacementStrategyNEXTFIT+0x13>
f01170d9:	b0 00                	mov    $0x0,%al
f01170db:	5d                   	pop    %ebp
f01170dc:	c3                   	ret    

f01170dd <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f01170dd:	55                   	push   %ebp
f01170de:	89 e5                	mov    %esp,%ebp
f01170e0:	57                   	push   %edi
f01170e1:	53                   	push   %ebx
f01170e2:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f01170e8:	83 ec 0c             	sub    $0xc,%esp
f01170eb:	68 9c ab 13 f0       	push   $0xf013ab9c
f01170f0:	e8 8d 9b fe ff       	call   f0100c82 <cprintf>
f01170f5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01170f8:	83 ec 0c             	sub    $0xc,%esp
f01170fb:	68 cc ab 13 f0       	push   $0xf013abcc
f0117100:	e8 7d 9b fe ff       	call   f0100c82 <cprintf>
f0117105:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117108:	83 ec 0c             	sub    $0xc,%esp
f011710b:	68 9c ab 13 f0       	push   $0xf013ab9c
f0117110:	e8 6d 9b fe ff       	call   f0100c82 <cprintf>
f0117115:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117118:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f011711c:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117120:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117126:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f011712c:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117133:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011713a:	e8 80 57 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011713f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117142:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117148:	b9 14 00 00 00       	mov    $0x14,%ecx
f011714d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117152:	89 d7                	mov    %edx,%edi
f0117154:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117156:	e8 64 57 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011715b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011715e:	e8 d9 cb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117163:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117166:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011716d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117170:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117175:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117178:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011717b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117180:	f7 75 d4             	divl   -0x2c(%ebp)
f0117183:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117186:	29 d0                	sub    %edx,%eax
f0117188:	89 c1                	mov    %eax,%ecx
f011718a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117191:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117196:	0f b6 d0             	movzbl %al,%edx
f0117199:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011719c:	01 d0                	add    %edx,%eax
f011719e:	48                   	dec    %eax
f011719f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01171a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01171aa:	f7 75 cc             	divl   -0x34(%ebp)
f01171ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171b0:	29 d0                	sub    %edx,%eax
f01171b2:	01 c1                	add    %eax,%ecx
f01171b4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01171bb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01171c0:	0f b6 c0             	movzbl %al,%eax
f01171c3:	c1 e0 04             	shl    $0x4,%eax
f01171c6:	89 c2                	mov    %eax,%edx
f01171c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01171cb:	01 d0                	add    %edx,%eax
f01171cd:	48                   	dec    %eax
f01171ce:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01171d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01171d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01171d9:	f7 75 c4             	divl   -0x3c(%ebp)
f01171dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01171df:	29 d0                	sub    %edx,%eax
f01171e1:	01 c8                	add    %ecx,%eax
f01171e3:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01171e8:	29 c2                	sub    %eax,%edx
f01171ea:	89 d0                	mov    %edx,%eax
f01171ec:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f01171ef:	83 ec 0c             	sub    $0xc,%esp
f01171f2:	ff 75 bc             	pushl  -0x44(%ebp)
f01171f5:	e8 04 06 ff ff       	call   f01077fe <kmalloc>
f01171fa:	83 c4 10             	add    $0x10,%esp
f01171fd:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0117203:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117209:	85 c0                	test   %eax,%eax
f011720b:	74 14                	je     f0117221 <test_kmalloc+0x144>
f011720d:	83 ec 04             	sub    $0x4,%esp
f0117210:	68 28 ac 13 f0       	push   $0xf013ac28
f0117215:	6a 40                	push   $0x40
f0117217:	68 5a ac 13 f0       	push   $0xf013ac5a
f011721c:	e8 da 8f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117221:	e8 16 cb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117226:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117229:	74 14                	je     f011723f <test_kmalloc+0x162>
f011722b:	83 ec 04             	sub    $0x4,%esp
f011722e:	68 74 ac 13 f0       	push   $0xf013ac74
f0117233:	6a 41                	push   $0x41
f0117235:	68 5a ac 13 f0       	push   $0xf013ac5a
f011723a:	e8 bc 8f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011723f:	e8 7b 56 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117244:	89 c2                	mov    %eax,%edx
f0117246:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117249:	39 c2                	cmp    %eax,%edx
f011724b:	74 14                	je     f0117261 <test_kmalloc+0x184>
f011724d:	83 ec 04             	sub    $0x4,%esp
f0117250:	68 dc ac 13 f0       	push   $0xf013acdc
f0117255:	6a 42                	push   $0x42
f0117257:	68 5a ac 13 f0       	push   $0xf013ac5a
f011725c:	e8 9a 8f fe ff       	call   f01001fb <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0117261:	83 ec 0c             	sub    $0xc,%esp
f0117264:	68 1c ad 13 f0       	push   $0xf013ad1c
f0117269:	e8 14 9a fe ff       	call   f0100c82 <cprintf>
f011726e:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117271:	e8 49 56 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117276:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117279:	e8 be ca fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011727e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117281:	83 ec 0c             	sub    $0xc,%esp
f0117284:	68 00 fc 1f 00       	push   $0x1ffc00
f0117289:	e8 70 05 ff ff       	call   f01077fe <kmalloc>
f011728e:	83 c4 10             	add    $0x10,%esp
f0117291:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117297:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011729d:	89 c1                	mov    %eax,%ecx
f011729f:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01172a6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01172a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01172ae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01172b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01172b9:	f7 75 b8             	divl   -0x48(%ebp)
f01172bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01172bf:	29 d0                	sub    %edx,%eax
f01172c1:	89 c3                	mov    %eax,%ebx
f01172c3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01172ca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01172cf:	0f b6 d0             	movzbl %al,%edx
f01172d2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01172d5:	01 d0                	add    %edx,%eax
f01172d7:	48                   	dec    %eax
f01172d8:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01172db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172de:	ba 00 00 00 00       	mov    $0x0,%edx
f01172e3:	f7 75 b0             	divl   -0x50(%ebp)
f01172e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172e9:	29 d0                	sub    %edx,%eax
f01172eb:	01 c3                	add    %eax,%ebx
f01172ed:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01172f4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01172f9:	0f b6 c0             	movzbl %al,%eax
f01172fc:	c1 e0 04             	shl    $0x4,%eax
f01172ff:	89 c2                	mov    %eax,%edx
f0117301:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117304:	01 d0                	add    %edx,%eax
f0117306:	48                   	dec    %eax
f0117307:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011730a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011730d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117312:	f7 75 a8             	divl   -0x58(%ebp)
f0117315:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117318:	29 d0                	sub    %edx,%eax
f011731a:	01 d8                	add    %ebx,%eax
f011731c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117321:	39 c1                	cmp    %eax,%ecx
f0117323:	74 14                	je     f0117339 <test_kmalloc+0x25c>
f0117325:	83 ec 04             	sub    $0x4,%esp
f0117328:	68 40 ad 13 f0       	push   $0xf013ad40
f011732d:	6a 49                	push   $0x49
f011732f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117334:	e8 c2 8e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117339:	e8 fe c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011733e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117341:	74 14                	je     f0117357 <test_kmalloc+0x27a>
f0117343:	83 ec 04             	sub    $0x4,%esp
f0117346:	68 74 ac 13 f0       	push   $0xf013ac74
f011734b:	6a 4a                	push   $0x4a
f011734d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117352:	e8 a4 8e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117357:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011735a:	e8 60 55 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011735f:	29 c3                	sub    %eax,%ebx
f0117361:	89 d8                	mov    %ebx,%eax
f0117363:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117368:	74 14                	je     f011737e <test_kmalloc+0x2a1>
f011736a:	83 ec 04             	sub    $0x4,%esp
f011736d:	68 dc ac 13 f0       	push   $0xf013acdc
f0117372:	6a 4b                	push   $0x4b
f0117374:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117379:	e8 7d 8e fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011737e:	e8 3c 55 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117383:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117386:	e8 b1 c9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011738b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011738e:	83 ec 0c             	sub    $0xc,%esp
f0117391:	68 00 fc 1f 00       	push   $0x1ffc00
f0117396:	e8 63 04 ff ff       	call   f01077fe <kmalloc>
f011739b:	83 c4 10             	add    $0x10,%esp
f011739e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01173a4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01173aa:	89 c1                	mov    %eax,%ecx
f01173ac:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01173b3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01173b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01173bb:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01173be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01173c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01173c6:	f7 75 a0             	divl   -0x60(%ebp)
f01173c9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01173cc:	29 d0                	sub    %edx,%eax
f01173ce:	89 c3                	mov    %eax,%ebx
f01173d0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01173d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01173dc:	0f b6 d0             	movzbl %al,%edx
f01173df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01173e2:	01 d0                	add    %edx,%eax
f01173e4:	48                   	dec    %eax
f01173e5:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01173e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01173eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01173f0:	f7 75 98             	divl   -0x68(%ebp)
f01173f3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01173f6:	29 d0                	sub    %edx,%eax
f01173f8:	01 c3                	add    %eax,%ebx
f01173fa:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117401:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117406:	0f b6 c0             	movzbl %al,%eax
f0117409:	c1 e0 04             	shl    $0x4,%eax
f011740c:	89 c2                	mov    %eax,%edx
f011740e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117411:	01 d0                	add    %edx,%eax
f0117413:	48                   	dec    %eax
f0117414:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117417:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011741a:	ba 00 00 00 00       	mov    $0x0,%edx
f011741f:	f7 75 90             	divl   -0x70(%ebp)
f0117422:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117425:	29 d0                	sub    %edx,%eax
f0117427:	01 d8                	add    %ebx,%eax
f0117429:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011742e:	39 c1                	cmp    %eax,%ecx
f0117430:	74 14                	je     f0117446 <test_kmalloc+0x369>
f0117432:	83 ec 04             	sub    $0x4,%esp
f0117435:	68 40 ad 13 f0       	push   $0xf013ad40
f011743a:	6a 51                	push   $0x51
f011743c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117441:	e8 b5 8d fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117446:	e8 f1 c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011744b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011744e:	74 14                	je     f0117464 <test_kmalloc+0x387>
f0117450:	83 ec 04             	sub    $0x4,%esp
f0117453:	68 74 ac 13 f0       	push   $0xf013ac74
f0117458:	6a 52                	push   $0x52
f011745a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011745f:	e8 97 8d fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117464:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117467:	e8 53 54 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011746c:	29 c3                	sub    %eax,%ebx
f011746e:	89 d8                	mov    %ebx,%eax
f0117470:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117475:	74 14                	je     f011748b <test_kmalloc+0x3ae>
f0117477:	83 ec 04             	sub    $0x4,%esp
f011747a:	68 dc ac 13 f0       	push   $0xf013acdc
f011747f:	6a 53                	push   $0x53
f0117481:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117486:	e8 70 8d fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011748b:	e8 2f 54 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117490:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117493:	e8 a4 c8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117498:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011749b:	83 ec 0c             	sub    $0xc,%esp
f011749e:	68 00 08 00 00       	push   $0x800
f01174a3:	e8 56 03 ff ff       	call   f01077fe <kmalloc>
f01174a8:	83 c4 10             	add    $0x10,%esp
f01174ab:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01174b1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01174b7:	89 c1                	mov    %eax,%ecx
f01174b9:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01174c0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01174c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01174c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01174cb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01174ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01174d3:	f7 75 88             	divl   -0x78(%ebp)
f01174d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01174d9:	29 d0                	sub    %edx,%eax
f01174db:	89 c3                	mov    %eax,%ebx
f01174dd:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01174e4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01174e9:	0f b6 d0             	movzbl %al,%edx
f01174ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01174ef:	01 d0                	add    %edx,%eax
f01174f1:	48                   	dec    %eax
f01174f2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01174f8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01174fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0117503:	f7 75 80             	divl   -0x80(%ebp)
f0117506:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011750c:	29 d0                	sub    %edx,%eax
f011750e:	01 c3                	add    %eax,%ebx
f0117510:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0117517:	10 00 00 
f011751a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011751f:	0f b6 c0             	movzbl %al,%eax
f0117522:	c1 e0 04             	shl    $0x4,%eax
f0117525:	89 c2                	mov    %eax,%edx
f0117527:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011752d:	01 d0                	add    %edx,%eax
f011752f:	48                   	dec    %eax
f0117530:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0117536:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011753c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117541:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0117547:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011754d:	29 d0                	sub    %edx,%eax
f011754f:	01 d8                	add    %ebx,%eax
f0117551:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0117556:	39 c1                	cmp    %eax,%ecx
f0117558:	74 14                	je     f011756e <test_kmalloc+0x491>
f011755a:	83 ec 04             	sub    $0x4,%esp
f011755d:	68 40 ad 13 f0       	push   $0xf013ad40
f0117562:	6a 59                	push   $0x59
f0117564:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117569:	e8 8d 8c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011756e:	e8 c9 c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117573:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117576:	74 14                	je     f011758c <test_kmalloc+0x4af>
f0117578:	83 ec 04             	sub    $0x4,%esp
f011757b:	68 74 ac 13 f0       	push   $0xf013ac74
f0117580:	6a 5a                	push   $0x5a
f0117582:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117587:	e8 6f 8c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011758c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011758f:	e8 2b 53 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117594:	29 c3                	sub    %eax,%ebx
f0117596:	89 d8                	mov    %ebx,%eax
f0117598:	83 f8 01             	cmp    $0x1,%eax
f011759b:	74 14                	je     f01175b1 <test_kmalloc+0x4d4>
f011759d:	83 ec 04             	sub    $0x4,%esp
f01175a0:	68 dc ac 13 f0       	push   $0xf013acdc
f01175a5:	6a 5b                	push   $0x5b
f01175a7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01175ac:	e8 4a 8c fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01175b1:	e8 09 53 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01175b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01175b9:	e8 7e c7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01175be:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01175c1:	83 ec 0c             	sub    $0xc,%esp
f01175c4:	68 00 08 00 00       	push   $0x800
f01175c9:	e8 30 02 ff ff       	call   f01077fe <kmalloc>
f01175ce:	83 c4 10             	add    $0x10,%esp
f01175d1:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01175d7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01175dd:	89 c1                	mov    %eax,%ecx
f01175df:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01175e6:	10 00 00 
f01175e9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01175ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01175f4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01175fa:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117600:	ba 00 00 00 00       	mov    $0x0,%edx
f0117605:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011760b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117611:	29 d0                	sub    %edx,%eax
f0117613:	89 c3                	mov    %eax,%ebx
f0117615:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011761c:	10 00 00 
f011761f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117624:	0f b6 d0             	movzbl %al,%edx
f0117627:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011762d:	01 d0                	add    %edx,%eax
f011762f:	48                   	dec    %eax
f0117630:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0117636:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011763c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117641:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0117647:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011764d:	29 d0                	sub    %edx,%eax
f011764f:	01 c3                	add    %eax,%ebx
f0117651:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117658:	10 00 00 
f011765b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117660:	0f b6 c0             	movzbl %al,%eax
f0117663:	c1 e0 04             	shl    $0x4,%eax
f0117666:	89 c2                	mov    %eax,%edx
f0117668:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011766e:	01 d0                	add    %edx,%eax
f0117670:	48                   	dec    %eax
f0117671:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117677:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011767d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117682:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0117688:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011768e:	29 d0                	sub    %edx,%eax
f0117690:	01 d8                	add    %ebx,%eax
f0117692:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117697:	39 c1                	cmp    %eax,%ecx
f0117699:	74 14                	je     f01176af <test_kmalloc+0x5d2>
f011769b:	83 ec 04             	sub    $0x4,%esp
f011769e:	68 40 ad 13 f0       	push   $0xf013ad40
f01176a3:	6a 61                	push   $0x61
f01176a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176aa:	e8 4c 8b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01176af:	e8 88 c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01176b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01176b7:	74 14                	je     f01176cd <test_kmalloc+0x5f0>
f01176b9:	83 ec 04             	sub    $0x4,%esp
f01176bc:	68 74 ac 13 f0       	push   $0xf013ac74
f01176c1:	6a 62                	push   $0x62
f01176c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176c8:	e8 2e 8b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01176cd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01176d0:	e8 ea 51 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01176d5:	29 c3                	sub    %eax,%ebx
f01176d7:	89 d8                	mov    %ebx,%eax
f01176d9:	83 f8 01             	cmp    $0x1,%eax
f01176dc:	74 14                	je     f01176f2 <test_kmalloc+0x615>
f01176de:	83 ec 04             	sub    $0x4,%esp
f01176e1:	68 dc ac 13 f0       	push   $0xf013acdc
f01176e6:	6a 63                	push   $0x63
f01176e8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01176ed:	e8 09 8b fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01176f2:	e8 c8 51 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01176f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176fa:	e8 3d c6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01176ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117702:	83 ec 0c             	sub    $0xc,%esp
f0117705:	68 00 1c 00 00       	push   $0x1c00
f011770a:	e8 ef 00 ff ff       	call   f01077fe <kmalloc>
f011770f:	83 c4 10             	add    $0x10,%esp
f0117712:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117718:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011771e:	89 c1                	mov    %eax,%ecx
f0117720:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117727:	10 00 00 
f011772a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117730:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117735:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011773b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117741:	ba 00 00 00 00       	mov    $0x0,%edx
f0117746:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011774c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117752:	29 d0                	sub    %edx,%eax
f0117754:	89 c3                	mov    %eax,%ebx
f0117756:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011775d:	10 00 00 
f0117760:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117765:	0f b6 d0             	movzbl %al,%edx
f0117768:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011776e:	01 d0                	add    %edx,%eax
f0117770:	48                   	dec    %eax
f0117771:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0117777:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011777d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117782:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0117788:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011778e:	29 d0                	sub    %edx,%eax
f0117790:	01 c3                	add    %eax,%ebx
f0117792:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117799:	10 00 00 
f011779c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01177a1:	0f b6 c0             	movzbl %al,%eax
f01177a4:	c1 e0 04             	shl    $0x4,%eax
f01177a7:	89 c2                	mov    %eax,%edx
f01177a9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01177af:	01 d0                	add    %edx,%eax
f01177b1:	48                   	dec    %eax
f01177b2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01177b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01177be:	ba 00 00 00 00       	mov    $0x0,%edx
f01177c3:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01177c9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01177cf:	29 d0                	sub    %edx,%eax
f01177d1:	01 d8                	add    %ebx,%eax
f01177d3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01177d8:	39 c1                	cmp    %eax,%ecx
f01177da:	74 14                	je     f01177f0 <test_kmalloc+0x713>
f01177dc:	83 ec 04             	sub    $0x4,%esp
f01177df:	68 40 ad 13 f0       	push   $0xf013ad40
f01177e4:	6a 69                	push   $0x69
f01177e6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01177eb:	e8 0b 8a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01177f0:	e8 47 c5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01177f5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01177f8:	74 14                	je     f011780e <test_kmalloc+0x731>
f01177fa:	83 ec 04             	sub    $0x4,%esp
f01177fd:	68 74 ac 13 f0       	push   $0xf013ac74
f0117802:	6a 6a                	push   $0x6a
f0117804:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117809:	e8 ed 89 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011780e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117811:	e8 a9 50 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117816:	29 c3                	sub    %eax,%ebx
f0117818:	89 d8                	mov    %ebx,%eax
f011781a:	83 f8 02             	cmp    $0x2,%eax
f011781d:	74 14                	je     f0117833 <test_kmalloc+0x756>
f011781f:	83 ec 04             	sub    $0x4,%esp
f0117822:	68 dc ac 13 f0       	push   $0xf013acdc
f0117827:	6a 6b                	push   $0x6b
f0117829:	68 5a ac 13 f0       	push   $0xf013ac5a
f011782e:	e8 c8 89 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117833:	e8 87 50 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117838:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011783b:	e8 fc c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117840:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117843:	83 ec 0c             	sub    $0xc,%esp
f0117846:	68 00 fc 2f 00       	push   $0x2ffc00
f011784b:	e8 ae ff fe ff       	call   f01077fe <kmalloc>
f0117850:	83 c4 10             	add    $0x10,%esp
f0117853:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117859:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011785f:	89 c1                	mov    %eax,%ecx
f0117861:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0117868:	10 00 00 
f011786b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0117871:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117876:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011787c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117882:	ba 00 00 00 00       	mov    $0x0,%edx
f0117887:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011788d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117893:	29 d0                	sub    %edx,%eax
f0117895:	89 c3                	mov    %eax,%ebx
f0117897:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011789e:	10 00 00 
f01178a1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01178a6:	0f b6 d0             	movzbl %al,%edx
f01178a9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01178af:	01 d0                	add    %edx,%eax
f01178b1:	48                   	dec    %eax
f01178b2:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01178b8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01178be:	ba 00 00 00 00       	mov    $0x0,%edx
f01178c3:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01178c9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01178cf:	29 d0                	sub    %edx,%eax
f01178d1:	01 c3                	add    %eax,%ebx
f01178d3:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01178da:	10 00 00 
f01178dd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01178e2:	0f b6 c0             	movzbl %al,%eax
f01178e5:	c1 e0 04             	shl    $0x4,%eax
f01178e8:	89 c2                	mov    %eax,%edx
f01178ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01178f0:	01 d0                	add    %edx,%eax
f01178f2:	48                   	dec    %eax
f01178f3:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01178f9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01178ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0117904:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011790a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117910:	29 d0                	sub    %edx,%eax
f0117912:	01 d8                	add    %ebx,%eax
f0117914:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117919:	39 c1                	cmp    %eax,%ecx
f011791b:	74 14                	je     f0117931 <test_kmalloc+0x854>
f011791d:	83 ec 04             	sub    $0x4,%esp
f0117920:	68 40 ad 13 f0       	push   $0xf013ad40
f0117925:	6a 71                	push   $0x71
f0117927:	68 5a ac 13 f0       	push   $0xf013ac5a
f011792c:	e8 ca 88 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117931:	e8 06 c4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117936:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117939:	74 14                	je     f011794f <test_kmalloc+0x872>
f011793b:	83 ec 04             	sub    $0x4,%esp
f011793e:	68 74 ac 13 f0       	push   $0xf013ac74
f0117943:	6a 72                	push   $0x72
f0117945:	68 5a ac 13 f0       	push   $0xf013ac5a
f011794a:	e8 ac 88 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011794f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117952:	e8 68 4f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117957:	29 c3                	sub    %eax,%ebx
f0117959:	89 d8                	mov    %ebx,%eax
f011795b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117960:	74 14                	je     f0117976 <test_kmalloc+0x899>
f0117962:	83 ec 04             	sub    $0x4,%esp
f0117965:	68 dc ac 13 f0       	push   $0xf013acdc
f011796a:	6a 73                	push   $0x73
f011796c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117971:	e8 85 88 fe ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117976:	e8 44 4f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011797b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011797e:	e8 b9 c3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117983:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117986:	83 ec 0c             	sub    $0xc,%esp
f0117989:	68 00 fc 5f 00       	push   $0x5ffc00
f011798e:	e8 6b fe fe ff       	call   f01077fe <kmalloc>
f0117993:	83 c4 10             	add    $0x10,%esp
f0117996:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011799c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01179a2:	89 c1                	mov    %eax,%ecx
f01179a4:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01179ab:	10 00 00 
f01179ae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01179b4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01179b9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01179bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01179ca:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01179d0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179d6:	29 d0                	sub    %edx,%eax
f01179d8:	89 c3                	mov    %eax,%ebx
f01179da:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01179e1:	10 00 00 
f01179e4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01179e9:	0f b6 d0             	movzbl %al,%edx
f01179ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179f2:	01 d0                	add    %edx,%eax
f01179f4:	48                   	dec    %eax
f01179f5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01179fb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117a01:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a06:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117a0c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0117a12:	29 d0                	sub    %edx,%eax
f0117a14:	01 c3                	add    %eax,%ebx
f0117a16:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117a1d:	10 00 00 
f0117a20:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117a25:	0f b6 c0             	movzbl %al,%eax
f0117a28:	c1 e0 04             	shl    $0x4,%eax
f0117a2b:	89 c2                	mov    %eax,%edx
f0117a2d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0117a33:	01 d0                	add    %edx,%eax
f0117a35:	48                   	dec    %eax
f0117a36:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0117a3c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117a42:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a47:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0117a4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117a53:	29 d0                	sub    %edx,%eax
f0117a55:	01 d8                	add    %ebx,%eax
f0117a57:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117a5c:	39 c1                	cmp    %eax,%ecx
f0117a5e:	74 14                	je     f0117a74 <test_kmalloc+0x997>
f0117a60:	83 ec 04             	sub    $0x4,%esp
f0117a63:	68 40 ad 13 f0       	push   $0xf013ad40
f0117a68:	6a 79                	push   $0x79
f0117a6a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117a6f:	e8 87 87 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a74:	e8 c3 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117a79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117a7c:	74 14                	je     f0117a92 <test_kmalloc+0x9b5>
f0117a7e:	83 ec 04             	sub    $0x4,%esp
f0117a81:	68 74 ac 13 f0       	push   $0xf013ac74
f0117a86:	6a 7a                	push   $0x7a
f0117a88:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117a8d:	e8 69 87 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a92:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117a95:	e8 25 4e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117a9a:	29 c3                	sub    %eax,%ebx
f0117a9c:	89 d8                	mov    %ebx,%eax
f0117a9e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117aa3:	74 14                	je     f0117ab9 <test_kmalloc+0x9dc>
f0117aa5:	83 ec 04             	sub    $0x4,%esp
f0117aa8:	68 dc ac 13 f0       	push   $0xf013acdc
f0117aad:	6a 7b                	push   $0x7b
f0117aaf:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117ab4:	e8 42 87 fe ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117ab9:	e8 01 4e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117abe:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ac1:	e8 76 c2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117ac6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117ac9:	83 ec 0c             	sub    $0xc,%esp
f0117acc:	68 00 38 00 00       	push   $0x3800
f0117ad1:	e8 28 fd fe ff       	call   f01077fe <kmalloc>
f0117ad6:	83 c4 10             	add    $0x10,%esp
f0117ad9:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117adf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117ae5:	89 c1                	mov    %eax,%ecx
f0117ae7:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0117aee:	10 00 00 
f0117af1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117af7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117afc:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0117b02:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117b08:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b0d:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0117b13:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117b19:	29 d0                	sub    %edx,%eax
f0117b1b:	89 c3                	mov    %eax,%ebx
f0117b1d:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117b24:	10 00 00 
f0117b27:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117b2c:	0f b6 d0             	movzbl %al,%edx
f0117b2f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0117b35:	01 d0                	add    %edx,%eax
f0117b37:	48                   	dec    %eax
f0117b38:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0117b3e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117b44:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b49:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0117b4f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0117b55:	29 d0                	sub    %edx,%eax
f0117b57:	01 c3                	add    %eax,%ebx
f0117b59:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0117b60:	10 00 00 
f0117b63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0117b68:	0f b6 c0             	movzbl %al,%eax
f0117b6b:	c1 e0 04             	shl    $0x4,%eax
f0117b6e:	89 c2                	mov    %eax,%edx
f0117b70:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0117b76:	01 d0                	add    %edx,%eax
f0117b78:	48                   	dec    %eax
f0117b79:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0117b7f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117b85:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b8a:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0117b90:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117b96:	29 d0                	sub    %edx,%eax
f0117b98:	01 d8                	add    %ebx,%eax
f0117b9a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117b9f:	39 c1                	cmp    %eax,%ecx
f0117ba1:	74 17                	je     f0117bba <test_kmalloc+0xadd>
f0117ba3:	83 ec 04             	sub    $0x4,%esp
f0117ba6:	68 40 ad 13 f0       	push   $0xf013ad40
f0117bab:	68 81 00 00 00       	push   $0x81
f0117bb0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117bb5:	e8 41 86 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117bba:	e8 7d c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117bbf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bc2:	74 17                	je     f0117bdb <test_kmalloc+0xafe>
f0117bc4:	83 ec 04             	sub    $0x4,%esp
f0117bc7:	68 74 ac 13 f0       	push   $0xf013ac74
f0117bcc:	68 82 00 00 00       	push   $0x82
f0117bd1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117bd6:	e8 20 86 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117bdb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117bde:	e8 dc 4c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117be3:	29 c3                	sub    %eax,%ebx
f0117be5:	89 d8                	mov    %ebx,%eax
f0117be7:	83 f8 04             	cmp    $0x4,%eax
f0117bea:	74 17                	je     f0117c03 <test_kmalloc+0xb26>
f0117bec:	83 ec 04             	sub    $0x4,%esp
f0117bef:	68 dc ac 13 f0       	push   $0xf013acdc
f0117bf4:	68 83 00 00 00       	push   $0x83
f0117bf9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117bfe:	e8 f8 85 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b50%");
f0117c03:	83 ec 0c             	sub    $0xc,%esp
f0117c06:	68 a6 ad 13 f0       	push   $0xf013ada6
f0117c0b:	e8 72 90 fe ff       	call   f0100c82 <cprintf>
f0117c10:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0117c13:	e8 a7 4c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0117c18:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117c1b:	e8 1c c1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0117c20:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0117c23:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117c2a:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117c2d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c33:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0117c39:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c3f:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117c42:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0117c44:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117c4a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117c50:	01 c2                	add    %eax,%edx
f0117c52:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117c55:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0117c57:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117c5d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0117c63:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0117c6a:	fd 0f 00 
			shortArr[0] = minShort;
f0117c6d:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0117c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117c76:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0117c79:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117c7f:	01 c0                	add    %eax,%eax
f0117c81:	89 c2                	mov    %eax,%edx
f0117c83:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117c89:	01 c2                	add    %eax,%edx
f0117c8b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117c8f:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0117c92:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117c98:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0117c9e:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117ca5:	01 00 00 
			intArr[0] = minInt;
f0117ca8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117cae:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117cb1:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0117cb3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117cb9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117cc0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117cc6:	01 c2                	add    %eax,%edx
f0117cc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117ccb:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117ccd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117cd3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117cd9:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0117ce0:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0117ce3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ce9:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117cec:	88 10                	mov    %dl,(%eax)
f0117cee:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117cf7:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117cfb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d01:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117d04:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117d07:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d14:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d1a:	01 c2                	add    %eax,%edx
f0117d1c:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117d1f:	88 02                	mov    %al,(%edx)
f0117d21:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d27:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d2e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d34:	01 c2                	add    %eax,%edx
f0117d36:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117d3a:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117d3e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117d44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117d4b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117d51:	01 c2                	add    %eax,%edx
f0117d53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d56:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0117d59:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0117d60:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0117d63:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0117d69:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0117d6f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117d75:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117d78:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0117d7a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117d80:	89 c2                	mov    %eax,%edx
f0117d82:	c1 ea 1f             	shr    $0x1f,%edx
f0117d85:	01 d0                	add    %edx,%eax
f0117d87:	d1 f8                	sar    %eax
f0117d89:	89 c2                	mov    %eax,%edx
f0117d8b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117d91:	01 c2                	add    %eax,%edx
f0117d93:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117d96:	88 c1                	mov    %al,%cl
f0117d98:	c0 e9 07             	shr    $0x7,%cl
f0117d9b:	01 c8                	add    %ecx,%eax
f0117d9d:	d0 f8                	sar    %al
f0117d9f:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0117da1:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117da7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117dad:	01 c2                	add    %eax,%edx
f0117daf:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117db2:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117db4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117dba:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0117dc0:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117dc7:	1b 00 00 
			shortArr2[0] = minShort;
f0117dca:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0117dd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117dd3:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117dd6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117ddc:	01 c0                	add    %eax,%eax
f0117dde:	89 c2                	mov    %eax,%edx
f0117de0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117de6:	01 c2                	add    %eax,%edx
f0117de8:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117dec:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117def:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117df5:	8a 00                	mov    (%eax),%al
f0117df7:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117dfa:	75 15                	jne    f0117e11 <test_kmalloc+0xd34>
f0117dfc:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0117e02:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117e08:	01 d0                	add    %edx,%eax
f0117e0a:	8a 00                	mov    (%eax),%al
f0117e0c:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117e0f:	74 17                	je     f0117e28 <test_kmalloc+0xd4b>
f0117e11:	83 ec 04             	sub    $0x4,%esp
f0117e14:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117e19:	68 b2 00 00 00       	push   $0xb2
f0117e1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117e23:	e8 d3 83 fe ff       	call   f01001fb <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117e28:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e2e:	66 8b 00             	mov    (%eax),%ax
f0117e31:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117e35:	75 1b                	jne    f0117e52 <test_kmalloc+0xd75>
f0117e37:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117e3d:	01 c0                	add    %eax,%eax
f0117e3f:	89 c2                	mov    %eax,%edx
f0117e41:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117e47:	01 d0                	add    %edx,%eax
f0117e49:	66 8b 00             	mov    (%eax),%ax
f0117e4c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117e50:	74 17                	je     f0117e69 <test_kmalloc+0xd8c>
f0117e52:	83 ec 04             	sub    $0x4,%esp
f0117e55:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117e5a:	68 b3 00 00 00       	push   $0xb3
f0117e5f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117e64:	e8 92 83 fe ff       	call   f01001fb <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0117e69:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e6f:	8b 00                	mov    (%eax),%eax
f0117e71:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117e74:	75 1c                	jne    f0117e92 <test_kmalloc+0xdb5>
f0117e76:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117e7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117e83:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117e89:	01 d0                	add    %edx,%eax
f0117e8b:	8b 00                	mov    (%eax),%eax
f0117e8d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117e90:	74 17                	je     f0117ea9 <test_kmalloc+0xdcc>
f0117e92:	83 ec 04             	sub    $0x4,%esp
f0117e95:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117e9a:	68 b4 00 00 00       	push   $0xb4
f0117e9f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117ea4:	e8 52 83 fe ff       	call   f01001fb <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117ea9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117eaf:	8a 00                	mov    (%eax),%al
f0117eb1:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117eb4:	75 1c                	jne    f0117ed2 <test_kmalloc+0xdf5>
f0117eb6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117ebc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117ec3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ec9:	01 d0                	add    %edx,%eax
f0117ecb:	8a 00                	mov    (%eax),%al
f0117ecd:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117ed0:	74 17                	je     f0117ee9 <test_kmalloc+0xe0c>
f0117ed2:	83 ec 04             	sub    $0x4,%esp
f0117ed5:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117eda:	68 b6 00 00 00       	push   $0xb6
f0117edf:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117ee4:	e8 12 83 fe ff       	call   f01001fb <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117ee9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117eef:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117ef3:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117ef7:	75 1f                	jne    f0117f18 <test_kmalloc+0xe3b>
f0117ef9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117eff:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117f06:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f0c:	01 d0                	add    %edx,%eax
f0117f0e:	66 8b 40 02          	mov    0x2(%eax),%ax
f0117f12:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117f16:	74 17                	je     f0117f2f <test_kmalloc+0xe52>
f0117f18:	83 ec 04             	sub    $0x4,%esp
f0117f1b:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117f20:	68 b7 00 00 00       	push   $0xb7
f0117f25:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117f2a:	e8 cc 82 fe ff       	call   f01001fb <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117f2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f35:	8b 40 04             	mov    0x4(%eax),%eax
f0117f38:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0117f3b:	75 1d                	jne    f0117f5a <test_kmalloc+0xe7d>
f0117f3d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117f43:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117f4a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117f50:	01 d0                	add    %edx,%eax
f0117f52:	8b 40 04             	mov    0x4(%eax),%eax
f0117f55:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0117f58:	74 17                	je     f0117f71 <test_kmalloc+0xe94>
f0117f5a:	83 ec 04             	sub    $0x4,%esp
f0117f5d:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117f62:	68 b8 00 00 00       	push   $0xb8
f0117f67:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117f6c:	e8 8a 82 fe ff       	call   f01001fb <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0117f71:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f77:	8a 00                	mov    (%eax),%al
f0117f79:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117f7c:	75 40                	jne    f0117fbe <test_kmalloc+0xee1>
f0117f7e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117f84:	89 c2                	mov    %eax,%edx
f0117f86:	c1 ea 1f             	shr    $0x1f,%edx
f0117f89:	01 d0                	add    %edx,%eax
f0117f8b:	d1 f8                	sar    %eax
f0117f8d:	89 c2                	mov    %eax,%edx
f0117f8f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117f95:	01 d0                	add    %edx,%eax
f0117f97:	8a 10                	mov    (%eax),%dl
f0117f99:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117f9c:	88 c1                	mov    %al,%cl
f0117f9e:	c0 e9 07             	shr    $0x7,%cl
f0117fa1:	01 c8                	add    %ecx,%eax
f0117fa3:	d0 f8                	sar    %al
f0117fa5:	38 c2                	cmp    %al,%dl
f0117fa7:	75 15                	jne    f0117fbe <test_kmalloc+0xee1>
f0117fa9:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117faf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117fb5:	01 d0                	add    %edx,%eax
f0117fb7:	8a 00                	mov    (%eax),%al
f0117fb9:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117fbc:	74 17                	je     f0117fd5 <test_kmalloc+0xef8>
f0117fbe:	83 ec 04             	sub    $0x4,%esp
f0117fc1:	68 b0 ad 13 f0       	push   $0xf013adb0
f0117fc6:	68 ba 00 00 00       	push   $0xba
f0117fcb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0117fd0:	e8 26 82 fe ff       	call   f01001fb <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117fd5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117fdb:	66 8b 00             	mov    (%eax),%ax
f0117fde:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117fe2:	75 1b                	jne    f0117fff <test_kmalloc+0xf22>
f0117fe4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117fea:	01 c0                	add    %eax,%eax
f0117fec:	89 c2                	mov    %eax,%edx
f0117fee:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117ff4:	01 d0                	add    %edx,%eax
f0117ff6:	66 8b 00             	mov    (%eax),%ax
f0117ff9:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117ffd:	74 17                	je     f0118016 <test_kmalloc+0xf39>
f0117fff:	83 ec 04             	sub    $0x4,%esp
f0118002:	68 b0 ad 13 f0       	push   $0xf013adb0
f0118007:	68 bb 00 00 00       	push   $0xbb
f011800c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118011:	e8 e5 81 fe ff       	call   f01001fb <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118016:	e8 a4 48 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011801b:	89 c2                	mov    %eax,%edx
f011801d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118020:	39 c2                	cmp    %eax,%edx
f0118022:	74 17                	je     f011803b <test_kmalloc+0xf5e>
f0118024:	83 ec 04             	sub    $0x4,%esp
f0118027:	68 dc ac 13 f0       	push   $0xf013acdc
f011802c:	68 bd 00 00 00       	push   $0xbd
f0118031:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118036:	e8 c0 81 fe ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011803b:	e8 fc bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118040:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118043:	74 17                	je     f011805c <test_kmalloc+0xf7f>
f0118045:	83 ec 04             	sub    $0x4,%esp
f0118048:	68 74 ac 13 f0       	push   $0xf013ac74
f011804d:	68 be 00 00 00       	push   $0xbe
f0118052:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118057:	e8 9f 81 fe ff       	call   f01001fb <_panic>
		}

		cprintf("\b\b\b80%");
f011805c:	83 ec 0c             	sub    $0xc,%esp
f011805f:	68 e5 ad 13 f0       	push   $0xf013ade5
f0118064:	e8 19 8c fe ff       	call   f0100c82 <cprintf>
f0118069:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011806c:	e8 4e 48 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118071:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118074:	e8 c3 bc fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118079:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011807c:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118083:	10 00 00 
f0118086:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011808c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118091:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118097:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011809d:	ba 00 00 00 00       	mov    $0x0,%edx
f01180a2:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01180a8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01180ae:	29 d0                	sub    %edx,%eax
f01180b0:	89 c1                	mov    %eax,%ecx
f01180b2:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01180b9:	10 00 00 
f01180bc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01180c1:	0f b6 d0             	movzbl %al,%edx
f01180c4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01180ca:	01 d0                	add    %edx,%eax
f01180cc:	48                   	dec    %eax
f01180cd:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01180d3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01180d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01180de:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01180e4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01180ea:	29 d0                	sub    %edx,%eax
f01180ec:	01 c1                	add    %eax,%ecx
f01180ee:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01180f5:	10 00 00 
f01180f8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01180fd:	0f b6 c0             	movzbl %al,%eax
f0118100:	c1 e0 04             	shl    $0x4,%eax
f0118103:	89 c2                	mov    %eax,%edx
f0118105:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011810b:	01 d0                	add    %edx,%eax
f011810d:	48                   	dec    %eax
f011810e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118114:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011811a:	ba 00 00 00 00       	mov    $0x0,%edx
f011811f:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118125:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011812b:	29 d0                	sub    %edx,%eax
f011812d:	01 c8                	add    %ecx,%eax
f011812f:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118134:	29 c2                	sub    %eax,%edx
f0118136:	89 d0                	mov    %edx,%eax
f0118138:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011813e:	83 ec 0c             	sub    $0xc,%esp
f0118141:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118147:	e8 b2 f6 fe ff       	call   f01077fe <kmalloc>
f011814c:	83 c4 10             	add    $0x10,%esp
f011814f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118155:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011815b:	85 c0                	test   %eax,%eax
f011815d:	74 17                	je     f0118176 <test_kmalloc+0x1099>
f011815f:	83 ec 04             	sub    $0x4,%esp
f0118162:	68 28 ac 13 f0       	push   $0xf013ac28
f0118167:	68 c8 00 00 00       	push   $0xc8
f011816c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118171:	e8 85 80 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118176:	e8 c1 bb fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011817b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011817e:	74 17                	je     f0118197 <test_kmalloc+0x10ba>
f0118180:	83 ec 04             	sub    $0x4,%esp
f0118183:	68 74 ac 13 f0       	push   $0xf013ac74
f0118188:	68 c9 00 00 00       	push   $0xc9
f011818d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118192:	e8 64 80 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118197:	e8 23 47 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011819c:	89 c2                	mov    %eax,%edx
f011819e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01181a1:	39 c2                	cmp    %eax,%edx
f01181a3:	74 17                	je     f01181bc <test_kmalloc+0x10df>
f01181a5:	83 ec 04             	sub    $0x4,%esp
f01181a8:	68 dc ac 13 f0       	push   $0xf013acdc
f01181ad:	68 ca 00 00 00       	push   $0xca
f01181b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01181b7:	e8 3f 80 fe ff       	call   f01001fb <_panic>

		cprintf("\b\b\b90%");
f01181bc:	83 ec 0c             	sub    $0xc,%esp
f01181bf:	68 ec ad 13 f0       	push   $0xf013adec
f01181c4:	e8 b9 8a fe ff       	call   f0100c82 <cprintf>
f01181c9:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f01181cc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01181d2:	05 00 40 00 00       	add    $0x4000,%eax
f01181d7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01181dd:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01181e4:	10 00 00 
f01181e7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01181ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181f2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01181f8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01181fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0118203:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0118209:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011820f:	29 d0                	sub    %edx,%eax
f0118211:	89 c1                	mov    %eax,%ecx
f0118213:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011821a:	10 00 00 
f011821d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118222:	0f b6 d0             	movzbl %al,%edx
f0118225:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011822b:	01 d0                	add    %edx,%eax
f011822d:	48                   	dec    %eax
f011822e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0118234:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011823a:	ba 00 00 00 00       	mov    $0x0,%edx
f011823f:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0118245:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011824b:	29 d0                	sub    %edx,%eax
f011824d:	01 c1                	add    %eax,%ecx
f011824f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0118256:	10 00 00 
f0118259:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011825e:	0f b6 c0             	movzbl %al,%eax
f0118261:	c1 e0 04             	shl    $0x4,%eax
f0118264:	89 c2                	mov    %eax,%edx
f0118266:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011826c:	01 d0                	add    %edx,%eax
f011826e:	48                   	dec    %eax
f011826f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0118275:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011827b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118280:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0118286:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011828c:	29 d0                	sub    %edx,%eax
f011828e:	01 c8                	add    %ecx,%eax
f0118290:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118298:	eb 6a                	jmp    f0118304 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011829a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f011829f:	83 ec 04             	sub    $0x4,%esp
f01182a2:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01182a8:	52                   	push   %edx
f01182a9:	ff 75 f4             	pushl  -0xc(%ebp)
f01182ac:	50                   	push   %eax
f01182ad:	e8 28 e7 fe ff       	call   f01069da <get_page_table>
f01182b2:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01182b5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01182bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01182be:	c1 ea 0c             	shr    $0xc,%edx
f01182c1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01182c7:	c1 e2 02             	shl    $0x2,%edx
f01182ca:	01 d0                	add    %edx,%eax
f01182cc:	8b 00                	mov    (%eax),%eax
f01182ce:	25 ff 0f 00 00       	and    $0xfff,%eax
f01182d3:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01182d9:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01182df:	83 e0 04             	and    $0x4,%eax
f01182e2:	85 c0                	test   %eax,%eax
f01182e4:	74 17                	je     f01182fd <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01182e6:	83 ec 04             	sub    $0x4,%esp
f01182e9:	68 f4 ad 13 f0       	push   $0xf013adf4
f01182ee:	68 d7 00 00 00       	push   $0xd7
f01182f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01182f8:	e8 fe 7e fe ff       	call   f01001fb <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f01182fd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0118304:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118307:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f011830d:	72 8b                	jb     f011829a <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f011830f:	83 ec 0c             	sub    $0xc,%esp
f0118312:	68 3e ae 13 f0       	push   $0xf013ae3e
f0118317:	e8 66 89 fe ff       	call   f0100c82 <cprintf>
f011831c:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f011831f:	83 ec 0c             	sub    $0xc,%esp
f0118322:	68 48 ae 13 f0       	push   $0xf013ae48
f0118327:	e8 56 89 fe ff       	call   f0100c82 <cprintf>
f011832c:	83 c4 10             	add    $0x10,%esp

	return 1;
f011832f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0118334:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0118337:	5b                   	pop    %ebx
f0118338:	5f                   	pop    %edi
f0118339:	5d                   	pop    %ebp
f011833a:	c3                   	ret    

f011833b <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f011833b:	55                   	push   %ebp
f011833c:	89 e5                	mov    %esp,%ebp
f011833e:	57                   	push   %edi
f011833f:	53                   	push   %ebx
f0118340:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0118346:	83 ec 0c             	sub    $0xc,%esp
f0118349:	68 9c ab 13 f0       	push   $0xf013ab9c
f011834e:	e8 2f 89 fe ff       	call   f0100c82 <cprintf>
f0118353:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118356:	83 ec 0c             	sub    $0xc,%esp
f0118359:	68 cc ab 13 f0       	push   $0xf013abcc
f011835e:	e8 1f 89 fe ff       	call   f0100c82 <cprintf>
f0118363:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118366:	83 ec 0c             	sub    $0xc,%esp
f0118369:	68 9c ab 13 f0       	push   $0xf013ab9c
f011836e:	e8 0f 89 fe ff       	call   f0100c82 <cprintf>
f0118373:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0118376:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f011837c:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0118381:	b8 00 00 00 00       	mov    $0x0,%eax
f0118386:	89 d7                	mov    %edx,%edi
f0118388:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f011838a:	83 ec 0c             	sub    $0xc,%esp
f011838d:	68 84 ae 13 f0       	push   $0xf013ae84
f0118392:	e8 eb 88 fe ff       	call   f0100c82 <cprintf>
f0118397:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011839a:	e8 20 45 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011839f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01183a2:	e8 95 b9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01183a7:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01183aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01183b1:	eb 1f                	jmp    f01183d2 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01183b3:	83 ec 0c             	sub    $0xc,%esp
f01183b6:	68 00 00 20 00       	push   $0x200000
f01183bb:	e8 3e f4 fe ff       	call   f01077fe <kmalloc>
f01183c0:	83 c4 10             	add    $0x10,%esp
f01183c3:	89 c2                	mov    %eax,%edx
f01183c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01183c8:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01183cf:	ff 45 f4             	incl   -0xc(%ebp)
f01183d2:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01183d6:	7e db                	jle    f01183b3 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01183d8:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01183df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01183e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01183ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01183ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01183f2:	f7 75 e8             	divl   -0x18(%ebp)
f01183f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01183f8:	29 d0                	sub    %edx,%eax
f01183fa:	89 c1                	mov    %eax,%ecx
f01183fc:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0118403:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118408:	0f b6 d0             	movzbl %al,%edx
f011840b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011840e:	01 d0                	add    %edx,%eax
f0118410:	48                   	dec    %eax
f0118411:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0118414:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118417:	ba 00 00 00 00       	mov    $0x0,%edx
f011841c:	f7 75 e0             	divl   -0x20(%ebp)
f011841f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118422:	29 d0                	sub    %edx,%eax
f0118424:	01 c1                	add    %eax,%ecx
f0118426:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f011842d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118432:	0f b6 c0             	movzbl %al,%eax
f0118435:	c1 e0 04             	shl    $0x4,%eax
f0118438:	89 c2                	mov    %eax,%edx
f011843a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011843d:	01 d0                	add    %edx,%eax
f011843f:	48                   	dec    %eax
f0118440:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118443:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118446:	ba 00 00 00 00       	mov    $0x0,%edx
f011844b:	f7 75 d8             	divl   -0x28(%ebp)
f011844e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118451:	29 d0                	sub    %edx,%eax
f0118453:	01 c8                	add    %ecx,%eax
f0118455:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f011845a:	29 c2                	sub    %eax,%edx
f011845c:	89 d0                	mov    %edx,%eax
f011845e:	83 ec 0c             	sub    $0xc,%esp
f0118461:	50                   	push   %eax
f0118462:	e8 97 f3 fe ff       	call   f01077fe <kmalloc>
f0118467:	83 c4 10             	add    $0x10,%esp
f011846a:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0118470:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118476:	89 c1                	mov    %eax,%ecx
f0118478:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f011847f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118482:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118487:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011848a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011848d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118492:	f7 75 d0             	divl   -0x30(%ebp)
f0118495:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118498:	29 d0                	sub    %edx,%eax
f011849a:	89 c3                	mov    %eax,%ebx
f011849c:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01184a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184a8:	0f b6 d0             	movzbl %al,%edx
f01184ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01184ae:	01 d0                	add    %edx,%eax
f01184b0:	48                   	dec    %eax
f01184b1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01184b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01184b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01184bc:	f7 75 c8             	divl   -0x38(%ebp)
f01184bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01184c2:	29 d0                	sub    %edx,%eax
f01184c4:	01 c3                	add    %eax,%ebx
f01184c6:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01184cd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01184d2:	0f b6 c0             	movzbl %al,%eax
f01184d5:	c1 e0 04             	shl    $0x4,%eax
f01184d8:	89 c2                	mov    %eax,%edx
f01184da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01184dd:	01 d0                	add    %edx,%eax
f01184df:	48                   	dec    %eax
f01184e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01184e3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01184e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01184eb:	f7 75 c0             	divl   -0x40(%ebp)
f01184ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01184f1:	29 d0                	sub    %edx,%eax
f01184f3:	01 d8                	add    %ebx,%eax
f01184f5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01184fa:	39 c1                	cmp    %eax,%ecx
f01184fc:	0f 85 ed 04 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0118502:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118508:	89 c1                	mov    %eax,%ecx
f011850a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118511:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118514:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118519:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011851c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011851f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118524:	f7 75 b8             	divl   -0x48(%ebp)
f0118527:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011852a:	29 d0                	sub    %edx,%eax
f011852c:	89 c3                	mov    %eax,%ebx
f011852e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118535:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011853a:	0f b6 d0             	movzbl %al,%edx
f011853d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118540:	01 d0                	add    %edx,%eax
f0118542:	48                   	dec    %eax
f0118543:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118546:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118549:	ba 00 00 00 00       	mov    $0x0,%edx
f011854e:	f7 75 b0             	divl   -0x50(%ebp)
f0118551:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118554:	29 d0                	sub    %edx,%eax
f0118556:	01 c3                	add    %eax,%ebx
f0118558:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011855f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118564:	0f b6 c0             	movzbl %al,%eax
f0118567:	c1 e0 04             	shl    $0x4,%eax
f011856a:	89 c2                	mov    %eax,%edx
f011856c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011856f:	01 d0                	add    %edx,%eax
f0118571:	48                   	dec    %eax
f0118572:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118575:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118578:	ba 00 00 00 00       	mov    $0x0,%edx
f011857d:	f7 75 a8             	divl   -0x58(%ebp)
f0118580:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118583:	29 d0                	sub    %edx,%eax
f0118585:	01 d8                	add    %ebx,%eax
f0118587:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011858c:	39 c1                	cmp    %eax,%ecx
f011858e:	0f 85 5b 04 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118594:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f011859a:	89 c1                	mov    %eax,%ecx
f011859c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01185a3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01185a6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185ab:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01185ae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01185b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01185b6:	f7 75 a0             	divl   -0x60(%ebp)
f01185b9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01185bc:	29 d0                	sub    %edx,%eax
f01185be:	89 c3                	mov    %eax,%ebx
f01185c0:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01185c7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01185cc:	0f b6 d0             	movzbl %al,%edx
f01185cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01185d2:	01 d0                	add    %edx,%eax
f01185d4:	48                   	dec    %eax
f01185d5:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01185d8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01185db:	ba 00 00 00 00       	mov    $0x0,%edx
f01185e0:	f7 75 98             	divl   -0x68(%ebp)
f01185e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01185e6:	29 d0                	sub    %edx,%eax
f01185e8:	01 c3                	add    %eax,%ebx
f01185ea:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01185f1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01185f6:	0f b6 c0             	movzbl %al,%eax
f01185f9:	c1 e0 04             	shl    $0x4,%eax
f01185fc:	89 c2                	mov    %eax,%edx
f01185fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118601:	01 d0                	add    %edx,%eax
f0118603:	48                   	dec    %eax
f0118604:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118607:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011860a:	ba 00 00 00 00       	mov    $0x0,%edx
f011860f:	f7 75 90             	divl   -0x70(%ebp)
f0118612:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118615:	29 d0                	sub    %edx,%eax
f0118617:	01 d8                	add    %ebx,%eax
f0118619:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011861e:	39 c1                	cmp    %eax,%ecx
f0118620:	0f 85 c9 03 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118626:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f011862c:	89 c1                	mov    %eax,%ecx
f011862e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118635:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118638:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011863d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118640:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118643:	ba 00 00 00 00       	mov    $0x0,%edx
f0118648:	f7 75 88             	divl   -0x78(%ebp)
f011864b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011864e:	29 d0                	sub    %edx,%eax
f0118650:	89 c3                	mov    %eax,%ebx
f0118652:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118659:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011865e:	0f b6 d0             	movzbl %al,%edx
f0118661:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118664:	01 d0                	add    %edx,%eax
f0118666:	48                   	dec    %eax
f0118667:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011866d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118673:	ba 00 00 00 00       	mov    $0x0,%edx
f0118678:	f7 75 80             	divl   -0x80(%ebp)
f011867b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118681:	29 d0                	sub    %edx,%eax
f0118683:	01 c3                	add    %eax,%ebx
f0118685:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011868c:	10 00 00 
f011868f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118694:	0f b6 c0             	movzbl %al,%eax
f0118697:	c1 e0 04             	shl    $0x4,%eax
f011869a:	89 c2                	mov    %eax,%edx
f011869c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01186a2:	01 d0                	add    %edx,%eax
f01186a4:	48                   	dec    %eax
f01186a5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01186ab:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01186b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01186b6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01186bc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01186c2:	29 d0                	sub    %edx,%eax
f01186c4:	01 d8                	add    %ebx,%eax
f01186c6:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01186cb:	39 c1                	cmp    %eax,%ecx
f01186cd:	0f 85 1c 03 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01186d3:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01186d9:	89 c1                	mov    %eax,%ecx
f01186db:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01186e2:	10 00 00 
f01186e5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01186eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186f0:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01186f6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01186fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118701:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118707:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011870d:	29 d0                	sub    %edx,%eax
f011870f:	89 c3                	mov    %eax,%ebx
f0118711:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118718:	10 00 00 
f011871b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118720:	0f b6 d0             	movzbl %al,%edx
f0118723:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118729:	01 d0                	add    %edx,%eax
f011872b:	48                   	dec    %eax
f011872c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118732:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118738:	ba 00 00 00 00       	mov    $0x0,%edx
f011873d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118743:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118749:	29 d0                	sub    %edx,%eax
f011874b:	01 c3                	add    %eax,%ebx
f011874d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118754:	10 00 00 
f0118757:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011875c:	0f b6 c0             	movzbl %al,%eax
f011875f:	c1 e0 04             	shl    $0x4,%eax
f0118762:	89 c2                	mov    %eax,%edx
f0118764:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011876a:	01 d0                	add    %edx,%eax
f011876c:	48                   	dec    %eax
f011876d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118773:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118779:	ba 00 00 00 00       	mov    $0x0,%edx
f011877e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118784:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011878a:	29 d0                	sub    %edx,%eax
f011878c:	01 d8                	add    %ebx,%eax
f011878e:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118793:	39 c1                	cmp    %eax,%ecx
f0118795:	0f 85 54 02 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011879b:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01187a1:	89 c1                	mov    %eax,%ecx
f01187a3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01187aa:	10 00 00 
f01187ad:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01187b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187b8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01187be:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01187c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01187c9:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01187cf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01187d5:	29 d0                	sub    %edx,%eax
f01187d7:	89 c3                	mov    %eax,%ebx
f01187d9:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01187e0:	10 00 00 
f01187e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01187e8:	0f b6 d0             	movzbl %al,%edx
f01187eb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01187f1:	01 d0                	add    %edx,%eax
f01187f3:	48                   	dec    %eax
f01187f4:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01187fa:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118800:	ba 00 00 00 00       	mov    $0x0,%edx
f0118805:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011880b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118811:	29 d0                	sub    %edx,%eax
f0118813:	01 c3                	add    %eax,%ebx
f0118815:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011881c:	10 00 00 
f011881f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118824:	0f b6 c0             	movzbl %al,%eax
f0118827:	c1 e0 04             	shl    $0x4,%eax
f011882a:	89 c2                	mov    %eax,%edx
f011882c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118832:	01 d0                	add    %edx,%eax
f0118834:	48                   	dec    %eax
f0118835:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011883b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118841:	ba 00 00 00 00       	mov    $0x0,%edx
f0118846:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011884c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118852:	29 d0                	sub    %edx,%eax
f0118854:	01 d8                	add    %ebx,%eax
f0118856:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011885b:	39 c1                	cmp    %eax,%ecx
f011885d:	0f 85 8c 01 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118863:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118869:	89 c1                	mov    %eax,%ecx
f011886b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118872:	10 00 00 
f0118875:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011887b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118880:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118886:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011888c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118891:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118897:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011889d:	29 d0                	sub    %edx,%eax
f011889f:	89 c3                	mov    %eax,%ebx
f01188a1:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01188a8:	10 00 00 
f01188ab:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188b0:	0f b6 d0             	movzbl %al,%edx
f01188b3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01188b9:	01 d0                	add    %edx,%eax
f01188bb:	48                   	dec    %eax
f01188bc:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01188c2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01188c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188cd:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01188d3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01188d9:	29 d0                	sub    %edx,%eax
f01188db:	01 c3                	add    %eax,%ebx
f01188dd:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01188e4:	10 00 00 
f01188e7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01188ec:	0f b6 c0             	movzbl %al,%eax
f01188ef:	c1 e0 04             	shl    $0x4,%eax
f01188f2:	89 c2                	mov    %eax,%edx
f01188f4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01188fa:	01 d0                	add    %edx,%eax
f01188fc:	48                   	dec    %eax
f01188fd:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118903:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118909:	ba 00 00 00 00       	mov    $0x0,%edx
f011890e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118914:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011891a:	29 d0                	sub    %edx,%eax
f011891c:	01 d8                	add    %ebx,%eax
f011891e:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118923:	39 c1                	cmp    %eax,%ecx
f0118925:	0f 85 c4 00 00 00    	jne    f01189ef <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f011892b:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118931:	89 c1                	mov    %eax,%ecx
f0118933:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011893a:	10 00 00 
f011893d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118943:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118948:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011894e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118954:	ba 00 00 00 00       	mov    $0x0,%edx
f0118959:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011895f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118965:	29 d0                	sub    %edx,%eax
f0118967:	89 c3                	mov    %eax,%ebx
f0118969:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118970:	10 00 00 
f0118973:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118978:	0f b6 d0             	movzbl %al,%edx
f011897b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118981:	01 d0                	add    %edx,%eax
f0118983:	48                   	dec    %eax
f0118984:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011898a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118990:	ba 00 00 00 00       	mov    $0x0,%edx
f0118995:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011899b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01189a1:	29 d0                	sub    %edx,%eax
f01189a3:	01 c3                	add    %eax,%ebx
f01189a5:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01189ac:	10 00 00 
f01189af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01189b4:	0f b6 c0             	movzbl %al,%eax
f01189b7:	c1 e0 04             	shl    $0x4,%eax
f01189ba:	89 c2                	mov    %eax,%edx
f01189bc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01189c2:	01 d0                	add    %edx,%eax
f01189c4:	48                   	dec    %eax
f01189c5:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01189cb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01189d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01189d6:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01189dc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01189e2:	29 d0                	sub    %edx,%eax
f01189e4:	01 d8                	add    %ebx,%eax
f01189e6:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01189eb:	39 c1                	cmp    %eax,%ecx
f01189ed:	74 17                	je     f0118a06 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01189ef:	83 ec 04             	sub    $0x4,%esp
f01189f2:	68 d4 ae 13 f0       	push   $0xf013aed4
f01189f7:	68 03 01 00 00       	push   $0x103
f01189fc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118a01:	e8 f5 77 fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a06:	e8 31 b3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118a0b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118a0e:	74 17                	je     f0118a27 <test_kmalloc_nextfit+0x6ec>
f0118a10:	83 ec 04             	sub    $0x4,%esp
f0118a13:	68 74 ac 13 f0       	push   $0xf013ac74
f0118a18:	68 05 01 00 00       	push   $0x105
f0118a1d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118a22:	e8 d4 77 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118a27:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118a2a:	e8 90 3e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118a2f:	29 c3                	sub    %eax,%ebx
f0118a31:	89 d9                	mov    %ebx,%ecx
f0118a33:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118a3a:	10 00 00 
f0118a3d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118a43:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a48:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118a4e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118a54:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a59:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0118a5f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118a65:	29 d0                	sub    %edx,%eax
f0118a67:	89 c3                	mov    %eax,%ebx
f0118a69:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0118a70:	10 00 00 
f0118a73:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118a78:	0f b6 d0             	movzbl %al,%edx
f0118a7b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118a81:	01 d0                	add    %edx,%eax
f0118a83:	48                   	dec    %eax
f0118a84:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118a8a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118a90:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a95:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118a9b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118aa1:	29 d0                	sub    %edx,%eax
f0118aa3:	01 c3                	add    %eax,%ebx
f0118aa5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118aac:	10 00 00 
f0118aaf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118ab4:	0f b6 c0             	movzbl %al,%eax
f0118ab7:	c1 e0 04             	shl    $0x4,%eax
f0118aba:	89 c2                	mov    %eax,%edx
f0118abc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118ac2:	01 d0                	add    %edx,%eax
f0118ac4:	48                   	dec    %eax
f0118ac5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118acb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118ad1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ad6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118adc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118ae2:	29 d0                	sub    %edx,%eax
f0118ae4:	01 d8                	add    %ebx,%eax
f0118ae6:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118aeb:	29 c2                	sub    %eax,%edx
f0118aed:	89 d0                	mov    %edx,%eax
f0118aef:	c1 e8 0c             	shr    $0xc,%eax
f0118af2:	39 c1                	cmp    %eax,%ecx
f0118af4:	74 17                	je     f0118b0d <test_kmalloc_nextfit+0x7d2>
f0118af6:	83 ec 04             	sub    $0x4,%esp
f0118af9:	68 17 af 13 f0       	push   $0xf013af17
f0118afe:	68 06 01 00 00       	push   $0x106
f0118b03:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118b08:	e8 ee 76 fe ff       	call   f01001fb <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118b0d:	e8 2a b2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b15:	e8 a5 3d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118b1a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118b1d:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0118b23:	83 ec 0c             	sub    $0xc,%esp
f0118b26:	50                   	push   %eax
f0118b27:	e8 94 ed fe ff       	call   f01078c0 <kfree>
f0118b2c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0118b2f:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0118b35:	83 ec 0c             	sub    $0xc,%esp
f0118b38:	50                   	push   %eax
f0118b39:	e8 82 ed fe ff       	call   f01078c0 <kfree>
f0118b3e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0118b41:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f0118b47:	83 ec 0c             	sub    $0xc,%esp
f0118b4a:	50                   	push   %eax
f0118b4b:	e8 70 ed fe ff       	call   f01078c0 <kfree>
f0118b50:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0118b53:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0118b59:	83 ec 0c             	sub    $0xc,%esp
f0118b5c:	50                   	push   %eax
f0118b5d:	e8 5e ed fe ff       	call   f01078c0 <kfree>
f0118b62:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0118b65:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118b6b:	83 ec 0c             	sub    $0xc,%esp
f0118b6e:	50                   	push   %eax
f0118b6f:	e8 4c ed fe ff       	call   f01078c0 <kfree>
f0118b74:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0118b77:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0118b7d:	83 ec 0c             	sub    $0xc,%esp
f0118b80:	50                   	push   %eax
f0118b81:	e8 3a ed fe ff       	call   f01078c0 <kfree>
f0118b86:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0118b89:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0118b8f:	83 ec 0c             	sub    $0xc,%esp
f0118b92:	50                   	push   %eax
f0118b93:	e8 28 ed fe ff       	call   f01078c0 <kfree>
f0118b98:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118b9b:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0118ba1:	83 ec 0c             	sub    $0xc,%esp
f0118ba4:	50                   	push   %eax
f0118ba5:	e8 16 ed fe ff       	call   f01078c0 <kfree>
f0118baa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118bad:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0118bb3:	83 ec 0c             	sub    $0xc,%esp
f0118bb6:	50                   	push   %eax
f0118bb7:	e8 04 ed fe ff       	call   f01078c0 <kfree>
f0118bbc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0118bbf:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118bc5:	83 ec 0c             	sub    $0xc,%esp
f0118bc8:	50                   	push   %eax
f0118bc9:	e8 f2 ec fe ff       	call   f01078c0 <kfree>
f0118bce:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118bd1:	e8 66 b1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118bd6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118bd9:	74 17                	je     f0118bf2 <test_kmalloc_nextfit+0x8b7>
f0118bdb:	83 ec 04             	sub    $0x4,%esp
f0118bde:	68 74 ac 13 f0       	push   $0xf013ac74
f0118be3:	68 17 01 00 00       	push   $0x117
f0118be8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118bed:	e8 09 76 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118bf2:	e8 c8 3c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118bf7:	89 c2                	mov    %eax,%edx
f0118bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118bfc:	89 d1                	mov    %edx,%ecx
f0118bfe:	29 c1                	sub    %eax,%ecx
f0118c00:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118c07:	10 00 00 
f0118c0a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0118c10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118c15:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118c1b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c21:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c26:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118c2c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c32:	29 d0                	sub    %edx,%eax
f0118c34:	89 c3                	mov    %eax,%ebx
f0118c36:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0118c3d:	10 00 00 
f0118c40:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c45:	0f b6 d0             	movzbl %al,%edx
f0118c48:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c4e:	01 d0                	add    %edx,%eax
f0118c50:	48                   	dec    %eax
f0118c51:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0118c57:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c62:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0118c68:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c6e:	29 d0                	sub    %edx,%eax
f0118c70:	01 c3                	add    %eax,%ebx
f0118c72:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118c79:	10 00 00 
f0118c7c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118c81:	0f b6 c0             	movzbl %al,%eax
f0118c84:	c1 e0 04             	shl    $0x4,%eax
f0118c87:	89 c2                	mov    %eax,%edx
f0118c89:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c8f:	01 d0                	add    %edx,%eax
f0118c91:	48                   	dec    %eax
f0118c92:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118c98:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ca3:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118ca9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118caf:	29 d0                	sub    %edx,%eax
f0118cb1:	01 d8                	add    %ebx,%eax
f0118cb3:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118cb8:	29 c2                	sub    %eax,%edx
f0118cba:	89 d0                	mov    %edx,%eax
f0118cbc:	c1 e8 0c             	shr    $0xc,%eax
f0118cbf:	39 c1                	cmp    %eax,%ecx
f0118cc1:	74 17                	je     f0118cda <test_kmalloc_nextfit+0x99f>
f0118cc3:	83 ec 04             	sub    $0x4,%esp
f0118cc6:	68 28 af 13 f0       	push   $0xf013af28
f0118ccb:	68 18 01 00 00       	push   $0x118
f0118cd0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118cd5:	e8 21 75 fe ff       	call   f01001fb <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118cda:	e8 5d b0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118cdf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118ce2:	e8 d8 3b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118ce7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118cea:	83 ec 0c             	sub    $0xc,%esp
f0118ced:	68 00 fc 0f 00       	push   $0xffc00
f0118cf2:	e8 07 eb fe ff       	call   f01077fe <kmalloc>
f0118cf7:	83 c4 10             	add    $0x10,%esp
f0118cfa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0118d00:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118d07:	10 00 00 
f0118d0a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d15:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118d1b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d21:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d26:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118d2c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d32:	29 d0                	sub    %edx,%eax
f0118d34:	89 c1                	mov    %eax,%ecx
f0118d36:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118d3d:	10 00 00 
f0118d40:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118d45:	0f b6 d0             	movzbl %al,%edx
f0118d48:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d4e:	01 d0                	add    %edx,%eax
f0118d50:	48                   	dec    %eax
f0118d51:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118d57:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118d5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d62:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118d68:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118d6e:	29 d0                	sub    %edx,%eax
f0118d70:	01 c1                	add    %eax,%ecx
f0118d72:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118d79:	10 00 00 
f0118d7c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118d81:	0f b6 c0             	movzbl %al,%eax
f0118d84:	c1 e0 04             	shl    $0x4,%eax
f0118d87:	89 c2                	mov    %eax,%edx
f0118d89:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118d8f:	01 d0                	add    %edx,%eax
f0118d91:	48                   	dec    %eax
f0118d92:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118d98:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118d9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118da3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118da9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118daf:	29 d0                	sub    %edx,%eax
f0118db1:	01 c8                	add    %ecx,%eax
f0118db3:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118db9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dbf:	39 c2                	cmp    %eax,%edx
f0118dc1:	74 17                	je     f0118dda <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0118dc3:	83 ec 04             	sub    $0x4,%esp
f0118dc6:	68 68 af 13 f0       	push   $0xf013af68
f0118dcb:	68 1f 01 00 00       	push   $0x11f
f0118dd0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118dd5:	e8 21 74 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118dda:	e8 5d af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118ddf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118de2:	74 17                	je     f0118dfb <test_kmalloc_nextfit+0xac0>
f0118de4:	83 ec 04             	sub    $0x4,%esp
f0118de7:	68 74 ac 13 f0       	push   $0xf013ac74
f0118dec:	68 20 01 00 00       	push   $0x120
f0118df1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118df6:	e8 00 74 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118dfb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118dfe:	e8 bc 3a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118e03:	29 c3                	sub    %eax,%ebx
f0118e05:	89 d8                	mov    %ebx,%eax
f0118e07:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118e0c:	74 17                	je     f0118e25 <test_kmalloc_nextfit+0xaea>
f0118e0e:	83 ec 04             	sub    $0x4,%esp
f0118e11:	68 17 af 13 f0       	push   $0xf013af17
f0118e16:	68 21 01 00 00       	push   $0x121
f0118e1b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118e20:	e8 d6 73 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e25:	e8 12 af fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118e2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e2d:	e8 8d 3a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118e32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0118e35:	83 ec 0c             	sub    $0xc,%esp
f0118e38:	68 00 04 00 00       	push   $0x400
f0118e3d:	e8 bc e9 fe ff       	call   f01077fe <kmalloc>
f0118e42:	83 c4 10             	add    $0x10,%esp
f0118e45:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0118e4b:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0118e52:	10 00 00 
f0118e55:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e60:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0118e66:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e71:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0118e77:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118e7d:	29 d0                	sub    %edx,%eax
f0118e7f:	89 c1                	mov    %eax,%ecx
f0118e81:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0118e88:	10 00 00 
f0118e8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118e90:	0f b6 d0             	movzbl %al,%edx
f0118e93:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118e99:	01 d0                	add    %edx,%eax
f0118e9b:	48                   	dec    %eax
f0118e9c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0118ea2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ead:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0118eb3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118eb9:	29 d0                	sub    %edx,%eax
f0118ebb:	01 c1                	add    %eax,%ecx
f0118ebd:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118ec4:	10 00 00 
f0118ec7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118ecc:	0f b6 c0             	movzbl %al,%eax
f0118ecf:	c1 e0 04             	shl    $0x4,%eax
f0118ed2:	89 c2                	mov    %eax,%edx
f0118ed4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118eda:	01 d0                	add    %edx,%eax
f0118edc:	48                   	dec    %eax
f0118edd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0118ee3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eee:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118ef4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118efa:	29 d0                	sub    %edx,%eax
f0118efc:	01 c8                	add    %ecx,%eax
f0118efe:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118f04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118f0a:	39 c2                	cmp    %eax,%edx
f0118f0c:	74 17                	je     f0118f25 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0118f0e:	83 ec 04             	sub    $0x4,%esp
f0118f11:	68 68 af 13 f0       	push   $0xf013af68
f0118f16:	68 27 01 00 00       	push   $0x127
f0118f1b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f20:	e8 d6 72 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f25:	e8 12 ae fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118f2a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f2d:	74 17                	je     f0118f46 <test_kmalloc_nextfit+0xc0b>
f0118f2f:	83 ec 04             	sub    $0x4,%esp
f0118f32:	68 74 ac 13 f0       	push   $0xf013ac74
f0118f37:	68 28 01 00 00       	push   $0x128
f0118f3c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f41:	e8 b5 72 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118f46:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f49:	e8 71 39 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118f4e:	29 c3                	sub    %eax,%ebx
f0118f50:	89 d8                	mov    %ebx,%eax
f0118f52:	83 f8 01             	cmp    $0x1,%eax
f0118f55:	74 17                	je     f0118f6e <test_kmalloc_nextfit+0xc33>
f0118f57:	83 ec 04             	sub    $0x4,%esp
f0118f5a:	68 17 af 13 f0       	push   $0xf013af17
f0118f5f:	68 29 01 00 00       	push   $0x129
f0118f64:	68 5a ac 13 f0       	push   $0xf013ac5a
f0118f69:	e8 8d 72 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f6e:	e8 c9 ad fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0118f73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f76:	e8 44 39 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0118f7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0118f7e:	83 ec 0c             	sub    $0xc,%esp
f0118f81:	68 00 00 50 00       	push   $0x500000
f0118f86:	e8 73 e8 fe ff       	call   f01077fe <kmalloc>
f0118f8b:	83 c4 10             	add    $0x10,%esp
f0118f8e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118f94:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118f9b:	10 00 00 
f0118f9e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118fa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fa9:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118faf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fba:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118fc0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fc6:	29 d0                	sub    %edx,%eax
f0118fc8:	89 c1                	mov    %eax,%ecx
f0118fca:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118fd1:	10 00 00 
f0118fd4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0118fd9:	0f b6 d0             	movzbl %al,%edx
f0118fdc:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118fe2:	01 d0                	add    %edx,%eax
f0118fe4:	48                   	dec    %eax
f0118fe5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118feb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118ff1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ff6:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118ffc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119002:	29 d0                	sub    %edx,%eax
f0119004:	01 c1                	add    %eax,%ecx
f0119006:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f011900d:	10 00 00 
f0119010:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119015:	0f b6 c0             	movzbl %al,%eax
f0119018:	c1 e0 04             	shl    $0x4,%eax
f011901b:	89 c2                	mov    %eax,%edx
f011901d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119023:	01 d0                	add    %edx,%eax
f0119025:	48                   	dec    %eax
f0119026:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f011902c:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119032:	ba 00 00 00 00       	mov    $0x0,%edx
f0119037:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f011903d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119043:	29 d0                	sub    %edx,%eax
f0119045:	01 c8                	add    %ecx,%eax
f0119047:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011904d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119053:	39 c2                	cmp    %eax,%edx
f0119055:	74 17                	je     f011906e <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119057:	83 ec 04             	sub    $0x4,%esp
f011905a:	68 68 af 13 f0       	push   $0xf013af68
f011905f:	68 2f 01 00 00       	push   $0x12f
f0119064:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119069:	e8 8d 71 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011906e:	e8 c9 ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119073:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119076:	74 17                	je     f011908f <test_kmalloc_nextfit+0xd54>
f0119078:	83 ec 04             	sub    $0x4,%esp
f011907b:	68 74 ac 13 f0       	push   $0xf013ac74
f0119080:	68 30 01 00 00       	push   $0x130
f0119085:	68 5a ac 13 f0       	push   $0xf013ac5a
f011908a:	e8 6c 71 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011908f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119092:	e8 28 38 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119097:	29 c3                	sub    %eax,%ebx
f0119099:	89 d8                	mov    %ebx,%eax
f011909b:	3d 00 05 00 00       	cmp    $0x500,%eax
f01190a0:	74 17                	je     f01190b9 <test_kmalloc_nextfit+0xd7e>
f01190a2:	83 ec 04             	sub    $0x4,%esp
f01190a5:	68 17 af 13 f0       	push   $0xf013af17
f01190aa:	68 31 01 00 00       	push   $0x131
f01190af:	68 5a ac 13 f0       	push   $0xf013ac5a
f01190b4:	e8 42 71 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01190b9:	e8 7e ac fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01190be:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01190c1:	e8 f9 37 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01190c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f01190c9:	83 ec 0c             	sub    $0xc,%esp
f01190cc:	68 00 00 10 00       	push   $0x100000
f01190d1:	e8 28 e7 fe ff       	call   f01077fe <kmalloc>
f01190d6:	83 c4 10             	add    $0x10,%esp
f01190d9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f01190df:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f01190e6:	10 00 00 
f01190e9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01190ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01190f4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01190fa:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119100:	ba 00 00 00 00       	mov    $0x0,%edx
f0119105:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f011910b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119111:	29 d0                	sub    %edx,%eax
f0119113:	89 c1                	mov    %eax,%ecx
f0119115:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f011911c:	10 00 00 
f011911f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119124:	0f b6 d0             	movzbl %al,%edx
f0119127:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011912d:	01 d0                	add    %edx,%eax
f011912f:	48                   	dec    %eax
f0119130:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119136:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011913c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119141:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119147:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011914d:	29 d0                	sub    %edx,%eax
f011914f:	01 c1                	add    %eax,%ecx
f0119151:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119158:	10 00 00 
f011915b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119160:	0f b6 c0             	movzbl %al,%eax
f0119163:	c1 e0 04             	shl    $0x4,%eax
f0119166:	89 c2                	mov    %eax,%edx
f0119168:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011916e:	01 d0                	add    %edx,%eax
f0119170:	48                   	dec    %eax
f0119171:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119177:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011917d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119182:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119188:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011918e:	29 d0                	sub    %edx,%eax
f0119190:	01 c8                	add    %ecx,%eax
f0119192:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119198:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011919e:	39 c2                	cmp    %eax,%edx
f01191a0:	74 17                	je     f01191b9 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f01191a2:	83 ec 04             	sub    $0x4,%esp
f01191a5:	68 68 af 13 f0       	push   $0xf013af68
f01191aa:	68 37 01 00 00       	push   $0x137
f01191af:	68 5a ac 13 f0       	push   $0xf013ac5a
f01191b4:	e8 42 70 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191b9:	e8 7e ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01191be:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191c1:	74 17                	je     f01191da <test_kmalloc_nextfit+0xe9f>
f01191c3:	83 ec 04             	sub    $0x4,%esp
f01191c6:	68 74 ac 13 f0       	push   $0xf013ac74
f01191cb:	68 38 01 00 00       	push   $0x138
f01191d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01191d5:	e8 21 70 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01191da:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01191dd:	e8 dd 36 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01191e2:	29 c3                	sub    %eax,%ebx
f01191e4:	89 d8                	mov    %ebx,%eax
f01191e6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01191eb:	74 17                	je     f0119204 <test_kmalloc_nextfit+0xec9>
f01191ed:	83 ec 04             	sub    $0x4,%esp
f01191f0:	68 17 af 13 f0       	push   $0xf013af17
f01191f5:	68 39 01 00 00       	push   $0x139
f01191fa:	68 5a ac 13 f0       	push   $0xf013ac5a
f01191ff:	e8 f7 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119204:	e8 33 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119209:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011920c:	e8 ae 36 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119211:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0119214:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011921a:	83 ec 0c             	sub    $0xc,%esp
f011921d:	50                   	push   %eax
f011921e:	e8 9d e6 fe ff       	call   f01078c0 <kfree>
f0119223:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119226:	e8 11 ab fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011922b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011922e:	74 17                	je     f0119247 <test_kmalloc_nextfit+0xf0c>
f0119230:	83 ec 04             	sub    $0x4,%esp
f0119233:	68 74 ac 13 f0       	push   $0xf013ac74
f0119238:	68 3e 01 00 00       	push   $0x13e
f011923d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119242:	e8 b4 6f fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119247:	e8 73 36 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011924c:	89 c2                	mov    %eax,%edx
f011924e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119251:	29 c2                	sub    %eax,%edx
f0119253:	89 d0                	mov    %edx,%eax
f0119255:	3d 00 02 00 00       	cmp    $0x200,%eax
f011925a:	74 17                	je     f0119273 <test_kmalloc_nextfit+0xf38>
f011925c:	83 ec 04             	sub    $0x4,%esp
f011925f:	68 28 af 13 f0       	push   $0xf013af28
f0119264:	68 3f 01 00 00       	push   $0x13f
f0119269:	68 5a ac 13 f0       	push   $0xf013ac5a
f011926e:	e8 88 6f fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119273:	e8 c4 aa fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119278:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011927b:	e8 3f 36 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119280:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0119283:	83 ec 0c             	sub    $0xc,%esp
f0119286:	68 00 04 00 00       	push   $0x400
f011928b:	e8 6e e5 fe ff       	call   f01077fe <kmalloc>
f0119290:	83 c4 10             	add    $0x10,%esp
f0119293:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0119299:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f01192a0:	10 00 00 
f01192a3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01192a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192ae:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f01192b4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01192ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01192bf:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f01192c5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01192cb:	29 d0                	sub    %edx,%eax
f01192cd:	89 c1                	mov    %eax,%ecx
f01192cf:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f01192d6:	10 00 00 
f01192d9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01192de:	0f b6 d0             	movzbl %al,%edx
f01192e1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01192e7:	01 d0                	add    %edx,%eax
f01192e9:	48                   	dec    %eax
f01192ea:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f01192f0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01192f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01192fb:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0119301:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119307:	29 d0                	sub    %edx,%eax
f0119309:	01 c1                	add    %eax,%ecx
f011930b:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0119312:	10 00 00 
f0119315:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011931a:	0f b6 c0             	movzbl %al,%eax
f011931d:	c1 e0 04             	shl    $0x4,%eax
f0119320:	89 c2                	mov    %eax,%edx
f0119322:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119328:	01 d0                	add    %edx,%eax
f011932a:	48                   	dec    %eax
f011932b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0119331:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119337:	ba 00 00 00 00       	mov    $0x0,%edx
f011933c:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0119342:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119348:	29 d0                	sub    %edx,%eax
f011934a:	01 c8                	add    %ecx,%eax
f011934c:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0119352:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119358:	39 c2                	cmp    %eax,%edx
f011935a:	74 17                	je     f0119373 <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011935c:	83 ec 04             	sub    $0x4,%esp
f011935f:	68 68 af 13 f0       	push   $0xf013af68
f0119364:	68 45 01 00 00       	push   $0x145
f0119369:	68 5a ac 13 f0       	push   $0xf013ac5a
f011936e:	e8 88 6e fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119373:	e8 c4 a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119378:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011937b:	74 17                	je     f0119394 <test_kmalloc_nextfit+0x1059>
f011937d:	83 ec 04             	sub    $0x4,%esp
f0119380:	68 74 ac 13 f0       	push   $0xf013ac74
f0119385:	68 46 01 00 00       	push   $0x146
f011938a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011938f:	e8 67 6e fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119394:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119397:	e8 23 35 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011939c:	29 c3                	sub    %eax,%ebx
f011939e:	89 d8                	mov    %ebx,%eax
f01193a0:	83 f8 01             	cmp    $0x1,%eax
f01193a3:	74 17                	je     f01193bc <test_kmalloc_nextfit+0x1081>
f01193a5:	83 ec 04             	sub    $0x4,%esp
f01193a8:	68 17 af 13 f0       	push   $0xf013af17
f01193ad:	68 47 01 00 00       	push   $0x147
f01193b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01193b7:	e8 3f 6e fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01193bc:	e8 7b a9 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01193c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193c4:	e8 f6 34 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01193c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01193cc:	83 ec 0c             	sub    $0xc,%esp
f01193cf:	68 00 e0 1f 00       	push   $0x1fe000
f01193d4:	e8 25 e4 fe ff       	call   f01077fe <kmalloc>
f01193d9:	83 c4 10             	add    $0x10,%esp
f01193dc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f01193e2:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01193e9:	10 00 00 
f01193ec:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01193f2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193f7:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01193fd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119403:	ba 00 00 00 00       	mov    $0x0,%edx
f0119408:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011940e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0119414:	29 d0                	sub    %edx,%eax
f0119416:	89 c1                	mov    %eax,%ecx
f0119418:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011941f:	10 00 00 
f0119422:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119427:	0f b6 d0             	movzbl %al,%edx
f011942a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0119430:	01 d0                	add    %edx,%eax
f0119432:	48                   	dec    %eax
f0119433:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0119439:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011943f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119444:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011944a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0119450:	29 d0                	sub    %edx,%eax
f0119452:	01 c1                	add    %eax,%ecx
f0119454:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011945b:	10 00 00 
f011945e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119463:	0f b6 c0             	movzbl %al,%eax
f0119466:	c1 e0 04             	shl    $0x4,%eax
f0119469:	89 c2                	mov    %eax,%edx
f011946b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0119471:	01 d0                	add    %edx,%eax
f0119473:	48                   	dec    %eax
f0119474:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011947a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119480:	ba 00 00 00 00       	mov    $0x0,%edx
f0119485:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011948b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0119491:	29 d0                	sub    %edx,%eax
f0119493:	01 c8                	add    %ecx,%eax
f0119495:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011949b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01194a1:	39 c2                	cmp    %eax,%edx
f01194a3:	74 17                	je     f01194bc <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f01194a5:	83 ec 04             	sub    $0x4,%esp
f01194a8:	68 68 af 13 f0       	push   $0xf013af68
f01194ad:	68 4d 01 00 00       	push   $0x14d
f01194b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01194b7:	e8 3f 6d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194bc:	e8 7b a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01194c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01194c4:	74 17                	je     f01194dd <test_kmalloc_nextfit+0x11a2>
f01194c6:	83 ec 04             	sub    $0x4,%esp
f01194c9:	68 74 ac 13 f0       	push   $0xf013ac74
f01194ce:	68 4e 01 00 00       	push   $0x14e
f01194d3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01194d8:	e8 1e 6d fe ff       	call   f01001fb <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01194dd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01194e0:	e8 da 33 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01194e5:	29 c3                	sub    %eax,%ebx
f01194e7:	89 d8                	mov    %ebx,%eax
f01194e9:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f01194ee:	74 17                	je     f0119507 <test_kmalloc_nextfit+0x11cc>
f01194f0:	83 ec 04             	sub    $0x4,%esp
f01194f3:	68 17 af 13 f0       	push   $0xf013af17
f01194f8:	68 50 01 00 00       	push   $0x150
f01194fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119502:	e8 f4 6c fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119507:	e8 30 a8 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011950c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011950f:	e8 ab 33 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119514:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0119517:	83 ec 0c             	sub    $0xc,%esp
f011951a:	68 00 00 08 00       	push   $0x80000
f011951f:	e8 da e2 fe ff       	call   f01077fe <kmalloc>
f0119524:	83 c4 10             	add    $0x10,%esp
f0119527:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011952d:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0119534:	10 00 00 
f0119537:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011953d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119542:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0119548:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011954e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119553:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0119559:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011955f:	29 d0                	sub    %edx,%eax
f0119561:	89 c1                	mov    %eax,%ecx
f0119563:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011956a:	10 00 00 
f011956d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119572:	0f b6 d0             	movzbl %al,%edx
f0119575:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011957b:	01 d0                	add    %edx,%eax
f011957d:	48                   	dec    %eax
f011957e:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0119584:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011958a:	ba 00 00 00 00       	mov    $0x0,%edx
f011958f:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119595:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011959b:	29 d0                	sub    %edx,%eax
f011959d:	01 c1                	add    %eax,%ecx
f011959f:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f01195a6:	10 00 00 
f01195a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01195ae:	0f b6 c0             	movzbl %al,%eax
f01195b1:	c1 e0 04             	shl    $0x4,%eax
f01195b4:	89 c2                	mov    %eax,%edx
f01195b6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01195bc:	01 d0                	add    %edx,%eax
f01195be:	48                   	dec    %eax
f01195bf:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f01195c5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01195cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01195d0:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f01195d6:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01195dc:	29 d0                	sub    %edx,%eax
f01195de:	01 c8                	add    %ecx,%eax
f01195e0:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f01195e6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01195ec:	39 c2                	cmp    %eax,%edx
f01195ee:	74 17                	je     f0119607 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f01195f0:	83 ec 04             	sub    $0x4,%esp
f01195f3:	68 68 af 13 f0       	push   $0xf013af68
f01195f8:	68 56 01 00 00       	push   $0x156
f01195fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119602:	e8 f4 6b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119607:	e8 30 a7 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011960c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011960f:	74 17                	je     f0119628 <test_kmalloc_nextfit+0x12ed>
f0119611:	83 ec 04             	sub    $0x4,%esp
f0119614:	68 74 ac 13 f0       	push   $0xf013ac74
f0119619:	68 57 01 00 00       	push   $0x157
f011961e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119623:	e8 d3 6b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119628:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011962b:	e8 8f 32 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119630:	29 c3                	sub    %eax,%ebx
f0119632:	89 d8                	mov    %ebx,%eax
f0119634:	3d 80 00 00 00       	cmp    $0x80,%eax
f0119639:	74 17                	je     f0119652 <test_kmalloc_nextfit+0x1317>
f011963b:	83 ec 04             	sub    $0x4,%esp
f011963e:	68 17 af 13 f0       	push   $0xf013af17
f0119643:	68 58 01 00 00       	push   $0x158
f0119648:	68 5a ac 13 f0       	push   $0xf013ac5a
f011964d:	e8 a9 6b fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f0119652:	83 ec 0c             	sub    $0xc,%esp
f0119655:	68 88 af 13 f0       	push   $0xf013af88
f011965a:	e8 23 76 fe ff       	call   f0100c82 <cprintf>
f011965f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f0119662:	e8 d5 a6 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119667:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011966a:	e8 50 32 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011966f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f0119672:	83 ec 0c             	sub    $0xc,%esp
f0119675:	68 00 00 38 00       	push   $0x380000
f011967a:	e8 7f e1 fe ff       	call   f01077fe <kmalloc>
f011967f:	83 c4 10             	add    $0x10,%esp
f0119682:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0119688:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011968f:	10 00 00 
f0119692:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119698:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011969d:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f01196a3:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01196a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01196ae:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f01196b4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01196ba:	29 d0                	sub    %edx,%eax
f01196bc:	89 c1                	mov    %eax,%ecx
f01196be:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f01196c5:	10 00 00 
f01196c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01196cd:	0f b6 d0             	movzbl %al,%edx
f01196d0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01196d6:	01 d0                	add    %edx,%eax
f01196d8:	48                   	dec    %eax
f01196d9:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f01196df:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01196e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01196ea:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f01196f0:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01196f6:	29 d0                	sub    %edx,%eax
f01196f8:	01 c1                	add    %eax,%ecx
f01196fa:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f0119701:	10 00 00 
f0119704:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119709:	0f b6 c0             	movzbl %al,%eax
f011970c:	c1 e0 04             	shl    $0x4,%eax
f011970f:	89 c2                	mov    %eax,%edx
f0119711:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119717:	01 d0                	add    %edx,%eax
f0119719:	48                   	dec    %eax
f011971a:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f0119720:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119726:	ba 00 00 00 00       	mov    $0x0,%edx
f011972b:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f0119731:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119737:	29 d0                	sub    %edx,%eax
f0119739:	01 c8                	add    %ecx,%eax
f011973b:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0119741:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119747:	39 c2                	cmp    %eax,%edx
f0119749:	74 17                	je     f0119762 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011974b:	83 ec 04             	sub    $0x4,%esp
f011974e:	68 68 af 13 f0       	push   $0xf013af68
f0119753:	68 62 01 00 00       	push   $0x162
f0119758:	68 5a ac 13 f0       	push   $0xf013ac5a
f011975d:	e8 99 6a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119762:	e8 d5 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119767:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011976a:	74 17                	je     f0119783 <test_kmalloc_nextfit+0x1448>
f011976c:	83 ec 04             	sub    $0x4,%esp
f011976f:	68 74 ac 13 f0       	push   $0xf013ac74
f0119774:	68 63 01 00 00       	push   $0x163
f0119779:	68 5a ac 13 f0       	push   $0xf013ac5a
f011977e:	e8 78 6a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119783:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119786:	e8 34 31 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011978b:	29 c3                	sub    %eax,%ebx
f011978d:	89 d8                	mov    %ebx,%eax
f011978f:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119794:	74 17                	je     f01197ad <test_kmalloc_nextfit+0x1472>
f0119796:	83 ec 04             	sub    $0x4,%esp
f0119799:	68 17 af 13 f0       	push   $0xf013af17
f011979e:	68 64 01 00 00       	push   $0x164
f01197a3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01197a8:	e8 4e 6a fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01197ad:	e8 8a a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01197b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01197b5:	e8 05 31 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01197ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f01197bd:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f01197c3:	83 ec 0c             	sub    $0xc,%esp
f01197c6:	50                   	push   %eax
f01197c7:	e8 f4 e0 fe ff       	call   f01078c0 <kfree>
f01197cc:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197cf:	e8 68 a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01197d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01197d7:	74 17                	je     f01197f0 <test_kmalloc_nextfit+0x14b5>
f01197d9:	83 ec 04             	sub    $0x4,%esp
f01197dc:	68 74 ac 13 f0       	push   $0xf013ac74
f01197e1:	68 69 01 00 00       	push   $0x169
f01197e6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01197eb:	e8 0b 6a fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f01197f0:	e8 ca 30 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01197f5:	89 c2                	mov    %eax,%edx
f01197f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01197fa:	29 c2                	sub    %eax,%edx
f01197fc:	89 d0                	mov    %edx,%eax
f01197fe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119803:	74 17                	je     f011981c <test_kmalloc_nextfit+0x14e1>
f0119805:	83 ec 04             	sub    $0x4,%esp
f0119808:	68 28 af 13 f0       	push   $0xf013af28
f011980d:	68 6a 01 00 00       	push   $0x16a
f0119812:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119817:	e8 df 69 fe ff       	call   f01001fb <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011981c:	e8 1b a5 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119821:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119824:	e8 96 30 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119829:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011982c:	83 ec 0c             	sub    $0xc,%esp
f011982f:	68 00 fc 3f 00       	push   $0x3ffc00
f0119834:	e8 c5 df fe ff       	call   f01077fe <kmalloc>
f0119839:	83 c4 10             	add    $0x10,%esp
f011983c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0119842:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f0119849:	10 00 00 
f011984c:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0119852:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119857:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011985d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119863:	ba 00 00 00 00       	mov    $0x0,%edx
f0119868:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011986e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0119874:	29 d0                	sub    %edx,%eax
f0119876:	89 c1                	mov    %eax,%ecx
f0119878:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011987f:	10 00 00 
f0119882:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119887:	0f b6 d0             	movzbl %al,%edx
f011988a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0119890:	01 d0                	add    %edx,%eax
f0119892:	48                   	dec    %eax
f0119893:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119899:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011989f:	ba 00 00 00 00       	mov    $0x0,%edx
f01198a4:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f01198aa:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f01198b0:	29 d0                	sub    %edx,%eax
f01198b2:	01 c1                	add    %eax,%ecx
f01198b4:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f01198bb:	10 00 00 
f01198be:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01198c3:	0f b6 c0             	movzbl %al,%eax
f01198c6:	c1 e0 04             	shl    $0x4,%eax
f01198c9:	89 c2                	mov    %eax,%edx
f01198cb:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01198d1:	01 d0                	add    %edx,%eax
f01198d3:	48                   	dec    %eax
f01198d4:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f01198da:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01198e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01198e5:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f01198eb:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01198f1:	29 d0                	sub    %edx,%eax
f01198f3:	01 c8                	add    %ecx,%eax
f01198f5:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f01198fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119901:	39 c2                	cmp    %eax,%edx
f0119903:	74 17                	je     f011991c <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119905:	83 ec 04             	sub    $0x4,%esp
f0119908:	68 68 af 13 f0       	push   $0xf013af68
f011990d:	68 70 01 00 00       	push   $0x170
f0119912:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119917:	e8 df 68 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011991c:	e8 1b a4 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119921:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119924:	74 17                	je     f011993d <test_kmalloc_nextfit+0x1602>
f0119926:	83 ec 04             	sub    $0x4,%esp
f0119929:	68 74 ac 13 f0       	push   $0xf013ac74
f011992e:	68 71 01 00 00       	push   $0x171
f0119933:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119938:	e8 be 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011993d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119940:	e8 7a 2f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119945:	29 c3                	sub    %eax,%ebx
f0119947:	89 d8                	mov    %ebx,%eax
f0119949:	3d 00 04 00 00       	cmp    $0x400,%eax
f011994e:	74 17                	je     f0119967 <test_kmalloc_nextfit+0x162c>
f0119950:	83 ec 04             	sub    $0x4,%esp
f0119953:	68 17 af 13 f0       	push   $0xf013af17
f0119958:	68 72 01 00 00       	push   $0x172
f011995d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119962:	e8 94 68 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0119967:	83 ec 0c             	sub    $0xc,%esp
f011996a:	68 c4 af 13 f0       	push   $0xf013afc4
f011996f:	e8 0e 73 fe ff       	call   f0100c82 <cprintf>
f0119974:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0119977:	e8 c0 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011997c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011997f:	e8 3b 2f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119984:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0119987:	83 ec 0c             	sub    $0xc,%esp
f011998a:	68 00 00 60 00       	push   $0x600000
f011998f:	e8 6a de fe ff       	call   f01077fe <kmalloc>
f0119994:	83 c4 10             	add    $0x10,%esp
f0119997:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011999d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01199a3:	85 c0                	test   %eax,%eax
f01199a5:	74 17                	je     f01199be <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f01199a7:	83 ec 04             	sub    $0x4,%esp
f01199aa:	68 68 af 13 f0       	push   $0xf013af68
f01199af:	68 7c 01 00 00       	push   $0x17c
f01199b4:	68 5a ac 13 f0       	push   $0xf013ac5a
f01199b9:	e8 3d 68 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199be:	e8 79 a3 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01199c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199c6:	74 17                	je     f01199df <test_kmalloc_nextfit+0x16a4>
f01199c8:	83 ec 04             	sub    $0x4,%esp
f01199cb:	68 74 ac 13 f0       	push   $0xf013ac74
f01199d0:	68 7d 01 00 00       	push   $0x17d
f01199d5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01199da:	e8 1c 68 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f01199df:	e8 db 2e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f01199e4:	89 c2                	mov    %eax,%edx
f01199e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01199e9:	39 c2                	cmp    %eax,%edx
f01199eb:	74 17                	je     f0119a04 <test_kmalloc_nextfit+0x16c9>
f01199ed:	83 ec 04             	sub    $0x4,%esp
f01199f0:	68 17 af 13 f0       	push   $0xf013af17
f01199f5:	68 7e 01 00 00       	push   $0x17e
f01199fa:	68 5a ac 13 f0       	push   $0xf013ac5a
f01199ff:	e8 f7 67 fe ff       	call   f01001fb <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119a04:	83 ec 0c             	sub    $0xc,%esp
f0119a07:	68 fc af 13 f0       	push   $0xf013affc
f0119a0c:	e8 71 72 fe ff       	call   f0100c82 <cprintf>
f0119a11:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119a14:	83 ec 0c             	sub    $0xc,%esp
f0119a17:	68 38 b0 13 f0       	push   $0xf013b038
f0119a1c:	e8 61 72 fe ff       	call   f0100c82 <cprintf>
f0119a21:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119a24:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119a29:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119a2c:	5b                   	pop    %ebx
f0119a2d:	5f                   	pop    %edi
f0119a2e:	5d                   	pop    %ebp
f0119a2f:	c3                   	ret    

f0119a30 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0119a30:	55                   	push   %ebp
f0119a31:	89 e5                	mov    %esp,%ebp
f0119a33:	57                   	push   %edi
f0119a34:	53                   	push   %ebx
f0119a35:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f0119a3b:	83 ec 0c             	sub    $0xc,%esp
f0119a3e:	68 9c ab 13 f0       	push   $0xf013ab9c
f0119a43:	e8 3a 72 fe ff       	call   f0100c82 <cprintf>
f0119a48:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119a4b:	83 ec 0c             	sub    $0xc,%esp
f0119a4e:	68 cc ab 13 f0       	push   $0xf013abcc
f0119a53:	e8 2a 72 fe ff       	call   f0100c82 <cprintf>
f0119a58:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119a5b:	83 ec 0c             	sub    $0xc,%esp
f0119a5e:	68 9c ab 13 f0       	push   $0xf013ab9c
f0119a63:	e8 1a 72 fe ff       	call   f0100c82 <cprintf>
f0119a68:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119a6b:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0119a71:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119a76:	b8 00 00 00 00       	mov    $0x0,%eax
f0119a7b:	89 d7                	mov    %edx,%edi
f0119a7d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a7f:	e8 3b 2e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a87:	e8 b0 a2 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119a8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0119a8f:	83 ec 0c             	sub    $0xc,%esp
f0119a92:	68 00 fc 2f 00       	push   $0x2ffc00
f0119a97:	e8 62 dd fe ff       	call   f01077fe <kmalloc>
f0119a9c:	83 c4 10             	add    $0x10,%esp
f0119a9f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119aa5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119aab:	89 c1                	mov    %eax,%ecx
f0119aad:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119ab4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119ab7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119abc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0119abf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119ac2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ac7:	f7 75 ec             	divl   -0x14(%ebp)
f0119aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119acd:	29 d0                	sub    %edx,%eax
f0119acf:	89 c3                	mov    %eax,%ebx
f0119ad1:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119ad8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119add:	0f b6 d0             	movzbl %al,%edx
f0119ae0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119ae3:	01 d0                	add    %edx,%eax
f0119ae5:	48                   	dec    %eax
f0119ae6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119ae9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119aec:	ba 00 00 00 00       	mov    $0x0,%edx
f0119af1:	f7 75 e4             	divl   -0x1c(%ebp)
f0119af4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119af7:	29 d0                	sub    %edx,%eax
f0119af9:	01 c3                	add    %eax,%ebx
f0119afb:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0119b02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119b07:	0f b6 c0             	movzbl %al,%eax
f0119b0a:	c1 e0 04             	shl    $0x4,%eax
f0119b0d:	89 c2                	mov    %eax,%edx
f0119b0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119b12:	01 d0                	add    %edx,%eax
f0119b14:	48                   	dec    %eax
f0119b15:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119b18:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119b1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b20:	f7 75 dc             	divl   -0x24(%ebp)
f0119b23:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119b26:	29 d0                	sub    %edx,%eax
f0119b28:	01 d8                	add    %ebx,%eax
f0119b2a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119b2f:	39 c1                	cmp    %eax,%ecx
f0119b31:	74 17                	je     f0119b4a <test_kmalloc_bestfit1+0x11a>
f0119b33:	83 ec 04             	sub    $0x4,%esp
f0119b36:	68 74 b0 13 f0       	push   $0xf013b074
f0119b3b:	68 98 01 00 00       	push   $0x198
f0119b40:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b45:	e8 b1 66 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b4a:	e8 ed a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119b4f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b52:	74 17                	je     f0119b6b <test_kmalloc_bestfit1+0x13b>
f0119b54:	83 ec 04             	sub    $0x4,%esp
f0119b57:	68 74 ac 13 f0       	push   $0xf013ac74
f0119b5c:	68 99 01 00 00       	push   $0x199
f0119b61:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b66:	e8 90 66 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119b6b:	e8 4f 2d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119b70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119b73:	29 c2                	sub    %eax,%edx
f0119b75:	89 d0                	mov    %edx,%eax
f0119b77:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119b7c:	74 17                	je     f0119b95 <test_kmalloc_bestfit1+0x165>
f0119b7e:	83 ec 04             	sub    $0x4,%esp
f0119b81:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119b86:	68 9a 01 00 00       	push   $0x19a
f0119b8b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119b90:	e8 66 66 fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119b95:	e8 25 2d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b9d:	e8 9a a1 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119ba2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119ba5:	83 ec 0c             	sub    $0xc,%esp
f0119ba8:	68 00 fc 2f 00       	push   $0x2ffc00
f0119bad:	e8 4c dc fe ff       	call   f01077fe <kmalloc>
f0119bb2:	83 c4 10             	add    $0x10,%esp
f0119bb5:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119bbb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119bc1:	89 c1                	mov    %eax,%ecx
f0119bc3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119bcd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bd2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119bd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119bd8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bdd:	f7 75 d4             	divl   -0x2c(%ebp)
f0119be0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119be3:	29 d0                	sub    %edx,%eax
f0119be5:	89 c3                	mov    %eax,%ebx
f0119be7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0119bee:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119bf3:	0f b6 d0             	movzbl %al,%edx
f0119bf6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119bf9:	01 d0                	add    %edx,%eax
f0119bfb:	48                   	dec    %eax
f0119bfc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0119bff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c02:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c07:	f7 75 cc             	divl   -0x34(%ebp)
f0119c0a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c0d:	29 d0                	sub    %edx,%eax
f0119c0f:	01 c3                	add    %eax,%ebx
f0119c11:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119c18:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119c1d:	0f b6 c0             	movzbl %al,%eax
f0119c20:	c1 e0 04             	shl    $0x4,%eax
f0119c23:	89 c2                	mov    %eax,%edx
f0119c25:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119c28:	01 d0                	add    %edx,%eax
f0119c2a:	48                   	dec    %eax
f0119c2b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0119c2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119c31:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c36:	f7 75 c4             	divl   -0x3c(%ebp)
f0119c39:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119c3c:	29 d0                	sub    %edx,%eax
f0119c3e:	01 d8                	add    %ebx,%eax
f0119c40:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0119c45:	39 c1                	cmp    %eax,%ecx
f0119c47:	74 17                	je     f0119c60 <test_kmalloc_bestfit1+0x230>
f0119c49:	83 ec 04             	sub    $0x4,%esp
f0119c4c:	68 74 b0 13 f0       	push   $0xf013b074
f0119c51:	68 a0 01 00 00       	push   $0x1a0
f0119c56:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119c5b:	e8 9b 65 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c60:	e8 d7 a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119c65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119c68:	74 17                	je     f0119c81 <test_kmalloc_bestfit1+0x251>
f0119c6a:	83 ec 04             	sub    $0x4,%esp
f0119c6d:	68 74 ac 13 f0       	push   $0xf013ac74
f0119c72:	68 a1 01 00 00       	push   $0x1a1
f0119c77:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119c7c:	e8 7a 65 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119c81:	e8 39 2c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119c86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119c89:	29 c2                	sub    %eax,%edx
f0119c8b:	89 d0                	mov    %edx,%eax
f0119c8d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119c92:	74 17                	je     f0119cab <test_kmalloc_bestfit1+0x27b>
f0119c94:	83 ec 04             	sub    $0x4,%esp
f0119c97:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119c9c:	68 a2 01 00 00       	push   $0x1a2
f0119ca1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119ca6:	e8 50 65 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119cab:	e8 0f 2c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119cb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119cb3:	e8 84 a0 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119cb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119cbb:	83 ec 0c             	sub    $0xc,%esp
f0119cbe:	68 00 fc 1f 00       	push   $0x1ffc00
f0119cc3:	e8 36 db fe ff       	call   f01077fe <kmalloc>
f0119cc8:	83 c4 10             	add    $0x10,%esp
f0119ccb:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0119cd1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119cd7:	89 c1                	mov    %eax,%ecx
f0119cd9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0119ce0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119ce3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119ce8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119ceb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cee:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cf3:	f7 75 bc             	divl   -0x44(%ebp)
f0119cf6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cf9:	29 d0                	sub    %edx,%eax
f0119cfb:	89 c3                	mov    %eax,%ebx
f0119cfd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119d04:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119d09:	0f b6 d0             	movzbl %al,%edx
f0119d0c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119d0f:	01 d0                	add    %edx,%eax
f0119d11:	48                   	dec    %eax
f0119d12:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119d15:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d18:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d1d:	f7 75 b4             	divl   -0x4c(%ebp)
f0119d20:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d23:	29 d0                	sub    %edx,%eax
f0119d25:	01 c3                	add    %eax,%ebx
f0119d27:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119d2e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119d33:	0f b6 c0             	movzbl %al,%eax
f0119d36:	c1 e0 04             	shl    $0x4,%eax
f0119d39:	89 c2                	mov    %eax,%edx
f0119d3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119d3e:	01 d0                	add    %edx,%eax
f0119d40:	48                   	dec    %eax
f0119d41:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119d44:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119d47:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d4c:	f7 75 ac             	divl   -0x54(%ebp)
f0119d4f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119d52:	29 d0                	sub    %edx,%eax
f0119d54:	01 d8                	add    %ebx,%eax
f0119d56:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0119d5b:	39 c1                	cmp    %eax,%ecx
f0119d5d:	74 17                	je     f0119d76 <test_kmalloc_bestfit1+0x346>
f0119d5f:	83 ec 04             	sub    $0x4,%esp
f0119d62:	68 74 b0 13 f0       	push   $0xf013b074
f0119d67:	68 a8 01 00 00       	push   $0x1a8
f0119d6c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119d71:	e8 85 64 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d76:	e8 c1 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119d7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119d7e:	74 17                	je     f0119d97 <test_kmalloc_bestfit1+0x367>
f0119d80:	83 ec 04             	sub    $0x4,%esp
f0119d83:	68 74 ac 13 f0       	push   $0xf013ac74
f0119d88:	68 a9 01 00 00       	push   $0x1a9
f0119d8d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119d92:	e8 64 64 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119d97:	e8 23 2b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119d9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119d9f:	29 c2                	sub    %eax,%edx
f0119da1:	89 d0                	mov    %edx,%eax
f0119da3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119da8:	74 17                	je     f0119dc1 <test_kmalloc_bestfit1+0x391>
f0119daa:	83 ec 04             	sub    $0x4,%esp
f0119dad:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119db2:	68 aa 01 00 00       	push   $0x1aa
f0119db7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119dbc:	e8 3a 64 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119dc1:	e8 f9 2a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119dc9:	e8 6e 9f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119dce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0119dd1:	83 ec 0c             	sub    $0xc,%esp
f0119dd4:	68 00 fc 1f 00       	push   $0x1ffc00
f0119dd9:	e8 20 da fe ff       	call   f01077fe <kmalloc>
f0119dde:	83 c4 10             	add    $0x10,%esp
f0119de1:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119de7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119ded:	89 c1                	mov    %eax,%ecx
f0119def:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119df6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119df9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119dfe:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119e01:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119e04:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e09:	f7 75 a4             	divl   -0x5c(%ebp)
f0119e0c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119e0f:	29 d0                	sub    %edx,%eax
f0119e11:	89 c3                	mov    %eax,%ebx
f0119e13:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119e1a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119e1f:	0f b6 d0             	movzbl %al,%edx
f0119e22:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119e25:	01 d0                	add    %edx,%eax
f0119e27:	48                   	dec    %eax
f0119e28:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119e2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e33:	f7 75 9c             	divl   -0x64(%ebp)
f0119e36:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119e39:	29 d0                	sub    %edx,%eax
f0119e3b:	01 c3                	add    %eax,%ebx
f0119e3d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119e44:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119e49:	0f b6 c0             	movzbl %al,%eax
f0119e4c:	c1 e0 04             	shl    $0x4,%eax
f0119e4f:	89 c2                	mov    %eax,%edx
f0119e51:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119e54:	01 d0                	add    %edx,%eax
f0119e56:	48                   	dec    %eax
f0119e57:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119e5a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119e5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e62:	f7 75 94             	divl   -0x6c(%ebp)
f0119e65:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119e68:	29 d0                	sub    %edx,%eax
f0119e6a:	01 d8                	add    %ebx,%eax
f0119e6c:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0119e71:	39 c1                	cmp    %eax,%ecx
f0119e73:	74 17                	je     f0119e8c <test_kmalloc_bestfit1+0x45c>
f0119e75:	83 ec 04             	sub    $0x4,%esp
f0119e78:	68 74 b0 13 f0       	push   $0xf013b074
f0119e7d:	68 b0 01 00 00       	push   $0x1b0
f0119e82:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119e87:	e8 6f 63 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e8c:	e8 ab 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119e91:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e94:	74 17                	je     f0119ead <test_kmalloc_bestfit1+0x47d>
f0119e96:	83 ec 04             	sub    $0x4,%esp
f0119e99:	68 74 ac 13 f0       	push   $0xf013ac74
f0119e9e:	68 b1 01 00 00       	push   $0x1b1
f0119ea3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119ea8:	e8 4e 63 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119ead:	e8 0d 2a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119eb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119eb5:	29 c2                	sub    %eax,%edx
f0119eb7:	89 d0                	mov    %edx,%eax
f0119eb9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119ebe:	74 17                	je     f0119ed7 <test_kmalloc_bestfit1+0x4a7>
f0119ec0:	83 ec 04             	sub    $0x4,%esp
f0119ec3:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119ec8:	68 b2 01 00 00       	push   $0x1b2
f0119ecd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119ed2:	e8 24 63 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ed7:	e8 e3 29 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119edc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119edf:	e8 58 9e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119ee4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119ee7:	83 ec 0c             	sub    $0xc,%esp
f0119eea:	68 00 fc 0f 00       	push   $0xffc00
f0119eef:	e8 0a d9 fe ff       	call   f01077fe <kmalloc>
f0119ef4:	83 c4 10             	add    $0x10,%esp
f0119ef7:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119efd:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0119f03:	89 c1                	mov    %eax,%ecx
f0119f05:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119f0c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119f0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f14:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119f17:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119f1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f1f:	f7 75 8c             	divl   -0x74(%ebp)
f0119f22:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119f25:	29 d0                	sub    %edx,%eax
f0119f27:	89 c3                	mov    %eax,%ebx
f0119f29:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119f30:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119f35:	0f b6 d0             	movzbl %al,%edx
f0119f38:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119f3b:	01 d0                	add    %edx,%eax
f0119f3d:	48                   	dec    %eax
f0119f3e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119f41:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f49:	f7 75 84             	divl   -0x7c(%ebp)
f0119f4c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119f4f:	29 d0                	sub    %edx,%eax
f0119f51:	01 c3                	add    %eax,%ebx
f0119f53:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119f5a:	10 00 00 
f0119f5d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0119f62:	0f b6 c0             	movzbl %al,%eax
f0119f65:	c1 e0 04             	shl    $0x4,%eax
f0119f68:	89 c2                	mov    %eax,%edx
f0119f6a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119f70:	01 d0                	add    %edx,%eax
f0119f72:	48                   	dec    %eax
f0119f73:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119f79:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119f7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f84:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119f8a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119f90:	29 d0                	sub    %edx,%eax
f0119f92:	01 d8                	add    %ebx,%eax
f0119f94:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f0119f99:	39 c1                	cmp    %eax,%ecx
f0119f9b:	74 17                	je     f0119fb4 <test_kmalloc_bestfit1+0x584>
f0119f9d:	83 ec 04             	sub    $0x4,%esp
f0119fa0:	68 74 b0 13 f0       	push   $0xf013b074
f0119fa5:	68 b8 01 00 00       	push   $0x1b8
f0119faa:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119faf:	e8 47 62 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fb4:	e8 83 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0119fb9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119fbc:	74 17                	je     f0119fd5 <test_kmalloc_bestfit1+0x5a5>
f0119fbe:	83 ec 04             	sub    $0x4,%esp
f0119fc1:	68 74 ac 13 f0       	push   $0xf013ac74
f0119fc6:	68 b9 01 00 00       	push   $0x1b9
f0119fcb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119fd0:	e8 26 62 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119fd5:	e8 e5 28 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f0119fda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119fdd:	29 c2                	sub    %eax,%edx
f0119fdf:	89 d0                	mov    %edx,%eax
f0119fe1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119fe6:	74 17                	je     f0119fff <test_kmalloc_bestfit1+0x5cf>
f0119fe8:	83 ec 04             	sub    $0x4,%esp
f0119feb:	68 a4 b0 13 f0       	push   $0xf013b0a4
f0119ff0:	68 ba 01 00 00       	push   $0x1ba
f0119ff5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0119ffa:	e8 fc 61 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119fff:	e8 bb 28 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a004:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a007:	e8 30 9d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a00c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011a00f:	83 ec 0c             	sub    $0xc,%esp
f011a012:	68 00 fc 0f 00       	push   $0xffc00
f011a017:	e8 e2 d7 fe ff       	call   f01077fe <kmalloc>
f011a01c:	83 c4 10             	add    $0x10,%esp
f011a01f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a025:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a02b:	89 c1                	mov    %eax,%ecx
f011a02d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011a034:	10 00 00 
f011a037:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a03d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a042:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011a048:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a04e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a053:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011a059:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a05f:	29 d0                	sub    %edx,%eax
f011a061:	89 c3                	mov    %eax,%ebx
f011a063:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011a06a:	10 00 00 
f011a06d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a072:	0f b6 d0             	movzbl %al,%edx
f011a075:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011a07b:	01 d0                	add    %edx,%eax
f011a07d:	48                   	dec    %eax
f011a07e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011a084:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a08a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a08f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011a095:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011a09b:	29 d0                	sub    %edx,%eax
f011a09d:	01 c3                	add    %eax,%ebx
f011a09f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011a0a6:	10 00 00 
f011a0a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a0ae:	0f b6 c0             	movzbl %al,%eax
f011a0b1:	c1 e0 04             	shl    $0x4,%eax
f011a0b4:	89 c2                	mov    %eax,%edx
f011a0b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011a0bc:	01 d0                	add    %edx,%eax
f011a0be:	48                   	dec    %eax
f011a0bf:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011a0c5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a0cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0d0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011a0d6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a0dc:	29 d0                	sub    %edx,%eax
f011a0de:	01 d8                	add    %ebx,%eax
f011a0e0:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a0e5:	39 c1                	cmp    %eax,%ecx
f011a0e7:	74 17                	je     f011a100 <test_kmalloc_bestfit1+0x6d0>
f011a0e9:	83 ec 04             	sub    $0x4,%esp
f011a0ec:	68 74 b0 13 f0       	push   $0xf013b074
f011a0f1:	68 c0 01 00 00       	push   $0x1c0
f011a0f6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a0fb:	e8 fb 60 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a100:	e8 37 9c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a105:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a108:	74 17                	je     f011a121 <test_kmalloc_bestfit1+0x6f1>
f011a10a:	83 ec 04             	sub    $0x4,%esp
f011a10d:	68 74 ac 13 f0       	push   $0xf013ac74
f011a112:	68 c1 01 00 00       	push   $0x1c1
f011a117:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a11c:	e8 da 60 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a121:	e8 99 27 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a126:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a129:	29 c2                	sub    %eax,%edx
f011a12b:	89 d0                	mov    %edx,%eax
f011a12d:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a132:	74 17                	je     f011a14b <test_kmalloc_bestfit1+0x71b>
f011a134:	83 ec 04             	sub    $0x4,%esp
f011a137:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a13c:	68 c2 01 00 00       	push   $0x1c2
f011a141:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a146:	e8 b0 60 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a14b:	e8 6f 27 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a150:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a153:	e8 e4 9b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a158:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011a15b:	83 ec 0c             	sub    $0xc,%esp
f011a15e:	68 00 fc 0f 00       	push   $0xffc00
f011a163:	e8 96 d6 fe ff       	call   f01077fe <kmalloc>
f011a168:	83 c4 10             	add    $0x10,%esp
f011a16b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011a171:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a177:	89 c1                	mov    %eax,%ecx
f011a179:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a180:	10 00 00 
f011a183:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a189:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a18e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a194:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a19a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a19f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a1a5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a1ab:	29 d0                	sub    %edx,%eax
f011a1ad:	89 c3                	mov    %eax,%ebx
f011a1af:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a1b6:	10 00 00 
f011a1b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a1be:	0f b6 d0             	movzbl %al,%edx
f011a1c1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a1c7:	01 d0                	add    %edx,%eax
f011a1c9:	48                   	dec    %eax
f011a1ca:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a1d0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a1d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1db:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a1e1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a1e7:	29 d0                	sub    %edx,%eax
f011a1e9:	01 c3                	add    %eax,%ebx
f011a1eb:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a1f2:	10 00 00 
f011a1f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a1fa:	0f b6 c0             	movzbl %al,%eax
f011a1fd:	c1 e0 04             	shl    $0x4,%eax
f011a200:	89 c2                	mov    %eax,%edx
f011a202:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a208:	01 d0                	add    %edx,%eax
f011a20a:	48                   	dec    %eax
f011a20b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a211:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a217:	ba 00 00 00 00       	mov    $0x0,%edx
f011a21c:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a222:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a228:	29 d0                	sub    %edx,%eax
f011a22a:	01 d8                	add    %ebx,%eax
f011a22c:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011a231:	39 c1                	cmp    %eax,%ecx
f011a233:	74 17                	je     f011a24c <test_kmalloc_bestfit1+0x81c>
f011a235:	83 ec 04             	sub    $0x4,%esp
f011a238:	68 74 b0 13 f0       	push   $0xf013b074
f011a23d:	68 c8 01 00 00       	push   $0x1c8
f011a242:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a247:	e8 af 5f fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a24c:	e8 eb 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a251:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a254:	74 17                	je     f011a26d <test_kmalloc_bestfit1+0x83d>
f011a256:	83 ec 04             	sub    $0x4,%esp
f011a259:	68 74 ac 13 f0       	push   $0xf013ac74
f011a25e:	68 c9 01 00 00       	push   $0x1c9
f011a263:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a268:	e8 8e 5f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a26d:	e8 4d 26 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a272:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a275:	29 c2                	sub    %eax,%edx
f011a277:	89 d0                	mov    %edx,%eax
f011a279:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a27e:	74 17                	je     f011a297 <test_kmalloc_bestfit1+0x867>
f011a280:	83 ec 04             	sub    $0x4,%esp
f011a283:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a288:	68 ca 01 00 00       	push   $0x1ca
f011a28d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a292:	e8 64 5f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011a297:	e8 23 26 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a29c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a29f:	e8 98 9a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a2a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011a2a7:	83 ec 0c             	sub    $0xc,%esp
f011a2aa:	68 00 fc 0f 00       	push   $0xffc00
f011a2af:	e8 4a d5 fe ff       	call   f01077fe <kmalloc>
f011a2b4:	83 c4 10             	add    $0x10,%esp
f011a2b7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011a2bd:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011a2c3:	89 c1                	mov    %eax,%ecx
f011a2c5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a2cc:	10 00 00 
f011a2cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a2d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a2da:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a2e0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a2e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2eb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a2f1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a2f7:	29 d0                	sub    %edx,%eax
f011a2f9:	89 c3                	mov    %eax,%ebx
f011a2fb:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a302:	10 00 00 
f011a305:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a30a:	0f b6 d0             	movzbl %al,%edx
f011a30d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a313:	01 d0                	add    %edx,%eax
f011a315:	48                   	dec    %eax
f011a316:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a31c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a322:	ba 00 00 00 00       	mov    $0x0,%edx
f011a327:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a32d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a333:	29 d0                	sub    %edx,%eax
f011a335:	01 c3                	add    %eax,%ebx
f011a337:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a33e:	10 00 00 
f011a341:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a346:	0f b6 c0             	movzbl %al,%eax
f011a349:	c1 e0 04             	shl    $0x4,%eax
f011a34c:	89 c2                	mov    %eax,%edx
f011a34e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a354:	01 d0                	add    %edx,%eax
f011a356:	48                   	dec    %eax
f011a357:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a35d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a363:	ba 00 00 00 00       	mov    $0x0,%edx
f011a368:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a36e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a374:	29 d0                	sub    %edx,%eax
f011a376:	01 d8                	add    %ebx,%eax
f011a378:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011a37d:	39 c1                	cmp    %eax,%ecx
f011a37f:	74 17                	je     f011a398 <test_kmalloc_bestfit1+0x968>
f011a381:	83 ec 04             	sub    $0x4,%esp
f011a384:	68 74 b0 13 f0       	push   $0xf013b074
f011a389:	68 d0 01 00 00       	push   $0x1d0
f011a38e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a393:	e8 63 5e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a398:	e8 9f 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a39d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a3a0:	74 17                	je     f011a3b9 <test_kmalloc_bestfit1+0x989>
f011a3a2:	83 ec 04             	sub    $0x4,%esp
f011a3a5:	68 74 ac 13 f0       	push   $0xf013ac74
f011a3aa:	68 d1 01 00 00       	push   $0x1d1
f011a3af:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a3b4:	e8 42 5e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a3b9:	e8 01 25 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a3be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a3c1:	29 c2                	sub    %eax,%edx
f011a3c3:	89 d0                	mov    %edx,%eax
f011a3c5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a3ca:	74 17                	je     f011a3e3 <test_kmalloc_bestfit1+0x9b3>
f011a3cc:	83 ec 04             	sub    $0x4,%esp
f011a3cf:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a3d4:	68 d2 01 00 00       	push   $0x1d2
f011a3d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a3de:	e8 18 5e fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a3e3:	e8 d7 24 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a3e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a3eb:	e8 4c 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a3f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011a3f3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a3f9:	83 ec 0c             	sub    $0xc,%esp
f011a3fc:	50                   	push   %eax
f011a3fd:	e8 be d4 fe ff       	call   f01078c0 <kfree>
f011a402:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a405:	e8 32 99 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a40a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a40d:	74 17                	je     f011a426 <test_kmalloc_bestfit1+0x9f6>
f011a40f:	83 ec 04             	sub    $0x4,%esp
f011a412:	68 74 ac 13 f0       	push   $0xf013ac74
f011a417:	68 db 01 00 00       	push   $0x1db
f011a41c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a421:	e8 d5 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a426:	e8 94 24 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a42b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a42e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a433:	74 17                	je     f011a44c <test_kmalloc_bestfit1+0xa1c>
f011a435:	83 ec 04             	sub    $0x4,%esp
f011a438:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a43d:	68 dc 01 00 00       	push   $0x1dc
f011a442:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a447:	e8 af 5d fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a44c:	e8 6e 24 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a451:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a454:	e8 e3 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a459:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011a45c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a462:	83 ec 0c             	sub    $0xc,%esp
f011a465:	50                   	push   %eax
f011a466:	e8 55 d4 fe ff       	call   f01078c0 <kfree>
f011a46b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a46e:	e8 c9 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a473:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a476:	74 17                	je     f011a48f <test_kmalloc_bestfit1+0xa5f>
f011a478:	83 ec 04             	sub    $0x4,%esp
f011a47b:	68 74 ac 13 f0       	push   $0xf013ac74
f011a480:	68 e2 01 00 00       	push   $0x1e2
f011a485:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a48a:	e8 6c 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011a48f:	e8 2b 24 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a494:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a497:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a49c:	74 17                	je     f011a4b5 <test_kmalloc_bestfit1+0xa85>
f011a49e:	83 ec 04             	sub    $0x4,%esp
f011a4a1:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a4a6:	68 e3 01 00 00       	push   $0x1e3
f011a4ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a4b0:	e8 46 5d fe ff       	call   f01001fb <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011a4b5:	e8 05 24 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a4ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4bd:	e8 7a 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011a4c5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a4cb:	83 ec 0c             	sub    $0xc,%esp
f011a4ce:	50                   	push   %eax
f011a4cf:	e8 ec d3 fe ff       	call   f01078c0 <kfree>
f011a4d4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4d7:	e8 60 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a4dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4df:	74 17                	je     f011a4f8 <test_kmalloc_bestfit1+0xac8>
f011a4e1:	83 ec 04             	sub    $0x4,%esp
f011a4e4:	68 74 ac 13 f0       	push   $0xf013ac74
f011a4e9:	68 e9 01 00 00       	push   $0x1e9
f011a4ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a4f3:	e8 03 5d fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a4f8:	e8 c2 23 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a4fd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a500:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a505:	74 17                	je     f011a51e <test_kmalloc_bestfit1+0xaee>
f011a507:	83 ec 04             	sub    $0x4,%esp
f011a50a:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011a50f:	68 ea 01 00 00       	push   $0x1ea
f011a514:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a519:	e8 dd 5c fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a51e:	e8 9c 23 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a523:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a526:	e8 11 98 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a52b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011a52e:	83 ec 0c             	sub    $0xc,%esp
f011a531:	68 00 00 08 00       	push   $0x80000
f011a536:	e8 c3 d2 fe ff       	call   f01077fe <kmalloc>
f011a53b:	83 c4 10             	add    $0x10,%esp
f011a53e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011a544:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a54a:	89 c1                	mov    %eax,%ecx
f011a54c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a553:	10 00 00 
f011a556:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a55c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a561:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a567:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a56d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a572:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a578:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a57e:	29 d0                	sub    %edx,%eax
f011a580:	89 c3                	mov    %eax,%ebx
f011a582:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a589:	10 00 00 
f011a58c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a591:	0f b6 d0             	movzbl %al,%edx
f011a594:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a59a:	01 d0                	add    %edx,%eax
f011a59c:	48                   	dec    %eax
f011a59d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a5a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a5a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5ae:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a5b4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a5ba:	29 d0                	sub    %edx,%eax
f011a5bc:	01 c3                	add    %eax,%ebx
f011a5be:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a5c5:	10 00 00 
f011a5c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a5cd:	0f b6 c0             	movzbl %al,%eax
f011a5d0:	c1 e0 04             	shl    $0x4,%eax
f011a5d3:	89 c2                	mov    %eax,%edx
f011a5d5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a5db:	01 d0                	add    %edx,%eax
f011a5dd:	48                   	dec    %eax
f011a5de:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a5e4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a5ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5ef:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a5f5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a5fb:	29 d0                	sub    %edx,%eax
f011a5fd:	01 d8                	add    %ebx,%eax
f011a5ff:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a604:	39 c1                	cmp    %eax,%ecx
f011a606:	74 17                	je     f011a61f <test_kmalloc_bestfit1+0xbef>
f011a608:	83 ec 04             	sub    $0x4,%esp
f011a60b:	68 74 b0 13 f0       	push   $0xf013b074
f011a610:	68 f3 01 00 00       	push   $0x1f3
f011a615:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a61a:	e8 dc 5b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a61f:	e8 18 97 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a624:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a627:	74 17                	je     f011a640 <test_kmalloc_bestfit1+0xc10>
f011a629:	83 ec 04             	sub    $0x4,%esp
f011a62c:	68 74 ac 13 f0       	push   $0xf013ac74
f011a631:	68 f4 01 00 00       	push   $0x1f4
f011a636:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a63b:	e8 bb 5b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a640:	e8 7a 22 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a645:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a648:	29 c2                	sub    %eax,%edx
f011a64a:	89 d0                	mov    %edx,%eax
f011a64c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a651:	74 17                	je     f011a66a <test_kmalloc_bestfit1+0xc3a>
f011a653:	83 ec 04             	sub    $0x4,%esp
f011a656:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a65b:	68 f5 01 00 00       	push   $0x1f5
f011a660:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a665:	e8 91 5b fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a66a:	e8 50 22 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a66f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a672:	e8 c5 96 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a677:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a67a:	83 ec 0c             	sub    $0xc,%esp
f011a67d:	68 00 fc 0f 00       	push   $0xffc00
f011a682:	e8 77 d1 fe ff       	call   f01077fe <kmalloc>
f011a687:	83 c4 10             	add    $0x10,%esp
f011a68a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a690:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a696:	89 c1                	mov    %eax,%ecx
f011a698:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a69f:	10 00 00 
f011a6a2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a6a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6ad:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a6b3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a6b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6be:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a6c4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a6ca:	29 d0                	sub    %edx,%eax
f011a6cc:	89 c3                	mov    %eax,%ebx
f011a6ce:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a6d5:	10 00 00 
f011a6d8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a6dd:	0f b6 d0             	movzbl %al,%edx
f011a6e0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a6e6:	01 d0                	add    %edx,%eax
f011a6e8:	48                   	dec    %eax
f011a6e9:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a6ef:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a6f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6fa:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a700:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a706:	29 d0                	sub    %edx,%eax
f011a708:	01 c3                	add    %eax,%ebx
f011a70a:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a711:	10 00 00 
f011a714:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a719:	0f b6 c0             	movzbl %al,%eax
f011a71c:	c1 e0 04             	shl    $0x4,%eax
f011a71f:	89 c2                	mov    %eax,%edx
f011a721:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a727:	01 d0                	add    %edx,%eax
f011a729:	48                   	dec    %eax
f011a72a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a730:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a736:	ba 00 00 00 00       	mov    $0x0,%edx
f011a73b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a741:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a747:	29 d0                	sub    %edx,%eax
f011a749:	01 d8                	add    %ebx,%eax
f011a74b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a750:	39 c1                	cmp    %eax,%ecx
f011a752:	74 17                	je     f011a76b <test_kmalloc_bestfit1+0xd3b>
f011a754:	83 ec 04             	sub    $0x4,%esp
f011a757:	68 74 b0 13 f0       	push   $0xf013b074
f011a75c:	68 fb 01 00 00       	push   $0x1fb
f011a761:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a766:	e8 90 5a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a76b:	e8 cc 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a770:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a773:	74 17                	je     f011a78c <test_kmalloc_bestfit1+0xd5c>
f011a775:	83 ec 04             	sub    $0x4,%esp
f011a778:	68 74 ac 13 f0       	push   $0xf013ac74
f011a77d:	68 fc 01 00 00       	push   $0x1fc
f011a782:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a787:	e8 6f 5a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a78c:	e8 2e 21 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a791:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a794:	29 c2                	sub    %eax,%edx
f011a796:	89 d0                	mov    %edx,%eax
f011a798:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a79d:	74 17                	je     f011a7b6 <test_kmalloc_bestfit1+0xd86>
f011a79f:	83 ec 04             	sub    $0x4,%esp
f011a7a2:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a7a7:	68 fd 01 00 00       	push   $0x1fd
f011a7ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a7b1:	e8 45 5a fe ff       	call   f01001fb <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a7b6:	e8 04 21 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a7bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a7be:	e8 79 95 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a7c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a7c6:	83 ec 0c             	sub    $0xc,%esp
f011a7c9:	68 00 fc 03 00       	push   $0x3fc00
f011a7ce:	e8 2b d0 fe ff       	call   f01077fe <kmalloc>
f011a7d3:	83 c4 10             	add    $0x10,%esp
f011a7d6:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a7dc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a7e2:	89 c1                	mov    %eax,%ecx
f011a7e4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a7eb:	10 00 00 
f011a7ee:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a7f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a7f9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a7ff:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a805:	ba 00 00 00 00       	mov    $0x0,%edx
f011a80a:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a810:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a816:	29 d0                	sub    %edx,%eax
f011a818:	89 c3                	mov    %eax,%ebx
f011a81a:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a821:	10 00 00 
f011a824:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a829:	0f b6 d0             	movzbl %al,%edx
f011a82c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a832:	01 d0                	add    %edx,%eax
f011a834:	48                   	dec    %eax
f011a835:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a83b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a841:	ba 00 00 00 00       	mov    $0x0,%edx
f011a846:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a84c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a852:	29 d0                	sub    %edx,%eax
f011a854:	01 c3                	add    %eax,%ebx
f011a856:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a85d:	10 00 00 
f011a860:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a865:	0f b6 c0             	movzbl %al,%eax
f011a868:	c1 e0 04             	shl    $0x4,%eax
f011a86b:	89 c2                	mov    %eax,%edx
f011a86d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a873:	01 d0                	add    %edx,%eax
f011a875:	48                   	dec    %eax
f011a876:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a87c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a882:	ba 00 00 00 00       	mov    $0x0,%edx
f011a887:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a88d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a893:	29 d0                	sub    %edx,%eax
f011a895:	01 d8                	add    %ebx,%eax
f011a897:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a89c:	39 c1                	cmp    %eax,%ecx
f011a89e:	74 17                	je     f011a8b7 <test_kmalloc_bestfit1+0xe87>
f011a8a0:	83 ec 04             	sub    $0x4,%esp
f011a8a3:	68 74 b0 13 f0       	push   $0xf013b074
f011a8a8:	68 03 02 00 00       	push   $0x203
f011a8ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a8b2:	e8 44 59 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8b7:	e8 80 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a8bc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a8bf:	74 17                	je     f011a8d8 <test_kmalloc_bestfit1+0xea8>
f011a8c1:	83 ec 04             	sub    $0x4,%esp
f011a8c4:	68 74 ac 13 f0       	push   $0xf013ac74
f011a8c9:	68 04 02 00 00       	push   $0x204
f011a8ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a8d3:	e8 23 59 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a8d8:	e8 e2 1f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a8dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a8e0:	29 c2                	sub    %eax,%edx
f011a8e2:	89 d0                	mov    %edx,%eax
f011a8e4:	83 f8 40             	cmp    $0x40,%eax
f011a8e7:	74 17                	je     f011a900 <test_kmalloc_bestfit1+0xed0>
f011a8e9:	83 ec 04             	sub    $0x4,%esp
f011a8ec:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011a8f1:	68 05 02 00 00       	push   $0x205
f011a8f6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a8fb:	e8 fb 58 fe ff       	call   f01001fb <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a900:	e8 ba 1f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011a905:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a908:	e8 2f 94 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011a90d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a910:	83 ec 0c             	sub    $0xc,%esp
f011a913:	68 00 fc 3f 00       	push   $0x3ffc00
f011a918:	e8 e1 ce fe ff       	call   f01077fe <kmalloc>
f011a91d:	83 c4 10             	add    $0x10,%esp
f011a920:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a926:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a92c:	89 c1                	mov    %eax,%ecx
f011a92e:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a935:	10 00 00 
f011a938:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a93e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a943:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a949:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a94f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a954:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a95a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a960:	29 d0                	sub    %edx,%eax
f011a962:	89 c3                	mov    %eax,%ebx
f011a964:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a96b:	10 00 00 
f011a96e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a973:	0f b6 d0             	movzbl %al,%edx
f011a976:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a97c:	01 d0                	add    %edx,%eax
f011a97e:	48                   	dec    %eax
f011a97f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a985:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a98b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a990:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a996:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a99c:	29 d0                	sub    %edx,%eax
f011a99e:	01 c3                	add    %eax,%ebx
f011a9a0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a9a7:	10 00 00 
f011a9aa:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011a9af:	0f b6 c0             	movzbl %al,%eax
f011a9b2:	c1 e0 04             	shl    $0x4,%eax
f011a9b5:	89 c2                	mov    %eax,%edx
f011a9b7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a9bd:	01 d0                	add    %edx,%eax
f011a9bf:	48                   	dec    %eax
f011a9c0:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a9c6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a9cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9d1:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a9d7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a9dd:	29 d0                	sub    %edx,%eax
f011a9df:	01 d8                	add    %ebx,%eax
f011a9e1:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a9e6:	39 c1                	cmp    %eax,%ecx
f011a9e8:	74 17                	je     f011aa01 <test_kmalloc_bestfit1+0xfd1>
f011a9ea:	83 ec 04             	sub    $0x4,%esp
f011a9ed:	68 74 b0 13 f0       	push   $0xf013b074
f011a9f2:	68 0b 02 00 00       	push   $0x20b
f011a9f7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011a9fc:	e8 fa 57 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa01:	e8 36 93 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa09:	74 17                	je     f011aa22 <test_kmalloc_bestfit1+0xff2>
f011aa0b:	83 ec 04             	sub    $0x4,%esp
f011aa0e:	68 74 ac 13 f0       	push   $0xf013ac74
f011aa13:	68 0c 02 00 00       	push   $0x20c
f011aa18:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa1d:	e8 d9 57 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011aa22:	e8 98 1e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aa27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa2a:	29 c2                	sub    %eax,%edx
f011aa2c:	89 d0                	mov    %edx,%eax
f011aa2e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011aa33:	74 17                	je     f011aa4c <test_kmalloc_bestfit1+0x101c>
f011aa35:	83 ec 04             	sub    $0x4,%esp
f011aa38:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011aa3d:	68 0d 02 00 00       	push   $0x20d
f011aa42:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa47:	e8 af 57 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011aa4c:	e8 6e 1e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aa51:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa54:	e8 e3 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa59:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011aa5c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011aa62:	83 ec 0c             	sub    $0xc,%esp
f011aa65:	50                   	push   %eax
f011aa66:	e8 55 ce fe ff       	call   f01078c0 <kfree>
f011aa6b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa6e:	e8 c9 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aa73:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa76:	74 17                	je     f011aa8f <test_kmalloc_bestfit1+0x105f>
f011aa78:	83 ec 04             	sub    $0x4,%esp
f011aa7b:	68 74 ac 13 f0       	push   $0xf013ac74
f011aa80:	68 16 02 00 00       	push   $0x216
f011aa85:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aa8a:	e8 6c 57 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011aa8f:	e8 2b 1e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aa94:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011aa97:	3d 00 01 00 00       	cmp    $0x100,%eax
f011aa9c:	74 17                	je     f011aab5 <test_kmalloc_bestfit1+0x1085>
f011aa9e:	83 ec 04             	sub    $0x4,%esp
f011aaa1:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011aaa6:	68 17 02 00 00       	push   $0x217
f011aaab:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aab0:	e8 46 57 fe ff       	call   f01001fb <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011aab5:	e8 05 1e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aaba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aabd:	e8 7a 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aac2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011aac5:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011aacb:	83 ec 0c             	sub    $0xc,%esp
f011aace:	50                   	push   %eax
f011aacf:	e8 ec cd fe ff       	call   f01078c0 <kfree>
f011aad4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aad7:	e8 60 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aadc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aadf:	74 17                	je     f011aaf8 <test_kmalloc_bestfit1+0x10c8>
f011aae1:	83 ec 04             	sub    $0x4,%esp
f011aae4:	68 74 ac 13 f0       	push   $0xf013ac74
f011aae9:	68 1d 02 00 00       	push   $0x21d
f011aaee:	68 5a ac 13 f0       	push   $0xf013ac5a
f011aaf3:	e8 03 57 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011aaf8:	e8 c2 1d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aafd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ab00:	3d 80 00 00 00       	cmp    $0x80,%eax
f011ab05:	74 17                	je     f011ab1e <test_kmalloc_bestfit1+0x10ee>
f011ab07:	83 ec 04             	sub    $0x4,%esp
f011ab0a:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ab0f:	68 1e 02 00 00       	push   $0x21e
f011ab14:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ab19:	e8 dd 56 fe ff       	call   f01001fb <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011ab1e:	e8 9c 1d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011ab23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab26:	e8 11 92 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ab2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011ab2e:	83 ec 0c             	sub    $0xc,%esp
f011ab31:	68 00 fc 1f 00       	push   $0x1ffc00
f011ab36:	e8 c3 cc fe ff       	call   f01077fe <kmalloc>
f011ab3b:	83 c4 10             	add    $0x10,%esp
f011ab3e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011ab44:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ab4a:	89 c1                	mov    %eax,%ecx
f011ab4c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ab53:	10 00 00 
f011ab56:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ab5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab61:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ab67:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ab6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab72:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ab78:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ab7e:	29 d0                	sub    %edx,%eax
f011ab80:	89 c3                	mov    %eax,%ebx
f011ab82:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ab89:	10 00 00 
f011ab8c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ab91:	0f b6 d0             	movzbl %al,%edx
f011ab94:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ab9a:	01 d0                	add    %edx,%eax
f011ab9c:	48                   	dec    %eax
f011ab9d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011aba3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011aba9:	ba 00 00 00 00       	mov    $0x0,%edx
f011abae:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011abb4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011abba:	29 d0                	sub    %edx,%eax
f011abbc:	01 c3                	add    %eax,%ebx
f011abbe:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011abc5:	10 00 00 
f011abc8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011abcd:	0f b6 c0             	movzbl %al,%eax
f011abd0:	c1 e0 04             	shl    $0x4,%eax
f011abd3:	89 c2                	mov    %eax,%edx
f011abd5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011abdb:	01 d0                	add    %edx,%eax
f011abdd:	48                   	dec    %eax
f011abde:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011abe4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011abea:	ba 00 00 00 00       	mov    $0x0,%edx
f011abef:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011abf5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011abfb:	29 d0                	sub    %edx,%eax
f011abfd:	01 d8                	add    %ebx,%eax
f011abff:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ac04:	39 c1                	cmp    %eax,%ecx
f011ac06:	74 17                	je     f011ac1f <test_kmalloc_bestfit1+0x11ef>
f011ac08:	83 ec 04             	sub    $0x4,%esp
f011ac0b:	68 74 b0 13 f0       	push   $0xf013b074
f011ac10:	68 27 02 00 00       	push   $0x227
f011ac15:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac1a:	e8 dc 55 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac1f:	e8 18 91 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ac24:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ac27:	74 17                	je     f011ac40 <test_kmalloc_bestfit1+0x1210>
f011ac29:	83 ec 04             	sub    $0x4,%esp
f011ac2c:	68 74 ac 13 f0       	push   $0xf013ac74
f011ac31:	68 28 02 00 00       	push   $0x228
f011ac36:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac3b:	e8 bb 55 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ac40:	e8 7a 1c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011ac45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac48:	29 c2                	sub    %eax,%edx
f011ac4a:	89 d0                	mov    %edx,%eax
f011ac4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac51:	74 17                	je     f011ac6a <test_kmalloc_bestfit1+0x123a>
f011ac53:	83 ec 04             	sub    $0x4,%esp
f011ac56:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ac5b:	68 29 02 00 00       	push   $0x229
f011ac60:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ac65:	e8 91 55 fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ac6a:	83 ec 0c             	sub    $0xc,%esp
f011ac6d:	68 c4 b0 13 f0       	push   $0xf013b0c4
f011ac72:	e8 0b 60 fe ff       	call   f0100c82 <cprintf>
f011ac77:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ac7a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ac7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ac82:	5b                   	pop    %ebx
f011ac83:	5f                   	pop    %edi
f011ac84:	5d                   	pop    %ebp
f011ac85:	c3                   	ret    

f011ac86 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ac86:	55                   	push   %ebp
f011ac87:	89 e5                	mov    %esp,%ebp
f011ac89:	57                   	push   %edi
f011ac8a:	53                   	push   %ebx
f011ac8b:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011ac91:	83 ec 0c             	sub    $0xc,%esp
f011ac94:	68 9c ab 13 f0       	push   $0xf013ab9c
f011ac99:	e8 e4 5f fe ff       	call   f0100c82 <cprintf>
f011ac9e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011aca1:	83 ec 0c             	sub    $0xc,%esp
f011aca4:	68 cc ab 13 f0       	push   $0xf013abcc
f011aca9:	e8 d4 5f fe ff       	call   f0100c82 <cprintf>
f011acae:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011acb1:	83 ec 0c             	sub    $0xc,%esp
f011acb4:	68 9c ab 13 f0       	push   $0xf013ab9c
f011acb9:	e8 c4 5f fe ff       	call   f0100c82 <cprintf>
f011acbe:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011acc1:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011acc7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011accc:	b8 00 00 00 00       	mov    $0x0,%eax
f011acd1:	89 d7                	mov    %edx,%edi
f011acd3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011acd5:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011acdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011acdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ace4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ace7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011acea:	ba 00 00 00 00       	mov    $0x0,%edx
f011acef:	f7 75 f4             	divl   -0xc(%ebp)
f011acf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011acf5:	29 d0                	sub    %edx,%eax
f011acf7:	89 c1                	mov    %eax,%ecx
f011acf9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ad00:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad05:	0f b6 d0             	movzbl %al,%edx
f011ad08:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ad0b:	01 d0                	add    %edx,%eax
f011ad0d:	48                   	dec    %eax
f011ad0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ad11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ad14:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad19:	f7 75 ec             	divl   -0x14(%ebp)
f011ad1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ad1f:	29 d0                	sub    %edx,%eax
f011ad21:	01 c1                	add    %eax,%ecx
f011ad23:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ad2a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ad2f:	0f b6 c0             	movzbl %al,%eax
f011ad32:	c1 e0 04             	shl    $0x4,%eax
f011ad35:	89 c2                	mov    %eax,%edx
f011ad37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ad3a:	01 d0                	add    %edx,%eax
f011ad3c:	48                   	dec    %eax
f011ad3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ad40:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ad43:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad48:	f7 75 e4             	divl   -0x1c(%ebp)
f011ad4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ad4e:	29 d0                	sub    %edx,%eax
f011ad50:	01 c8                	add    %ecx,%eax
f011ad52:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ad57:	29 c2                	sub    %eax,%edx
f011ad59:	89 d0                	mov    %edx,%eax
f011ad5b:	83 ec 0c             	sub    $0xc,%esp
f011ad5e:	50                   	push   %eax
f011ad5f:	e8 9a ca fe ff       	call   f01077fe <kmalloc>
f011ad64:	83 c4 10             	add    $0x10,%esp
f011ad67:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ad6d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ad73:	85 c0                	test   %eax,%eax
f011ad75:	74 17                	je     f011ad8e <test_kmalloc_bestfit2+0x108>
f011ad77:	83 ec 04             	sub    $0x4,%esp
f011ad7a:	68 0c b1 13 f0       	push   $0xf013b10c
f011ad7f:	68 3f 02 00 00       	push   $0x23f
f011ad84:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ad89:	e8 6d 54 fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad8e:	e8 2c 1b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011ad93:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ad96:	e8 a1 8f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ad9b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ad9e:	83 ec 0c             	sub    $0xc,%esp
f011ada1:	68 00 fc 1f 00       	push   $0x1ffc00
f011ada6:	e8 53 ca fe ff       	call   f01077fe <kmalloc>
f011adab:	83 c4 10             	add    $0x10,%esp
f011adae:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011adb4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011adba:	89 c1                	mov    %eax,%ecx
f011adbc:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011adc3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011adc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011adcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011adce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011add1:	ba 00 00 00 00       	mov    $0x0,%edx
f011add6:	f7 75 d4             	divl   -0x2c(%ebp)
f011add9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011addc:	29 d0                	sub    %edx,%eax
f011adde:	89 c3                	mov    %eax,%ebx
f011ade0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ade7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011adec:	0f b6 d0             	movzbl %al,%edx
f011adef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011adf2:	01 d0                	add    %edx,%eax
f011adf4:	48                   	dec    %eax
f011adf5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011adf8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011adfb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae00:	f7 75 cc             	divl   -0x34(%ebp)
f011ae03:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ae06:	29 d0                	sub    %edx,%eax
f011ae08:	01 c3                	add    %eax,%ebx
f011ae0a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ae11:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ae16:	0f b6 c0             	movzbl %al,%eax
f011ae19:	c1 e0 04             	shl    $0x4,%eax
f011ae1c:	89 c2                	mov    %eax,%edx
f011ae1e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011ae21:	01 d0                	add    %edx,%eax
f011ae23:	48                   	dec    %eax
f011ae24:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011ae27:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae2f:	f7 75 c4             	divl   -0x3c(%ebp)
f011ae32:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae35:	29 d0                	sub    %edx,%eax
f011ae37:	01 d8                	add    %ebx,%eax
f011ae39:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ae3e:	39 c1                	cmp    %eax,%ecx
f011ae40:	74 17                	je     f011ae59 <test_kmalloc_bestfit2+0x1d3>
f011ae42:	83 ec 04             	sub    $0x4,%esp
f011ae45:	68 74 b0 13 f0       	push   $0xf013b074
f011ae4a:	68 49 02 00 00       	push   $0x249
f011ae4f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ae54:	e8 a2 53 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae59:	e8 de 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ae5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae61:	74 17                	je     f011ae7a <test_kmalloc_bestfit2+0x1f4>
f011ae63:	83 ec 04             	sub    $0x4,%esp
f011ae66:	68 74 ac 13 f0       	push   $0xf013ac74
f011ae6b:	68 4a 02 00 00       	push   $0x24a
f011ae70:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ae75:	e8 81 53 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011ae7a:	e8 40 1a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011ae7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ae82:	29 c2                	sub    %eax,%edx
f011ae84:	89 d0                	mov    %edx,%eax
f011ae86:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae8b:	74 17                	je     f011aea4 <test_kmalloc_bestfit2+0x21e>
f011ae8d:	83 ec 04             	sub    $0x4,%esp
f011ae90:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ae95:	68 4b 02 00 00       	push   $0x24b
f011ae9a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ae9f:	e8 57 53 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aea4:	e8 16 1a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011aea9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aeac:	e8 8b 8e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011aeb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011aeb4:	83 ec 0c             	sub    $0xc,%esp
f011aeb7:	68 00 fc 1f 00       	push   $0x1ffc00
f011aebc:	e8 3d c9 fe ff       	call   f01077fe <kmalloc>
f011aec1:	83 c4 10             	add    $0x10,%esp
f011aec4:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011aeca:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011aed0:	89 c1                	mov    %eax,%ecx
f011aed2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aed9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aedc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aee1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aee4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aee7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeec:	f7 75 bc             	divl   -0x44(%ebp)
f011aeef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aef2:	29 d0                	sub    %edx,%eax
f011aef4:	89 c3                	mov    %eax,%ebx
f011aef6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aefd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af02:	0f b6 d0             	movzbl %al,%edx
f011af05:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011af08:	01 d0                	add    %edx,%eax
f011af0a:	48                   	dec    %eax
f011af0b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011af0e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011af11:	ba 00 00 00 00       	mov    $0x0,%edx
f011af16:	f7 75 b4             	divl   -0x4c(%ebp)
f011af19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011af1c:	29 d0                	sub    %edx,%eax
f011af1e:	01 c3                	add    %eax,%ebx
f011af20:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011af27:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011af2c:	0f b6 c0             	movzbl %al,%eax
f011af2f:	c1 e0 04             	shl    $0x4,%eax
f011af32:	89 c2                	mov    %eax,%edx
f011af34:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011af37:	01 d0                	add    %edx,%eax
f011af39:	48                   	dec    %eax
f011af3a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011af3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011af40:	ba 00 00 00 00       	mov    $0x0,%edx
f011af45:	f7 75 ac             	divl   -0x54(%ebp)
f011af48:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011af4b:	29 d0                	sub    %edx,%eax
f011af4d:	01 d8                	add    %ebx,%eax
f011af4f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011af54:	39 c1                	cmp    %eax,%ecx
f011af56:	74 17                	je     f011af6f <test_kmalloc_bestfit2+0x2e9>
f011af58:	83 ec 04             	sub    $0x4,%esp
f011af5b:	68 74 b0 13 f0       	push   $0xf013b074
f011af60:	68 51 02 00 00       	push   $0x251
f011af65:	68 5a ac 13 f0       	push   $0xf013ac5a
f011af6a:	e8 8c 52 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af6f:	e8 c8 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011af74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af77:	74 17                	je     f011af90 <test_kmalloc_bestfit2+0x30a>
f011af79:	83 ec 04             	sub    $0x4,%esp
f011af7c:	68 74 ac 13 f0       	push   $0xf013ac74
f011af81:	68 52 02 00 00       	push   $0x252
f011af86:	68 5a ac 13 f0       	push   $0xf013ac5a
f011af8b:	e8 6b 52 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011af90:	e8 2a 19 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011af95:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011af98:	29 c2                	sub    %eax,%edx
f011af9a:	89 d0                	mov    %edx,%eax
f011af9c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011afa1:	74 17                	je     f011afba <test_kmalloc_bestfit2+0x334>
f011afa3:	83 ec 04             	sub    $0x4,%esp
f011afa6:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011afab:	68 53 02 00 00       	push   $0x253
f011afb0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011afb5:	e8 41 52 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011afba:	e8 00 19 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011afbf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011afc2:	e8 75 8d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011afc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011afca:	83 ec 0c             	sub    $0xc,%esp
f011afcd:	68 00 08 00 00       	push   $0x800
f011afd2:	e8 27 c8 fe ff       	call   f01077fe <kmalloc>
f011afd7:	83 c4 10             	add    $0x10,%esp
f011afda:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011afe0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011afe6:	89 c1                	mov    %eax,%ecx
f011afe8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011afef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011aff2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aff7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011affa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011affd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b002:	f7 75 a4             	divl   -0x5c(%ebp)
f011b005:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b008:	29 d0                	sub    %edx,%eax
f011b00a:	89 c3                	mov    %eax,%ebx
f011b00c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b013:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b018:	0f b6 d0             	movzbl %al,%edx
f011b01b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b01e:	01 d0                	add    %edx,%eax
f011b020:	48                   	dec    %eax
f011b021:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b024:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b027:	ba 00 00 00 00       	mov    $0x0,%edx
f011b02c:	f7 75 9c             	divl   -0x64(%ebp)
f011b02f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b032:	29 d0                	sub    %edx,%eax
f011b034:	01 c3                	add    %eax,%ebx
f011b036:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b03d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b042:	0f b6 c0             	movzbl %al,%eax
f011b045:	c1 e0 04             	shl    $0x4,%eax
f011b048:	89 c2                	mov    %eax,%edx
f011b04a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b04d:	01 d0                	add    %edx,%eax
f011b04f:	48                   	dec    %eax
f011b050:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b053:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b056:	ba 00 00 00 00       	mov    $0x0,%edx
f011b05b:	f7 75 94             	divl   -0x6c(%ebp)
f011b05e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b061:	29 d0                	sub    %edx,%eax
f011b063:	01 d8                	add    %ebx,%eax
f011b065:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011b06a:	39 c1                	cmp    %eax,%ecx
f011b06c:	74 17                	je     f011b085 <test_kmalloc_bestfit2+0x3ff>
f011b06e:	83 ec 04             	sub    $0x4,%esp
f011b071:	68 74 b0 13 f0       	push   $0xf013b074
f011b076:	68 59 02 00 00       	push   $0x259
f011b07b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b080:	e8 76 51 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b085:	e8 b2 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b08a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b08d:	74 17                	je     f011b0a6 <test_kmalloc_bestfit2+0x420>
f011b08f:	83 ec 04             	sub    $0x4,%esp
f011b092:	68 74 ac 13 f0       	push   $0xf013ac74
f011b097:	68 5a 02 00 00       	push   $0x25a
f011b09c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b0a1:	e8 55 51 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b0a6:	e8 14 18 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b0ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0ae:	29 c2                	sub    %eax,%edx
f011b0b0:	89 d0                	mov    %edx,%eax
f011b0b2:	83 f8 01             	cmp    $0x1,%eax
f011b0b5:	74 17                	je     f011b0ce <test_kmalloc_bestfit2+0x448>
f011b0b7:	83 ec 04             	sub    $0x4,%esp
f011b0ba:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b0bf:	68 5b 02 00 00       	push   $0x25b
f011b0c4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b0c9:	e8 2d 51 fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b0ce:	e8 ec 17 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b0d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b0d6:	e8 61 8c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b0db:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b0de:	83 ec 0c             	sub    $0xc,%esp
f011b0e1:	68 00 08 00 00       	push   $0x800
f011b0e6:	e8 13 c7 fe ff       	call   f01077fe <kmalloc>
f011b0eb:	83 c4 10             	add    $0x10,%esp
f011b0ee:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011b0f4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011b0fa:	89 c1                	mov    %eax,%ecx
f011b0fc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b103:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b106:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b10b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b10e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b111:	ba 00 00 00 00       	mov    $0x0,%edx
f011b116:	f7 75 8c             	divl   -0x74(%ebp)
f011b119:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b11c:	29 d0                	sub    %edx,%eax
f011b11e:	89 c3                	mov    %eax,%ebx
f011b120:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b127:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b12c:	0f b6 d0             	movzbl %al,%edx
f011b12f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b132:	01 d0                	add    %edx,%eax
f011b134:	48                   	dec    %eax
f011b135:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b138:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b13b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b140:	f7 75 84             	divl   -0x7c(%ebp)
f011b143:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b146:	29 d0                	sub    %edx,%eax
f011b148:	01 c3                	add    %eax,%ebx
f011b14a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b151:	10 00 00 
f011b154:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b159:	0f b6 c0             	movzbl %al,%eax
f011b15c:	c1 e0 04             	shl    $0x4,%eax
f011b15f:	89 c2                	mov    %eax,%edx
f011b161:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b167:	01 d0                	add    %edx,%eax
f011b169:	48                   	dec    %eax
f011b16a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b170:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b176:	ba 00 00 00 00       	mov    $0x0,%edx
f011b17b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b181:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b187:	29 d0                	sub    %edx,%eax
f011b189:	01 d8                	add    %ebx,%eax
f011b18b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011b190:	39 c1                	cmp    %eax,%ecx
f011b192:	74 17                	je     f011b1ab <test_kmalloc_bestfit2+0x525>
f011b194:	83 ec 04             	sub    $0x4,%esp
f011b197:	68 74 b0 13 f0       	push   $0xf013b074
f011b19c:	68 61 02 00 00       	push   $0x261
f011b1a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1a6:	e8 50 50 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1ab:	e8 8c 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b1b0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b1b3:	74 17                	je     f011b1cc <test_kmalloc_bestfit2+0x546>
f011b1b5:	83 ec 04             	sub    $0x4,%esp
f011b1b8:	68 74 ac 13 f0       	push   $0xf013ac74
f011b1bd:	68 62 02 00 00       	push   $0x262
f011b1c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1c7:	e8 2f 50 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011b1cc:	e8 ee 16 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b1d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b1d4:	29 c2                	sub    %eax,%edx
f011b1d6:	89 d0                	mov    %edx,%eax
f011b1d8:	83 f8 01             	cmp    $0x1,%eax
f011b1db:	74 17                	je     f011b1f4 <test_kmalloc_bestfit2+0x56e>
f011b1dd:	83 ec 04             	sub    $0x4,%esp
f011b1e0:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b1e5:	68 63 02 00 00       	push   $0x263
f011b1ea:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b1ef:	e8 07 50 fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1f4:	e8 c6 16 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b1f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b1fc:	e8 3b 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b201:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011b204:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011b20a:	83 ec 0c             	sub    $0xc,%esp
f011b20d:	50                   	push   %eax
f011b20e:	e8 ad c6 fe ff       	call   f01078c0 <kfree>
f011b213:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b216:	e8 21 8b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b21b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b21e:	74 17                	je     f011b237 <test_kmalloc_bestfit2+0x5b1>
f011b220:	83 ec 04             	sub    $0x4,%esp
f011b223:	68 74 ac 13 f0       	push   $0xf013ac74
f011b228:	68 69 02 00 00       	push   $0x269
f011b22d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b232:	e8 c4 4f fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011b237:	e8 83 16 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b23c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b23f:	83 f8 01             	cmp    $0x1,%eax
f011b242:	74 17                	je     f011b25b <test_kmalloc_bestfit2+0x5d5>
f011b244:	83 ec 04             	sub    $0x4,%esp
f011b247:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b24c:	68 6a 02 00 00       	push   $0x26a
f011b251:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b256:	e8 a0 4f fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011b25b:	e8 5f 16 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b260:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b263:	e8 d4 8a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b268:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011b26b:	83 ec 0c             	sub    $0xc,%esp
f011b26e:	68 00 1c 00 00       	push   $0x1c00
f011b273:	e8 86 c5 fe ff       	call   f01077fe <kmalloc>
f011b278:	83 c4 10             	add    $0x10,%esp
f011b27b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011b281:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011b287:	89 c1                	mov    %eax,%ecx
f011b289:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b290:	10 00 00 
f011b293:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b299:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b29e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b2a4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b2aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2af:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b2b5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b2bb:	29 d0                	sub    %edx,%eax
f011b2bd:	89 c3                	mov    %eax,%ebx
f011b2bf:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b2c6:	10 00 00 
f011b2c9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b2ce:	0f b6 d0             	movzbl %al,%edx
f011b2d1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b2d7:	01 d0                	add    %edx,%eax
f011b2d9:	48                   	dec    %eax
f011b2da:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b2e0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b2e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2eb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b2f1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b2f7:	29 d0                	sub    %edx,%eax
f011b2f9:	01 c3                	add    %eax,%ebx
f011b2fb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b302:	10 00 00 
f011b305:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b30a:	0f b6 c0             	movzbl %al,%eax
f011b30d:	c1 e0 04             	shl    $0x4,%eax
f011b310:	89 c2                	mov    %eax,%edx
f011b312:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b318:	01 d0                	add    %edx,%eax
f011b31a:	48                   	dec    %eax
f011b31b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b321:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b327:	ba 00 00 00 00       	mov    $0x0,%edx
f011b32c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b332:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b338:	29 d0                	sub    %edx,%eax
f011b33a:	01 d8                	add    %ebx,%eax
f011b33c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011b341:	39 c1                	cmp    %eax,%ecx
f011b343:	74 17                	je     f011b35c <test_kmalloc_bestfit2+0x6d6>
f011b345:	83 ec 04             	sub    $0x4,%esp
f011b348:	68 74 b0 13 f0       	push   $0xf013b074
f011b34d:	68 70 02 00 00       	push   $0x270
f011b352:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b357:	e8 9f 4e fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b35c:	e8 db 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b361:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b364:	74 17                	je     f011b37d <test_kmalloc_bestfit2+0x6f7>
f011b366:	83 ec 04             	sub    $0x4,%esp
f011b369:	68 74 ac 13 f0       	push   $0xf013ac74
f011b36e:	68 71 02 00 00       	push   $0x271
f011b373:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b378:	e8 7e 4e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011b37d:	e8 3d 15 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b382:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b385:	29 c2                	sub    %eax,%edx
f011b387:	89 d0                	mov    %edx,%eax
f011b389:	83 f8 02             	cmp    $0x2,%eax
f011b38c:	74 17                	je     f011b3a5 <test_kmalloc_bestfit2+0x71f>
f011b38e:	83 ec 04             	sub    $0x4,%esp
f011b391:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b396:	68 72 02 00 00       	push   $0x272
f011b39b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b3a0:	e8 56 4e fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b3a5:	e8 15 15 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b3aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b3ad:	e8 8a 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011b3b5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011b3bb:	83 ec 0c             	sub    $0xc,%esp
f011b3be:	50                   	push   %eax
f011b3bf:	e8 fc c4 fe ff       	call   f01078c0 <kfree>
f011b3c4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b3c7:	e8 70 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b3cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b3cf:	74 17                	je     f011b3e8 <test_kmalloc_bestfit2+0x762>
f011b3d1:	83 ec 04             	sub    $0x4,%esp
f011b3d4:	68 74 ac 13 f0       	push   $0xf013ac74
f011b3d9:	68 78 02 00 00       	push   $0x278
f011b3de:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b3e3:	e8 13 4e fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011b3e8:	e8 d2 14 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b3ed:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b3f0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b3f5:	74 17                	je     f011b40e <test_kmalloc_bestfit2+0x788>
f011b3f7:	83 ec 04             	sub    $0x4,%esp
f011b3fa:	68 28 af 13 f0       	push   $0xf013af28
f011b3ff:	68 79 02 00 00       	push   $0x279
f011b404:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b409:	e8 ed 4d fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b40e:	e8 ac 14 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b413:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b416:	e8 21 89 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b41b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011b41e:	83 ec 0c             	sub    $0xc,%esp
f011b421:	68 00 fc 2f 00       	push   $0x2ffc00
f011b426:	e8 d3 c3 fe ff       	call   f01077fe <kmalloc>
f011b42b:	83 c4 10             	add    $0x10,%esp
f011b42e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b434:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b43a:	89 c1                	mov    %eax,%ecx
f011b43c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b443:	10 00 00 
f011b446:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b44c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b451:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b457:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b45d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b462:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b468:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b46e:	29 d0                	sub    %edx,%eax
f011b470:	89 c3                	mov    %eax,%ebx
f011b472:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b479:	10 00 00 
f011b47c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b481:	0f b6 d0             	movzbl %al,%edx
f011b484:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b48a:	01 d0                	add    %edx,%eax
f011b48c:	48                   	dec    %eax
f011b48d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b493:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b499:	ba 00 00 00 00       	mov    $0x0,%edx
f011b49e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b4a4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b4aa:	29 d0                	sub    %edx,%eax
f011b4ac:	01 c3                	add    %eax,%ebx
f011b4ae:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b4b5:	10 00 00 
f011b4b8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b4bd:	0f b6 c0             	movzbl %al,%eax
f011b4c0:	c1 e0 04             	shl    $0x4,%eax
f011b4c3:	89 c2                	mov    %eax,%edx
f011b4c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b4cb:	01 d0                	add    %edx,%eax
f011b4cd:	48                   	dec    %eax
f011b4ce:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b4d4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4da:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4df:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b4e5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b4eb:	29 d0                	sub    %edx,%eax
f011b4ed:	01 d8                	add    %ebx,%eax
f011b4ef:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b4f4:	39 c1                	cmp    %eax,%ecx
f011b4f6:	74 17                	je     f011b50f <test_kmalloc_bestfit2+0x889>
f011b4f8:	83 ec 04             	sub    $0x4,%esp
f011b4fb:	68 74 b0 13 f0       	push   $0xf013b074
f011b500:	68 7f 02 00 00       	push   $0x27f
f011b505:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b50a:	e8 ec 4c fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b50f:	e8 28 88 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b514:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b517:	74 17                	je     f011b530 <test_kmalloc_bestfit2+0x8aa>
f011b519:	83 ec 04             	sub    $0x4,%esp
f011b51c:	68 74 ac 13 f0       	push   $0xf013ac74
f011b521:	68 80 02 00 00       	push   $0x280
f011b526:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b52b:	e8 cb 4c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011b530:	e8 8a 13 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b535:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b538:	29 c2                	sub    %eax,%edx
f011b53a:	89 d0                	mov    %edx,%eax
f011b53c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b541:	74 17                	je     f011b55a <test_kmalloc_bestfit2+0x8d4>
f011b543:	83 ec 04             	sub    $0x4,%esp
f011b546:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b54b:	68 81 02 00 00       	push   $0x281
f011b550:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b555:	e8 a1 4c fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b55a:	e8 60 13 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b55f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b562:	e8 d5 87 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b567:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011b56a:	83 ec 0c             	sub    $0xc,%esp
f011b56d:	68 00 18 20 00       	push   $0x201800
f011b572:	e8 87 c2 fe ff       	call   f01077fe <kmalloc>
f011b577:	83 c4 10             	add    $0x10,%esp
f011b57a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b580:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b586:	89 c1                	mov    %eax,%ecx
f011b588:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b58f:	10 00 00 
f011b592:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b598:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b59d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b5a3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b5a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5ae:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b5b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b5ba:	29 d0                	sub    %edx,%eax
f011b5bc:	89 c3                	mov    %eax,%ebx
f011b5be:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b5c5:	10 00 00 
f011b5c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b5cd:	0f b6 d0             	movzbl %al,%edx
f011b5d0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b5d6:	01 d0                	add    %edx,%eax
f011b5d8:	48                   	dec    %eax
f011b5d9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b5df:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b5e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5ea:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b5f0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b5f6:	29 d0                	sub    %edx,%eax
f011b5f8:	01 c3                	add    %eax,%ebx
f011b5fa:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b601:	10 00 00 
f011b604:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b609:	0f b6 c0             	movzbl %al,%eax
f011b60c:	c1 e0 04             	shl    $0x4,%eax
f011b60f:	89 c2                	mov    %eax,%edx
f011b611:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b617:	01 d0                	add    %edx,%eax
f011b619:	48                   	dec    %eax
f011b61a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b620:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b626:	ba 00 00 00 00       	mov    $0x0,%edx
f011b62b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b631:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b637:	29 d0                	sub    %edx,%eax
f011b639:	01 d8                	add    %ebx,%eax
f011b63b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b640:	39 c1                	cmp    %eax,%ecx
f011b642:	74 17                	je     f011b65b <test_kmalloc_bestfit2+0x9d5>
f011b644:	83 ec 04             	sub    $0x4,%esp
f011b647:	68 74 b0 13 f0       	push   $0xf013b074
f011b64c:	68 87 02 00 00       	push   $0x287
f011b651:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b656:	e8 a0 4b fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b65b:	e8 dc 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b660:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b663:	74 17                	je     f011b67c <test_kmalloc_bestfit2+0x9f6>
f011b665:	83 ec 04             	sub    $0x4,%esp
f011b668:	68 74 ac 13 f0       	push   $0xf013ac74
f011b66d:	68 88 02 00 00       	push   $0x288
f011b672:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b677:	e8 7f 4b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b67c:	e8 3e 12 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b681:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b684:	29 c2                	sub    %eax,%edx
f011b686:	89 d0                	mov    %edx,%eax
f011b688:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b68d:	74 17                	je     f011b6a6 <test_kmalloc_bestfit2+0xa20>
f011b68f:	83 ec 04             	sub    $0x4,%esp
f011b692:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b697:	68 89 02 00 00       	push   $0x289
f011b69c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b6a1:	e8 55 4b fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b6a6:	e8 14 12 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b6ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b6ae:	e8 89 86 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b6b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b6b6:	83 ec 0c             	sub    $0xc,%esp
f011b6b9:	68 00 fc 4f 00       	push   $0x4ffc00
f011b6be:	e8 3b c1 fe ff       	call   f01077fe <kmalloc>
f011b6c3:	83 c4 10             	add    $0x10,%esp
f011b6c6:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b6cc:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b6d2:	89 c1                	mov    %eax,%ecx
f011b6d4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b6db:	10 00 00 
f011b6de:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b6e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b6e9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b6ef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b6f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6fa:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b700:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b706:	29 d0                	sub    %edx,%eax
f011b708:	89 c3                	mov    %eax,%ebx
f011b70a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b711:	10 00 00 
f011b714:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b719:	0f b6 d0             	movzbl %al,%edx
f011b71c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b722:	01 d0                	add    %edx,%eax
f011b724:	48                   	dec    %eax
f011b725:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b72b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b731:	ba 00 00 00 00       	mov    $0x0,%edx
f011b736:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b73c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b742:	29 d0                	sub    %edx,%eax
f011b744:	01 c3                	add    %eax,%ebx
f011b746:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b74d:	10 00 00 
f011b750:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b755:	0f b6 c0             	movzbl %al,%eax
f011b758:	c1 e0 04             	shl    $0x4,%eax
f011b75b:	89 c2                	mov    %eax,%edx
f011b75d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b763:	01 d0                	add    %edx,%eax
f011b765:	48                   	dec    %eax
f011b766:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b76c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b772:	ba 00 00 00 00       	mov    $0x0,%edx
f011b777:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b77d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b783:	29 d0                	sub    %edx,%eax
f011b785:	01 d8                	add    %ebx,%eax
f011b787:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b78c:	39 c1                	cmp    %eax,%ecx
f011b78e:	74 17                	je     f011b7a7 <test_kmalloc_bestfit2+0xb21>
f011b790:	83 ec 04             	sub    $0x4,%esp
f011b793:	68 74 b0 13 f0       	push   $0xf013b074
f011b798:	68 8f 02 00 00       	push   $0x28f
f011b79d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7a2:	e8 54 4a fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b7a7:	e8 90 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b7ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b7af:	74 17                	je     f011b7c8 <test_kmalloc_bestfit2+0xb42>
f011b7b1:	83 ec 04             	sub    $0x4,%esp
f011b7b4:	68 74 ac 13 f0       	push   $0xf013ac74
f011b7b9:	68 90 02 00 00       	push   $0x290
f011b7be:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7c3:	e8 33 4a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b7c8:	e8 f2 10 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b7cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b7d0:	29 c2                	sub    %eax,%edx
f011b7d2:	89 d0                	mov    %edx,%eax
f011b7d4:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b7d9:	74 17                	je     f011b7f2 <test_kmalloc_bestfit2+0xb6c>
f011b7db:	83 ec 04             	sub    $0x4,%esp
f011b7de:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011b7e3:	68 91 02 00 00       	push   $0x291
f011b7e8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b7ed:	e8 09 4a fe ff       	call   f01001fb <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b7f2:	e8 c8 10 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b7f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b7fa:	e8 3d 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b7ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b802:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b808:	83 ec 0c             	sub    $0xc,%esp
f011b80b:	50                   	push   %eax
f011b80c:	e8 af c0 fe ff       	call   f01078c0 <kfree>
f011b811:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b814:	e8 23 85 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b819:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b81c:	74 17                	je     f011b835 <test_kmalloc_bestfit2+0xbaf>
f011b81e:	83 ec 04             	sub    $0x4,%esp
f011b821:	68 74 ac 13 f0       	push   $0xf013ac74
f011b826:	68 97 02 00 00       	push   $0x297
f011b82b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b830:	e8 c6 49 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b835:	e8 85 10 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b83a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b83d:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b842:	74 17                	je     f011b85b <test_kmalloc_bestfit2+0xbd5>
f011b844:	83 ec 04             	sub    $0x4,%esp
f011b847:	68 28 af 13 f0       	push   $0xf013af28
f011b84c:	68 98 02 00 00       	push   $0x298
f011b851:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b856:	e8 a0 49 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b85b:	e8 5f 10 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b860:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b863:	e8 d4 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b868:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b86b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b871:	83 ec 0c             	sub    $0xc,%esp
f011b874:	50                   	push   %eax
f011b875:	e8 46 c0 fe ff       	call   f01078c0 <kfree>
f011b87a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b87d:	e8 ba 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b882:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b885:	74 17                	je     f011b89e <test_kmalloc_bestfit2+0xc18>
f011b887:	83 ec 04             	sub    $0x4,%esp
f011b88a:	68 74 ac 13 f0       	push   $0xf013ac74
f011b88f:	68 9e 02 00 00       	push   $0x29e
f011b894:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b899:	e8 5d 49 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b89e:	e8 1c 10 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b8a3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b8a6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b8ab:	74 17                	je     f011b8c4 <test_kmalloc_bestfit2+0xc3e>
f011b8ad:	83 ec 04             	sub    $0x4,%esp
f011b8b0:	68 54 b1 13 f0       	push   $0xf013b154
f011b8b5:	68 9f 02 00 00       	push   $0x29f
f011b8ba:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b8bf:	e8 37 49 fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8c4:	e8 f6 0f ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b8c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8cc:	e8 6b 84 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b8d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b8d4:	83 ec 0c             	sub    $0xc,%esp
f011b8d7:	68 00 fc 1f 00       	push   $0x1ffc00
f011b8dc:	e8 1d bf fe ff       	call   f01077fe <kmalloc>
f011b8e1:	83 c4 10             	add    $0x10,%esp
f011b8e4:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b8ea:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b8f0:	89 c1                	mov    %eax,%ecx
f011b8f2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b8f9:	10 00 00 
f011b8fc:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b902:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b907:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b90d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b913:	ba 00 00 00 00       	mov    $0x0,%edx
f011b918:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b91e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b924:	29 d0                	sub    %edx,%eax
f011b926:	89 c3                	mov    %eax,%ebx
f011b928:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b92f:	10 00 00 
f011b932:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b937:	0f b6 d0             	movzbl %al,%edx
f011b93a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b940:	01 d0                	add    %edx,%eax
f011b942:	48                   	dec    %eax
f011b943:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b949:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b94f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b954:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b95a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b960:	29 d0                	sub    %edx,%eax
f011b962:	01 c3                	add    %eax,%ebx
f011b964:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b96b:	10 00 00 
f011b96e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011b973:	0f b6 c0             	movzbl %al,%eax
f011b976:	c1 e0 04             	shl    $0x4,%eax
f011b979:	89 c2                	mov    %eax,%edx
f011b97b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b981:	01 d0                	add    %edx,%eax
f011b983:	48                   	dec    %eax
f011b984:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b98a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b990:	ba 00 00 00 00       	mov    $0x0,%edx
f011b995:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b99b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b9a1:	29 d0                	sub    %edx,%eax
f011b9a3:	01 d8                	add    %ebx,%eax
f011b9a5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b9aa:	39 c1                	cmp    %eax,%ecx
f011b9ac:	74 17                	je     f011b9c5 <test_kmalloc_bestfit2+0xd3f>
f011b9ae:	83 ec 04             	sub    $0x4,%esp
f011b9b1:	68 74 b0 13 f0       	push   $0xf013b074
f011b9b6:	68 a5 02 00 00       	push   $0x2a5
f011b9bb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b9c0:	e8 36 48 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b9c5:	e8 72 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011b9ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b9cd:	74 17                	je     f011b9e6 <test_kmalloc_bestfit2+0xd60>
f011b9cf:	83 ec 04             	sub    $0x4,%esp
f011b9d2:	68 74 ac 13 f0       	push   $0xf013ac74
f011b9d7:	68 a6 02 00 00       	push   $0x2a6
f011b9dc:	68 5a ac 13 f0       	push   $0xf013ac5a
f011b9e1:	e8 15 48 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b9e6:	e8 d4 0e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011b9eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b9ee:	29 c2                	sub    %eax,%edx
f011b9f0:	89 d0                	mov    %edx,%eax
f011b9f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b9f7:	74 17                	je     f011ba10 <test_kmalloc_bestfit2+0xd8a>
f011b9f9:	83 ec 04             	sub    $0x4,%esp
f011b9fc:	68 92 b1 13 f0       	push   $0xf013b192
f011ba01:	68 a7 02 00 00       	push   $0x2a7
f011ba06:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ba0b:	e8 eb 47 fe ff       	call   f01001fb <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba10:	e8 aa 0e ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011ba15:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba18:	e8 1f 83 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ba1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011ba20:	83 ec 0c             	sub    $0xc,%esp
f011ba23:	68 00 18 00 00       	push   $0x1800
f011ba28:	e8 d1 bd fe ff       	call   f01077fe <kmalloc>
f011ba2d:	83 c4 10             	add    $0x10,%esp
f011ba30:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ba36:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ba3c:	89 c1                	mov    %eax,%ecx
f011ba3e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ba45:	10 00 00 
f011ba48:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ba4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba53:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ba59:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ba5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba64:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ba6a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ba70:	29 d0                	sub    %edx,%eax
f011ba72:	89 c3                	mov    %eax,%ebx
f011ba74:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ba7b:	10 00 00 
f011ba7e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ba83:	0f b6 d0             	movzbl %al,%edx
f011ba86:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ba8c:	01 d0                	add    %edx,%eax
f011ba8e:	48                   	dec    %eax
f011ba8f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ba95:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ba9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011baa0:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011baa6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011baac:	29 d0                	sub    %edx,%eax
f011baae:	01 c3                	add    %eax,%ebx
f011bab0:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011bab7:	10 00 00 
f011baba:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011babf:	0f b6 c0             	movzbl %al,%eax
f011bac2:	c1 e0 04             	shl    $0x4,%eax
f011bac5:	89 c2                	mov    %eax,%edx
f011bac7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011bacd:	01 d0                	add    %edx,%eax
f011bacf:	48                   	dec    %eax
f011bad0:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011bad6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011badc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bae1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011bae7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011baed:	29 d0                	sub    %edx,%eax
f011baef:	01 d8                	add    %ebx,%eax
f011baf1:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011baf6:	39 c1                	cmp    %eax,%ecx
f011baf8:	74 17                	je     f011bb11 <test_kmalloc_bestfit2+0xe8b>
f011bafa:	83 ec 04             	sub    $0x4,%esp
f011bafd:	68 74 b0 13 f0       	push   $0xf013b074
f011bb02:	68 ad 02 00 00       	push   $0x2ad
f011bb07:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb0c:	e8 ea 46 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb11:	e8 26 82 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb19:	74 17                	je     f011bb32 <test_kmalloc_bestfit2+0xeac>
f011bb1b:	83 ec 04             	sub    $0x4,%esp
f011bb1e:	68 74 ac 13 f0       	push   $0xf013ac74
f011bb23:	68 ae 02 00 00       	push   $0x2ae
f011bb28:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb2d:	e8 c9 46 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011bb32:	e8 88 0d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bb37:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bb3a:	29 c2                	sub    %eax,%edx
f011bb3c:	89 d0                	mov    %edx,%eax
f011bb3e:	83 f8 02             	cmp    $0x2,%eax
f011bb41:	74 17                	je     f011bb5a <test_kmalloc_bestfit2+0xed4>
f011bb43:	83 ec 04             	sub    $0x4,%esp
f011bb46:	68 92 b1 13 f0       	push   $0xf013b192
f011bb4b:	68 af 02 00 00       	push   $0x2af
f011bb50:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb55:	e8 a1 46 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb5a:	e8 60 0d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bb5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb62:	e8 d5 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb67:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011bb6a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bb70:	83 ec 0c             	sub    $0xc,%esp
f011bb73:	50                   	push   %eax
f011bb74:	e8 47 bd fe ff       	call   f01078c0 <kfree>
f011bb79:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb7c:	e8 bb 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bb81:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bb84:	74 17                	je     f011bb9d <test_kmalloc_bestfit2+0xf17>
f011bb86:	83 ec 04             	sub    $0x4,%esp
f011bb89:	68 74 ac 13 f0       	push   $0xf013ac74
f011bb8e:	68 b5 02 00 00       	push   $0x2b5
f011bb93:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bb98:	e8 5e 46 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bb9d:	e8 1d 0d ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bba2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011bba5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bbaa:	74 17                	je     f011bbc3 <test_kmalloc_bestfit2+0xf3d>
f011bbac:	83 ec 04             	sub    $0x4,%esp
f011bbaf:	68 54 b1 13 f0       	push   $0xf013b154
f011bbb4:	68 b6 02 00 00       	push   $0x2b6
f011bbb9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bbbe:	e8 38 46 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bbc3:	e8 f7 0c ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bbc8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbcb:	e8 6c 81 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bbd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011bbd3:	83 ec 0c             	sub    $0xc,%esp
f011bbd6:	68 00 fc 2f 00       	push   $0x2ffc00
f011bbdb:	e8 1e bc fe ff       	call   f01077fe <kmalloc>
f011bbe0:	83 c4 10             	add    $0x10,%esp
f011bbe3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bbe9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011bbef:	89 c1                	mov    %eax,%ecx
f011bbf1:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011bbf8:	10 00 00 
f011bbfb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011bc01:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc06:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011bc0c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bc12:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc17:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011bc1d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bc23:	29 d0                	sub    %edx,%eax
f011bc25:	89 c3                	mov    %eax,%ebx
f011bc27:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011bc2e:	10 00 00 
f011bc31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc36:	0f b6 d0             	movzbl %al,%edx
f011bc39:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bc3f:	01 d0                	add    %edx,%eax
f011bc41:	48                   	dec    %eax
f011bc42:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011bc48:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bc4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc53:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011bc59:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011bc5f:	29 d0                	sub    %edx,%eax
f011bc61:	01 c3                	add    %eax,%ebx
f011bc63:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011bc6a:	10 00 00 
f011bc6d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bc72:	0f b6 c0             	movzbl %al,%eax
f011bc75:	c1 e0 04             	shl    $0x4,%eax
f011bc78:	89 c2                	mov    %eax,%edx
f011bc7a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bc80:	01 d0                	add    %edx,%eax
f011bc82:	48                   	dec    %eax
f011bc83:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011bc89:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bc8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc94:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011bc9a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bca0:	29 d0                	sub    %edx,%eax
f011bca2:	01 d8                	add    %ebx,%eax
f011bca4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bca9:	39 c1                	cmp    %eax,%ecx
f011bcab:	74 17                	je     f011bcc4 <test_kmalloc_bestfit2+0x103e>
f011bcad:	83 ec 04             	sub    $0x4,%esp
f011bcb0:	68 74 b0 13 f0       	push   $0xf013b074
f011bcb5:	68 bc 02 00 00       	push   $0x2bc
f011bcba:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bcbf:	e8 37 45 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcc4:	e8 73 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bcc9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bccc:	74 17                	je     f011bce5 <test_kmalloc_bestfit2+0x105f>
f011bcce:	83 ec 04             	sub    $0x4,%esp
f011bcd1:	68 74 ac 13 f0       	push   $0xf013ac74
f011bcd6:	68 bd 02 00 00       	push   $0x2bd
f011bcdb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bce0:	e8 16 45 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011bce5:	e8 d5 0b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bcea:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bced:	29 c2                	sub    %eax,%edx
f011bcef:	89 d0                	mov    %edx,%eax
f011bcf1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011bcf6:	74 17                	je     f011bd0f <test_kmalloc_bestfit2+0x1089>
f011bcf8:	83 ec 04             	sub    $0x4,%esp
f011bcfb:	68 54 b1 13 f0       	push   $0xf013b154
f011bd00:	68 be 02 00 00       	push   $0x2be
f011bd05:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bd0a:	e8 ec 44 fe ff       	call   f01001fb <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd0f:	e8 ab 0b ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bd14:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd17:	e8 20 80 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bd1c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011bd1f:	83 ec 0c             	sub    $0xc,%esp
f011bd22:	68 00 fc 3f 00       	push   $0x3ffc00
f011bd27:	e8 d2 ba fe ff       	call   f01077fe <kmalloc>
f011bd2c:	83 c4 10             	add    $0x10,%esp
f011bd2f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bd35:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bd3b:	89 c1                	mov    %eax,%ecx
f011bd3d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011bd44:	10 00 00 
f011bd47:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011bd4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd52:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011bd58:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bd5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd63:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011bd69:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bd6f:	29 d0                	sub    %edx,%eax
f011bd71:	89 c3                	mov    %eax,%ebx
f011bd73:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011bd7a:	10 00 00 
f011bd7d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bd82:	0f b6 d0             	movzbl %al,%edx
f011bd85:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bd8b:	01 d0                	add    %edx,%eax
f011bd8d:	48                   	dec    %eax
f011bd8e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011bd94:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bd9a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd9f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011bda5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bdab:	29 d0                	sub    %edx,%eax
f011bdad:	01 c3                	add    %eax,%ebx
f011bdaf:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011bdb6:	10 00 00 
f011bdb9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bdbe:	0f b6 c0             	movzbl %al,%eax
f011bdc1:	c1 e0 04             	shl    $0x4,%eax
f011bdc4:	89 c2                	mov    %eax,%edx
f011bdc6:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011bdcc:	01 d0                	add    %edx,%eax
f011bdce:	48                   	dec    %eax
f011bdcf:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011bdd5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bddb:	ba 00 00 00 00       	mov    $0x0,%edx
f011bde0:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011bde6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011bdec:	29 d0                	sub    %edx,%eax
f011bdee:	01 d8                	add    %ebx,%eax
f011bdf0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bdf5:	39 c1                	cmp    %eax,%ecx
f011bdf7:	74 17                	je     f011be10 <test_kmalloc_bestfit2+0x118a>
f011bdf9:	83 ec 04             	sub    $0x4,%esp
f011bdfc:	68 74 b0 13 f0       	push   $0xf013b074
f011be01:	68 c4 02 00 00       	push   $0x2c4
f011be06:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be0b:	e8 eb 43 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be10:	e8 27 7f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011be15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011be18:	74 17                	je     f011be31 <test_kmalloc_bestfit2+0x11ab>
f011be1a:	83 ec 04             	sub    $0x4,%esp
f011be1d:	68 74 ac 13 f0       	push   $0xf013ac74
f011be22:	68 c5 02 00 00       	push   $0x2c5
f011be27:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be2c:	e8 ca 43 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011be31:	e8 89 0a ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011be36:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be39:	29 c2                	sub    %eax,%edx
f011be3b:	89 d0                	mov    %edx,%eax
f011be3d:	3d 00 04 00 00       	cmp    $0x400,%eax
f011be42:	74 17                	je     f011be5b <test_kmalloc_bestfit2+0x11d5>
f011be44:	83 ec 04             	sub    $0x4,%esp
f011be47:	68 54 b1 13 f0       	push   $0xf013b154
f011be4c:	68 c6 02 00 00       	push   $0x2c6
f011be51:	68 5a ac 13 f0       	push   $0xf013ac5a
f011be56:	e8 a0 43 fe ff       	call   f01001fb <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011be5b:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011be62:	10 00 00 
f011be65:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011be6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be70:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011be76:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011be7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011be81:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011be87:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011be8d:	29 d0                	sub    %edx,%eax
f011be8f:	89 c1                	mov    %eax,%ecx
f011be91:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011be98:	10 00 00 
f011be9b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bea0:	0f b6 d0             	movzbl %al,%edx
f011bea3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011bea9:	01 d0                	add    %edx,%eax
f011beab:	48                   	dec    %eax
f011beac:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011beb2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011beb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bebd:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011bec3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011bec9:	29 d0                	sub    %edx,%eax
f011becb:	01 c1                	add    %eax,%ecx
f011becd:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011bed4:	10 00 00 
f011bed7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011bedc:	0f b6 c0             	movzbl %al,%eax
f011bedf:	c1 e0 04             	shl    $0x4,%eax
f011bee2:	89 c2                	mov    %eax,%edx
f011bee4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011beea:	01 d0                	add    %edx,%eax
f011beec:	48                   	dec    %eax
f011beed:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011bef3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bef9:	ba 00 00 00 00       	mov    $0x0,%edx
f011befe:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011bf04:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011bf0a:	29 d0                	sub    %edx,%eax
f011bf0c:	01 c8                	add    %ecx,%eax
f011bf0e:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011bf13:	29 c2                	sub    %eax,%edx
f011bf15:	89 d0                	mov    %edx,%eax
f011bf17:	83 ec 0c             	sub    $0xc,%esp
f011bf1a:	50                   	push   %eax
f011bf1b:	e8 de b8 fe ff       	call   f01077fe <kmalloc>
f011bf20:	83 c4 10             	add    $0x10,%esp
f011bf23:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011bf29:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011bf2f:	85 c0                	test   %eax,%eax
f011bf31:	74 17                	je     f011bf4a <test_kmalloc_bestfit2+0x12c4>
f011bf33:	83 ec 04             	sub    $0x4,%esp
f011bf36:	68 a4 b1 13 f0       	push   $0xf013b1a4
f011bf3b:	68 ce 02 00 00       	push   $0x2ce
f011bf40:	68 5a ac 13 f0       	push   $0xf013ac5a
f011bf45:	e8 b1 42 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011bf4a:	83 ec 0c             	sub    $0xc,%esp
f011bf4d:	68 08 b2 13 f0       	push   $0xf013b208
f011bf52:	e8 2b 4d fe ff       	call   f0100c82 <cprintf>
f011bf57:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011bf5a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bf5f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bf62:	5b                   	pop    %ebx
f011bf63:	5f                   	pop    %edi
f011bf64:	5d                   	pop    %ebp
f011bf65:	c3                   	ret    

f011bf66 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011bf66:	55                   	push   %ebp
f011bf67:	89 e5                	mov    %esp,%ebp
f011bf69:	57                   	push   %edi
f011bf6a:	53                   	push   %ebx
f011bf6b:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011bf71:	83 ec 0c             	sub    $0xc,%esp
f011bf74:	68 9c ab 13 f0       	push   $0xf013ab9c
f011bf79:	e8 04 4d fe ff       	call   f0100c82 <cprintf>
f011bf7e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bf81:	83 ec 0c             	sub    $0xc,%esp
f011bf84:	68 cc ab 13 f0       	push   $0xf013abcc
f011bf89:	e8 f4 4c fe ff       	call   f0100c82 <cprintf>
f011bf8e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bf91:	83 ec 0c             	sub    $0xc,%esp
f011bf94:	68 9c ab 13 f0       	push   $0xf013ab9c
f011bf99:	e8 e4 4c fe ff       	call   f0100c82 <cprintf>
f011bf9e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bfa1:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bfa7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bfac:	b8 00 00 00 00       	mov    $0x0,%eax
f011bfb1:	89 d7                	mov    %edx,%edi
f011bfb3:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bfb5:	e8 05 09 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011bfba:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfbd:	e8 7a 7d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011bfc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011bfc5:	83 ec 0c             	sub    $0xc,%esp
f011bfc8:	68 00 fc 0f 00       	push   $0xffc00
f011bfcd:	e8 2c b8 fe ff       	call   f01077fe <kmalloc>
f011bfd2:	83 c4 10             	add    $0x10,%esp
f011bfd5:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bfdb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bfe1:	89 c1                	mov    %eax,%ecx
f011bfe3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bfea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bfed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bff2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bff8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bffd:	f7 75 ec             	divl   -0x14(%ebp)
f011c000:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c003:	29 d0                	sub    %edx,%eax
f011c005:	89 c3                	mov    %eax,%ebx
f011c007:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c00e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c013:	0f b6 d0             	movzbl %al,%edx
f011c016:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c019:	01 d0                	add    %edx,%eax
f011c01b:	48                   	dec    %eax
f011c01c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c01f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c022:	ba 00 00 00 00       	mov    $0x0,%edx
f011c027:	f7 75 e4             	divl   -0x1c(%ebp)
f011c02a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c02d:	29 d0                	sub    %edx,%eax
f011c02f:	01 c3                	add    %eax,%ebx
f011c031:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c038:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c03d:	0f b6 c0             	movzbl %al,%eax
f011c040:	c1 e0 04             	shl    $0x4,%eax
f011c043:	89 c2                	mov    %eax,%edx
f011c045:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c048:	01 d0                	add    %edx,%eax
f011c04a:	48                   	dec    %eax
f011c04b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c04e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c051:	ba 00 00 00 00       	mov    $0x0,%edx
f011c056:	f7 75 dc             	divl   -0x24(%ebp)
f011c059:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c05c:	29 d0                	sub    %edx,%eax
f011c05e:	01 d8                	add    %ebx,%eax
f011c060:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c065:	39 c1                	cmp    %eax,%ecx
f011c067:	74 17                	je     f011c080 <test_kmalloc_firstfit1+0x11a>
f011c069:	83 ec 04             	sub    $0x4,%esp
f011c06c:	68 74 b0 13 f0       	push   $0xf013b074
f011c071:	68 e6 02 00 00       	push   $0x2e6
f011c076:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c07b:	e8 7b 41 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c080:	e8 b7 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c085:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c088:	74 17                	je     f011c0a1 <test_kmalloc_firstfit1+0x13b>
f011c08a:	83 ec 04             	sub    $0x4,%esp
f011c08d:	68 74 ac 13 f0       	push   $0xf013ac74
f011c092:	68 e7 02 00 00       	push   $0x2e7
f011c097:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c09c:	e8 5a 41 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c0a1:	e8 19 08 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c0a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c0a9:	29 c2                	sub    %eax,%edx
f011c0ab:	89 d0                	mov    %edx,%eax
f011c0ad:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c0b2:	74 17                	je     f011c0cb <test_kmalloc_firstfit1+0x165>
f011c0b4:	83 ec 04             	sub    $0x4,%esp
f011c0b7:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c0bc:	68 e8 02 00 00       	push   $0x2e8
f011c0c1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c0c6:	e8 30 41 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0cb:	e8 ef 07 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c0d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0d3:	e8 64 7c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c0d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c0db:	83 ec 0c             	sub    $0xc,%esp
f011c0de:	68 00 fc 0f 00       	push   $0xffc00
f011c0e3:	e8 16 b7 fe ff       	call   f01077fe <kmalloc>
f011c0e8:	83 c4 10             	add    $0x10,%esp
f011c0eb:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c0f1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c0f7:	89 c1                	mov    %eax,%ecx
f011c0f9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c100:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c103:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c108:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c10b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c10e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c113:	f7 75 d4             	divl   -0x2c(%ebp)
f011c116:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c119:	29 d0                	sub    %edx,%eax
f011c11b:	89 c3                	mov    %eax,%ebx
f011c11d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c124:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c129:	0f b6 d0             	movzbl %al,%edx
f011c12c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c12f:	01 d0                	add    %edx,%eax
f011c131:	48                   	dec    %eax
f011c132:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c135:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c138:	ba 00 00 00 00       	mov    $0x0,%edx
f011c13d:	f7 75 cc             	divl   -0x34(%ebp)
f011c140:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c143:	29 d0                	sub    %edx,%eax
f011c145:	01 c3                	add    %eax,%ebx
f011c147:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c14e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c153:	0f b6 c0             	movzbl %al,%eax
f011c156:	c1 e0 04             	shl    $0x4,%eax
f011c159:	89 c2                	mov    %eax,%edx
f011c15b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c15e:	01 d0                	add    %edx,%eax
f011c160:	48                   	dec    %eax
f011c161:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c164:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c167:	ba 00 00 00 00       	mov    $0x0,%edx
f011c16c:	f7 75 c4             	divl   -0x3c(%ebp)
f011c16f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c172:	29 d0                	sub    %edx,%eax
f011c174:	01 d8                	add    %ebx,%eax
f011c176:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c17b:	39 c1                	cmp    %eax,%ecx
f011c17d:	74 17                	je     f011c196 <test_kmalloc_firstfit1+0x230>
f011c17f:	83 ec 04             	sub    $0x4,%esp
f011c182:	68 74 b0 13 f0       	push   $0xf013b074
f011c187:	68 ee 02 00 00       	push   $0x2ee
f011c18c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c191:	e8 65 40 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c196:	e8 a1 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c19b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c19e:	74 17                	je     f011c1b7 <test_kmalloc_firstfit1+0x251>
f011c1a0:	83 ec 04             	sub    $0x4,%esp
f011c1a3:	68 74 ac 13 f0       	push   $0xf013ac74
f011c1a8:	68 ef 02 00 00       	push   $0x2ef
f011c1ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c1b2:	e8 44 40 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c1b7:	e8 03 07 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c1bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c1bf:	29 c2                	sub    %eax,%edx
f011c1c1:	89 d0                	mov    %edx,%eax
f011c1c3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c1c8:	74 17                	je     f011c1e1 <test_kmalloc_firstfit1+0x27b>
f011c1ca:	83 ec 04             	sub    $0x4,%esp
f011c1cd:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c1d2:	68 f0 02 00 00       	push   $0x2f0
f011c1d7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c1dc:	e8 1a 40 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c1e1:	e8 d9 06 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c1e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c1e9:	e8 4e 7b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c1ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c1f1:	83 ec 0c             	sub    $0xc,%esp
f011c1f4:	68 00 fc 0f 00       	push   $0xffc00
f011c1f9:	e8 00 b6 fe ff       	call   f01077fe <kmalloc>
f011c1fe:	83 c4 10             	add    $0x10,%esp
f011c201:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c207:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c20d:	89 c1                	mov    %eax,%ecx
f011c20f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011c216:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c219:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c21e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c221:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c224:	ba 00 00 00 00       	mov    $0x0,%edx
f011c229:	f7 75 bc             	divl   -0x44(%ebp)
f011c22c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c22f:	29 d0                	sub    %edx,%eax
f011c231:	89 c3                	mov    %eax,%ebx
f011c233:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c23a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c23f:	0f b6 d0             	movzbl %al,%edx
f011c242:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c245:	01 d0                	add    %edx,%eax
f011c247:	48                   	dec    %eax
f011c248:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c24b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c24e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c253:	f7 75 b4             	divl   -0x4c(%ebp)
f011c256:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c259:	29 d0                	sub    %edx,%eax
f011c25b:	01 c3                	add    %eax,%ebx
f011c25d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c264:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c269:	0f b6 c0             	movzbl %al,%eax
f011c26c:	c1 e0 04             	shl    $0x4,%eax
f011c26f:	89 c2                	mov    %eax,%edx
f011c271:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c274:	01 d0                	add    %edx,%eax
f011c276:	48                   	dec    %eax
f011c277:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c27a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c27d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c282:	f7 75 ac             	divl   -0x54(%ebp)
f011c285:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c288:	29 d0                	sub    %edx,%eax
f011c28a:	01 d8                	add    %ebx,%eax
f011c28c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c291:	39 c1                	cmp    %eax,%ecx
f011c293:	74 17                	je     f011c2ac <test_kmalloc_firstfit1+0x346>
f011c295:	83 ec 04             	sub    $0x4,%esp
f011c298:	68 74 b0 13 f0       	push   $0xf013b074
f011c29d:	68 f6 02 00 00       	push   $0x2f6
f011c2a2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2a7:	e8 4f 3f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2ac:	e8 8b 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c2b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c2b4:	74 17                	je     f011c2cd <test_kmalloc_firstfit1+0x367>
f011c2b6:	83 ec 04             	sub    $0x4,%esp
f011c2b9:	68 74 ac 13 f0       	push   $0xf013ac74
f011c2be:	68 f7 02 00 00       	push   $0x2f7
f011c2c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2c8:	e8 2e 3f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c2cd:	e8 ed 05 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c2d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c2d5:	29 c2                	sub    %eax,%edx
f011c2d7:	89 d0                	mov    %edx,%eax
f011c2d9:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c2de:	74 17                	je     f011c2f7 <test_kmalloc_firstfit1+0x391>
f011c2e0:	83 ec 04             	sub    $0x4,%esp
f011c2e3:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c2e8:	68 f8 02 00 00       	push   $0x2f8
f011c2ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c2f2:	e8 04 3f fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c2f7:	e8 c3 05 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c2fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c2ff:	e8 38 7a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c304:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c307:	83 ec 0c             	sub    $0xc,%esp
f011c30a:	68 00 fc 0f 00       	push   $0xffc00
f011c30f:	e8 ea b4 fe ff       	call   f01077fe <kmalloc>
f011c314:	83 c4 10             	add    $0x10,%esp
f011c317:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c31d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011c323:	89 c1                	mov    %eax,%ecx
f011c325:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c32c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c32f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c334:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c337:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c33a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c33f:	f7 75 a4             	divl   -0x5c(%ebp)
f011c342:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c345:	29 d0                	sub    %edx,%eax
f011c347:	89 c3                	mov    %eax,%ebx
f011c349:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c350:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c355:	0f b6 d0             	movzbl %al,%edx
f011c358:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c35b:	01 d0                	add    %edx,%eax
f011c35d:	48                   	dec    %eax
f011c35e:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c361:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c364:	ba 00 00 00 00       	mov    $0x0,%edx
f011c369:	f7 75 9c             	divl   -0x64(%ebp)
f011c36c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c36f:	29 d0                	sub    %edx,%eax
f011c371:	01 c3                	add    %eax,%ebx
f011c373:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c37a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c37f:	0f b6 c0             	movzbl %al,%eax
f011c382:	c1 e0 04             	shl    $0x4,%eax
f011c385:	89 c2                	mov    %eax,%edx
f011c387:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c38a:	01 d0                	add    %edx,%eax
f011c38c:	48                   	dec    %eax
f011c38d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c390:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c393:	ba 00 00 00 00       	mov    $0x0,%edx
f011c398:	f7 75 94             	divl   -0x6c(%ebp)
f011c39b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c39e:	29 d0                	sub    %edx,%eax
f011c3a0:	01 d8                	add    %ebx,%eax
f011c3a2:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011c3a7:	39 c1                	cmp    %eax,%ecx
f011c3a9:	74 17                	je     f011c3c2 <test_kmalloc_firstfit1+0x45c>
f011c3ab:	83 ec 04             	sub    $0x4,%esp
f011c3ae:	68 74 b0 13 f0       	push   $0xf013b074
f011c3b3:	68 fe 02 00 00       	push   $0x2fe
f011c3b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c3bd:	e8 39 3e fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3c2:	e8 75 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c3c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3ca:	74 17                	je     f011c3e3 <test_kmalloc_firstfit1+0x47d>
f011c3cc:	83 ec 04             	sub    $0x4,%esp
f011c3cf:	68 74 ac 13 f0       	push   $0xf013ac74
f011c3d4:	68 ff 02 00 00       	push   $0x2ff
f011c3d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c3de:	e8 18 3e fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c3e3:	e8 d7 04 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c3e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c3eb:	29 c2                	sub    %eax,%edx
f011c3ed:	89 d0                	mov    %edx,%eax
f011c3ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c3f4:	74 17                	je     f011c40d <test_kmalloc_firstfit1+0x4a7>
f011c3f6:	83 ec 04             	sub    $0x4,%esp
f011c3f9:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c3fe:	68 00 03 00 00       	push   $0x300
f011c403:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c408:	e8 ee 3d fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c40d:	e8 ad 04 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c412:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c415:	e8 22 79 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c41a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011c41d:	83 ec 0c             	sub    $0xc,%esp
f011c420:	68 00 fc 1f 00       	push   $0x1ffc00
f011c425:	e8 d4 b3 fe ff       	call   f01077fe <kmalloc>
f011c42a:	83 c4 10             	add    $0x10,%esp
f011c42d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c433:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c439:	89 c1                	mov    %eax,%ecx
f011c43b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c442:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c445:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c44a:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c44d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c450:	ba 00 00 00 00       	mov    $0x0,%edx
f011c455:	f7 75 8c             	divl   -0x74(%ebp)
f011c458:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c45b:	29 d0                	sub    %edx,%eax
f011c45d:	89 c3                	mov    %eax,%ebx
f011c45f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c466:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c46b:	0f b6 d0             	movzbl %al,%edx
f011c46e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c471:	01 d0                	add    %edx,%eax
f011c473:	48                   	dec    %eax
f011c474:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c477:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c47a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c47f:	f7 75 84             	divl   -0x7c(%ebp)
f011c482:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c485:	29 d0                	sub    %edx,%eax
f011c487:	01 c3                	add    %eax,%ebx
f011c489:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c490:	10 00 00 
f011c493:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c498:	0f b6 c0             	movzbl %al,%eax
f011c49b:	c1 e0 04             	shl    $0x4,%eax
f011c49e:	89 c2                	mov    %eax,%edx
f011c4a0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c4a6:	01 d0                	add    %edx,%eax
f011c4a8:	48                   	dec    %eax
f011c4a9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c4af:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4ba:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c4c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4c6:	29 d0                	sub    %edx,%eax
f011c4c8:	01 d8                	add    %ebx,%eax
f011c4ca:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c4cf:	39 c1                	cmp    %eax,%ecx
f011c4d1:	74 17                	je     f011c4ea <test_kmalloc_firstfit1+0x584>
f011c4d3:	83 ec 04             	sub    $0x4,%esp
f011c4d6:	68 74 b0 13 f0       	push   $0xf013b074
f011c4db:	68 06 03 00 00       	push   $0x306
f011c4e0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c4e5:	e8 11 3d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4ea:	e8 4d 78 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c4ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c4f2:	74 17                	je     f011c50b <test_kmalloc_firstfit1+0x5a5>
f011c4f4:	83 ec 04             	sub    $0x4,%esp
f011c4f7:	68 74 ac 13 f0       	push   $0xf013ac74
f011c4fc:	68 07 03 00 00       	push   $0x307
f011c501:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c506:	e8 f0 3c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c50b:	e8 af 03 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c510:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c513:	29 c2                	sub    %eax,%edx
f011c515:	89 d0                	mov    %edx,%eax
f011c517:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c51c:	74 17                	je     f011c535 <test_kmalloc_firstfit1+0x5cf>
f011c51e:	83 ec 04             	sub    $0x4,%esp
f011c521:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c526:	68 08 03 00 00       	push   $0x308
f011c52b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c530:	e8 c6 3c fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c535:	e8 85 03 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c53a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c53d:	e8 fa 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c542:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011c545:	83 ec 0c             	sub    $0xc,%esp
f011c548:	68 00 fc 1f 00       	push   $0x1ffc00
f011c54d:	e8 ac b2 fe ff       	call   f01077fe <kmalloc>
f011c552:	83 c4 10             	add    $0x10,%esp
f011c555:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011c55b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c561:	89 c1                	mov    %eax,%ecx
f011c563:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c56a:	10 00 00 
f011c56d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c573:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c578:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c57e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c584:	ba 00 00 00 00       	mov    $0x0,%edx
f011c589:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c58f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c595:	29 d0                	sub    %edx,%eax
f011c597:	89 c3                	mov    %eax,%ebx
f011c599:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c5a0:	10 00 00 
f011c5a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c5a8:	0f b6 d0             	movzbl %al,%edx
f011c5ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c5b1:	01 d0                	add    %edx,%eax
f011c5b3:	48                   	dec    %eax
f011c5b4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c5ba:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5c5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c5cb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5d1:	29 d0                	sub    %edx,%eax
f011c5d3:	01 c3                	add    %eax,%ebx
f011c5d5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c5dc:	10 00 00 
f011c5df:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c5e4:	0f b6 c0             	movzbl %al,%eax
f011c5e7:	c1 e0 04             	shl    $0x4,%eax
f011c5ea:	89 c2                	mov    %eax,%edx
f011c5ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c5f2:	01 d0                	add    %edx,%eax
f011c5f4:	48                   	dec    %eax
f011c5f5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c5fb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c601:	ba 00 00 00 00       	mov    $0x0,%edx
f011c606:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c60c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c612:	29 d0                	sub    %edx,%eax
f011c614:	01 d8                	add    %ebx,%eax
f011c616:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c61b:	39 c1                	cmp    %eax,%ecx
f011c61d:	74 17                	je     f011c636 <test_kmalloc_firstfit1+0x6d0>
f011c61f:	83 ec 04             	sub    $0x4,%esp
f011c622:	68 74 b0 13 f0       	push   $0xf013b074
f011c627:	68 0e 03 00 00       	push   $0x30e
f011c62c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c631:	e8 c5 3b fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c636:	e8 01 77 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c63b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c63e:	74 17                	je     f011c657 <test_kmalloc_firstfit1+0x6f1>
f011c640:	83 ec 04             	sub    $0x4,%esp
f011c643:	68 74 ac 13 f0       	push   $0xf013ac74
f011c648:	68 0f 03 00 00       	push   $0x30f
f011c64d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c652:	e8 a4 3b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c657:	e8 63 02 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c65c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c65f:	29 c2                	sub    %eax,%edx
f011c661:	89 d0                	mov    %edx,%eax
f011c663:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c668:	74 17                	je     f011c681 <test_kmalloc_firstfit1+0x71b>
f011c66a:	83 ec 04             	sub    $0x4,%esp
f011c66d:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c672:	68 10 03 00 00       	push   $0x310
f011c677:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c67c:	e8 7a 3b fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c681:	e8 39 02 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c686:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c689:	e8 ae 76 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c68e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c691:	83 ec 0c             	sub    $0xc,%esp
f011c694:	68 00 fc 2f 00       	push   $0x2ffc00
f011c699:	e8 60 b1 fe ff       	call   f01077fe <kmalloc>
f011c69e:	83 c4 10             	add    $0x10,%esp
f011c6a1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c6a7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c6ad:	89 c1                	mov    %eax,%ecx
f011c6af:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c6b6:	10 00 00 
f011c6b9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c6bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c6c4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c6ca:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c6d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6d5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c6db:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c6e1:	29 d0                	sub    %edx,%eax
f011c6e3:	89 c3                	mov    %eax,%ebx
f011c6e5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c6ec:	10 00 00 
f011c6ef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c6f4:	0f b6 d0             	movzbl %al,%edx
f011c6f7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c6fd:	01 d0                	add    %edx,%eax
f011c6ff:	48                   	dec    %eax
f011c700:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c706:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c70c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c711:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c717:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c71d:	29 d0                	sub    %edx,%eax
f011c71f:	01 c3                	add    %eax,%ebx
f011c721:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c728:	10 00 00 
f011c72b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c730:	0f b6 c0             	movzbl %al,%eax
f011c733:	c1 e0 04             	shl    $0x4,%eax
f011c736:	89 c2                	mov    %eax,%edx
f011c738:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c73e:	01 d0                	add    %edx,%eax
f011c740:	48                   	dec    %eax
f011c741:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c747:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c74d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c752:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c758:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c75e:	29 d0                	sub    %edx,%eax
f011c760:	01 d8                	add    %ebx,%eax
f011c762:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c767:	39 c1                	cmp    %eax,%ecx
f011c769:	74 17                	je     f011c782 <test_kmalloc_firstfit1+0x81c>
f011c76b:	83 ec 04             	sub    $0x4,%esp
f011c76e:	68 74 b0 13 f0       	push   $0xf013b074
f011c773:	68 16 03 00 00       	push   $0x316
f011c778:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c77d:	e8 79 3a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c782:	e8 b5 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c787:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c78a:	74 17                	je     f011c7a3 <test_kmalloc_firstfit1+0x83d>
f011c78c:	83 ec 04             	sub    $0x4,%esp
f011c78f:	68 74 ac 13 f0       	push   $0xf013ac74
f011c794:	68 17 03 00 00       	push   $0x317
f011c799:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c79e:	e8 58 3a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c7a3:	e8 17 01 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c7a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7ab:	29 c2                	sub    %eax,%edx
f011c7ad:	89 d0                	mov    %edx,%eax
f011c7af:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c7b4:	74 17                	je     f011c7cd <test_kmalloc_firstfit1+0x867>
f011c7b6:	83 ec 04             	sub    $0x4,%esp
f011c7b9:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c7be:	68 18 03 00 00       	push   $0x318
f011c7c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c7c8:	e8 2e 3a fe ff       	call   f01001fb <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7cd:	e8 ed 00 ff ff       	call   f010c8bf <sys_calculate_free_frames>
f011c7d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7d5:	e8 62 75 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c7da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c7dd:	83 ec 0c             	sub    $0xc,%esp
f011c7e0:	68 00 fc 2f 00       	push   $0x2ffc00
f011c7e5:	e8 14 b0 fe ff       	call   f01077fe <kmalloc>
f011c7ea:	83 c4 10             	add    $0x10,%esp
f011c7ed:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c7f3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c7f9:	89 c1                	mov    %eax,%ecx
f011c7fb:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c802:	10 00 00 
f011c805:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c80b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c810:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c816:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c81c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c821:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c827:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c82d:	29 d0                	sub    %edx,%eax
f011c82f:	89 c3                	mov    %eax,%ebx
f011c831:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c838:	10 00 00 
f011c83b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c840:	0f b6 d0             	movzbl %al,%edx
f011c843:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c849:	01 d0                	add    %edx,%eax
f011c84b:	48                   	dec    %eax
f011c84c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c852:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c858:	ba 00 00 00 00       	mov    $0x0,%edx
f011c85d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c863:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c869:	29 d0                	sub    %edx,%eax
f011c86b:	01 c3                	add    %eax,%ebx
f011c86d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c874:	10 00 00 
f011c877:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011c87c:	0f b6 c0             	movzbl %al,%eax
f011c87f:	c1 e0 04             	shl    $0x4,%eax
f011c882:	89 c2                	mov    %eax,%edx
f011c884:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c88a:	01 d0                	add    %edx,%eax
f011c88c:	48                   	dec    %eax
f011c88d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c893:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c899:	ba 00 00 00 00       	mov    $0x0,%edx
f011c89e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c8a4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c8aa:	29 d0                	sub    %edx,%eax
f011c8ac:	01 d8                	add    %ebx,%eax
f011c8ae:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c8b3:	39 c1                	cmp    %eax,%ecx
f011c8b5:	74 17                	je     f011c8ce <test_kmalloc_firstfit1+0x968>
f011c8b7:	83 ec 04             	sub    $0x4,%esp
f011c8ba:	68 74 b0 13 f0       	push   $0xf013b074
f011c8bf:	68 1e 03 00 00       	push   $0x31e
f011c8c4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c8c9:	e8 2d 39 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c8ce:	e8 69 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c8d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8d6:	74 17                	je     f011c8ef <test_kmalloc_firstfit1+0x989>
f011c8d8:	83 ec 04             	sub    $0x4,%esp
f011c8db:	68 74 ac 13 f0       	push   $0xf013ac74
f011c8e0:	68 1f 03 00 00       	push   $0x31f
f011c8e5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c8ea:	e8 0c 39 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c8ef:	e8 cb ff fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c8f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c8f7:	29 c2                	sub    %eax,%edx
f011c8f9:	89 d0                	mov    %edx,%eax
f011c8fb:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c900:	74 17                	je     f011c919 <test_kmalloc_firstfit1+0x9b3>
f011c902:	83 ec 04             	sub    $0x4,%esp
f011c905:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011c90a:	68 20 03 00 00       	push   $0x320
f011c90f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c914:	e8 e2 38 fe ff       	call   f01001fb <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c919:	e8 a1 ff fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c91e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c921:	e8 16 74 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c926:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c929:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c92f:	83 ec 0c             	sub    $0xc,%esp
f011c932:	50                   	push   %eax
f011c933:	e8 88 af fe ff       	call   f01078c0 <kfree>
f011c938:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c93b:	e8 fc 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c940:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c943:	74 17                	je     f011c95c <test_kmalloc_firstfit1+0x9f6>
f011c945:	83 ec 04             	sub    $0x4,%esp
f011c948:	68 74 ac 13 f0       	push   $0xf013ac74
f011c94d:	68 29 03 00 00       	push   $0x329
f011c952:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c957:	e8 9f 38 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c95c:	e8 5e ff fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c961:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c964:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c969:	74 17                	je     f011c982 <test_kmalloc_firstfit1+0xa1c>
f011c96b:	83 ec 04             	sub    $0x4,%esp
f011c96e:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011c973:	68 2a 03 00 00       	push   $0x32a
f011c978:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c97d:	e8 79 38 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c982:	e8 38 ff fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c987:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c98a:	e8 ad 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c98f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c992:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c998:	83 ec 0c             	sub    $0xc,%esp
f011c99b:	50                   	push   %eax
f011c99c:	e8 1f af fe ff       	call   f01078c0 <kfree>
f011c9a1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9a4:	e8 93 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c9a9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9ac:	74 17                	je     f011c9c5 <test_kmalloc_firstfit1+0xa5f>
f011c9ae:	83 ec 04             	sub    $0x4,%esp
f011c9b1:	68 74 ac 13 f0       	push   $0xf013ac74
f011c9b6:	68 30 03 00 00       	push   $0x330
f011c9bb:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c9c0:	e8 36 38 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c9c5:	e8 f5 fe fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c9ca:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c9cd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c9d2:	74 17                	je     f011c9eb <test_kmalloc_firstfit1+0xa85>
f011c9d4:	83 ec 04             	sub    $0x4,%esp
f011c9d7:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011c9dc:	68 31 03 00 00       	push   $0x331
f011c9e1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011c9e6:	e8 10 38 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c9eb:	e8 cf fe fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011c9f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9f3:	e8 44 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011c9f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c9fb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ca01:	83 ec 0c             	sub    $0xc,%esp
f011ca04:	50                   	push   %eax
f011ca05:	e8 b6 ae fe ff       	call   f01078c0 <kfree>
f011ca0a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca0d:	e8 2a 73 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca15:	74 17                	je     f011ca2e <test_kmalloc_firstfit1+0xac8>
f011ca17:	83 ec 04             	sub    $0x4,%esp
f011ca1a:	68 74 ac 13 f0       	push   $0xf013ac74
f011ca1f:	68 37 03 00 00       	push   $0x337
f011ca24:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ca29:	e8 cd 37 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011ca2e:	e8 8c fe fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ca33:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011ca36:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca3b:	74 17                	je     f011ca54 <test_kmalloc_firstfit1+0xaee>
f011ca3d:	83 ec 04             	sub    $0x4,%esp
f011ca40:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ca45:	68 38 03 00 00       	push   $0x338
f011ca4a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ca4f:	e8 a7 37 fe ff       	call   f01001fb <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ca54:	e8 66 fe fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ca59:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca5c:	e8 db 72 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ca61:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011ca64:	83 ec 0c             	sub    $0xc,%esp
f011ca67:	68 00 fc 07 00       	push   $0x7fc00
f011ca6c:	e8 8d ad fe ff       	call   f01077fe <kmalloc>
f011ca71:	83 c4 10             	add    $0x10,%esp
f011ca74:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011ca7a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ca80:	89 c1                	mov    %eax,%ecx
f011ca82:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ca89:	10 00 00 
f011ca8c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ca92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca97:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ca9d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011caa3:	ba 00 00 00 00       	mov    $0x0,%edx
f011caa8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011caae:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cab4:	29 d0                	sub    %edx,%eax
f011cab6:	89 c3                	mov    %eax,%ebx
f011cab8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cabf:	10 00 00 
f011cac2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cac7:	0f b6 d0             	movzbl %al,%edx
f011caca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cad0:	01 d0                	add    %edx,%eax
f011cad2:	48                   	dec    %eax
f011cad3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cad9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cadf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cae4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011caea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011caf0:	29 d0                	sub    %edx,%eax
f011caf2:	01 c3                	add    %eax,%ebx
f011caf4:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cafb:	10 00 00 
f011cafe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cb03:	0f b6 c0             	movzbl %al,%eax
f011cb06:	c1 e0 04             	shl    $0x4,%eax
f011cb09:	89 c2                	mov    %eax,%edx
f011cb0b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cb11:	01 d0                	add    %edx,%eax
f011cb13:	48                   	dec    %eax
f011cb14:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011cb1a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cb20:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb25:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011cb2b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cb31:	29 d0                	sub    %edx,%eax
f011cb33:	01 d8                	add    %ebx,%eax
f011cb35:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cb3a:	39 c1                	cmp    %eax,%ecx
f011cb3c:	74 17                	je     f011cb55 <test_kmalloc_firstfit1+0xbef>
f011cb3e:	83 ec 04             	sub    $0x4,%esp
f011cb41:	68 74 b0 13 f0       	push   $0xf013b074
f011cb46:	68 41 03 00 00       	push   $0x341
f011cb4b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cb50:	e8 a6 36 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb55:	e8 e2 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cb5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb5d:	74 17                	je     f011cb76 <test_kmalloc_firstfit1+0xc10>
f011cb5f:	83 ec 04             	sub    $0x4,%esp
f011cb62:	68 74 ac 13 f0       	push   $0xf013ac74
f011cb67:	68 42 03 00 00       	push   $0x342
f011cb6c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cb71:	e8 85 36 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011cb76:	e8 44 fd fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011cb7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb7e:	29 c2                	sub    %eax,%edx
f011cb80:	89 d0                	mov    %edx,%eax
f011cb82:	3d 80 00 00 00       	cmp    $0x80,%eax
f011cb87:	74 17                	je     f011cba0 <test_kmalloc_firstfit1+0xc3a>
f011cb89:	83 ec 04             	sub    $0x4,%esp
f011cb8c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011cb91:	68 43 03 00 00       	push   $0x343
f011cb96:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cb9b:	e8 5b 36 fe ff       	call   f01001fb <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011cba0:	e8 1a fd fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011cba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cba8:	e8 8f 71 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cbad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011cbb0:	83 ec 0c             	sub    $0xc,%esp
f011cbb3:	68 00 fc 0f 00       	push   $0xffc00
f011cbb8:	e8 41 ac fe ff       	call   f01077fe <kmalloc>
f011cbbd:	83 c4 10             	add    $0x10,%esp
f011cbc0:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011cbc6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cbcc:	89 c1                	mov    %eax,%ecx
f011cbce:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011cbd5:	10 00 00 
f011cbd8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cbde:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbe3:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cbe9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cbef:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbf4:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011cbfa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc00:	29 d0                	sub    %edx,%eax
f011cc02:	89 c3                	mov    %eax,%ebx
f011cc04:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011cc0b:	10 00 00 
f011cc0e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc13:	0f b6 d0             	movzbl %al,%edx
f011cc16:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011cc1c:	01 d0                	add    %edx,%eax
f011cc1e:	48                   	dec    %eax
f011cc1f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011cc25:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cc2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc30:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011cc36:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011cc3c:	29 d0                	sub    %edx,%eax
f011cc3e:	01 c3                	add    %eax,%ebx
f011cc40:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011cc47:	10 00 00 
f011cc4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cc4f:	0f b6 c0             	movzbl %al,%eax
f011cc52:	c1 e0 04             	shl    $0x4,%eax
f011cc55:	89 c2                	mov    %eax,%edx
f011cc57:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011cc5d:	01 d0                	add    %edx,%eax
f011cc5f:	48                   	dec    %eax
f011cc60:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011cc66:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cc6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc71:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011cc77:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011cc7d:	29 d0                	sub    %edx,%eax
f011cc7f:	01 d8                	add    %ebx,%eax
f011cc81:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cc86:	39 c1                	cmp    %eax,%ecx
f011cc88:	74 17                	je     f011cca1 <test_kmalloc_firstfit1+0xd3b>
f011cc8a:	83 ec 04             	sub    $0x4,%esp
f011cc8d:	68 74 b0 13 f0       	push   $0xf013b074
f011cc92:	68 49 03 00 00       	push   $0x349
f011cc97:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cc9c:	e8 5a 35 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cca1:	e8 96 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cca6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cca9:	74 17                	je     f011ccc2 <test_kmalloc_firstfit1+0xd5c>
f011ccab:	83 ec 04             	sub    $0x4,%esp
f011ccae:	68 74 ac 13 f0       	push   $0xf013ac74
f011ccb3:	68 4a 03 00 00       	push   $0x34a
f011ccb8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ccbd:	e8 39 35 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ccc2:	e8 f8 fb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ccc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ccca:	29 c2                	sub    %eax,%edx
f011cccc:	89 d0                	mov    %edx,%eax
f011ccce:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ccd3:	74 17                	je     f011ccec <test_kmalloc_firstfit1+0xd86>
f011ccd5:	83 ec 04             	sub    $0x4,%esp
f011ccd8:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ccdd:	68 4b 03 00 00       	push   $0x34b
f011cce2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cce7:	e8 0f 35 fe ff       	call   f01001fb <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011ccec:	e8 ce fb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ccf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccf4:	e8 43 70 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ccf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011ccfc:	83 ec 0c             	sub    $0xc,%esp
f011ccff:	68 00 fc 03 00       	push   $0x3fc00
f011cd04:	e8 f5 aa fe ff       	call   f01077fe <kmalloc>
f011cd09:	83 c4 10             	add    $0x10,%esp
f011cd0c:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011cd12:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cd18:	89 c1                	mov    %eax,%ecx
f011cd1a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011cd21:	10 00 00 
f011cd24:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011cd2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cd2f:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011cd35:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cd3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd40:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011cd46:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011cd4c:	29 d0                	sub    %edx,%eax
f011cd4e:	89 c3                	mov    %eax,%ebx
f011cd50:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011cd57:	10 00 00 
f011cd5a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cd5f:	0f b6 d0             	movzbl %al,%edx
f011cd62:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011cd68:	01 d0                	add    %edx,%eax
f011cd6a:	48                   	dec    %eax
f011cd6b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011cd71:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cd77:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd7c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011cd82:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cd88:	29 d0                	sub    %edx,%eax
f011cd8a:	01 c3                	add    %eax,%ebx
f011cd8c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011cd93:	10 00 00 
f011cd96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cd9b:	0f b6 c0             	movzbl %al,%eax
f011cd9e:	c1 e0 04             	shl    $0x4,%eax
f011cda1:	89 c2                	mov    %eax,%edx
f011cda3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cda9:	01 d0                	add    %edx,%eax
f011cdab:	48                   	dec    %eax
f011cdac:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011cdb2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cdb8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdbd:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011cdc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cdc9:	29 d0                	sub    %edx,%eax
f011cdcb:	01 d8                	add    %ebx,%eax
f011cdcd:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011cdd2:	39 c1                	cmp    %eax,%ecx
f011cdd4:	74 17                	je     f011cded <test_kmalloc_firstfit1+0xe87>
f011cdd6:	83 ec 04             	sub    $0x4,%esp
f011cdd9:	68 74 b0 13 f0       	push   $0xf013b074
f011cdde:	68 52 03 00 00       	push   $0x352
f011cde3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cde8:	e8 0e 34 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cded:	e8 4a 6f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cdf2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cdf5:	74 17                	je     f011ce0e <test_kmalloc_firstfit1+0xea8>
f011cdf7:	83 ec 04             	sub    $0x4,%esp
f011cdfa:	68 74 ac 13 f0       	push   $0xf013ac74
f011cdff:	68 53 03 00 00       	push   $0x353
f011ce04:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ce09:	e8 ed 33 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011ce0e:	e8 ac fa fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ce13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce16:	29 c2                	sub    %eax,%edx
f011ce18:	89 d0                	mov    %edx,%eax
f011ce1a:	83 f8 40             	cmp    $0x40,%eax
f011ce1d:	74 17                	je     f011ce36 <test_kmalloc_firstfit1+0xed0>
f011ce1f:	83 ec 04             	sub    $0x4,%esp
f011ce22:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011ce27:	68 54 03 00 00       	push   $0x354
f011ce2c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ce31:	e8 c5 33 fe ff       	call   f01001fb <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011ce36:	e8 84 fa fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ce3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce3e:	e8 f9 6e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ce43:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011ce46:	83 ec 0c             	sub    $0xc,%esp
f011ce49:	68 00 00 20 00       	push   $0x200000
f011ce4e:	e8 ab a9 fe ff       	call   f01077fe <kmalloc>
f011ce53:	83 c4 10             	add    $0x10,%esp
f011ce56:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ce5c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ce62:	89 c1                	mov    %eax,%ecx
f011ce64:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ce6b:	10 00 00 
f011ce6e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ce74:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce79:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ce7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ce85:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce8a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ce90:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ce96:	29 d0                	sub    %edx,%eax
f011ce98:	89 c3                	mov    %eax,%ebx
f011ce9a:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011cea1:	10 00 00 
f011cea4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cea9:	0f b6 d0             	movzbl %al,%edx
f011ceac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ceb2:	01 d0                	add    %edx,%eax
f011ceb4:	48                   	dec    %eax
f011ceb5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cebb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cec1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cec6:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011cecc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ced2:	29 d0                	sub    %edx,%eax
f011ced4:	01 c3                	add    %eax,%ebx
f011ced6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cedd:	10 00 00 
f011cee0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cee5:	0f b6 c0             	movzbl %al,%eax
f011cee8:	c1 e0 04             	shl    $0x4,%eax
f011ceeb:	89 c2                	mov    %eax,%edx
f011ceed:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cef3:	01 d0                	add    %edx,%eax
f011cef5:	48                   	dec    %eax
f011cef6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cefc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf02:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf07:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cf0d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf13:	29 d0                	sub    %edx,%eax
f011cf15:	01 d8                	add    %ebx,%eax
f011cf17:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cf1c:	39 c1                	cmp    %eax,%ecx
f011cf1e:	74 17                	je     f011cf37 <test_kmalloc_firstfit1+0xfd1>
f011cf20:	83 ec 04             	sub    $0x4,%esp
f011cf23:	68 74 b0 13 f0       	push   $0xf013b074
f011cf28:	68 5a 03 00 00       	push   $0x35a
f011cf2d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf32:	e8 c4 32 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cf37:	e8 83 f9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011cf3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf3f:	29 c2                	sub    %eax,%edx
f011cf41:	89 d0                	mov    %edx,%eax
f011cf43:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf48:	74 17                	je     f011cf61 <test_kmalloc_firstfit1+0xffb>
f011cf4a:	83 ec 04             	sub    $0x4,%esp
f011cf4d:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011cf52:	68 5b 03 00 00       	push   $0x35b
f011cf57:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf5c:	e8 9a 32 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf61:	e8 d6 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cf66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf69:	74 17                	je     f011cf82 <test_kmalloc_firstfit1+0x101c>
f011cf6b:	83 ec 04             	sub    $0x4,%esp
f011cf6e:	68 74 ac 13 f0       	push   $0xf013ac74
f011cf73:	68 5c 03 00 00       	push   $0x35c
f011cf78:	68 5a ac 13 f0       	push   $0xf013ac5a
f011cf7d:	e8 79 32 fe ff       	call   f01001fb <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011cf82:	e8 38 f9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011cf87:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf8a:	e8 ad 6d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011cf8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011cf92:	83 ec 0c             	sub    $0xc,%esp
f011cf95:	68 00 fc 3f 00       	push   $0x3ffc00
f011cf9a:	e8 5f a8 fe ff       	call   f01077fe <kmalloc>
f011cf9f:	83 c4 10             	add    $0x10,%esp
f011cfa2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011cfa8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cfae:	89 c1                	mov    %eax,%ecx
f011cfb0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cfb7:	10 00 00 
f011cfba:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cfc0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfc5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cfcb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cfd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfd6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cfdc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cfe2:	29 d0                	sub    %edx,%eax
f011cfe4:	89 c3                	mov    %eax,%ebx
f011cfe6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cfed:	10 00 00 
f011cff0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011cff5:	0f b6 d0             	movzbl %al,%edx
f011cff8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cffe:	01 d0                	add    %edx,%eax
f011d000:	48                   	dec    %eax
f011d001:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011d007:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d00d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d012:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011d018:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011d01e:	29 d0                	sub    %edx,%eax
f011d020:	01 c3                	add    %eax,%ebx
f011d022:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011d029:	10 00 00 
f011d02c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d031:	0f b6 c0             	movzbl %al,%eax
f011d034:	c1 e0 04             	shl    $0x4,%eax
f011d037:	89 c2                	mov    %eax,%edx
f011d039:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011d03f:	01 d0                	add    %edx,%eax
f011d041:	48                   	dec    %eax
f011d042:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011d048:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d04e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d053:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011d059:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d05f:	29 d0                	sub    %edx,%eax
f011d061:	01 d8                	add    %ebx,%eax
f011d063:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d068:	39 c1                	cmp    %eax,%ecx
f011d06a:	74 17                	je     f011d083 <test_kmalloc_firstfit1+0x111d>
f011d06c:	83 ec 04             	sub    $0x4,%esp
f011d06f:	68 74 b0 13 f0       	push   $0xf013b074
f011d074:	68 63 03 00 00       	push   $0x363
f011d079:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d07e:	e8 78 31 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d083:	e8 b4 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d088:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d08b:	74 17                	je     f011d0a4 <test_kmalloc_firstfit1+0x113e>
f011d08d:	83 ec 04             	sub    $0x4,%esp
f011d090:	68 74 ac 13 f0       	push   $0xf013ac74
f011d095:	68 64 03 00 00       	push   $0x364
f011d09a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d09f:	e8 57 31 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d0a4:	e8 16 f8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d0a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0ac:	29 c2                	sub    %eax,%edx
f011d0ae:	89 d0                	mov    %edx,%eax
f011d0b0:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d0b5:	74 17                	je     f011d0ce <test_kmalloc_firstfit1+0x1168>
f011d0b7:	83 ec 04             	sub    $0x4,%esp
f011d0ba:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d0bf:	68 65 03 00 00       	push   $0x365
f011d0c4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d0c9:	e8 2d 31 fe ff       	call   f01001fb <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d0ce:	e8 ec f7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d0d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0d6:	e8 61 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d0db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d0de:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d0e4:	83 ec 0c             	sub    $0xc,%esp
f011d0e7:	50                   	push   %eax
f011d0e8:	e8 d3 a7 fe ff       	call   f01078c0 <kfree>
f011d0ed:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0f0:	e8 47 6c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d0f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0f8:	74 17                	je     f011d111 <test_kmalloc_firstfit1+0x11ab>
f011d0fa:	83 ec 04             	sub    $0x4,%esp
f011d0fd:	68 74 ac 13 f0       	push   $0xf013ac74
f011d102:	68 6e 03 00 00       	push   $0x36e
f011d107:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d10c:	e8 ea 30 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d111:	e8 a9 f7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d116:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d119:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d11e:	74 17                	je     f011d137 <test_kmalloc_firstfit1+0x11d1>
f011d120:	83 ec 04             	sub    $0x4,%esp
f011d123:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d128:	68 6f 03 00 00       	push   $0x36f
f011d12d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d132:	e8 c4 30 fe ff       	call   f01001fb <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d137:	e8 83 f7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d13c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d13f:	e8 f8 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d144:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d147:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d14d:	83 ec 0c             	sub    $0xc,%esp
f011d150:	50                   	push   %eax
f011d151:	e8 6a a7 fe ff       	call   f01078c0 <kfree>
f011d156:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d159:	e8 de 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d15e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d161:	74 17                	je     f011d17a <test_kmalloc_firstfit1+0x1214>
f011d163:	83 ec 04             	sub    $0x4,%esp
f011d166:	68 74 ac 13 f0       	push   $0xf013ac74
f011d16b:	68 75 03 00 00       	push   $0x375
f011d170:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d175:	e8 81 30 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d17a:	e8 40 f7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d17f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d182:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d187:	74 17                	je     f011d1a0 <test_kmalloc_firstfit1+0x123a>
f011d189:	83 ec 04             	sub    $0x4,%esp
f011d18c:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d191:	68 76 03 00 00       	push   $0x376
f011d196:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d19b:	e8 5b 30 fe ff       	call   f01001fb <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d1a0:	e8 1a f7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d1a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1a8:	e8 8f 6b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d1ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d1b0:	83 ec 0c             	sub    $0xc,%esp
f011d1b3:	68 00 00 10 00       	push   $0x100000
f011d1b8:	e8 41 a6 fe ff       	call   f01077fe <kmalloc>
f011d1bd:	83 c4 10             	add    $0x10,%esp
f011d1c0:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d1c6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d1cc:	89 c1                	mov    %eax,%ecx
f011d1ce:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011d1d5:	10 00 00 
f011d1d8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d1de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1e3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011d1e9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d1ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1f4:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011d1fa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d200:	29 d0                	sub    %edx,%eax
f011d202:	89 c3                	mov    %eax,%ebx
f011d204:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011d20b:	10 00 00 
f011d20e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d213:	0f b6 d0             	movzbl %al,%edx
f011d216:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d21c:	01 d0                	add    %edx,%eax
f011d21e:	48                   	dec    %eax
f011d21f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011d225:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d22b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d230:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011d236:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d23c:	29 d0                	sub    %edx,%eax
f011d23e:	01 c3                	add    %eax,%ebx
f011d240:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011d247:	10 00 00 
f011d24a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d24f:	0f b6 c0             	movzbl %al,%eax
f011d252:	c1 e0 04             	shl    $0x4,%eax
f011d255:	89 c2                	mov    %eax,%edx
f011d257:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d25d:	01 d0                	add    %edx,%eax
f011d25f:	48                   	dec    %eax
f011d260:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011d266:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d26c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d271:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011d277:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d27d:	29 d0                	sub    %edx,%eax
f011d27f:	01 d8                	add    %ebx,%eax
f011d281:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d286:	39 c1                	cmp    %eax,%ecx
f011d288:	74 17                	je     f011d2a1 <test_kmalloc_firstfit1+0x133b>
f011d28a:	83 ec 04             	sub    $0x4,%esp
f011d28d:	68 74 b0 13 f0       	push   $0xf013b074
f011d292:	68 80 03 00 00       	push   $0x380
f011d297:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d29c:	e8 5a 2f fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2a1:	e8 96 6a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d2a6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2a9:	74 17                	je     f011d2c2 <test_kmalloc_firstfit1+0x135c>
f011d2ab:	83 ec 04             	sub    $0x4,%esp
f011d2ae:	68 74 ac 13 f0       	push   $0xf013ac74
f011d2b3:	68 81 03 00 00       	push   $0x381
f011d2b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d2bd:	e8 39 2f fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d2c2:	e8 f8 f5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d2c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2ca:	29 c2                	sub    %eax,%edx
f011d2cc:	89 d0                	mov    %edx,%eax
f011d2ce:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d2d3:	74 17                	je     f011d2ec <test_kmalloc_firstfit1+0x1386>
f011d2d5:	83 ec 04             	sub    $0x4,%esp
f011d2d8:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d2dd:	68 82 03 00 00       	push   $0x382
f011d2e2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d2e7:	e8 0f 2f fe ff       	call   f01001fb <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d2ec:	83 ec 0c             	sub    $0xc,%esp
f011d2ef:	68 50 b2 13 f0       	push   $0xf013b250
f011d2f4:	e8 89 39 fe ff       	call   f0100c82 <cprintf>
f011d2f9:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d2fc:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d301:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d304:	5b                   	pop    %ebx
f011d305:	5f                   	pop    %edi
f011d306:	5d                   	pop    %ebp
f011d307:	c3                   	ret    

f011d308 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d308:	55                   	push   %ebp
f011d309:	89 e5                	mov    %esp,%ebp
f011d30b:	57                   	push   %edi
f011d30c:	53                   	push   %ebx
f011d30d:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011d313:	83 ec 0c             	sub    $0xc,%esp
f011d316:	68 9c ab 13 f0       	push   $0xf013ab9c
f011d31b:	e8 62 39 fe ff       	call   f0100c82 <cprintf>
f011d320:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d323:	83 ec 0c             	sub    $0xc,%esp
f011d326:	68 cc ab 13 f0       	push   $0xf013abcc
f011d32b:	e8 52 39 fe ff       	call   f0100c82 <cprintf>
f011d330:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d333:	83 ec 0c             	sub    $0xc,%esp
f011d336:	68 9c ab 13 f0       	push   $0xf013ab9c
f011d33b:	e8 42 39 fe ff       	call   f0100c82 <cprintf>
f011d340:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d343:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011d349:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d34e:	b8 00 00 00 00       	mov    $0x0,%eax
f011d353:	89 d7                	mov    %edx,%edi
f011d355:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d357:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d35e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d361:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d366:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d369:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d36c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d371:	f7 75 f4             	divl   -0xc(%ebp)
f011d374:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d377:	29 d0                	sub    %edx,%eax
f011d379:	89 c1                	mov    %eax,%ecx
f011d37b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d382:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d387:	0f b6 d0             	movzbl %al,%edx
f011d38a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d38d:	01 d0                	add    %edx,%eax
f011d38f:	48                   	dec    %eax
f011d390:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d393:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d396:	ba 00 00 00 00       	mov    $0x0,%edx
f011d39b:	f7 75 ec             	divl   -0x14(%ebp)
f011d39e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d3a1:	29 d0                	sub    %edx,%eax
f011d3a3:	01 c1                	add    %eax,%ecx
f011d3a5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011d3ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d3b1:	0f b6 c0             	movzbl %al,%eax
f011d3b4:	c1 e0 04             	shl    $0x4,%eax
f011d3b7:	89 c2                	mov    %eax,%edx
f011d3b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011d3bc:	01 d0                	add    %edx,%eax
f011d3be:	48                   	dec    %eax
f011d3bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011d3c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d3c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3ca:	f7 75 e4             	divl   -0x1c(%ebp)
f011d3cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011d3d0:	29 d0                	sub    %edx,%eax
f011d3d2:	01 c8                	add    %ecx,%eax
f011d3d4:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d3d9:	29 c2                	sub    %eax,%edx
f011d3db:	89 d0                	mov    %edx,%eax
f011d3dd:	83 ec 0c             	sub    $0xc,%esp
f011d3e0:	50                   	push   %eax
f011d3e1:	e8 18 a4 fe ff       	call   f01077fe <kmalloc>
f011d3e6:	83 c4 10             	add    $0x10,%esp
f011d3e9:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d3ef:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d3f5:	85 c0                	test   %eax,%eax
f011d3f7:	74 17                	je     f011d410 <test_kmalloc_firstfit2+0x108>
f011d3f9:	83 ec 04             	sub    $0x4,%esp
f011d3fc:	68 9c b2 13 f0       	push   $0xf013b29c
f011d401:	68 97 03 00 00       	push   $0x397
f011d406:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d40b:	e8 eb 2d fe ff       	call   f01001fb <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d410:	e8 aa f4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d415:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d418:	e8 1f 69 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d41d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d420:	83 ec 0c             	sub    $0xc,%esp
f011d423:	68 00 fc 1f 00       	push   $0x1ffc00
f011d428:	e8 d1 a3 fe ff       	call   f01077fe <kmalloc>
f011d42d:	83 c4 10             	add    $0x10,%esp
f011d430:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d436:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d43c:	89 c1                	mov    %eax,%ecx
f011d43e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d445:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d448:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d44d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d450:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d453:	ba 00 00 00 00       	mov    $0x0,%edx
f011d458:	f7 75 d4             	divl   -0x2c(%ebp)
f011d45b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d45e:	29 d0                	sub    %edx,%eax
f011d460:	89 c3                	mov    %eax,%ebx
f011d462:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d469:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d46e:	0f b6 d0             	movzbl %al,%edx
f011d471:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d474:	01 d0                	add    %edx,%eax
f011d476:	48                   	dec    %eax
f011d477:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d47a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d47d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d482:	f7 75 cc             	divl   -0x34(%ebp)
f011d485:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d488:	29 d0                	sub    %edx,%eax
f011d48a:	01 c3                	add    %eax,%ebx
f011d48c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d493:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d498:	0f b6 c0             	movzbl %al,%eax
f011d49b:	c1 e0 04             	shl    $0x4,%eax
f011d49e:	89 c2                	mov    %eax,%edx
f011d4a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d4a3:	01 d0                	add    %edx,%eax
f011d4a5:	48                   	dec    %eax
f011d4a6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d4a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4b1:	f7 75 c4             	divl   -0x3c(%ebp)
f011d4b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4b7:	29 d0                	sub    %edx,%eax
f011d4b9:	01 d8                	add    %ebx,%eax
f011d4bb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d4c0:	39 c1                	cmp    %eax,%ecx
f011d4c2:	74 17                	je     f011d4db <test_kmalloc_firstfit2+0x1d3>
f011d4c4:	83 ec 04             	sub    $0x4,%esp
f011d4c7:	68 74 b0 13 f0       	push   $0xf013b074
f011d4cc:	68 a1 03 00 00       	push   $0x3a1
f011d4d1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d4d6:	e8 20 2d fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4db:	e8 5c 68 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d4e0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d4e3:	74 17                	je     f011d4fc <test_kmalloc_firstfit2+0x1f4>
f011d4e5:	83 ec 04             	sub    $0x4,%esp
f011d4e8:	68 74 ac 13 f0       	push   $0xf013ac74
f011d4ed:	68 a2 03 00 00       	push   $0x3a2
f011d4f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d4f7:	e8 ff 2c fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d4fc:	e8 be f3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d501:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d504:	29 c2                	sub    %eax,%edx
f011d506:	89 d0                	mov    %edx,%eax
f011d508:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d50d:	74 17                	je     f011d526 <test_kmalloc_firstfit2+0x21e>
f011d50f:	83 ec 04             	sub    $0x4,%esp
f011d512:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d517:	68 a3 03 00 00       	push   $0x3a3
f011d51c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d521:	e8 d5 2c fe ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d526:	e8 94 f3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d52b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d52e:	e8 09 68 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d533:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d536:	83 ec 0c             	sub    $0xc,%esp
f011d539:	68 00 fc 1f 00       	push   $0x1ffc00
f011d53e:	e8 bb a2 fe ff       	call   f01077fe <kmalloc>
f011d543:	83 c4 10             	add    $0x10,%esp
f011d546:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d54c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d552:	89 c1                	mov    %eax,%ecx
f011d554:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d55b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d55e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d563:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d566:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d569:	ba 00 00 00 00       	mov    $0x0,%edx
f011d56e:	f7 75 bc             	divl   -0x44(%ebp)
f011d571:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d574:	29 d0                	sub    %edx,%eax
f011d576:	89 c3                	mov    %eax,%ebx
f011d578:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d57f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d584:	0f b6 d0             	movzbl %al,%edx
f011d587:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d58a:	01 d0                	add    %edx,%eax
f011d58c:	48                   	dec    %eax
f011d58d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d590:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d593:	ba 00 00 00 00       	mov    $0x0,%edx
f011d598:	f7 75 b4             	divl   -0x4c(%ebp)
f011d59b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d59e:	29 d0                	sub    %edx,%eax
f011d5a0:	01 c3                	add    %eax,%ebx
f011d5a2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d5a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d5ae:	0f b6 c0             	movzbl %al,%eax
f011d5b1:	c1 e0 04             	shl    $0x4,%eax
f011d5b4:	89 c2                	mov    %eax,%edx
f011d5b6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d5b9:	01 d0                	add    %edx,%eax
f011d5bb:	48                   	dec    %eax
f011d5bc:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d5bf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d5c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5c7:	f7 75 ac             	divl   -0x54(%ebp)
f011d5ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d5cd:	29 d0                	sub    %edx,%eax
f011d5cf:	01 d8                	add    %ebx,%eax
f011d5d1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d5d6:	39 c1                	cmp    %eax,%ecx
f011d5d8:	74 17                	je     f011d5f1 <test_kmalloc_firstfit2+0x2e9>
f011d5da:	83 ec 04             	sub    $0x4,%esp
f011d5dd:	68 74 b0 13 f0       	push   $0xf013b074
f011d5e2:	68 a9 03 00 00       	push   $0x3a9
f011d5e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d5ec:	e8 0a 2c fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5f1:	e8 46 67 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d5f6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d5f9:	74 17                	je     f011d612 <test_kmalloc_firstfit2+0x30a>
f011d5fb:	83 ec 04             	sub    $0x4,%esp
f011d5fe:	68 74 ac 13 f0       	push   $0xf013ac74
f011d603:	68 aa 03 00 00       	push   $0x3aa
f011d608:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d60d:	e8 e9 2b fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d612:	e8 a8 f2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d617:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d61a:	29 c2                	sub    %eax,%edx
f011d61c:	89 d0                	mov    %edx,%eax
f011d61e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d623:	74 17                	je     f011d63c <test_kmalloc_firstfit2+0x334>
f011d625:	83 ec 04             	sub    $0x4,%esp
f011d628:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d62d:	68 ab 03 00 00       	push   $0x3ab
f011d632:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d637:	e8 bf 2b fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d63c:	e8 7e f2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d641:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d644:	e8 f3 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d649:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d64c:	83 ec 0c             	sub    $0xc,%esp
f011d64f:	68 00 08 00 00       	push   $0x800
f011d654:	e8 a5 a1 fe ff       	call   f01077fe <kmalloc>
f011d659:	83 c4 10             	add    $0x10,%esp
f011d65c:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d662:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d668:	89 c1                	mov    %eax,%ecx
f011d66a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d671:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d674:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d679:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d67c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d67f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d684:	f7 75 a4             	divl   -0x5c(%ebp)
f011d687:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d68a:	29 d0                	sub    %edx,%eax
f011d68c:	89 c3                	mov    %eax,%ebx
f011d68e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d695:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d69a:	0f b6 d0             	movzbl %al,%edx
f011d69d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d6a0:	01 d0                	add    %edx,%eax
f011d6a2:	48                   	dec    %eax
f011d6a3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d6a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d6a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ae:	f7 75 9c             	divl   -0x64(%ebp)
f011d6b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d6b4:	29 d0                	sub    %edx,%eax
f011d6b6:	01 c3                	add    %eax,%ebx
f011d6b8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d6bf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d6c4:	0f b6 c0             	movzbl %al,%eax
f011d6c7:	c1 e0 04             	shl    $0x4,%eax
f011d6ca:	89 c2                	mov    %eax,%edx
f011d6cc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d6cf:	01 d0                	add    %edx,%eax
f011d6d1:	48                   	dec    %eax
f011d6d2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d6d5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d6d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6dd:	f7 75 94             	divl   -0x6c(%ebp)
f011d6e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d6e3:	29 d0                	sub    %edx,%eax
f011d6e5:	01 d8                	add    %ebx,%eax
f011d6e7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d6ec:	39 c1                	cmp    %eax,%ecx
f011d6ee:	73 17                	jae    f011d707 <test_kmalloc_firstfit2+0x3ff>
f011d6f0:	83 ec 04             	sub    $0x4,%esp
f011d6f3:	68 74 b0 13 f0       	push   $0xf013b074
f011d6f8:	68 b1 03 00 00       	push   $0x3b1
f011d6fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d702:	e8 f4 2a fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d707:	e8 30 66 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d70c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d70f:	74 17                	je     f011d728 <test_kmalloc_firstfit2+0x420>
f011d711:	83 ec 04             	sub    $0x4,%esp
f011d714:	68 74 ac 13 f0       	push   $0xf013ac74
f011d719:	68 b2 03 00 00       	push   $0x3b2
f011d71e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d723:	e8 d3 2a fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d728:	e8 92 f1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d72d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d730:	29 c2                	sub    %eax,%edx
f011d732:	89 d0                	mov    %edx,%eax
f011d734:	83 f8 01             	cmp    $0x1,%eax
f011d737:	74 17                	je     f011d750 <test_kmalloc_firstfit2+0x448>
f011d739:	83 ec 04             	sub    $0x4,%esp
f011d73c:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d741:	68 b3 03 00 00       	push   $0x3b3
f011d746:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d74b:	e8 ab 2a fe ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d750:	e8 6a f1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d755:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d758:	e8 df 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d75d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d760:	83 ec 0c             	sub    $0xc,%esp
f011d763:	68 00 08 00 00       	push   $0x800
f011d768:	e8 91 a0 fe ff       	call   f01077fe <kmalloc>
f011d76d:	83 c4 10             	add    $0x10,%esp
f011d770:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d776:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d77c:	89 c1                	mov    %eax,%ecx
f011d77e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d785:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d788:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d78d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d790:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d793:	ba 00 00 00 00       	mov    $0x0,%edx
f011d798:	f7 75 8c             	divl   -0x74(%ebp)
f011d79b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d79e:	29 d0                	sub    %edx,%eax
f011d7a0:	89 c3                	mov    %eax,%ebx
f011d7a2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d7a9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d7ae:	0f b6 d0             	movzbl %al,%edx
f011d7b1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d7b4:	01 d0                	add    %edx,%eax
f011d7b6:	48                   	dec    %eax
f011d7b7:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d7ba:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d7bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7c2:	f7 75 84             	divl   -0x7c(%ebp)
f011d7c5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d7c8:	29 d0                	sub    %edx,%eax
f011d7ca:	01 c3                	add    %eax,%ebx
f011d7cc:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d7d3:	10 00 00 
f011d7d6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d7db:	0f b6 c0             	movzbl %al,%eax
f011d7de:	c1 e0 04             	shl    $0x4,%eax
f011d7e1:	89 c2                	mov    %eax,%edx
f011d7e3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d7e9:	01 d0                	add    %edx,%eax
f011d7eb:	48                   	dec    %eax
f011d7ec:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d7f2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d7f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7fd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d803:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d809:	29 d0                	sub    %edx,%eax
f011d80b:	01 d8                	add    %ebx,%eax
f011d80d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d812:	39 c1                	cmp    %eax,%ecx
f011d814:	74 17                	je     f011d82d <test_kmalloc_firstfit2+0x525>
f011d816:	83 ec 04             	sub    $0x4,%esp
f011d819:	68 74 b0 13 f0       	push   $0xf013b074
f011d81e:	68 b9 03 00 00       	push   $0x3b9
f011d823:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d828:	e8 ce 29 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d82d:	e8 0a 65 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d832:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d835:	74 17                	je     f011d84e <test_kmalloc_firstfit2+0x546>
f011d837:	83 ec 04             	sub    $0x4,%esp
f011d83a:	68 74 ac 13 f0       	push   $0xf013ac74
f011d83f:	68 ba 03 00 00       	push   $0x3ba
f011d844:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d849:	e8 ad 29 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d84e:	e8 6c f0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d853:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d856:	29 c2                	sub    %eax,%edx
f011d858:	89 d0                	mov    %edx,%eax
f011d85a:	83 f8 01             	cmp    $0x1,%eax
f011d85d:	74 17                	je     f011d876 <test_kmalloc_firstfit2+0x56e>
f011d85f:	83 ec 04             	sub    $0x4,%esp
f011d862:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011d867:	68 bb 03 00 00       	push   $0x3bb
f011d86c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d871:	e8 85 29 fe ff       	call   f01001fb <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d876:	e8 44 f0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d87b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d87e:	e8 b9 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d883:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d886:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d88c:	83 ec 0c             	sub    $0xc,%esp
f011d88f:	50                   	push   %eax
f011d890:	e8 2b a0 fe ff       	call   f01078c0 <kfree>
f011d895:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d898:	e8 9f 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d89d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d8a0:	74 17                	je     f011d8b9 <test_kmalloc_firstfit2+0x5b1>
f011d8a2:	83 ec 04             	sub    $0x4,%esp
f011d8a5:	68 74 ac 13 f0       	push   $0xf013ac74
f011d8aa:	68 c1 03 00 00       	push   $0x3c1
f011d8af:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d8b4:	e8 42 29 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d8b9:	e8 01 f0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d8be:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d8c1:	83 f8 01             	cmp    $0x1,%eax
f011d8c4:	74 17                	je     f011d8dd <test_kmalloc_firstfit2+0x5d5>
f011d8c6:	83 ec 04             	sub    $0x4,%esp
f011d8c9:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011d8ce:	68 c2 03 00 00       	push   $0x3c2
f011d8d3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d8d8:	e8 1e 29 fe ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d8dd:	e8 dd ef fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011d8e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8e5:	e8 52 64 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d8ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d8ed:	83 ec 0c             	sub    $0xc,%esp
f011d8f0:	68 00 1c 00 00       	push   $0x1c00
f011d8f5:	e8 04 9f fe ff       	call   f01077fe <kmalloc>
f011d8fa:	83 c4 10             	add    $0x10,%esp
f011d8fd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d903:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d909:	89 c1                	mov    %eax,%ecx
f011d90b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d912:	10 00 00 
f011d915:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d91b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d920:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d926:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d92c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d931:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d937:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d93d:	29 d0                	sub    %edx,%eax
f011d93f:	89 c3                	mov    %eax,%ebx
f011d941:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d948:	10 00 00 
f011d94b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d950:	0f b6 d0             	movzbl %al,%edx
f011d953:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d959:	01 d0                	add    %edx,%eax
f011d95b:	48                   	dec    %eax
f011d95c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d962:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d968:	ba 00 00 00 00       	mov    $0x0,%edx
f011d96d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d973:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d979:	29 d0                	sub    %edx,%eax
f011d97b:	01 c3                	add    %eax,%ebx
f011d97d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d984:	10 00 00 
f011d987:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011d98c:	0f b6 c0             	movzbl %al,%eax
f011d98f:	c1 e0 04             	shl    $0x4,%eax
f011d992:	89 c2                	mov    %eax,%edx
f011d994:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d99a:	01 d0                	add    %edx,%eax
f011d99c:	48                   	dec    %eax
f011d99d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d9a3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d9a9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9ae:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d9b4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d9ba:	29 d0                	sub    %edx,%eax
f011d9bc:	01 d8                	add    %ebx,%eax
f011d9be:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d9c3:	39 c1                	cmp    %eax,%ecx
f011d9c5:	74 17                	je     f011d9de <test_kmalloc_firstfit2+0x6d6>
f011d9c7:	83 ec 04             	sub    $0x4,%esp
f011d9ca:	68 74 b0 13 f0       	push   $0xf013b074
f011d9cf:	68 c8 03 00 00       	push   $0x3c8
f011d9d4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d9d9:	e8 1d 28 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9de:	e8 59 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011d9e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d9e6:	74 17                	je     f011d9ff <test_kmalloc_firstfit2+0x6f7>
f011d9e8:	83 ec 04             	sub    $0x4,%esp
f011d9eb:	68 74 ac 13 f0       	push   $0xf013ac74
f011d9f0:	68 c9 03 00 00       	push   $0x3c9
f011d9f5:	68 5a ac 13 f0       	push   $0xf013ac5a
f011d9fa:	e8 fc 27 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d9ff:	e8 bb ee fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011da04:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011da07:	29 c2                	sub    %eax,%edx
f011da09:	89 d0                	mov    %edx,%eax
f011da0b:	83 f8 02             	cmp    $0x2,%eax
f011da0e:	74 17                	je     f011da27 <test_kmalloc_firstfit2+0x71f>
f011da10:	83 ec 04             	sub    $0x4,%esp
f011da13:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011da18:	68 ca 03 00 00       	push   $0x3ca
f011da1d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da22:	e8 d4 27 fe ff       	call   f01001fb <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011da27:	e8 93 ee fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011da2c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da2f:	e8 08 63 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da34:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011da37:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011da3d:	83 ec 0c             	sub    $0xc,%esp
f011da40:	50                   	push   %eax
f011da41:	e8 7a 9e fe ff       	call   f01078c0 <kfree>
f011da46:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da49:	e8 ee 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da4e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da51:	74 17                	je     f011da6a <test_kmalloc_firstfit2+0x762>
f011da53:	83 ec 04             	sub    $0x4,%esp
f011da56:	68 74 ac 13 f0       	push   $0xf013ac74
f011da5b:	68 d0 03 00 00       	push   $0x3d0
f011da60:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da65:	e8 91 27 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011da6a:	e8 50 ee fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011da6f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011da72:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da77:	74 17                	je     f011da90 <test_kmalloc_firstfit2+0x788>
f011da79:	83 ec 04             	sub    $0x4,%esp
f011da7c:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011da81:	68 d1 03 00 00       	push   $0x3d1
f011da86:	68 5a ac 13 f0       	push   $0xf013ac5a
f011da8b:	e8 6b 27 fe ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011da90:	e8 2a ee fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011da95:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da98:	e8 9f 62 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011da9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011daa0:	83 ec 0c             	sub    $0xc,%esp
f011daa3:	68 00 fc 2f 00       	push   $0x2ffc00
f011daa8:	e8 51 9d fe ff       	call   f01077fe <kmalloc>
f011daad:	83 c4 10             	add    $0x10,%esp
f011dab0:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dab6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dabc:	89 c1                	mov    %eax,%ecx
f011dabe:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011dac5:	10 00 00 
f011dac8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011dace:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dad3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011dad9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011dadf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dae4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011daea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011daf0:	29 d0                	sub    %edx,%eax
f011daf2:	89 c3                	mov    %eax,%ebx
f011daf4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011dafb:	10 00 00 
f011dafe:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db03:	0f b6 d0             	movzbl %al,%edx
f011db06:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011db0c:	01 d0                	add    %edx,%eax
f011db0e:	48                   	dec    %eax
f011db0f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011db15:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011db1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011db20:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011db26:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011db2c:	29 d0                	sub    %edx,%eax
f011db2e:	01 c3                	add    %eax,%ebx
f011db30:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011db37:	10 00 00 
f011db3a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011db3f:	0f b6 c0             	movzbl %al,%eax
f011db42:	c1 e0 04             	shl    $0x4,%eax
f011db45:	89 c2                	mov    %eax,%edx
f011db47:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011db4d:	01 d0                	add    %edx,%eax
f011db4f:	48                   	dec    %eax
f011db50:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011db56:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011db5c:	ba 00 00 00 00       	mov    $0x0,%edx
f011db61:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011db67:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011db6d:	29 d0                	sub    %edx,%eax
f011db6f:	01 d8                	add    %ebx,%eax
f011db71:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011db76:	39 c1                	cmp    %eax,%ecx
f011db78:	74 17                	je     f011db91 <test_kmalloc_firstfit2+0x889>
f011db7a:	83 ec 04             	sub    $0x4,%esp
f011db7d:	68 74 b0 13 f0       	push   $0xf013b074
f011db82:	68 d7 03 00 00       	push   $0x3d7
f011db87:	68 5a ac 13 f0       	push   $0xf013ac5a
f011db8c:	e8 6a 26 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db91:	e8 a6 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011db96:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011db99:	74 17                	je     f011dbb2 <test_kmalloc_firstfit2+0x8aa>
f011db9b:	83 ec 04             	sub    $0x4,%esp
f011db9e:	68 74 ac 13 f0       	push   $0xf013ac74
f011dba3:	68 d8 03 00 00       	push   $0x3d8
f011dba8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dbad:	e8 49 26 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dbb2:	e8 08 ed fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dbb7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dbba:	29 c2                	sub    %eax,%edx
f011dbbc:	89 d0                	mov    %edx,%eax
f011dbbe:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dbc3:	74 17                	je     f011dbdc <test_kmalloc_firstfit2+0x8d4>
f011dbc5:	83 ec 04             	sub    $0x4,%esp
f011dbc8:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011dbcd:	68 d9 03 00 00       	push   $0x3d9
f011dbd2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dbd7:	e8 1f 26 fe ff       	call   f01001fb <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011dbdc:	e8 de ec fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dbe1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dbe4:	e8 53 61 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dbe9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011dbec:	83 ec 0c             	sub    $0xc,%esp
f011dbef:	68 00 18 20 00       	push   $0x201800
f011dbf4:	e8 05 9c fe ff       	call   f01077fe <kmalloc>
f011dbf9:	83 c4 10             	add    $0x10,%esp
f011dbfc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dc02:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011dc08:	89 c1                	mov    %eax,%ecx
f011dc0a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011dc11:	10 00 00 
f011dc14:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dc1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc1f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011dc25:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc30:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011dc36:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dc3c:	29 d0                	sub    %edx,%eax
f011dc3e:	89 c3                	mov    %eax,%ebx
f011dc40:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011dc47:	10 00 00 
f011dc4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dc4f:	0f b6 d0             	movzbl %al,%edx
f011dc52:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dc58:	01 d0                	add    %edx,%eax
f011dc5a:	48                   	dec    %eax
f011dc5b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011dc61:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dc67:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc6c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011dc72:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011dc78:	29 d0                	sub    %edx,%eax
f011dc7a:	01 c3                	add    %eax,%ebx
f011dc7c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011dc83:	10 00 00 
f011dc86:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dc8b:	0f b6 c0             	movzbl %al,%eax
f011dc8e:	c1 e0 04             	shl    $0x4,%eax
f011dc91:	89 c2                	mov    %eax,%edx
f011dc93:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011dc99:	01 d0                	add    %edx,%eax
f011dc9b:	48                   	dec    %eax
f011dc9c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011dca2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dca8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcad:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011dcb3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011dcb9:	29 d0                	sub    %edx,%eax
f011dcbb:	01 d8                	add    %ebx,%eax
f011dcbd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011dcc2:	39 c1                	cmp    %eax,%ecx
f011dcc4:	74 17                	je     f011dcdd <test_kmalloc_firstfit2+0x9d5>
f011dcc6:	83 ec 04             	sub    $0x4,%esp
f011dcc9:	68 74 b0 13 f0       	push   $0xf013b074
f011dcce:	68 df 03 00 00       	push   $0x3df
f011dcd3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dcd8:	e8 1e 25 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcdd:	e8 5a 60 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dce2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dce5:	74 17                	je     f011dcfe <test_kmalloc_firstfit2+0x9f6>
f011dce7:	83 ec 04             	sub    $0x4,%esp
f011dcea:	68 74 ac 13 f0       	push   $0xf013ac74
f011dcef:	68 e0 03 00 00       	push   $0x3e0
f011dcf4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dcf9:	e8 fd 24 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dcfe:	e8 bc eb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dd03:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dd06:	29 c2                	sub    %eax,%edx
f011dd08:	89 d0                	mov    %edx,%eax
f011dd0a:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dd0f:	74 17                	je     f011dd28 <test_kmalloc_firstfit2+0xa20>
f011dd11:	83 ec 04             	sub    $0x4,%esp
f011dd14:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011dd19:	68 e1 03 00 00       	push   $0x3e1
f011dd1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd23:	e8 d3 24 fe ff       	call   f01001fb <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd28:	e8 92 eb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dd2d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd30:	e8 07 60 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd35:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011dd38:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011dd3e:	83 ec 0c             	sub    $0xc,%esp
f011dd41:	50                   	push   %eax
f011dd42:	e8 79 9b fe ff       	call   f01078c0 <kfree>
f011dd47:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd4a:	e8 ed 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dd52:	74 17                	je     f011dd6b <test_kmalloc_firstfit2+0xa63>
f011dd54:	83 ec 04             	sub    $0x4,%esp
f011dd57:	68 74 ac 13 f0       	push   $0xf013ac74
f011dd5c:	68 e7 03 00 00       	push   $0x3e7
f011dd61:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd66:	e8 90 24 fe ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011dd6b:	e8 4f eb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dd70:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dd73:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dd78:	74 17                	je     f011dd91 <test_kmalloc_firstfit2+0xa89>
f011dd7a:	83 ec 04             	sub    $0x4,%esp
f011dd7d:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011dd82:	68 e8 03 00 00       	push   $0x3e8
f011dd87:	68 5a ac 13 f0       	push   $0xf013ac5a
f011dd8c:	e8 6a 24 fe ff       	call   f01001fb <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011dd91:	e8 29 eb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011dd96:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd99:	e8 9e 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011dd9e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011dda1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011dda7:	83 ec 0c             	sub    $0xc,%esp
f011ddaa:	50                   	push   %eax
f011ddab:	e8 10 9b fe ff       	call   f01078c0 <kfree>
f011ddb0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ddb3:	e8 07 eb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ddb8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ddbb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ddc0:	74 17                	je     f011ddd9 <test_kmalloc_firstfit2+0xad1>
f011ddc2:	83 ec 04             	sub    $0x4,%esp
f011ddc5:	68 b7 b0 13 f0       	push   $0xf013b0b7
f011ddca:	68 ee 03 00 00       	push   $0x3ee
f011ddcf:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ddd4:	e8 22 24 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddd9:	e8 5e 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ddde:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dde1:	74 17                	je     f011ddfa <test_kmalloc_firstfit2+0xaf2>
f011dde3:	83 ec 04             	sub    $0x4,%esp
f011dde6:	68 74 ac 13 f0       	push   $0xf013ac74
f011ddeb:	68 ef 03 00 00       	push   $0x3ef
f011ddf0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ddf5:	e8 01 24 fe ff       	call   f01001fb <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddfa:	e8 c0 ea fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ddff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de02:	e8 35 5f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011de07:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011de0a:	83 ec 0c             	sub    $0xc,%esp
f011de0d:	68 00 fc 4f 00       	push   $0x4ffc00
f011de12:	e8 e7 99 fe ff       	call   f01077fe <kmalloc>
f011de17:	83 c4 10             	add    $0x10,%esp
f011de1a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011de20:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011de26:	89 c1                	mov    %eax,%ecx
f011de28:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011de2f:	10 00 00 
f011de32:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011de38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de3d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011de43:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de49:	ba 00 00 00 00       	mov    $0x0,%edx
f011de4e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011de54:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011de5a:	29 d0                	sub    %edx,%eax
f011de5c:	89 c3                	mov    %eax,%ebx
f011de5e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011de65:	10 00 00 
f011de68:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011de6d:	0f b6 d0             	movzbl %al,%edx
f011de70:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011de76:	01 d0                	add    %edx,%eax
f011de78:	48                   	dec    %eax
f011de79:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011de7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de85:	ba 00 00 00 00       	mov    $0x0,%edx
f011de8a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011de90:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de96:	29 d0                	sub    %edx,%eax
f011de98:	01 c3                	add    %eax,%ebx
f011de9a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011dea1:	10 00 00 
f011dea4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dea9:	0f b6 c0             	movzbl %al,%eax
f011deac:	c1 e0 04             	shl    $0x4,%eax
f011deaf:	89 c2                	mov    %eax,%edx
f011deb1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011deb7:	01 d0                	add    %edx,%eax
f011deb9:	48                   	dec    %eax
f011deba:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011dec0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dec6:	ba 00 00 00 00       	mov    $0x0,%edx
f011decb:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ded1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ded7:	29 d0                	sub    %edx,%eax
f011ded9:	01 d8                	add    %ebx,%eax
f011dedb:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011dee0:	39 c1                	cmp    %eax,%ecx
f011dee2:	74 17                	je     f011defb <test_kmalloc_firstfit2+0xbf3>
f011dee4:	83 ec 04             	sub    $0x4,%esp
f011dee7:	68 74 b0 13 f0       	push   $0xf013b074
f011deec:	68 f5 03 00 00       	push   $0x3f5
f011def1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011def6:	e8 00 23 fe ff       	call   f01001fb <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011defb:	e8 3c 5e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df00:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011df03:	74 17                	je     f011df1c <test_kmalloc_firstfit2+0xc14>
f011df05:	83 ec 04             	sub    $0x4,%esp
f011df08:	68 74 ac 13 f0       	push   $0xf013ac74
f011df0d:	68 f6 03 00 00       	push   $0x3f6
f011df12:	68 5a ac 13 f0       	push   $0xf013ac5a
f011df17:	e8 df 22 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011df1c:	e8 9e e9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011df21:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011df24:	29 c2                	sub    %eax,%edx
f011df26:	89 d0                	mov    %edx,%eax
f011df28:	3d 00 05 00 00       	cmp    $0x500,%eax
f011df2d:	74 17                	je     f011df46 <test_kmalloc_firstfit2+0xc3e>
f011df2f:	83 ec 04             	sub    $0x4,%esp
f011df32:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011df37:	68 f7 03 00 00       	push   $0x3f7
f011df3c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011df41:	e8 b5 22 fe ff       	call   f01001fb <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011df46:	e8 74 e9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011df4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df4e:	e8 e9 5d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011df53:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011df56:	83 ec 0c             	sub    $0xc,%esp
f011df59:	68 00 fc 2f 00       	push   $0x2ffc00
f011df5e:	e8 9b 98 fe ff       	call   f01077fe <kmalloc>
f011df63:	83 c4 10             	add    $0x10,%esp
f011df66:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011df6c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011df72:	89 c1                	mov    %eax,%ecx
f011df74:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011df7b:	10 00 00 
f011df7e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011df84:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df89:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011df8f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011df95:	ba 00 00 00 00       	mov    $0x0,%edx
f011df9a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011dfa0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dfa6:	29 d0                	sub    %edx,%eax
f011dfa8:	89 c3                	mov    %eax,%ebx
f011dfaa:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011dfb1:	10 00 00 
f011dfb4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dfb9:	0f b6 d0             	movzbl %al,%edx
f011dfbc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011dfc2:	01 d0                	add    %edx,%eax
f011dfc4:	48                   	dec    %eax
f011dfc5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011dfcb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfd1:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfd6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011dfdc:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dfe2:	29 d0                	sub    %edx,%eax
f011dfe4:	01 c3                	add    %eax,%ebx
f011dfe6:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011dfed:	10 00 00 
f011dff0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011dff5:	0f b6 c0             	movzbl %al,%eax
f011dff8:	c1 e0 04             	shl    $0x4,%eax
f011dffb:	89 c2                	mov    %eax,%edx
f011dffd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e003:	01 d0                	add    %edx,%eax
f011e005:	48                   	dec    %eax
f011e006:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011e00c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e012:	ba 00 00 00 00       	mov    $0x0,%edx
f011e017:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011e01d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e023:	29 d0                	sub    %edx,%eax
f011e025:	01 d8                	add    %ebx,%eax
f011e027:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e02c:	39 c1                	cmp    %eax,%ecx
f011e02e:	74 17                	je     f011e047 <test_kmalloc_firstfit2+0xd3f>
f011e030:	83 ec 04             	sub    $0x4,%esp
f011e033:	68 74 b0 13 f0       	push   $0xf013b074
f011e038:	68 05 04 00 00       	push   $0x405
f011e03d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e042:	e8 b4 21 fe ff       	call   f01001fb <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e047:	e8 f0 5c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e04c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e04f:	74 17                	je     f011e068 <test_kmalloc_firstfit2+0xd60>
f011e051:	83 ec 04             	sub    $0x4,%esp
f011e054:	68 74 ac 13 f0       	push   $0xf013ac74
f011e059:	68 06 04 00 00       	push   $0x406
f011e05e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e063:	e8 93 21 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e068:	e8 52 e8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e06d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e070:	29 c2                	sub    %eax,%edx
f011e072:	89 d0                	mov    %edx,%eax
f011e074:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e079:	74 17                	je     f011e092 <test_kmalloc_firstfit2+0xd8a>
f011e07b:	83 ec 04             	sub    $0x4,%esp
f011e07e:	68 a4 b0 13 f0       	push   $0xf013b0a4
f011e083:	68 07 04 00 00       	push   $0x407
f011e088:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e08d:	e8 69 21 fe ff       	call   f01001fb <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e092:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011e099:	10 00 00 
f011e09c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e0a2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e0a7:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011e0ad:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e0b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b8:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011e0be:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e0c4:	29 d0                	sub    %edx,%eax
f011e0c6:	89 c1                	mov    %eax,%ecx
f011e0c8:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011e0cf:	10 00 00 
f011e0d2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e0d7:	0f b6 d0             	movzbl %al,%edx
f011e0da:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e0e0:	01 d0                	add    %edx,%eax
f011e0e2:	48                   	dec    %eax
f011e0e3:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011e0e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e0ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0f4:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011e0fa:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e100:	29 d0                	sub    %edx,%eax
f011e102:	01 c1                	add    %eax,%ecx
f011e104:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011e10b:	10 00 00 
f011e10e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e113:	0f b6 c0             	movzbl %al,%eax
f011e116:	c1 e0 04             	shl    $0x4,%eax
f011e119:	89 c2                	mov    %eax,%edx
f011e11b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e121:	01 d0                	add    %edx,%eax
f011e123:	48                   	dec    %eax
f011e124:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011e12a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e130:	ba 00 00 00 00       	mov    $0x0,%edx
f011e135:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011e13b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e141:	29 d0                	sub    %edx,%eax
f011e143:	01 c8                	add    %ecx,%eax
f011e145:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e14a:	29 c2                	sub    %eax,%edx
f011e14c:	89 d0                	mov    %edx,%eax
f011e14e:	83 ec 0c             	sub    $0xc,%esp
f011e151:	50                   	push   %eax
f011e152:	e8 a7 96 fe ff       	call   f01077fe <kmalloc>
f011e157:	83 c4 10             	add    $0x10,%esp
f011e15a:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e160:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e166:	85 c0                	test   %eax,%eax
f011e168:	74 17                	je     f011e181 <test_kmalloc_firstfit2+0xe79>
f011e16a:	83 ec 04             	sub    $0x4,%esp
f011e16d:	68 a4 b1 13 f0       	push   $0xf013b1a4
f011e172:	68 0d 04 00 00       	push   $0x40d
f011e177:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e17c:	e8 7a 20 fe ff       	call   f01001fb <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e181:	83 ec 0c             	sub    $0xc,%esp
f011e184:	68 e4 b2 13 f0       	push   $0xf013b2e4
f011e189:	e8 f4 2a fe ff       	call   f0100c82 <cprintf>
f011e18e:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e191:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e196:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e199:	5b                   	pop    %ebx
f011e19a:	5f                   	pop    %edi
f011e19b:	5d                   	pop    %ebp
f011e19c:	c3                   	ret    

f011e19d <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e19d:	55                   	push   %ebp
f011e19e:	89 e5                	mov    %esp,%ebp
f011e1a0:	57                   	push   %edi
f011e1a1:	53                   	push   %ebx
f011e1a2:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011e1a8:	83 ec 0c             	sub    $0xc,%esp
f011e1ab:	68 9c ab 13 f0       	push   $0xf013ab9c
f011e1b0:	e8 cd 2a fe ff       	call   f0100c82 <cprintf>
f011e1b5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e1b8:	83 ec 0c             	sub    $0xc,%esp
f011e1bb:	68 cc ab 13 f0       	push   $0xf013abcc
f011e1c0:	e8 bd 2a fe ff       	call   f0100c82 <cprintf>
f011e1c5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e1c8:	83 ec 0c             	sub    $0xc,%esp
f011e1cb:	68 9c ab 13 f0       	push   $0xf013ab9c
f011e1d0:	e8 ad 2a fe ff       	call   f0100c82 <cprintf>
f011e1d5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e1d8:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011e1de:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e1e3:	b8 00 00 00 00       	mov    $0x0,%eax
f011e1e8:	89 d7                	mov    %edx,%edi
f011e1ea:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e1ec:	e8 ce e6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e1f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e1f4:	e8 43 5b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e1f9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e1fc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e203:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e20a:	eb 1f                	jmp    f011e22b <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e20c:	83 ec 0c             	sub    $0xc,%esp
f011e20f:	68 00 00 20 00       	push   $0x200000
f011e214:	e8 e5 95 fe ff       	call   f01077fe <kmalloc>
f011e219:	83 c4 10             	add    $0x10,%esp
f011e21c:	89 c2                	mov    %eax,%edx
f011e21e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e221:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e228:	ff 45 f4             	incl   -0xc(%ebp)
f011e22b:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e22f:	7e db                	jle    f011e20c <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e231:	83 ec 0c             	sub    $0xc,%esp
f011e234:	68 00 b0 1f 00       	push   $0x1fb000
f011e239:	e8 c0 95 fe ff       	call   f01077fe <kmalloc>
f011e23e:	83 c4 10             	add    $0x10,%esp
f011e241:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e247:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e24d:	89 c1                	mov    %eax,%ecx
f011e24f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e256:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e259:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e25e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e261:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e264:	ba 00 00 00 00       	mov    $0x0,%edx
f011e269:	f7 75 e4             	divl   -0x1c(%ebp)
f011e26c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e26f:	29 d0                	sub    %edx,%eax
f011e271:	89 c3                	mov    %eax,%ebx
f011e273:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e27a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e27f:	0f b6 d0             	movzbl %al,%edx
f011e282:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e285:	01 d0                	add    %edx,%eax
f011e287:	48                   	dec    %eax
f011e288:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e28b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e28e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e293:	f7 75 dc             	divl   -0x24(%ebp)
f011e296:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e299:	29 d0                	sub    %edx,%eax
f011e29b:	01 c3                	add    %eax,%ebx
f011e29d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e2a4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e2a9:	0f b6 c0             	movzbl %al,%eax
f011e2ac:	c1 e0 04             	shl    $0x4,%eax
f011e2af:	89 c2                	mov    %eax,%edx
f011e2b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e2b4:	01 d0                	add    %edx,%eax
f011e2b6:	48                   	dec    %eax
f011e2b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e2ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2c2:	f7 75 d4             	divl   -0x2c(%ebp)
f011e2c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2c8:	29 d0                	sub    %edx,%eax
f011e2ca:	01 d8                	add    %ebx,%eax
f011e2cc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e2d1:	39 c1                	cmp    %eax,%ecx
f011e2d3:	0f 85 c0 04 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e2d9:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e2df:	89 c1                	mov    %eax,%ecx
f011e2e1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e2e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e2eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e2f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e2f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2fb:	f7 75 cc             	divl   -0x34(%ebp)
f011e2fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e301:	29 d0                	sub    %edx,%eax
f011e303:	89 c3                	mov    %eax,%ebx
f011e305:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e30c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e311:	0f b6 d0             	movzbl %al,%edx
f011e314:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e317:	01 d0                	add    %edx,%eax
f011e319:	48                   	dec    %eax
f011e31a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e31d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e320:	ba 00 00 00 00       	mov    $0x0,%edx
f011e325:	f7 75 c4             	divl   -0x3c(%ebp)
f011e328:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e32b:	29 d0                	sub    %edx,%eax
f011e32d:	01 c3                	add    %eax,%ebx
f011e32f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e336:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e33b:	0f b6 c0             	movzbl %al,%eax
f011e33e:	c1 e0 04             	shl    $0x4,%eax
f011e341:	89 c2                	mov    %eax,%edx
f011e343:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e346:	01 d0                	add    %edx,%eax
f011e348:	48                   	dec    %eax
f011e349:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e34c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e34f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e354:	f7 75 bc             	divl   -0x44(%ebp)
f011e357:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e35a:	29 d0                	sub    %edx,%eax
f011e35c:	01 d8                	add    %ebx,%eax
f011e35e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e363:	39 c1                	cmp    %eax,%ecx
f011e365:	0f 85 2e 04 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e36b:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011e371:	89 c1                	mov    %eax,%ecx
f011e373:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e37a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e37d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e382:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e385:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e388:	ba 00 00 00 00       	mov    $0x0,%edx
f011e38d:	f7 75 b4             	divl   -0x4c(%ebp)
f011e390:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e393:	29 d0                	sub    %edx,%eax
f011e395:	89 c3                	mov    %eax,%ebx
f011e397:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e39e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3a3:	0f b6 d0             	movzbl %al,%edx
f011e3a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e3a9:	01 d0                	add    %edx,%eax
f011e3ab:	48                   	dec    %eax
f011e3ac:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e3af:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3b7:	f7 75 ac             	divl   -0x54(%ebp)
f011e3ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3bd:	29 d0                	sub    %edx,%eax
f011e3bf:	01 c3                	add    %eax,%ebx
f011e3c1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e3c8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e3cd:	0f b6 c0             	movzbl %al,%eax
f011e3d0:	c1 e0 04             	shl    $0x4,%eax
f011e3d3:	89 c2                	mov    %eax,%edx
f011e3d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e3d8:	01 d0                	add    %edx,%eax
f011e3da:	48                   	dec    %eax
f011e3db:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e3de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e3e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3e6:	f7 75 a4             	divl   -0x5c(%ebp)
f011e3e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e3ec:	29 d0                	sub    %edx,%eax
f011e3ee:	01 d8                	add    %ebx,%eax
f011e3f0:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e3f5:	39 c1                	cmp    %eax,%ecx
f011e3f7:	0f 85 9c 03 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e3fd:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e403:	89 c1                	mov    %eax,%ecx
f011e405:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e40c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e40f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e414:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e417:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e41a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e41f:	f7 75 9c             	divl   -0x64(%ebp)
f011e422:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e425:	29 d0                	sub    %edx,%eax
f011e427:	89 c3                	mov    %eax,%ebx
f011e429:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e430:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e435:	0f b6 d0             	movzbl %al,%edx
f011e438:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e43b:	01 d0                	add    %edx,%eax
f011e43d:	48                   	dec    %eax
f011e43e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e441:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e444:	ba 00 00 00 00       	mov    $0x0,%edx
f011e449:	f7 75 94             	divl   -0x6c(%ebp)
f011e44c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e44f:	29 d0                	sub    %edx,%eax
f011e451:	01 c3                	add    %eax,%ebx
f011e453:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e45a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e45f:	0f b6 c0             	movzbl %al,%eax
f011e462:	c1 e0 04             	shl    $0x4,%eax
f011e465:	89 c2                	mov    %eax,%edx
f011e467:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e46a:	01 d0                	add    %edx,%eax
f011e46c:	48                   	dec    %eax
f011e46d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e470:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e473:	ba 00 00 00 00       	mov    $0x0,%edx
f011e478:	f7 75 8c             	divl   -0x74(%ebp)
f011e47b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e47e:	29 d0                	sub    %edx,%eax
f011e480:	01 d8                	add    %ebx,%eax
f011e482:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e487:	39 c1                	cmp    %eax,%ecx
f011e489:	0f 85 0a 03 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e48f:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011e495:	89 c1                	mov    %eax,%ecx
f011e497:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e49e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e4a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4a6:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e4a9:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4b1:	f7 75 84             	divl   -0x7c(%ebp)
f011e4b4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e4b7:	29 d0                	sub    %edx,%eax
f011e4b9:	89 c3                	mov    %eax,%ebx
f011e4bb:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e4c2:	10 00 00 
f011e4c5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e4ca:	0f b6 d0             	movzbl %al,%edx
f011e4cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e4d3:	01 d0                	add    %edx,%eax
f011e4d5:	48                   	dec    %eax
f011e4d6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e4dc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e4ed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e4f3:	29 d0                	sub    %edx,%eax
f011e4f5:	01 c3                	add    %eax,%ebx
f011e4f7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e4fe:	10 00 00 
f011e501:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e506:	0f b6 c0             	movzbl %al,%eax
f011e509:	c1 e0 04             	shl    $0x4,%eax
f011e50c:	89 c2                	mov    %eax,%edx
f011e50e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e514:	01 d0                	add    %edx,%eax
f011e516:	48                   	dec    %eax
f011e517:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e51d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e523:	ba 00 00 00 00       	mov    $0x0,%edx
f011e528:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e52e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e534:	29 d0                	sub    %edx,%eax
f011e536:	01 d8                	add    %ebx,%eax
f011e538:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e53d:	39 c1                	cmp    %eax,%ecx
f011e53f:	0f 85 54 02 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e545:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011e54b:	89 c1                	mov    %eax,%ecx
f011e54d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e554:	10 00 00 
f011e557:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e55d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e562:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e568:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e56e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e573:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e579:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e57f:	29 d0                	sub    %edx,%eax
f011e581:	89 c3                	mov    %eax,%ebx
f011e583:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e58a:	10 00 00 
f011e58d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e592:	0f b6 d0             	movzbl %al,%edx
f011e595:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e59b:	01 d0                	add    %edx,%eax
f011e59d:	48                   	dec    %eax
f011e59e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e5a4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e5aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5af:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e5b5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e5bb:	29 d0                	sub    %edx,%eax
f011e5bd:	01 c3                	add    %eax,%ebx
f011e5bf:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e5c6:	10 00 00 
f011e5c9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e5ce:	0f b6 c0             	movzbl %al,%eax
f011e5d1:	c1 e0 04             	shl    $0x4,%eax
f011e5d4:	89 c2                	mov    %eax,%edx
f011e5d6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e5dc:	01 d0                	add    %edx,%eax
f011e5de:	48                   	dec    %eax
f011e5df:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e5e5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e5eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5f0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e5f6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e5fc:	29 d0                	sub    %edx,%eax
f011e5fe:	01 d8                	add    %ebx,%eax
f011e600:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e605:	39 c1                	cmp    %eax,%ecx
f011e607:	0f 85 8c 01 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e60d:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e613:	89 c1                	mov    %eax,%ecx
f011e615:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e61c:	10 00 00 
f011e61f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e625:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e62a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e630:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e636:	ba 00 00 00 00       	mov    $0x0,%edx
f011e63b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e641:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e647:	29 d0                	sub    %edx,%eax
f011e649:	89 c3                	mov    %eax,%ebx
f011e64b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e652:	10 00 00 
f011e655:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e65a:	0f b6 d0             	movzbl %al,%edx
f011e65d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e663:	01 d0                	add    %edx,%eax
f011e665:	48                   	dec    %eax
f011e666:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e66c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e672:	ba 00 00 00 00       	mov    $0x0,%edx
f011e677:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e67d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e683:	29 d0                	sub    %edx,%eax
f011e685:	01 c3                	add    %eax,%ebx
f011e687:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e68e:	10 00 00 
f011e691:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e696:	0f b6 c0             	movzbl %al,%eax
f011e699:	c1 e0 04             	shl    $0x4,%eax
f011e69c:	89 c2                	mov    %eax,%edx
f011e69e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e6a4:	01 d0                	add    %edx,%eax
f011e6a6:	48                   	dec    %eax
f011e6a7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e6ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6b8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e6be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e6c4:	29 d0                	sub    %edx,%eax
f011e6c6:	01 d8                	add    %ebx,%eax
f011e6c8:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e6cd:	39 c1                	cmp    %eax,%ecx
f011e6cf:	0f 85 c4 00 00 00    	jne    f011e799 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e6d5:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e6db:	89 c1                	mov    %eax,%ecx
f011e6dd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e6e4:	10 00 00 
f011e6e7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e6ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6f2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e6f8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e6fe:	ba 00 00 00 00       	mov    $0x0,%edx
f011e703:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e709:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e70f:	29 d0                	sub    %edx,%eax
f011e711:	89 c3                	mov    %eax,%ebx
f011e713:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e71a:	10 00 00 
f011e71d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e722:	0f b6 d0             	movzbl %al,%edx
f011e725:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e72b:	01 d0                	add    %edx,%eax
f011e72d:	48                   	dec    %eax
f011e72e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e734:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e73a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e73f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e745:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e74b:	29 d0                	sub    %edx,%eax
f011e74d:	01 c3                	add    %eax,%ebx
f011e74f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e756:	10 00 00 
f011e759:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e75e:	0f b6 c0             	movzbl %al,%eax
f011e761:	c1 e0 04             	shl    $0x4,%eax
f011e764:	89 c2                	mov    %eax,%edx
f011e766:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e76c:	01 d0                	add    %edx,%eax
f011e76e:	48                   	dec    %eax
f011e76f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e775:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e77b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e780:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e786:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e78c:	29 d0                	sub    %edx,%eax
f011e78e:	01 d8                	add    %ebx,%eax
f011e790:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e795:	39 c1                	cmp    %eax,%ecx
f011e797:	74 17                	je     f011e7b0 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e799:	83 ec 04             	sub    $0x4,%esp
f011e79c:	68 30 b3 13 f0       	push   $0xf013b330
f011e7a1:	68 31 04 00 00       	push   $0x431
f011e7a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e7ab:	e8 4b 1a fe ff       	call   f01001fb <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7b0:	e8 87 55 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e7b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e7b8:	74 17                	je     f011e7d1 <test_kmalloc_worstfit+0x634>
f011e7ba:	83 ec 04             	sub    $0x4,%esp
f011e7bd:	68 74 ac 13 f0       	push   $0xf013ac74
f011e7c2:	68 33 04 00 00       	push   $0x433
f011e7c7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e7cc:	e8 2a 1a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e7d1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7d4:	e8 e6 e0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e7d9:	29 c3                	sub    %eax,%ebx
f011e7db:	89 d8                	mov    %ebx,%eax
f011e7dd:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e7e2:	74 17                	je     f011e7fb <test_kmalloc_worstfit+0x65e>
f011e7e4:	83 ec 04             	sub    $0x4,%esp
f011e7e7:	68 17 af 13 f0       	push   $0xf013af17
f011e7ec:	68 34 04 00 00       	push   $0x434
f011e7f1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e7f6:	e8 00 1a fe ff       	call   f01001fb <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e7fb:	e8 bf e0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e800:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e803:	e8 34 55 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e808:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e80b:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e811:	83 ec 0c             	sub    $0xc,%esp
f011e814:	50                   	push   %eax
f011e815:	e8 a6 90 fe ff       	call   f01078c0 <kfree>
f011e81a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e81d:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e823:	83 ec 0c             	sub    $0xc,%esp
f011e826:	50                   	push   %eax
f011e827:	e8 94 90 fe ff       	call   f01078c0 <kfree>
f011e82c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e82f:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e835:	83 ec 0c             	sub    $0xc,%esp
f011e838:	50                   	push   %eax
f011e839:	e8 82 90 fe ff       	call   f01078c0 <kfree>
f011e83e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e841:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e847:	83 ec 0c             	sub    $0xc,%esp
f011e84a:	50                   	push   %eax
f011e84b:	e8 70 90 fe ff       	call   f01078c0 <kfree>
f011e850:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e853:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e859:	83 ec 0c             	sub    $0xc,%esp
f011e85c:	50                   	push   %eax
f011e85d:	e8 5e 90 fe ff       	call   f01078c0 <kfree>
f011e862:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e865:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e86b:	83 ec 0c             	sub    $0xc,%esp
f011e86e:	50                   	push   %eax
f011e86f:	e8 4c 90 fe ff       	call   f01078c0 <kfree>
f011e874:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e877:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e87d:	83 ec 0c             	sub    $0xc,%esp
f011e880:	50                   	push   %eax
f011e881:	e8 3a 90 fe ff       	call   f01078c0 <kfree>
f011e886:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e889:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e88f:	83 ec 0c             	sub    $0xc,%esp
f011e892:	50                   	push   %eax
f011e893:	e8 28 90 fe ff       	call   f01078c0 <kfree>
f011e898:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e89b:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e8a1:	83 ec 0c             	sub    $0xc,%esp
f011e8a4:	50                   	push   %eax
f011e8a5:	e8 16 90 fe ff       	call   f01078c0 <kfree>
f011e8aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e8ad:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e8b3:	83 ec 0c             	sub    $0xc,%esp
f011e8b6:	50                   	push   %eax
f011e8b7:	e8 04 90 fe ff       	call   f01078c0 <kfree>
f011e8bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e8bf:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e8c5:	83 ec 0c             	sub    $0xc,%esp
f011e8c8:	50                   	push   %eax
f011e8c9:	e8 f2 8f fe ff       	call   f01078c0 <kfree>
f011e8ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e8d1:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e8d7:	83 ec 0c             	sub    $0xc,%esp
f011e8da:	50                   	push   %eax
f011e8db:	e8 e0 8f fe ff       	call   f01078c0 <kfree>
f011e8e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e8e3:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e8e9:	83 ec 0c             	sub    $0xc,%esp
f011e8ec:	50                   	push   %eax
f011e8ed:	e8 ce 8f fe ff       	call   f01078c0 <kfree>
f011e8f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e8f5:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e8fb:	83 ec 0c             	sub    $0xc,%esp
f011e8fe:	50                   	push   %eax
f011e8ff:	e8 bc 8f fe ff       	call   f01078c0 <kfree>
f011e904:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e907:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e90d:	83 ec 0c             	sub    $0xc,%esp
f011e910:	50                   	push   %eax
f011e911:	e8 aa 8f fe ff       	call   f01078c0 <kfree>
f011e916:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e919:	e8 1e 54 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e91e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e921:	74 17                	je     f011e93a <test_kmalloc_worstfit+0x79d>
f011e923:	83 ec 04             	sub    $0x4,%esp
f011e926:	68 74 ac 13 f0       	push   $0xf013ac74
f011e92b:	68 4a 04 00 00       	push   $0x44a
f011e930:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e935:	e8 c1 18 fe ff       	call   f01001fb <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e93a:	e8 80 df fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e93f:	89 c2                	mov    %eax,%edx
f011e941:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e944:	29 c2                	sub    %eax,%edx
f011e946:	89 d0                	mov    %edx,%eax
f011e948:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e94d:	74 17                	je     f011e966 <test_kmalloc_worstfit+0x7c9>
f011e94f:	83 ec 04             	sub    $0x4,%esp
f011e952:	68 28 af 13 f0       	push   $0xf013af28
f011e957:	68 4b 04 00 00       	push   $0x44b
f011e95c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011e961:	e8 95 18 fe ff       	call   f01001fb <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e966:	e8 54 df fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011e96b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e96e:	e8 c9 53 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011e973:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e976:	83 ec 0c             	sub    $0xc,%esp
f011e979:	68 00 00 10 00       	push   $0x100000
f011e97e:	e8 7b 8e fe ff       	call   f01077fe <kmalloc>
f011e983:	83 c4 10             	add    $0x10,%esp
f011e986:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e98c:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e993:	10 00 00 
f011e996:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e99c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e9a1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e9a7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e9ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9b2:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e9b8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e9be:	29 d0                	sub    %edx,%eax
f011e9c0:	89 c1                	mov    %eax,%ecx
f011e9c2:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e9c9:	10 00 00 
f011e9cc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011e9d1:	0f b6 d0             	movzbl %al,%edx
f011e9d4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e9da:	01 d0                	add    %edx,%eax
f011e9dc:	48                   	dec    %eax
f011e9dd:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e9e3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9ee:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e9f4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e9fa:	29 d0                	sub    %edx,%eax
f011e9fc:	01 c1                	add    %eax,%ecx
f011e9fe:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011ea05:	10 00 00 
f011ea08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ea0d:	0f b6 c0             	movzbl %al,%eax
f011ea10:	c1 e0 04             	shl    $0x4,%eax
f011ea13:	89 c2                	mov    %eax,%edx
f011ea15:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ea1b:	01 d0                	add    %edx,%eax
f011ea1d:	48                   	dec    %eax
f011ea1e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011ea24:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ea2a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea2f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011ea35:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ea3b:	29 d0                	sub    %edx,%eax
f011ea3d:	01 c8                	add    %ecx,%eax
f011ea3f:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ea45:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea4b:	39 c2                	cmp    %eax,%edx
f011ea4d:	74 17                	je     f011ea66 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011ea4f:	83 ec 04             	sub    $0x4,%esp
f011ea52:	68 74 b3 13 f0       	push   $0xf013b374
f011ea57:	68 52 04 00 00       	push   $0x452
f011ea5c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ea61:	e8 95 17 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea66:	e8 d1 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ea6b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea6e:	74 17                	je     f011ea87 <test_kmalloc_worstfit+0x8ea>
f011ea70:	83 ec 04             	sub    $0x4,%esp
f011ea73:	68 74 ac 13 f0       	push   $0xf013ac74
f011ea78:	68 53 04 00 00       	push   $0x453
f011ea7d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ea82:	e8 74 17 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea87:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea8a:	e8 30 de fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ea8f:	29 c3                	sub    %eax,%ebx
f011ea91:	89 d8                	mov    %ebx,%eax
f011ea93:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ea98:	74 17                	je     f011eab1 <test_kmalloc_worstfit+0x914>
f011ea9a:	83 ec 04             	sub    $0x4,%esp
f011ea9d:	68 92 b1 13 f0       	push   $0xf013b192
f011eaa2:	68 54 04 00 00       	push   $0x454
f011eaa7:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eaac:	e8 4a 17 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eab1:	ff 45 e8             	incl   -0x18(%ebp)
f011eab4:	83 ec 08             	sub    $0x8,%esp
f011eab7:	ff 75 e8             	pushl  -0x18(%ebp)
f011eaba:	68 94 b3 13 f0       	push   $0xf013b394
f011eabf:	e8 be 21 fe ff       	call   f0100c82 <cprintf>
f011eac4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eac7:	e8 f3 dd fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011eacc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eacf:	e8 68 52 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ead4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011ead7:	83 ec 0c             	sub    $0xc,%esp
f011eada:	68 00 00 40 00       	push   $0x400000
f011eadf:	e8 1a 8d fe ff       	call   f01077fe <kmalloc>
f011eae4:	83 c4 10             	add    $0x10,%esp
f011eae7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eaed:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011eaf4:	10 00 00 
f011eaf7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011eafd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eb02:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011eb08:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eb0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb13:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011eb19:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011eb1f:	29 d0                	sub    %edx,%eax
f011eb21:	89 c1                	mov    %eax,%ecx
f011eb23:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011eb2a:	10 00 00 
f011eb2d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb32:	0f b6 d0             	movzbl %al,%edx
f011eb35:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011eb3b:	01 d0                	add    %edx,%eax
f011eb3d:	48                   	dec    %eax
f011eb3e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011eb44:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eb4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011eb55:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eb5b:	29 d0                	sub    %edx,%eax
f011eb5d:	01 c1                	add    %eax,%ecx
f011eb5f:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011eb66:	10 00 00 
f011eb69:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eb6e:	0f b6 c0             	movzbl %al,%eax
f011eb71:	c1 e0 04             	shl    $0x4,%eax
f011eb74:	89 c2                	mov    %eax,%edx
f011eb76:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eb7c:	01 d0                	add    %edx,%eax
f011eb7e:	48                   	dec    %eax
f011eb7f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011eb85:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eb8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb90:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011eb96:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eb9c:	29 d0                	sub    %edx,%eax
f011eb9e:	01 c8                	add    %ecx,%eax
f011eba0:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011eba6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ebac:	39 c2                	cmp    %eax,%edx
f011ebae:	74 17                	je     f011ebc7 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011ebb0:	83 ec 04             	sub    $0x4,%esp
f011ebb3:	68 74 b3 13 f0       	push   $0xf013b374
f011ebb8:	68 5b 04 00 00       	push   $0x45b
f011ebbd:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ebc2:	e8 34 16 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebc7:	e8 70 51 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ebcc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebcf:	74 17                	je     f011ebe8 <test_kmalloc_worstfit+0xa4b>
f011ebd1:	83 ec 04             	sub    $0x4,%esp
f011ebd4:	68 74 ac 13 f0       	push   $0xf013ac74
f011ebd9:	68 5c 04 00 00       	push   $0x45c
f011ebde:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ebe3:	e8 13 16 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebe8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebeb:	e8 cf dc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ebf0:	29 c3                	sub    %eax,%ebx
f011ebf2:	89 d8                	mov    %ebx,%eax
f011ebf4:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ebf9:	74 17                	je     f011ec12 <test_kmalloc_worstfit+0xa75>
f011ebfb:	83 ec 04             	sub    $0x4,%esp
f011ebfe:	68 92 b1 13 f0       	push   $0xf013b192
f011ec03:	68 5d 04 00 00       	push   $0x45d
f011ec08:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ec0d:	e8 e9 15 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec12:	ff 45 e8             	incl   -0x18(%ebp)
f011ec15:	83 ec 08             	sub    $0x8,%esp
f011ec18:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec1b:	68 94 b3 13 f0       	push   $0xf013b394
f011ec20:	e8 5d 20 fe ff       	call   f0100c82 <cprintf>
f011ec25:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec28:	e8 92 dc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ec2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec30:	e8 07 51 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ec35:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ec38:	83 ec 0c             	sub    $0xc,%esp
f011ec3b:	68 00 00 60 00       	push   $0x600000
f011ec40:	e8 b9 8b fe ff       	call   f01077fe <kmalloc>
f011ec45:	83 c4 10             	add    $0x10,%esp
f011ec48:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ec4e:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011ec55:	10 00 00 
f011ec58:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ec5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec63:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011ec69:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ec6f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec74:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011ec7a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ec80:	29 d0                	sub    %edx,%eax
f011ec82:	89 c1                	mov    %eax,%ecx
f011ec84:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011ec8b:	10 00 00 
f011ec8e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ec93:	0f b6 d0             	movzbl %al,%edx
f011ec96:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ec9c:	01 d0                	add    %edx,%eax
f011ec9e:	48                   	dec    %eax
f011ec9f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011eca5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ecab:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecb0:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011ecb6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ecbc:	29 d0                	sub    %edx,%eax
f011ecbe:	01 c1                	add    %eax,%ecx
f011ecc0:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011ecc7:	10 00 00 
f011ecca:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011eccf:	0f b6 c0             	movzbl %al,%eax
f011ecd2:	c1 e0 04             	shl    $0x4,%eax
f011ecd5:	89 c2                	mov    %eax,%edx
f011ecd7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ecdd:	01 d0                	add    %edx,%eax
f011ecdf:	48                   	dec    %eax
f011ece0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011ece6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ecec:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecf1:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011ecf7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ecfd:	29 d0                	sub    %edx,%eax
f011ecff:	01 c8                	add    %ecx,%eax
f011ed01:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ed07:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ed0d:	39 c2                	cmp    %eax,%edx
f011ed0f:	74 17                	je     f011ed28 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011ed11:	83 ec 04             	sub    $0x4,%esp
f011ed14:	68 74 b3 13 f0       	push   $0xf013b374
f011ed19:	68 64 04 00 00       	push   $0x464
f011ed1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed23:	e8 d3 14 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed28:	e8 0f 50 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ed2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed30:	74 17                	je     f011ed49 <test_kmalloc_worstfit+0xbac>
f011ed32:	83 ec 04             	sub    $0x4,%esp
f011ed35:	68 74 ac 13 f0       	push   $0xf013ac74
f011ed3a:	68 65 04 00 00       	push   $0x465
f011ed3f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed44:	e8 b2 14 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ed49:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed4c:	e8 6e db fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ed51:	29 c3                	sub    %eax,%ebx
f011ed53:	89 d8                	mov    %ebx,%eax
f011ed55:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ed5a:	74 17                	je     f011ed73 <test_kmalloc_worstfit+0xbd6>
f011ed5c:	83 ec 04             	sub    $0x4,%esp
f011ed5f:	68 92 b1 13 f0       	push   $0xf013b192
f011ed64:	68 66 04 00 00       	push   $0x466
f011ed69:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ed6e:	e8 88 14 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed73:	ff 45 e8             	incl   -0x18(%ebp)
f011ed76:	83 ec 08             	sub    $0x8,%esp
f011ed79:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed7c:	68 94 b3 13 f0       	push   $0xf013b394
f011ed81:	e8 fc 1e fe ff       	call   f0100c82 <cprintf>
f011ed86:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed89:	e8 31 db fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ed8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed91:	e8 a6 4f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ed96:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ed99:	83 ec 0c             	sub    $0xc,%esp
f011ed9c:	68 00 00 50 00       	push   $0x500000
f011eda1:	e8 58 8a fe ff       	call   f01077fe <kmalloc>
f011eda6:	83 c4 10             	add    $0x10,%esp
f011eda9:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011edaf:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011edb6:	10 00 00 
f011edb9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011edbf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edc4:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011edca:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011edd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd5:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011eddb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ede1:	29 d0                	sub    %edx,%eax
f011ede3:	89 c1                	mov    %eax,%ecx
f011ede5:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011edec:	10 00 00 
f011edef:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011edf4:	0f b6 d0             	movzbl %al,%edx
f011edf7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011edfd:	01 d0                	add    %edx,%eax
f011edff:	48                   	dec    %eax
f011ee00:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011ee06:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ee0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee11:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011ee17:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ee1d:	29 d0                	sub    %edx,%eax
f011ee1f:	01 c1                	add    %eax,%ecx
f011ee21:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011ee28:	10 00 00 
f011ee2b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ee30:	0f b6 c0             	movzbl %al,%eax
f011ee33:	c1 e0 04             	shl    $0x4,%eax
f011ee36:	89 c2                	mov    %eax,%edx
f011ee38:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ee3e:	01 d0                	add    %edx,%eax
f011ee40:	48                   	dec    %eax
f011ee41:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011ee47:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ee4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee52:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011ee58:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ee5e:	29 d0                	sub    %edx,%eax
f011ee60:	01 c8                	add    %ecx,%eax
f011ee62:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ee68:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee6e:	39 c2                	cmp    %eax,%edx
f011ee70:	74 17                	je     f011ee89 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011ee72:	83 ec 04             	sub    $0x4,%esp
f011ee75:	68 74 b3 13 f0       	push   $0xf013b374
f011ee7a:	68 6d 04 00 00       	push   $0x46d
f011ee7f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011ee84:	e8 72 13 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee89:	e8 ae 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ee8e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee91:	74 17                	je     f011eeaa <test_kmalloc_worstfit+0xd0d>
f011ee93:	83 ec 04             	sub    $0x4,%esp
f011ee96:	68 74 ac 13 f0       	push   $0xf013ac74
f011ee9b:	68 6e 04 00 00       	push   $0x46e
f011eea0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eea5:	e8 51 13 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eeaa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eead:	e8 0d da fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011eeb2:	29 c3                	sub    %eax,%ebx
f011eeb4:	89 d8                	mov    %ebx,%eax
f011eeb6:	3d 00 05 00 00       	cmp    $0x500,%eax
f011eebb:	74 17                	je     f011eed4 <test_kmalloc_worstfit+0xd37>
f011eebd:	83 ec 04             	sub    $0x4,%esp
f011eec0:	68 92 b1 13 f0       	push   $0xf013b192
f011eec5:	68 6f 04 00 00       	push   $0x46f
f011eeca:	68 5a ac 13 f0       	push   $0xf013ac5a
f011eecf:	e8 27 13 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eed4:	ff 45 e8             	incl   -0x18(%ebp)
f011eed7:	83 ec 08             	sub    $0x8,%esp
f011eeda:	ff 75 e8             	pushl  -0x18(%ebp)
f011eedd:	68 94 b3 13 f0       	push   $0xf013b394
f011eee2:	e8 9b 1d fe ff       	call   f0100c82 <cprintf>
f011eee7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eeea:	e8 d0 d9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011eeef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eef2:	e8 45 4e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011eef7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011eefa:	83 ec 0c             	sub    $0xc,%esp
f011eefd:	68 00 00 40 00       	push   $0x400000
f011ef02:	e8 f7 88 fe ff       	call   f01077fe <kmalloc>
f011ef07:	83 c4 10             	add    $0x10,%esp
f011ef0a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ef10:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011ef17:	10 00 00 
f011ef1a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ef20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef25:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011ef2b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef36:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011ef3c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef42:	29 d0                	sub    %edx,%eax
f011ef44:	89 c1                	mov    %eax,%ecx
f011ef46:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011ef4d:	10 00 00 
f011ef50:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ef55:	0f b6 d0             	movzbl %al,%edx
f011ef58:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ef5e:	01 d0                	add    %edx,%eax
f011ef60:	48                   	dec    %eax
f011ef61:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011ef67:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ef6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef72:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011ef78:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ef7e:	29 d0                	sub    %edx,%eax
f011ef80:	01 c1                	add    %eax,%ecx
f011ef82:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011ef89:	10 00 00 
f011ef8c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ef91:	0f b6 c0             	movzbl %al,%eax
f011ef94:	c1 e0 04             	shl    $0x4,%eax
f011ef97:	89 c2                	mov    %eax,%edx
f011ef99:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ef9f:	01 d0                	add    %edx,%eax
f011efa1:	48                   	dec    %eax
f011efa2:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011efa8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011efae:	ba 00 00 00 00       	mov    $0x0,%edx
f011efb3:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011efb9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011efbf:	29 d0                	sub    %edx,%eax
f011efc1:	01 c8                	add    %ecx,%eax
f011efc3:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011efc9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efcf:	39 c2                	cmp    %eax,%edx
f011efd1:	74 17                	je     f011efea <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011efd3:	83 ec 04             	sub    $0x4,%esp
f011efd6:	68 74 b3 13 f0       	push   $0xf013b374
f011efdb:	68 76 04 00 00       	push   $0x476
f011efe0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011efe5:	e8 11 12 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efea:	e8 4d 4d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011efef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011eff2:	74 17                	je     f011f00b <test_kmalloc_worstfit+0xe6e>
f011eff4:	83 ec 04             	sub    $0x4,%esp
f011eff7:	68 74 ac 13 f0       	push   $0xf013ac74
f011effc:	68 77 04 00 00       	push   $0x477
f011f001:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f006:	e8 f0 11 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f00b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f00e:	e8 ac d8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f013:	29 c3                	sub    %eax,%ebx
f011f015:	89 d8                	mov    %ebx,%eax
f011f017:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f01c:	74 17                	je     f011f035 <test_kmalloc_worstfit+0xe98>
f011f01e:	83 ec 04             	sub    $0x4,%esp
f011f021:	68 92 b1 13 f0       	push   $0xf013b192
f011f026:	68 78 04 00 00       	push   $0x478
f011f02b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f030:	e8 c6 11 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f035:	ff 45 e8             	incl   -0x18(%ebp)
f011f038:	83 ec 08             	sub    $0x8,%esp
f011f03b:	ff 75 e8             	pushl  -0x18(%ebp)
f011f03e:	68 94 b3 13 f0       	push   $0xf013b394
f011f043:	e8 3a 1c fe ff       	call   f0100c82 <cprintf>
f011f048:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f04b:	e8 6f d8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f050:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f053:	e8 e4 4c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f058:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f05b:	83 ec 0c             	sub    $0xc,%esp
f011f05e:	68 00 00 20 00       	push   $0x200000
f011f063:	e8 96 87 fe ff       	call   f01077fe <kmalloc>
f011f068:	83 c4 10             	add    $0x10,%esp
f011f06b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f071:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011f078:	10 00 00 
f011f07b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011f081:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f086:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011f08c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f092:	ba 00 00 00 00       	mov    $0x0,%edx
f011f097:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011f09d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011f0a3:	29 d0                	sub    %edx,%eax
f011f0a5:	89 c1                	mov    %eax,%ecx
f011f0a7:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011f0ae:	10 00 00 
f011f0b1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f0b6:	0f b6 d0             	movzbl %al,%edx
f011f0b9:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011f0bf:	01 d0                	add    %edx,%eax
f011f0c1:	48                   	dec    %eax
f011f0c2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011f0c8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f0ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0d3:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011f0d9:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011f0df:	29 d0                	sub    %edx,%eax
f011f0e1:	01 c1                	add    %eax,%ecx
f011f0e3:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011f0ea:	10 00 00 
f011f0ed:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f0f2:	0f b6 c0             	movzbl %al,%eax
f011f0f5:	c1 e0 04             	shl    $0x4,%eax
f011f0f8:	89 c2                	mov    %eax,%edx
f011f0fa:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011f100:	01 d0                	add    %edx,%eax
f011f102:	48                   	dec    %eax
f011f103:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011f109:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f10f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f114:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011f11a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011f120:	29 d0                	sub    %edx,%eax
f011f122:	01 c8                	add    %ecx,%eax
f011f124:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f12a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f130:	39 c2                	cmp    %eax,%edx
f011f132:	74 17                	je     f011f14b <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011f134:	83 ec 04             	sub    $0x4,%esp
f011f137:	68 74 b3 13 f0       	push   $0xf013b374
f011f13c:	68 7f 04 00 00       	push   $0x47f
f011f141:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f146:	e8 b0 10 fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f14b:	e8 ec 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f150:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f153:	74 17                	je     f011f16c <test_kmalloc_worstfit+0xfcf>
f011f155:	83 ec 04             	sub    $0x4,%esp
f011f158:	68 74 ac 13 f0       	push   $0xf013ac74
f011f15d:	68 80 04 00 00       	push   $0x480
f011f162:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f167:	e8 8f 10 fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f16c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f16f:	e8 4b d7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f174:	29 c3                	sub    %eax,%ebx
f011f176:	89 d8                	mov    %ebx,%eax
f011f178:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f17d:	74 17                	je     f011f196 <test_kmalloc_worstfit+0xff9>
f011f17f:	83 ec 04             	sub    $0x4,%esp
f011f182:	68 92 b1 13 f0       	push   $0xf013b192
f011f187:	68 81 04 00 00       	push   $0x481
f011f18c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f191:	e8 65 10 fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f196:	ff 45 e8             	incl   -0x18(%ebp)
f011f199:	83 ec 08             	sub    $0x8,%esp
f011f19c:	ff 75 e8             	pushl  -0x18(%ebp)
f011f19f:	68 94 b3 13 f0       	push   $0xf013b394
f011f1a4:	e8 d9 1a fe ff       	call   f0100c82 <cprintf>
f011f1a9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1ac:	e8 0e d7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f1b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1b4:	e8 83 4b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f1b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f1bc:	83 ec 0c             	sub    $0xc,%esp
f011f1bf:	68 00 00 18 00       	push   $0x180000
f011f1c4:	e8 35 86 fe ff       	call   f01077fe <kmalloc>
f011f1c9:	83 c4 10             	add    $0x10,%esp
f011f1cc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f1d2:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011f1d9:	10 00 00 
f011f1dc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011f1e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1e7:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011f1ed:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f1f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1f8:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011f1fe:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011f204:	29 d0                	sub    %edx,%eax
f011f206:	89 c1                	mov    %eax,%ecx
f011f208:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011f20f:	10 00 00 
f011f212:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f217:	0f b6 d0             	movzbl %al,%edx
f011f21a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011f220:	01 d0                	add    %edx,%eax
f011f222:	48                   	dec    %eax
f011f223:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011f229:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f22f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f234:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011f23a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011f240:	29 d0                	sub    %edx,%eax
f011f242:	01 c1                	add    %eax,%ecx
f011f244:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011f24b:	10 00 00 
f011f24e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f253:	0f b6 c0             	movzbl %al,%eax
f011f256:	c1 e0 04             	shl    $0x4,%eax
f011f259:	89 c2                	mov    %eax,%edx
f011f25b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011f261:	01 d0                	add    %edx,%eax
f011f263:	48                   	dec    %eax
f011f264:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011f26a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f270:	ba 00 00 00 00       	mov    $0x0,%edx
f011f275:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011f27b:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011f281:	29 d0                	sub    %edx,%eax
f011f283:	01 c8                	add    %ecx,%eax
f011f285:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f28b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f291:	39 c2                	cmp    %eax,%edx
f011f293:	74 17                	je     f011f2ac <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011f295:	83 ec 04             	sub    $0x4,%esp
f011f298:	68 74 b3 13 f0       	push   $0xf013b374
f011f29d:	68 88 04 00 00       	push   $0x488
f011f2a2:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2a7:	e8 4f 0f fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2ac:	e8 8b 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f2b1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2b4:	74 17                	je     f011f2cd <test_kmalloc_worstfit+0x1130>
f011f2b6:	83 ec 04             	sub    $0x4,%esp
f011f2b9:	68 74 ac 13 f0       	push   $0xf013ac74
f011f2be:	68 89 04 00 00       	push   $0x489
f011f2c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2c8:	e8 2e 0f fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2cd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2d0:	e8 ea d5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f2d5:	29 c3                	sub    %eax,%ebx
f011f2d7:	89 d8                	mov    %ebx,%eax
f011f2d9:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f2de:	74 17                	je     f011f2f7 <test_kmalloc_worstfit+0x115a>
f011f2e0:	83 ec 04             	sub    $0x4,%esp
f011f2e3:	68 92 b1 13 f0       	push   $0xf013b192
f011f2e8:	68 8a 04 00 00       	push   $0x48a
f011f2ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f2f2:	e8 04 0f fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2f7:	ff 45 e8             	incl   -0x18(%ebp)
f011f2fa:	83 ec 08             	sub    $0x8,%esp
f011f2fd:	ff 75 e8             	pushl  -0x18(%ebp)
f011f300:	68 94 b3 13 f0       	push   $0xf013b394
f011f305:	e8 78 19 fe ff       	call   f0100c82 <cprintf>
f011f30a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f30d:	e8 ad d5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f312:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f315:	e8 22 4a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f31a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f31d:	83 ec 0c             	sub    $0xc,%esp
f011f320:	68 00 00 08 00       	push   $0x80000
f011f325:	e8 d4 84 fe ff       	call   f01077fe <kmalloc>
f011f32a:	83 c4 10             	add    $0x10,%esp
f011f32d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f333:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011f33a:	10 00 00 
f011f33d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011f343:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f348:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011f34e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f354:	ba 00 00 00 00       	mov    $0x0,%edx
f011f359:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011f35f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011f365:	29 d0                	sub    %edx,%eax
f011f367:	89 c1                	mov    %eax,%ecx
f011f369:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011f370:	10 00 00 
f011f373:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f378:	0f b6 d0             	movzbl %al,%edx
f011f37b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f381:	01 d0                	add    %edx,%eax
f011f383:	48                   	dec    %eax
f011f384:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011f38a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f390:	ba 00 00 00 00       	mov    $0x0,%edx
f011f395:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011f39b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011f3a1:	29 d0                	sub    %edx,%eax
f011f3a3:	01 c1                	add    %eax,%ecx
f011f3a5:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011f3ac:	10 00 00 
f011f3af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f3b4:	0f b6 c0             	movzbl %al,%eax
f011f3b7:	c1 e0 04             	shl    $0x4,%eax
f011f3ba:	89 c2                	mov    %eax,%edx
f011f3bc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011f3c2:	01 d0                	add    %edx,%eax
f011f3c4:	48                   	dec    %eax
f011f3c5:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011f3cb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f3d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3d6:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011f3dc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f3e2:	29 d0                	sub    %edx,%eax
f011f3e4:	01 c8                	add    %ecx,%eax
f011f3e6:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f3ec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f3f2:	39 c2                	cmp    %eax,%edx
f011f3f4:	74 17                	je     f011f40d <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011f3f6:	83 ec 04             	sub    $0x4,%esp
f011f3f9:	68 74 b3 13 f0       	push   $0xf013b374
f011f3fe:	68 91 04 00 00       	push   $0x491
f011f403:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f408:	e8 ee 0d fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f40d:	e8 2a 49 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f412:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f415:	74 17                	je     f011f42e <test_kmalloc_worstfit+0x1291>
f011f417:	83 ec 04             	sub    $0x4,%esp
f011f41a:	68 74 ac 13 f0       	push   $0xf013ac74
f011f41f:	68 92 04 00 00       	push   $0x492
f011f424:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f429:	e8 cd 0d fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f42e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f431:	e8 89 d4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f436:	29 c3                	sub    %eax,%ebx
f011f438:	89 d8                	mov    %ebx,%eax
f011f43a:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f43f:	74 17                	je     f011f458 <test_kmalloc_worstfit+0x12bb>
f011f441:	83 ec 04             	sub    $0x4,%esp
f011f444:	68 92 b1 13 f0       	push   $0xf013b192
f011f449:	68 93 04 00 00       	push   $0x493
f011f44e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f453:	e8 a3 0d fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f458:	ff 45 e8             	incl   -0x18(%ebp)
f011f45b:	83 ec 08             	sub    $0x8,%esp
f011f45e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f461:	68 94 b3 13 f0       	push   $0xf013b394
f011f466:	e8 17 18 fe ff       	call   f0100c82 <cprintf>
f011f46b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f46e:	e8 4c d4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f473:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f476:	e8 c1 48 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f47b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f47e:	83 ec 0c             	sub    $0xc,%esp
f011f481:	68 00 04 00 00       	push   $0x400
f011f486:	e8 73 83 fe ff       	call   f01077fe <kmalloc>
f011f48b:	83 c4 10             	add    $0x10,%esp
f011f48e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f494:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011f49b:	10 00 00 
f011f49e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011f4a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4a9:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011f4af:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f4b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4ba:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011f4c0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011f4c6:	29 d0                	sub    %edx,%eax
f011f4c8:	89 c1                	mov    %eax,%ecx
f011f4ca:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011f4d1:	10 00 00 
f011f4d4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f4d9:	0f b6 d0             	movzbl %al,%edx
f011f4dc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011f4e2:	01 d0                	add    %edx,%eax
f011f4e4:	48                   	dec    %eax
f011f4e5:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011f4eb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f4f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4f6:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011f4fc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011f502:	29 d0                	sub    %edx,%eax
f011f504:	01 c1                	add    %eax,%ecx
f011f506:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011f50d:	10 00 00 
f011f510:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f515:	0f b6 c0             	movzbl %al,%eax
f011f518:	c1 e0 04             	shl    $0x4,%eax
f011f51b:	89 c2                	mov    %eax,%edx
f011f51d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011f523:	01 d0                	add    %edx,%eax
f011f525:	48                   	dec    %eax
f011f526:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011f52c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f532:	ba 00 00 00 00       	mov    $0x0,%edx
f011f537:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011f53d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011f543:	29 d0                	sub    %edx,%eax
f011f545:	01 c8                	add    %ecx,%eax
f011f547:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f54d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f553:	39 c2                	cmp    %eax,%edx
f011f555:	74 17                	je     f011f56e <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011f557:	83 ec 04             	sub    $0x4,%esp
f011f55a:	68 74 b3 13 f0       	push   $0xf013b374
f011f55f:	68 9a 04 00 00       	push   $0x49a
f011f564:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f569:	e8 8d 0c fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f56e:	e8 c9 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f573:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f576:	74 17                	je     f011f58f <test_kmalloc_worstfit+0x13f2>
f011f578:	83 ec 04             	sub    $0x4,%esp
f011f57b:	68 74 ac 13 f0       	push   $0xf013ac74
f011f580:	68 9b 04 00 00       	push   $0x49b
f011f585:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f58a:	e8 6c 0c fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f58f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f592:	e8 28 d3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f597:	29 c3                	sub    %eax,%ebx
f011f599:	89 d8                	mov    %ebx,%eax
f011f59b:	83 f8 01             	cmp    $0x1,%eax
f011f59e:	74 17                	je     f011f5b7 <test_kmalloc_worstfit+0x141a>
f011f5a0:	83 ec 04             	sub    $0x4,%esp
f011f5a3:	68 92 b1 13 f0       	push   $0xf013b192
f011f5a8:	68 9c 04 00 00       	push   $0x49c
f011f5ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f5b2:	e8 44 0c fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5b7:	ff 45 e8             	incl   -0x18(%ebp)
f011f5ba:	83 ec 08             	sub    $0x8,%esp
f011f5bd:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5c0:	68 94 b3 13 f0       	push   $0xf013b394
f011f5c5:	e8 b8 16 fe ff       	call   f0100c82 <cprintf>
f011f5ca:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5cd:	e8 ed d2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f5d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5d5:	e8 62 47 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f5da:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f5dd:	83 ec 0c             	sub    $0xc,%esp
f011f5e0:	68 00 f0 1f 00       	push   $0x1ff000
f011f5e5:	e8 14 82 fe ff       	call   f01077fe <kmalloc>
f011f5ea:	83 c4 10             	add    $0x10,%esp
f011f5ed:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f5f3:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f5fa:	10 00 00 
f011f5fd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f603:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f608:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f60e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f614:	ba 00 00 00 00       	mov    $0x0,%edx
f011f619:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f61f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f625:	29 d0                	sub    %edx,%eax
f011f627:	89 c1                	mov    %eax,%ecx
f011f629:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f630:	10 00 00 
f011f633:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f638:	0f b6 d0             	movzbl %al,%edx
f011f63b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f641:	01 d0                	add    %edx,%eax
f011f643:	48                   	dec    %eax
f011f644:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f64a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f650:	ba 00 00 00 00       	mov    $0x0,%edx
f011f655:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f65b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f661:	29 d0                	sub    %edx,%eax
f011f663:	01 c1                	add    %eax,%ecx
f011f665:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f66c:	10 00 00 
f011f66f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f674:	0f b6 c0             	movzbl %al,%eax
f011f677:	c1 e0 04             	shl    $0x4,%eax
f011f67a:	89 c2                	mov    %eax,%edx
f011f67c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f682:	01 d0                	add    %edx,%eax
f011f684:	48                   	dec    %eax
f011f685:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f68b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f691:	ba 00 00 00 00       	mov    $0x0,%edx
f011f696:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f69c:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f6a2:	29 d0                	sub    %edx,%eax
f011f6a4:	01 c8                	add    %ecx,%eax
f011f6a6:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f6ac:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f6b2:	39 c2                	cmp    %eax,%edx
f011f6b4:	74 17                	je     f011f6cd <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f6b6:	83 ec 04             	sub    $0x4,%esp
f011f6b9:	68 74 b3 13 f0       	push   $0xf013b374
f011f6be:	68 a3 04 00 00       	push   $0x4a3
f011f6c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f6c8:	e8 2e 0b fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f6cd:	e8 6a 46 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f6d2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6d5:	74 17                	je     f011f6ee <test_kmalloc_worstfit+0x1551>
f011f6d7:	83 ec 04             	sub    $0x4,%esp
f011f6da:	68 74 ac 13 f0       	push   $0xf013ac74
f011f6df:	68 a4 04 00 00       	push   $0x4a4
f011f6e4:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f6e9:	e8 0d 0b fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f6ee:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6f1:	e8 c9 d1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f6f6:	29 c3                	sub    %eax,%ebx
f011f6f8:	89 d8                	mov    %ebx,%eax
f011f6fa:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f6ff:	74 17                	je     f011f718 <test_kmalloc_worstfit+0x157b>
f011f701:	83 ec 04             	sub    $0x4,%esp
f011f704:	68 92 b1 13 f0       	push   $0xf013b192
f011f709:	68 a5 04 00 00       	push   $0x4a5
f011f70e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f713:	e8 e3 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f718:	ff 45 e8             	incl   -0x18(%ebp)
f011f71b:	83 ec 08             	sub    $0x8,%esp
f011f71e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f721:	68 94 b3 13 f0       	push   $0xf013b394
f011f726:	e8 57 15 fe ff       	call   f0100c82 <cprintf>
f011f72b:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f72e:	e8 8c d1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f733:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f736:	e8 01 46 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f73b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f73e:	83 ec 0c             	sub    $0xc,%esp
f011f741:	68 00 00 40 00       	push   $0x400000
f011f746:	e8 b3 80 fe ff       	call   f01077fe <kmalloc>
f011f74b:	83 c4 10             	add    $0x10,%esp
f011f74e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f754:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f75a:	85 c0                	test   %eax,%eax
f011f75c:	74 17                	je     f011f775 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f75e:	83 ec 04             	sub    $0x4,%esp
f011f761:	68 74 b3 13 f0       	push   $0xf013b374
f011f766:	68 ad 04 00 00       	push   $0x4ad
f011f76b:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f770:	e8 86 0a fe ff       	call   f01001fb <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f775:	e8 c2 45 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f77a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f77d:	74 17                	je     f011f796 <test_kmalloc_worstfit+0x15f9>
f011f77f:	83 ec 04             	sub    $0x4,%esp
f011f782:	68 74 ac 13 f0       	push   $0xf013ac74
f011f787:	68 ae 04 00 00       	push   $0x4ae
f011f78c:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f791:	e8 65 0a fe ff       	call   f01001fb <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f796:	e8 24 d1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f79b:	89 c2                	mov    %eax,%edx
f011f79d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f7a0:	39 c2                	cmp    %eax,%edx
f011f7a2:	74 17                	je     f011f7bb <test_kmalloc_worstfit+0x161e>
f011f7a4:	83 ec 04             	sub    $0x4,%esp
f011f7a7:	68 92 b1 13 f0       	push   $0xf013b192
f011f7ac:	68 af 04 00 00       	push   $0x4af
f011f7b1:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f7b6:	e8 40 0a fe ff       	call   f01001fb <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f7bb:	ff 45 e8             	incl   -0x18(%ebp)
f011f7be:	83 ec 08             	sub    $0x8,%esp
f011f7c1:	ff 75 e8             	pushl  -0x18(%ebp)
f011f7c4:	68 94 b3 13 f0       	push   $0xf013b394
f011f7c9:	e8 b4 14 fe ff       	call   f0100c82 <cprintf>
f011f7ce:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f7d1:	83 ec 0c             	sub    $0xc,%esp
f011f7d4:	68 a8 b3 13 f0       	push   $0xf013b3a8
f011f7d9:	e8 a4 14 fe ff       	call   f0100c82 <cprintf>
f011f7de:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f7e1:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f7e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f7e9:	5b                   	pop    %ebx
f011f7ea:	5f                   	pop    %edi
f011f7eb:	5d                   	pop    %ebp
f011f7ec:	c3                   	ret    

f011f7ed <test_kfree>:

int test_kfree()
{
f011f7ed:	55                   	push   %ebp
f011f7ee:	89 e5                	mov    %esp,%ebp
f011f7f0:	57                   	push   %edi
f011f7f1:	53                   	push   %ebx
f011f7f2:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f7f8:	83 ec 0c             	sub    $0xc,%esp
f011f7fb:	68 9c ab 13 f0       	push   $0xf013ab9c
f011f800:	e8 7d 14 fe ff       	call   f0100c82 <cprintf>
f011f805:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f808:	83 ec 0c             	sub    $0xc,%esp
f011f80b:	68 cc ab 13 f0       	push   $0xf013abcc
f011f810:	e8 6d 14 fe ff       	call   f0100c82 <cprintf>
f011f815:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f818:	83 ec 0c             	sub    $0xc,%esp
f011f81b:	68 9c ab 13 f0       	push   $0xf013ab9c
f011f820:	e8 5d 14 fe ff       	call   f0100c82 <cprintf>
f011f825:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f828:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f82c:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f830:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f836:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f83c:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f843:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f84a:	e8 70 d0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f84f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f852:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f858:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f85d:	b8 00 00 00 00       	mov    $0x0,%eax
f011f862:	89 d7                	mov    %edx,%edi
f011f864:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f866:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f86c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f871:	b8 00 00 00 00       	mov    $0x0,%eax
f011f876:	89 d7                	mov    %edx,%edi
f011f878:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f87a:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f880:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f885:	b8 00 00 00 00       	mov    $0x0,%eax
f011f88a:	89 d7                	mov    %edx,%edi
f011f88c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f88e:	e8 2c d0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f893:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f896:	e8 a1 44 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f89b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f89e:	83 ec 0c             	sub    $0xc,%esp
f011f8a1:	68 00 fc 1f 00       	push   $0x1ffc00
f011f8a6:	e8 53 7f fe ff       	call   f01077fe <kmalloc>
f011f8ab:	83 c4 10             	add    $0x10,%esp
f011f8ae:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8b4:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f8ba:	89 c1                	mov    %eax,%ecx
f011f8bc:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f8c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f8c6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f8cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f8ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8d6:	f7 75 c8             	divl   -0x38(%ebp)
f011f8d9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f8dc:	29 d0                	sub    %edx,%eax
f011f8de:	89 c3                	mov    %eax,%ebx
f011f8e0:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f8e7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f8ec:	0f b6 d0             	movzbl %al,%edx
f011f8ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f8f2:	01 d0                	add    %edx,%eax
f011f8f4:	48                   	dec    %eax
f011f8f5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f8f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f8fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f900:	f7 75 c0             	divl   -0x40(%ebp)
f011f903:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f906:	29 d0                	sub    %edx,%eax
f011f908:	01 c3                	add    %eax,%ebx
f011f90a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f911:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011f916:	0f b6 c0             	movzbl %al,%eax
f011f919:	c1 e0 04             	shl    $0x4,%eax
f011f91c:	89 c2                	mov    %eax,%edx
f011f91e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f921:	01 d0                	add    %edx,%eax
f011f923:	48                   	dec    %eax
f011f924:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f927:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f92a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f92f:	f7 75 b8             	divl   -0x48(%ebp)
f011f932:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f935:	29 d0                	sub    %edx,%eax
f011f937:	01 d8                	add    %ebx,%eax
f011f939:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f93e:	39 c1                	cmp    %eax,%ecx
f011f940:	74 17                	je     f011f959 <test_kfree+0x16c>
f011f942:	83 ec 04             	sub    $0x4,%esp
f011f945:	68 40 ad 13 f0       	push   $0xf013ad40
f011f94a:	68 d7 04 00 00       	push   $0x4d7
f011f94f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f954:	e8 a2 08 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f959:	e8 de 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f95e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f961:	74 17                	je     f011f97a <test_kfree+0x18d>
f011f963:	83 ec 04             	sub    $0x4,%esp
f011f966:	68 74 ac 13 f0       	push   $0xf013ac74
f011f96b:	68 d8 04 00 00       	push   $0x4d8
f011f970:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f975:	e8 81 08 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f97a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f97d:	e8 3d cf fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f982:	29 c3                	sub    %eax,%ebx
f011f984:	89 d8                	mov    %ebx,%eax
f011f986:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f98b:	74 17                	je     f011f9a4 <test_kfree+0x1b7>
f011f98d:	83 ec 04             	sub    $0x4,%esp
f011f990:	68 dc ac 13 f0       	push   $0xf013acdc
f011f995:	68 d9 04 00 00       	push   $0x4d9
f011f99a:	68 5a ac 13 f0       	push   $0xf013ac5a
f011f99f:	e8 57 08 fe ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f9a4:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f9ab:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f9ae:	e8 0c cf fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011f9b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9b6:	e8 81 43 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011f9bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f9be:	83 ec 0c             	sub    $0xc,%esp
f011f9c1:	68 00 fc 1f 00       	push   $0x1ffc00
f011f9c6:	e8 33 7e fe ff       	call   f01077fe <kmalloc>
f011f9cb:	83 c4 10             	add    $0x10,%esp
f011f9ce:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9d4:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f9da:	89 c1                	mov    %eax,%ecx
f011f9dc:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f9e3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f9e6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9eb:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f9ee:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f9f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9f6:	f7 75 b0             	divl   -0x50(%ebp)
f011f9f9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f9fc:	29 d0                	sub    %edx,%eax
f011f9fe:	89 c3                	mov    %eax,%ebx
f011fa00:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011fa07:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fa0c:	0f b6 d0             	movzbl %al,%edx
f011fa0f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011fa12:	01 d0                	add    %edx,%eax
f011fa14:	48                   	dec    %eax
f011fa15:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011fa18:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fa1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa20:	f7 75 a8             	divl   -0x58(%ebp)
f011fa23:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011fa26:	29 d0                	sub    %edx,%eax
f011fa28:	01 c3                	add    %eax,%ebx
f011fa2a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011fa31:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fa36:	0f b6 c0             	movzbl %al,%eax
f011fa39:	c1 e0 04             	shl    $0x4,%eax
f011fa3c:	89 c2                	mov    %eax,%edx
f011fa3e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011fa41:	01 d0                	add    %edx,%eax
f011fa43:	48                   	dec    %eax
f011fa44:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011fa47:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fa4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa4f:	f7 75 a0             	divl   -0x60(%ebp)
f011fa52:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011fa55:	29 d0                	sub    %edx,%eax
f011fa57:	01 d8                	add    %ebx,%eax
f011fa59:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fa5e:	39 c1                	cmp    %eax,%ecx
f011fa60:	74 17                	je     f011fa79 <test_kfree+0x28c>
f011fa62:	83 ec 04             	sub    $0x4,%esp
f011fa65:	68 40 ad 13 f0       	push   $0xf013ad40
f011fa6a:	68 e0 04 00 00       	push   $0x4e0
f011fa6f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fa74:	e8 82 07 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa79:	e8 be 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fa7e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa81:	74 17                	je     f011fa9a <test_kfree+0x2ad>
f011fa83:	83 ec 04             	sub    $0x4,%esp
f011fa86:	68 74 ac 13 f0       	push   $0xf013ac74
f011fa8b:	68 e1 04 00 00       	push   $0x4e1
f011fa90:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fa95:	e8 61 07 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fa9a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fa9d:	e8 1d ce fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011faa2:	29 c3                	sub    %eax,%ebx
f011faa4:	89 d8                	mov    %ebx,%eax
f011faa6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011faab:	74 17                	je     f011fac4 <test_kfree+0x2d7>
f011faad:	83 ec 04             	sub    $0x4,%esp
f011fab0:	68 dc ac 13 f0       	push   $0xf013acdc
f011fab5:	68 e2 04 00 00       	push   $0x4e2
f011faba:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fabf:	e8 37 07 fe ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fac4:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011facb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011face:	e8 ec cd fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fad3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fad6:	e8 61 42 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fadb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011fade:	83 ec 0c             	sub    $0xc,%esp
f011fae1:	68 00 08 00 00       	push   $0x800
f011fae6:	e8 13 7d fe ff       	call   f01077fe <kmalloc>
f011faeb:	83 c4 10             	add    $0x10,%esp
f011faee:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011faf4:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fafa:	89 c1                	mov    %eax,%ecx
f011fafc:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011fb03:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fb06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb0b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011fb0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fb11:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb16:	f7 75 98             	divl   -0x68(%ebp)
f011fb19:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fb1c:	29 d0                	sub    %edx,%eax
f011fb1e:	89 c3                	mov    %eax,%ebx
f011fb20:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011fb27:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fb2c:	0f b6 d0             	movzbl %al,%edx
f011fb2f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fb32:	01 d0                	add    %edx,%eax
f011fb34:	48                   	dec    %eax
f011fb35:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011fb38:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fb3b:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb40:	f7 75 90             	divl   -0x70(%ebp)
f011fb43:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fb46:	29 d0                	sub    %edx,%eax
f011fb48:	01 c3                	add    %eax,%ebx
f011fb4a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011fb51:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fb56:	0f b6 c0             	movzbl %al,%eax
f011fb59:	c1 e0 04             	shl    $0x4,%eax
f011fb5c:	89 c2                	mov    %eax,%edx
f011fb5e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fb61:	01 d0                	add    %edx,%eax
f011fb63:	48                   	dec    %eax
f011fb64:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011fb67:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb6f:	f7 75 88             	divl   -0x78(%ebp)
f011fb72:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb75:	29 d0                	sub    %edx,%eax
f011fb77:	01 d8                	add    %ebx,%eax
f011fb79:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011fb7e:	39 c1                	cmp    %eax,%ecx
f011fb80:	74 17                	je     f011fb99 <test_kfree+0x3ac>
f011fb82:	83 ec 04             	sub    $0x4,%esp
f011fb85:	68 40 ad 13 f0       	push   $0xf013ad40
f011fb8a:	68 e9 04 00 00       	push   $0x4e9
f011fb8f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fb94:	e8 62 06 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb99:	e8 9e 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fb9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fba1:	74 17                	je     f011fbba <test_kfree+0x3cd>
f011fba3:	83 ec 04             	sub    $0x4,%esp
f011fba6:	68 74 ac 13 f0       	push   $0xf013ac74
f011fbab:	68 ea 04 00 00       	push   $0x4ea
f011fbb0:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fbb5:	e8 41 06 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbbd:	e8 fd cc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fbc2:	29 c3                	sub    %eax,%ebx
f011fbc4:	89 d8                	mov    %ebx,%eax
f011fbc6:	83 f8 01             	cmp    $0x1,%eax
f011fbc9:	74 17                	je     f011fbe2 <test_kfree+0x3f5>
f011fbcb:	83 ec 04             	sub    $0x4,%esp
f011fbce:	68 dc ac 13 f0       	push   $0xf013acdc
f011fbd3:	68 eb 04 00 00       	push   $0x4eb
f011fbd8:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fbdd:	e8 19 06 fe ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011fbe2:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011fbe9:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fbec:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fbf2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011fbf5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fbfc:	eb 0e                	jmp    f011fc0c <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011fbfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc01:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fc04:	01 d0                	add    %edx,%eax
f011fc06:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011fc09:	ff 45 f4             	incl   -0xc(%ebp)
f011fc0c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011fc12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc15:	7f e7                	jg     f011fbfe <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc17:	e8 a3 cc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fc1c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc1f:	e8 18 41 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fc24:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011fc27:	83 ec 0c             	sub    $0xc,%esp
f011fc2a:	68 00 08 00 00       	push   $0x800
f011fc2f:	e8 ca 7b fe ff       	call   f01077fe <kmalloc>
f011fc34:	83 c4 10             	add    $0x10,%esp
f011fc37:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc3d:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fc43:	89 c1                	mov    %eax,%ecx
f011fc45:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fc4c:	10 00 00 
f011fc4f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fc55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc5a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fc60:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fc66:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc6b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fc71:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fc77:	29 d0                	sub    %edx,%eax
f011fc79:	89 c3                	mov    %eax,%ebx
f011fc7b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fc82:	10 00 00 
f011fc85:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fc8a:	0f b6 d0             	movzbl %al,%edx
f011fc8d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fc93:	01 d0                	add    %edx,%eax
f011fc95:	48                   	dec    %eax
f011fc96:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fc9c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fca2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fca7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fcad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fcb3:	29 d0                	sub    %edx,%eax
f011fcb5:	01 c3                	add    %eax,%ebx
f011fcb7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fcbe:	10 00 00 
f011fcc1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fcc6:	0f b6 c0             	movzbl %al,%eax
f011fcc9:	c1 e0 04             	shl    $0x4,%eax
f011fccc:	89 c2                	mov    %eax,%edx
f011fcce:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fcd4:	01 d0                	add    %edx,%eax
f011fcd6:	48                   	dec    %eax
f011fcd7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fcdd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fce3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fce8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fcee:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fcf4:	29 d0                	sub    %edx,%eax
f011fcf6:	01 d8                	add    %ebx,%eax
f011fcf8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fcfd:	39 c1                	cmp    %eax,%ecx
f011fcff:	74 17                	je     f011fd18 <test_kfree+0x52b>
f011fd01:	83 ec 04             	sub    $0x4,%esp
f011fd04:	68 40 ad 13 f0       	push   $0xf013ad40
f011fd09:	68 f7 04 00 00       	push   $0x4f7
f011fd0e:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd13:	e8 e3 04 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd18:	e8 1f 40 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fd1d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd20:	74 17                	je     f011fd39 <test_kfree+0x54c>
f011fd22:	83 ec 04             	sub    $0x4,%esp
f011fd25:	68 74 ac 13 f0       	push   $0xf013ac74
f011fd2a:	68 f8 04 00 00       	push   $0x4f8
f011fd2f:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd34:	e8 c2 04 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd39:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd3c:	e8 7e cb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fd41:	29 c3                	sub    %eax,%ebx
f011fd43:	89 d8                	mov    %ebx,%eax
f011fd45:	83 f8 01             	cmp    $0x1,%eax
f011fd48:	74 17                	je     f011fd61 <test_kfree+0x574>
f011fd4a:	83 ec 04             	sub    $0x4,%esp
f011fd4d:	68 dc ac 13 f0       	push   $0xf013acdc
f011fd52:	68 f9 04 00 00       	push   $0x4f9
f011fd57:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fd5c:	e8 9a 04 fe ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fd61:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011fd68:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fd6b:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011fd71:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fd74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd7b:	eb 0e                	jmp    f011fd8b <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011fd7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd80:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fd83:	01 d0                	add    %edx,%eax
f011fd85:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fd88:	ff 45 f4             	incl   -0xc(%ebp)
f011fd8b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011fd91:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd94:	7f e7                	jg     f011fd7d <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fd96:	e8 24 cb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fd9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd9e:	e8 99 3f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fda3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fda6:	83 ec 0c             	sub    $0xc,%esp
f011fda9:	68 00 1c 00 00       	push   $0x1c00
f011fdae:	e8 4b 7a fe ff       	call   f01077fe <kmalloc>
f011fdb3:	83 c4 10             	add    $0x10,%esp
f011fdb6:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdbc:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fdc2:	89 c1                	mov    %eax,%ecx
f011fdc4:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fdcb:	10 00 00 
f011fdce:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fdd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fdd9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fddf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fde5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdea:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fdf0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fdf6:	29 d0                	sub    %edx,%eax
f011fdf8:	89 c3                	mov    %eax,%ebx
f011fdfa:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fe01:	10 00 00 
f011fe04:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe09:	0f b6 d0             	movzbl %al,%edx
f011fe0c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fe12:	01 d0                	add    %edx,%eax
f011fe14:	48                   	dec    %eax
f011fe15:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fe1b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe21:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe26:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fe2c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe32:	29 d0                	sub    %edx,%eax
f011fe34:	01 c3                	add    %eax,%ebx
f011fe36:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fe3d:	10 00 00 
f011fe40:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011fe45:	0f b6 c0             	movzbl %al,%eax
f011fe48:	c1 e0 04             	shl    $0x4,%eax
f011fe4b:	89 c2                	mov    %eax,%edx
f011fe4d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fe53:	01 d0                	add    %edx,%eax
f011fe55:	48                   	dec    %eax
f011fe56:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fe5c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe62:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe67:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011fe6d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fe73:	29 d0                	sub    %edx,%eax
f011fe75:	01 d8                	add    %ebx,%eax
f011fe77:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fe7c:	39 c1                	cmp    %eax,%ecx
f011fe7e:	74 17                	je     f011fe97 <test_kfree+0x6aa>
f011fe80:	83 ec 04             	sub    $0x4,%esp
f011fe83:	68 40 ad 13 f0       	push   $0xf013ad40
f011fe88:	68 05 05 00 00       	push   $0x505
f011fe8d:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fe92:	e8 64 03 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe97:	e8 a0 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011fe9c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe9f:	74 17                	je     f011feb8 <test_kfree+0x6cb>
f011fea1:	83 ec 04             	sub    $0x4,%esp
f011fea4:	68 74 ac 13 f0       	push   $0xf013ac74
f011fea9:	68 06 05 00 00       	push   $0x506
f011feae:	68 5a ac 13 f0       	push   $0xf013ac5a
f011feb3:	e8 43 03 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011feb8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011febb:	e8 ff c9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011fec0:	29 c3                	sub    %eax,%ebx
f011fec2:	89 d8                	mov    %ebx,%eax
f011fec4:	83 f8 02             	cmp    $0x2,%eax
f011fec7:	74 17                	je     f011fee0 <test_kfree+0x6f3>
f011fec9:	83 ec 04             	sub    $0x4,%esp
f011fecc:	68 dc ac 13 f0       	push   $0xf013acdc
f011fed1:	68 07 05 00 00       	push   $0x507
f011fed6:	68 5a ac 13 f0       	push   $0xf013ac5a
f011fedb:	e8 1b 03 fe ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fee0:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011fee7:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011feea:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011fef0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fef3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fefa:	eb 0e                	jmp    f011ff0a <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011fefc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011feff:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ff02:	01 d0                	add    %edx,%eax
f011ff04:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011ff07:	ff 45 f4             	incl   -0xc(%ebp)
f011ff0a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011ff10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ff13:	7f e7                	jg     f011fefc <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff15:	e8 a5 c9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f011ff1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff1d:	e8 1a 3e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f011ff22:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ff25:	83 ec 0c             	sub    $0xc,%esp
f011ff28:	68 00 fc 2f 00       	push   $0x2ffc00
f011ff2d:	e8 cc 78 fe ff       	call   f01077fe <kmalloc>
f011ff32:	83 c4 10             	add    $0x10,%esp
f011ff35:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff3b:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011ff41:	89 c1                	mov    %eax,%ecx
f011ff43:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ff4a:	10 00 00 
f011ff4d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ff58:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ff5e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff69:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ff6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff75:	29 d0                	sub    %edx,%eax
f011ff77:	89 c3                	mov    %eax,%ebx
f011ff79:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ff80:	10 00 00 
f011ff83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ff88:	0f b6 d0             	movzbl %al,%edx
f011ff8b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ff91:	01 d0                	add    %edx,%eax
f011ff93:	48                   	dec    %eax
f011ff94:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ff9a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ffa0:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffa5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ffab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ffb1:	29 d0                	sub    %edx,%eax
f011ffb3:	01 c3                	add    %eax,%ebx
f011ffb5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ffbc:	10 00 00 
f011ffbf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f011ffc4:	0f b6 c0             	movzbl %al,%eax
f011ffc7:	c1 e0 04             	shl    $0x4,%eax
f011ffca:	89 c2                	mov    %eax,%edx
f011ffcc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ffd2:	01 d0                	add    %edx,%eax
f011ffd4:	48                   	dec    %eax
f011ffd5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ffdb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ffe1:	ba 00 00 00 00       	mov    $0x0,%edx
f011ffe6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ffec:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fff2:	29 d0                	sub    %edx,%eax
f011fff4:	01 d8                	add    %ebx,%eax
f011fff6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fffb:	39 c1                	cmp    %eax,%ecx
f011fffd:	74 17                	je     f0120016 <test_kfree+0x829>
f011ffff:	83 ec 04             	sub    $0x4,%esp
f0120002:	68 40 ad 13 f0       	push   $0xf013ad40
f0120007:	68 13 05 00 00       	push   $0x513
f012000c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120011:	e8 e5 01 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120016:	e8 21 3d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012001b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012001e:	74 17                	je     f0120037 <test_kfree+0x84a>
f0120020:	83 ec 04             	sub    $0x4,%esp
f0120023:	68 74 ac 13 f0       	push   $0xf013ac74
f0120028:	68 14 05 00 00       	push   $0x514
f012002d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120032:	e8 c4 01 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120037:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012003a:	e8 80 c8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012003f:	29 c3                	sub    %eax,%ebx
f0120041:	89 d8                	mov    %ebx,%eax
f0120043:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120048:	74 17                	je     f0120061 <test_kfree+0x874>
f012004a:	83 ec 04             	sub    $0x4,%esp
f012004d:	68 dc ac 13 f0       	push   $0xf013acdc
f0120052:	68 15 05 00 00       	push   $0x515
f0120057:	68 5a ac 13 f0       	push   $0xf013ac5a
f012005c:	e8 9a 01 fe ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120061:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120068:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012006b:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120071:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012007b:	eb 0e                	jmp    f012008b <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f012007d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120080:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120083:	01 d0                	add    %edx,%eax
f0120085:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120088:	ff 45 f4             	incl   -0xc(%ebp)
f012008b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120091:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120094:	7f e7                	jg     f012007d <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120096:	e8 24 c8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012009b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012009e:	e8 99 3c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01200a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01200a6:	83 ec 0c             	sub    $0xc,%esp
f01200a9:	68 00 fc 5f 00       	push   $0x5ffc00
f01200ae:	e8 4b 77 fe ff       	call   f01077fe <kmalloc>
f01200b3:	83 c4 10             	add    $0x10,%esp
f01200b6:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01200bc:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01200c2:	89 c1                	mov    %eax,%ecx
f01200c4:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01200cb:	10 00 00 
f01200ce:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01200d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01200d9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01200df:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01200e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01200ea:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01200f0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01200f6:	29 d0                	sub    %edx,%eax
f01200f8:	89 c3                	mov    %eax,%ebx
f01200fa:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120101:	10 00 00 
f0120104:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120109:	0f b6 d0             	movzbl %al,%edx
f012010c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120112:	01 d0                	add    %edx,%eax
f0120114:	48                   	dec    %eax
f0120115:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012011b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120121:	ba 00 00 00 00       	mov    $0x0,%edx
f0120126:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012012c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120132:	29 d0                	sub    %edx,%eax
f0120134:	01 c3                	add    %eax,%ebx
f0120136:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012013d:	10 00 00 
f0120140:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120145:	0f b6 c0             	movzbl %al,%eax
f0120148:	c1 e0 04             	shl    $0x4,%eax
f012014b:	89 c2                	mov    %eax,%edx
f012014d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120153:	01 d0                	add    %edx,%eax
f0120155:	48                   	dec    %eax
f0120156:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012015c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120162:	ba 00 00 00 00       	mov    $0x0,%edx
f0120167:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012016d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120173:	29 d0                	sub    %edx,%eax
f0120175:	01 d8                	add    %ebx,%eax
f0120177:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012017c:	39 c1                	cmp    %eax,%ecx
f012017e:	74 17                	je     f0120197 <test_kfree+0x9aa>
f0120180:	83 ec 04             	sub    $0x4,%esp
f0120183:	68 40 ad 13 f0       	push   $0xf013ad40
f0120188:	68 21 05 00 00       	push   $0x521
f012018d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120192:	e8 64 00 fe ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120197:	e8 a0 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012019c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012019f:	74 17                	je     f01201b8 <test_kfree+0x9cb>
f01201a1:	83 ec 04             	sub    $0x4,%esp
f01201a4:	68 74 ac 13 f0       	push   $0xf013ac74
f01201a9:	68 22 05 00 00       	push   $0x522
f01201ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f01201b3:	e8 43 00 fe ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01201b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01201bb:	e8 ff c6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01201c0:	29 c3                	sub    %eax,%ebx
f01201c2:	89 d8                	mov    %ebx,%eax
f01201c4:	3d 00 06 00 00       	cmp    $0x600,%eax
f01201c9:	74 17                	je     f01201e2 <test_kfree+0x9f5>
f01201cb:	83 ec 04             	sub    $0x4,%esp
f01201ce:	68 dc ac 13 f0       	push   $0xf013acdc
f01201d3:	68 23 05 00 00       	push   $0x523
f01201d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01201dd:	e8 19 00 fe ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01201e2:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f01201e9:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01201ec:	e8 ce c6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01201f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01201f4:	e8 43 3b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01201f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01201fc:	83 ec 0c             	sub    $0xc,%esp
f01201ff:	68 00 38 00 00       	push   $0x3800
f0120204:	e8 f5 75 fe ff       	call   f01077fe <kmalloc>
f0120209:	83 c4 10             	add    $0x10,%esp
f012020c:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120212:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120218:	89 c1                	mov    %eax,%ecx
f012021a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120221:	10 00 00 
f0120224:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012022a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012022f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120235:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012023b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120240:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120246:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012024c:	29 d0                	sub    %edx,%eax
f012024e:	89 c3                	mov    %eax,%ebx
f0120250:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120257:	10 00 00 
f012025a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012025f:	0f b6 d0             	movzbl %al,%edx
f0120262:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120268:	01 d0                	add    %edx,%eax
f012026a:	48                   	dec    %eax
f012026b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120271:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120277:	ba 00 00 00 00       	mov    $0x0,%edx
f012027c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120282:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120288:	29 d0                	sub    %edx,%eax
f012028a:	01 c3                	add    %eax,%ebx
f012028c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0120293:	10 00 00 
f0120296:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012029b:	0f b6 c0             	movzbl %al,%eax
f012029e:	c1 e0 04             	shl    $0x4,%eax
f01202a1:	89 c2                	mov    %eax,%edx
f01202a3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01202a9:	01 d0                	add    %edx,%eax
f01202ab:	48                   	dec    %eax
f01202ac:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01202b2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01202b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01202bd:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01202c3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01202c9:	29 d0                	sub    %edx,%eax
f01202cb:	01 d8                	add    %ebx,%eax
f01202cd:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01202d2:	39 c1                	cmp    %eax,%ecx
f01202d4:	74 17                	je     f01202ed <test_kfree+0xb00>
f01202d6:	83 ec 04             	sub    $0x4,%esp
f01202d9:	68 40 ad 13 f0       	push   $0xf013ad40
f01202de:	68 2a 05 00 00       	push   $0x52a
f01202e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01202e8:	e8 0e ff fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01202ed:	e8 4a 3a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01202f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01202f5:	74 17                	je     f012030e <test_kfree+0xb21>
f01202f7:	83 ec 04             	sub    $0x4,%esp
f01202fa:	68 74 ac 13 f0       	push   $0xf013ac74
f01202ff:	68 2b 05 00 00       	push   $0x52b
f0120304:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120309:	e8 ed fe fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012030e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120311:	e8 a9 c5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120316:	29 c3                	sub    %eax,%ebx
f0120318:	89 d8                	mov    %ebx,%eax
f012031a:	83 f8 04             	cmp    $0x4,%eax
f012031d:	74 17                	je     f0120336 <test_kfree+0xb49>
f012031f:	83 ec 04             	sub    $0x4,%esp
f0120322:	68 dc ac 13 f0       	push   $0xf013acdc
f0120327:	68 2c 05 00 00       	push   $0x52c
f012032c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120331:	e8 c5 fe fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0120336:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f012033d:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120340:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120346:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120349:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120350:	eb 0e                	jmp    f0120360 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0120352:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120355:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120358:	01 d0                	add    %edx,%eax
f012035a:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012035d:	ff 45 f4             	incl   -0xc(%ebp)
f0120360:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0120366:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120369:	7f e7                	jg     f0120352 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012036b:	e8 4f c5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120370:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120376:	e8 c1 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012037b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0120381:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120387:	83 ec 0c             	sub    $0xc,%esp
f012038a:	50                   	push   %eax
f012038b:	e8 30 75 fe ff       	call   f01078c0 <kfree>
f0120390:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120393:	e8 a4 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120398:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012039e:	74 17                	je     f01203b7 <test_kfree+0xbca>
f01203a0:	83 ec 04             	sub    $0x4,%esp
f01203a3:	68 74 ac 13 f0       	push   $0xf013ac74
f01203a8:	68 3b 05 00 00       	push   $0x53b
f01203ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f01203b2:	e8 44 fe fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01203b7:	e8 03 c5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01203bc:	89 c2                	mov    %eax,%edx
f01203be:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01203c4:	29 c2                	sub    %eax,%edx
f01203c6:	89 d0                	mov    %edx,%eax
f01203c8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01203cd:	74 17                	je     f01203e6 <test_kfree+0xbf9>
f01203cf:	83 ec 04             	sub    $0x4,%esp
f01203d2:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01203d7:	68 3c 05 00 00       	push   $0x53c
f01203dc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01203e1:	e8 15 fe fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01203e6:	e8 d4 c4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01203eb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203f1:	e8 46 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01203f6:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01203fc:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120402:	83 ec 0c             	sub    $0xc,%esp
f0120405:	50                   	push   %eax
f0120406:	e8 b5 74 fe ff       	call   f01078c0 <kfree>
f012040b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012040e:	e8 29 39 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120413:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120419:	74 17                	je     f0120432 <test_kfree+0xc45>
f012041b:	83 ec 04             	sub    $0x4,%esp
f012041e:	68 74 ac 13 f0       	push   $0xf013ac74
f0120423:	68 42 05 00 00       	push   $0x542
f0120428:	68 5a ac 13 f0       	push   $0xf013ac5a
f012042d:	e8 c9 fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120432:	e8 88 c4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120437:	89 c2                	mov    %eax,%edx
f0120439:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012043f:	29 c2                	sub    %eax,%edx
f0120441:	89 d0                	mov    %edx,%eax
f0120443:	83 f8 01             	cmp    $0x1,%eax
f0120446:	74 17                	je     f012045f <test_kfree+0xc72>
f0120448:	83 ec 04             	sub    $0x4,%esp
f012044b:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0120450:	68 43 05 00 00       	push   $0x543
f0120455:	68 5a ac 13 f0       	push   $0xf013ac5a
f012045a:	e8 9c fd fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012045f:	e8 5b c4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120464:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012046a:	e8 cd 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012046f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0120475:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f012047b:	83 ec 0c             	sub    $0xc,%esp
f012047e:	50                   	push   %eax
f012047f:	e8 3c 74 fe ff       	call   f01078c0 <kfree>
f0120484:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120487:	e8 b0 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012048c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0120492:	74 17                	je     f01204ab <test_kfree+0xcbe>
f0120494:	83 ec 04             	sub    $0x4,%esp
f0120497:	68 74 ac 13 f0       	push   $0xf013ac74
f012049c:	68 49 05 00 00       	push   $0x549
f01204a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01204a6:	e8 50 fd fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01204ab:	e8 0f c4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01204b0:	89 c2                	mov    %eax,%edx
f01204b2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01204b8:	29 c2                	sub    %eax,%edx
f01204ba:	89 d0                	mov    %edx,%eax
f01204bc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01204c1:	74 17                	je     f01204da <test_kfree+0xced>
f01204c3:	83 ec 04             	sub    $0x4,%esp
f01204c6:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01204cb:	68 4a 05 00 00       	push   $0x54a
f01204d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01204d5:	e8 21 fd fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01204da:	e8 e0 c3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01204df:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204e5:	e8 52 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01204ea:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01204f0:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f01204f6:	83 ec 0c             	sub    $0xc,%esp
f01204f9:	50                   	push   %eax
f01204fa:	e8 c1 73 fe ff       	call   f01078c0 <kfree>
f01204ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120502:	e8 35 38 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120507:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012050d:	74 17                	je     f0120526 <test_kfree+0xd39>
f012050f:	83 ec 04             	sub    $0x4,%esp
f0120512:	68 74 ac 13 f0       	push   $0xf013ac74
f0120517:	68 50 05 00 00       	push   $0x550
f012051c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120521:	e8 d5 fc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120526:	e8 94 c3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012052b:	89 c2                	mov    %eax,%edx
f012052d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120533:	29 c2                	sub    %eax,%edx
f0120535:	89 d0                	mov    %edx,%eax
f0120537:	3d 00 06 00 00       	cmp    $0x600,%eax
f012053c:	74 17                	je     f0120555 <test_kfree+0xd68>
f012053e:	83 ec 04             	sub    $0x4,%esp
f0120541:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0120546:	68 51 05 00 00       	push   $0x551
f012054b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120550:	e8 a6 fc fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0120555:	83 ec 0c             	sub    $0xc,%esp
f0120558:	68 1c b4 13 f0       	push   $0xf013b41c
f012055d:	e8 20 07 fe ff       	call   f0100c82 <cprintf>
f0120562:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0120565:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012056b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012056e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120575:	eb 1e                	jmp    f0120595 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f0120577:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012057d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120580:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120583:	01 c8                	add    %ecx,%eax
f0120585:	8a 00                	mov    (%eax),%al
f0120587:	0f be c0             	movsbl %al,%eax
f012058a:	01 d0                	add    %edx,%eax
f012058c:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120592:	ff 45 f4             	incl   -0xc(%ebp)
f0120595:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012059b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012059e:	7f d7                	jg     f0120577 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01205a0:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01205a6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01205ac:	89 c1                	mov    %eax,%ecx
f01205ae:	01 c9                	add    %ecx,%ecx
f01205b0:	01 c8                	add    %ecx,%eax
f01205b2:	39 c2                	cmp    %eax,%edx
f01205b4:	74 17                	je     f01205cd <test_kfree+0xde0>
f01205b6:	83 ec 04             	sub    $0x4,%esp
f01205b9:	68 40 b4 13 f0       	push   $0xf013b440
f01205be:	68 5e 05 00 00       	push   $0x55e
f01205c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01205c8:	e8 2e fc fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01205cd:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01205d3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01205d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01205dd:	eb 1e                	jmp    f01205fd <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01205df:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01205e5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01205e8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01205eb:	01 c8                	add    %ecx,%eax
f01205ed:	8a 00                	mov    (%eax),%al
f01205ef:	0f be c0             	movsbl %al,%eax
f01205f2:	01 d0                	add    %edx,%eax
f01205f4:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01205fa:	ff 45 f4             	incl   -0xc(%ebp)
f01205fd:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120603:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120606:	7f d7                	jg     f01205df <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120608:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012060e:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120614:	c1 e2 02             	shl    $0x2,%edx
f0120617:	39 d0                	cmp    %edx,%eax
f0120619:	74 17                	je     f0120632 <test_kfree+0xe45>
f012061b:	83 ec 04             	sub    $0x4,%esp
f012061e:	68 40 b4 13 f0       	push   $0xf013b440
f0120623:	68 66 05 00 00       	push   $0x566
f0120628:	68 5a ac 13 f0       	push   $0xf013ac5a
f012062d:	e8 c9 fb fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0120632:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120638:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012063b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120642:	eb 1e                	jmp    f0120662 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f0120644:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012064a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012064d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120650:	01 c8                	add    %ecx,%eax
f0120652:	8a 00                	mov    (%eax),%al
f0120654:	0f be c0             	movsbl %al,%eax
f0120657:	01 d0                	add    %edx,%eax
f0120659:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012065f:	ff 45 f4             	incl   -0xc(%ebp)
f0120662:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120668:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012066b:	7f d7                	jg     f0120644 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012066d:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f0120673:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0120679:	89 d0                	mov    %edx,%eax
f012067b:	c1 e0 02             	shl    $0x2,%eax
f012067e:	01 d0                	add    %edx,%eax
f0120680:	39 c1                	cmp    %eax,%ecx
f0120682:	74 17                	je     f012069b <test_kfree+0xeae>
f0120684:	83 ec 04             	sub    $0x4,%esp
f0120687:	68 40 b4 13 f0       	push   $0xf013b440
f012068c:	68 6e 05 00 00       	push   $0x56e
f0120691:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120696:	e8 60 fb fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012069b:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01206a1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01206a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01206ab:	eb 1e                	jmp    f01206cb <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01206ad:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01206b3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01206b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01206b9:	01 c8                	add    %ecx,%eax
f01206bb:	8a 00                	mov    (%eax),%al
f01206bd:	0f be c0             	movsbl %al,%eax
f01206c0:	01 d0                	add    %edx,%eax
f01206c2:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01206c8:	ff 45 f4             	incl   -0xc(%ebp)
f01206cb:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01206d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01206d4:	7f d7                	jg     f01206ad <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01206d6:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01206dc:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01206e2:	89 d0                	mov    %edx,%eax
f01206e4:	01 c0                	add    %eax,%eax
f01206e6:	01 d0                	add    %edx,%eax
f01206e8:	01 c0                	add    %eax,%eax
f01206ea:	01 d0                	add    %edx,%eax
f01206ec:	39 c1                	cmp    %eax,%ecx
f01206ee:	74 17                	je     f0120707 <test_kfree+0xf1a>
f01206f0:	83 ec 04             	sub    $0x4,%esp
f01206f3:	68 40 b4 13 f0       	push   $0xf013b440
f01206f8:	68 76 05 00 00       	push   $0x576
f01206fd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120702:	e8 f4 fa fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f0120707:	83 ec 0c             	sub    $0xc,%esp
f012070a:	68 73 b4 13 f0       	push   $0xf013b473
f012070f:	e8 6e 05 fe ff       	call   f0100c82 <cprintf>
f0120714:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120717:	e8 a3 c1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012071c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012071f:	e8 18 36 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120724:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120727:	83 ec 0c             	sub    $0xc,%esp
f012072a:	68 00 50 00 00       	push   $0x5000
f012072f:	e8 ca 70 fe ff       	call   f01077fe <kmalloc>
f0120734:	83 c4 10             	add    $0x10,%esp
f0120737:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012073d:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120743:	89 c1                	mov    %eax,%ecx
f0120745:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012074c:	10 00 00 
f012074f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120755:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012075a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0120760:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120766:	ba 00 00 00 00       	mov    $0x0,%edx
f012076b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0120771:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120777:	29 d0                	sub    %edx,%eax
f0120779:	89 c3                	mov    %eax,%ebx
f012077b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0120782:	10 00 00 
f0120785:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012078a:	0f b6 d0             	movzbl %al,%edx
f012078d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120793:	01 d0                	add    %edx,%eax
f0120795:	48                   	dec    %eax
f0120796:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012079c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01207a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01207a7:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01207ad:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01207b3:	29 d0                	sub    %edx,%eax
f01207b5:	01 c3                	add    %eax,%ebx
f01207b7:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01207be:	10 00 00 
f01207c1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01207c6:	0f b6 c0             	movzbl %al,%eax
f01207c9:	c1 e0 04             	shl    $0x4,%eax
f01207cc:	89 c2                	mov    %eax,%edx
f01207ce:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01207d4:	01 d0                	add    %edx,%eax
f01207d6:	48                   	dec    %eax
f01207d7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01207dd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01207e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01207e8:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01207ee:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01207f4:	29 d0                	sub    %edx,%eax
f01207f6:	01 d8                	add    %ebx,%eax
f01207f8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01207fd:	39 c1                	cmp    %eax,%ecx
f01207ff:	74 17                	je     f0120818 <test_kfree+0x102b>
f0120801:	83 ec 04             	sub    $0x4,%esp
f0120804:	68 40 ad 13 f0       	push   $0xf013ad40
f0120809:	68 80 05 00 00       	push   $0x580
f012080e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120813:	e8 e3 f9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120818:	e8 1f 35 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012081d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120820:	74 17                	je     f0120839 <test_kfree+0x104c>
f0120822:	83 ec 04             	sub    $0x4,%esp
f0120825:	68 74 ac 13 f0       	push   $0xf013ac74
f012082a:	68 81 05 00 00       	push   $0x581
f012082f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120834:	e8 c2 f9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120839:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012083c:	e8 7e c0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120841:	29 c3                	sub    %eax,%ebx
f0120843:	89 d8                	mov    %ebx,%eax
f0120845:	83 f8 05             	cmp    $0x5,%eax
f0120848:	74 17                	je     f0120861 <test_kfree+0x1074>
f012084a:	83 ec 04             	sub    $0x4,%esp
f012084d:	68 dc ac 13 f0       	push   $0xf013acdc
f0120852:	68 82 05 00 00       	push   $0x582
f0120857:	68 5a ac 13 f0       	push   $0xf013ac5a
f012085c:	e8 9a f9 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120861:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f0120868:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012086b:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120871:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012087b:	eb 0e                	jmp    f012088b <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f012087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120880:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120883:	01 d0                	add    %edx,%eax
f0120885:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120888:	ff 45 f4             	incl   -0xc(%ebp)
f012088b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0120891:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120894:	7f e7                	jg     f012087d <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120896:	e8 24 c0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012089b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012089e:	e8 99 34 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01208a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01208a6:	83 ec 0c             	sub    $0xc,%esp
f01208a9:	68 00 00 10 00       	push   $0x100000
f01208ae:	e8 4b 6f fe ff       	call   f01077fe <kmalloc>
f01208b3:	83 c4 10             	add    $0x10,%esp
f01208b6:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01208bc:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01208c2:	89 c1                	mov    %eax,%ecx
f01208c4:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01208cb:	10 00 00 
f01208ce:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01208d4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01208d9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01208df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01208e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01208ea:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01208f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01208f6:	29 d0                	sub    %edx,%eax
f01208f8:	89 c3                	mov    %eax,%ebx
f01208fa:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0120901:	10 00 00 
f0120904:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120909:	0f b6 d0             	movzbl %al,%edx
f012090c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0120912:	01 d0                	add    %edx,%eax
f0120914:	48                   	dec    %eax
f0120915:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f012091b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120921:	ba 00 00 00 00       	mov    $0x0,%edx
f0120926:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012092c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120932:	29 d0                	sub    %edx,%eax
f0120934:	01 c3                	add    %eax,%ebx
f0120936:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012093d:	10 00 00 
f0120940:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120945:	0f b6 c0             	movzbl %al,%eax
f0120948:	c1 e0 04             	shl    $0x4,%eax
f012094b:	89 c2                	mov    %eax,%edx
f012094d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120953:	01 d0                	add    %edx,%eax
f0120955:	48                   	dec    %eax
f0120956:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012095c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120962:	ba 00 00 00 00       	mov    $0x0,%edx
f0120967:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012096d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120973:	29 d0                	sub    %edx,%eax
f0120975:	01 d8                	add    %ebx,%eax
f0120977:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012097c:	39 c1                	cmp    %eax,%ecx
f012097e:	74 17                	je     f0120997 <test_kfree+0x11aa>
f0120980:	83 ec 04             	sub    $0x4,%esp
f0120983:	68 40 ad 13 f0       	push   $0xf013ad40
f0120988:	68 8e 05 00 00       	push   $0x58e
f012098d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120992:	e8 64 f8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120997:	e8 a0 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012099c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012099f:	74 17                	je     f01209b8 <test_kfree+0x11cb>
f01209a1:	83 ec 04             	sub    $0x4,%esp
f01209a4:	68 74 ac 13 f0       	push   $0xf013ac74
f01209a9:	68 8f 05 00 00       	push   $0x58f
f01209ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f01209b3:	e8 43 f8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209bb:	e8 ff be fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01209c0:	29 c3                	sub    %eax,%ebx
f01209c2:	89 d8                	mov    %ebx,%eax
f01209c4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01209c9:	74 17                	je     f01209e2 <test_kfree+0x11f5>
f01209cb:	83 ec 04             	sub    $0x4,%esp
f01209ce:	68 dc ac 13 f0       	push   $0xf013acdc
f01209d3:	68 90 05 00 00       	push   $0x590
f01209d8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01209dd:	e8 19 f8 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01209e2:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f01209e9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01209ec:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01209f2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01209f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209fc:	eb 0e                	jmp    f0120a0c <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f01209fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a01:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a04:	01 d0                	add    %edx,%eax
f0120a06:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120a09:	ff 45 f4             	incl   -0xc(%ebp)
f0120a0c:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0120a12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a15:	7f e7                	jg     f01209fe <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120a17:	e8 ac 66 ff ff       	call   f01170c8 <isKHeapPlacementStrategyNEXTFIT>
f0120a1c:	84 c0                	test   %al,%al
f0120a1e:	0f 84 ac 06 00 00    	je     f01210d0 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120a24:	e8 96 be fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120a29:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a2c:	e8 0b 33 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120a31:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120a34:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0120a3b:	10 00 00 
f0120a3e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120a44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a49:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0120a4f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120a55:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a5a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0120a60:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120a66:	29 d0                	sub    %edx,%eax
f0120a68:	89 c1                	mov    %eax,%ecx
f0120a6a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0120a71:	10 00 00 
f0120a74:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120a79:	0f b6 d0             	movzbl %al,%edx
f0120a7c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120a82:	01 d0                	add    %edx,%eax
f0120a84:	48                   	dec    %eax
f0120a85:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0120a8b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120a91:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a96:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120a9c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120aa2:	29 d0                	sub    %edx,%eax
f0120aa4:	01 c1                	add    %eax,%ecx
f0120aa6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120aad:	10 00 00 
f0120ab0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120ab5:	0f b6 c0             	movzbl %al,%eax
f0120ab8:	c1 e0 04             	shl    $0x4,%eax
f0120abb:	89 c2                	mov    %eax,%edx
f0120abd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120ac3:	01 d0                	add    %edx,%eax
f0120ac5:	48                   	dec    %eax
f0120ac6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120acc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120ad2:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ad7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120add:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120ae3:	29 d0                	sub    %edx,%eax
f0120ae5:	01 c8                	add    %ecx,%eax
f0120ae7:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120aec:	29 c2                	sub    %eax,%edx
f0120aee:	89 d0                	mov    %edx,%eax
f0120af0:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120af6:	83 ec 0c             	sub    $0xc,%esp
f0120af9:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0120aff:	e8 fa 6c fe ff       	call   f01077fe <kmalloc>
f0120b04:	83 c4 10             	add    $0x10,%esp
f0120b07:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b0d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120b13:	89 c1                	mov    %eax,%ecx
f0120b15:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120b1c:	10 00 00 
f0120b1f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120b25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120b2a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0120b30:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b3b:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0120b41:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0120b47:	29 d0                	sub    %edx,%eax
f0120b49:	89 c3                	mov    %eax,%ebx
f0120b4b:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0120b52:	10 00 00 
f0120b55:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120b5a:	0f b6 d0             	movzbl %al,%edx
f0120b5d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0120b63:	01 d0                	add    %edx,%eax
f0120b65:	48                   	dec    %eax
f0120b66:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0120b6c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120b72:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b77:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0120b7d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0120b83:	29 d0                	sub    %edx,%eax
f0120b85:	01 c3                	add    %eax,%ebx
f0120b87:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0120b8e:	10 00 00 
f0120b91:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120b96:	0f b6 c0             	movzbl %al,%eax
f0120b99:	c1 e0 04             	shl    $0x4,%eax
f0120b9c:	89 c2                	mov    %eax,%edx
f0120b9e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120ba4:	01 d0                	add    %edx,%eax
f0120ba6:	48                   	dec    %eax
f0120ba7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120bad:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bb8:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0120bbe:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bc4:	29 d0                	sub    %edx,%eax
f0120bc6:	01 d8                	add    %ebx,%eax
f0120bc8:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120bcd:	39 c1                	cmp    %eax,%ecx
f0120bcf:	74 17                	je     f0120be8 <test_kfree+0x13fb>
f0120bd1:	83 ec 04             	sub    $0x4,%esp
f0120bd4:	68 40 ad 13 f0       	push   $0xf013ad40
f0120bd9:	68 9f 05 00 00       	push   $0x59f
f0120bde:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120be3:	e8 13 f6 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120be8:	e8 4f 31 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120bed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bf0:	74 17                	je     f0120c09 <test_kfree+0x141c>
f0120bf2:	83 ec 04             	sub    $0x4,%esp
f0120bf5:	68 74 ac 13 f0       	push   $0xf013ac74
f0120bfa:	68 a0 05 00 00       	push   $0x5a0
f0120bff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120c04:	e8 f2 f5 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c09:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c0c:	e8 ae bc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120c11:	29 c3                	sub    %eax,%ebx
f0120c13:	89 da                	mov    %ebx,%edx
f0120c15:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120c1b:	c1 e8 0c             	shr    $0xc,%eax
f0120c1e:	39 c2                	cmp    %eax,%edx
f0120c20:	74 17                	je     f0120c39 <test_kfree+0x144c>
f0120c22:	83 ec 04             	sub    $0x4,%esp
f0120c25:	68 dc ac 13 f0       	push   $0xf013acdc
f0120c2a:	68 a1 05 00 00       	push   $0x5a1
f0120c2f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120c34:	e8 c2 f5 fd ff       	call   f01001fb <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120c39:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120c3f:	48                   	dec    %eax
f0120c40:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120c46:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120c4c:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120c4f:	e8 6b bc fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120c54:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c57:	e8 e0 30 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120c5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120c5f:	83 ec 0c             	sub    $0xc,%esp
f0120c62:	68 00 00 30 00       	push   $0x300000
f0120c67:	e8 92 6b fe ff       	call   f01077fe <kmalloc>
f0120c6c:	83 c4 10             	add    $0x10,%esp
f0120c6f:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c75:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120c7b:	89 c1                	mov    %eax,%ecx
f0120c7d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0120c84:	10 00 00 
f0120c87:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120c8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c92:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120c98:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120c9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ca3:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120ca9:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120caf:	29 d0                	sub    %edx,%eax
f0120cb1:	89 c3                	mov    %eax,%ebx
f0120cb3:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120cba:	10 00 00 
f0120cbd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120cc2:	0f b6 d0             	movzbl %al,%edx
f0120cc5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120ccb:	01 d0                	add    %edx,%eax
f0120ccd:	48                   	dec    %eax
f0120cce:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120cd4:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120cda:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cdf:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120ce5:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120ceb:	29 d0                	sub    %edx,%eax
f0120ced:	01 c3                	add    %eax,%ebx
f0120cef:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120cf6:	10 00 00 
f0120cf9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120cfe:	0f b6 c0             	movzbl %al,%eax
f0120d01:	c1 e0 04             	shl    $0x4,%eax
f0120d04:	89 c2                	mov    %eax,%edx
f0120d06:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120d0c:	01 d0                	add    %edx,%eax
f0120d0e:	48                   	dec    %eax
f0120d0f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120d15:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120d1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d20:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120d26:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120d2c:	29 d0                	sub    %edx,%eax
f0120d2e:	01 d8                	add    %ebx,%eax
f0120d30:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120d35:	39 c1                	cmp    %eax,%ecx
f0120d37:	74 17                	je     f0120d50 <test_kfree+0x1563>
f0120d39:	83 ec 04             	sub    $0x4,%esp
f0120d3c:	68 40 ad 13 f0       	push   $0xf013ad40
f0120d41:	68 ae 05 00 00       	push   $0x5ae
f0120d46:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120d4b:	e8 ab f4 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d50:	e8 e7 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120d55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d58:	74 17                	je     f0120d71 <test_kfree+0x1584>
f0120d5a:	83 ec 04             	sub    $0x4,%esp
f0120d5d:	68 74 ac 13 f0       	push   $0xf013ac74
f0120d62:	68 af 05 00 00       	push   $0x5af
f0120d67:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120d6c:	e8 8a f4 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d71:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d74:	e8 46 bb fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120d79:	29 c3                	sub    %eax,%ebx
f0120d7b:	89 d8                	mov    %ebx,%eax
f0120d7d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120d82:	74 17                	je     f0120d9b <test_kfree+0x15ae>
f0120d84:	83 ec 04             	sub    $0x4,%esp
f0120d87:	68 dc ac 13 f0       	push   $0xf013acdc
f0120d8c:	68 b0 05 00 00       	push   $0x5b0
f0120d91:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120d96:	e8 60 f4 fd ff       	call   f01001fb <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120d9b:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0120da2:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120da5:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120dab:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120dae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120db5:	eb 0e                	jmp    f0120dc5 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120db7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dba:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120dbd:	01 d0                	add    %edx,%eax
f0120dbf:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120dc2:	ff 45 f4             	incl   -0xc(%ebp)
f0120dc5:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120dcb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120dce:	7f e7                	jg     f0120db7 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120dd0:	e8 ea ba fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120dd5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120dd8:	e8 5f 2f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120ddd:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120de0:	83 ec 0c             	sub    $0xc,%esp
f0120de3:	68 00 08 00 00       	push   $0x800
f0120de8:	e8 11 6a fe ff       	call   f01077fe <kmalloc>
f0120ded:	83 c4 10             	add    $0x10,%esp
f0120df0:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120df6:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120dfc:	89 c1                	mov    %eax,%ecx
f0120dfe:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120e05:	10 00 00 
f0120e08:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120e0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e13:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120e19:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120e1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e24:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120e2a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120e30:	29 d0                	sub    %edx,%eax
f0120e32:	89 c3                	mov    %eax,%ebx
f0120e34:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120e3b:	10 00 00 
f0120e3e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e43:	0f b6 d0             	movzbl %al,%edx
f0120e46:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120e4c:	01 d0                	add    %edx,%eax
f0120e4e:	48                   	dec    %eax
f0120e4f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120e55:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120e5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e60:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120e66:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120e6c:	29 d0                	sub    %edx,%eax
f0120e6e:	01 c3                	add    %eax,%ebx
f0120e70:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120e77:	10 00 00 
f0120e7a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120e7f:	0f b6 c0             	movzbl %al,%eax
f0120e82:	c1 e0 04             	shl    $0x4,%eax
f0120e85:	89 c2                	mov    %eax,%edx
f0120e87:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120e8d:	01 d0                	add    %edx,%eax
f0120e8f:	48                   	dec    %eax
f0120e90:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120e96:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120e9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ea1:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120ea7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120ead:	29 d0                	sub    %edx,%eax
f0120eaf:	01 d8                	add    %ebx,%eax
f0120eb1:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120eb6:	39 c1                	cmp    %eax,%ecx
f0120eb8:	74 17                	je     f0120ed1 <test_kfree+0x16e4>
f0120eba:	83 ec 04             	sub    $0x4,%esp
f0120ebd:	68 40 ad 13 f0       	push   $0xf013ad40
f0120ec2:	68 bc 05 00 00       	push   $0x5bc
f0120ec7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120ecc:	e8 2a f3 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ed1:	e8 66 2e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120ed6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ed9:	74 17                	je     f0120ef2 <test_kfree+0x1705>
f0120edb:	83 ec 04             	sub    $0x4,%esp
f0120ede:	68 74 ac 13 f0       	push   $0xf013ac74
f0120ee3:	68 bd 05 00 00       	push   $0x5bd
f0120ee8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120eed:	e8 09 f3 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ef2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ef5:	e8 c5 b9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120efa:	29 c3                	sub    %eax,%ebx
f0120efc:	89 d8                	mov    %ebx,%eax
f0120efe:	83 f8 01             	cmp    $0x1,%eax
f0120f01:	74 17                	je     f0120f1a <test_kfree+0x172d>
f0120f03:	83 ec 04             	sub    $0x4,%esp
f0120f06:	68 dc ac 13 f0       	push   $0xf013acdc
f0120f0b:	68 be 05 00 00       	push   $0x5be
f0120f10:	68 5a ac 13 f0       	push   $0xf013ac5a
f0120f15:	e8 e1 f2 fd ff       	call   f01001fb <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120f1a:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0120f21:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120f24:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120f2a:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120f2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f34:	eb 0e                	jmp    f0120f44 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0120f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f39:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120f3c:	01 d0                	add    %edx,%eax
f0120f3e:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120f41:	ff 45 f4             	incl   -0xc(%ebp)
f0120f44:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0120f4a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f4d:	7f e7                	jg     f0120f36 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f4f:	e8 6b b9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0120f54:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f57:	e8 e0 2d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0120f5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120f5f:	83 ec 0c             	sub    $0xc,%esp
f0120f62:	68 00 00 10 00       	push   $0x100000
f0120f67:	e8 92 68 fe ff       	call   f01077fe <kmalloc>
f0120f6c:	83 c4 10             	add    $0x10,%esp
f0120f6f:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f75:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120f7b:	89 c1                	mov    %eax,%ecx
f0120f7d:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120f84:	10 00 00 
f0120f87:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0120f8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f92:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120f98:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fa3:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120fa9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120faf:	29 d0                	sub    %edx,%eax
f0120fb1:	89 c3                	mov    %eax,%ebx
f0120fb3:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120fba:	10 00 00 
f0120fbd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120fc2:	0f b6 d0             	movzbl %al,%edx
f0120fc5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120fcb:	01 d0                	add    %edx,%eax
f0120fcd:	48                   	dec    %eax
f0120fce:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120fd4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120fda:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fdf:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120fe5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120feb:	29 d0                	sub    %edx,%eax
f0120fed:	01 c3                	add    %eax,%ebx
f0120fef:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0120ff6:	10 00 00 
f0120ff9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0120ffe:	0f b6 c0             	movzbl %al,%eax
f0121001:	c1 e0 04             	shl    $0x4,%eax
f0121004:	89 c2                	mov    %eax,%edx
f0121006:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012100c:	01 d0                	add    %edx,%eax
f012100e:	48                   	dec    %eax
f012100f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121015:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012101b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121020:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121026:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012102c:	29 d0                	sub    %edx,%eax
f012102e:	01 d8                	add    %ebx,%eax
f0121030:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121035:	39 c1                	cmp    %eax,%ecx
f0121037:	74 17                	je     f0121050 <test_kfree+0x1863>
f0121039:	83 ec 04             	sub    $0x4,%esp
f012103c:	68 40 ad 13 f0       	push   $0xf013ad40
f0121041:	68 ca 05 00 00       	push   $0x5ca
f0121046:	68 5a ac 13 f0       	push   $0xf013ac5a
f012104b:	e8 ab f1 fd ff       	call   f01001fb <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121050:	e8 e7 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121055:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121058:	74 17                	je     f0121071 <test_kfree+0x1884>
f012105a:	83 ec 04             	sub    $0x4,%esp
f012105d:	68 74 ac 13 f0       	push   $0xf013ac74
f0121062:	68 cb 05 00 00       	push   $0x5cb
f0121067:	68 5a ac 13 f0       	push   $0xf013ac5a
f012106c:	e8 8a f1 fd ff       	call   f01001fb <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121071:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121074:	e8 46 b8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121079:	29 c3                	sub    %eax,%ebx
f012107b:	89 d8                	mov    %ebx,%eax
f012107d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121082:	74 17                	je     f012109b <test_kfree+0x18ae>
f0121084:	83 ec 04             	sub    $0x4,%esp
f0121087:	68 dc ac 13 f0       	push   $0xf013acdc
f012108c:	68 cc 05 00 00       	push   $0x5cc
f0121091:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121096:	e8 60 f1 fd ff       	call   f01001fb <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f012109b:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f01210a2:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01210a5:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01210ab:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01210ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210b5:	eb 0e                	jmp    f01210c5 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f01210b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210ba:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210bd:	01 d0                	add    %edx,%eax
f01210bf:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f01210c2:	ff 45 f4             	incl   -0xc(%ebp)
f01210c5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01210cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210ce:	7f e7                	jg     f01210b7 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f01210d0:	83 ec 0c             	sub    $0xc,%esp
f01210d3:	68 7a b4 13 f0       	push   $0xf013b47a
f01210d8:	e8 a5 fb fd ff       	call   f0100c82 <cprintf>
f01210dd:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01210e0:	e8 da b7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01210e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01210e8:	e8 4f 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01210ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01210f0:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01210f6:	83 ec 0c             	sub    $0xc,%esp
f01210f9:	50                   	push   %eax
f01210fa:	e8 c1 67 fe ff       	call   f01078c0 <kfree>
f01210ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121102:	e8 35 2c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121107:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012110a:	74 17                	je     f0121123 <test_kfree+0x1936>
f012110c:	83 ec 04             	sub    $0x4,%esp
f012110f:	68 74 ac 13 f0       	push   $0xf013ac74
f0121114:	68 dd 05 00 00       	push   $0x5dd
f0121119:	68 5a ac 13 f0       	push   $0xf013ac5a
f012111e:	e8 d8 f0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121123:	e8 97 b7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121128:	89 c2                	mov    %eax,%edx
f012112a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012112d:	29 c2                	sub    %eax,%edx
f012112f:	89 d0                	mov    %edx,%eax
f0121131:	83 f8 02             	cmp    $0x2,%eax
f0121134:	74 17                	je     f012114d <test_kfree+0x1960>
f0121136:	83 ec 04             	sub    $0x4,%esp
f0121139:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012113e:	68 de 05 00 00       	push   $0x5de
f0121143:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121148:	e8 ae f0 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012114d:	e8 6d b7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121152:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121155:	e8 e2 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012115a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f012115d:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121163:	83 ec 0c             	sub    $0xc,%esp
f0121166:	50                   	push   %eax
f0121167:	e8 54 67 fe ff       	call   f01078c0 <kfree>
f012116c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012116f:	e8 c8 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121174:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121177:	74 17                	je     f0121190 <test_kfree+0x19a3>
f0121179:	83 ec 04             	sub    $0x4,%esp
f012117c:	68 74 ac 13 f0       	push   $0xf013ac74
f0121181:	68 e4 05 00 00       	push   $0x5e4
f0121186:	68 5a ac 13 f0       	push   $0xf013ac5a
f012118b:	e8 6b f0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121190:	e8 2a b7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121195:	89 c2                	mov    %eax,%edx
f0121197:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012119a:	29 c2                	sub    %eax,%edx
f012119c:	89 d0                	mov    %edx,%eax
f012119e:	3d 00 03 00 00       	cmp    $0x300,%eax
f01211a3:	74 17                	je     f01211bc <test_kfree+0x19cf>
f01211a5:	83 ec 04             	sub    $0x4,%esp
f01211a8:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01211ad:	68 e5 05 00 00       	push   $0x5e5
f01211b2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01211b7:	e8 3f f0 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211bc:	e8 fe b6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01211c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211c4:	e8 73 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211c9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01211cc:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01211d2:	83 ec 0c             	sub    $0xc,%esp
f01211d5:	50                   	push   %eax
f01211d6:	e8 e5 66 fe ff       	call   f01078c0 <kfree>
f01211db:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211de:	e8 59 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01211e3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211e6:	74 17                	je     f01211ff <test_kfree+0x1a12>
f01211e8:	83 ec 04             	sub    $0x4,%esp
f01211eb:	68 74 ac 13 f0       	push   $0xf013ac74
f01211f0:	68 eb 05 00 00       	push   $0x5eb
f01211f5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01211fa:	e8 fc ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01211ff:	e8 bb b6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121204:	89 c2                	mov    %eax,%edx
f0121206:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121209:	29 c2                	sub    %eax,%edx
f012120b:	89 d0                	mov    %edx,%eax
f012120d:	83 f8 01             	cmp    $0x1,%eax
f0121210:	74 17                	je     f0121229 <test_kfree+0x1a3c>
f0121212:	83 ec 04             	sub    $0x4,%esp
f0121215:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012121a:	68 ec 05 00 00       	push   $0x5ec
f012121f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121224:	e8 d2 ef fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121229:	e8 91 b6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012122e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121231:	e8 06 2b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121236:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121239:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012123f:	83 ec 0c             	sub    $0xc,%esp
f0121242:	50                   	push   %eax
f0121243:	e8 78 66 fe ff       	call   f01078c0 <kfree>
f0121248:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012124b:	e8 ec 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121250:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121253:	74 17                	je     f012126c <test_kfree+0x1a7f>
f0121255:	83 ec 04             	sub    $0x4,%esp
f0121258:	68 74 ac 13 f0       	push   $0xf013ac74
f012125d:	68 f2 05 00 00       	push   $0x5f2
f0121262:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121267:	e8 8f ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012126c:	e8 4e b6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121271:	89 c2                	mov    %eax,%edx
f0121273:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121276:	29 c2                	sub    %eax,%edx
f0121278:	89 d0                	mov    %edx,%eax
f012127a:	83 f8 04             	cmp    $0x4,%eax
f012127d:	74 17                	je     f0121296 <test_kfree+0x1aa9>
f012127f:	83 ec 04             	sub    $0x4,%esp
f0121282:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121287:	68 f3 05 00 00       	push   $0x5f3
f012128c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121291:	e8 65 ef fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121296:	e8 24 b6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012129b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012129e:	e8 99 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01212a6:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01212ac:	83 ec 0c             	sub    $0xc,%esp
f01212af:	50                   	push   %eax
f01212b0:	e8 0b 66 fe ff       	call   f01078c0 <kfree>
f01212b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212b8:	e8 7f 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01212bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212c0:	74 17                	je     f01212d9 <test_kfree+0x1aec>
f01212c2:	83 ec 04             	sub    $0x4,%esp
f01212c5:	68 74 ac 13 f0       	push   $0xf013ac74
f01212ca:	68 f9 05 00 00       	push   $0x5f9
f01212cf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01212d4:	e8 22 ef fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01212d9:	e8 e1 b5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01212de:	89 c2                	mov    %eax,%edx
f01212e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212e3:	29 c2                	sub    %eax,%edx
f01212e5:	89 d0                	mov    %edx,%eax
f01212e7:	83 f8 05             	cmp    $0x5,%eax
f01212ea:	74 17                	je     f0121303 <test_kfree+0x1b16>
f01212ec:	83 ec 04             	sub    $0x4,%esp
f01212ef:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01212f4:	68 fa 05 00 00       	push   $0x5fa
f01212f9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01212fe:	e8 f8 ee fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121303:	e8 b7 b5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121308:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012130b:	e8 2c 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121310:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121313:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121319:	83 ec 0c             	sub    $0xc,%esp
f012131c:	50                   	push   %eax
f012131d:	e8 9e 65 fe ff       	call   f01078c0 <kfree>
f0121322:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121325:	e8 12 2a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012132a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012132d:	74 17                	je     f0121346 <test_kfree+0x1b59>
f012132f:	83 ec 04             	sub    $0x4,%esp
f0121332:	68 74 ac 13 f0       	push   $0xf013ac74
f0121337:	68 00 06 00 00       	push   $0x600
f012133c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121341:	e8 b5 ee fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121346:	e8 74 b5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012134b:	89 c2                	mov    %eax,%edx
f012134d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121350:	29 c2                	sub    %eax,%edx
f0121352:	89 d0                	mov    %edx,%eax
f0121354:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121359:	74 17                	je     f0121372 <test_kfree+0x1b85>
f012135b:	83 ec 04             	sub    $0x4,%esp
f012135e:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121363:	68 01 06 00 00       	push   $0x601
f0121368:	68 5a ac 13 f0       	push   $0xf013ac5a
f012136d:	e8 89 ee fd ff       	call   f01001fb <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0121372:	e8 51 5d ff ff       	call   f01170c8 <isKHeapPlacementStrategyNEXTFIT>
f0121377:	84 c0                	test   %al,%al
f0121379:	0f 84 80 02 00 00    	je     f01215ff <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012137f:	e8 3b b5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121384:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121387:	e8 b0 29 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012138c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f012138f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121395:	83 ec 0c             	sub    $0xc,%esp
f0121398:	50                   	push   %eax
f0121399:	e8 22 65 fe ff       	call   f01078c0 <kfree>
f012139e:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01213a1:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01213a8:	10 00 00 
f01213ab:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01213b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01213b6:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01213bc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01213c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01213c7:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01213cd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01213d3:	29 d0                	sub    %edx,%eax
f01213d5:	89 c1                	mov    %eax,%ecx
f01213d7:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01213de:	10 00 00 
f01213e1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01213e6:	0f b6 d0             	movzbl %al,%edx
f01213e9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01213ef:	01 d0                	add    %edx,%eax
f01213f1:	48                   	dec    %eax
f01213f2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f01213f8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01213fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0121403:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0121409:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012140f:	29 d0                	sub    %edx,%eax
f0121411:	01 c1                	add    %eax,%ecx
f0121413:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f012141a:	10 00 00 
f012141d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121422:	0f b6 c0             	movzbl %al,%eax
f0121425:	c1 e0 04             	shl    $0x4,%eax
f0121428:	89 c2                	mov    %eax,%edx
f012142a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0121430:	01 d0                	add    %edx,%eax
f0121432:	48                   	dec    %eax
f0121433:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0121439:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012143f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121444:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012144a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121450:	29 d0                	sub    %edx,%eax
f0121452:	01 c8                	add    %ecx,%eax
f0121454:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121459:	29 c2                	sub    %eax,%edx
f012145b:	89 d0                	mov    %edx,%eax
f012145d:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121463:	e8 d4 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121468:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012146b:	74 17                	je     f0121484 <test_kfree+0x1c97>
f012146d:	83 ec 04             	sub    $0x4,%esp
f0121470:	68 74 ac 13 f0       	push   $0xf013ac74
f0121475:	68 0b 06 00 00       	push   $0x60b
f012147a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012147f:	e8 77 ed fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0121484:	e8 36 b4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121489:	89 c2                	mov    %eax,%edx
f012148b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012148e:	29 c2                	sub    %eax,%edx
f0121490:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121496:	c1 e8 0c             	shr    $0xc,%eax
f0121499:	39 c2                	cmp    %eax,%edx
f012149b:	74 17                	je     f01214b4 <test_kfree+0x1cc7>
f012149d:	83 ec 04             	sub    $0x4,%esp
f01214a0:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01214a5:	68 0c 06 00 00       	push   $0x60c
f01214aa:	68 5a ac 13 f0       	push   $0xf013ac5a
f01214af:	e8 47 ed fd ff       	call   f01001fb <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01214b4:	e8 06 b4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01214b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01214bc:	e8 7b 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01214c4:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01214ca:	83 ec 0c             	sub    $0xc,%esp
f01214cd:	50                   	push   %eax
f01214ce:	e8 ed 63 fe ff       	call   f01078c0 <kfree>
f01214d3:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01214d6:	e8 61 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01214db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01214de:	74 17                	je     f01214f7 <test_kfree+0x1d0a>
f01214e0:	83 ec 04             	sub    $0x4,%esp
f01214e3:	68 74 ac 13 f0       	push   $0xf013ac74
f01214e8:	68 12 06 00 00       	push   $0x612
f01214ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01214f2:	e8 04 ed fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01214f7:	e8 c3 b3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01214fc:	89 c2                	mov    %eax,%edx
f01214fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121501:	29 c2                	sub    %eax,%edx
f0121503:	89 d0                	mov    %edx,%eax
f0121505:	3d 00 03 00 00       	cmp    $0x300,%eax
f012150a:	74 17                	je     f0121523 <test_kfree+0x1d36>
f012150c:	83 ec 04             	sub    $0x4,%esp
f012150f:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121514:	68 13 06 00 00       	push   $0x613
f0121519:	68 5a ac 13 f0       	push   $0xf013ac5a
f012151e:	e8 d8 ec fd ff       	call   f01001fb <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121523:	e8 97 b3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121528:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012152b:	e8 0c 28 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121530:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121533:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121539:	83 ec 0c             	sub    $0xc,%esp
f012153c:	50                   	push   %eax
f012153d:	e8 7e 63 fe ff       	call   f01078c0 <kfree>
f0121542:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121545:	e8 f2 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012154a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012154d:	74 17                	je     f0121566 <test_kfree+0x1d79>
f012154f:	83 ec 04             	sub    $0x4,%esp
f0121552:	68 74 ac 13 f0       	push   $0xf013ac74
f0121557:	68 19 06 00 00       	push   $0x619
f012155c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121561:	e8 95 ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121566:	e8 54 b3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012156b:	89 c2                	mov    %eax,%edx
f012156d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121570:	29 c2                	sub    %eax,%edx
f0121572:	89 d0                	mov    %edx,%eax
f0121574:	83 f8 01             	cmp    $0x1,%eax
f0121577:	74 17                	je     f0121590 <test_kfree+0x1da3>
f0121579:	83 ec 04             	sub    $0x4,%esp
f012157c:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0121581:	68 1a 06 00 00       	push   $0x61a
f0121586:	68 5a ac 13 f0       	push   $0xf013ac5a
f012158b:	e8 6b ec fd ff       	call   f01001fb <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121590:	e8 2a b3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121595:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121598:	e8 9f 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012159d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01215a0:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01215a6:	83 ec 0c             	sub    $0xc,%esp
f01215a9:	50                   	push   %eax
f01215aa:	e8 11 63 fe ff       	call   f01078c0 <kfree>
f01215af:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215b2:	e8 85 27 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01215b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215ba:	74 17                	je     f01215d3 <test_kfree+0x1de6>
f01215bc:	83 ec 04             	sub    $0x4,%esp
f01215bf:	68 74 ac 13 f0       	push   $0xf013ac74
f01215c4:	68 20 06 00 00       	push   $0x620
f01215c9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01215ce:	e8 28 ec fd ff       	call   f01001fb <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01215d3:	e8 e7 b2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01215d8:	89 c2                	mov    %eax,%edx
f01215da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215dd:	29 c2                	sub    %eax,%edx
f01215df:	89 d0                	mov    %edx,%eax
f01215e1:	3d 00 01 00 00       	cmp    $0x100,%eax
f01215e6:	74 17                	je     f01215ff <test_kfree+0x1e12>
f01215e8:	83 ec 04             	sub    $0x4,%esp
f01215eb:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01215f0:	68 21 06 00 00       	push   $0x621
f01215f5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01215fa:	e8 fc eb fd ff       	call   f01001fb <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01215ff:	e8 bb b2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121604:	89 c2                	mov    %eax,%edx
f0121606:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121609:	39 c2                	cmp    %eax,%edx
f012160b:	74 17                	je     f0121624 <test_kfree+0x1e37>
f012160d:	83 ec 04             	sub    $0x4,%esp
f0121610:	68 84 b4 13 f0       	push   $0xf013b484
f0121615:	68 24 06 00 00       	push   $0x624
f012161a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012161f:	e8 d7 eb fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f0121624:	83 ec 0c             	sub    $0xc,%esp
f0121627:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012162c:	e8 51 f6 fd ff       	call   f0100c82 <cprintf>
f0121631:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0121634:	83 ec 0c             	sub    $0xc,%esp
f0121637:	6a 03                	push   $0x3
f0121639:	e8 21 b7 fe ff       	call   f010cd5f <sys_bypassPageFault>
f012163e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121641:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121648:	e9 82 00 00 00       	jmp    f01216cf <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f012164d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121650:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f0121657:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012165a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012165d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121660:	e8 e8 b6 fe ff       	call   f010cd4d <sys_rcr2>
f0121665:	89 c2                	mov    %eax,%edx
f0121667:	8b 45 80             	mov    -0x80(%ebp),%eax
f012166a:	39 c2                	cmp    %eax,%edx
f012166c:	74 17                	je     f0121685 <test_kfree+0x1e98>
f012166e:	83 ec 04             	sub    $0x4,%esp
f0121671:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0121676:	68 33 06 00 00       	push   $0x633
f012167b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121680:	e8 76 eb fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0121685:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121688:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f012168f:	89 c2                	mov    %eax,%edx
f0121691:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121694:	01 d0                	add    %edx,%eax
f0121696:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121699:	e8 af b6 fe ff       	call   f010cd4d <sys_rcr2>
f012169e:	89 c2                	mov    %eax,%edx
f01216a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01216a3:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01216aa:	89 c1                	mov    %eax,%ecx
f01216ac:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216af:	01 c8                	add    %ecx,%eax
f01216b1:	39 c2                	cmp    %eax,%edx
f01216b3:	74 17                	je     f01216cc <test_kfree+0x1edf>
f01216b5:	83 ec 04             	sub    $0x4,%esp
f01216b8:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01216bd:	68 35 06 00 00       	push   $0x635
f01216c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01216c7:	e8 2f eb fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01216cc:	ff 45 f4             	incl   -0xc(%ebp)
f01216cf:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01216d3:	0f 8e 74 ff ff ff    	jle    f012164d <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01216d9:	83 ec 0c             	sub    $0xc,%esp
f01216dc:	6a 00                	push   $0x0
f01216de:	e8 7c b6 fe ff       	call   f010cd5f <sys_bypassPageFault>
f01216e3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01216e6:	83 ec 0c             	sub    $0xc,%esp
f01216e9:	68 05 b5 13 f0       	push   $0xf013b505
f01216ee:	e8 8f f5 fd ff       	call   f0100c82 <cprintf>
f01216f3:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01216f6:	e8 c4 b1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01216fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216fe:	e8 39 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121703:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121706:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012170c:	83 ec 0c             	sub    $0xc,%esp
f012170f:	50                   	push   %eax
f0121710:	e8 ab 61 fe ff       	call   f01078c0 <kfree>
f0121715:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121718:	e8 1f 26 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012171d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121720:	74 17                	je     f0121739 <test_kfree+0x1f4c>
f0121722:	83 ec 04             	sub    $0x4,%esp
f0121725:	68 74 ac 13 f0       	push   $0xf013ac74
f012172a:	68 43 06 00 00       	push   $0x643
f012172f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121734:	e8 c2 ea fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121739:	e8 81 b1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012173e:	89 c2                	mov    %eax,%edx
f0121740:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121743:	39 c2                	cmp    %eax,%edx
f0121745:	74 17                	je     f012175e <test_kfree+0x1f71>
f0121747:	83 ec 04             	sub    $0x4,%esp
f012174a:	68 0c b5 13 f0       	push   $0xf013b50c
f012174f:	68 44 06 00 00       	push   $0x644
f0121754:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121759:	e8 9d ea fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012175e:	e8 5c b1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121763:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121766:	e8 d1 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012176b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012176e:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121774:	83 ec 0c             	sub    $0xc,%esp
f0121777:	50                   	push   %eax
f0121778:	e8 43 61 fe ff       	call   f01078c0 <kfree>
f012177d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121780:	e8 b7 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121785:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121788:	74 17                	je     f01217a1 <test_kfree+0x1fb4>
f012178a:	83 ec 04             	sub    $0x4,%esp
f012178d:	68 74 ac 13 f0       	push   $0xf013ac74
f0121792:	68 4a 06 00 00       	push   $0x64a
f0121797:	68 5a ac 13 f0       	push   $0xf013ac5a
f012179c:	e8 5a ea fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01217a1:	e8 19 b1 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01217a6:	89 c2                	mov    %eax,%edx
f01217a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01217ab:	39 c2                	cmp    %eax,%edx
f01217ad:	74 17                	je     f01217c6 <test_kfree+0x1fd9>
f01217af:	83 ec 04             	sub    $0x4,%esp
f01217b2:	68 0c b5 13 f0       	push   $0xf013b50c
f01217b7:	68 4b 06 00 00       	push   $0x64b
f01217bc:	68 5a ac 13 f0       	push   $0xf013ac5a
f01217c1:	e8 35 ea fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01217c6:	e8 f4 b0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01217cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217ce:	e8 69 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01217d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01217d6:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01217dc:	83 ec 0c             	sub    $0xc,%esp
f01217df:	50                   	push   %eax
f01217e0:	e8 db 60 fe ff       	call   f01078c0 <kfree>
f01217e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217e8:	e8 4f 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01217ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217f0:	74 17                	je     f0121809 <test_kfree+0x201c>
f01217f2:	83 ec 04             	sub    $0x4,%esp
f01217f5:	68 74 ac 13 f0       	push   $0xf013ac74
f01217fa:	68 51 06 00 00       	push   $0x651
f01217ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121804:	e8 f2 e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121809:	e8 b1 b0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012180e:	89 c2                	mov    %eax,%edx
f0121810:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121813:	39 c2                	cmp    %eax,%edx
f0121815:	74 17                	je     f012182e <test_kfree+0x2041>
f0121817:	83 ec 04             	sub    $0x4,%esp
f012181a:	68 0c b5 13 f0       	push   $0xf013b50c
f012181f:	68 52 06 00 00       	push   $0x652
f0121824:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121829:	e8 cd e9 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012182e:	e8 8c b0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121833:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121836:	e8 01 25 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012183b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012183e:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121844:	83 ec 0c             	sub    $0xc,%esp
f0121847:	50                   	push   %eax
f0121848:	e8 73 60 fe ff       	call   f01078c0 <kfree>
f012184d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121850:	e8 e7 24 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121855:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121858:	74 17                	je     f0121871 <test_kfree+0x2084>
f012185a:	83 ec 04             	sub    $0x4,%esp
f012185d:	68 74 ac 13 f0       	push   $0xf013ac74
f0121862:	68 58 06 00 00       	push   $0x658
f0121867:	68 5a ac 13 f0       	push   $0xf013ac5a
f012186c:	e8 8a e9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121871:	e8 49 b0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121876:	89 c2                	mov    %eax,%edx
f0121878:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012187b:	39 c2                	cmp    %eax,%edx
f012187d:	74 17                	je     f0121896 <test_kfree+0x20a9>
f012187f:	83 ec 04             	sub    $0x4,%esp
f0121882:	68 0c b5 13 f0       	push   $0xf013b50c
f0121887:	68 59 06 00 00       	push   $0x659
f012188c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121891:	e8 65 e9 fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f0121896:	83 ec 0c             	sub    $0xc,%esp
f0121899:	68 53 b5 13 f0       	push   $0xf013b553
f012189e:	e8 df f3 fd ff       	call   f0100c82 <cprintf>
f01218a3:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01218a6:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01218ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01218b4:	eb 48                	jmp    f01218fe <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01218b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01218b9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01218be:	83 ec 04             	sub    $0x4,%esp
f01218c1:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01218c7:	51                   	push   %ecx
f01218c8:	52                   	push   %edx
f01218c9:	50                   	push   %eax
f01218ca:	e8 0b 51 fe ff       	call   f01069da <get_page_table>
f01218cf:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01218d2:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01218d8:	85 c0                	test   %eax,%eax
f01218da:	75 17                	jne    f01218f3 <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01218dc:	83 ec 04             	sub    $0x4,%esp
f01218df:	68 5c b5 13 f0       	push   $0xf013b55c
f01218e4:	68 67 06 00 00       	push   $0x667
f01218e9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01218ee:	e8 08 e9 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01218f3:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01218fa:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01218fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121902:	78 b2                	js     f01218b6 <test_kfree+0x20c9>
f0121904:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121908:	7f 09                	jg     f0121913 <test_kfree+0x2126>
f012190a:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121911:	76 a3                	jbe    f01218b6 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121913:	83 ec 0c             	sub    $0xc,%esp
f0121916:	68 3e ae 13 f0       	push   $0xf013ae3e
f012191b:	e8 62 f3 fd ff       	call   f0100c82 <cprintf>
f0121920:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121923:	83 ec 0c             	sub    $0xc,%esp
f0121926:	68 c4 b5 13 f0       	push   $0xf013b5c4
f012192b:	e8 52 f3 fd ff       	call   f0100c82 <cprintf>
f0121930:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121933:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121938:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012193b:	5b                   	pop    %ebx
f012193c:	5f                   	pop    %edi
f012193d:	5d                   	pop    %ebp
f012193e:	c3                   	ret    

f012193f <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012193f:	55                   	push   %ebp
f0121940:	89 e5                	mov    %esp,%ebp
f0121942:	57                   	push   %edi
f0121943:	53                   	push   %ebx
f0121944:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f012194a:	83 ec 0c             	sub    $0xc,%esp
f012194d:	68 9c ab 13 f0       	push   $0xf013ab9c
f0121952:	e8 2b f3 fd ff       	call   f0100c82 <cprintf>
f0121957:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012195a:	83 ec 0c             	sub    $0xc,%esp
f012195d:	68 cc ab 13 f0       	push   $0xf013abcc
f0121962:	e8 1b f3 fd ff       	call   f0100c82 <cprintf>
f0121967:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012196a:	83 ec 0c             	sub    $0xc,%esp
f012196d:	68 9c ab 13 f0       	push   $0xf013ab9c
f0121972:	e8 0b f3 fd ff       	call   f0100c82 <cprintf>
f0121977:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012197a:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012197e:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121982:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121988:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f012198e:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121995:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012199c:	e8 1e af fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01219a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01219a4:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01219aa:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219af:	b8 00 00 00 00       	mov    $0x0,%eax
f01219b4:	89 d7                	mov    %edx,%edi
f01219b6:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01219b8:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01219be:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01219c8:	89 d7                	mov    %edx,%edi
f01219ca:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01219cc:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01219d2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01219d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01219dc:	89 d7                	mov    %edx,%edi
f01219de:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01219e0:	e8 da ae fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01219e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01219e8:	e8 4f 23 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01219ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01219f0:	83 ec 0c             	sub    $0xc,%esp
f01219f3:	68 00 fc 1f 00       	push   $0x1ffc00
f01219f8:	e8 01 5e fe ff       	call   f01077fe <kmalloc>
f01219fd:	83 c4 10             	add    $0x10,%esp
f0121a00:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a06:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121a0c:	89 c1                	mov    %eax,%ecx
f0121a0e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121a15:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121a18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121a1d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121a20:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121a23:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a28:	f7 75 c8             	divl   -0x38(%ebp)
f0121a2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121a2e:	29 d0                	sub    %edx,%eax
f0121a30:	89 c3                	mov    %eax,%ebx
f0121a32:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121a39:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121a3e:	0f b6 d0             	movzbl %al,%edx
f0121a41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121a44:	01 d0                	add    %edx,%eax
f0121a46:	48                   	dec    %eax
f0121a47:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121a4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121a4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a52:	f7 75 c0             	divl   -0x40(%ebp)
f0121a55:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121a58:	29 d0                	sub    %edx,%eax
f0121a5a:	01 c3                	add    %eax,%ebx
f0121a5c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121a63:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121a68:	0f b6 c0             	movzbl %al,%eax
f0121a6b:	c1 e0 04             	shl    $0x4,%eax
f0121a6e:	89 c2                	mov    %eax,%edx
f0121a70:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121a73:	01 d0                	add    %edx,%eax
f0121a75:	48                   	dec    %eax
f0121a76:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121a79:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121a7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a81:	f7 75 b8             	divl   -0x48(%ebp)
f0121a84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121a87:	29 d0                	sub    %edx,%eax
f0121a89:	01 d8                	add    %ebx,%eax
f0121a8b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121a90:	39 c1                	cmp    %eax,%ecx
f0121a92:	74 17                	je     f0121aab <test_kfree_bestfirstfit+0x16c>
f0121a94:	83 ec 04             	sub    $0x4,%esp
f0121a97:	68 40 ad 13 f0       	push   $0xf013ad40
f0121a9c:	68 95 06 00 00       	push   $0x695
f0121aa1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121aa6:	e8 50 e7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121aab:	e8 8c 22 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121ab0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ab3:	74 17                	je     f0121acc <test_kfree_bestfirstfit+0x18d>
f0121ab5:	83 ec 04             	sub    $0x4,%esp
f0121ab8:	68 74 ac 13 f0       	push   $0xf013ac74
f0121abd:	68 96 06 00 00       	push   $0x696
f0121ac2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121ac7:	e8 2f e7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121acc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121acf:	e8 eb ad fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121ad4:	29 c3                	sub    %eax,%ebx
f0121ad6:	89 d8                	mov    %ebx,%eax
f0121ad8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121add:	74 17                	je     f0121af6 <test_kfree_bestfirstfit+0x1b7>
f0121adf:	83 ec 04             	sub    $0x4,%esp
f0121ae2:	68 dc ac 13 f0       	push   $0xf013acdc
f0121ae7:	68 97 06 00 00       	push   $0x697
f0121aec:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121af1:	e8 05 e7 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121af6:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121afd:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b00:	e8 ba ad fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121b05:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b08:	e8 2f 22 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121b0d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121b10:	83 ec 0c             	sub    $0xc,%esp
f0121b13:	68 00 fc 1f 00       	push   $0x1ffc00
f0121b18:	e8 e1 5c fe ff       	call   f01077fe <kmalloc>
f0121b1d:	83 c4 10             	add    $0x10,%esp
f0121b20:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b26:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121b2c:	89 c1                	mov    %eax,%ecx
f0121b2e:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121b35:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121b38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b3d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121b40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121b43:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b48:	f7 75 b0             	divl   -0x50(%ebp)
f0121b4b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121b4e:	29 d0                	sub    %edx,%eax
f0121b50:	89 c3                	mov    %eax,%ebx
f0121b52:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121b59:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121b5e:	0f b6 d0             	movzbl %al,%edx
f0121b61:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121b64:	01 d0                	add    %edx,%eax
f0121b66:	48                   	dec    %eax
f0121b67:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121b6a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121b6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b72:	f7 75 a8             	divl   -0x58(%ebp)
f0121b75:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121b78:	29 d0                	sub    %edx,%eax
f0121b7a:	01 c3                	add    %eax,%ebx
f0121b7c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121b83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121b88:	0f b6 c0             	movzbl %al,%eax
f0121b8b:	c1 e0 04             	shl    $0x4,%eax
f0121b8e:	89 c2                	mov    %eax,%edx
f0121b90:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121b93:	01 d0                	add    %edx,%eax
f0121b95:	48                   	dec    %eax
f0121b96:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121b99:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ba1:	f7 75 a0             	divl   -0x60(%ebp)
f0121ba4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121ba7:	29 d0                	sub    %edx,%eax
f0121ba9:	01 d8                	add    %ebx,%eax
f0121bab:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121bb0:	39 c1                	cmp    %eax,%ecx
f0121bb2:	74 17                	je     f0121bcb <test_kfree_bestfirstfit+0x28c>
f0121bb4:	83 ec 04             	sub    $0x4,%esp
f0121bb7:	68 40 ad 13 f0       	push   $0xf013ad40
f0121bbc:	68 9e 06 00 00       	push   $0x69e
f0121bc1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121bc6:	e8 30 e6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bcb:	e8 6c 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121bd0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bd3:	74 17                	je     f0121bec <test_kfree_bestfirstfit+0x2ad>
f0121bd5:	83 ec 04             	sub    $0x4,%esp
f0121bd8:	68 74 ac 13 f0       	push   $0xf013ac74
f0121bdd:	68 9f 06 00 00       	push   $0x69f
f0121be2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121be7:	e8 0f e6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bec:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bef:	e8 cb ac fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121bf4:	29 c3                	sub    %eax,%ebx
f0121bf6:	89 d8                	mov    %ebx,%eax
f0121bf8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121bfd:	74 17                	je     f0121c16 <test_kfree_bestfirstfit+0x2d7>
f0121bff:	83 ec 04             	sub    $0x4,%esp
f0121c02:	68 dc ac 13 f0       	push   $0xf013acdc
f0121c07:	68 a0 06 00 00       	push   $0x6a0
f0121c0c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121c11:	e8 e5 e5 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121c16:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121c1d:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c20:	e8 9a ac fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121c25:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c28:	e8 0f 21 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121c2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121c30:	83 ec 0c             	sub    $0xc,%esp
f0121c33:	68 00 08 00 00       	push   $0x800
f0121c38:	e8 c1 5b fe ff       	call   f01077fe <kmalloc>
f0121c3d:	83 c4 10             	add    $0x10,%esp
f0121c40:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c46:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121c4c:	89 c1                	mov    %eax,%ecx
f0121c4e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0121c55:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121c58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c5d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0121c60:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121c63:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c68:	f7 75 98             	divl   -0x68(%ebp)
f0121c6b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121c6e:	29 d0                	sub    %edx,%eax
f0121c70:	89 c3                	mov    %eax,%ebx
f0121c72:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0121c79:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121c7e:	0f b6 d0             	movzbl %al,%edx
f0121c81:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121c84:	01 d0                	add    %edx,%eax
f0121c86:	48                   	dec    %eax
f0121c87:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0121c8a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121c8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c92:	f7 75 90             	divl   -0x70(%ebp)
f0121c95:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121c98:	29 d0                	sub    %edx,%eax
f0121c9a:	01 c3                	add    %eax,%ebx
f0121c9c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0121ca3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121ca8:	0f b6 c0             	movzbl %al,%eax
f0121cab:	c1 e0 04             	shl    $0x4,%eax
f0121cae:	89 c2                	mov    %eax,%edx
f0121cb0:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121cb3:	01 d0                	add    %edx,%eax
f0121cb5:	48                   	dec    %eax
f0121cb6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121cb9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121cbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cc1:	f7 75 88             	divl   -0x78(%ebp)
f0121cc4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121cc7:	29 d0                	sub    %edx,%eax
f0121cc9:	01 d8                	add    %ebx,%eax
f0121ccb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121cd0:	39 c1                	cmp    %eax,%ecx
f0121cd2:	74 17                	je     f0121ceb <test_kfree_bestfirstfit+0x3ac>
f0121cd4:	83 ec 04             	sub    $0x4,%esp
f0121cd7:	68 40 ad 13 f0       	push   $0xf013ad40
f0121cdc:	68 a7 06 00 00       	push   $0x6a7
f0121ce1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121ce6:	e8 10 e5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ceb:	e8 4c 20 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121cf0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cf3:	74 17                	je     f0121d0c <test_kfree_bestfirstfit+0x3cd>
f0121cf5:	83 ec 04             	sub    $0x4,%esp
f0121cf8:	68 74 ac 13 f0       	push   $0xf013ac74
f0121cfd:	68 a8 06 00 00       	push   $0x6a8
f0121d02:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121d07:	e8 ef e4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d0f:	e8 ab ab fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121d14:	29 c3                	sub    %eax,%ebx
f0121d16:	89 d8                	mov    %ebx,%eax
f0121d18:	83 f8 01             	cmp    $0x1,%eax
f0121d1b:	74 17                	je     f0121d34 <test_kfree_bestfirstfit+0x3f5>
f0121d1d:	83 ec 04             	sub    $0x4,%esp
f0121d20:	68 dc ac 13 f0       	push   $0xf013acdc
f0121d25:	68 a9 06 00 00       	push   $0x6a9
f0121d2a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121d2f:	e8 c7 e4 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121d34:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0121d3b:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121d3e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121d44:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121d47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d4e:	eb 0e                	jmp    f0121d5e <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0121d50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d53:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d56:	01 d0                	add    %edx,%eax
f0121d58:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121d5b:	ff 45 f4             	incl   -0xc(%ebp)
f0121d5e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121d64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d67:	7f e7                	jg     f0121d50 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121d69:	e8 51 ab fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121d6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121d71:	e8 c6 1f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121d76:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121d79:	83 ec 0c             	sub    $0xc,%esp
f0121d7c:	68 00 08 00 00       	push   $0x800
f0121d81:	e8 78 5a fe ff       	call   f01077fe <kmalloc>
f0121d86:	83 c4 10             	add    $0x10,%esp
f0121d89:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d8f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121d95:	89 c1                	mov    %eax,%ecx
f0121d97:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121d9e:	10 00 00 
f0121da1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121da7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121dac:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121db2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dbd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121dc3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121dc9:	29 d0                	sub    %edx,%eax
f0121dcb:	89 c3                	mov    %eax,%ebx
f0121dcd:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121dd4:	10 00 00 
f0121dd7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121ddc:	0f b6 d0             	movzbl %al,%edx
f0121ddf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121de5:	01 d0                	add    %edx,%eax
f0121de7:	48                   	dec    %eax
f0121de8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121dee:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121df4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121df9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121dff:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121e05:	29 d0                	sub    %edx,%eax
f0121e07:	01 c3                	add    %eax,%ebx
f0121e09:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121e10:	10 00 00 
f0121e13:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121e18:	0f b6 c0             	movzbl %al,%eax
f0121e1b:	c1 e0 04             	shl    $0x4,%eax
f0121e1e:	89 c2                	mov    %eax,%edx
f0121e20:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121e26:	01 d0                	add    %edx,%eax
f0121e28:	48                   	dec    %eax
f0121e29:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121e2f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e3a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121e40:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121e46:	29 d0                	sub    %edx,%eax
f0121e48:	01 d8                	add    %ebx,%eax
f0121e4a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121e4f:	39 c1                	cmp    %eax,%ecx
f0121e51:	74 17                	je     f0121e6a <test_kfree_bestfirstfit+0x52b>
f0121e53:	83 ec 04             	sub    $0x4,%esp
f0121e56:	68 40 ad 13 f0       	push   $0xf013ad40
f0121e5b:	68 b5 06 00 00       	push   $0x6b5
f0121e60:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121e65:	e8 91 e3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e6a:	e8 cd 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121e6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e72:	74 17                	je     f0121e8b <test_kfree_bestfirstfit+0x54c>
f0121e74:	83 ec 04             	sub    $0x4,%esp
f0121e77:	68 74 ac 13 f0       	push   $0xf013ac74
f0121e7c:	68 b6 06 00 00       	push   $0x6b6
f0121e81:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121e86:	e8 70 e3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e8e:	e8 2c aa fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121e93:	29 c3                	sub    %eax,%ebx
f0121e95:	89 d8                	mov    %ebx,%eax
f0121e97:	83 f8 01             	cmp    $0x1,%eax
f0121e9a:	74 17                	je     f0121eb3 <test_kfree_bestfirstfit+0x574>
f0121e9c:	83 ec 04             	sub    $0x4,%esp
f0121e9f:	68 dc ac 13 f0       	push   $0xf013acdc
f0121ea4:	68 b7 06 00 00       	push   $0x6b7
f0121ea9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121eae:	e8 48 e3 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121eb3:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121eba:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121ebd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121ec3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121ec6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ecd:	eb 0e                	jmp    f0121edd <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0121ecf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ed2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ed5:	01 d0                	add    %edx,%eax
f0121ed7:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121eda:	ff 45 f4             	incl   -0xc(%ebp)
f0121edd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121ee3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ee6:	7f e7                	jg     f0121ecf <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ee8:	e8 d2 a9 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0121eed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ef0:	e8 47 1e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121ef5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121ef8:	83 ec 0c             	sub    $0xc,%esp
f0121efb:	68 00 1c 00 00       	push   $0x1c00
f0121f00:	e8 f9 58 fe ff       	call   f01077fe <kmalloc>
f0121f05:	83 c4 10             	add    $0x10,%esp
f0121f08:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f0e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121f14:	89 c1                	mov    %eax,%ecx
f0121f16:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121f1d:	10 00 00 
f0121f20:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121f26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121f2b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121f31:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121f37:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f3c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121f42:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121f48:	29 d0                	sub    %edx,%eax
f0121f4a:	89 c3                	mov    %eax,%ebx
f0121f4c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121f53:	10 00 00 
f0121f56:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121f5b:	0f b6 d0             	movzbl %al,%edx
f0121f5e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121f64:	01 d0                	add    %edx,%eax
f0121f66:	48                   	dec    %eax
f0121f67:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121f6d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121f73:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f78:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121f7e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121f84:	29 d0                	sub    %edx,%eax
f0121f86:	01 c3                	add    %eax,%ebx
f0121f88:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121f8f:	10 00 00 
f0121f92:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0121f97:	0f b6 c0             	movzbl %al,%eax
f0121f9a:	c1 e0 04             	shl    $0x4,%eax
f0121f9d:	89 c2                	mov    %eax,%edx
f0121f9f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121fa5:	01 d0                	add    %edx,%eax
f0121fa7:	48                   	dec    %eax
f0121fa8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121fae:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121fb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fb9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121fbf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121fc5:	29 d0                	sub    %edx,%eax
f0121fc7:	01 d8                	add    %ebx,%eax
f0121fc9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121fce:	39 c1                	cmp    %eax,%ecx
f0121fd0:	74 17                	je     f0121fe9 <test_kfree_bestfirstfit+0x6aa>
f0121fd2:	83 ec 04             	sub    $0x4,%esp
f0121fd5:	68 40 ad 13 f0       	push   $0xf013ad40
f0121fda:	68 c3 06 00 00       	push   $0x6c3
f0121fdf:	68 5a ac 13 f0       	push   $0xf013ac5a
f0121fe4:	e8 12 e2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fe9:	e8 4e 1d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0121fee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ff1:	74 17                	je     f012200a <test_kfree_bestfirstfit+0x6cb>
f0121ff3:	83 ec 04             	sub    $0x4,%esp
f0121ff6:	68 74 ac 13 f0       	push   $0xf013ac74
f0121ffb:	68 c4 06 00 00       	push   $0x6c4
f0122000:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122005:	e8 f1 e1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012200a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012200d:	e8 ad a8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122012:	29 c3                	sub    %eax,%ebx
f0122014:	89 d8                	mov    %ebx,%eax
f0122016:	83 f8 02             	cmp    $0x2,%eax
f0122019:	74 17                	je     f0122032 <test_kfree_bestfirstfit+0x6f3>
f012201b:	83 ec 04             	sub    $0x4,%esp
f012201e:	68 dc ac 13 f0       	push   $0xf013acdc
f0122023:	68 c5 06 00 00       	push   $0x6c5
f0122028:	68 5a ac 13 f0       	push   $0xf013ac5a
f012202d:	e8 c9 e1 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122032:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122039:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012203c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122042:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122045:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012204c:	eb 0e                	jmp    f012205c <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f012204e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122051:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122054:	01 d0                	add    %edx,%eax
f0122056:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122059:	ff 45 f4             	incl   -0xc(%ebp)
f012205c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122062:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122065:	7f e7                	jg     f012204e <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122067:	e8 53 a8 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012206c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012206f:	e8 c8 1c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122074:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122077:	83 ec 0c             	sub    $0xc,%esp
f012207a:	68 00 fc 2f 00       	push   $0x2ffc00
f012207f:	e8 7a 57 fe ff       	call   f01077fe <kmalloc>
f0122084:	83 c4 10             	add    $0x10,%esp
f0122087:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012208d:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122093:	89 c1                	mov    %eax,%ecx
f0122095:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012209c:	10 00 00 
f012209f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01220a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01220aa:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01220b0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01220b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01220bb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01220c1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01220c7:	29 d0                	sub    %edx,%eax
f01220c9:	89 c3                	mov    %eax,%ebx
f01220cb:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01220d2:	10 00 00 
f01220d5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01220da:	0f b6 d0             	movzbl %al,%edx
f01220dd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01220e3:	01 d0                	add    %edx,%eax
f01220e5:	48                   	dec    %eax
f01220e6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01220ec:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01220f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01220f7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01220fd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122103:	29 d0                	sub    %edx,%eax
f0122105:	01 c3                	add    %eax,%ebx
f0122107:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012210e:	10 00 00 
f0122111:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122116:	0f b6 c0             	movzbl %al,%eax
f0122119:	c1 e0 04             	shl    $0x4,%eax
f012211c:	89 c2                	mov    %eax,%edx
f012211e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122124:	01 d0                	add    %edx,%eax
f0122126:	48                   	dec    %eax
f0122127:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012212d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122133:	ba 00 00 00 00       	mov    $0x0,%edx
f0122138:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012213e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122144:	29 d0                	sub    %edx,%eax
f0122146:	01 d8                	add    %ebx,%eax
f0122148:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012214d:	39 c1                	cmp    %eax,%ecx
f012214f:	74 17                	je     f0122168 <test_kfree_bestfirstfit+0x829>
f0122151:	83 ec 04             	sub    $0x4,%esp
f0122154:	68 40 ad 13 f0       	push   $0xf013ad40
f0122159:	68 d1 06 00 00       	push   $0x6d1
f012215e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122163:	e8 93 e0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122168:	e8 cf 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012216d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122170:	74 17                	je     f0122189 <test_kfree_bestfirstfit+0x84a>
f0122172:	83 ec 04             	sub    $0x4,%esp
f0122175:	68 74 ac 13 f0       	push   $0xf013ac74
f012217a:	68 d2 06 00 00       	push   $0x6d2
f012217f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122184:	e8 72 e0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122189:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012218c:	e8 2e a7 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122191:	29 c3                	sub    %eax,%ebx
f0122193:	89 d8                	mov    %ebx,%eax
f0122195:	3d 00 03 00 00       	cmp    $0x300,%eax
f012219a:	74 17                	je     f01221b3 <test_kfree_bestfirstfit+0x874>
f012219c:	83 ec 04             	sub    $0x4,%esp
f012219f:	68 dc ac 13 f0       	push   $0xf013acdc
f01221a4:	68 d3 06 00 00       	push   $0x6d3
f01221a9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01221ae:	e8 48 e0 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01221b3:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01221ba:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01221bd:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01221c3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01221c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01221cd:	eb 0e                	jmp    f01221dd <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f01221cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221d2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221d5:	01 d0                	add    %edx,%eax
f01221d7:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01221da:	ff 45 f4             	incl   -0xc(%ebp)
f01221dd:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01221e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221e6:	7f e7                	jg     f01221cf <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01221e8:	e8 d2 a6 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01221ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221f0:	e8 47 1b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01221f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01221f8:	83 ec 0c             	sub    $0xc,%esp
f01221fb:	68 00 fc 5f 00       	push   $0x5ffc00
f0122200:	e8 f9 55 fe ff       	call   f01077fe <kmalloc>
f0122205:	83 c4 10             	add    $0x10,%esp
f0122208:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012220e:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122214:	89 c1                	mov    %eax,%ecx
f0122216:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012221d:	10 00 00 
f0122220:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122226:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012222b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122231:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122237:	ba 00 00 00 00       	mov    $0x0,%edx
f012223c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122242:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122248:	29 d0                	sub    %edx,%eax
f012224a:	89 c3                	mov    %eax,%ebx
f012224c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122253:	10 00 00 
f0122256:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012225b:	0f b6 d0             	movzbl %al,%edx
f012225e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122264:	01 d0                	add    %edx,%eax
f0122266:	48                   	dec    %eax
f0122267:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012226d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122273:	ba 00 00 00 00       	mov    $0x0,%edx
f0122278:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012227e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122284:	29 d0                	sub    %edx,%eax
f0122286:	01 c3                	add    %eax,%ebx
f0122288:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012228f:	10 00 00 
f0122292:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122297:	0f b6 c0             	movzbl %al,%eax
f012229a:	c1 e0 04             	shl    $0x4,%eax
f012229d:	89 c2                	mov    %eax,%edx
f012229f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01222a5:	01 d0                	add    %edx,%eax
f01222a7:	48                   	dec    %eax
f01222a8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01222ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01222b9:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01222bf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01222c5:	29 d0                	sub    %edx,%eax
f01222c7:	01 d8                	add    %ebx,%eax
f01222c9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01222ce:	39 c1                	cmp    %eax,%ecx
f01222d0:	74 17                	je     f01222e9 <test_kfree_bestfirstfit+0x9aa>
f01222d2:	83 ec 04             	sub    $0x4,%esp
f01222d5:	68 40 ad 13 f0       	push   $0xf013ad40
f01222da:	68 df 06 00 00       	push   $0x6df
f01222df:	68 5a ac 13 f0       	push   $0xf013ac5a
f01222e4:	e8 12 df fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222e9:	e8 4e 1a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01222ee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222f1:	74 17                	je     f012230a <test_kfree_bestfirstfit+0x9cb>
f01222f3:	83 ec 04             	sub    $0x4,%esp
f01222f6:	68 74 ac 13 f0       	push   $0xf013ac74
f01222fb:	68 e0 06 00 00       	push   $0x6e0
f0122300:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122305:	e8 f1 de fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012230a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012230d:	e8 ad a5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122312:	29 c3                	sub    %eax,%ebx
f0122314:	89 d8                	mov    %ebx,%eax
f0122316:	3d 00 06 00 00       	cmp    $0x600,%eax
f012231b:	74 17                	je     f0122334 <test_kfree_bestfirstfit+0x9f5>
f012231d:	83 ec 04             	sub    $0x4,%esp
f0122320:	68 dc ac 13 f0       	push   $0xf013acdc
f0122325:	68 e1 06 00 00       	push   $0x6e1
f012232a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012232f:	e8 c7 de fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0122334:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012233b:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012233e:	e8 7c a5 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122343:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122346:	e8 f1 19 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012234b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012234e:	83 ec 0c             	sub    $0xc,%esp
f0122351:	68 00 38 00 00       	push   $0x3800
f0122356:	e8 a3 54 fe ff       	call   f01077fe <kmalloc>
f012235b:	83 c4 10             	add    $0x10,%esp
f012235e:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122364:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012236a:	89 c1                	mov    %eax,%ecx
f012236c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122373:	10 00 00 
f0122376:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012237c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122381:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122387:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012238d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122392:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122398:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012239e:	29 d0                	sub    %edx,%eax
f01223a0:	89 c3                	mov    %eax,%ebx
f01223a2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01223a9:	10 00 00 
f01223ac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01223b1:	0f b6 d0             	movzbl %al,%edx
f01223b4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01223ba:	01 d0                	add    %edx,%eax
f01223bc:	48                   	dec    %eax
f01223bd:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01223c3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01223c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01223ce:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01223d4:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01223da:	29 d0                	sub    %edx,%eax
f01223dc:	01 c3                	add    %eax,%ebx
f01223de:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01223e5:	10 00 00 
f01223e8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01223ed:	0f b6 c0             	movzbl %al,%eax
f01223f0:	c1 e0 04             	shl    $0x4,%eax
f01223f3:	89 c2                	mov    %eax,%edx
f01223f5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01223fb:	01 d0                	add    %edx,%eax
f01223fd:	48                   	dec    %eax
f01223fe:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0122404:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012240a:	ba 00 00 00 00       	mov    $0x0,%edx
f012240f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0122415:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012241b:	29 d0                	sub    %edx,%eax
f012241d:	01 d8                	add    %ebx,%eax
f012241f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0122424:	39 c1                	cmp    %eax,%ecx
f0122426:	74 17                	je     f012243f <test_kfree_bestfirstfit+0xb00>
f0122428:	83 ec 04             	sub    $0x4,%esp
f012242b:	68 40 ad 13 f0       	push   $0xf013ad40
f0122430:	68 e8 06 00 00       	push   $0x6e8
f0122435:	68 5a ac 13 f0       	push   $0xf013ac5a
f012243a:	e8 bc dd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012243f:	e8 f8 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122444:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122447:	74 17                	je     f0122460 <test_kfree_bestfirstfit+0xb21>
f0122449:	83 ec 04             	sub    $0x4,%esp
f012244c:	68 74 ac 13 f0       	push   $0xf013ac74
f0122451:	68 e9 06 00 00       	push   $0x6e9
f0122456:	68 5a ac 13 f0       	push   $0xf013ac5a
f012245b:	e8 9b dd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122460:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122463:	e8 57 a4 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122468:	29 c3                	sub    %eax,%ebx
f012246a:	89 d8                	mov    %ebx,%eax
f012246c:	83 f8 04             	cmp    $0x4,%eax
f012246f:	74 17                	je     f0122488 <test_kfree_bestfirstfit+0xb49>
f0122471:	83 ec 04             	sub    $0x4,%esp
f0122474:	68 dc ac 13 f0       	push   $0xf013acdc
f0122479:	68 ea 06 00 00       	push   $0x6ea
f012247e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122483:	e8 73 dd fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0122488:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f012248f:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0122492:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122498:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012249b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224a2:	eb 0e                	jmp    f01224b2 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01224a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01224a7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224aa:	01 d0                	add    %edx,%eax
f01224ac:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01224af:	ff 45 f4             	incl   -0xc(%ebp)
f01224b2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01224b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01224bb:	7f e7                	jg     f01224a4 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01224bd:	e8 fd a3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01224c2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01224c8:	e8 6f 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224cd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01224d3:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01224d9:	83 ec 0c             	sub    $0xc,%esp
f01224dc:	50                   	push   %eax
f01224dd:	e8 de 53 fe ff       	call   f01078c0 <kfree>
f01224e2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224e5:	e8 52 18 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01224ea:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01224f0:	74 17                	je     f0122509 <test_kfree_bestfirstfit+0xbca>
f01224f2:	83 ec 04             	sub    $0x4,%esp
f01224f5:	68 74 ac 13 f0       	push   $0xf013ac74
f01224fa:	68 f9 06 00 00       	push   $0x6f9
f01224ff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122504:	e8 f2 dc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122509:	e8 b1 a3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012250e:	89 c2                	mov    %eax,%edx
f0122510:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122516:	29 c2                	sub    %eax,%edx
f0122518:	89 d0                	mov    %edx,%eax
f012251a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012251f:	74 17                	je     f0122538 <test_kfree_bestfirstfit+0xbf9>
f0122521:	83 ec 04             	sub    $0x4,%esp
f0122524:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122529:	68 fa 06 00 00       	push   $0x6fa
f012252e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122533:	e8 c3 dc fd ff       	call   f01001fb <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122538:	e8 82 a3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012253d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122543:	e8 f4 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122548:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f012254e:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122554:	83 ec 0c             	sub    $0xc,%esp
f0122557:	50                   	push   %eax
f0122558:	e8 63 53 fe ff       	call   f01078c0 <kfree>
f012255d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122560:	e8 d7 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122565:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012256b:	74 17                	je     f0122584 <test_kfree_bestfirstfit+0xc45>
f012256d:	83 ec 04             	sub    $0x4,%esp
f0122570:	68 74 ac 13 f0       	push   $0xf013ac74
f0122575:	68 00 07 00 00       	push   $0x700
f012257a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012257f:	e8 77 dc fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0122584:	e8 36 a3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122589:	89 c2                	mov    %eax,%edx
f012258b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122591:	29 c2                	sub    %eax,%edx
f0122593:	89 d0                	mov    %edx,%eax
f0122595:	83 f8 01             	cmp    $0x1,%eax
f0122598:	74 17                	je     f01225b1 <test_kfree_bestfirstfit+0xc72>
f012259a:	83 ec 04             	sub    $0x4,%esp
f012259d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01225a2:	68 01 07 00 00       	push   $0x701
f01225a7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01225ac:	e8 4a dc fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01225b1:	e8 09 a3 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01225b6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225bc:	e8 7b 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225c1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01225c7:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01225cd:	83 ec 0c             	sub    $0xc,%esp
f01225d0:	50                   	push   %eax
f01225d1:	e8 ea 52 fe ff       	call   f01078c0 <kfree>
f01225d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225d9:	e8 5e 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01225de:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01225e4:	74 17                	je     f01225fd <test_kfree_bestfirstfit+0xcbe>
f01225e6:	83 ec 04             	sub    $0x4,%esp
f01225e9:	68 74 ac 13 f0       	push   $0xf013ac74
f01225ee:	68 07 07 00 00       	push   $0x707
f01225f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01225f8:	e8 fe db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01225fd:	e8 bd a2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122602:	89 c2                	mov    %eax,%edx
f0122604:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012260a:	29 c2                	sub    %eax,%edx
f012260c:	89 d0                	mov    %edx,%eax
f012260e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122613:	74 17                	je     f012262c <test_kfree_bestfirstfit+0xced>
f0122615:	83 ec 04             	sub    $0x4,%esp
f0122618:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012261d:	68 08 07 00 00       	push   $0x708
f0122622:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122627:	e8 cf db fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012262c:	e8 8e a2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122631:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122637:	e8 00 17 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012263c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0122642:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0122648:	83 ec 0c             	sub    $0xc,%esp
f012264b:	50                   	push   %eax
f012264c:	e8 6f 52 fe ff       	call   f01078c0 <kfree>
f0122651:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122654:	e8 e3 16 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122659:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012265f:	74 17                	je     f0122678 <test_kfree_bestfirstfit+0xd39>
f0122661:	83 ec 04             	sub    $0x4,%esp
f0122664:	68 74 ac 13 f0       	push   $0xf013ac74
f0122669:	68 0e 07 00 00       	push   $0x70e
f012266e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122673:	e8 83 db fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122678:	e8 42 a2 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012267d:	89 c2                	mov    %eax,%edx
f012267f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122685:	29 c2                	sub    %eax,%edx
f0122687:	89 d0                	mov    %edx,%eax
f0122689:	3d 00 06 00 00       	cmp    $0x600,%eax
f012268e:	74 17                	je     f01226a7 <test_kfree_bestfirstfit+0xd68>
f0122690:	83 ec 04             	sub    $0x4,%esp
f0122693:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122698:	68 0f 07 00 00       	push   $0x70f
f012269d:	68 5a ac 13 f0       	push   $0xf013ac5a
f01226a2:	e8 54 db fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01226a7:	83 ec 0c             	sub    $0xc,%esp
f01226aa:	68 1c b4 13 f0       	push   $0xf013b41c
f01226af:	e8 ce e5 fd ff       	call   f0100c82 <cprintf>
f01226b4:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01226b7:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01226bd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01226c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226c7:	eb 1e                	jmp    f01226e7 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01226c9:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01226cf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01226d2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01226d5:	01 c8                	add    %ecx,%eax
f01226d7:	8a 00                	mov    (%eax),%al
f01226d9:	0f be c0             	movsbl %al,%eax
f01226dc:	01 d0                	add    %edx,%eax
f01226de:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01226e4:	ff 45 f4             	incl   -0xc(%ebp)
f01226e7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01226ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01226f0:	7f d7                	jg     f01226c9 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01226f2:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01226f8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01226fe:	89 c1                	mov    %eax,%ecx
f0122700:	01 c9                	add    %ecx,%ecx
f0122702:	01 c8                	add    %ecx,%eax
f0122704:	39 c2                	cmp    %eax,%edx
f0122706:	74 17                	je     f012271f <test_kfree_bestfirstfit+0xde0>
f0122708:	83 ec 04             	sub    $0x4,%esp
f012270b:	68 40 b4 13 f0       	push   $0xf013b440
f0122710:	68 1c 07 00 00       	push   $0x71c
f0122715:	68 5a ac 13 f0       	push   $0xf013ac5a
f012271a:	e8 dc da fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012271f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122725:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122728:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012272f:	eb 1e                	jmp    f012274f <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0122731:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0122737:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012273a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012273d:	01 c8                	add    %ecx,%eax
f012273f:	8a 00                	mov    (%eax),%al
f0122741:	0f be c0             	movsbl %al,%eax
f0122744:	01 d0                	add    %edx,%eax
f0122746:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012274c:	ff 45 f4             	incl   -0xc(%ebp)
f012274f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122755:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122758:	7f d7                	jg     f0122731 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012275a:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0122760:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0122766:	c1 e2 02             	shl    $0x2,%edx
f0122769:	39 d0                	cmp    %edx,%eax
f012276b:	74 17                	je     f0122784 <test_kfree_bestfirstfit+0xe45>
f012276d:	83 ec 04             	sub    $0x4,%esp
f0122770:	68 40 b4 13 f0       	push   $0xf013b440
f0122775:	68 24 07 00 00       	push   $0x724
f012277a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012277f:	e8 77 da fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0122784:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012278a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012278d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122794:	eb 1e                	jmp    f01227b4 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122796:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f012279c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012279f:	8b 45 80             	mov    -0x80(%ebp),%eax
f01227a2:	01 c8                	add    %ecx,%eax
f01227a4:	8a 00                	mov    (%eax),%al
f01227a6:	0f be c0             	movsbl %al,%eax
f01227a9:	01 d0                	add    %edx,%eax
f01227ab:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01227b1:	ff 45 f4             	incl   -0xc(%ebp)
f01227b4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01227ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01227bd:	7f d7                	jg     f0122796 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01227bf:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01227c5:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01227cb:	89 d0                	mov    %edx,%eax
f01227cd:	c1 e0 02             	shl    $0x2,%eax
f01227d0:	01 d0                	add    %edx,%eax
f01227d2:	39 c1                	cmp    %eax,%ecx
f01227d4:	74 17                	je     f01227ed <test_kfree_bestfirstfit+0xeae>
f01227d6:	83 ec 04             	sub    $0x4,%esp
f01227d9:	68 40 b4 13 f0       	push   $0xf013b440
f01227de:	68 2c 07 00 00       	push   $0x72c
f01227e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01227e8:	e8 0e da fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01227ed:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01227f3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01227f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01227fd:	eb 1e                	jmp    f012281d <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f01227ff:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122805:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122808:	8b 45 80             	mov    -0x80(%ebp),%eax
f012280b:	01 c8                	add    %ecx,%eax
f012280d:	8a 00                	mov    (%eax),%al
f012280f:	0f be c0             	movsbl %al,%eax
f0122812:	01 d0                	add    %edx,%eax
f0122814:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012281a:	ff 45 f4             	incl   -0xc(%ebp)
f012281d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0122823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122826:	7f d7                	jg     f01227ff <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122828:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012282e:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122834:	89 d0                	mov    %edx,%eax
f0122836:	01 c0                	add    %eax,%eax
f0122838:	01 d0                	add    %edx,%eax
f012283a:	01 c0                	add    %eax,%eax
f012283c:	01 d0                	add    %edx,%eax
f012283e:	39 c1                	cmp    %eax,%ecx
f0122840:	74 17                	je     f0122859 <test_kfree_bestfirstfit+0xf1a>
f0122842:	83 ec 04             	sub    $0x4,%esp
f0122845:	68 40 b4 13 f0       	push   $0xf013b440
f012284a:	68 34 07 00 00       	push   $0x734
f012284f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122854:	e8 a2 d9 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b30%");
f0122859:	83 ec 0c             	sub    $0xc,%esp
f012285c:	68 73 b4 13 f0       	push   $0xf013b473
f0122861:	e8 1c e4 fd ff       	call   f0100c82 <cprintf>
f0122866:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122869:	e8 51 a0 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012286e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122871:	e8 c6 14 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122876:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0122879:	83 ec 0c             	sub    $0xc,%esp
f012287c:	68 00 00 30 00       	push   $0x300000
f0122881:	e8 78 4f fe ff       	call   f01077fe <kmalloc>
f0122886:	83 c4 10             	add    $0x10,%esp
f0122889:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012288f:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122895:	89 c1                	mov    %eax,%ecx
f0122897:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012289e:	10 00 00 
f01228a1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01228a7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01228ac:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01228b2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01228b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01228bd:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01228c3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01228c9:	29 d0                	sub    %edx,%eax
f01228cb:	89 c3                	mov    %eax,%ebx
f01228cd:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01228d4:	10 00 00 
f01228d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01228dc:	0f b6 d0             	movzbl %al,%edx
f01228df:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01228e5:	01 d0                	add    %edx,%eax
f01228e7:	48                   	dec    %eax
f01228e8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01228ee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01228f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01228f9:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01228ff:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122905:	29 d0                	sub    %edx,%eax
f0122907:	01 c3                	add    %eax,%ebx
f0122909:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0122910:	10 00 00 
f0122913:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122918:	0f b6 c0             	movzbl %al,%eax
f012291b:	c1 e0 04             	shl    $0x4,%eax
f012291e:	89 c2                	mov    %eax,%edx
f0122920:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122926:	01 d0                	add    %edx,%eax
f0122928:	48                   	dec    %eax
f0122929:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012292f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122935:	ba 00 00 00 00       	mov    $0x0,%edx
f012293a:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0122940:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122946:	29 d0                	sub    %edx,%eax
f0122948:	01 d8                	add    %ebx,%eax
f012294a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012294f:	39 c1                	cmp    %eax,%ecx
f0122951:	74 17                	je     f012296a <test_kfree_bestfirstfit+0x102b>
f0122953:	83 ec 04             	sub    $0x4,%esp
f0122956:	68 40 ad 13 f0       	push   $0xf013ad40
f012295b:	68 3f 07 00 00       	push   $0x73f
f0122960:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122965:	e8 91 d8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012296a:	e8 cd 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012296f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122972:	74 17                	je     f012298b <test_kfree_bestfirstfit+0x104c>
f0122974:	83 ec 04             	sub    $0x4,%esp
f0122977:	68 74 ac 13 f0       	push   $0xf013ac74
f012297c:	68 40 07 00 00       	push   $0x740
f0122981:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122986:	e8 70 d8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012298b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012298e:	e8 2c 9f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122993:	29 c3                	sub    %eax,%ebx
f0122995:	89 d8                	mov    %ebx,%eax
f0122997:	3d 00 03 00 00       	cmp    $0x300,%eax
f012299c:	74 17                	je     f01229b5 <test_kfree_bestfirstfit+0x1076>
f012299e:	83 ec 04             	sub    $0x4,%esp
f01229a1:	68 dc ac 13 f0       	push   $0xf013acdc
f01229a6:	68 41 07 00 00       	push   $0x741
f01229ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f01229b0:	e8 46 d8 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01229b5:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01229bc:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01229bf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01229c5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01229c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01229cf:	eb 0e                	jmp    f01229df <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01229d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01229d4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01229d7:	01 d0                	add    %edx,%eax
f01229d9:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01229dc:	ff 45 f4             	incl   -0xc(%ebp)
f01229df:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01229e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01229e8:	7f e7                	jg     f01229d1 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01229ea:	e8 d0 9e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01229ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229f2:	e8 45 13 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01229f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01229fa:	83 ec 0c             	sub    $0xc,%esp
f01229fd:	68 00 08 00 00       	push   $0x800
f0122a02:	e8 f7 4d fe ff       	call   f01077fe <kmalloc>
f0122a07:	83 c4 10             	add    $0x10,%esp
f0122a0a:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a10:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122a16:	89 c1                	mov    %eax,%ecx
f0122a18:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0122a1f:	10 00 00 
f0122a22:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122a28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a2d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0122a33:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a3e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0122a44:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122a4a:	29 d0                	sub    %edx,%eax
f0122a4c:	89 c3                	mov    %eax,%ebx
f0122a4e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0122a55:	10 00 00 
f0122a58:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122a5d:	0f b6 d0             	movzbl %al,%edx
f0122a60:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122a66:	01 d0                	add    %edx,%eax
f0122a68:	48                   	dec    %eax
f0122a69:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0122a6f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122a75:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a7a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0122a80:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0122a86:	29 d0                	sub    %edx,%eax
f0122a88:	01 c3                	add    %eax,%ebx
f0122a8a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0122a91:	10 00 00 
f0122a94:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122a99:	0f b6 c0             	movzbl %al,%eax
f0122a9c:	c1 e0 04             	shl    $0x4,%eax
f0122a9f:	89 c2                	mov    %eax,%edx
f0122aa1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122aa7:	01 d0                	add    %edx,%eax
f0122aa9:	48                   	dec    %eax
f0122aaa:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0122ab0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122ab6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122abb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0122ac1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122ac7:	29 d0                	sub    %edx,%eax
f0122ac9:	01 d8                	add    %ebx,%eax
f0122acb:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0122ad0:	39 c1                	cmp    %eax,%ecx
f0122ad2:	74 17                	je     f0122aeb <test_kfree_bestfirstfit+0x11ac>
f0122ad4:	83 ec 04             	sub    $0x4,%esp
f0122ad7:	68 40 ad 13 f0       	push   $0xf013ad40
f0122adc:	68 4d 07 00 00       	push   $0x74d
f0122ae1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122ae6:	e8 10 d7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122aeb:	e8 4c 12 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122af0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122af3:	74 17                	je     f0122b0c <test_kfree_bestfirstfit+0x11cd>
f0122af5:	83 ec 04             	sub    $0x4,%esp
f0122af8:	68 74 ac 13 f0       	push   $0xf013ac74
f0122afd:	68 4e 07 00 00       	push   $0x74e
f0122b02:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122b07:	e8 ef d6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b0c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b0f:	e8 ab 9d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122b14:	29 c3                	sub    %eax,%ebx
f0122b16:	89 d8                	mov    %ebx,%eax
f0122b18:	83 f8 01             	cmp    $0x1,%eax
f0122b1b:	74 17                	je     f0122b34 <test_kfree_bestfirstfit+0x11f5>
f0122b1d:	83 ec 04             	sub    $0x4,%esp
f0122b20:	68 dc ac 13 f0       	push   $0xf013acdc
f0122b25:	68 4f 07 00 00       	push   $0x74f
f0122b2a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122b2f:	e8 c7 d6 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122b34:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0122b3b:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122b3e:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122b44:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122b47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b4e:	eb 0e                	jmp    f0122b5e <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0122b50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b53:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b56:	01 d0                	add    %edx,%eax
f0122b58:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122b5b:	ff 45 f4             	incl   -0xc(%ebp)
f0122b5e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0122b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b67:	7f e7                	jg     f0122b50 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b69:	e8 51 9d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122b6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b71:	e8 c6 11 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122b76:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122b79:	83 ec 0c             	sub    $0xc,%esp
f0122b7c:	68 00 00 10 00       	push   $0x100000
f0122b81:	e8 78 4c fe ff       	call   f01077fe <kmalloc>
f0122b86:	83 c4 10             	add    $0x10,%esp
f0122b89:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122b8f:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122b95:	89 c1                	mov    %eax,%ecx
f0122b97:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0122b9e:	10 00 00 
f0122ba1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122ba7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0122bb2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122bb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bbd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0122bc3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122bc9:	29 d0                	sub    %edx,%eax
f0122bcb:	89 c3                	mov    %eax,%ebx
f0122bcd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122bd4:	10 00 00 
f0122bd7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122bdc:	0f b6 d0             	movzbl %al,%edx
f0122bdf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122be5:	01 d0                	add    %edx,%eax
f0122be7:	48                   	dec    %eax
f0122be8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0122bee:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bf9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0122bff:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122c05:	29 d0                	sub    %edx,%eax
f0122c07:	01 c3                	add    %eax,%ebx
f0122c09:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0122c10:	10 00 00 
f0122c13:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0122c18:	0f b6 c0             	movzbl %al,%eax
f0122c1b:	c1 e0 04             	shl    $0x4,%eax
f0122c1e:	89 c2                	mov    %eax,%edx
f0122c20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122c26:	01 d0                	add    %edx,%eax
f0122c28:	48                   	dec    %eax
f0122c29:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0122c2f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122c35:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c3a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0122c40:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0122c46:	29 d0                	sub    %edx,%eax
f0122c48:	01 d8                	add    %ebx,%eax
f0122c4a:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122c4f:	39 c1                	cmp    %eax,%ecx
f0122c51:	74 17                	je     f0122c6a <test_kfree_bestfirstfit+0x132b>
f0122c53:	83 ec 04             	sub    $0x4,%esp
f0122c56:	68 40 ad 13 f0       	push   $0xf013ad40
f0122c5b:	68 5b 07 00 00       	push   $0x75b
f0122c60:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122c65:	e8 91 d5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c6a:	e8 cd 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122c6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c72:	74 17                	je     f0122c8b <test_kfree_bestfirstfit+0x134c>
f0122c74:	83 ec 04             	sub    $0x4,%esp
f0122c77:	68 74 ac 13 f0       	push   $0xf013ac74
f0122c7c:	68 5c 07 00 00       	push   $0x75c
f0122c81:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122c86:	e8 70 d5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122c8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122c8e:	e8 2c 9c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122c93:	29 c3                	sub    %eax,%ebx
f0122c95:	89 d8                	mov    %ebx,%eax
f0122c97:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122c9c:	74 17                	je     f0122cb5 <test_kfree_bestfirstfit+0x1376>
f0122c9e:	83 ec 04             	sub    $0x4,%esp
f0122ca1:	68 dc ac 13 f0       	push   $0xf013acdc
f0122ca6:	68 5d 07 00 00       	push   $0x75d
f0122cab:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122cb0:	e8 46 d5 fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122cb5:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122cbc:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122cbf:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122cc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122cc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ccf:	eb 0e                	jmp    f0122cdf <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0122cd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122cd4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cd7:	01 d0                	add    %edx,%eax
f0122cd9:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122cdc:	ff 45 f4             	incl   -0xc(%ebp)
f0122cdf:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122ce5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ce8:	7f e7                	jg     f0122cd1 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122cea:	83 ec 0c             	sub    $0xc,%esp
f0122ced:	68 7a b4 13 f0       	push   $0xf013b47a
f0122cf2:	e8 8b df fd ff       	call   f0100c82 <cprintf>
f0122cf7:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cfa:	e8 c0 9b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122cff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d02:	e8 35 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d07:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122d0a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d10:	83 ec 0c             	sub    $0xc,%esp
f0122d13:	50                   	push   %eax
f0122d14:	e8 a7 4b fe ff       	call   f01078c0 <kfree>
f0122d19:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d1c:	e8 1b 10 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d21:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d24:	74 17                	je     f0122d3d <test_kfree_bestfirstfit+0x13fe>
f0122d26:	83 ec 04             	sub    $0x4,%esp
f0122d29:	68 74 ac 13 f0       	push   $0xf013ac74
f0122d2e:	68 6d 07 00 00       	push   $0x76d
f0122d33:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122d38:	e8 be d4 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d3d:	e8 7d 9b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122d42:	89 c2                	mov    %eax,%edx
f0122d44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d47:	29 c2                	sub    %eax,%edx
f0122d49:	89 d0                	mov    %edx,%eax
f0122d4b:	83 f8 02             	cmp    $0x2,%eax
f0122d4e:	74 17                	je     f0122d67 <test_kfree_bestfirstfit+0x1428>
f0122d50:	83 ec 04             	sub    $0x4,%esp
f0122d53:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122d58:	68 6e 07 00 00       	push   $0x76e
f0122d5d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122d62:	e8 94 d4 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d67:	e8 53 9b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122d6c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d6f:	e8 c8 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d74:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122d77:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122d7d:	83 ec 0c             	sub    $0xc,%esp
f0122d80:	50                   	push   %eax
f0122d81:	e8 3a 4b fe ff       	call   f01078c0 <kfree>
f0122d86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d89:	e8 ae 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122d8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d91:	74 17                	je     f0122daa <test_kfree_bestfirstfit+0x146b>
f0122d93:	83 ec 04             	sub    $0x4,%esp
f0122d96:	68 74 ac 13 f0       	push   $0xf013ac74
f0122d9b:	68 74 07 00 00       	push   $0x774
f0122da0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122da5:	e8 51 d4 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122daa:	e8 10 9b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122daf:	89 c2                	mov    %eax,%edx
f0122db1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122db4:	29 c2                	sub    %eax,%edx
f0122db6:	89 d0                	mov    %edx,%eax
f0122db8:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122dbd:	74 17                	je     f0122dd6 <test_kfree_bestfirstfit+0x1497>
f0122dbf:	83 ec 04             	sub    $0x4,%esp
f0122dc2:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122dc7:	68 75 07 00 00       	push   $0x775
f0122dcc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122dd1:	e8 25 d4 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122dd6:	e8 e4 9a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122ddb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122dde:	e8 59 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122de3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122de6:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122dec:	83 ec 0c             	sub    $0xc,%esp
f0122def:	50                   	push   %eax
f0122df0:	e8 cb 4a fe ff       	call   f01078c0 <kfree>
f0122df5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122df8:	e8 3f 0f fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122dfd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e00:	74 17                	je     f0122e19 <test_kfree_bestfirstfit+0x14da>
f0122e02:	83 ec 04             	sub    $0x4,%esp
f0122e05:	68 74 ac 13 f0       	push   $0xf013ac74
f0122e0a:	68 7b 07 00 00       	push   $0x77b
f0122e0f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e14:	e8 e2 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e19:	e8 a1 9a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122e1e:	89 c2                	mov    %eax,%edx
f0122e20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e23:	29 c2                	sub    %eax,%edx
f0122e25:	89 d0                	mov    %edx,%eax
f0122e27:	83 f8 01             	cmp    $0x1,%eax
f0122e2a:	74 17                	je     f0122e43 <test_kfree_bestfirstfit+0x1504>
f0122e2c:	83 ec 04             	sub    $0x4,%esp
f0122e2f:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122e34:	68 7c 07 00 00       	push   $0x77c
f0122e39:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e3e:	e8 b8 d3 fd ff       	call   f01001fb <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e43:	e8 77 9a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122e48:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e4b:	e8 ec 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e50:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122e53:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0122e59:	83 ec 0c             	sub    $0xc,%esp
f0122e5c:	50                   	push   %eax
f0122e5d:	e8 5e 4a fe ff       	call   f01078c0 <kfree>
f0122e62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e65:	e8 d2 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122e6a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e6d:	74 17                	je     f0122e86 <test_kfree_bestfirstfit+0x1547>
f0122e6f:	83 ec 04             	sub    $0x4,%esp
f0122e72:	68 74 ac 13 f0       	push   $0xf013ac74
f0122e77:	68 82 07 00 00       	push   $0x782
f0122e7c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122e81:	e8 75 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e86:	e8 34 9a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122e8b:	89 c2                	mov    %eax,%edx
f0122e8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e90:	29 c2                	sub    %eax,%edx
f0122e92:	89 d0                	mov    %edx,%eax
f0122e94:	83 f8 04             	cmp    $0x4,%eax
f0122e97:	74 17                	je     f0122eb0 <test_kfree_bestfirstfit+0x1571>
f0122e99:	83 ec 04             	sub    $0x4,%esp
f0122e9c:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122ea1:	68 83 07 00 00       	push   $0x783
f0122ea6:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122eab:	e8 4b d3 fd ff       	call   f01001fb <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122eb0:	e8 0a 9a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122eb5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122eb8:	e8 7f 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ebd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122ec0:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122ec6:	83 ec 0c             	sub    $0xc,%esp
f0122ec9:	50                   	push   %eax
f0122eca:	e8 f1 49 fe ff       	call   f01078c0 <kfree>
f0122ecf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ed2:	e8 65 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122ed7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122eda:	74 17                	je     f0122ef3 <test_kfree_bestfirstfit+0x15b4>
f0122edc:	83 ec 04             	sub    $0x4,%esp
f0122edf:	68 74 ac 13 f0       	push   $0xf013ac74
f0122ee4:	68 89 07 00 00       	push   $0x789
f0122ee9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122eee:	e8 08 d3 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122ef3:	e8 c7 99 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122ef8:	89 c2                	mov    %eax,%edx
f0122efa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122efd:	29 c2                	sub    %eax,%edx
f0122eff:	89 d0                	mov    %edx,%eax
f0122f01:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122f06:	74 17                	je     f0122f1f <test_kfree_bestfirstfit+0x15e0>
f0122f08:	83 ec 04             	sub    $0x4,%esp
f0122f0b:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122f10:	68 8a 07 00 00       	push   $0x78a
f0122f15:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f1a:	e8 dc d2 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f1f:	e8 9b 99 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122f24:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f27:	e8 10 0e fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122f2f:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122f35:	83 ec 0c             	sub    $0xc,%esp
f0122f38:	50                   	push   %eax
f0122f39:	e8 82 49 fe ff       	call   f01078c0 <kfree>
f0122f3e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f41:	e8 f6 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f46:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f49:	74 17                	je     f0122f62 <test_kfree_bestfirstfit+0x1623>
f0122f4b:	83 ec 04             	sub    $0x4,%esp
f0122f4e:	68 74 ac 13 f0       	push   $0xf013ac74
f0122f53:	68 90 07 00 00       	push   $0x790
f0122f58:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f5d:	e8 99 d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122f62:	e8 58 99 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122f67:	89 c2                	mov    %eax,%edx
f0122f69:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122f6c:	29 c2                	sub    %eax,%edx
f0122f6e:	89 d0                	mov    %edx,%eax
f0122f70:	83 f8 01             	cmp    $0x1,%eax
f0122f73:	74 17                	je     f0122f8c <test_kfree_bestfirstfit+0x164d>
f0122f75:	83 ec 04             	sub    $0x4,%esp
f0122f78:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122f7d:	68 91 07 00 00       	push   $0x791
f0122f82:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122f87:	e8 6f d2 fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f8c:	e8 2e 99 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122f91:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f94:	e8 a3 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122f99:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122f9c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122fa2:	83 ec 0c             	sub    $0xc,%esp
f0122fa5:	50                   	push   %eax
f0122fa6:	e8 15 49 fe ff       	call   f01078c0 <kfree>
f0122fab:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fae:	e8 89 0d fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0122fb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fb6:	74 17                	je     f0122fcf <test_kfree_bestfirstfit+0x1690>
f0122fb8:	83 ec 04             	sub    $0x4,%esp
f0122fbb:	68 74 ac 13 f0       	push   $0xf013ac74
f0122fc0:	68 97 07 00 00       	push   $0x797
f0122fc5:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122fca:	e8 2c d2 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122fcf:	e8 eb 98 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0122fd4:	89 c2                	mov    %eax,%edx
f0122fd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122fd9:	29 c2                	sub    %eax,%edx
f0122fdb:	89 d0                	mov    %edx,%eax
f0122fdd:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122fe2:	74 17                	je     f0122ffb <test_kfree_bestfirstfit+0x16bc>
f0122fe4:	83 ec 04             	sub    $0x4,%esp
f0122fe7:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0122fec:	68 98 07 00 00       	push   $0x798
f0122ff1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0122ff6:	e8 00 d2 fd ff       	call   f01001fb <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122ffb:	e8 bf 98 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123000:	89 c2                	mov    %eax,%edx
f0123002:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123005:	39 c2                	cmp    %eax,%edx
f0123007:	74 17                	je     f0123020 <test_kfree_bestfirstfit+0x16e1>
f0123009:	83 ec 04             	sub    $0x4,%esp
f012300c:	68 84 b4 13 f0       	push   $0xf013b484
f0123011:	68 9a 07 00 00       	push   $0x79a
f0123016:	68 5a ac 13 f0       	push   $0xf013ac5a
f012301b:	e8 db d1 fd ff       	call   f01001fb <_panic>
	}
	cprintf("\b\b\b60%");
f0123020:	83 ec 0c             	sub    $0xc,%esp
f0123023:	68 b8 b4 13 f0       	push   $0xf013b4b8
f0123028:	e8 55 dc fd ff       	call   f0100c82 <cprintf>
f012302d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123030:	83 ec 0c             	sub    $0xc,%esp
f0123033:	6a 03                	push   $0x3
f0123035:	e8 25 9d fe ff       	call   f010cd5f <sys_bypassPageFault>
f012303a:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012303d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123044:	e9 82 00 00 00       	jmp    f01230cb <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123049:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012304c:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123053:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123056:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123059:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012305c:	e8 ec 9c fe ff       	call   f010cd4d <sys_rcr2>
f0123061:	89 c2                	mov    %eax,%edx
f0123063:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123066:	39 c2                	cmp    %eax,%edx
f0123068:	74 17                	je     f0123081 <test_kfree_bestfirstfit+0x1742>
f012306a:	83 ec 04             	sub    $0x4,%esp
f012306d:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0123072:	68 a9 07 00 00       	push   $0x7a9
f0123077:	68 5a ac 13 f0       	push   $0xf013ac5a
f012307c:	e8 7a d1 fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0123081:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123084:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012308b:	89 c2                	mov    %eax,%edx
f012308d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123090:	01 d0                	add    %edx,%eax
f0123092:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123095:	e8 b3 9c fe ff       	call   f010cd4d <sys_rcr2>
f012309a:	89 c2                	mov    %eax,%edx
f012309c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012309f:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01230a6:	89 c1                	mov    %eax,%ecx
f01230a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01230ab:	01 c8                	add    %ecx,%eax
f01230ad:	39 c2                	cmp    %eax,%edx
f01230af:	74 17                	je     f01230c8 <test_kfree_bestfirstfit+0x1789>
f01230b1:	83 ec 04             	sub    $0x4,%esp
f01230b4:	68 c0 b4 13 f0       	push   $0xf013b4c0
f01230b9:	68 ab 07 00 00       	push   $0x7ab
f01230be:	68 5a ac 13 f0       	push   $0xf013ac5a
f01230c3:	e8 33 d1 fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01230c8:	ff 45 f4             	incl   -0xc(%ebp)
f01230cb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01230cf:	0f 8e 74 ff ff ff    	jle    f0123049 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01230d5:	83 ec 0c             	sub    $0xc,%esp
f01230d8:	6a 00                	push   $0x0
f01230da:	e8 80 9c fe ff       	call   f010cd5f <sys_bypassPageFault>
f01230df:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01230e2:	83 ec 0c             	sub    $0xc,%esp
f01230e5:	68 05 b5 13 f0       	push   $0xf013b505
f01230ea:	e8 93 db fd ff       	call   f0100c82 <cprintf>
f01230ef:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01230f2:	e8 c8 97 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01230f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230fa:	e8 3d 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01230ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123102:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123108:	83 ec 0c             	sub    $0xc,%esp
f012310b:	50                   	push   %eax
f012310c:	e8 af 47 fe ff       	call   f01078c0 <kfree>
f0123111:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123114:	e8 23 0c fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123119:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012311c:	74 17                	je     f0123135 <test_kfree_bestfirstfit+0x17f6>
f012311e:	83 ec 04             	sub    $0x4,%esp
f0123121:	68 74 ac 13 f0       	push   $0xf013ac74
f0123126:	68 b9 07 00 00       	push   $0x7b9
f012312b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123130:	e8 c6 d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123135:	e8 85 97 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012313a:	89 c2                	mov    %eax,%edx
f012313c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012313f:	39 c2                	cmp    %eax,%edx
f0123141:	74 17                	je     f012315a <test_kfree_bestfirstfit+0x181b>
f0123143:	83 ec 04             	sub    $0x4,%esp
f0123146:	68 0c b5 13 f0       	push   $0xf013b50c
f012314b:	68 ba 07 00 00       	push   $0x7ba
f0123150:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123155:	e8 a1 d0 fd ff       	call   f01001fb <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012315a:	e8 60 97 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012315f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123162:	e8 d5 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123167:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012316a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123170:	83 ec 0c             	sub    $0xc,%esp
f0123173:	50                   	push   %eax
f0123174:	e8 47 47 fe ff       	call   f01078c0 <kfree>
f0123179:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012317c:	e8 bb 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123181:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123184:	74 17                	je     f012319d <test_kfree_bestfirstfit+0x185e>
f0123186:	83 ec 04             	sub    $0x4,%esp
f0123189:	68 74 ac 13 f0       	push   $0xf013ac74
f012318e:	68 c0 07 00 00       	push   $0x7c0
f0123193:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123198:	e8 5e d0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012319d:	e8 1d 97 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01231a2:	89 c2                	mov    %eax,%edx
f01231a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01231a7:	39 c2                	cmp    %eax,%edx
f01231a9:	74 17                	je     f01231c2 <test_kfree_bestfirstfit+0x1883>
f01231ab:	83 ec 04             	sub    $0x4,%esp
f01231ae:	68 0c b5 13 f0       	push   $0xf013b50c
f01231b3:	68 c1 07 00 00       	push   $0x7c1
f01231b8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01231bd:	e8 39 d0 fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01231c2:	e8 f8 96 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01231c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231ca:	e8 6d 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01231cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01231d2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01231d8:	83 ec 0c             	sub    $0xc,%esp
f01231db:	50                   	push   %eax
f01231dc:	e8 df 46 fe ff       	call   f01078c0 <kfree>
f01231e1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01231e4:	e8 53 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01231e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01231ec:	74 17                	je     f0123205 <test_kfree_bestfirstfit+0x18c6>
f01231ee:	83 ec 04             	sub    $0x4,%esp
f01231f1:	68 74 ac 13 f0       	push   $0xf013ac74
f01231f6:	68 c7 07 00 00       	push   $0x7c7
f01231fb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123200:	e8 f6 cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123205:	e8 b5 96 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012320a:	89 c2                	mov    %eax,%edx
f012320c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012320f:	39 c2                	cmp    %eax,%edx
f0123211:	74 17                	je     f012322a <test_kfree_bestfirstfit+0x18eb>
f0123213:	83 ec 04             	sub    $0x4,%esp
f0123216:	68 0c b5 13 f0       	push   $0xf013b50c
f012321b:	68 c8 07 00 00       	push   $0x7c8
f0123220:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123225:	e8 d1 cf fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012322a:	e8 90 96 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012322f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123232:	e8 05 0b fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123237:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012323a:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123240:	83 ec 0c             	sub    $0xc,%esp
f0123243:	50                   	push   %eax
f0123244:	e8 77 46 fe ff       	call   f01078c0 <kfree>
f0123249:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012324c:	e8 eb 0a fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123251:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123254:	74 17                	je     f012326d <test_kfree_bestfirstfit+0x192e>
f0123256:	83 ec 04             	sub    $0x4,%esp
f0123259:	68 74 ac 13 f0       	push   $0xf013ac74
f012325e:	68 ce 07 00 00       	push   $0x7ce
f0123263:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123268:	e8 8e cf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012326d:	e8 4d 96 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123272:	89 c2                	mov    %eax,%edx
f0123274:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123277:	39 c2                	cmp    %eax,%edx
f0123279:	74 17                	je     f0123292 <test_kfree_bestfirstfit+0x1953>
f012327b:	83 ec 04             	sub    $0x4,%esp
f012327e:	68 0c b5 13 f0       	push   $0xf013b50c
f0123283:	68 cf 07 00 00       	push   $0x7cf
f0123288:	68 5a ac 13 f0       	push   $0xf013ac5a
f012328d:	e8 69 cf fd ff       	call   f01001fb <_panic>

	}
	cprintf("\b\b\b85%");
f0123292:	83 ec 0c             	sub    $0xc,%esp
f0123295:	68 53 b5 13 f0       	push   $0xf013b553
f012329a:	e8 e3 d9 fd ff       	call   f0100c82 <cprintf>
f012329f:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01232a2:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01232a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01232b0:	eb 48                	jmp    f01232fa <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01232b2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01232b5:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01232ba:	83 ec 04             	sub    $0x4,%esp
f01232bd:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01232c3:	51                   	push   %ecx
f01232c4:	52                   	push   %edx
f01232c5:	50                   	push   %eax
f01232c6:	e8 0f 37 fe ff       	call   f01069da <get_page_table>
f01232cb:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01232ce:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01232d4:	85 c0                	test   %eax,%eax
f01232d6:	75 17                	jne    f01232ef <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01232d8:	83 ec 04             	sub    $0x4,%esp
f01232db:	68 5c b5 13 f0       	push   $0xf013b55c
f01232e0:	68 dd 07 00 00       	push   $0x7dd
f01232e5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01232ea:	e8 0c cf fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01232ef:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01232f6:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01232fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01232fe:	78 b2                	js     f01232b2 <test_kfree_bestfirstfit+0x1973>
f0123300:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0123304:	7f 09                	jg     f012330f <test_kfree_bestfirstfit+0x19d0>
f0123306:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012330d:	76 a3                	jbe    f01232b2 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f012330f:	83 ec 0c             	sub    $0xc,%esp
f0123312:	68 3e ae 13 f0       	push   $0xf013ae3e
f0123317:	e8 66 d9 fd ff       	call   f0100c82 <cprintf>
f012331c:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012331f:	83 ec 0c             	sub    $0xc,%esp
f0123322:	68 c4 b5 13 f0       	push   $0xf013b5c4
f0123327:	e8 56 d9 fd ff       	call   f0100c82 <cprintf>
f012332c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012332f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123334:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0123337:	5b                   	pop    %ebx
f0123338:	5f                   	pop    %edi
f0123339:	5d                   	pop    %ebp
f012333a:	c3                   	ret    

f012333b <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f012333b:	55                   	push   %ebp
f012333c:	89 e5                	mov    %esp,%ebp
f012333e:	57                   	push   %edi
f012333f:	56                   	push   %esi
f0123340:	53                   	push   %ebx
f0123341:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0123347:	83 ec 0c             	sub    $0xc,%esp
f012334a:	68 9c ab 13 f0       	push   $0xf013ab9c
f012334f:	e8 2e d9 fd ff       	call   f0100c82 <cprintf>
f0123354:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123357:	83 ec 0c             	sub    $0xc,%esp
f012335a:	68 cc ab 13 f0       	push   $0xf013abcc
f012335f:	e8 1e d9 fd ff       	call   f0100c82 <cprintf>
f0123364:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123367:	83 ec 0c             	sub    $0xc,%esp
f012336a:	68 9c ab 13 f0       	push   $0xf013ab9c
f012336f:	e8 0e d9 fd ff       	call   f0100c82 <cprintf>
f0123374:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123377:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f012337b:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f012337f:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123385:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012338b:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123392:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123399:	e8 21 95 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012339e:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01233a1:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01233a7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01233b1:	89 d7                	mov    %edx,%edi
f01233b3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01233b5:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01233bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01233c5:	89 d7                	mov    %edx,%edi
f01233c7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01233c9:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01233cf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01233d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01233d9:	89 d7                	mov    %edx,%edi
f01233db:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233dd:	e8 dd 94 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01233e2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233e5:	e8 52 09 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01233ea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01233ed:	83 ec 0c             	sub    $0xc,%esp
f01233f0:	68 00 fc 1f 00       	push   $0x1ffc00
f01233f5:	e8 04 44 fe ff       	call   f01077fe <kmalloc>
f01233fa:	83 c4 10             	add    $0x10,%esp
f01233fd:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123403:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123409:	89 c1                	mov    %eax,%ecx
f012340b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0123412:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123415:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012341a:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012341d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123420:	ba 00 00 00 00       	mov    $0x0,%edx
f0123425:	f7 75 a0             	divl   -0x60(%ebp)
f0123428:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012342b:	29 d0                	sub    %edx,%eax
f012342d:	89 c3                	mov    %eax,%ebx
f012342f:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123436:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012343b:	0f b6 d0             	movzbl %al,%edx
f012343e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123441:	01 d0                	add    %edx,%eax
f0123443:	48                   	dec    %eax
f0123444:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123447:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012344a:	ba 00 00 00 00       	mov    $0x0,%edx
f012344f:	f7 75 98             	divl   -0x68(%ebp)
f0123452:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123455:	29 d0                	sub    %edx,%eax
f0123457:	01 c3                	add    %eax,%ebx
f0123459:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0123460:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123465:	0f b6 c0             	movzbl %al,%eax
f0123468:	c1 e0 04             	shl    $0x4,%eax
f012346b:	89 c2                	mov    %eax,%edx
f012346d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123470:	01 d0                	add    %edx,%eax
f0123472:	48                   	dec    %eax
f0123473:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0123476:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123479:	ba 00 00 00 00       	mov    $0x0,%edx
f012347e:	f7 75 90             	divl   -0x70(%ebp)
f0123481:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123484:	29 d0                	sub    %edx,%eax
f0123486:	01 d8                	add    %ebx,%eax
f0123488:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012348d:	39 c1                	cmp    %eax,%ecx
f012348f:	74 17                	je     f01234a8 <test_kheap_phys_addr+0x16d>
f0123491:	83 ec 04             	sub    $0x4,%esp
f0123494:	68 40 ad 13 f0       	push   $0xf013ad40
f0123499:	68 0a 08 00 00       	push   $0x80a
f012349e:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234a3:	e8 53 cd fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234a8:	e8 8f 08 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01234ad:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01234b0:	74 17                	je     f01234c9 <test_kheap_phys_addr+0x18e>
f01234b2:	83 ec 04             	sub    $0x4,%esp
f01234b5:	68 74 ac 13 f0       	push   $0xf013ac74
f01234ba:	68 0b 08 00 00       	push   $0x80b
f01234bf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234c4:	e8 32 cd fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01234c9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01234cc:	e8 ee 93 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01234d1:	29 c3                	sub    %eax,%ebx
f01234d3:	89 d8                	mov    %ebx,%eax
f01234d5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01234da:	74 17                	je     f01234f3 <test_kheap_phys_addr+0x1b8>
f01234dc:	83 ec 04             	sub    $0x4,%esp
f01234df:	68 dc ac 13 f0       	push   $0xf013acdc
f01234e4:	68 0c 08 00 00       	push   $0x80c
f01234e9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01234ee:	e8 08 cd fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01234f3:	e8 c7 93 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01234f8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234fb:	e8 3c 08 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123500:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123503:	83 ec 0c             	sub    $0xc,%esp
f0123506:	68 00 fc 1f 00       	push   $0x1ffc00
f012350b:	e8 ee 42 fe ff       	call   f01077fe <kmalloc>
f0123510:	83 c4 10             	add    $0x10,%esp
f0123513:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123519:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012351f:	89 c1                	mov    %eax,%ecx
f0123521:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0123528:	8b 45 88             	mov    -0x78(%ebp),%eax
f012352b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123530:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123533:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123536:	ba 00 00 00 00       	mov    $0x0,%edx
f012353b:	f7 75 88             	divl   -0x78(%ebp)
f012353e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123541:	29 d0                	sub    %edx,%eax
f0123543:	89 c3                	mov    %eax,%ebx
f0123545:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012354c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123551:	0f b6 d0             	movzbl %al,%edx
f0123554:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123557:	01 d0                	add    %edx,%eax
f0123559:	48                   	dec    %eax
f012355a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0123560:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123566:	ba 00 00 00 00       	mov    $0x0,%edx
f012356b:	f7 75 80             	divl   -0x80(%ebp)
f012356e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0123574:	29 d0                	sub    %edx,%eax
f0123576:	01 c3                	add    %eax,%ebx
f0123578:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012357f:	10 00 00 
f0123582:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123587:	0f b6 c0             	movzbl %al,%eax
f012358a:	c1 e0 04             	shl    $0x4,%eax
f012358d:	89 c2                	mov    %eax,%edx
f012358f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123595:	01 d0                	add    %edx,%eax
f0123597:	48                   	dec    %eax
f0123598:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012359e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01235a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01235a9:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01235af:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01235b5:	29 d0                	sub    %edx,%eax
f01235b7:	01 d8                	add    %ebx,%eax
f01235b9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01235be:	39 c1                	cmp    %eax,%ecx
f01235c0:	74 17                	je     f01235d9 <test_kheap_phys_addr+0x29e>
f01235c2:	83 ec 04             	sub    $0x4,%esp
f01235c5:	68 40 ad 13 f0       	push   $0xf013ad40
f01235ca:	68 12 08 00 00       	push   $0x812
f01235cf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01235d4:	e8 22 cc fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01235d9:	e8 5e 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01235de:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01235e1:	74 17                	je     f01235fa <test_kheap_phys_addr+0x2bf>
f01235e3:	83 ec 04             	sub    $0x4,%esp
f01235e6:	68 74 ac 13 f0       	push   $0xf013ac74
f01235eb:	68 13 08 00 00       	push   $0x813
f01235f0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01235f5:	e8 01 cc fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01235fa:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01235fd:	e8 bd 92 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123602:	29 c3                	sub    %eax,%ebx
f0123604:	89 d8                	mov    %ebx,%eax
f0123606:	3d 00 02 00 00       	cmp    $0x200,%eax
f012360b:	74 17                	je     f0123624 <test_kheap_phys_addr+0x2e9>
f012360d:	83 ec 04             	sub    $0x4,%esp
f0123610:	68 dc ac 13 f0       	push   $0xf013acdc
f0123615:	68 14 08 00 00       	push   $0x814
f012361a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012361f:	e8 d7 cb fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123624:	e8 96 92 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123629:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012362c:	e8 0b 07 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123631:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123634:	83 ec 0c             	sub    $0xc,%esp
f0123637:	68 00 08 00 00       	push   $0x800
f012363c:	e8 bd 41 fe ff       	call   f01077fe <kmalloc>
f0123641:	83 c4 10             	add    $0x10,%esp
f0123644:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012364a:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0123650:	89 c1                	mov    %eax,%ecx
f0123652:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0123659:	10 00 00 
f012365c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0123662:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123667:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012366d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123673:	ba 00 00 00 00       	mov    $0x0,%edx
f0123678:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012367e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0123684:	29 d0                	sub    %edx,%eax
f0123686:	89 c3                	mov    %eax,%ebx
f0123688:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012368f:	10 00 00 
f0123692:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123697:	0f b6 d0             	movzbl %al,%edx
f012369a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01236a0:	01 d0                	add    %edx,%eax
f01236a2:	48                   	dec    %eax
f01236a3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01236a9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01236af:	ba 00 00 00 00       	mov    $0x0,%edx
f01236b4:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01236ba:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01236c0:	29 d0                	sub    %edx,%eax
f01236c2:	01 c3                	add    %eax,%ebx
f01236c4:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01236cb:	10 00 00 
f01236ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01236d3:	0f b6 c0             	movzbl %al,%eax
f01236d6:	c1 e0 04             	shl    $0x4,%eax
f01236d9:	89 c2                	mov    %eax,%edx
f01236db:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01236e1:	01 d0                	add    %edx,%eax
f01236e3:	48                   	dec    %eax
f01236e4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01236ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01236f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01236f5:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01236fb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0123701:	29 d0                	sub    %edx,%eax
f0123703:	01 d8                	add    %ebx,%eax
f0123705:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012370a:	39 c1                	cmp    %eax,%ecx
f012370c:	74 17                	je     f0123725 <test_kheap_phys_addr+0x3ea>
f012370e:	83 ec 04             	sub    $0x4,%esp
f0123711:	68 40 ad 13 f0       	push   $0xf013ad40
f0123716:	68 1a 08 00 00       	push   $0x81a
f012371b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123720:	e8 d6 ca fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123725:	e8 12 06 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012372a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012372d:	74 17                	je     f0123746 <test_kheap_phys_addr+0x40b>
f012372f:	83 ec 04             	sub    $0x4,%esp
f0123732:	68 74 ac 13 f0       	push   $0xf013ac74
f0123737:	68 1b 08 00 00       	push   $0x81b
f012373c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123741:	e8 b5 ca fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123746:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123749:	e8 71 91 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012374e:	29 c3                	sub    %eax,%ebx
f0123750:	89 d8                	mov    %ebx,%eax
f0123752:	83 f8 01             	cmp    $0x1,%eax
f0123755:	74 17                	je     f012376e <test_kheap_phys_addr+0x433>
f0123757:	83 ec 04             	sub    $0x4,%esp
f012375a:	68 dc ac 13 f0       	push   $0xf013acdc
f012375f:	68 1c 08 00 00       	push   $0x81c
f0123764:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123769:	e8 8d ca fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012376e:	e8 4c 91 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123773:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123776:	e8 c1 05 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f012377b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012377e:	83 ec 0c             	sub    $0xc,%esp
f0123781:	68 00 08 00 00       	push   $0x800
f0123786:	e8 73 40 fe ff       	call   f01077fe <kmalloc>
f012378b:	83 c4 10             	add    $0x10,%esp
f012378e:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123794:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f012379a:	89 c1                	mov    %eax,%ecx
f012379c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01237a3:	10 00 00 
f01237a6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01237ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01237b1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01237b7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01237bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01237c2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01237c8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01237ce:	29 d0                	sub    %edx,%eax
f01237d0:	89 c3                	mov    %eax,%ebx
f01237d2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01237d9:	10 00 00 
f01237dc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01237e1:	0f b6 d0             	movzbl %al,%edx
f01237e4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01237ea:	01 d0                	add    %edx,%eax
f01237ec:	48                   	dec    %eax
f01237ed:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01237f3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01237f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01237fe:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123804:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012380a:	29 d0                	sub    %edx,%eax
f012380c:	01 c3                	add    %eax,%ebx
f012380e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123815:	10 00 00 
f0123818:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012381d:	0f b6 c0             	movzbl %al,%eax
f0123820:	c1 e0 04             	shl    $0x4,%eax
f0123823:	89 c2                	mov    %eax,%edx
f0123825:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012382b:	01 d0                	add    %edx,%eax
f012382d:	48                   	dec    %eax
f012382e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123834:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012383a:	ba 00 00 00 00       	mov    $0x0,%edx
f012383f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123845:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012384b:	29 d0                	sub    %edx,%eax
f012384d:	01 d8                	add    %ebx,%eax
f012384f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123854:	39 c1                	cmp    %eax,%ecx
f0123856:	74 17                	je     f012386f <test_kheap_phys_addr+0x534>
f0123858:	83 ec 04             	sub    $0x4,%esp
f012385b:	68 40 ad 13 f0       	push   $0xf013ad40
f0123860:	68 22 08 00 00       	push   $0x822
f0123865:	68 5a ac 13 f0       	push   $0xf013ac5a
f012386a:	e8 8c c9 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012386f:	e8 c8 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123874:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123877:	74 17                	je     f0123890 <test_kheap_phys_addr+0x555>
f0123879:	83 ec 04             	sub    $0x4,%esp
f012387c:	68 74 ac 13 f0       	push   $0xf013ac74
f0123881:	68 23 08 00 00       	push   $0x823
f0123886:	68 5a ac 13 f0       	push   $0xf013ac5a
f012388b:	e8 6b c9 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123890:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123893:	e8 27 90 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123898:	29 c3                	sub    %eax,%ebx
f012389a:	89 d8                	mov    %ebx,%eax
f012389c:	83 f8 01             	cmp    $0x1,%eax
f012389f:	74 17                	je     f01238b8 <test_kheap_phys_addr+0x57d>
f01238a1:	83 ec 04             	sub    $0x4,%esp
f01238a4:	68 dc ac 13 f0       	push   $0xf013acdc
f01238a9:	68 24 08 00 00       	push   $0x824
f01238ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f01238b3:	e8 43 c9 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01238b8:	e8 02 90 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01238bd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238c0:	e8 77 04 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01238c5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01238c8:	83 ec 0c             	sub    $0xc,%esp
f01238cb:	68 00 1c 00 00       	push   $0x1c00
f01238d0:	e8 29 3f fe ff       	call   f01077fe <kmalloc>
f01238d5:	83 c4 10             	add    $0x10,%esp
f01238d8:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01238de:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01238e4:	89 c1                	mov    %eax,%ecx
f01238e6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01238ed:	10 00 00 
f01238f0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01238f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01238fb:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0123901:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123907:	ba 00 00 00 00       	mov    $0x0,%edx
f012390c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0123912:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123918:	29 d0                	sub    %edx,%eax
f012391a:	89 c3                	mov    %eax,%ebx
f012391c:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123923:	10 00 00 
f0123926:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012392b:	0f b6 d0             	movzbl %al,%edx
f012392e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123934:	01 d0                	add    %edx,%eax
f0123936:	48                   	dec    %eax
f0123937:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012393d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123943:	ba 00 00 00 00       	mov    $0x0,%edx
f0123948:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012394e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123954:	29 d0                	sub    %edx,%eax
f0123956:	01 c3                	add    %eax,%ebx
f0123958:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012395f:	10 00 00 
f0123962:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123967:	0f b6 c0             	movzbl %al,%eax
f012396a:	c1 e0 04             	shl    $0x4,%eax
f012396d:	89 c2                	mov    %eax,%edx
f012396f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123975:	01 d0                	add    %edx,%eax
f0123977:	48                   	dec    %eax
f0123978:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012397e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123984:	ba 00 00 00 00       	mov    $0x0,%edx
f0123989:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012398f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123995:	29 d0                	sub    %edx,%eax
f0123997:	01 d8                	add    %ebx,%eax
f0123999:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012399e:	39 c1                	cmp    %eax,%ecx
f01239a0:	74 17                	je     f01239b9 <test_kheap_phys_addr+0x67e>
f01239a2:	83 ec 04             	sub    $0x4,%esp
f01239a5:	68 40 ad 13 f0       	push   $0xf013ad40
f01239aa:	68 2a 08 00 00       	push   $0x82a
f01239af:	68 5a ac 13 f0       	push   $0xf013ac5a
f01239b4:	e8 42 c8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01239b9:	e8 7e 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f01239be:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01239c1:	74 17                	je     f01239da <test_kheap_phys_addr+0x69f>
f01239c3:	83 ec 04             	sub    $0x4,%esp
f01239c6:	68 74 ac 13 f0       	push   $0xf013ac74
f01239cb:	68 2b 08 00 00       	push   $0x82b
f01239d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01239d5:	e8 21 c8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239da:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239dd:	e8 dd 8e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01239e2:	29 c3                	sub    %eax,%ebx
f01239e4:	89 d8                	mov    %ebx,%eax
f01239e6:	83 f8 02             	cmp    $0x2,%eax
f01239e9:	74 17                	je     f0123a02 <test_kheap_phys_addr+0x6c7>
f01239eb:	83 ec 04             	sub    $0x4,%esp
f01239ee:	68 dc ac 13 f0       	push   $0xf013acdc
f01239f3:	68 2c 08 00 00       	push   $0x82c
f01239f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01239fd:	e8 f9 c7 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123a02:	e8 b8 8e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123a07:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123a0a:	e8 2d 03 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123a0f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0123a12:	83 ec 0c             	sub    $0xc,%esp
f0123a15:	68 00 fc 2f 00       	push   $0x2ffc00
f0123a1a:	e8 df 3d fe ff       	call   f01077fe <kmalloc>
f0123a1f:	83 c4 10             	add    $0x10,%esp
f0123a22:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a28:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0123a2e:	89 c1                	mov    %eax,%ecx
f0123a30:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123a37:	10 00 00 
f0123a3a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123a40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a45:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123a4b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a51:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a56:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123a5c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a62:	29 d0                	sub    %edx,%eax
f0123a64:	89 c3                	mov    %eax,%ebx
f0123a66:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123a6d:	10 00 00 
f0123a70:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123a75:	0f b6 d0             	movzbl %al,%edx
f0123a78:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123a7e:	01 d0                	add    %edx,%eax
f0123a80:	48                   	dec    %eax
f0123a81:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123a87:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123a8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a92:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123a98:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123a9e:	29 d0                	sub    %edx,%eax
f0123aa0:	01 c3                	add    %eax,%ebx
f0123aa2:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123aa9:	10 00 00 
f0123aac:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123ab1:	0f b6 c0             	movzbl %al,%eax
f0123ab4:	c1 e0 04             	shl    $0x4,%eax
f0123ab7:	89 c2                	mov    %eax,%edx
f0123ab9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123abf:	01 d0                	add    %edx,%eax
f0123ac1:	48                   	dec    %eax
f0123ac2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123ac8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123ace:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ad3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123ad9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123adf:	29 d0                	sub    %edx,%eax
f0123ae1:	01 d8                	add    %ebx,%eax
f0123ae3:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123ae8:	39 c1                	cmp    %eax,%ecx
f0123aea:	74 17                	je     f0123b03 <test_kheap_phys_addr+0x7c8>
f0123aec:	83 ec 04             	sub    $0x4,%esp
f0123aef:	68 40 ad 13 f0       	push   $0xf013ad40
f0123af4:	68 32 08 00 00       	push   $0x832
f0123af9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123afe:	e8 f8 c6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b03:	e8 34 02 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123b08:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123b0b:	74 17                	je     f0123b24 <test_kheap_phys_addr+0x7e9>
f0123b0d:	83 ec 04             	sub    $0x4,%esp
f0123b10:	68 74 ac 13 f0       	push   $0xf013ac74
f0123b15:	68 33 08 00 00       	push   $0x833
f0123b1a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123b1f:	e8 d7 c6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b24:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123b27:	e8 93 8d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123b2c:	29 c3                	sub    %eax,%ebx
f0123b2e:	89 d8                	mov    %ebx,%eax
f0123b30:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123b35:	74 17                	je     f0123b4e <test_kheap_phys_addr+0x813>
f0123b37:	83 ec 04             	sub    $0x4,%esp
f0123b3a:	68 dc ac 13 f0       	push   $0xf013acdc
f0123b3f:	68 34 08 00 00       	push   $0x834
f0123b44:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123b49:	e8 ad c6 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b4e:	e8 6c 8d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123b53:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b56:	e8 e1 01 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123b5b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123b5e:	83 ec 0c             	sub    $0xc,%esp
f0123b61:	68 00 fc 5f 00       	push   $0x5ffc00
f0123b66:	e8 93 3c fe ff       	call   f01077fe <kmalloc>
f0123b6b:	83 c4 10             	add    $0x10,%esp
f0123b6e:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123b74:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123b7a:	89 c1                	mov    %eax,%ecx
f0123b7c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0123b83:	10 00 00 
f0123b86:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123b8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123b91:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123b97:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123b9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ba2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123ba8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123bae:	29 d0                	sub    %edx,%eax
f0123bb0:	89 c3                	mov    %eax,%ebx
f0123bb2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123bb9:	10 00 00 
f0123bbc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123bc1:	0f b6 d0             	movzbl %al,%edx
f0123bc4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123bca:	01 d0                	add    %edx,%eax
f0123bcc:	48                   	dec    %eax
f0123bcd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0123bd3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123bd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bde:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123be4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123bea:	29 d0                	sub    %edx,%eax
f0123bec:	01 c3                	add    %eax,%ebx
f0123bee:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123bf5:	10 00 00 
f0123bf8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123bfd:	0f b6 c0             	movzbl %al,%eax
f0123c00:	c1 e0 04             	shl    $0x4,%eax
f0123c03:	89 c2                	mov    %eax,%edx
f0123c05:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123c0b:	01 d0                	add    %edx,%eax
f0123c0d:	48                   	dec    %eax
f0123c0e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123c14:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123c1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c1f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123c25:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123c2b:	29 d0                	sub    %edx,%eax
f0123c2d:	01 d8                	add    %ebx,%eax
f0123c2f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123c34:	39 c1                	cmp    %eax,%ecx
f0123c36:	74 17                	je     f0123c4f <test_kheap_phys_addr+0x914>
f0123c38:	83 ec 04             	sub    $0x4,%esp
f0123c3b:	68 40 ad 13 f0       	push   $0xf013ad40
f0123c40:	68 3a 08 00 00       	push   $0x83a
f0123c45:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c4a:	e8 ac c5 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c4f:	e8 e8 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123c54:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123c57:	74 17                	je     f0123c70 <test_kheap_phys_addr+0x935>
f0123c59:	83 ec 04             	sub    $0x4,%esp
f0123c5c:	68 74 ac 13 f0       	push   $0xf013ac74
f0123c61:	68 3b 08 00 00       	push   $0x83b
f0123c66:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c6b:	e8 8b c5 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123c70:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123c73:	e8 47 8c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123c78:	29 c3                	sub    %eax,%ebx
f0123c7a:	89 d8                	mov    %ebx,%eax
f0123c7c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123c81:	74 17                	je     f0123c9a <test_kheap_phys_addr+0x95f>
f0123c83:	83 ec 04             	sub    $0x4,%esp
f0123c86:	68 dc ac 13 f0       	push   $0xf013acdc
f0123c8b:	68 3c 08 00 00       	push   $0x83c
f0123c90:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123c95:	e8 61 c5 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c9a:	e8 20 8c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123c9f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ca2:	e8 95 00 fe ff       	call   f0103d3c <pf_calculate_free_frames>
f0123ca7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123caa:	83 ec 0c             	sub    $0xc,%esp
f0123cad:	68 00 38 00 00       	push   $0x3800
f0123cb2:	e8 47 3b fe ff       	call   f01077fe <kmalloc>
f0123cb7:	83 c4 10             	add    $0x10,%esp
f0123cba:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123cc0:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123cc6:	89 c1                	mov    %eax,%ecx
f0123cc8:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0123ccf:	10 00 00 
f0123cd2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123cd8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123cdd:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0123ce3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123ce9:	ba 00 00 00 00       	mov    $0x0,%edx
f0123cee:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123cf4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123cfa:	29 d0                	sub    %edx,%eax
f0123cfc:	89 c3                	mov    %eax,%ebx
f0123cfe:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123d05:	10 00 00 
f0123d08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d0d:	0f b6 d0             	movzbl %al,%edx
f0123d10:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123d16:	01 d0                	add    %edx,%eax
f0123d18:	48                   	dec    %eax
f0123d19:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0123d1f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123d25:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d2a:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0123d30:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123d36:	29 d0                	sub    %edx,%eax
f0123d38:	01 c3                	add    %eax,%ebx
f0123d3a:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123d41:	10 00 00 
f0123d44:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123d49:	0f b6 c0             	movzbl %al,%eax
f0123d4c:	c1 e0 04             	shl    $0x4,%eax
f0123d4f:	89 c2                	mov    %eax,%edx
f0123d51:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123d57:	01 d0                	add    %edx,%eax
f0123d59:	48                   	dec    %eax
f0123d5a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123d60:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123d66:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d6b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123d71:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123d77:	29 d0                	sub    %edx,%eax
f0123d79:	01 d8                	add    %ebx,%eax
f0123d7b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123d80:	39 c1                	cmp    %eax,%ecx
f0123d82:	74 17                	je     f0123d9b <test_kheap_phys_addr+0xa60>
f0123d84:	83 ec 04             	sub    $0x4,%esp
f0123d87:	68 40 ad 13 f0       	push   $0xf013ad40
f0123d8c:	68 42 08 00 00       	push   $0x842
f0123d91:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123d96:	e8 60 c4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d9b:	e8 9c ff fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0123da0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123da3:	74 17                	je     f0123dbc <test_kheap_phys_addr+0xa81>
f0123da5:	83 ec 04             	sub    $0x4,%esp
f0123da8:	68 74 ac 13 f0       	push   $0xf013ac74
f0123dad:	68 43 08 00 00       	push   $0x843
f0123db2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123db7:	e8 3f c4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123dbc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123dbf:	e8 fb 8a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0123dc4:	29 c3                	sub    %eax,%ebx
f0123dc6:	89 d8                	mov    %ebx,%eax
f0123dc8:	83 f8 04             	cmp    $0x4,%eax
f0123dcb:	74 17                	je     f0123de4 <test_kheap_phys_addr+0xaa9>
f0123dcd:	83 ec 04             	sub    $0x4,%esp
f0123dd0:	68 dc ac 13 f0       	push   $0xf013acdc
f0123dd5:	68 44 08 00 00       	push   $0x844
f0123dda:	68 5a ac 13 f0       	push   $0xf013ac5a
f0123ddf:	e8 17 c4 fd ff       	call   f01001fb <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123de4:	89 e0                	mov    %esp,%eax
f0123de6:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123de8:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123def:	10 00 00 
f0123df2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123df8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123dfd:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123e03:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123e09:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e0e:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123e14:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123e1a:	29 d0                	sub    %edx,%eax
f0123e1c:	89 c1                	mov    %eax,%ecx
f0123e1e:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123e25:	10 00 00 
f0123e28:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123e2d:	0f b6 d0             	movzbl %al,%edx
f0123e30:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0123e36:	01 d0                	add    %edx,%eax
f0123e38:	48                   	dec    %eax
f0123e39:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0123e3f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123e45:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e4a:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0123e50:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123e56:	29 d0                	sub    %edx,%eax
f0123e58:	01 c1                	add    %eax,%ecx
f0123e5a:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0123e61:	10 00 00 
f0123e64:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123e69:	0f b6 c0             	movzbl %al,%eax
f0123e6c:	c1 e0 04             	shl    $0x4,%eax
f0123e6f:	89 c2                	mov    %eax,%edx
f0123e71:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123e77:	01 d0                	add    %edx,%eax
f0123e79:	48                   	dec    %eax
f0123e7a:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0123e80:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123e86:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e8b:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0123e91:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123e97:	29 d0                	sub    %edx,%eax
f0123e99:	01 c8                	add    %ecx,%eax
f0123e9b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123ea0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123ea6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123ead:	10 00 00 
f0123eb0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123eb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123ebb:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123ec1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123ec7:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ecc:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123ed2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123ed8:	29 d0                	sub    %edx,%eax
f0123eda:	89 c1                	mov    %eax,%ecx
f0123edc:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123ee3:	10 00 00 
f0123ee6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123eeb:	0f b6 d0             	movzbl %al,%edx
f0123eee:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123ef4:	01 d0                	add    %edx,%eax
f0123ef6:	48                   	dec    %eax
f0123ef7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123efd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123f03:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f08:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123f0e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123f14:	29 d0                	sub    %edx,%eax
f0123f16:	01 c1                	add    %eax,%ecx
f0123f18:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0123f1f:	10 00 00 
f0123f22:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0123f27:	0f b6 c0             	movzbl %al,%eax
f0123f2a:	c1 e0 04             	shl    $0x4,%eax
f0123f2d:	89 c2                	mov    %eax,%edx
f0123f2f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123f35:	01 d0                	add    %edx,%eax
f0123f37:	48                   	dec    %eax
f0123f38:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0123f3e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f49:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0123f4f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123f55:	29 d0                	sub    %edx,%eax
f0123f57:	01 c8                	add    %ecx,%eax
f0123f59:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123f5e:	c1 e8 0c             	shr    $0xc,%eax
f0123f61:	89 c2                	mov    %eax,%edx
f0123f63:	4a                   	dec    %edx
f0123f64:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0123f6a:	c1 e0 02             	shl    $0x2,%eax
f0123f6d:	8d 50 03             	lea    0x3(%eax),%edx
f0123f70:	b8 10 00 00 00       	mov    $0x10,%eax
f0123f75:	48                   	dec    %eax
f0123f76:	01 d0                	add    %edx,%eax
f0123f78:	bf 10 00 00 00       	mov    $0x10,%edi
f0123f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f82:	f7 f7                	div    %edi
f0123f84:	6b c0 10             	imul   $0x10,%eax,%eax
f0123f87:	29 c4                	sub    %eax,%esp
f0123f89:	89 e0                	mov    %esp,%eax
f0123f8b:	83 c0 03             	add    $0x3,%eax
f0123f8e:	c1 e8 02             	shr    $0x2,%eax
f0123f91:	c1 e0 02             	shl    $0x2,%eax
f0123f94:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123f9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123fa1:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0123fa8:	10 00 00 
f0123fab:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123fb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123fb6:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123fbc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123fc2:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fc7:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123fcd:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123fd3:	29 d0                	sub    %edx,%eax
f0123fd5:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123fda:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123fdd:	eb 29                	jmp    f0124008 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123fdf:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123fe2:	8d 43 01             	lea    0x1(%ebx),%eax
f0123fe5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123fe8:	83 ec 0c             	sub    $0xc,%esp
f0123feb:	ff 75 e0             	pushl  -0x20(%ebp)
f0123fee:	e8 20 3a fe ff       	call   f0107a13 <kheap_physical_address>
f0123ff3:	83 c4 10             	add    $0x10,%esp
f0123ff6:	89 c2                	mov    %eax,%edx
f0123ff8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123ffe:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124001:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124008:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012400b:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124011:	72 cc                	jb     f0123fdf <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124013:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124016:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f012401c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124023:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012402a:	10 00 00 
f012402d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124033:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124038:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012403e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124044:	ba 00 00 00 00       	mov    $0x0,%edx
f0124049:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012404f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124055:	29 d0                	sub    %edx,%eax
f0124057:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012405c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012405f:	e9 ab 00 00 00       	jmp    f012410f <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124064:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124069:	83 ec 04             	sub    $0x4,%esp
f012406c:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124072:	52                   	push   %edx
f0124073:	ff 75 e0             	pushl  -0x20(%ebp)
f0124076:	50                   	push   %eax
f0124077:	e8 5e 29 fe ff       	call   f01069da <get_page_table>
f012407c:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012407f:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124085:	85 c0                	test   %eax,%eax
f0124087:	75 17                	jne    f01240a0 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124089:	83 ec 04             	sub    $0x4,%esp
f012408c:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124091:	68 59 08 00 00       	push   $0x859
f0124096:	68 5a ac 13 f0       	push   $0xf013ac5a
f012409b:	e8 5b c1 fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01240a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01240a3:	c1 e8 0c             	shr    $0xc,%eax
f01240a6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01240ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01240ae:	eb 4b                	jmp    f01240fb <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01240b0:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f01240b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01240b9:	c1 e2 02             	shl    $0x2,%edx
f01240bc:	01 d0                	add    %edx,%eax
f01240be:	8b 00                	mov    (%eax),%eax
f01240c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01240c5:	89 c1                	mov    %eax,%ecx
f01240c7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01240cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01240d0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01240d3:	39 c1                	cmp    %eax,%ecx
f01240d5:	74 17                	je     f01240ee <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01240d7:	83 ec 04             	sub    $0x4,%esp
f01240da:	68 55 b6 13 f0       	push   $0xf013b655
f01240df:	68 60 08 00 00       	push   $0x860
f01240e4:	68 5a ac 13 f0       	push   $0xf013ac5a
f01240e9:	e8 0d c1 fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f01240ee:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01240f5:	ff 45 dc             	incl   -0x24(%ebp)
f01240f8:	ff 45 e4             	incl   -0x1c(%ebp)
f01240fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01240fe:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124104:	7d 09                	jge    f012410f <test_kheap_phys_addr+0xdd4>
f0124106:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012410d:	7e a1                	jle    f01240b0 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012410f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124112:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124118:	0f 82 46 ff ff ff    	jb     f0124064 <test_kheap_phys_addr+0xd29>
f012411e:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124120:	83 ec 0c             	sub    $0xc,%esp
f0124123:	68 74 b6 13 f0       	push   $0xf013b674
f0124128:	e8 55 cb fd ff       	call   f0100c82 <cprintf>
f012412d:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124130:	e8 8a 87 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124135:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012413b:	e8 fc fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124140:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124146:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012414c:	83 ec 0c             	sub    $0xc,%esp
f012414f:	50                   	push   %eax
f0124150:	e8 6b 37 fe ff       	call   f01078c0 <kfree>
f0124155:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124158:	e8 df fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012415d:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124163:	74 17                	je     f012417c <test_kheap_phys_addr+0xe41>
f0124165:	83 ec 04             	sub    $0x4,%esp
f0124168:	68 74 ac 13 f0       	push   $0xf013ac74
f012416d:	68 6e 08 00 00       	push   $0x86e
f0124172:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124177:	e8 7f c0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012417c:	e8 3e 87 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124181:	89 c2                	mov    %eax,%edx
f0124183:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124189:	29 c2                	sub    %eax,%edx
f012418b:	89 d0                	mov    %edx,%eax
f012418d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124192:	74 17                	je     f01241ab <test_kheap_phys_addr+0xe70>
f0124194:	83 ec 04             	sub    $0x4,%esp
f0124197:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012419c:	68 6f 08 00 00       	push   $0x86f
f01241a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01241a6:	e8 50 c0 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241ab:	e8 0f 87 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01241b0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241b6:	e8 81 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241bb:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f01241c1:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01241c7:	83 ec 0c             	sub    $0xc,%esp
f01241ca:	50                   	push   %eax
f01241cb:	e8 f0 36 fe ff       	call   f01078c0 <kfree>
f01241d0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01241d3:	e8 64 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01241d8:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01241de:	74 17                	je     f01241f7 <test_kheap_phys_addr+0xebc>
f01241e0:	83 ec 04             	sub    $0x4,%esp
f01241e3:	68 74 ac 13 f0       	push   $0xf013ac74
f01241e8:	68 75 08 00 00       	push   $0x875
f01241ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01241f2:	e8 04 c0 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01241f7:	e8 c3 86 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01241fc:	89 c2                	mov    %eax,%edx
f01241fe:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124204:	29 c2                	sub    %eax,%edx
f0124206:	89 d0                	mov    %edx,%eax
f0124208:	3d 00 02 00 00       	cmp    $0x200,%eax
f012420d:	74 17                	je     f0124226 <test_kheap_phys_addr+0xeeb>
f012420f:	83 ec 04             	sub    $0x4,%esp
f0124212:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0124217:	68 76 08 00 00       	push   $0x876
f012421c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124221:	e8 d5 bf fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124226:	e8 94 86 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012422b:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124231:	e8 06 fb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124236:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f012423c:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124242:	83 ec 0c             	sub    $0xc,%esp
f0124245:	50                   	push   %eax
f0124246:	e8 75 36 fe ff       	call   f01078c0 <kfree>
f012424b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012424e:	e8 e9 fa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124253:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124259:	74 17                	je     f0124272 <test_kheap_phys_addr+0xf37>
f012425b:	83 ec 04             	sub    $0x4,%esp
f012425e:	68 74 ac 13 f0       	push   $0xf013ac74
f0124263:	68 7c 08 00 00       	push   $0x87c
f0124268:	68 5a ac 13 f0       	push   $0xf013ac5a
f012426d:	e8 89 bf fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124272:	e8 48 86 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124277:	89 c2                	mov    %eax,%edx
f0124279:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012427f:	29 c2                	sub    %eax,%edx
f0124281:	89 d0                	mov    %edx,%eax
f0124283:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124288:	74 17                	je     f01242a1 <test_kheap_phys_addr+0xf66>
f012428a:	83 ec 04             	sub    $0x4,%esp
f012428d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0124292:	68 7d 08 00 00       	push   $0x87d
f0124297:	68 5a ac 13 f0       	push   $0xf013ac5a
f012429c:	e8 5a bf fd ff       	call   f01001fb <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01242a1:	89 e0                	mov    %esp,%eax
f01242a3:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01242a5:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01242ac:	10 00 00 
f01242af:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01242b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01242ba:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01242c0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01242c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01242cb:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01242d1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01242d7:	29 d0                	sub    %edx,%eax
f01242d9:	89 c1                	mov    %eax,%ecx
f01242db:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01242e2:	10 00 00 
f01242e5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01242ea:	0f b6 d0             	movzbl %al,%edx
f01242ed:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01242f3:	01 d0                	add    %edx,%eax
f01242f5:	48                   	dec    %eax
f01242f6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01242fc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124302:	ba 00 00 00 00       	mov    $0x0,%edx
f0124307:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012430d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0124313:	29 d0                	sub    %edx,%eax
f0124315:	01 c1                	add    %eax,%ecx
f0124317:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012431e:	10 00 00 
f0124321:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124326:	0f b6 c0             	movzbl %al,%eax
f0124329:	c1 e0 04             	shl    $0x4,%eax
f012432c:	89 c2                	mov    %eax,%edx
f012432e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0124334:	01 d0                	add    %edx,%eax
f0124336:	48                   	dec    %eax
f0124337:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012433d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124343:	ba 00 00 00 00       	mov    $0x0,%edx
f0124348:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012434e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0124354:	29 d0                	sub    %edx,%eax
f0124356:	01 c8                	add    %ecx,%eax
f0124358:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012435d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124363:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f012436a:	10 00 00 
f012436d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0124373:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124378:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f012437e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124384:	ba 00 00 00 00       	mov    $0x0,%edx
f0124389:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f012438f:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0124395:	29 d0                	sub    %edx,%eax
f0124397:	89 c1                	mov    %eax,%ecx
f0124399:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01243a0:	10 00 00 
f01243a3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01243a8:	0f b6 d0             	movzbl %al,%edx
f01243ab:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01243b1:	01 d0                	add    %edx,%eax
f01243b3:	48                   	dec    %eax
f01243b4:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01243ba:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01243c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01243c5:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01243cb:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01243d1:	29 d0                	sub    %edx,%eax
f01243d3:	01 c1                	add    %eax,%ecx
f01243d5:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01243dc:	10 00 00 
f01243df:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01243e4:	0f b6 c0             	movzbl %al,%eax
f01243e7:	c1 e0 04             	shl    $0x4,%eax
f01243ea:	89 c2                	mov    %eax,%edx
f01243ec:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01243f2:	01 d0                	add    %edx,%eax
f01243f4:	48                   	dec    %eax
f01243f5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01243fb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124401:	ba 00 00 00 00       	mov    $0x0,%edx
f0124406:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012440c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0124412:	29 d0                	sub    %edx,%eax
f0124414:	01 c8                	add    %ecx,%eax
f0124416:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012441b:	c1 e8 0c             	shr    $0xc,%eax
f012441e:	89 c2                	mov    %eax,%edx
f0124420:	4a                   	dec    %edx
f0124421:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0124427:	c1 e0 02             	shl    $0x2,%eax
f012442a:	8d 50 03             	lea    0x3(%eax),%edx
f012442d:	b8 10 00 00 00       	mov    $0x10,%eax
f0124432:	48                   	dec    %eax
f0124433:	01 d0                	add    %edx,%eax
f0124435:	bf 10 00 00 00       	mov    $0x10,%edi
f012443a:	ba 00 00 00 00       	mov    $0x0,%edx
f012443f:	f7 f7                	div    %edi
f0124441:	6b c0 10             	imul   $0x10,%eax,%eax
f0124444:	29 c4                	sub    %eax,%esp
f0124446:	89 e0                	mov    %esp,%eax
f0124448:	83 c0 03             	add    $0x3,%eax
f012444b:	c1 e8 02             	shr    $0x2,%eax
f012444e:	c1 e0 02             	shl    $0x2,%eax
f0124451:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0124457:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012445e:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0124465:	10 00 00 
f0124468:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012446e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124473:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0124479:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012447f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124484:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012448a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0124490:	29 d0                	sub    %edx,%eax
f0124492:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124497:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012449a:	eb 29                	jmp    f01244c5 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f012449c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012449f:	8d 43 01             	lea    0x1(%ebx),%eax
f01244a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01244a5:	83 ec 0c             	sub    $0xc,%esp
f01244a8:	ff 75 d8             	pushl  -0x28(%ebp)
f01244ab:	e8 63 35 fe ff       	call   f0107a13 <kheap_physical_address>
f01244b0:	83 c4 10             	add    $0x10,%esp
f01244b3:	89 c2                	mov    %eax,%edx
f01244b5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01244bb:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01244be:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01244c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01244c8:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01244ce:	72 cc                	jb     f012449c <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01244d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01244d3:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01244d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01244e0:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01244e7:	10 00 00 
f01244ea:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01244f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244f5:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01244fb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124501:	ba 00 00 00 00       	mov    $0x0,%edx
f0124506:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f012450c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0124512:	29 d0                	sub    %edx,%eax
f0124514:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124519:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012451c:	e9 ab 00 00 00       	jmp    f01245cc <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124521:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0124526:	83 ec 04             	sub    $0x4,%esp
f0124529:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f012452f:	52                   	push   %edx
f0124530:	ff 75 d8             	pushl  -0x28(%ebp)
f0124533:	50                   	push   %eax
f0124534:	e8 a1 24 fe ff       	call   f01069da <get_page_table>
f0124539:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012453c:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124542:	85 c0                	test   %eax,%eax
f0124544:	75 17                	jne    f012455d <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124546:	83 ec 04             	sub    $0x4,%esp
f0124549:	68 fc b5 13 f0       	push   $0xf013b5fc
f012454e:	68 93 08 00 00       	push   $0x893
f0124553:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124558:	e8 9e bc fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012455d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124560:	c1 e8 0c             	shr    $0xc,%eax
f0124563:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124568:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f012456b:	eb 4b                	jmp    f01245b8 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f012456d:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0124573:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0124576:	c1 e2 02             	shl    $0x2,%edx
f0124579:	01 d0                	add    %edx,%eax
f012457b:	8b 00                	mov    (%eax),%eax
f012457d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124582:	89 c1                	mov    %eax,%ecx
f0124584:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012458a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012458d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124590:	39 c1                	cmp    %eax,%ecx
f0124592:	74 17                	je     f01245ab <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124594:	83 ec 04             	sub    $0x4,%esp
f0124597:	68 55 b6 13 f0       	push   $0xf013b655
f012459c:	68 9a 08 00 00       	push   $0x89a
f01245a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01245a6:	e8 50 bc fd ff       	call   f01001fb <_panic>
				}
				va += PAGE_SIZE;
f01245ab:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01245b2:	ff 45 d4             	incl   -0x2c(%ebp)
f01245b5:	ff 45 e4             	incl   -0x1c(%ebp)
f01245b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01245bb:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01245c1:	7d 09                	jge    f01245cc <test_kheap_phys_addr+0x1291>
f01245c3:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01245ca:	7e a1                	jle    f012456d <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01245cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01245cf:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01245d5:	0f 82 46 ff ff ff    	jb     f0124521 <test_kheap_phys_addr+0x11e6>
f01245db:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01245dd:	83 ec 0c             	sub    $0xc,%esp
f01245e0:	68 e5 ad 13 f0       	push   $0xf013ade5
f01245e5:	e8 98 c6 fd ff       	call   f0100c82 <cprintf>
f01245ea:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01245ed:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01245f4:	10 00 00 
f01245f7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01245fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124602:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124608:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012460e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124613:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124619:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012461f:	29 d0                	sub    %edx,%eax
f0124621:	89 c1                	mov    %eax,%ecx
f0124623:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f012462a:	10 00 00 
f012462d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124632:	0f b6 d0             	movzbl %al,%edx
f0124635:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012463b:	01 d0                	add    %edx,%eax
f012463d:	48                   	dec    %eax
f012463e:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0124644:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012464a:	ba 00 00 00 00       	mov    $0x0,%edx
f012464f:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0124655:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012465b:	29 d0                	sub    %edx,%eax
f012465d:	01 c1                	add    %eax,%ecx
f012465f:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f0124666:	10 00 00 
f0124669:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012466e:	0f b6 c0             	movzbl %al,%eax
f0124671:	c1 e0 04             	shl    $0x4,%eax
f0124674:	89 c2                	mov    %eax,%edx
f0124676:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012467c:	01 d0                	add    %edx,%eax
f012467e:	48                   	dec    %eax
f012467f:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f0124685:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012468b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124690:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124696:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012469c:	29 d0                	sub    %edx,%eax
f012469e:	01 c8                	add    %ecx,%eax
f01246a0:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01246a5:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01246ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01246b2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01246b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01246bb:	eb 0a                	jmp    f01246c7 <test_kheap_phys_addr+0x138c>
		{
			i++;
f01246bd:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01246c0:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01246c7:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01246ce:	76 ed                	jbe    f01246bd <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01246d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01246d3:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01246d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01246e0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01246e6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01246e9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01246f0:	e9 cc 00 00 00       	jmp    f01247c1 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f01246f5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01246f8:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01246fd:	83 ec 04             	sub    $0x4,%esp
f0124700:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124706:	51                   	push   %ecx
f0124707:	52                   	push   %edx
f0124708:	50                   	push   %eax
f0124709:	e8 cc 22 fe ff       	call   f01069da <get_page_table>
f012470e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124711:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124717:	85 c0                	test   %eax,%eax
f0124719:	75 17                	jne    f0124732 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012471b:	83 ec 04             	sub    $0x4,%esp
f012471e:	68 fc b5 13 f0       	push   $0xf013b5fc
f0124723:	68 b6 08 00 00       	push   $0x8b6
f0124728:	68 5a ac 13 f0       	push   $0xf013ac5a
f012472d:	e8 c9 ba fd ff       	call   f01001fb <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124732:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0124739:	eb 67                	jmp    f01247a2 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f012473b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012473e:	c1 e0 0c             	shl    $0xc,%eax
f0124741:	89 c2                	mov    %eax,%edx
f0124743:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124749:	01 d0                	add    %edx,%eax
f012474b:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124751:	83 ec 0c             	sub    $0xc,%esp
f0124754:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f012475a:	e8 b4 32 fe ff       	call   f0107a13 <kheap_physical_address>
f012475f:	83 c4 10             	add    $0x10,%esp
f0124762:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0124768:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012476e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0124771:	c1 e2 02             	shl    $0x2,%edx
f0124774:	01 d0                	add    %edx,%eax
f0124776:	8b 00                	mov    (%eax),%eax
f0124778:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012477d:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f0124783:	74 17                	je     f012479c <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124785:	83 ec 04             	sub    $0x4,%esp
f0124788:	68 55 b6 13 f0       	push   $0xf013b655
f012478d:	68 c0 08 00 00       	push   $0x8c0
f0124792:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124797:	e8 5f ba fd ff       	call   f01001fb <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012479c:	ff 45 cc             	incl   -0x34(%ebp)
f012479f:	ff 45 e4             	incl   -0x1c(%ebp)
f01247a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247a5:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01247ab:	7d 09                	jge    f01247b6 <test_kheap_phys_addr+0x147b>
f01247ad:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01247b4:	7e 85                	jle    f012473b <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01247b6:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01247bd:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01247c1:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01247c5:	0f 88 2a ff ff ff    	js     f01246f5 <test_kheap_phys_addr+0x13ba>
f01247cb:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01247cf:	7f 0d                	jg     f01247de <test_kheap_phys_addr+0x14a3>
f01247d1:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01247d8:	0f 86 17 ff ff ff    	jbe    f01246f5 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01247de:	83 ec 0c             	sub    $0xc,%esp
f01247e1:	68 3e ae 13 f0       	push   $0xf013ae3e
f01247e6:	e8 97 c4 fd ff       	call   f0100c82 <cprintf>
f01247eb:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01247ee:	83 ec 0c             	sub    $0xc,%esp
f01247f1:	68 a8 b6 13 f0       	push   $0xf013b6a8
f01247f6:	e8 87 c4 fd ff       	call   f0100c82 <cprintf>
f01247fb:	83 c4 10             	add    $0x10,%esp

	return 1;
f01247fe:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124803:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124806:	5b                   	pop    %ebx
f0124807:	5e                   	pop    %esi
f0124808:	5f                   	pop    %edi
f0124809:	5d                   	pop    %ebp
f012480a:	c3                   	ret    

f012480b <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f012480b:	55                   	push   %ebp
f012480c:	89 e5                	mov    %esp,%ebp
f012480e:	57                   	push   %edi
f012480f:	56                   	push   %esi
f0124810:	53                   	push   %ebx
f0124811:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124817:	89 e0                	mov    %esp,%eax
f0124819:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f012481b:	83 ec 0c             	sub    $0xc,%esp
f012481e:	68 9c ab 13 f0       	push   $0xf013ab9c
f0124823:	e8 5a c4 fd ff       	call   f0100c82 <cprintf>
f0124828:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012482b:	83 ec 0c             	sub    $0xc,%esp
f012482e:	68 cc ab 13 f0       	push   $0xf013abcc
f0124833:	e8 4a c4 fd ff       	call   f0100c82 <cprintf>
f0124838:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012483b:	83 ec 0c             	sub    $0xc,%esp
f012483e:	68 9c ab 13 f0       	push   $0xf013ab9c
f0124843:	e8 3a c4 fd ff       	call   f0100c82 <cprintf>
f0124848:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012484b:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f012484f:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124853:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0124859:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f012485f:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124866:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012486d:	e8 4d 80 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124872:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0124875:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012487b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124880:	b8 00 00 00 00       	mov    $0x0,%eax
f0124885:	89 d7                	mov    %edx,%edi
f0124887:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0124889:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f012488f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124894:	b8 00 00 00 00       	mov    $0x0,%eax
f0124899:	89 d7                	mov    %edx,%edi
f012489b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012489d:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01248a3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01248a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01248ad:	89 d7                	mov    %edx,%edi
f01248af:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01248b1:	e8 09 80 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01248b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248b9:	e8 7e f4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01248be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01248c1:	83 ec 0c             	sub    $0xc,%esp
f01248c4:	68 00 fc 1f 00       	push   $0x1ffc00
f01248c9:	e8 30 2f fe ff       	call   f01077fe <kmalloc>
f01248ce:	83 c4 10             	add    $0x10,%esp
f01248d1:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01248d7:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01248dd:	89 c1                	mov    %eax,%ecx
f01248df:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01248e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01248e9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248ee:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01248f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01248f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01248f9:	f7 75 b4             	divl   -0x4c(%ebp)
f01248fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01248ff:	29 d0                	sub    %edx,%eax
f0124901:	89 c3                	mov    %eax,%ebx
f0124903:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012490a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012490f:	0f b6 d0             	movzbl %al,%edx
f0124912:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124915:	01 d0                	add    %edx,%eax
f0124917:	48                   	dec    %eax
f0124918:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012491b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012491e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124923:	f7 75 ac             	divl   -0x54(%ebp)
f0124926:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124929:	29 d0                	sub    %edx,%eax
f012492b:	01 c3                	add    %eax,%ebx
f012492d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0124934:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124939:	0f b6 c0             	movzbl %al,%eax
f012493c:	c1 e0 04             	shl    $0x4,%eax
f012493f:	89 c2                	mov    %eax,%edx
f0124941:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124944:	01 d0                	add    %edx,%eax
f0124946:	48                   	dec    %eax
f0124947:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012494a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012494d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124952:	f7 75 a4             	divl   -0x5c(%ebp)
f0124955:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124958:	29 d0                	sub    %edx,%eax
f012495a:	01 d8                	add    %ebx,%eax
f012495c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124961:	39 c1                	cmp    %eax,%ecx
f0124963:	74 17                	je     f012497c <test_kheap_virt_addr+0x171>
f0124965:	83 ec 04             	sub    $0x4,%esp
f0124968:	68 40 ad 13 f0       	push   $0xf013ad40
f012496d:	68 ed 08 00 00       	push   $0x8ed
f0124972:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124977:	e8 7f b8 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012497c:	e8 bb f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124981:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124984:	74 17                	je     f012499d <test_kheap_virt_addr+0x192>
f0124986:	83 ec 04             	sub    $0x4,%esp
f0124989:	68 74 ac 13 f0       	push   $0xf013ac74
f012498e:	68 ee 08 00 00       	push   $0x8ee
f0124993:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124998:	e8 5e b8 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012499d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01249a0:	e8 1a 7f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01249a5:	29 c3                	sub    %eax,%ebx
f01249a7:	89 d8                	mov    %ebx,%eax
f01249a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01249ae:	74 17                	je     f01249c7 <test_kheap_virt_addr+0x1bc>
f01249b0:	83 ec 04             	sub    $0x4,%esp
f01249b3:	68 dc ac 13 f0       	push   $0xf013acdc
f01249b8:	68 ef 08 00 00       	push   $0x8ef
f01249bd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01249c2:	e8 34 b8 fd ff       	call   f01001fb <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01249c7:	e8 f3 7e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01249cc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249cf:	e8 68 f3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01249d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01249d7:	83 ec 0c             	sub    $0xc,%esp
f01249da:	68 00 fc 1f 00       	push   $0x1ffc00
f01249df:	e8 1a 2e fe ff       	call   f01077fe <kmalloc>
f01249e4:	83 c4 10             	add    $0x10,%esp
f01249e7:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01249ed:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01249f3:	89 c1                	mov    %eax,%ecx
f01249f5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01249fc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01249ff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a04:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124a07:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124a0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a0f:	f7 75 9c             	divl   -0x64(%ebp)
f0124a12:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124a15:	29 d0                	sub    %edx,%eax
f0124a17:	89 c3                	mov    %eax,%ebx
f0124a19:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0124a20:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124a25:	0f b6 d0             	movzbl %al,%edx
f0124a28:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124a2b:	01 d0                	add    %edx,%eax
f0124a2d:	48                   	dec    %eax
f0124a2e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0124a31:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124a34:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a39:	f7 75 94             	divl   -0x6c(%ebp)
f0124a3c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124a3f:	29 d0                	sub    %edx,%eax
f0124a41:	01 c3                	add    %eax,%ebx
f0124a43:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124a4a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124a4f:	0f b6 c0             	movzbl %al,%eax
f0124a52:	c1 e0 04             	shl    $0x4,%eax
f0124a55:	89 c2                	mov    %eax,%edx
f0124a57:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124a5a:	01 d0                	add    %edx,%eax
f0124a5c:	48                   	dec    %eax
f0124a5d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124a60:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124a63:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a68:	f7 75 8c             	divl   -0x74(%ebp)
f0124a6b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124a6e:	29 d0                	sub    %edx,%eax
f0124a70:	01 d8                	add    %ebx,%eax
f0124a72:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124a77:	39 c1                	cmp    %eax,%ecx
f0124a79:	74 17                	je     f0124a92 <test_kheap_virt_addr+0x287>
f0124a7b:	83 ec 04             	sub    $0x4,%esp
f0124a7e:	68 40 ad 13 f0       	push   $0xf013ad40
f0124a83:	68 f5 08 00 00       	push   $0x8f5
f0124a88:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124a8d:	e8 69 b7 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a92:	e8 a5 f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124a97:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a9a:	74 17                	je     f0124ab3 <test_kheap_virt_addr+0x2a8>
f0124a9c:	83 ec 04             	sub    $0x4,%esp
f0124a9f:	68 74 ac 13 f0       	push   $0xf013ac74
f0124aa4:	68 f6 08 00 00       	push   $0x8f6
f0124aa9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124aae:	e8 48 b7 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ab3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ab6:	e8 04 7e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124abb:	29 c3                	sub    %eax,%ebx
f0124abd:	89 d8                	mov    %ebx,%eax
f0124abf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124ac4:	74 17                	je     f0124add <test_kheap_virt_addr+0x2d2>
f0124ac6:	83 ec 04             	sub    $0x4,%esp
f0124ac9:	68 dc ac 13 f0       	push   $0xf013acdc
f0124ace:	68 f7 08 00 00       	push   $0x8f7
f0124ad3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ad8:	e8 1e b7 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124add:	e8 dd 7d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124ae2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ae5:	e8 52 f2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124aea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124aed:	83 ec 0c             	sub    $0xc,%esp
f0124af0:	68 00 08 00 00       	push   $0x800
f0124af5:	e8 04 2d fe ff       	call   f01077fe <kmalloc>
f0124afa:	83 c4 10             	add    $0x10,%esp
f0124afd:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b03:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124b09:	89 c1                	mov    %eax,%ecx
f0124b0b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0124b12:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124b15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b1a:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124b1d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124b20:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b25:	f7 75 84             	divl   -0x7c(%ebp)
f0124b28:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124b2b:	29 d0                	sub    %edx,%eax
f0124b2d:	89 c3                	mov    %eax,%ebx
f0124b2f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124b36:	10 00 00 
f0124b39:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124b3e:	0f b6 d0             	movzbl %al,%edx
f0124b41:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0124b47:	01 d0                	add    %edx,%eax
f0124b49:	48                   	dec    %eax
f0124b4a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124b50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124b56:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b5b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124b61:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124b67:	29 d0                	sub    %edx,%eax
f0124b69:	01 c3                	add    %eax,%ebx
f0124b6b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0124b72:	10 00 00 
f0124b75:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124b7a:	0f b6 c0             	movzbl %al,%eax
f0124b7d:	c1 e0 04             	shl    $0x4,%eax
f0124b80:	89 c2                	mov    %eax,%edx
f0124b82:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0124b88:	01 d0                	add    %edx,%eax
f0124b8a:	48                   	dec    %eax
f0124b8b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124b91:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124b97:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b9c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124ba2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124ba8:	29 d0                	sub    %edx,%eax
f0124baa:	01 d8                	add    %ebx,%eax
f0124bac:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124bb1:	39 c1                	cmp    %eax,%ecx
f0124bb3:	74 17                	je     f0124bcc <test_kheap_virt_addr+0x3c1>
f0124bb5:	83 ec 04             	sub    $0x4,%esp
f0124bb8:	68 40 ad 13 f0       	push   $0xf013ad40
f0124bbd:	68 fd 08 00 00       	push   $0x8fd
f0124bc2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124bc7:	e8 2f b6 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bcc:	e8 6b f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124bd1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124bd4:	74 17                	je     f0124bed <test_kheap_virt_addr+0x3e2>
f0124bd6:	83 ec 04             	sub    $0x4,%esp
f0124bd9:	68 74 ac 13 f0       	push   $0xf013ac74
f0124bde:	68 fe 08 00 00       	push   $0x8fe
f0124be3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124be8:	e8 0e b6 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bed:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124bf0:	e8 ca 7c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124bf5:	29 c3                	sub    %eax,%ebx
f0124bf7:	89 d8                	mov    %ebx,%eax
f0124bf9:	83 f8 01             	cmp    $0x1,%eax
f0124bfc:	74 17                	je     f0124c15 <test_kheap_virt_addr+0x40a>
f0124bfe:	83 ec 04             	sub    $0x4,%esp
f0124c01:	68 dc ac 13 f0       	push   $0xf013acdc
f0124c06:	68 ff 08 00 00       	push   $0x8ff
f0124c0b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124c10:	e8 e6 b5 fd ff       	call   f01001fb <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124c15:	e8 a5 7c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124c1a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124c1d:	e8 1a f1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124c22:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124c25:	83 ec 0c             	sub    $0xc,%esp
f0124c28:	68 00 08 00 00       	push   $0x800
f0124c2d:	e8 cc 2b fe ff       	call   f01077fe <kmalloc>
f0124c32:	83 c4 10             	add    $0x10,%esp
f0124c35:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124c3b:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0124c41:	89 c1                	mov    %eax,%ecx
f0124c43:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0124c4a:	10 00 00 
f0124c4d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124c53:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c58:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124c5e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c69:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0124c6f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124c75:	29 d0                	sub    %edx,%eax
f0124c77:	89 c3                	mov    %eax,%ebx
f0124c79:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124c80:	10 00 00 
f0124c83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124c88:	0f b6 d0             	movzbl %al,%edx
f0124c8b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124c91:	01 d0                	add    %edx,%eax
f0124c93:	48                   	dec    %eax
f0124c94:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124c9a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124ca0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ca5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124cab:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124cb1:	29 d0                	sub    %edx,%eax
f0124cb3:	01 c3                	add    %eax,%ebx
f0124cb5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124cbc:	10 00 00 
f0124cbf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124cc4:	0f b6 c0             	movzbl %al,%eax
f0124cc7:	c1 e0 04             	shl    $0x4,%eax
f0124cca:	89 c2                	mov    %eax,%edx
f0124ccc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124cd2:	01 d0                	add    %edx,%eax
f0124cd4:	48                   	dec    %eax
f0124cd5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124cdb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124ce1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ce6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124cec:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124cf2:	29 d0                	sub    %edx,%eax
f0124cf4:	01 d8                	add    %ebx,%eax
f0124cf6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124cfb:	39 c1                	cmp    %eax,%ecx
f0124cfd:	74 17                	je     f0124d16 <test_kheap_virt_addr+0x50b>
f0124cff:	83 ec 04             	sub    $0x4,%esp
f0124d02:	68 40 ad 13 f0       	push   $0xf013ad40
f0124d07:	68 05 09 00 00       	push   $0x905
f0124d0c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d11:	e8 e5 b4 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124d16:	e8 21 f0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124d1b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124d1e:	74 17                	je     f0124d37 <test_kheap_virt_addr+0x52c>
f0124d20:	83 ec 04             	sub    $0x4,%esp
f0124d23:	68 74 ac 13 f0       	push   $0xf013ac74
f0124d28:	68 06 09 00 00       	push   $0x906
f0124d2d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d32:	e8 c4 b4 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124d37:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124d3a:	e8 80 7b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124d3f:	29 c3                	sub    %eax,%ebx
f0124d41:	89 d8                	mov    %ebx,%eax
f0124d43:	83 f8 01             	cmp    $0x1,%eax
f0124d46:	74 17                	je     f0124d5f <test_kheap_virt_addr+0x554>
f0124d48:	83 ec 04             	sub    $0x4,%esp
f0124d4b:	68 dc ac 13 f0       	push   $0xf013acdc
f0124d50:	68 07 09 00 00       	push   $0x907
f0124d55:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124d5a:	e8 9c b4 fd ff       	call   f01001fb <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124d5f:	e8 5b 7b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124d64:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124d67:	e8 d0 ef fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124d6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124d6f:	83 ec 0c             	sub    $0xc,%esp
f0124d72:	68 00 1c 00 00       	push   $0x1c00
f0124d77:	e8 82 2a fe ff       	call   f01077fe <kmalloc>
f0124d7c:	83 c4 10             	add    $0x10,%esp
f0124d7f:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124d85:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124d8b:	89 c1                	mov    %eax,%ecx
f0124d8d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124d94:	10 00 00 
f0124d97:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124d9d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124da2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124da8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0124db3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124db9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124dbf:	29 d0                	sub    %edx,%eax
f0124dc1:	89 c3                	mov    %eax,%ebx
f0124dc3:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124dca:	10 00 00 
f0124dcd:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124dd2:	0f b6 d0             	movzbl %al,%edx
f0124dd5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124ddb:	01 d0                	add    %edx,%eax
f0124ddd:	48                   	dec    %eax
f0124dde:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124de4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124dea:	ba 00 00 00 00       	mov    $0x0,%edx
f0124def:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124df5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124dfb:	29 d0                	sub    %edx,%eax
f0124dfd:	01 c3                	add    %eax,%ebx
f0124dff:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124e06:	10 00 00 
f0124e09:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124e0e:	0f b6 c0             	movzbl %al,%eax
f0124e11:	c1 e0 04             	shl    $0x4,%eax
f0124e14:	89 c2                	mov    %eax,%edx
f0124e16:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124e1c:	01 d0                	add    %edx,%eax
f0124e1e:	48                   	dec    %eax
f0124e1f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124e25:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124e2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e30:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124e36:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124e3c:	29 d0                	sub    %edx,%eax
f0124e3e:	01 d8                	add    %ebx,%eax
f0124e40:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124e45:	39 c1                	cmp    %eax,%ecx
f0124e47:	74 17                	je     f0124e60 <test_kheap_virt_addr+0x655>
f0124e49:	83 ec 04             	sub    $0x4,%esp
f0124e4c:	68 40 ad 13 f0       	push   $0xf013ad40
f0124e51:	68 0d 09 00 00       	push   $0x90d
f0124e56:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124e5b:	e8 9b b3 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124e60:	e8 d7 ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124e65:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124e68:	74 17                	je     f0124e81 <test_kheap_virt_addr+0x676>
f0124e6a:	83 ec 04             	sub    $0x4,%esp
f0124e6d:	68 74 ac 13 f0       	push   $0xf013ac74
f0124e72:	68 0e 09 00 00       	push   $0x90e
f0124e77:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124e7c:	e8 7a b3 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124e81:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124e84:	e8 36 7a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124e89:	29 c3                	sub    %eax,%ebx
f0124e8b:	89 d8                	mov    %ebx,%eax
f0124e8d:	83 f8 02             	cmp    $0x2,%eax
f0124e90:	74 17                	je     f0124ea9 <test_kheap_virt_addr+0x69e>
f0124e92:	83 ec 04             	sub    $0x4,%esp
f0124e95:	68 dc ac 13 f0       	push   $0xf013acdc
f0124e9a:	68 0f 09 00 00       	push   $0x90f
f0124e9f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ea4:	e8 52 b3 fd ff       	call   f01001fb <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ea9:	e8 11 7a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124eae:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124eb1:	e8 86 ee fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124eb6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124eb9:	83 ec 0c             	sub    $0xc,%esp
f0124ebc:	68 00 fc 2f 00       	push   $0x2ffc00
f0124ec1:	e8 38 29 fe ff       	call   f01077fe <kmalloc>
f0124ec6:	83 c4 10             	add    $0x10,%esp
f0124ec9:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ecf:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124ed5:	89 c1                	mov    %eax,%ecx
f0124ed7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124ede:	10 00 00 
f0124ee1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124ee7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124eec:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124ef2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124ef8:	ba 00 00 00 00       	mov    $0x0,%edx
f0124efd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124f03:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124f09:	29 d0                	sub    %edx,%eax
f0124f0b:	89 c3                	mov    %eax,%ebx
f0124f0d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124f14:	10 00 00 
f0124f17:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124f1c:	0f b6 d0             	movzbl %al,%edx
f0124f1f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124f25:	01 d0                	add    %edx,%eax
f0124f27:	48                   	dec    %eax
f0124f28:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124f2e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124f34:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f39:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124f3f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124f45:	29 d0                	sub    %edx,%eax
f0124f47:	01 c3                	add    %eax,%ebx
f0124f49:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124f50:	10 00 00 
f0124f53:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0124f58:	0f b6 c0             	movzbl %al,%eax
f0124f5b:	c1 e0 04             	shl    $0x4,%eax
f0124f5e:	89 c2                	mov    %eax,%edx
f0124f60:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124f66:	01 d0                	add    %edx,%eax
f0124f68:	48                   	dec    %eax
f0124f69:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124f6f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124f75:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f7a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124f80:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124f86:	29 d0                	sub    %edx,%eax
f0124f88:	01 d8                	add    %ebx,%eax
f0124f8a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124f8f:	39 c1                	cmp    %eax,%ecx
f0124f91:	74 17                	je     f0124faa <test_kheap_virt_addr+0x79f>
f0124f93:	83 ec 04             	sub    $0x4,%esp
f0124f96:	68 40 ad 13 f0       	push   $0xf013ad40
f0124f9b:	68 15 09 00 00       	push   $0x915
f0124fa0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124fa5:	e8 51 b2 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124faa:	e8 8d ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0124faf:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124fb2:	74 17                	je     f0124fcb <test_kheap_virt_addr+0x7c0>
f0124fb4:	83 ec 04             	sub    $0x4,%esp
f0124fb7:	68 74 ac 13 f0       	push   $0xf013ac74
f0124fbc:	68 16 09 00 00       	push   $0x916
f0124fc1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124fc6:	e8 30 b2 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124fcb:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124fce:	e8 ec 78 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124fd3:	29 c3                	sub    %eax,%ebx
f0124fd5:	89 d8                	mov    %ebx,%eax
f0124fd7:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124fdc:	74 17                	je     f0124ff5 <test_kheap_virt_addr+0x7ea>
f0124fde:	83 ec 04             	sub    $0x4,%esp
f0124fe1:	68 dc ac 13 f0       	push   $0xf013acdc
f0124fe6:	68 17 09 00 00       	push   $0x917
f0124feb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0124ff0:	e8 06 b2 fd ff       	call   f01001fb <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124ff5:	e8 c5 78 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0124ffa:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ffd:	e8 3a ed fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125002:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125005:	83 ec 0c             	sub    $0xc,%esp
f0125008:	68 00 fc 5f 00       	push   $0x5ffc00
f012500d:	e8 ec 27 fe ff       	call   f01077fe <kmalloc>
f0125012:	83 c4 10             	add    $0x10,%esp
f0125015:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012501b:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125021:	89 c1                	mov    %eax,%ecx
f0125023:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012502a:	10 00 00 
f012502d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125033:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125038:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012503e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125044:	ba 00 00 00 00       	mov    $0x0,%edx
f0125049:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012504f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125055:	29 d0                	sub    %edx,%eax
f0125057:	89 c3                	mov    %eax,%ebx
f0125059:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125060:	10 00 00 
f0125063:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125068:	0f b6 d0             	movzbl %al,%edx
f012506b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125071:	01 d0                	add    %edx,%eax
f0125073:	48                   	dec    %eax
f0125074:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012507a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125080:	ba 00 00 00 00       	mov    $0x0,%edx
f0125085:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012508b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125091:	29 d0                	sub    %edx,%eax
f0125093:	01 c3                	add    %eax,%ebx
f0125095:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012509c:	10 00 00 
f012509f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01250a4:	0f b6 c0             	movzbl %al,%eax
f01250a7:	c1 e0 04             	shl    $0x4,%eax
f01250aa:	89 c2                	mov    %eax,%edx
f01250ac:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01250b2:	01 d0                	add    %edx,%eax
f01250b4:	48                   	dec    %eax
f01250b5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01250bb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01250c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01250c6:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01250cc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01250d2:	29 d0                	sub    %edx,%eax
f01250d4:	01 d8                	add    %ebx,%eax
f01250d6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01250db:	39 c1                	cmp    %eax,%ecx
f01250dd:	74 17                	je     f01250f6 <test_kheap_virt_addr+0x8eb>
f01250df:	83 ec 04             	sub    $0x4,%esp
f01250e2:	68 40 ad 13 f0       	push   $0xf013ad40
f01250e7:	68 1d 09 00 00       	push   $0x91d
f01250ec:	68 5a ac 13 f0       	push   $0xf013ac5a
f01250f1:	e8 05 b1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250f6:	e8 41 ec fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01250fb:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01250fe:	74 17                	je     f0125117 <test_kheap_virt_addr+0x90c>
f0125100:	83 ec 04             	sub    $0x4,%esp
f0125103:	68 74 ac 13 f0       	push   $0xf013ac74
f0125108:	68 1e 09 00 00       	push   $0x91e
f012510d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125112:	e8 e4 b0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125117:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012511a:	e8 a0 77 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012511f:	29 c3                	sub    %eax,%ebx
f0125121:	89 d8                	mov    %ebx,%eax
f0125123:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125128:	74 17                	je     f0125141 <test_kheap_virt_addr+0x936>
f012512a:	83 ec 04             	sub    $0x4,%esp
f012512d:	68 dc ac 13 f0       	push   $0xf013acdc
f0125132:	68 1f 09 00 00       	push   $0x91f
f0125137:	68 5a ac 13 f0       	push   $0xf013ac5a
f012513c:	e8 ba b0 fd ff       	call   f01001fb <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125141:	e8 79 77 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125146:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125149:	e8 ee eb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012514e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125151:	83 ec 0c             	sub    $0xc,%esp
f0125154:	68 00 38 00 00       	push   $0x3800
f0125159:	e8 a0 26 fe ff       	call   f01077fe <kmalloc>
f012515e:	83 c4 10             	add    $0x10,%esp
f0125161:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125167:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f012516d:	89 c1                	mov    %eax,%ecx
f012516f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125176:	10 00 00 
f0125179:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012517f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125184:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012518a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125190:	ba 00 00 00 00       	mov    $0x0,%edx
f0125195:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012519b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01251a1:	29 d0                	sub    %edx,%eax
f01251a3:	89 c3                	mov    %eax,%ebx
f01251a5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01251ac:	10 00 00 
f01251af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01251b4:	0f b6 d0             	movzbl %al,%edx
f01251b7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01251bd:	01 d0                	add    %edx,%eax
f01251bf:	48                   	dec    %eax
f01251c0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01251c6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01251cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01251d1:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01251d7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01251dd:	29 d0                	sub    %edx,%eax
f01251df:	01 c3                	add    %eax,%ebx
f01251e1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01251e8:	10 00 00 
f01251eb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01251f0:	0f b6 c0             	movzbl %al,%eax
f01251f3:	c1 e0 04             	shl    $0x4,%eax
f01251f6:	89 c2                	mov    %eax,%edx
f01251f8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01251fe:	01 d0                	add    %edx,%eax
f0125200:	48                   	dec    %eax
f0125201:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0125207:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012520d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125212:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0125218:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012521e:	29 d0                	sub    %edx,%eax
f0125220:	01 d8                	add    %ebx,%eax
f0125222:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125227:	39 c1                	cmp    %eax,%ecx
f0125229:	74 17                	je     f0125242 <test_kheap_virt_addr+0xa37>
f012522b:	83 ec 04             	sub    $0x4,%esp
f012522e:	68 40 ad 13 f0       	push   $0xf013ad40
f0125233:	68 25 09 00 00       	push   $0x925
f0125238:	68 5a ac 13 f0       	push   $0xf013ac5a
f012523d:	e8 b9 af fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125242:	e8 f5 ea fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125247:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012524a:	74 17                	je     f0125263 <test_kheap_virt_addr+0xa58>
f012524c:	83 ec 04             	sub    $0x4,%esp
f012524f:	68 74 ac 13 f0       	push   $0xf013ac74
f0125254:	68 26 09 00 00       	push   $0x926
f0125259:	68 5a ac 13 f0       	push   $0xf013ac5a
f012525e:	e8 98 af fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125263:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125266:	e8 54 76 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012526b:	29 c3                	sub    %eax,%ebx
f012526d:	89 d8                	mov    %ebx,%eax
f012526f:	83 f8 04             	cmp    $0x4,%eax
f0125272:	74 17                	je     f012528b <test_kheap_virt_addr+0xa80>
f0125274:	83 ec 04             	sub    $0x4,%esp
f0125277:	68 dc ac 13 f0       	push   $0xf013acdc
f012527c:	68 27 09 00 00       	push   $0x927
f0125281:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125286:	e8 70 af fd ff       	call   f01001fb <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f012528b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0125292:	10 00 00 
f0125295:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012529b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252a0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01252a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01252ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01252b1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01252b7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01252bd:	29 d0                	sub    %edx,%eax
f01252bf:	89 c1                	mov    %eax,%ecx
f01252c1:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01252c8:	10 00 00 
f01252cb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01252d0:	0f b6 d0             	movzbl %al,%edx
f01252d3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01252d9:	01 d0                	add    %edx,%eax
f01252db:	48                   	dec    %eax
f01252dc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01252e2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01252e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01252ed:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01252f3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01252f9:	29 d0                	sub    %edx,%eax
f01252fb:	01 c1                	add    %eax,%ecx
f01252fd:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0125304:	10 00 00 
f0125307:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012530c:	0f b6 c0             	movzbl %al,%eax
f012530f:	c1 e0 04             	shl    $0x4,%eax
f0125312:	89 c2                	mov    %eax,%edx
f0125314:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012531a:	01 d0                	add    %edx,%eax
f012531c:	48                   	dec    %eax
f012531d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0125323:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125329:	ba 00 00 00 00       	mov    $0x0,%edx
f012532e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0125334:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012533a:	29 d0                	sub    %edx,%eax
f012533c:	01 c1                	add    %eax,%ecx
f012533e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0125345:	10 00 00 
f0125348:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012534e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125353:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0125359:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012535f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125364:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f012536a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0125370:	29 d0                	sub    %edx,%eax
f0125372:	29 c1                	sub    %eax,%ecx
f0125374:	89 c8                	mov    %ecx,%eax
f0125376:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f012537b:	c1 e8 0c             	shr    $0xc,%eax
f012537e:	89 c2                	mov    %eax,%edx
f0125380:	4a                   	dec    %edx
f0125381:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0125387:	c1 e0 02             	shl    $0x2,%eax
f012538a:	8d 50 03             	lea    0x3(%eax),%edx
f012538d:	b8 10 00 00 00       	mov    $0x10,%eax
f0125392:	48                   	dec    %eax
f0125393:	01 d0                	add    %edx,%eax
f0125395:	bf 10 00 00 00       	mov    $0x10,%edi
f012539a:	ba 00 00 00 00       	mov    $0x0,%edx
f012539f:	f7 f7                	div    %edi
f01253a1:	6b c0 10             	imul   $0x10,%eax,%eax
f01253a4:	29 c4                	sub    %eax,%esp
f01253a6:	89 e0                	mov    %esp,%eax
f01253a8:	83 c0 03             	add    $0x3,%eax
f01253ab:	c1 e8 02             	shr    $0x2,%eax
f01253ae:	c1 e0 02             	shl    $0x2,%eax
f01253b1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01253b7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01253be:	10 00 00 
f01253c1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01253c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253cc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01253d2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01253d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01253dd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01253e3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01253e9:	29 d0                	sub    %edx,%eax
f01253eb:	89 c1                	mov    %eax,%ecx
f01253ed:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01253f4:	10 00 00 
f01253f7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01253fc:	0f b6 d0             	movzbl %al,%edx
f01253ff:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125405:	01 d0                	add    %edx,%eax
f0125407:	48                   	dec    %eax
f0125408:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012540e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125414:	ba 00 00 00 00       	mov    $0x0,%edx
f0125419:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012541f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0125425:	29 d0                	sub    %edx,%eax
f0125427:	01 c1                	add    %eax,%ecx
f0125429:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0125430:	10 00 00 
f0125433:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125438:	0f b6 c0             	movzbl %al,%eax
f012543b:	c1 e0 04             	shl    $0x4,%eax
f012543e:	89 c2                	mov    %eax,%edx
f0125440:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0125446:	01 d0                	add    %edx,%eax
f0125448:	48                   	dec    %eax
f0125449:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012544f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125455:	ba 00 00 00 00       	mov    $0x0,%edx
f012545a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0125460:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0125466:	29 d0                	sub    %edx,%eax
f0125468:	01 c1                	add    %eax,%ecx
f012546a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0125471:	10 00 00 
f0125474:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012547a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012547f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0125485:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012548b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125490:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0125496:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012549c:	29 d0                	sub    %edx,%eax
f012549e:	29 c1                	sub    %eax,%ecx
f01254a0:	89 c8                	mov    %ecx,%eax
f01254a2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01254a7:	c1 e8 0c             	shr    $0xc,%eax
f01254aa:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01254b0:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01254b7:	10 00 00 
f01254ba:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01254c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01254c5:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01254cb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01254d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01254d6:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01254dc:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01254e2:	29 d0                	sub    %edx,%eax
f01254e4:	89 c1                	mov    %eax,%ecx
f01254e6:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01254ed:	10 00 00 
f01254f0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01254f5:	0f b6 d0             	movzbl %al,%edx
f01254f8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01254fe:	01 d0                	add    %edx,%eax
f0125500:	48                   	dec    %eax
f0125501:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0125507:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012550d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125512:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0125518:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012551e:	29 d0                	sub    %edx,%eax
f0125520:	01 c1                	add    %eax,%ecx
f0125522:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0125529:	10 00 00 
f012552c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125531:	0f b6 c0             	movzbl %al,%eax
f0125534:	c1 e0 04             	shl    $0x4,%eax
f0125537:	89 c2                	mov    %eax,%edx
f0125539:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012553f:	01 d0                	add    %edx,%eax
f0125541:	48                   	dec    %eax
f0125542:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0125548:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012554e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125553:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0125559:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012555f:	29 d0                	sub    %edx,%eax
f0125561:	01 c8                	add    %ecx,%eax
f0125563:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125568:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f012556e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125575:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f012557c:	10 00 00 
f012557f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0125585:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012558a:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0125590:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125596:	ba 00 00 00 00       	mov    $0x0,%edx
f012559b:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01255a1:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01255a7:	29 d0                	sub    %edx,%eax
f01255a9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01255ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01255b1:	e9 21 01 00 00       	jmp    f01256d7 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01255b6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01255bb:	83 ec 04             	sub    $0x4,%esp
f01255be:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01255c4:	52                   	push   %edx
f01255c5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01255c8:	50                   	push   %eax
f01255c9:	e8 0c 14 fe ff       	call   f01069da <get_page_table>
f01255ce:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01255d1:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01255d7:	85 c0                	test   %eax,%eax
f01255d9:	75 17                	jne    f01255f2 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01255db:	83 ec 04             	sub    $0x4,%esp
f01255de:	68 fc b5 13 f0       	push   $0xf013b5fc
f01255e3:	68 38 09 00 00       	push   $0x938
f01255e8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01255ed:	e8 09 ac fd ff       	call   f01001fb <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01255f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01255f5:	c1 e8 0c             	shr    $0xc,%eax
f01255f8:	25 ff 03 00 00       	and    $0x3ff,%eax
f01255fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0125600:	e9 ba 00 00 00       	jmp    f01256bf <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125605:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f012560b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012560e:	c1 e2 02             	shl    $0x2,%edx
f0125611:	01 d0                	add    %edx,%eax
f0125613:	8b 00                	mov    (%eax),%eax
f0125615:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012561a:	89 c1                	mov    %eax,%ecx
f012561c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125622:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125625:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125628:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012562e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125631:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125634:	83 ec 0c             	sub    $0xc,%esp
f0125637:	50                   	push   %eax
f0125638:	e8 aa 23 fe ff       	call   f01079e7 <kheap_virtual_address>
f012563d:	83 c4 10             	add    $0x10,%esp
f0125640:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0125646:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012564c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012564f:	74 61                	je     f01256b2 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0125651:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125657:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012565a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012565d:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f0125663:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0125666:	c1 e1 02             	shl    $0x2,%ecx
f0125669:	01 ca                	add    %ecx,%edx
f012566b:	8b 12                	mov    (%edx),%edx
f012566d:	89 d1                	mov    %edx,%ecx
f012566f:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0125675:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125678:	c1 e2 0c             	shl    $0xc,%edx
f012567b:	89 d3                	mov    %edx,%ebx
f012567d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125680:	01 da                	add    %ebx,%edx
f0125682:	83 ec 0c             	sub    $0xc,%esp
f0125685:	50                   	push   %eax
f0125686:	51                   	push   %ecx
f0125687:	52                   	push   %edx
f0125688:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f012568e:	68 f0 b6 13 f0       	push   $0xf013b6f0
f0125693:	e8 ea b5 fd ff       	call   f0100c82 <cprintf>
f0125698:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012569b:	83 ec 04             	sub    $0x4,%esp
f012569e:	68 33 b7 13 f0       	push   $0xf013b733
f01256a3:	68 42 09 00 00       	push   $0x942
f01256a8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01256ad:	e8 49 ab fd ff       	call   f01001fb <_panic>
				}
				va+=PAGE_SIZE;
f01256b2:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01256b9:	ff 45 dc             	incl   -0x24(%ebp)
f01256bc:	ff 45 e0             	incl   -0x20(%ebp)
f01256bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01256c2:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01256c8:	7d 0d                	jge    f01256d7 <test_kheap_virt_addr+0xecc>
f01256ca:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01256d1:	0f 8e 2e ff ff ff    	jle    f0125605 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01256d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01256da:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01256e0:	0f 82 d0 fe ff ff    	jb     f01255b6 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01256e6:	83 ec 0c             	sub    $0xc,%esp
f01256e9:	68 50 b7 13 f0       	push   $0xf013b750
f01256ee:	e8 8f b5 fd ff       	call   f0100c82 <cprintf>
f01256f3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01256f6:	e8 c4 71 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01256fb:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125701:	e8 36 e6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125706:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f012570c:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125712:	83 ec 0c             	sub    $0xc,%esp
f0125715:	50                   	push   %eax
f0125716:	e8 a5 21 fe ff       	call   f01078c0 <kfree>
f012571b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012571e:	e8 19 e6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125723:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125729:	74 17                	je     f0125742 <test_kheap_virt_addr+0xf37>
f012572b:	83 ec 04             	sub    $0x4,%esp
f012572e:	68 74 ac 13 f0       	push   $0xf013ac74
f0125733:	68 50 09 00 00       	push   $0x950
f0125738:	68 5a ac 13 f0       	push   $0xf013ac5a
f012573d:	e8 b9 aa fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125742:	e8 78 71 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125747:	89 c2                	mov    %eax,%edx
f0125749:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012574f:	29 c2                	sub    %eax,%edx
f0125751:	89 d0                	mov    %edx,%eax
f0125753:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125758:	74 17                	je     f0125771 <test_kheap_virt_addr+0xf66>
f012575a:	83 ec 04             	sub    $0x4,%esp
f012575d:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0125762:	68 51 09 00 00       	push   $0x951
f0125767:	68 5a ac 13 f0       	push   $0xf013ac5a
f012576c:	e8 8a aa fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125771:	e8 49 71 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125776:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012577c:	e8 bb e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125781:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0125787:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012578d:	83 ec 0c             	sub    $0xc,%esp
f0125790:	50                   	push   %eax
f0125791:	e8 2a 21 fe ff       	call   f01078c0 <kfree>
f0125796:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125799:	e8 9e e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012579e:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01257a4:	74 17                	je     f01257bd <test_kheap_virt_addr+0xfb2>
f01257a6:	83 ec 04             	sub    $0x4,%esp
f01257a9:	68 74 ac 13 f0       	push   $0xf013ac74
f01257ae:	68 57 09 00 00       	push   $0x957
f01257b3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01257b8:	e8 3e aa fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01257bd:	e8 fd 70 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01257c2:	89 c2                	mov    %eax,%edx
f01257c4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01257ca:	29 c2                	sub    %eax,%edx
f01257cc:	89 d0                	mov    %edx,%eax
f01257ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257d3:	74 17                	je     f01257ec <test_kheap_virt_addr+0xfe1>
f01257d5:	83 ec 04             	sub    $0x4,%esp
f01257d8:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01257dd:	68 58 09 00 00       	push   $0x958
f01257e2:	68 5a ac 13 f0       	push   $0xf013ac5a
f01257e7:	e8 0f aa fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01257ec:	e8 ce 70 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01257f1:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257f7:	e8 40 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01257fc:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0125802:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125808:	83 ec 0c             	sub    $0xc,%esp
f012580b:	50                   	push   %eax
f012580c:	e8 af 20 fe ff       	call   f01078c0 <kfree>
f0125811:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125814:	e8 23 e5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125819:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012581f:	74 17                	je     f0125838 <test_kheap_virt_addr+0x102d>
f0125821:	83 ec 04             	sub    $0x4,%esp
f0125824:	68 74 ac 13 f0       	push   $0xf013ac74
f0125829:	68 5e 09 00 00       	push   $0x95e
f012582e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125833:	e8 c3 a9 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125838:	e8 82 70 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012583d:	89 c2                	mov    %eax,%edx
f012583f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125845:	29 c2                	sub    %eax,%edx
f0125847:	89 d0                	mov    %edx,%eax
f0125849:	3d 00 06 00 00       	cmp    $0x600,%eax
f012584e:	74 17                	je     f0125867 <test_kheap_virt_addr+0x105c>
f0125850:	83 ec 04             	sub    $0x4,%esp
f0125853:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0125858:	68 5f 09 00 00       	push   $0x95f
f012585d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125862:	e8 94 a9 fd ff       	call   f01001fb <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0125867:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012586e:	10 00 00 
f0125871:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0125877:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012587c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125882:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125888:	ba 00 00 00 00       	mov    $0x0,%edx
f012588d:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125893:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125899:	29 d0                	sub    %edx,%eax
f012589b:	89 c1                	mov    %eax,%ecx
f012589d:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01258a4:	10 00 00 
f01258a7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01258ac:	0f b6 d0             	movzbl %al,%edx
f01258af:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01258b5:	01 d0                	add    %edx,%eax
f01258b7:	48                   	dec    %eax
f01258b8:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01258be:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01258c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01258c9:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01258cf:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01258d5:	29 d0                	sub    %edx,%eax
f01258d7:	01 c1                	add    %eax,%ecx
f01258d9:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01258e0:	10 00 00 
f01258e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01258e8:	0f b6 c0             	movzbl %al,%eax
f01258eb:	c1 e0 04             	shl    $0x4,%eax
f01258ee:	89 c2                	mov    %eax,%edx
f01258f0:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01258f6:	01 d0                	add    %edx,%eax
f01258f8:	48                   	dec    %eax
f01258f9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01258ff:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125905:	ba 00 00 00 00       	mov    $0x0,%edx
f012590a:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0125910:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125916:	29 d0                	sub    %edx,%eax
f0125918:	01 c8                	add    %ecx,%eax
f012591a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012591f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125925:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f012592c:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125933:	10 00 00 
f0125936:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012593c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125941:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125947:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012594d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125952:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125958:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012595e:	29 d0                	sub    %edx,%eax
f0125960:	89 c1                	mov    %eax,%ecx
f0125962:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0125969:	10 00 00 
f012596c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125971:	0f b6 d0             	movzbl %al,%edx
f0125974:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012597a:	01 d0                	add    %edx,%eax
f012597c:	48                   	dec    %eax
f012597d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0125983:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125989:	ba 00 00 00 00       	mov    $0x0,%edx
f012598e:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125994:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012599a:	29 d0                	sub    %edx,%eax
f012599c:	01 c1                	add    %eax,%ecx
f012599e:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01259a5:	10 00 00 
f01259a8:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01259ad:	0f b6 c0             	movzbl %al,%eax
f01259b0:	c1 e0 04             	shl    $0x4,%eax
f01259b3:	89 c2                	mov    %eax,%edx
f01259b5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01259bb:	01 d0                	add    %edx,%eax
f01259bd:	48                   	dec    %eax
f01259be:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01259c4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01259ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01259cf:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01259d5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01259db:	29 d0                	sub    %edx,%eax
f01259dd:	01 c1                	add    %eax,%ecx
f01259df:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01259e6:	10 00 00 
f01259e9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01259ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01259f4:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f01259fa:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a00:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a05:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125a0b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125a11:	29 d0                	sub    %edx,%eax
f0125a13:	29 c1                	sub    %eax,%ecx
f0125a15:	89 c8                	mov    %ecx,%eax
f0125a17:	05 00 40 00 00       	add    $0x4000,%eax
f0125a1c:	c1 e8 0c             	shr    $0xc,%eax
f0125a1f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125a25:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125a2e:	eb 41                	jmp    f0125a71 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125a30:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125a36:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125a39:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125a3c:	83 ec 0c             	sub    $0xc,%esp
f0125a3f:	50                   	push   %eax
f0125a40:	e8 a2 1f fe ff       	call   f01079e7 <kheap_virtual_address>
f0125a45:	83 c4 10             	add    $0x10,%esp
f0125a48:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0125a4e:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f0125a55:	74 17                	je     f0125a6e <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f0125a57:	83 ec 04             	sub    $0x4,%esp
f0125a5a:	68 33 b7 13 f0       	push   $0xf013b733
f0125a5f:	68 70 09 00 00       	push   $0x970
f0125a64:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125a69:	e8 8d a7 fd ff       	call   f01001fb <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125a6e:	ff 45 d8             	incl   -0x28(%ebp)
f0125a71:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a77:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125a7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125a80:	39 c2                	cmp    %eax,%edx
f0125a82:	77 ac                	ja     f0125a30 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125a84:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125a8a:	05 00 04 00 00       	add    $0x400,%eax
f0125a8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125a92:	e9 83 00 00 00       	jmp    f0125b1a <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125a97:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125a9d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125aa0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125aa3:	83 ec 0c             	sub    $0xc,%esp
f0125aa6:	50                   	push   %eax
f0125aa7:	e8 3b 1f fe ff       	call   f01079e7 <kheap_virtual_address>
f0125aac:	83 c4 10             	add    $0x10,%esp
f0125aaf:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125ab5:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125abc:	10 00 00 
f0125abf:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125ac5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125aca:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0125ad0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125ad6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125adb:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f0125ae1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125ae7:	29 d0                	sub    %edx,%eax
f0125ae9:	89 c2                	mov    %eax,%edx
f0125aeb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125aee:	c1 e0 0c             	shl    $0xc,%eax
f0125af1:	01 d0                	add    %edx,%eax
f0125af3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125af8:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0125afe:	74 17                	je     f0125b17 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0125b00:	83 ec 04             	sub    $0x4,%esp
f0125b03:	68 33 b7 13 f0       	push   $0xf013b733
f0125b08:	68 7a 09 00 00       	push   $0x97a
f0125b0d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125b12:	e8 e4 a6 fd ff       	call   f01001fb <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b17:	ff 45 d8             	incl   -0x28(%ebp)
f0125b1a:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b20:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125b26:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b29:	39 c2                	cmp    %eax,%edx
f0125b2b:	0f 87 66 ff ff ff    	ja     f0125a97 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b31:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b37:	05 04 07 00 00       	add    $0x704,%eax
f0125b3c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125b3f:	eb 41                	jmp    f0125b82 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125b41:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125b47:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125b4a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125b4d:	83 ec 0c             	sub    $0xc,%esp
f0125b50:	50                   	push   %eax
f0125b51:	e8 91 1e fe ff       	call   f01079e7 <kheap_virtual_address>
f0125b56:	83 c4 10             	add    $0x10,%esp
f0125b59:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0125b5f:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f0125b66:	74 17                	je     f0125b7f <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f0125b68:	83 ec 04             	sub    $0x4,%esp
f0125b6b:	68 33 b7 13 f0       	push   $0xf013b733
f0125b70:	68 83 09 00 00       	push   $0x983
f0125b75:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125b7a:	e8 7c a6 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125b7f:	ff 45 d8             	incl   -0x28(%ebp)
f0125b82:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b88:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0125b8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125b91:	39 c2                	cmp    %eax,%edx
f0125b93:	77 ac                	ja     f0125b41 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125b95:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125b9b:	05 04 0d 00 00       	add    $0xd04,%eax
f0125ba0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125ba3:	e9 83 00 00 00       	jmp    f0125c2b <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125ba8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125bae:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125bb1:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125bb4:	83 ec 0c             	sub    $0xc,%esp
f0125bb7:	50                   	push   %eax
f0125bb8:	e8 2a 1e fe ff       	call   f01079e7 <kheap_virtual_address>
f0125bbd:	83 c4 10             	add    $0x10,%esp
f0125bc0:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125bc6:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125bcd:	10 00 00 
f0125bd0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125bd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125bdb:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0125be1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bec:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0125bf2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125bf8:	29 d0                	sub    %edx,%eax
f0125bfa:	89 c2                	mov    %eax,%edx
f0125bfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125bff:	c1 e0 0c             	shl    $0xc,%eax
f0125c02:	01 d0                	add    %edx,%eax
f0125c04:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125c09:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0125c0f:	74 17                	je     f0125c28 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0125c11:	83 ec 04             	sub    $0x4,%esp
f0125c14:	68 33 b7 13 f0       	push   $0xf013b733
f0125c19:	68 8c 09 00 00       	push   $0x98c
f0125c1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125c23:	e8 d3 a5 fd ff       	call   f01001fb <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125c28:	ff 45 d8             	incl   -0x28(%ebp)
f0125c2b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c31:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125c37:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125c3a:	39 c2                	cmp    %eax,%edx
f0125c3c:	0f 87 66 ff ff ff    	ja     f0125ba8 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0125c42:	83 ec 0c             	sub    $0xc,%esp
f0125c45:	68 e5 ad 13 f0       	push   $0xf013ade5
f0125c4a:	e8 33 b0 fd ff       	call   f0100c82 <cprintf>
f0125c4f:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125c52:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125c59:	eb 54                	jmp    f0125caf <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125c5b:	83 ec 0c             	sub    $0xc,%esp
f0125c5e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125c61:	e8 81 1d fe ff       	call   f01079e7 <kheap_virtual_address>
f0125c66:	83 c4 10             	add    $0x10,%esp
f0125c69:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0125c6f:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0125c76:	74 30                	je     f0125ca8 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125c78:	83 ec 04             	sub    $0x4,%esp
f0125c7b:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125c81:	ff 75 d4             	pushl  -0x2c(%ebp)
f0125c84:	68 81 b7 13 f0       	push   $0xf013b781
f0125c89:	e8 f4 af fd ff       	call   f0100c82 <cprintf>
f0125c8e:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0125c91:	83 ec 04             	sub    $0x4,%esp
f0125c94:	68 33 b7 13 f0       	push   $0xf013b733
f0125c99:	68 9c 09 00 00       	push   $0x99c
f0125c9e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125ca3:	e8 53 a5 fd ff       	call   f01001fb <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125ca8:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0125caf:	b8 bc 7c 65 00       	mov    $0x657cbc,%eax
f0125cb4:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125cb7:	72 a2                	jb     f0125c5b <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125cb9:	83 ec 0c             	sub    $0xc,%esp
f0125cbc:	68 3e ae 13 f0       	push   $0xf013ae3e
f0125cc1:	e8 bc af fd ff       	call   f0100c82 <cprintf>
f0125cc6:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125cc9:	83 ec 0c             	sub    $0xc,%esp
f0125ccc:	68 a0 b7 13 f0       	push   $0xf013b7a0
f0125cd1:	e8 ac af fd ff       	call   f0100c82 <cprintf>
f0125cd6:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125cd9:	b8 01 00 00 00       	mov    $0x1,%eax
f0125cde:	89 f4                	mov    %esi,%esp

}
f0125ce0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125ce3:	5b                   	pop    %ebx
f0125ce4:	5e                   	pop    %esi
f0125ce5:	5f                   	pop    %edi
f0125ce6:	5d                   	pop    %ebp
f0125ce7:	c3                   	ret    

f0125ce8 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125ce8:	55                   	push   %ebp
f0125ce9:	89 e5                	mov    %esp,%ebp
f0125ceb:	57                   	push   %edi
f0125cec:	56                   	push   %esi
f0125ced:	53                   	push   %ebx
f0125cee:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125cf4:	a0 cf 1c 19 f0       	mov    0xf0191ccf,%al
f0125cf9:	84 c0                	test   %al,%al
f0125cfb:	74 56                	je     f0125d53 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125cfd:	c6 05 cf 1c 19 f0 00 	movb   $0x0,0xf0191ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125d04:	e8 b6 6b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125d09:	a3 b8 7c 65 f0       	mov    %eax,0xf0657cb8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125d0e:	e8 29 e0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125d13:	a3 b4 7c 65 f0       	mov    %eax,0xf0657cb4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125d18:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125d1e:	bb fd b8 13 f0       	mov    $0xf013b8fd,%ebx
f0125d23:	ba 11 00 00 00       	mov    $0x11,%edx
f0125d28:	89 c7                	mov    %eax,%edi
f0125d2a:	89 de                	mov    %ebx,%esi
f0125d2c:	89 d1                	mov    %edx,%ecx
f0125d2e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125d30:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0125d36:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125d3b:	b0 00                	mov    $0x0,%al
f0125d3d:	89 d7                	mov    %edx,%edi
f0125d3f:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0125d41:	83 ec 0c             	sub    $0xc,%esp
f0125d44:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0125d4a:	50                   	push   %eax
f0125d4b:	e8 94 af fd ff       	call   f0100ce4 <execute_command>
f0125d50:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0125d53:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125d5a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125d61:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f0125d66:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125d69:	eb 2d                	jmp    f0125d98 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125d6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125d6e:	05 5c 05 00 00       	add    $0x55c,%eax
f0125d73:	83 ec 08             	sub    $0x8,%esp
f0125d76:	68 e7 b7 13 f0       	push   $0xf013b7e7
f0125d7b:	50                   	push   %eax
f0125d7c:	e8 79 af 00 00       	call   f0130cfa <strcmp>
f0125d81:	83 c4 10             	add    $0x10,%esp
f0125d84:	85 c0                	test   %eax,%eax
f0125d86:	75 08                	jne    f0125d90 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0125d88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125d8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0125d8e:	eb 2f                	jmp    f0125dbf <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0125d90:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125d95:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125d98:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125d9c:	74 08                	je     f0125da6 <test_three_creation_functions+0xbe>
f0125d9e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125da1:	8b 40 44             	mov    0x44(%eax),%eax
f0125da4:	eb 05                	jmp    f0125dab <test_three_creation_functions+0xc3>
f0125da6:	b8 00 00 00 00       	mov    $0x0,%eax
f0125dab:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f0125db0:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f0125db5:	85 c0                	test   %eax,%eax
f0125db7:	75 b2                	jne    f0125d6b <test_three_creation_functions+0x83>
f0125db9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125dbd:	75 ac                	jne    f0125d6b <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0125dbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125dc2:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0125dc8:	85 c0                	test   %eax,%eax
f0125dca:	74 17                	je     f0125de3 <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125dcc:	83 ec 04             	sub    $0x4,%esp
f0125dcf:	68 f0 b7 13 f0       	push   $0xf013b7f0
f0125dd4:	68 c6 09 00 00       	push   $0x9c6
f0125dd9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125dde:	e8 18 a4 fd ff       	call   f01001fb <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0125de3:	83 ec 0c             	sub    $0xc,%esp
f0125de6:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125de9:	e8 98 1f fe ff       	call   f0107d86 <env_page_ws_get_size>
f0125dee:	83 c4 10             	add    $0x10,%esp
f0125df1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125df4:	e8 c6 6a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125df9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125dfc:	e8 3b df fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125e01:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e04:	a1 b4 7c 65 f0       	mov    0xf0657cb4,%eax
f0125e09:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125e0c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125e0f:	74 17                	je     f0125e28 <test_three_creation_functions+0x140>
f0125e11:	83 ec 04             	sub    $0x4,%esp
f0125e14:	68 74 ac 13 f0       	push   $0xf013ac74
f0125e19:	68 cc 09 00 00       	push   $0x9cc
f0125e1e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125e23:	e8 d3 a3 fd ff       	call   f01001fb <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e28:	a1 b8 7c 65 f0       	mov    0xf0657cb8,%eax
f0125e2d:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125e30:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0125e33:	83 c2 15             	add    $0x15,%edx
f0125e36:	39 d0                	cmp    %edx,%eax
f0125e38:	74 17                	je     f0125e51 <test_three_creation_functions+0x169>
f0125e3a:	83 ec 04             	sub    $0x4,%esp
f0125e3d:	68 dc ac 13 f0       	push   $0xf013acdc
f0125e42:	68 ce 09 00 00       	push   $0x9ce
f0125e47:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125e4c:	e8 aa a3 fd ff       	call   f01001fb <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125e51:	83 ec 0c             	sub    $0xc,%esp
f0125e54:	68 00 10 00 00       	push   $0x1000
f0125e59:	e8 a0 19 fe ff       	call   f01077fe <kmalloc>
f0125e5e:	83 c4 10             	add    $0x10,%esp
f0125e61:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0125e64:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125e6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0125e6e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e73:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125e76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125e79:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e7e:	f7 75 cc             	divl   -0x34(%ebp)
f0125e81:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125e84:	29 d0                	sub    %edx,%eax
f0125e86:	89 c1                	mov    %eax,%ecx
f0125e88:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0125e8f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125e94:	0f b6 d0             	movzbl %al,%edx
f0125e97:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125e9a:	01 d0                	add    %edx,%eax
f0125e9c:	48                   	dec    %eax
f0125e9d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125ea0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125ea3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ea8:	f7 75 c4             	divl   -0x3c(%ebp)
f0125eab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125eae:	29 d0                	sub    %edx,%eax
f0125eb0:	01 c1                	add    %eax,%ecx
f0125eb2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125eb9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125ebe:	0f b6 c0             	movzbl %al,%eax
f0125ec1:	c1 e0 04             	shl    $0x4,%eax
f0125ec4:	89 c2                	mov    %eax,%edx
f0125ec6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125ec9:	01 d0                	add    %edx,%eax
f0125ecb:	48                   	dec    %eax
f0125ecc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0125ecf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125ed2:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ed7:	f7 75 bc             	divl   -0x44(%ebp)
f0125eda:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125edd:	29 d0                	sub    %edx,%eax
f0125edf:	01 c8                	add    %ecx,%eax
f0125ee1:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125ee7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125eea:	39 c2                	cmp    %eax,%edx
f0125eec:	74 17                	je     f0125f05 <test_three_creation_functions+0x21d>
f0125eee:	83 ec 04             	sub    $0x4,%esp
f0125ef1:	68 40 b8 13 f0       	push   $0xf013b840
f0125ef6:	68 d2 09 00 00       	push   $0x9d2
f0125efb:	68 5a ac 13 f0       	push   $0xf013ac5a
f0125f00:	e8 f6 a2 fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125f05:	83 ec 0c             	sub    $0xc,%esp
f0125f08:	68 b0 b8 13 f0       	push   $0xf013b8b0
f0125f0d:	e8 70 ad fd ff       	call   f0100c82 <cprintf>
f0125f12:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125f15:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125f1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125f1d:	5b                   	pop    %ebx
f0125f1e:	5e                   	pop    %esi
f0125f1f:	5f                   	pop    %edi
f0125f20:	5d                   	pop    %ebp
f0125f21:	c3                   	ret    

f0125f22 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125f22:	55                   	push   %ebp
f0125f23:	89 e5                	mov    %esp,%ebp
f0125f25:	57                   	push   %edi
f0125f26:	53                   	push   %ebx
f0125f27:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125f2d:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125f31:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125f35:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0125f3b:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125f41:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125f48:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125f4f:	e8 6b 69 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125f54:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0125f57:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0125f5d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f62:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f67:	89 d7                	mov    %edx,%edi
f0125f69:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125f6b:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0125f71:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f76:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f7b:	89 d7                	mov    %edx,%edi
f0125f7d:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125f7f:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125f85:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125f8a:	b8 00 00 00 00       	mov    $0x0,%eax
f0125f8f:	89 d7                	mov    %edx,%edi
f0125f91:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125f93:	e8 27 69 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0125f98:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f9b:	e8 9c dd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0125fa0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125fa3:	83 ec 0c             	sub    $0xc,%esp
f0125fa6:	68 00 fc 1f 00       	push   $0x1ffc00
f0125fab:	e8 4e 18 fe ff       	call   f01077fe <kmalloc>
f0125fb0:	83 c4 10             	add    $0x10,%esp
f0125fb3:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125fb9:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125fbf:	89 c1                	mov    %eax,%ecx
f0125fc1:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125fc8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125fcb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125fd0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125fd3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125fd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fdb:	f7 75 c8             	divl   -0x38(%ebp)
f0125fde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125fe1:	29 d0                	sub    %edx,%eax
f0125fe3:	89 c3                	mov    %eax,%ebx
f0125fe5:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125fec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0125ff1:	0f b6 d0             	movzbl %al,%edx
f0125ff4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125ff7:	01 d0                	add    %edx,%eax
f0125ff9:	48                   	dec    %eax
f0125ffa:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125ffd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126000:	ba 00 00 00 00       	mov    $0x0,%edx
f0126005:	f7 75 c0             	divl   -0x40(%ebp)
f0126008:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012600b:	29 d0                	sub    %edx,%eax
f012600d:	01 c3                	add    %eax,%ebx
f012600f:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126016:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012601b:	0f b6 c0             	movzbl %al,%eax
f012601e:	c1 e0 04             	shl    $0x4,%eax
f0126021:	89 c2                	mov    %eax,%edx
f0126023:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126026:	01 d0                	add    %edx,%eax
f0126028:	48                   	dec    %eax
f0126029:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012602c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012602f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126034:	f7 75 b8             	divl   -0x48(%ebp)
f0126037:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012603a:	29 d0                	sub    %edx,%eax
f012603c:	01 d8                	add    %ebx,%eax
f012603e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126043:	39 c1                	cmp    %eax,%ecx
f0126045:	74 17                	je     f012605e <test_kfreeall+0x13c>
f0126047:	83 ec 04             	sub    $0x4,%esp
f012604a:	68 40 ad 13 f0       	push   $0xf013ad40
f012604f:	68 f9 09 00 00       	push   $0x9f9
f0126054:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126059:	e8 9d a1 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012605e:	e8 d9 dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126063:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126066:	74 17                	je     f012607f <test_kfreeall+0x15d>
f0126068:	83 ec 04             	sub    $0x4,%esp
f012606b:	68 74 ac 13 f0       	push   $0xf013ac74
f0126070:	68 fa 09 00 00       	push   $0x9fa
f0126075:	68 5a ac 13 f0       	push   $0xf013ac5a
f012607a:	e8 7c a1 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012607f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126082:	e8 38 68 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126087:	29 c3                	sub    %eax,%ebx
f0126089:	89 d8                	mov    %ebx,%eax
f012608b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126090:	74 17                	je     f01260a9 <test_kfreeall+0x187>
f0126092:	83 ec 04             	sub    $0x4,%esp
f0126095:	68 dc ac 13 f0       	push   $0xf013acdc
f012609a:	68 fb 09 00 00       	push   $0x9fb
f012609f:	68 5a ac 13 f0       	push   $0xf013ac5a
f01260a4:	e8 52 a1 fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01260a9:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f01260b0:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01260b3:	e8 07 68 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01260b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260bb:	e8 7c dc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01260c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01260c3:	83 ec 0c             	sub    $0xc,%esp
f01260c6:	68 00 fc 1f 00       	push   $0x1ffc00
f01260cb:	e8 2e 17 fe ff       	call   f01077fe <kmalloc>
f01260d0:	83 c4 10             	add    $0x10,%esp
f01260d3:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01260d9:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01260df:	89 c1                	mov    %eax,%ecx
f01260e1:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01260e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01260eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260f0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01260f3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01260f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01260fb:	f7 75 b0             	divl   -0x50(%ebp)
f01260fe:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126101:	29 d0                	sub    %edx,%eax
f0126103:	89 c3                	mov    %eax,%ebx
f0126105:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012610c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126111:	0f b6 d0             	movzbl %al,%edx
f0126114:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126117:	01 d0                	add    %edx,%eax
f0126119:	48                   	dec    %eax
f012611a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012611d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126120:	ba 00 00 00 00       	mov    $0x0,%edx
f0126125:	f7 75 a8             	divl   -0x58(%ebp)
f0126128:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012612b:	29 d0                	sub    %edx,%eax
f012612d:	01 c3                	add    %eax,%ebx
f012612f:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126136:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012613b:	0f b6 c0             	movzbl %al,%eax
f012613e:	c1 e0 04             	shl    $0x4,%eax
f0126141:	89 c2                	mov    %eax,%edx
f0126143:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126146:	01 d0                	add    %edx,%eax
f0126148:	48                   	dec    %eax
f0126149:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012614c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012614f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126154:	f7 75 a0             	divl   -0x60(%ebp)
f0126157:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012615a:	29 d0                	sub    %edx,%eax
f012615c:	01 d8                	add    %ebx,%eax
f012615e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126163:	39 c1                	cmp    %eax,%ecx
f0126165:	74 17                	je     f012617e <test_kfreeall+0x25c>
f0126167:	83 ec 04             	sub    $0x4,%esp
f012616a:	68 40 ad 13 f0       	push   $0xf013ad40
f012616f:	68 02 0a 00 00       	push   $0xa02
f0126174:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126179:	e8 7d a0 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012617e:	e8 b9 db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126183:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126186:	74 17                	je     f012619f <test_kfreeall+0x27d>
f0126188:	83 ec 04             	sub    $0x4,%esp
f012618b:	68 74 ac 13 f0       	push   $0xf013ac74
f0126190:	68 03 0a 00 00       	push   $0xa03
f0126195:	68 5a ac 13 f0       	push   $0xf013ac5a
f012619a:	e8 5c a0 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012619f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01261a2:	e8 18 67 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01261a7:	29 c3                	sub    %eax,%ebx
f01261a9:	89 d8                	mov    %ebx,%eax
f01261ab:	3d 00 02 00 00       	cmp    $0x200,%eax
f01261b0:	74 17                	je     f01261c9 <test_kfreeall+0x2a7>
f01261b2:	83 ec 04             	sub    $0x4,%esp
f01261b5:	68 dc ac 13 f0       	push   $0xf013acdc
f01261ba:	68 04 0a 00 00       	push   $0xa04
f01261bf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01261c4:	e8 32 a0 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01261c9:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f01261d0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01261d3:	e8 e7 66 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01261d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261db:	e8 5c db fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01261e0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01261e3:	83 ec 0c             	sub    $0xc,%esp
f01261e6:	68 00 08 00 00       	push   $0x800
f01261eb:	e8 0e 16 fe ff       	call   f01077fe <kmalloc>
f01261f0:	83 c4 10             	add    $0x10,%esp
f01261f3:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01261f9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01261ff:	89 c1                	mov    %eax,%ecx
f0126201:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126208:	8b 45 98             	mov    -0x68(%ebp),%eax
f012620b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126210:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126213:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126216:	ba 00 00 00 00       	mov    $0x0,%edx
f012621b:	f7 75 98             	divl   -0x68(%ebp)
f012621e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126221:	29 d0                	sub    %edx,%eax
f0126223:	89 c3                	mov    %eax,%ebx
f0126225:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012622c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126231:	0f b6 d0             	movzbl %al,%edx
f0126234:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126237:	01 d0                	add    %edx,%eax
f0126239:	48                   	dec    %eax
f012623a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012623d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126240:	ba 00 00 00 00       	mov    $0x0,%edx
f0126245:	f7 75 90             	divl   -0x70(%ebp)
f0126248:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012624b:	29 d0                	sub    %edx,%eax
f012624d:	01 c3                	add    %eax,%ebx
f012624f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126256:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012625b:	0f b6 c0             	movzbl %al,%eax
f012625e:	c1 e0 04             	shl    $0x4,%eax
f0126261:	89 c2                	mov    %eax,%edx
f0126263:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126266:	01 d0                	add    %edx,%eax
f0126268:	48                   	dec    %eax
f0126269:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012626c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012626f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126274:	f7 75 88             	divl   -0x78(%ebp)
f0126277:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012627a:	29 d0                	sub    %edx,%eax
f012627c:	01 d8                	add    %ebx,%eax
f012627e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126283:	39 c1                	cmp    %eax,%ecx
f0126285:	74 17                	je     f012629e <test_kfreeall+0x37c>
f0126287:	83 ec 04             	sub    $0x4,%esp
f012628a:	68 40 ad 13 f0       	push   $0xf013ad40
f012628f:	68 0b 0a 00 00       	push   $0xa0b
f0126294:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126299:	e8 5d 9f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012629e:	e8 99 da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01262a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262a6:	74 17                	je     f01262bf <test_kfreeall+0x39d>
f01262a8:	83 ec 04             	sub    $0x4,%esp
f01262ab:	68 74 ac 13 f0       	push   $0xf013ac74
f01262b0:	68 0c 0a 00 00       	push   $0xa0c
f01262b5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01262ba:	e8 3c 9f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01262bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01262c2:	e8 f8 65 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01262c7:	29 c3                	sub    %eax,%ebx
f01262c9:	89 d8                	mov    %ebx,%eax
f01262cb:	83 f8 01             	cmp    $0x1,%eax
f01262ce:	74 17                	je     f01262e7 <test_kfreeall+0x3c5>
f01262d0:	83 ec 04             	sub    $0x4,%esp
f01262d3:	68 dc ac 13 f0       	push   $0xf013acdc
f01262d8:	68 0d 0a 00 00       	push   $0xa0d
f01262dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01262e2:	e8 14 9f fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01262e7:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01262ee:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01262f1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01262f7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01262fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126301:	eb 0e                	jmp    f0126311 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0126303:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126306:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126309:	01 d0                	add    %edx,%eax
f012630b:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012630e:	ff 45 f4             	incl   -0xc(%ebp)
f0126311:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126317:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012631a:	7f e7                	jg     f0126303 <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012631c:	e8 9e 65 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126321:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126324:	e8 13 da fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126329:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012632c:	83 ec 0c             	sub    $0xc,%esp
f012632f:	68 00 08 00 00       	push   $0x800
f0126334:	e8 c5 14 fe ff       	call   f01077fe <kmalloc>
f0126339:	83 c4 10             	add    $0x10,%esp
f012633c:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126342:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126348:	89 c1                	mov    %eax,%ecx
f012634a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0126351:	10 00 00 
f0126354:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012635a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012635f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0126365:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012636b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126370:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0126376:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012637c:	29 d0                	sub    %edx,%eax
f012637e:	89 c3                	mov    %eax,%ebx
f0126380:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0126387:	10 00 00 
f012638a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012638f:	0f b6 d0             	movzbl %al,%edx
f0126392:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126398:	01 d0                	add    %edx,%eax
f012639a:	48                   	dec    %eax
f012639b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01263a1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01263a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01263ac:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01263b2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01263b8:	29 d0                	sub    %edx,%eax
f01263ba:	01 c3                	add    %eax,%ebx
f01263bc:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01263c3:	10 00 00 
f01263c6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01263cb:	0f b6 c0             	movzbl %al,%eax
f01263ce:	c1 e0 04             	shl    $0x4,%eax
f01263d1:	89 c2                	mov    %eax,%edx
f01263d3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01263d9:	01 d0                	add    %edx,%eax
f01263db:	48                   	dec    %eax
f01263dc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01263e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01263e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01263ed:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01263f3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01263f9:	29 d0                	sub    %edx,%eax
f01263fb:	01 d8                	add    %ebx,%eax
f01263fd:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126402:	39 c1                	cmp    %eax,%ecx
f0126404:	74 17                	je     f012641d <test_kfreeall+0x4fb>
f0126406:	83 ec 04             	sub    $0x4,%esp
f0126409:	68 40 ad 13 f0       	push   $0xf013ad40
f012640e:	68 19 0a 00 00       	push   $0xa19
f0126413:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126418:	e8 de 9d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012641d:	e8 1a d9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126422:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126425:	74 17                	je     f012643e <test_kfreeall+0x51c>
f0126427:	83 ec 04             	sub    $0x4,%esp
f012642a:	68 74 ac 13 f0       	push   $0xf013ac74
f012642f:	68 1a 0a 00 00       	push   $0xa1a
f0126434:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126439:	e8 bd 9d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012643e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126441:	e8 79 64 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126446:	29 c3                	sub    %eax,%ebx
f0126448:	89 d8                	mov    %ebx,%eax
f012644a:	83 f8 01             	cmp    $0x1,%eax
f012644d:	74 17                	je     f0126466 <test_kfreeall+0x544>
f012644f:	83 ec 04             	sub    $0x4,%esp
f0126452:	68 dc ac 13 f0       	push   $0xf013acdc
f0126457:	68 1b 0a 00 00       	push   $0xa1b
f012645c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126461:	e8 95 9d fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126466:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f012646d:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126470:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126476:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126479:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126480:	eb 0e                	jmp    f0126490 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0126482:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126485:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126488:	01 d0                	add    %edx,%eax
f012648a:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012648d:	ff 45 f4             	incl   -0xc(%ebp)
f0126490:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126496:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126499:	7f e7                	jg     f0126482 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012649b:	e8 1f 64 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01264a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264a3:	e8 94 d8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01264a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01264ab:	83 ec 0c             	sub    $0xc,%esp
f01264ae:	68 00 1c 00 00       	push   $0x1c00
f01264b3:	e8 46 13 fe ff       	call   f01077fe <kmalloc>
f01264b8:	83 c4 10             	add    $0x10,%esp
f01264bb:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264c1:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01264c7:	89 c1                	mov    %eax,%ecx
f01264c9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01264d0:	10 00 00 
f01264d3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01264d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01264de:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01264e4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01264ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01264ef:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01264f5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01264fb:	29 d0                	sub    %edx,%eax
f01264fd:	89 c3                	mov    %eax,%ebx
f01264ff:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0126506:	10 00 00 
f0126509:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012650e:	0f b6 d0             	movzbl %al,%edx
f0126511:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0126517:	01 d0                	add    %edx,%eax
f0126519:	48                   	dec    %eax
f012651a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0126520:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126526:	ba 00 00 00 00       	mov    $0x0,%edx
f012652b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0126531:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126537:	29 d0                	sub    %edx,%eax
f0126539:	01 c3                	add    %eax,%ebx
f012653b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0126542:	10 00 00 
f0126545:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012654a:	0f b6 c0             	movzbl %al,%eax
f012654d:	c1 e0 04             	shl    $0x4,%eax
f0126550:	89 c2                	mov    %eax,%edx
f0126552:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126558:	01 d0                	add    %edx,%eax
f012655a:	48                   	dec    %eax
f012655b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0126561:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126567:	ba 00 00 00 00       	mov    $0x0,%edx
f012656c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0126572:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126578:	29 d0                	sub    %edx,%eax
f012657a:	01 d8                	add    %ebx,%eax
f012657c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126581:	39 c1                	cmp    %eax,%ecx
f0126583:	74 17                	je     f012659c <test_kfreeall+0x67a>
f0126585:	83 ec 04             	sub    $0x4,%esp
f0126588:	68 40 ad 13 f0       	push   $0xf013ad40
f012658d:	68 27 0a 00 00       	push   $0xa27
f0126592:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126597:	e8 5f 9c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012659c:	e8 9b d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01265a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265a4:	74 17                	je     f01265bd <test_kfreeall+0x69b>
f01265a6:	83 ec 04             	sub    $0x4,%esp
f01265a9:	68 74 ac 13 f0       	push   $0xf013ac74
f01265ae:	68 28 0a 00 00       	push   $0xa28
f01265b3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01265b8:	e8 3e 9c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01265bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01265c0:	e8 fa 62 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01265c5:	29 c3                	sub    %eax,%ebx
f01265c7:	89 d8                	mov    %ebx,%eax
f01265c9:	83 f8 02             	cmp    $0x2,%eax
f01265cc:	74 17                	je     f01265e5 <test_kfreeall+0x6c3>
f01265ce:	83 ec 04             	sub    $0x4,%esp
f01265d1:	68 dc ac 13 f0       	push   $0xf013acdc
f01265d6:	68 29 0a 00 00       	push   $0xa29
f01265db:	68 5a ac 13 f0       	push   $0xf013ac5a
f01265e0:	e8 16 9c fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01265e5:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f01265ec:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01265ef:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01265f5:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01265f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01265ff:	eb 0e                	jmp    f012660f <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0126601:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126604:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126607:	01 d0                	add    %edx,%eax
f0126609:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012660c:	ff 45 f4             	incl   -0xc(%ebp)
f012660f:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126615:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126618:	7f e7                	jg     f0126601 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012661a:	e8 a0 62 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012661f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126622:	e8 15 d7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126627:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012662a:	83 ec 0c             	sub    $0xc,%esp
f012662d:	68 00 fc 2f 00       	push   $0x2ffc00
f0126632:	e8 c7 11 fe ff       	call   f01077fe <kmalloc>
f0126637:	83 c4 10             	add    $0x10,%esp
f012663a:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126640:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126646:	89 c1                	mov    %eax,%ecx
f0126648:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012664f:	10 00 00 
f0126652:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126658:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012665d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0126663:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0126669:	ba 00 00 00 00       	mov    $0x0,%edx
f012666e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0126674:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012667a:	29 d0                	sub    %edx,%eax
f012667c:	89 c3                	mov    %eax,%ebx
f012667e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0126685:	10 00 00 
f0126688:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012668d:	0f b6 d0             	movzbl %al,%edx
f0126690:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126696:	01 d0                	add    %edx,%eax
f0126698:	48                   	dec    %eax
f0126699:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012669f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01266a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01266aa:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01266b0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01266b6:	29 d0                	sub    %edx,%eax
f01266b8:	01 c3                	add    %eax,%ebx
f01266ba:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01266c1:	10 00 00 
f01266c4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01266c9:	0f b6 c0             	movzbl %al,%eax
f01266cc:	c1 e0 04             	shl    $0x4,%eax
f01266cf:	89 c2                	mov    %eax,%edx
f01266d1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01266d7:	01 d0                	add    %edx,%eax
f01266d9:	48                   	dec    %eax
f01266da:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01266e0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01266e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01266eb:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01266f1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01266f7:	29 d0                	sub    %edx,%eax
f01266f9:	01 d8                	add    %ebx,%eax
f01266fb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126700:	39 c1                	cmp    %eax,%ecx
f0126702:	74 17                	je     f012671b <test_kfreeall+0x7f9>
f0126704:	83 ec 04             	sub    $0x4,%esp
f0126707:	68 40 ad 13 f0       	push   $0xf013ad40
f012670c:	68 35 0a 00 00       	push   $0xa35
f0126711:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126716:	e8 e0 9a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012671b:	e8 1c d6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126720:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126723:	74 17                	je     f012673c <test_kfreeall+0x81a>
f0126725:	83 ec 04             	sub    $0x4,%esp
f0126728:	68 74 ac 13 f0       	push   $0xf013ac74
f012672d:	68 36 0a 00 00       	push   $0xa36
f0126732:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126737:	e8 bf 9a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012673c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012673f:	e8 7b 61 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126744:	29 c3                	sub    %eax,%ebx
f0126746:	89 d8                	mov    %ebx,%eax
f0126748:	3d 00 03 00 00       	cmp    $0x300,%eax
f012674d:	74 17                	je     f0126766 <test_kfreeall+0x844>
f012674f:	83 ec 04             	sub    $0x4,%esp
f0126752:	68 dc ac 13 f0       	push   $0xf013acdc
f0126757:	68 37 0a 00 00       	push   $0xa37
f012675c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126761:	e8 95 9a fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126766:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012676d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126770:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126776:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126779:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126780:	eb 0e                	jmp    f0126790 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0126782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126785:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126788:	01 d0                	add    %edx,%eax
f012678a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012678d:	ff 45 f4             	incl   -0xc(%ebp)
f0126790:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126796:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126799:	7f e7                	jg     f0126782 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012679b:	e8 1f 61 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01267a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267a3:	e8 94 d5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01267a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01267ab:	83 ec 0c             	sub    $0xc,%esp
f01267ae:	68 00 fc 5f 00       	push   $0x5ffc00
f01267b3:	e8 46 10 fe ff       	call   f01077fe <kmalloc>
f01267b8:	83 c4 10             	add    $0x10,%esp
f01267bb:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01267c1:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01267c7:	89 c1                	mov    %eax,%ecx
f01267c9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01267d0:	10 00 00 
f01267d3:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01267d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267de:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01267e4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01267ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01267ef:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01267f5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01267fb:	29 d0                	sub    %edx,%eax
f01267fd:	89 c3                	mov    %eax,%ebx
f01267ff:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126806:	10 00 00 
f0126809:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012680e:	0f b6 d0             	movzbl %al,%edx
f0126811:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126817:	01 d0                	add    %edx,%eax
f0126819:	48                   	dec    %eax
f012681a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0126820:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126826:	ba 00 00 00 00       	mov    $0x0,%edx
f012682b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0126831:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126837:	29 d0                	sub    %edx,%eax
f0126839:	01 c3                	add    %eax,%ebx
f012683b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0126842:	10 00 00 
f0126845:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012684a:	0f b6 c0             	movzbl %al,%eax
f012684d:	c1 e0 04             	shl    $0x4,%eax
f0126850:	89 c2                	mov    %eax,%edx
f0126852:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0126858:	01 d0                	add    %edx,%eax
f012685a:	48                   	dec    %eax
f012685b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126861:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126867:	ba 00 00 00 00       	mov    $0x0,%edx
f012686c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126872:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126878:	29 d0                	sub    %edx,%eax
f012687a:	01 d8                	add    %ebx,%eax
f012687c:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126881:	39 c1                	cmp    %eax,%ecx
f0126883:	74 17                	je     f012689c <test_kfreeall+0x97a>
f0126885:	83 ec 04             	sub    $0x4,%esp
f0126888:	68 40 ad 13 f0       	push   $0xf013ad40
f012688d:	68 43 0a 00 00       	push   $0xa43
f0126892:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126897:	e8 5f 99 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012689c:	e8 9b d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01268a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01268a4:	74 17                	je     f01268bd <test_kfreeall+0x99b>
f01268a6:	83 ec 04             	sub    $0x4,%esp
f01268a9:	68 74 ac 13 f0       	push   $0xf013ac74
f01268ae:	68 44 0a 00 00       	push   $0xa44
f01268b3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01268b8:	e8 3e 99 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01268c0:	e8 fa 5f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01268c5:	29 c3                	sub    %eax,%ebx
f01268c7:	89 d8                	mov    %ebx,%eax
f01268c9:	3d 00 06 00 00       	cmp    $0x600,%eax
f01268ce:	74 17                	je     f01268e7 <test_kfreeall+0x9c5>
f01268d0:	83 ec 04             	sub    $0x4,%esp
f01268d3:	68 dc ac 13 f0       	push   $0xf013acdc
f01268d8:	68 45 0a 00 00       	push   $0xa45
f01268dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01268e2:	e8 14 99 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01268e7:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01268ee:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01268f1:	e8 c9 5f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01268f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268f9:	e8 3e d4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01268fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0126901:	83 ec 0c             	sub    $0xc,%esp
f0126904:	68 00 38 00 00       	push   $0x3800
f0126909:	e8 f0 0e fe ff       	call   f01077fe <kmalloc>
f012690e:	83 c4 10             	add    $0x10,%esp
f0126911:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126917:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012691d:	89 c1                	mov    %eax,%ecx
f012691f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126926:	10 00 00 
f0126929:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012692f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126934:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012693a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126940:	ba 00 00 00 00       	mov    $0x0,%edx
f0126945:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012694b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126951:	29 d0                	sub    %edx,%eax
f0126953:	89 c3                	mov    %eax,%ebx
f0126955:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012695c:	10 00 00 
f012695f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126964:	0f b6 d0             	movzbl %al,%edx
f0126967:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012696d:	01 d0                	add    %edx,%eax
f012696f:	48                   	dec    %eax
f0126970:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126976:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012697c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126981:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126987:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012698d:	29 d0                	sub    %edx,%eax
f012698f:	01 c3                	add    %eax,%ebx
f0126991:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126998:	10 00 00 
f012699b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01269a0:	0f b6 c0             	movzbl %al,%eax
f01269a3:	c1 e0 04             	shl    $0x4,%eax
f01269a6:	89 c2                	mov    %eax,%edx
f01269a8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01269ae:	01 d0                	add    %edx,%eax
f01269b0:	48                   	dec    %eax
f01269b1:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01269b7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01269bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01269c2:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01269c8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01269ce:	29 d0                	sub    %edx,%eax
f01269d0:	01 d8                	add    %ebx,%eax
f01269d2:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01269d7:	39 c1                	cmp    %eax,%ecx
f01269d9:	74 17                	je     f01269f2 <test_kfreeall+0xad0>
f01269db:	83 ec 04             	sub    $0x4,%esp
f01269de:	68 40 ad 13 f0       	push   $0xf013ad40
f01269e3:	68 4c 0a 00 00       	push   $0xa4c
f01269e8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01269ed:	e8 09 98 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269f2:	e8 45 d3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01269f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01269fa:	74 17                	je     f0126a13 <test_kfreeall+0xaf1>
f01269fc:	83 ec 04             	sub    $0x4,%esp
f01269ff:	68 74 ac 13 f0       	push   $0xf013ac74
f0126a04:	68 4d 0a 00 00       	push   $0xa4d
f0126a09:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126a0e:	e8 e8 97 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126a13:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126a16:	e8 a4 5e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126a1b:	29 c3                	sub    %eax,%ebx
f0126a1d:	89 d8                	mov    %ebx,%eax
f0126a1f:	83 f8 04             	cmp    $0x4,%eax
f0126a22:	74 17                	je     f0126a3b <test_kfreeall+0xb19>
f0126a24:	83 ec 04             	sub    $0x4,%esp
f0126a27:	68 dc ac 13 f0       	push   $0xf013acdc
f0126a2c:	68 4e 0a 00 00       	push   $0xa4e
f0126a31:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126a36:	e8 c0 97 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0126a3b:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0126a42:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0126a45:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126a4b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a55:	eb 0e                	jmp    f0126a65 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f0126a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a5a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a5d:	01 d0                	add    %edx,%eax
f0126a5f:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126a62:	ff 45 f4             	incl   -0xc(%ebp)
f0126a65:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126a6b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a6e:	7f e7                	jg     f0126a57 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0126a70:	e8 4a 5e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126a75:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126a7b:	e8 bc d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a80:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0126a86:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126a8c:	83 ec 0c             	sub    $0xc,%esp
f0126a8f:	50                   	push   %eax
f0126a90:	e8 2b 0e fe ff       	call   f01078c0 <kfree>
f0126a95:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126a98:	e8 9f d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126a9d:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126aa3:	74 17                	je     f0126abc <test_kfreeall+0xb9a>
f0126aa5:	83 ec 04             	sub    $0x4,%esp
f0126aa8:	68 74 ac 13 f0       	push   $0xf013ac74
f0126aad:	68 5d 0a 00 00       	push   $0xa5d
f0126ab2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126ab7:	e8 3f 97 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126abc:	e8 fe 5d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126ac1:	89 c2                	mov    %eax,%edx
f0126ac3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126ac9:	29 c2                	sub    %eax,%edx
f0126acb:	89 d0                	mov    %edx,%eax
f0126acd:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ad2:	74 17                	je     f0126aeb <test_kfreeall+0xbc9>
f0126ad4:	83 ec 04             	sub    $0x4,%esp
f0126ad7:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126adc:	68 5e 0a 00 00       	push   $0xa5e
f0126ae1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126ae6:	e8 10 97 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126aeb:	e8 cf 5d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126af0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126af6:	e8 41 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126afb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0126b01:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126b07:	83 ec 0c             	sub    $0xc,%esp
f0126b0a:	50                   	push   %eax
f0126b0b:	e8 b0 0d fe ff       	call   f01078c0 <kfree>
f0126b10:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b13:	e8 24 d2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b18:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126b1e:	74 17                	je     f0126b37 <test_kfreeall+0xc15>
f0126b20:	83 ec 04             	sub    $0x4,%esp
f0126b23:	68 74 ac 13 f0       	push   $0xf013ac74
f0126b28:	68 64 0a 00 00       	push   $0xa64
f0126b2d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126b32:	e8 c4 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126b37:	e8 83 5d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126b3c:	89 c2                	mov    %eax,%edx
f0126b3e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126b44:	29 c2                	sub    %eax,%edx
f0126b46:	89 d0                	mov    %edx,%eax
f0126b48:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126b4d:	74 17                	je     f0126b66 <test_kfreeall+0xc44>
f0126b4f:	83 ec 04             	sub    $0x4,%esp
f0126b52:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126b57:	68 65 0a 00 00       	push   $0xa65
f0126b5c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126b61:	e8 95 96 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b66:	e8 54 5d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126b6b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b71:	e8 c6 d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b76:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0126b7c:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126b82:	83 ec 0c             	sub    $0xc,%esp
f0126b85:	50                   	push   %eax
f0126b86:	e8 35 0d fe ff       	call   f01078c0 <kfree>
f0126b8b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b8e:	e8 a9 d1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126b93:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126b99:	74 17                	je     f0126bb2 <test_kfreeall+0xc90>
f0126b9b:	83 ec 04             	sub    $0x4,%esp
f0126b9e:	68 74 ac 13 f0       	push   $0xf013ac74
f0126ba3:	68 6b 0a 00 00       	push   $0xa6b
f0126ba8:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126bad:	e8 49 96 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0126bb2:	e8 08 5d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126bb7:	89 c2                	mov    %eax,%edx
f0126bb9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126bbf:	29 c2                	sub    %eax,%edx
f0126bc1:	89 d0                	mov    %edx,%eax
f0126bc3:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126bc8:	74 17                	je     f0126be1 <test_kfreeall+0xcbf>
f0126bca:	83 ec 04             	sub    $0x4,%esp
f0126bcd:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0126bd2:	68 6c 0a 00 00       	push   $0xa6c
f0126bd7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126bdc:	e8 1a 96 fd ff       	call   f01001fb <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126be1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126be7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126bea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126bf1:	eb 1e                	jmp    f0126c11 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0126bf3:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126bf9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126bfc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126bff:	01 c8                	add    %ecx,%eax
f0126c01:	8a 00                	mov    (%eax),%al
f0126c03:	0f be c0             	movsbl %al,%eax
f0126c06:	01 d0                	add    %edx,%eax
f0126c08:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126c0e:	ff 45 f4             	incl   -0xc(%ebp)
f0126c11:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126c17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c1a:	7f d7                	jg     f0126bf3 <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126c1c:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126c22:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126c28:	01 c0                	add    %eax,%eax
f0126c2a:	39 c2                	cmp    %eax,%edx
f0126c2c:	74 17                	je     f0126c45 <test_kfreeall+0xd23>
f0126c2e:	83 ec 04             	sub    $0x4,%esp
f0126c31:	68 40 b4 13 f0       	push   $0xf013b440
f0126c36:	68 78 0a 00 00       	push   $0xa78
f0126c3b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126c40:	e8 b6 95 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126c45:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0126c4b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126c4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c55:	eb 1e                	jmp    f0126c75 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0126c57:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126c5d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126c60:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c63:	01 c8                	add    %ecx,%eax
f0126c65:	8a 00                	mov    (%eax),%al
f0126c67:	0f be c0             	movsbl %al,%eax
f0126c6a:	01 d0                	add    %edx,%eax
f0126c6c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126c72:	ff 45 f4             	incl   -0xc(%ebp)
f0126c75:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126c7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126c7e:	7f d7                	jg     f0126c57 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0126c80:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0126c86:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126c8c:	89 c1                	mov    %eax,%ecx
f0126c8e:	01 c9                	add    %ecx,%ecx
f0126c90:	01 c8                	add    %ecx,%eax
f0126c92:	39 c2                	cmp    %eax,%edx
f0126c94:	74 17                	je     f0126cad <test_kfreeall+0xd8b>
f0126c96:	83 ec 04             	sub    $0x4,%esp
f0126c99:	68 40 b4 13 f0       	push   $0xf013b440
f0126c9e:	68 80 0a 00 00       	push   $0xa80
f0126ca3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126ca8:	e8 4e 95 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126cad:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126cb3:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126cb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cbd:	eb 1e                	jmp    f0126cdd <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0126cbf:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126cc5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126cc8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ccb:	01 c8                	add    %ecx,%eax
f0126ccd:	8a 00                	mov    (%eax),%al
f0126ccf:	0f be c0             	movsbl %al,%eax
f0126cd2:	01 d0                	add    %edx,%eax
f0126cd4:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126cda:	ff 45 f4             	incl   -0xc(%ebp)
f0126cdd:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126ce3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126ce6:	7f d7                	jg     f0126cbf <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126ce8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126cee:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126cf4:	c1 e2 02             	shl    $0x2,%edx
f0126cf7:	39 d0                	cmp    %edx,%eax
f0126cf9:	74 17                	je     f0126d12 <test_kfreeall+0xdf0>
f0126cfb:	83 ec 04             	sub    $0x4,%esp
f0126cfe:	68 40 b4 13 f0       	push   $0xf013b440
f0126d03:	68 88 0a 00 00       	push   $0xa88
f0126d08:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126d0d:	e8 e9 94 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126d12:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126d18:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126d1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d22:	eb 1e                	jmp    f0126d42 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126d24:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126d2a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126d2d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d30:	01 c8                	add    %ecx,%eax
f0126d32:	8a 00                	mov    (%eax),%al
f0126d34:	0f be c0             	movsbl %al,%eax
f0126d37:	01 d0                	add    %edx,%eax
f0126d39:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126d3f:	ff 45 f4             	incl   -0xc(%ebp)
f0126d42:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126d48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126d4b:	7f d7                	jg     f0126d24 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126d4d:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0126d53:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0126d59:	89 d0                	mov    %edx,%eax
f0126d5b:	c1 e0 02             	shl    $0x2,%eax
f0126d5e:	01 d0                	add    %edx,%eax
f0126d60:	39 c1                	cmp    %eax,%ecx
f0126d62:	74 17                	je     f0126d7b <test_kfreeall+0xe59>
f0126d64:	83 ec 04             	sub    $0x4,%esp
f0126d67:	68 40 b4 13 f0       	push   $0xf013b440
f0126d6c:	68 90 0a 00 00       	push   $0xa90
f0126d71:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126d76:	e8 80 94 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0126d7b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126d81:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0126d84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d8b:	eb 1e                	jmp    f0126dab <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0126d8d:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0126d93:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126d96:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126d99:	01 c8                	add    %ecx,%eax
f0126d9b:	8a 00                	mov    (%eax),%al
f0126d9d:	0f be c0             	movsbl %al,%eax
f0126da0:	01 d0                	add    %edx,%eax
f0126da2:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126da8:	ff 45 f4             	incl   -0xc(%ebp)
f0126dab:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126db1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126db4:	7f d7                	jg     f0126d8d <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126db6:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126dbc:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0126dc2:	89 d0                	mov    %edx,%eax
f0126dc4:	01 c0                	add    %eax,%eax
f0126dc6:	01 d0                	add    %edx,%eax
f0126dc8:	01 c0                	add    %eax,%eax
f0126dca:	01 d0                	add    %edx,%eax
f0126dcc:	39 c1                	cmp    %eax,%ecx
f0126dce:	74 17                	je     f0126de7 <test_kfreeall+0xec5>
f0126dd0:	83 ec 04             	sub    $0x4,%esp
f0126dd3:	68 40 b4 13 f0       	push   $0xf013b440
f0126dd8:	68 98 0a 00 00       	push   $0xa98
f0126ddd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126de2:	e8 14 94 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126de7:	e8 d3 5a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126dec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126def:	e8 48 cf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126df4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126df7:	83 ec 0c             	sub    $0xc,%esp
f0126dfa:	68 00 50 00 00       	push   $0x5000
f0126dff:	e8 fa 09 fe ff       	call   f01077fe <kmalloc>
f0126e04:	83 c4 10             	add    $0x10,%esp
f0126e07:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e0d:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126e13:	89 c1                	mov    %eax,%ecx
f0126e15:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126e1c:	10 00 00 
f0126e1f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126e25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e2a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126e30:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126e36:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e3b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126e41:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126e47:	29 d0                	sub    %edx,%eax
f0126e49:	89 c3                	mov    %eax,%ebx
f0126e4b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0126e52:	10 00 00 
f0126e55:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126e5a:	0f b6 d0             	movzbl %al,%edx
f0126e5d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126e63:	01 d0                	add    %edx,%eax
f0126e65:	48                   	dec    %eax
f0126e66:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0126e6c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e72:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e77:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126e7d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126e83:	29 d0                	sub    %edx,%eax
f0126e85:	01 c3                	add    %eax,%ebx
f0126e87:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126e8e:	10 00 00 
f0126e91:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126e96:	0f b6 c0             	movzbl %al,%eax
f0126e99:	c1 e0 04             	shl    $0x4,%eax
f0126e9c:	89 c2                	mov    %eax,%edx
f0126e9e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126ea4:	01 d0                	add    %edx,%eax
f0126ea6:	48                   	dec    %eax
f0126ea7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126ead:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126eb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0126eb8:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0126ebe:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126ec4:	29 d0                	sub    %edx,%eax
f0126ec6:	01 d8                	add    %ebx,%eax
f0126ec8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126ecd:	39 c1                	cmp    %eax,%ecx
f0126ecf:	74 17                	je     f0126ee8 <test_kfreeall+0xfc6>
f0126ed1:	83 ec 04             	sub    $0x4,%esp
f0126ed4:	68 40 ad 13 f0       	push   $0xf013ad40
f0126ed9:	68 a1 0a 00 00       	push   $0xaa1
f0126ede:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126ee3:	e8 13 93 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ee8:	e8 4f ce fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126eed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ef0:	74 17                	je     f0126f09 <test_kfreeall+0xfe7>
f0126ef2:	83 ec 04             	sub    $0x4,%esp
f0126ef5:	68 74 ac 13 f0       	push   $0xf013ac74
f0126efa:	68 a2 0a 00 00       	push   $0xaa2
f0126eff:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126f04:	e8 f2 92 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f09:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126f0c:	e8 ae 59 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126f11:	29 c3                	sub    %eax,%ebx
f0126f13:	89 d8                	mov    %ebx,%eax
f0126f15:	83 f8 05             	cmp    $0x5,%eax
f0126f18:	74 17                	je     f0126f31 <test_kfreeall+0x100f>
f0126f1a:	83 ec 04             	sub    $0x4,%esp
f0126f1d:	68 dc ac 13 f0       	push   $0xf013acdc
f0126f22:	68 a3 0a 00 00       	push   $0xaa3
f0126f27:	68 5a ac 13 f0       	push   $0xf013ac5a
f0126f2c:	e8 ca 92 fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0126f31:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0126f38:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126f3b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126f41:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126f44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f4b:	eb 0e                	jmp    f0126f5b <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0126f4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f50:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126f53:	01 d0                	add    %edx,%eax
f0126f55:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126f58:	ff 45 f4             	incl   -0xc(%ebp)
f0126f5b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126f61:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f64:	7f e7                	jg     f0126f4d <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126f66:	e8 54 59 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0126f6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f6e:	e8 c9 cd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0126f73:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0126f76:	83 ec 0c             	sub    $0xc,%esp
f0126f79:	68 00 00 10 00       	push   $0x100000
f0126f7e:	e8 7b 08 fe ff       	call   f01077fe <kmalloc>
f0126f83:	83 c4 10             	add    $0x10,%esp
f0126f86:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f8c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126f92:	89 c1                	mov    %eax,%ecx
f0126f94:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126f9b:	10 00 00 
f0126f9e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126fa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126fa9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126faf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fba:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126fc0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126fc6:	29 d0                	sub    %edx,%eax
f0126fc8:	89 c3                	mov    %eax,%ebx
f0126fca:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126fd1:	10 00 00 
f0126fd4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0126fd9:	0f b6 d0             	movzbl %al,%edx
f0126fdc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126fe2:	01 d0                	add    %edx,%eax
f0126fe4:	48                   	dec    %eax
f0126fe5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126feb:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126ff1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ff6:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126ffc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127002:	29 d0                	sub    %edx,%eax
f0127004:	01 c3                	add    %eax,%ebx
f0127006:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012700d:	10 00 00 
f0127010:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127015:	0f b6 c0             	movzbl %al,%eax
f0127018:	c1 e0 04             	shl    $0x4,%eax
f012701b:	89 c2                	mov    %eax,%edx
f012701d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127023:	01 d0                	add    %edx,%eax
f0127025:	48                   	dec    %eax
f0127026:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012702c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127032:	ba 00 00 00 00       	mov    $0x0,%edx
f0127037:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012703d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127043:	29 d0                	sub    %edx,%eax
f0127045:	01 d8                	add    %ebx,%eax
f0127047:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012704c:	39 c1                	cmp    %eax,%ecx
f012704e:	74 17                	je     f0127067 <test_kfreeall+0x1145>
f0127050:	83 ec 04             	sub    $0x4,%esp
f0127053:	68 40 ad 13 f0       	push   $0xf013ad40
f0127058:	68 af 0a 00 00       	push   $0xaaf
f012705d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127062:	e8 94 91 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127067:	e8 d0 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012706c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012706f:	74 17                	je     f0127088 <test_kfreeall+0x1166>
f0127071:	83 ec 04             	sub    $0x4,%esp
f0127074:	68 74 ac 13 f0       	push   $0xf013ac74
f0127079:	68 b0 0a 00 00       	push   $0xab0
f012707e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127083:	e8 73 91 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127088:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012708b:	e8 2f 58 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127090:	29 c3                	sub    %eax,%ebx
f0127092:	89 d8                	mov    %ebx,%eax
f0127094:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127099:	74 17                	je     f01270b2 <test_kfreeall+0x1190>
f012709b:	83 ec 04             	sub    $0x4,%esp
f012709e:	68 dc ac 13 f0       	push   $0xf013acdc
f01270a3:	68 b1 0a 00 00       	push   $0xab1
f01270a8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01270ad:	e8 49 91 fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01270b2:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f01270b9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01270bc:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01270c2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01270c5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01270cc:	eb 0e                	jmp    f01270dc <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f01270ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01270d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270d4:	01 d0                	add    %edx,%eax
f01270d6:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01270d9:	ff 45 f4             	incl   -0xc(%ebp)
f01270dc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01270e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01270e5:	7f e7                	jg     f01270ce <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01270e7:	e8 d3 57 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01270ec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270ef:	e8 48 cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01270f4:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01270f7:	e8 62 09 fe ff       	call   f0107a5e <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270fc:	e8 3b cc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127101:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127104:	74 17                	je     f012711d <test_kfreeall+0x11fb>
f0127106:	83 ec 04             	sub    $0x4,%esp
f0127109:	68 74 ac 13 f0       	push   $0xf013ac74
f012710e:	68 c1 0a 00 00       	push   $0xac1
f0127113:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127118:	e8 de 90 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012711d:	e8 9d 57 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127122:	89 c2                	mov    %eax,%edx
f0127124:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127127:	89 d1                	mov    %edx,%ecx
f0127129:	29 c1                	sub    %eax,%ecx
f012712b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127132:	10 00 00 
f0127135:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012713b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127140:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127146:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012714c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127151:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127157:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012715d:	29 d0                	sub    %edx,%eax
f012715f:	89 c3                	mov    %eax,%ebx
f0127161:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127168:	10 00 00 
f012716b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127170:	0f b6 d0             	movzbl %al,%edx
f0127173:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127179:	01 d0                	add    %edx,%eax
f012717b:	48                   	dec    %eax
f012717c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127182:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127188:	ba 00 00 00 00       	mov    $0x0,%edx
f012718d:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127193:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127199:	29 d0                	sub    %edx,%eax
f012719b:	01 c3                	add    %eax,%ebx
f012719d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01271a4:	10 00 00 
f01271a7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01271ac:	0f b6 c0             	movzbl %al,%eax
f01271af:	c1 e0 04             	shl    $0x4,%eax
f01271b2:	89 c2                	mov    %eax,%edx
f01271b4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01271ba:	01 d0                	add    %edx,%eax
f01271bc:	48                   	dec    %eax
f01271bd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01271c3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01271c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ce:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01271d4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01271da:	29 d0                	sub    %edx,%eax
f01271dc:	01 d8                	add    %ebx,%eax
f01271de:	05 00 40 00 00       	add    $0x4000,%eax
f01271e3:	c1 e8 0c             	shr    $0xc,%eax
f01271e6:	05 0d 04 00 00       	add    $0x40d,%eax
f01271eb:	39 c1                	cmp    %eax,%ecx
f01271ed:	74 17                	je     f0127206 <test_kfreeall+0x12e4>
f01271ef:	83 ec 04             	sub    $0x4,%esp
f01271f2:	68 e4 b3 13 f0       	push   $0xf013b3e4
f01271f7:	68 c2 0a 00 00       	push   $0xac2
f01271fc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127201:	e8 f5 8f fd ff       	call   f01001fb <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127206:	83 ec 0c             	sub    $0xc,%esp
f0127209:	6a 03                	push   $0x3
f012720b:	e8 4f 5b fe ff       	call   f010cd5f <sys_bypassPageFault>
f0127210:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0127213:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012721a:	e9 82 00 00 00       	jmp    f01272a1 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f012721f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127222:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0127229:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f012722c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012722f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0127232:	e8 16 5b fe ff       	call   f010cd4d <sys_rcr2>
f0127237:	89 c2                	mov    %eax,%edx
f0127239:	8b 45 80             	mov    -0x80(%ebp),%eax
f012723c:	39 c2                	cmp    %eax,%edx
f012723e:	74 17                	je     f0127257 <test_kfreeall+0x1335>
f0127240:	83 ec 04             	sub    $0x4,%esp
f0127243:	68 c0 b4 13 f0       	push   $0xf013b4c0
f0127248:	68 d0 0a 00 00       	push   $0xad0
f012724d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127252:	e8 a4 8f fd ff       	call   f01001fb <_panic>
			ptr[lastIndices[i]] = 10;
f0127257:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012725a:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0127261:	89 c2                	mov    %eax,%edx
f0127263:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127266:	01 d0                	add    %edx,%eax
f0127268:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012726b:	e8 dd 5a fe ff       	call   f010cd4d <sys_rcr2>
f0127270:	89 c2                	mov    %eax,%edx
f0127272:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127275:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012727c:	89 c1                	mov    %eax,%ecx
f012727e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127281:	01 c8                	add    %ecx,%eax
f0127283:	39 c2                	cmp    %eax,%edx
f0127285:	74 17                	je     f012729e <test_kfreeall+0x137c>
f0127287:	83 ec 04             	sub    $0x4,%esp
f012728a:	68 c0 b4 13 f0       	push   $0xf013b4c0
f012728f:	68 d2 0a 00 00       	push   $0xad2
f0127294:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127299:	e8 5d 8f fd ff       	call   f01001fb <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012729e:	ff 45 f4             	incl   -0xc(%ebp)
f01272a1:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01272a5:	0f 8e 74 ff ff ff    	jle    f012721f <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01272ab:	83 ec 0c             	sub    $0xc,%esp
f01272ae:	6a 00                	push   $0x0
f01272b0:	e8 aa 5a fe ff       	call   f010cd5f <sys_bypassPageFault>
f01272b5:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01272b8:	e8 02 56 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01272bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272c0:	e8 77 ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01272c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01272c8:	83 ec 0c             	sub    $0xc,%esp
f01272cb:	68 00 00 40 00       	push   $0x400000
f01272d0:	e8 29 05 fe ff       	call   f01077fe <kmalloc>
f01272d5:	83 c4 10             	add    $0x10,%esp
f01272d8:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01272de:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01272e4:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f01272e9:	74 17                	je     f0127302 <test_kfreeall+0x13e0>
f01272eb:	83 ec 04             	sub    $0x4,%esp
f01272ee:	68 64 b9 13 f0       	push   $0xf013b964
f01272f3:	68 de 0a 00 00       	push   $0xade
f01272f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01272fd:	e8 f9 8e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127302:	e8 35 ca fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127307:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012730a:	74 17                	je     f0127323 <test_kfreeall+0x1401>
f012730c:	83 ec 04             	sub    $0x4,%esp
f012730f:	68 74 ac 13 f0       	push   $0xf013ac74
f0127314:	68 df 0a 00 00       	push   $0xadf
f0127319:	68 5a ac 13 f0       	push   $0xf013ac5a
f012731e:	e8 d8 8e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127323:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127326:	e8 94 55 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012732b:	29 c3                	sub    %eax,%ebx
f012732d:	89 d8                	mov    %ebx,%eax
f012732f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127334:	74 17                	je     f012734d <test_kfreeall+0x142b>
f0127336:	83 ec 04             	sub    $0x4,%esp
f0127339:	68 dc ac 13 f0       	push   $0xf013acdc
f012733e:	68 e0 0a 00 00       	push   $0xae0
f0127343:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127348:	e8 ae 8e fd ff       	call   f01001fb <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f012734d:	e8 6d 55 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127352:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127355:	e8 e2 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012735a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f012735d:	83 ec 0c             	sub    $0xc,%esp
f0127360:	68 00 30 00 00       	push   $0x3000
f0127365:	e8 94 04 fe ff       	call   f01077fe <kmalloc>
f012736a:	83 c4 10             	add    $0x10,%esp
f012736d:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0127373:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0127379:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f012737e:	74 17                	je     f0127397 <test_kfreeall+0x1475>
f0127380:	83 ec 04             	sub    $0x4,%esp
f0127383:	68 64 b9 13 f0       	push   $0xf013b964
f0127388:	68 e6 0a 00 00       	push   $0xae6
f012738d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127392:	e8 64 8e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127397:	e8 a0 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012739c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012739f:	74 17                	je     f01273b8 <test_kfreeall+0x1496>
f01273a1:	83 ec 04             	sub    $0x4,%esp
f01273a4:	68 74 ac 13 f0       	push   $0xf013ac74
f01273a9:	68 e7 0a 00 00       	push   $0xae7
f01273ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f01273b3:	e8 43 8e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273bb:	e8 ff 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01273c0:	29 c3                	sub    %eax,%ebx
f01273c2:	89 d8                	mov    %ebx,%eax
f01273c4:	83 f8 03             	cmp    $0x3,%eax
f01273c7:	74 17                	je     f01273e0 <test_kfreeall+0x14be>
f01273c9:	83 ec 04             	sub    $0x4,%esp
f01273cc:	68 dc ac 13 f0       	push   $0xf013acdc
f01273d1:	68 e8 0a 00 00       	push   $0xae8
f01273d6:	68 5a ac 13 f0       	push   $0xf013ac5a
f01273db:	e8 1b 8e fd ff       	call   f01001fb <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01273e0:	e8 da 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01273e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273e8:	e8 4f c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01273ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f01273f0:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01273f6:	83 ec 0c             	sub    $0xc,%esp
f01273f9:	50                   	push   %eax
f01273fa:	e8 c1 04 fe ff       	call   f01078c0 <kfree>
f01273ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127402:	e8 35 c9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127407:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012740a:	74 17                	je     f0127423 <test_kfreeall+0x1501>
f012740c:	83 ec 04             	sub    $0x4,%esp
f012740f:	68 74 ac 13 f0       	push   $0xf013ac74
f0127414:	68 f2 0a 00 00       	push   $0xaf2
f0127419:	68 5a ac 13 f0       	push   $0xf013ac5a
f012741e:	e8 d8 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127423:	e8 97 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127428:	89 c2                	mov    %eax,%edx
f012742a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012742d:	29 c2                	sub    %eax,%edx
f012742f:	89 d0                	mov    %edx,%eax
f0127431:	83 f8 03             	cmp    $0x3,%eax
f0127434:	74 17                	je     f012744d <test_kfreeall+0x152b>
f0127436:	83 ec 04             	sub    $0x4,%esp
f0127439:	68 0c b5 13 f0       	push   $0xf013b50c
f012743e:	68 f3 0a 00 00       	push   $0xaf3
f0127443:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127448:	e8 ae 8d fd ff       	call   f01001fb <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012744d:	e8 6d 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127452:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127455:	e8 e2 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012745a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012745d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127463:	83 ec 0c             	sub    $0xc,%esp
f0127466:	50                   	push   %eax
f0127467:	e8 54 04 fe ff       	call   f01078c0 <kfree>
f012746c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012746f:	e8 c8 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127474:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127477:	74 17                	je     f0127490 <test_kfreeall+0x156e>
f0127479:	83 ec 04             	sub    $0x4,%esp
f012747c:	68 74 ac 13 f0       	push   $0xf013ac74
f0127481:	68 fc 0a 00 00       	push   $0xafc
f0127486:	68 5a ac 13 f0       	push   $0xf013ac5a
f012748b:	e8 6b 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127490:	e8 2a 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127495:	89 c2                	mov    %eax,%edx
f0127497:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012749a:	39 c2                	cmp    %eax,%edx
f012749c:	74 17                	je     f01274b5 <test_kfreeall+0x1593>
f012749e:	83 ec 04             	sub    $0x4,%esp
f01274a1:	68 0c b5 13 f0       	push   $0xf013b50c
f01274a6:	68 fd 0a 00 00       	push   $0xafd
f01274ab:	68 5a ac 13 f0       	push   $0xf013ac5a
f01274b0:	e8 46 8d fd ff       	call   f01001fb <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01274b5:	e8 05 54 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01274ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274bd:	e8 7a c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01274c5:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01274cb:	83 ec 0c             	sub    $0xc,%esp
f01274ce:	50                   	push   %eax
f01274cf:	e8 ec 03 fe ff       	call   f01078c0 <kfree>
f01274d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01274d7:	e8 60 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01274dc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01274df:	74 17                	je     f01274f8 <test_kfreeall+0x15d6>
f01274e1:	83 ec 04             	sub    $0x4,%esp
f01274e4:	68 74 ac 13 f0       	push   $0xf013ac74
f01274e9:	68 03 0b 00 00       	push   $0xb03
f01274ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f01274f3:	e8 03 8d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01274f8:	e8 c2 53 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01274fd:	89 c2                	mov    %eax,%edx
f01274ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127502:	39 c2                	cmp    %eax,%edx
f0127504:	74 17                	je     f012751d <test_kfreeall+0x15fb>
f0127506:	83 ec 04             	sub    $0x4,%esp
f0127509:	68 0c b5 13 f0       	push   $0xf013b50c
f012750e:	68 04 0b 00 00       	push   $0xb04
f0127513:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127518:	e8 de 8c fd ff       	call   f01001fb <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012751d:	e8 9d 53 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127522:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127525:	e8 12 c8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012752a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012752d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127533:	83 ec 0c             	sub    $0xc,%esp
f0127536:	50                   	push   %eax
f0127537:	e8 84 03 fe ff       	call   f01078c0 <kfree>
f012753c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012753f:	e8 f8 c7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127544:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127547:	74 17                	je     f0127560 <test_kfreeall+0x163e>
f0127549:	83 ec 04             	sub    $0x4,%esp
f012754c:	68 74 ac 13 f0       	push   $0xf013ac74
f0127551:	68 0a 0b 00 00       	push   $0xb0a
f0127556:	68 5a ac 13 f0       	push   $0xf013ac5a
f012755b:	e8 9b 8c fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127560:	e8 5a 53 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127565:	89 c2                	mov    %eax,%edx
f0127567:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012756a:	39 c2                	cmp    %eax,%edx
f012756c:	74 17                	je     f0127585 <test_kfreeall+0x1663>
f012756e:	83 ec 04             	sub    $0x4,%esp
f0127571:	68 0c b5 13 f0       	push   $0xf013b50c
f0127576:	68 0b 0b 00 00       	push   $0xb0b
f012757b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127580:	e8 76 8c fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0127585:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012758c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0127593:	eb 48                	jmp    f01275dd <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127595:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127598:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012759d:	83 ec 04             	sub    $0x4,%esp
f01275a0:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01275a6:	51                   	push   %ecx
f01275a7:	52                   	push   %edx
f01275a8:	50                   	push   %eax
f01275a9:	e8 2c f4 fd ff       	call   f01069da <get_page_table>
f01275ae:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01275b1:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01275b7:	85 c0                	test   %eax,%eax
f01275b9:	75 17                	jne    f01275d2 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01275bb:	83 ec 04             	sub    $0x4,%esp
f01275be:	68 5c b5 13 f0       	push   $0xf013b55c
f01275c3:	68 18 0b 00 00       	push   $0xb18
f01275c8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01275cd:	e8 29 8c fd ff       	call   f01001fb <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01275d2:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01275d9:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01275dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01275e1:	78 b2                	js     f0127595 <test_kfreeall+0x1673>
f01275e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01275e7:	7f 09                	jg     f01275f2 <test_kfreeall+0x16d0>
f01275e9:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01275f0:	76 a3                	jbe    f0127595 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01275f2:	83 ec 0c             	sub    $0xc,%esp
f01275f5:	68 b8 b9 13 f0       	push   $0xf013b9b8
f01275fa:	e8 83 96 fd ff       	call   f0100c82 <cprintf>
f01275ff:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127602:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127607:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012760a:	5b                   	pop    %ebx
f012760b:	5f                   	pop    %edi
f012760c:	5d                   	pop    %ebp
f012760d:	c3                   	ret    

f012760e <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f012760e:	55                   	push   %ebp
f012760f:	89 e5                	mov    %esp,%ebp
f0127611:	57                   	push   %edi
f0127612:	53                   	push   %ebx
f0127613:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127619:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012761d:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127621:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127627:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012762d:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127634:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012763b:	e8 7f 52 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127640:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127643:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0127649:	b9 14 00 00 00       	mov    $0x14,%ecx
f012764e:	b8 00 00 00 00       	mov    $0x0,%eax
f0127653:	89 d7                	mov    %edx,%edi
f0127655:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127657:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f012765d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127662:	b8 00 00 00 00       	mov    $0x0,%eax
f0127667:	89 d7                	mov    %edx,%edi
f0127669:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012766b:	e8 4f 52 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127670:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127673:	e8 c4 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127678:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012767b:	83 ec 0c             	sub    $0xc,%esp
f012767e:	68 00 fc 1f 00       	push   $0x1ffc00
f0127683:	e8 76 01 fe ff       	call   f01077fe <kmalloc>
f0127688:	83 c4 10             	add    $0x10,%esp
f012768b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127691:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127697:	89 c1                	mov    %eax,%ecx
f0127699:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01276a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01276a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01276a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01276ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01276ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01276b3:	f7 75 d4             	divl   -0x2c(%ebp)
f01276b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01276b9:	29 d0                	sub    %edx,%eax
f01276bb:	89 c3                	mov    %eax,%ebx
f01276bd:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01276c4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01276c9:	0f b6 d0             	movzbl %al,%edx
f01276cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01276cf:	01 d0                	add    %edx,%eax
f01276d1:	48                   	dec    %eax
f01276d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01276d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01276d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01276dd:	f7 75 cc             	divl   -0x34(%ebp)
f01276e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01276e3:	29 d0                	sub    %edx,%eax
f01276e5:	01 c3                	add    %eax,%ebx
f01276e7:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01276ee:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01276f3:	0f b6 c0             	movzbl %al,%eax
f01276f6:	c1 e0 04             	shl    $0x4,%eax
f01276f9:	89 c2                	mov    %eax,%edx
f01276fb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01276fe:	01 d0                	add    %edx,%eax
f0127700:	48                   	dec    %eax
f0127701:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127704:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127707:	ba 00 00 00 00       	mov    $0x0,%edx
f012770c:	f7 75 c4             	divl   -0x3c(%ebp)
f012770f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127712:	29 d0                	sub    %edx,%eax
f0127714:	01 d8                	add    %ebx,%eax
f0127716:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012771b:	39 c1                	cmp    %eax,%ecx
f012771d:	74 17                	je     f0127736 <test_kexpand+0x128>
f012771f:	83 ec 04             	sub    $0x4,%esp
f0127722:	68 40 ad 13 f0       	push   $0xf013ad40
f0127727:	68 43 0b 00 00       	push   $0xb43
f012772c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127731:	e8 c5 8a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127736:	e8 01 c6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012773b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012773e:	74 17                	je     f0127757 <test_kexpand+0x149>
f0127740:	83 ec 04             	sub    $0x4,%esp
f0127743:	68 74 ac 13 f0       	push   $0xf013ac74
f0127748:	68 44 0b 00 00       	push   $0xb44
f012774d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127752:	e8 a4 8a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127757:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012775a:	e8 60 51 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012775f:	29 c3                	sub    %eax,%ebx
f0127761:	89 d8                	mov    %ebx,%eax
f0127763:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127768:	74 17                	je     f0127781 <test_kexpand+0x173>
f012776a:	83 ec 04             	sub    $0x4,%esp
f012776d:	68 dc ac 13 f0       	push   $0xf013acdc
f0127772:	68 45 0b 00 00       	push   $0xb45
f0127777:	68 5a ac 13 f0       	push   $0xf013ac5a
f012777c:	e8 7a 8a fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127781:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0127788:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012778b:	e8 2f 51 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127790:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127793:	e8 a4 c5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127798:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012779b:	83 ec 0c             	sub    $0xc,%esp
f012779e:	68 00 fc 1f 00       	push   $0x1ffc00
f01277a3:	e8 56 00 fe ff       	call   f01077fe <kmalloc>
f01277a8:	83 c4 10             	add    $0x10,%esp
f01277ab:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277b1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01277b7:	89 c1                	mov    %eax,%ecx
f01277b9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01277c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01277c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277c8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01277cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01277ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01277d3:	f7 75 bc             	divl   -0x44(%ebp)
f01277d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01277d9:	29 d0                	sub    %edx,%eax
f01277db:	89 c3                	mov    %eax,%ebx
f01277dd:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01277e4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01277e9:	0f b6 d0             	movzbl %al,%edx
f01277ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01277ef:	01 d0                	add    %edx,%eax
f01277f1:	48                   	dec    %eax
f01277f2:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01277f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01277f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01277fd:	f7 75 b4             	divl   -0x4c(%ebp)
f0127800:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127803:	29 d0                	sub    %edx,%eax
f0127805:	01 c3                	add    %eax,%ebx
f0127807:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012780e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127813:	0f b6 c0             	movzbl %al,%eax
f0127816:	c1 e0 04             	shl    $0x4,%eax
f0127819:	89 c2                	mov    %eax,%edx
f012781b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012781e:	01 d0                	add    %edx,%eax
f0127820:	48                   	dec    %eax
f0127821:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127824:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127827:	ba 00 00 00 00       	mov    $0x0,%edx
f012782c:	f7 75 ac             	divl   -0x54(%ebp)
f012782f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127832:	29 d0                	sub    %edx,%eax
f0127834:	01 d8                	add    %ebx,%eax
f0127836:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012783b:	39 c1                	cmp    %eax,%ecx
f012783d:	74 17                	je     f0127856 <test_kexpand+0x248>
f012783f:	83 ec 04             	sub    $0x4,%esp
f0127842:	68 40 ad 13 f0       	push   $0xf013ad40
f0127847:	68 4c 0b 00 00       	push   $0xb4c
f012784c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127851:	e8 a5 89 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127856:	e8 e1 c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012785b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012785e:	74 17                	je     f0127877 <test_kexpand+0x269>
f0127860:	83 ec 04             	sub    $0x4,%esp
f0127863:	68 74 ac 13 f0       	push   $0xf013ac74
f0127868:	68 4d 0b 00 00       	push   $0xb4d
f012786d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127872:	e8 84 89 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127877:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012787a:	e8 40 50 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012787f:	29 c3                	sub    %eax,%ebx
f0127881:	89 d8                	mov    %ebx,%eax
f0127883:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127888:	74 17                	je     f01278a1 <test_kexpand+0x293>
f012788a:	83 ec 04             	sub    $0x4,%esp
f012788d:	68 dc ac 13 f0       	push   $0xf013acdc
f0127892:	68 4e 0b 00 00       	push   $0xb4e
f0127897:	68 5a ac 13 f0       	push   $0xf013ac5a
f012789c:	e8 5a 89 fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01278a1:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01278a8:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01278ab:	e8 0f 50 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01278b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278b3:	e8 84 c4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01278b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01278bb:	83 ec 0c             	sub    $0xc,%esp
f01278be:	68 00 08 00 00       	push   $0x800
f01278c3:	e8 36 ff fd ff       	call   f01077fe <kmalloc>
f01278c8:	83 c4 10             	add    $0x10,%esp
f01278cb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278d1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01278d7:	89 c1                	mov    %eax,%ecx
f01278d9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01278e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01278e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01278e8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01278eb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01278ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01278f3:	f7 75 a4             	divl   -0x5c(%ebp)
f01278f6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01278f9:	29 d0                	sub    %edx,%eax
f01278fb:	89 c3                	mov    %eax,%ebx
f01278fd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127904:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127909:	0f b6 d0             	movzbl %al,%edx
f012790c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012790f:	01 d0                	add    %edx,%eax
f0127911:	48                   	dec    %eax
f0127912:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127915:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127918:	ba 00 00 00 00       	mov    $0x0,%edx
f012791d:	f7 75 9c             	divl   -0x64(%ebp)
f0127920:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127923:	29 d0                	sub    %edx,%eax
f0127925:	01 c3                	add    %eax,%ebx
f0127927:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012792e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127933:	0f b6 c0             	movzbl %al,%eax
f0127936:	c1 e0 04             	shl    $0x4,%eax
f0127939:	89 c2                	mov    %eax,%edx
f012793b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012793e:	01 d0                	add    %edx,%eax
f0127940:	48                   	dec    %eax
f0127941:	89 45 90             	mov    %eax,-0x70(%ebp)
f0127944:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127947:	ba 00 00 00 00       	mov    $0x0,%edx
f012794c:	f7 75 94             	divl   -0x6c(%ebp)
f012794f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127952:	29 d0                	sub    %edx,%eax
f0127954:	01 d8                	add    %ebx,%eax
f0127956:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012795b:	39 c1                	cmp    %eax,%ecx
f012795d:	74 17                	je     f0127976 <test_kexpand+0x368>
f012795f:	83 ec 04             	sub    $0x4,%esp
f0127962:	68 40 ad 13 f0       	push   $0xf013ad40
f0127967:	68 55 0b 00 00       	push   $0xb55
f012796c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127971:	e8 85 88 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127976:	e8 c1 c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012797b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012797e:	74 17                	je     f0127997 <test_kexpand+0x389>
f0127980:	83 ec 04             	sub    $0x4,%esp
f0127983:	68 74 ac 13 f0       	push   $0xf013ac74
f0127988:	68 56 0b 00 00       	push   $0xb56
f012798d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127992:	e8 64 88 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127997:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012799a:	e8 20 4f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012799f:	29 c3                	sub    %eax,%ebx
f01279a1:	89 d8                	mov    %ebx,%eax
f01279a3:	83 f8 01             	cmp    $0x1,%eax
f01279a6:	74 17                	je     f01279bf <test_kexpand+0x3b1>
f01279a8:	83 ec 04             	sub    $0x4,%esp
f01279ab:	68 dc ac 13 f0       	push   $0xf013acdc
f01279b0:	68 57 0b 00 00       	push   $0xb57
f01279b5:	68 5a ac 13 f0       	push   $0xf013ac5a
f01279ba:	e8 3c 88 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01279bf:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01279c6:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01279c9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01279cf:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01279d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279d9:	eb 0e                	jmp    f01279e9 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01279db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01279de:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01279e1:	01 d0                	add    %edx,%eax
f01279e3:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01279e6:	ff 45 f4             	incl   -0xc(%ebp)
f01279e9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01279ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279f2:	7f e7                	jg     f01279db <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01279f4:	e8 c6 4e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01279f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279fc:	e8 3b c3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127a01:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127a04:	83 ec 0c             	sub    $0xc,%esp
f0127a07:	68 00 08 00 00       	push   $0x800
f0127a0c:	e8 ed fd fd ff       	call   f01077fe <kmalloc>
f0127a11:	83 c4 10             	add    $0x10,%esp
f0127a14:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a1a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127a20:	89 c1                	mov    %eax,%ecx
f0127a22:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127a29:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127a2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127a31:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127a34:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a3c:	f7 75 88             	divl   -0x78(%ebp)
f0127a3f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127a42:	29 d0                	sub    %edx,%eax
f0127a44:	89 c3                	mov    %eax,%ebx
f0127a46:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127a4d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127a52:	0f b6 d0             	movzbl %al,%edx
f0127a55:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a58:	01 d0                	add    %edx,%eax
f0127a5a:	48                   	dec    %eax
f0127a5b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127a61:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127a67:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a6c:	f7 75 80             	divl   -0x80(%ebp)
f0127a6f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127a75:	29 d0                	sub    %edx,%eax
f0127a77:	01 c3                	add    %eax,%ebx
f0127a79:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127a80:	10 00 00 
f0127a83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127a88:	0f b6 c0             	movzbl %al,%eax
f0127a8b:	c1 e0 04             	shl    $0x4,%eax
f0127a8e:	89 c2                	mov    %eax,%edx
f0127a90:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127a96:	01 d0                	add    %edx,%eax
f0127a98:	48                   	dec    %eax
f0127a99:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127a9f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127aa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127aaa:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127ab0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127ab6:	29 d0                	sub    %edx,%eax
f0127ab8:	01 d8                	add    %ebx,%eax
f0127aba:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127abf:	39 c1                	cmp    %eax,%ecx
f0127ac1:	74 17                	je     f0127ada <test_kexpand+0x4cc>
f0127ac3:	83 ec 04             	sub    $0x4,%esp
f0127ac6:	68 40 ad 13 f0       	push   $0xf013ad40
f0127acb:	68 63 0b 00 00       	push   $0xb63
f0127ad0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127ad5:	e8 21 87 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ada:	e8 5d c2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127adf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ae2:	74 17                	je     f0127afb <test_kexpand+0x4ed>
f0127ae4:	83 ec 04             	sub    $0x4,%esp
f0127ae7:	68 74 ac 13 f0       	push   $0xf013ac74
f0127aec:	68 64 0b 00 00       	push   $0xb64
f0127af1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127af6:	e8 00 87 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127afb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127afe:	e8 bc 4d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127b03:	29 c3                	sub    %eax,%ebx
f0127b05:	89 d8                	mov    %ebx,%eax
f0127b07:	83 f8 01             	cmp    $0x1,%eax
f0127b0a:	74 17                	je     f0127b23 <test_kexpand+0x515>
f0127b0c:	83 ec 04             	sub    $0x4,%esp
f0127b0f:	68 dc ac 13 f0       	push   $0xf013acdc
f0127b14:	68 65 0b 00 00       	push   $0xb65
f0127b19:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127b1e:	e8 d8 86 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127b23:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127b2a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127b2d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127b33:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127b36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b3d:	eb 0e                	jmp    f0127b4d <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0127b3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b45:	01 d0                	add    %edx,%eax
f0127b47:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127b4a:	ff 45 f4             	incl   -0xc(%ebp)
f0127b4d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127b53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b56:	7f e7                	jg     f0127b3f <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b58:	e8 62 4d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127b5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b60:	e8 d7 c1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127b65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127b68:	83 ec 0c             	sub    $0xc,%esp
f0127b6b:	68 00 1c 00 00       	push   $0x1c00
f0127b70:	e8 89 fc fd ff       	call   f01077fe <kmalloc>
f0127b75:	83 c4 10             	add    $0x10,%esp
f0127b78:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b7e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b84:	89 c1                	mov    %eax,%ecx
f0127b86:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127b8d:	10 00 00 
f0127b90:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127b96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127b9b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127ba1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127ba7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bac:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127bb2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127bb8:	29 d0                	sub    %edx,%eax
f0127bba:	89 c3                	mov    %eax,%ebx
f0127bbc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127bc3:	10 00 00 
f0127bc6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127bcb:	0f b6 d0             	movzbl %al,%edx
f0127bce:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127bd4:	01 d0                	add    %edx,%eax
f0127bd6:	48                   	dec    %eax
f0127bd7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127bdd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127be3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127be8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127bee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127bf4:	29 d0                	sub    %edx,%eax
f0127bf6:	01 c3                	add    %eax,%ebx
f0127bf8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0127bff:	10 00 00 
f0127c02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127c07:	0f b6 c0             	movzbl %al,%eax
f0127c0a:	c1 e0 04             	shl    $0x4,%eax
f0127c0d:	89 c2                	mov    %eax,%edx
f0127c0f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127c15:	01 d0                	add    %edx,%eax
f0127c17:	48                   	dec    %eax
f0127c18:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0127c1e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c29:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0127c2f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127c35:	29 d0                	sub    %edx,%eax
f0127c37:	01 d8                	add    %ebx,%eax
f0127c39:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127c3e:	39 c1                	cmp    %eax,%ecx
f0127c40:	74 17                	je     f0127c59 <test_kexpand+0x64b>
f0127c42:	83 ec 04             	sub    $0x4,%esp
f0127c45:	68 40 ad 13 f0       	push   $0xf013ad40
f0127c4a:	68 71 0b 00 00       	push   $0xb71
f0127c4f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127c54:	e8 a2 85 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c59:	e8 de c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127c5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c61:	74 17                	je     f0127c7a <test_kexpand+0x66c>
f0127c63:	83 ec 04             	sub    $0x4,%esp
f0127c66:	68 74 ac 13 f0       	push   $0xf013ac74
f0127c6b:	68 72 0b 00 00       	push   $0xb72
f0127c70:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127c75:	e8 81 85 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c7a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c7d:	e8 3d 4c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127c82:	29 c3                	sub    %eax,%ebx
f0127c84:	89 d8                	mov    %ebx,%eax
f0127c86:	83 f8 02             	cmp    $0x2,%eax
f0127c89:	74 17                	je     f0127ca2 <test_kexpand+0x694>
f0127c8b:	83 ec 04             	sub    $0x4,%esp
f0127c8e:	68 dc ac 13 f0       	push   $0xf013acdc
f0127c93:	68 73 0b 00 00       	push   $0xb73
f0127c98:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127c9d:	e8 59 85 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127ca2:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127ca9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127cac:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127cb2:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127cb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127cbc:	eb 0e                	jmp    f0127ccc <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0127cbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127cc1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127cc4:	01 d0                	add    %edx,%eax
f0127cc6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127cc9:	ff 45 f4             	incl   -0xc(%ebp)
f0127ccc:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127cd2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127cd5:	7f e7                	jg     f0127cbe <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127cd7:	e8 e3 4b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127cdc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cdf:	e8 58 c0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127ce4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127ce7:	83 ec 0c             	sub    $0xc,%esp
f0127cea:	68 00 fc 2f 00       	push   $0x2ffc00
f0127cef:	e8 0a fb fd ff       	call   f01077fe <kmalloc>
f0127cf4:	83 c4 10             	add    $0x10,%esp
f0127cf7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127cfd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127d03:	89 c1                	mov    %eax,%ecx
f0127d05:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127d0c:	10 00 00 
f0127d0f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127d15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127d1a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127d20:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d26:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d2b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127d31:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127d37:	29 d0                	sub    %edx,%eax
f0127d39:	89 c3                	mov    %eax,%ebx
f0127d3b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127d42:	10 00 00 
f0127d45:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d4a:	0f b6 d0             	movzbl %al,%edx
f0127d4d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127d53:	01 d0                	add    %edx,%eax
f0127d55:	48                   	dec    %eax
f0127d56:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127d5c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d62:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d67:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127d6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127d73:	29 d0                	sub    %edx,%eax
f0127d75:	01 c3                	add    %eax,%ebx
f0127d77:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127d7e:	10 00 00 
f0127d81:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127d86:	0f b6 c0             	movzbl %al,%eax
f0127d89:	c1 e0 04             	shl    $0x4,%eax
f0127d8c:	89 c2                	mov    %eax,%edx
f0127d8e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127d94:	01 d0                	add    %edx,%eax
f0127d96:	48                   	dec    %eax
f0127d97:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127d9d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127da8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127dae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127db4:	29 d0                	sub    %edx,%eax
f0127db6:	01 d8                	add    %ebx,%eax
f0127db8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127dbd:	39 c1                	cmp    %eax,%ecx
f0127dbf:	74 17                	je     f0127dd8 <test_kexpand+0x7ca>
f0127dc1:	83 ec 04             	sub    $0x4,%esp
f0127dc4:	68 40 ad 13 f0       	push   $0xf013ad40
f0127dc9:	68 7f 0b 00 00       	push   $0xb7f
f0127dce:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127dd3:	e8 23 84 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127dd8:	e8 5f bf fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127ddd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127de0:	74 17                	je     f0127df9 <test_kexpand+0x7eb>
f0127de2:	83 ec 04             	sub    $0x4,%esp
f0127de5:	68 74 ac 13 f0       	push   $0xf013ac74
f0127dea:	68 80 0b 00 00       	push   $0xb80
f0127def:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127df4:	e8 02 84 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127df9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127dfc:	e8 be 4a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127e01:	29 c3                	sub    %eax,%ebx
f0127e03:	89 d8                	mov    %ebx,%eax
f0127e05:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127e0a:	74 17                	je     f0127e23 <test_kexpand+0x815>
f0127e0c:	83 ec 04             	sub    $0x4,%esp
f0127e0f:	68 dc ac 13 f0       	push   $0xf013acdc
f0127e14:	68 81 0b 00 00       	push   $0xb81
f0127e19:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127e1e:	e8 d8 83 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127e23:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127e2a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127e2d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0127e33:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127e3d:	eb 0e                	jmp    f0127e4d <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0127e3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127e42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127e45:	01 d0                	add    %edx,%eax
f0127e47:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127e4a:	ff 45 f4             	incl   -0xc(%ebp)
f0127e4d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127e56:	7f e7                	jg     f0127e3f <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e58:	e8 62 4a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127e5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e60:	e8 d7 be fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127e65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127e68:	83 ec 0c             	sub    $0xc,%esp
f0127e6b:	68 00 00 60 00       	push   $0x600000
f0127e70:	e8 89 f9 fd ff       	call   f01077fe <kmalloc>
f0127e75:	83 c4 10             	add    $0x10,%esp
f0127e78:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e7e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127e84:	89 c1                	mov    %eax,%ecx
f0127e86:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127e8d:	10 00 00 
f0127e90:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127e96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e9b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127ea1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127ea7:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eac:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127eb2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127eb8:	29 d0                	sub    %edx,%eax
f0127eba:	89 c3                	mov    %eax,%ebx
f0127ebc:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0127ec3:	10 00 00 
f0127ec6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127ecb:	0f b6 d0             	movzbl %al,%edx
f0127ece:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127ed4:	01 d0                	add    %edx,%eax
f0127ed6:	48                   	dec    %eax
f0127ed7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127edd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127ee3:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ee8:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0127eee:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127ef4:	29 d0                	sub    %edx,%eax
f0127ef6:	01 c3                	add    %eax,%ebx
f0127ef8:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0127eff:	10 00 00 
f0127f02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0127f07:	0f b6 c0             	movzbl %al,%eax
f0127f0a:	c1 e0 04             	shl    $0x4,%eax
f0127f0d:	89 c2                	mov    %eax,%edx
f0127f0f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127f15:	01 d0                	add    %edx,%eax
f0127f17:	48                   	dec    %eax
f0127f18:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0127f1e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127f24:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f29:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0127f2f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127f35:	29 d0                	sub    %edx,%eax
f0127f37:	01 d8                	add    %ebx,%eax
f0127f39:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127f3e:	39 c1                	cmp    %eax,%ecx
f0127f40:	74 17                	je     f0127f59 <test_kexpand+0x94b>
f0127f42:	83 ec 04             	sub    $0x4,%esp
f0127f45:	68 40 ad 13 f0       	push   $0xf013ad40
f0127f4a:	68 8d 0b 00 00       	push   $0xb8d
f0127f4f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127f54:	e8 a2 82 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f59:	e8 de bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127f5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f61:	74 17                	je     f0127f7a <test_kexpand+0x96c>
f0127f63:	83 ec 04             	sub    $0x4,%esp
f0127f66:	68 74 ac 13 f0       	push   $0xf013ac74
f0127f6b:	68 8e 0b 00 00       	push   $0xb8e
f0127f70:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127f75:	e8 81 82 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f7a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f7d:	e8 3d 49 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127f82:	29 c3                	sub    %eax,%ebx
f0127f84:	89 d8                	mov    %ebx,%eax
f0127f86:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127f8b:	74 17                	je     f0127fa4 <test_kexpand+0x996>
f0127f8d:	83 ec 04             	sub    $0x4,%esp
f0127f90:	68 dc ac 13 f0       	push   $0xf013acdc
f0127f95:	68 8f 0b 00 00       	push   $0xb8f
f0127f9a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0127f9f:	e8 57 82 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127fa4:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127fab:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127fae:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127fb4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127fba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127fc1:	eb 1a                	jmp    f0127fdd <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127fc6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127fcd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127fd3:	01 c2                	add    %eax,%edx
f0127fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127fd8:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127fda:	ff 45 f4             	incl   -0xc(%ebp)
f0127fdd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127fe3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127fe6:	7d db                	jge    f0127fc3 <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127fe8:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127fef:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ff2:	e8 c8 48 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0127ff7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ffa:	e8 3d bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0127fff:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128002:	83 ec 0c             	sub    $0xc,%esp
f0128005:	68 00 00 70 00       	push   $0x700000
f012800a:	e8 89 fa fd ff       	call   f0107a98 <kexpand>
f012800f:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128012:	e8 25 bd fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128017:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012801a:	74 19                	je     f0128035 <test_kexpand+0xa27>
f012801c:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128021:	68 25 ba 13 f0       	push   $0xf013ba25
f0128026:	68 a0 0b 00 00       	push   $0xba0
f012802b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128030:	e8 c6 81 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128035:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128038:	e8 82 48 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012803d:	29 c3                	sub    %eax,%ebx
f012803f:	89 d8                	mov    %ebx,%eax
f0128041:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128046:	74 19                	je     f0128061 <test_kexpand+0xa53>
f0128048:	68 3c ba 13 f0       	push   $0xf013ba3c
f012804d:	68 25 ba 13 f0       	push   $0xf013ba25
f0128052:	68 a1 0b 00 00       	push   $0xba1
f0128057:	68 5a ac 13 f0       	push   $0xf013ac5a
f012805c:	e8 9a 81 fd ff       	call   f01001fb <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128061:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128067:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012806a:	eb 1a                	jmp    f0128086 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f012806c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012806f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128076:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012807c:	01 c2                	add    %eax,%edx
f012807e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128081:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128083:	ff 45 f4             	incl   -0xc(%ebp)
f0128086:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128089:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f012808f:	7c db                	jl     f012806c <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128091:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128098:	eb 37                	jmp    f01280d1 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f012809a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012809d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01280a4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01280aa:	01 d0                	add    %edx,%eax
f01280ac:	8b 10                	mov    (%eax),%edx
f01280ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280b1:	39 c2                	cmp    %eax,%edx
f01280b3:	74 19                	je     f01280ce <test_kexpand+0xac0>
f01280b5:	68 6c ba 13 f0       	push   $0xf013ba6c
f01280ba:	68 25 ba 13 f0       	push   $0xf013ba25
f01280bf:	68 ad 0b 00 00       	push   $0xbad
f01280c4:	68 5a ac 13 f0       	push   $0xf013ac5a
f01280c9:	e8 2d 81 fd ff       	call   f01001fb <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01280ce:	ff 45 f4             	incl   -0xc(%ebp)
f01280d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280d4:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f01280da:	7c be                	jl     f012809a <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01280dc:	e8 de 47 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01280e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280e4:	e8 53 bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01280e9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f01280ec:	83 ec 0c             	sub    $0xc,%esp
f01280ef:	68 00 00 a0 00       	push   $0xa00000
f01280f4:	e8 9f f9 fd ff       	call   f0107a98 <kexpand>
f01280f9:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01280fc:	e8 3b bc fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128101:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128104:	74 19                	je     f012811f <test_kexpand+0xb11>
f0128106:	68 f4 b9 13 f0       	push   $0xf013b9f4
f012810b:	68 25 ba 13 f0       	push   $0xf013ba25
f0128110:	68 b8 0b 00 00       	push   $0xbb8
f0128115:	68 5a ac 13 f0       	push   $0xf013ac5a
f012811a:	e8 dc 80 fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f012811f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128122:	e8 98 47 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128127:	29 c3                	sub    %eax,%ebx
f0128129:	89 d8                	mov    %ebx,%eax
f012812b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128130:	74 19                	je     f012814b <test_kexpand+0xb3d>
f0128132:	68 78 ba 13 f0       	push   $0xf013ba78
f0128137:	68 25 ba 13 f0       	push   $0xf013ba25
f012813c:	68 b9 0b 00 00       	push   $0xbb9
f0128141:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128146:	e8 b0 80 fd ff       	call   f01001fb <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012814b:	e8 6f 47 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128150:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128153:	e8 e4 bb fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128158:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f012815b:	83 ec 0c             	sub    $0xc,%esp
f012815e:	68 00 00 40 00       	push   $0x400000
f0128163:	e8 96 f6 fd ff       	call   f01077fe <kmalloc>
f0128168:	83 c4 10             	add    $0x10,%esp
f012816b:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128171:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128177:	89 c1                	mov    %eax,%ecx
f0128179:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128180:	10 00 00 
f0128183:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128189:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012818e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128194:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012819a:	ba 00 00 00 00       	mov    $0x0,%edx
f012819f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01281a5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01281ab:	29 d0                	sub    %edx,%eax
f01281ad:	89 c3                	mov    %eax,%ebx
f01281af:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01281b6:	10 00 00 
f01281b9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01281be:	0f b6 d0             	movzbl %al,%edx
f01281c1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01281c7:	01 d0                	add    %edx,%eax
f01281c9:	48                   	dec    %eax
f01281ca:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01281d0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01281d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01281db:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01281e1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01281e7:	29 d0                	sub    %edx,%eax
f01281e9:	01 c3                	add    %eax,%ebx
f01281eb:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01281f2:	10 00 00 
f01281f5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01281fa:	0f b6 c0             	movzbl %al,%eax
f01281fd:	c1 e0 04             	shl    $0x4,%eax
f0128200:	89 c2                	mov    %eax,%edx
f0128202:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128208:	01 d0                	add    %edx,%eax
f012820a:	48                   	dec    %eax
f012820b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128211:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128217:	ba 00 00 00 00       	mov    $0x0,%edx
f012821c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128222:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128228:	29 d0                	sub    %edx,%eax
f012822a:	01 d8                	add    %ebx,%eax
f012822c:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0128231:	39 c1                	cmp    %eax,%ecx
f0128233:	74 17                	je     f012824c <test_kexpand+0xc3e>
f0128235:	83 ec 04             	sub    $0x4,%esp
f0128238:	68 a8 ba 13 f0       	push   $0xf013baa8
f012823d:	68 c4 0b 00 00       	push   $0xbc4
f0128242:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128247:	e8 af 7f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012824c:	e8 eb ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128251:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128254:	74 17                	je     f012826d <test_kexpand+0xc5f>
f0128256:	83 ec 04             	sub    $0x4,%esp
f0128259:	68 74 ac 13 f0       	push   $0xf013ac74
f012825e:	68 c5 0b 00 00       	push   $0xbc5
f0128263:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128268:	e8 8e 7f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012826d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128270:	e8 4a 46 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128275:	29 c3                	sub    %eax,%ebx
f0128277:	89 d8                	mov    %ebx,%eax
f0128279:	3d 00 04 00 00       	cmp    $0x400,%eax
f012827e:	74 17                	je     f0128297 <test_kexpand+0xc89>
f0128280:	83 ec 04             	sub    $0x4,%esp
f0128283:	68 dc ac 13 f0       	push   $0xf013acdc
f0128288:	68 c6 0b 00 00       	push   $0xbc6
f012828d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128292:	e8 64 7f fd ff       	call   f01001fb <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0128297:	e8 23 46 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012829c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012829f:	e8 98 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01282a7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01282ad:	83 ec 0c             	sub    $0xc,%esp
f01282b0:	50                   	push   %eax
f01282b1:	e8 0a f6 fd ff       	call   f01078c0 <kfree>
f01282b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282b9:	e8 7e ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01282be:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282c1:	74 17                	je     f01282da <test_kexpand+0xccc>
f01282c3:	83 ec 04             	sub    $0x4,%esp
f01282c6:	68 74 ac 13 f0       	push   $0xf013ac74
f01282cb:	68 cf 0b 00 00       	push   $0xbcf
f01282d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01282d5:	e8 21 7f fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282da:	e8 e0 45 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01282df:	89 c2                	mov    %eax,%edx
f01282e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01282e4:	29 c2                	sub    %eax,%edx
f01282e6:	89 d0                	mov    %edx,%eax
f01282e8:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01282ed:	74 17                	je     f0128306 <test_kexpand+0xcf8>
f01282ef:	83 ec 04             	sub    $0x4,%esp
f01282f2:	68 0c b5 13 f0       	push   $0xf013b50c
f01282f7:	68 d0 0b 00 00       	push   $0xbd0
f01282fc:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128301:	e8 f5 7e fd ff       	call   f01001fb <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128306:	e8 b4 45 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012830b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012830e:	e8 29 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128313:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0128316:	83 ec 0c             	sub    $0xc,%esp
f0128319:	68 00 50 40 00       	push   $0x405000
f012831e:	e8 75 f7 fd ff       	call   f0107a98 <kexpand>
f0128323:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128326:	e8 11 ba fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012832b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012832e:	74 19                	je     f0128349 <test_kexpand+0xd3b>
f0128330:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128335:	68 25 ba 13 f0       	push   $0xf013ba25
f012833a:	68 da 0b 00 00       	push   $0xbda
f012833f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128344:	e8 b2 7e fd ff       	call   f01001fb <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0128349:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012834c:	e8 6e 45 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128351:	29 c3                	sub    %eax,%ebx
f0128353:	89 d8                	mov    %ebx,%eax
f0128355:	83 f8 05             	cmp    $0x5,%eax
f0128358:	74 19                	je     f0128373 <test_kexpand+0xd65>
f012835a:	68 d0 ba 13 f0       	push   $0xf013bad0
f012835f:	68 25 ba 13 f0       	push   $0xf013ba25
f0128364:	68 db 0b 00 00       	push   $0xbdb
f0128369:	68 5a ac 13 f0       	push   $0xf013ac5a
f012836e:	e8 88 7e fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128373:	83 ec 0c             	sub    $0xc,%esp
f0128376:	68 b8 b9 13 f0       	push   $0xf013b9b8
f012837b:	e8 02 89 fd ff       	call   f0100c82 <cprintf>
f0128380:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128383:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128388:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012838b:	5b                   	pop    %ebx
f012838c:	5f                   	pop    %edi
f012838d:	5d                   	pop    %ebp
f012838e:	c3                   	ret    

f012838f <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f012838f:	55                   	push   %ebp
f0128390:	89 e5                	mov    %esp,%ebp
f0128392:	57                   	push   %edi
f0128393:	53                   	push   %ebx
f0128394:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f012839a:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012839e:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01283a2:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01283a8:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01283ae:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01283b5:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01283bc:	e8 fe 44 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01283c1:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01283c4:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01283ca:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01283d4:	89 d7                	mov    %edx,%edi
f01283d6:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01283d8:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01283de:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01283e8:	89 d7                	mov    %edx,%edi
f01283ea:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01283ec:	e8 ce 44 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01283f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01283f4:	e8 43 b9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01283f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01283fc:	83 ec 0c             	sub    $0xc,%esp
f01283ff:	68 00 fc 1f 00       	push   $0x1ffc00
f0128404:	e8 f5 f3 fd ff       	call   f01077fe <kmalloc>
f0128409:	83 c4 10             	add    $0x10,%esp
f012840c:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128412:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0128418:	89 c1                	mov    %eax,%ecx
f012841a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128421:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128424:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128429:	89 45 d0             	mov    %eax,-0x30(%ebp)
f012842c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012842f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128434:	f7 75 d4             	divl   -0x2c(%ebp)
f0128437:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012843a:	29 d0                	sub    %edx,%eax
f012843c:	89 c3                	mov    %eax,%ebx
f012843e:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128445:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012844a:	0f b6 d0             	movzbl %al,%edx
f012844d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128450:	01 d0                	add    %edx,%eax
f0128452:	48                   	dec    %eax
f0128453:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128456:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128459:	ba 00 00 00 00       	mov    $0x0,%edx
f012845e:	f7 75 cc             	divl   -0x34(%ebp)
f0128461:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128464:	29 d0                	sub    %edx,%eax
f0128466:	01 c3                	add    %eax,%ebx
f0128468:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012846f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128474:	0f b6 c0             	movzbl %al,%eax
f0128477:	c1 e0 04             	shl    $0x4,%eax
f012847a:	89 c2                	mov    %eax,%edx
f012847c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012847f:	01 d0                	add    %edx,%eax
f0128481:	48                   	dec    %eax
f0128482:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128485:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128488:	ba 00 00 00 00       	mov    $0x0,%edx
f012848d:	f7 75 c4             	divl   -0x3c(%ebp)
f0128490:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128493:	29 d0                	sub    %edx,%eax
f0128495:	01 d8                	add    %ebx,%eax
f0128497:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012849c:	39 c1                	cmp    %eax,%ecx
f012849e:	74 17                	je     f01284b7 <test_kshrink+0x128>
f01284a0:	83 ec 04             	sub    $0x4,%esp
f01284a3:	68 40 ad 13 f0       	push   $0xf013ad40
f01284a8:	68 01 0c 00 00       	push   $0xc01
f01284ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f01284b2:	e8 44 7d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01284b7:	e8 80 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01284bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01284bf:	74 17                	je     f01284d8 <test_kshrink+0x149>
f01284c1:	83 ec 04             	sub    $0x4,%esp
f01284c4:	68 74 ac 13 f0       	push   $0xf013ac74
f01284c9:	68 02 0c 00 00       	push   $0xc02
f01284ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f01284d3:	e8 23 7d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284d8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01284db:	e8 df 43 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01284e0:	29 c3                	sub    %eax,%ebx
f01284e2:	89 d8                	mov    %ebx,%eax
f01284e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01284e9:	74 17                	je     f0128502 <test_kshrink+0x173>
f01284eb:	83 ec 04             	sub    $0x4,%esp
f01284ee:	68 dc ac 13 f0       	push   $0xf013acdc
f01284f3:	68 03 0c 00 00       	push   $0xc03
f01284f8:	68 5a ac 13 f0       	push   $0xf013ac5a
f01284fd:	e8 f9 7c fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128502:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0128509:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012850c:	e8 ae 43 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128511:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128514:	e8 23 b8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128519:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012851c:	83 ec 0c             	sub    $0xc,%esp
f012851f:	68 00 fc 1f 00       	push   $0x1ffc00
f0128524:	e8 d5 f2 fd ff       	call   f01077fe <kmalloc>
f0128529:	83 c4 10             	add    $0x10,%esp
f012852c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128532:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0128538:	89 c1                	mov    %eax,%ecx
f012853a:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128541:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128544:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128549:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012854c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012854f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128554:	f7 75 bc             	divl   -0x44(%ebp)
f0128557:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012855a:	29 d0                	sub    %edx,%eax
f012855c:	89 c3                	mov    %eax,%ebx
f012855e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128565:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012856a:	0f b6 d0             	movzbl %al,%edx
f012856d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128570:	01 d0                	add    %edx,%eax
f0128572:	48                   	dec    %eax
f0128573:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128576:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128579:	ba 00 00 00 00       	mov    $0x0,%edx
f012857e:	f7 75 b4             	divl   -0x4c(%ebp)
f0128581:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128584:	29 d0                	sub    %edx,%eax
f0128586:	01 c3                	add    %eax,%ebx
f0128588:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012858f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128594:	0f b6 c0             	movzbl %al,%eax
f0128597:	c1 e0 04             	shl    $0x4,%eax
f012859a:	89 c2                	mov    %eax,%edx
f012859c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012859f:	01 d0                	add    %edx,%eax
f01285a1:	48                   	dec    %eax
f01285a2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01285a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01285a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ad:	f7 75 ac             	divl   -0x54(%ebp)
f01285b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01285b3:	29 d0                	sub    %edx,%eax
f01285b5:	01 d8                	add    %ebx,%eax
f01285b7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01285bc:	39 c1                	cmp    %eax,%ecx
f01285be:	74 17                	je     f01285d7 <test_kshrink+0x248>
f01285c0:	83 ec 04             	sub    $0x4,%esp
f01285c3:	68 40 ad 13 f0       	push   $0xf013ad40
f01285c8:	68 0a 0c 00 00       	push   $0xc0a
f01285cd:	68 5a ac 13 f0       	push   $0xf013ac5a
f01285d2:	e8 24 7c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285d7:	e8 60 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01285dc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285df:	74 17                	je     f01285f8 <test_kshrink+0x269>
f01285e1:	83 ec 04             	sub    $0x4,%esp
f01285e4:	68 74 ac 13 f0       	push   $0xf013ac74
f01285e9:	68 0b 0c 00 00       	push   $0xc0b
f01285ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f01285f3:	e8 03 7c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285f8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285fb:	e8 bf 42 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128600:	29 c3                	sub    %eax,%ebx
f0128602:	89 d8                	mov    %ebx,%eax
f0128604:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128609:	74 17                	je     f0128622 <test_kshrink+0x293>
f012860b:	83 ec 04             	sub    $0x4,%esp
f012860e:	68 dc ac 13 f0       	push   $0xf013acdc
f0128613:	68 0c 0c 00 00       	push   $0xc0c
f0128618:	68 5a ac 13 f0       	push   $0xf013ac5a
f012861d:	e8 d9 7b fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128622:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128629:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012862c:	e8 8e 42 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128631:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128634:	e8 03 b7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128639:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012863c:	83 ec 0c             	sub    $0xc,%esp
f012863f:	68 00 08 00 00       	push   $0x800
f0128644:	e8 b5 f1 fd ff       	call   f01077fe <kmalloc>
f0128649:	83 c4 10             	add    $0x10,%esp
f012864c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128652:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128658:	89 c1                	mov    %eax,%ecx
f012865a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128661:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128664:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128669:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012866c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012866f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128674:	f7 75 a4             	divl   -0x5c(%ebp)
f0128677:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012867a:	29 d0                	sub    %edx,%eax
f012867c:	89 c3                	mov    %eax,%ebx
f012867e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128685:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012868a:	0f b6 d0             	movzbl %al,%edx
f012868d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128690:	01 d0                	add    %edx,%eax
f0128692:	48                   	dec    %eax
f0128693:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128696:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128699:	ba 00 00 00 00       	mov    $0x0,%edx
f012869e:	f7 75 9c             	divl   -0x64(%ebp)
f01286a1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01286a4:	29 d0                	sub    %edx,%eax
f01286a6:	01 c3                	add    %eax,%ebx
f01286a8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01286af:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01286b4:	0f b6 c0             	movzbl %al,%eax
f01286b7:	c1 e0 04             	shl    $0x4,%eax
f01286ba:	89 c2                	mov    %eax,%edx
f01286bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01286bf:	01 d0                	add    %edx,%eax
f01286c1:	48                   	dec    %eax
f01286c2:	89 45 90             	mov    %eax,-0x70(%ebp)
f01286c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01286c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01286cd:	f7 75 94             	divl   -0x6c(%ebp)
f01286d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01286d3:	29 d0                	sub    %edx,%eax
f01286d5:	01 d8                	add    %ebx,%eax
f01286d7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01286dc:	39 c1                	cmp    %eax,%ecx
f01286de:	74 17                	je     f01286f7 <test_kshrink+0x368>
f01286e0:	83 ec 04             	sub    $0x4,%esp
f01286e3:	68 40 ad 13 f0       	push   $0xf013ad40
f01286e8:	68 13 0c 00 00       	push   $0xc13
f01286ed:	68 5a ac 13 f0       	push   $0xf013ac5a
f01286f2:	e8 04 7b fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286f7:	e8 40 b6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01286fc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01286ff:	74 17                	je     f0128718 <test_kshrink+0x389>
f0128701:	83 ec 04             	sub    $0x4,%esp
f0128704:	68 74 ac 13 f0       	push   $0xf013ac74
f0128709:	68 14 0c 00 00       	push   $0xc14
f012870e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128713:	e8 e3 7a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128718:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012871b:	e8 9f 41 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128720:	29 c3                	sub    %eax,%ebx
f0128722:	89 d8                	mov    %ebx,%eax
f0128724:	83 f8 01             	cmp    $0x1,%eax
f0128727:	74 17                	je     f0128740 <test_kshrink+0x3b1>
f0128729:	83 ec 04             	sub    $0x4,%esp
f012872c:	68 dc ac 13 f0       	push   $0xf013acdc
f0128731:	68 15 0c 00 00       	push   $0xc15
f0128736:	68 5a ac 13 f0       	push   $0xf013ac5a
f012873b:	e8 bb 7a fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128740:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f0128747:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012874a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0128750:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128753:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012875a:	eb 0e                	jmp    f012876a <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f012875c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012875f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128762:	01 d0                	add    %edx,%eax
f0128764:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128767:	ff 45 f4             	incl   -0xc(%ebp)
f012876a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128770:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128773:	7f e7                	jg     f012875c <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128775:	e8 45 41 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012877a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012877d:	e8 ba b5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128782:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128785:	83 ec 0c             	sub    $0xc,%esp
f0128788:	68 00 08 00 00       	push   $0x800
f012878d:	e8 6c f0 fd ff       	call   f01077fe <kmalloc>
f0128792:	83 c4 10             	add    $0x10,%esp
f0128795:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012879b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01287a1:	89 c1                	mov    %eax,%ecx
f01287a3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01287aa:	8b 45 88             	mov    -0x78(%ebp),%eax
f01287ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01287b2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01287b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01287b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01287bd:	f7 75 88             	divl   -0x78(%ebp)
f01287c0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01287c3:	29 d0                	sub    %edx,%eax
f01287c5:	89 c3                	mov    %eax,%ebx
f01287c7:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01287ce:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01287d3:	0f b6 d0             	movzbl %al,%edx
f01287d6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01287d9:	01 d0                	add    %edx,%eax
f01287db:	48                   	dec    %eax
f01287dc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01287e2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01287e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01287ed:	f7 75 80             	divl   -0x80(%ebp)
f01287f0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01287f6:	29 d0                	sub    %edx,%eax
f01287f8:	01 c3                	add    %eax,%ebx
f01287fa:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128801:	10 00 00 
f0128804:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128809:	0f b6 c0             	movzbl %al,%eax
f012880c:	c1 e0 04             	shl    $0x4,%eax
f012880f:	89 c2                	mov    %eax,%edx
f0128811:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128817:	01 d0                	add    %edx,%eax
f0128819:	48                   	dec    %eax
f012881a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128820:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128826:	ba 00 00 00 00       	mov    $0x0,%edx
f012882b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128831:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128837:	29 d0                	sub    %edx,%eax
f0128839:	01 d8                	add    %ebx,%eax
f012883b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128840:	39 c1                	cmp    %eax,%ecx
f0128842:	74 17                	je     f012885b <test_kshrink+0x4cc>
f0128844:	83 ec 04             	sub    $0x4,%esp
f0128847:	68 40 ad 13 f0       	push   $0xf013ad40
f012884c:	68 21 0c 00 00       	push   $0xc21
f0128851:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128856:	e8 a0 79 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012885b:	e8 dc b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128860:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128863:	74 17                	je     f012887c <test_kshrink+0x4ed>
f0128865:	83 ec 04             	sub    $0x4,%esp
f0128868:	68 74 ac 13 f0       	push   $0xf013ac74
f012886d:	68 22 0c 00 00       	push   $0xc22
f0128872:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128877:	e8 7f 79 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012887c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012887f:	e8 3b 40 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128884:	29 c3                	sub    %eax,%ebx
f0128886:	89 d8                	mov    %ebx,%eax
f0128888:	83 f8 01             	cmp    $0x1,%eax
f012888b:	74 17                	je     f01288a4 <test_kshrink+0x515>
f012888d:	83 ec 04             	sub    $0x4,%esp
f0128890:	68 dc ac 13 f0       	push   $0xf013acdc
f0128895:	68 23 0c 00 00       	push   $0xc23
f012889a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012889f:	e8 57 79 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01288a4:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01288ab:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01288ae:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01288b4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01288b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288be:	eb 0e                	jmp    f01288ce <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01288c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01288c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288c6:	01 d0                	add    %edx,%eax
f01288c8:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01288cb:	ff 45 f4             	incl   -0xc(%ebp)
f01288ce:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01288d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288d7:	7f e7                	jg     f01288c0 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01288d9:	e8 e1 3f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01288de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01288e1:	e8 56 b4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01288e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01288e9:	83 ec 0c             	sub    $0xc,%esp
f01288ec:	68 00 1c 00 00       	push   $0x1c00
f01288f1:	e8 08 ef fd ff       	call   f01077fe <kmalloc>
f01288f6:	83 c4 10             	add    $0x10,%esp
f01288f9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01288ff:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128905:	89 c1                	mov    %eax,%ecx
f0128907:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012890e:	10 00 00 
f0128911:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128917:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012891c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128922:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128928:	ba 00 00 00 00       	mov    $0x0,%edx
f012892d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128933:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128939:	29 d0                	sub    %edx,%eax
f012893b:	89 c3                	mov    %eax,%ebx
f012893d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128944:	10 00 00 
f0128947:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012894c:	0f b6 d0             	movzbl %al,%edx
f012894f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128955:	01 d0                	add    %edx,%eax
f0128957:	48                   	dec    %eax
f0128958:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012895e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128964:	ba 00 00 00 00       	mov    $0x0,%edx
f0128969:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012896f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128975:	29 d0                	sub    %edx,%eax
f0128977:	01 c3                	add    %eax,%ebx
f0128979:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128980:	10 00 00 
f0128983:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128988:	0f b6 c0             	movzbl %al,%eax
f012898b:	c1 e0 04             	shl    $0x4,%eax
f012898e:	89 c2                	mov    %eax,%edx
f0128990:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128996:	01 d0                	add    %edx,%eax
f0128998:	48                   	dec    %eax
f0128999:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012899f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01289a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01289aa:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01289b0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01289b6:	29 d0                	sub    %edx,%eax
f01289b8:	01 d8                	add    %ebx,%eax
f01289ba:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01289bf:	39 c1                	cmp    %eax,%ecx
f01289c1:	74 17                	je     f01289da <test_kshrink+0x64b>
f01289c3:	83 ec 04             	sub    $0x4,%esp
f01289c6:	68 40 ad 13 f0       	push   $0xf013ad40
f01289cb:	68 2f 0c 00 00       	push   $0xc2f
f01289d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f01289d5:	e8 21 78 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01289da:	e8 5d b3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01289df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01289e2:	74 17                	je     f01289fb <test_kshrink+0x66c>
f01289e4:	83 ec 04             	sub    $0x4,%esp
f01289e7:	68 74 ac 13 f0       	push   $0xf013ac74
f01289ec:	68 30 0c 00 00       	push   $0xc30
f01289f1:	68 5a ac 13 f0       	push   $0xf013ac5a
f01289f6:	e8 00 78 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01289fb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01289fe:	e8 bc 3e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128a03:	29 c3                	sub    %eax,%ebx
f0128a05:	89 d8                	mov    %ebx,%eax
f0128a07:	83 f8 02             	cmp    $0x2,%eax
f0128a0a:	74 17                	je     f0128a23 <test_kshrink+0x694>
f0128a0c:	83 ec 04             	sub    $0x4,%esp
f0128a0f:	68 dc ac 13 f0       	push   $0xf013acdc
f0128a14:	68 31 0c 00 00       	push   $0xc31
f0128a19:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128a1e:	e8 d8 77 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128a23:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128a2a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128a2d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128a33:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128a36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a3d:	eb 0e                	jmp    f0128a4d <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0128a3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a42:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128a45:	01 d0                	add    %edx,%eax
f0128a47:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128a4a:	ff 45 f4             	incl   -0xc(%ebp)
f0128a4d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0128a53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a56:	7f e7                	jg     f0128a3f <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128a58:	e8 62 3e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128a5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a60:	e8 d7 b2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128a65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128a68:	83 ec 0c             	sub    $0xc,%esp
f0128a6b:	68 00 fc 2f 00       	push   $0x2ffc00
f0128a70:	e8 89 ed fd ff       	call   f01077fe <kmalloc>
f0128a75:	83 c4 10             	add    $0x10,%esp
f0128a78:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a7e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128a84:	89 c1                	mov    %eax,%ecx
f0128a86:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128a8d:	10 00 00 
f0128a90:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128a96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a9b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128aa1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128aa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0128aac:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128ab2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128ab8:	29 d0                	sub    %edx,%eax
f0128aba:	89 c3                	mov    %eax,%ebx
f0128abc:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128ac3:	10 00 00 
f0128ac6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128acb:	0f b6 d0             	movzbl %al,%edx
f0128ace:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128ad4:	01 d0                	add    %edx,%eax
f0128ad6:	48                   	dec    %eax
f0128ad7:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128add:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128ae3:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ae8:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128aee:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128af4:	29 d0                	sub    %edx,%eax
f0128af6:	01 c3                	add    %eax,%ebx
f0128af8:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128aff:	10 00 00 
f0128b02:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128b07:	0f b6 c0             	movzbl %al,%eax
f0128b0a:	c1 e0 04             	shl    $0x4,%eax
f0128b0d:	89 c2                	mov    %eax,%edx
f0128b0f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128b15:	01 d0                	add    %edx,%eax
f0128b17:	48                   	dec    %eax
f0128b18:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128b1e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b29:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128b2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128b35:	29 d0                	sub    %edx,%eax
f0128b37:	01 d8                	add    %ebx,%eax
f0128b39:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128b3e:	39 c1                	cmp    %eax,%ecx
f0128b40:	74 17                	je     f0128b59 <test_kshrink+0x7ca>
f0128b42:	83 ec 04             	sub    $0x4,%esp
f0128b45:	68 40 ad 13 f0       	push   $0xf013ad40
f0128b4a:	68 3d 0c 00 00       	push   $0xc3d
f0128b4f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128b54:	e8 a2 76 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b59:	e8 de b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128b5e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128b61:	74 17                	je     f0128b7a <test_kshrink+0x7eb>
f0128b63:	83 ec 04             	sub    $0x4,%esp
f0128b66:	68 74 ac 13 f0       	push   $0xf013ac74
f0128b6b:	68 3e 0c 00 00       	push   $0xc3e
f0128b70:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128b75:	e8 81 76 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b7a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128b7d:	e8 3d 3d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128b82:	29 c3                	sub    %eax,%ebx
f0128b84:	89 d8                	mov    %ebx,%eax
f0128b86:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128b8b:	74 17                	je     f0128ba4 <test_kshrink+0x815>
f0128b8d:	83 ec 04             	sub    $0x4,%esp
f0128b90:	68 dc ac 13 f0       	push   $0xf013acdc
f0128b95:	68 3f 0c 00 00       	push   $0xc3f
f0128b9a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128b9f:	e8 57 76 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128ba4:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128bab:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128bae:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128bb4:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128bb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128bbe:	eb 0e                	jmp    f0128bce <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0128bc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128bc3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128bc6:	01 d0                	add    %edx,%eax
f0128bc8:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128bcb:	ff 45 f4             	incl   -0xc(%ebp)
f0128bce:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128bd4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128bd7:	7f e7                	jg     f0128bc0 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128bd9:	e8 e1 3c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128bde:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128be1:	e8 56 b1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128be6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128be9:	83 ec 0c             	sub    $0xc,%esp
f0128bec:	68 00 00 60 00       	push   $0x600000
f0128bf1:	e8 08 ec fd ff       	call   f01077fe <kmalloc>
f0128bf6:	83 c4 10             	add    $0x10,%esp
f0128bf9:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128bff:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128c05:	89 c1                	mov    %eax,%ecx
f0128c07:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128c0e:	10 00 00 
f0128c11:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128c17:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128c1c:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128c22:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c2d:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128c33:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128c39:	29 d0                	sub    %edx,%eax
f0128c3b:	89 c3                	mov    %eax,%ebx
f0128c3d:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128c44:	10 00 00 
f0128c47:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c4c:	0f b6 d0             	movzbl %al,%edx
f0128c4f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128c55:	01 d0                	add    %edx,%eax
f0128c57:	48                   	dec    %eax
f0128c58:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128c5e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128c64:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c69:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128c6f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128c75:	29 d0                	sub    %edx,%eax
f0128c77:	01 c3                	add    %eax,%ebx
f0128c79:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128c80:	10 00 00 
f0128c83:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128c88:	0f b6 c0             	movzbl %al,%eax
f0128c8b:	c1 e0 04             	shl    $0x4,%eax
f0128c8e:	89 c2                	mov    %eax,%edx
f0128c90:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128c96:	01 d0                	add    %edx,%eax
f0128c98:	48                   	dec    %eax
f0128c99:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128c9f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128ca5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128caa:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128cb0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128cb6:	29 d0                	sub    %edx,%eax
f0128cb8:	01 d8                	add    %ebx,%eax
f0128cba:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128cbf:	39 c1                	cmp    %eax,%ecx
f0128cc1:	74 17                	je     f0128cda <test_kshrink+0x94b>
f0128cc3:	83 ec 04             	sub    $0x4,%esp
f0128cc6:	68 40 ad 13 f0       	push   $0xf013ad40
f0128ccb:	68 4b 0c 00 00       	push   $0xc4b
f0128cd0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128cd5:	e8 21 75 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128cda:	e8 5d b0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128cdf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ce2:	74 17                	je     f0128cfb <test_kshrink+0x96c>
f0128ce4:	83 ec 04             	sub    $0x4,%esp
f0128ce7:	68 74 ac 13 f0       	push   $0xf013ac74
f0128cec:	68 4c 0c 00 00       	push   $0xc4c
f0128cf1:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128cf6:	e8 00 75 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128cfb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128cfe:	e8 bc 3b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128d03:	29 c3                	sub    %eax,%ebx
f0128d05:	89 d8                	mov    %ebx,%eax
f0128d07:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128d0c:	74 17                	je     f0128d25 <test_kshrink+0x996>
f0128d0e:	83 ec 04             	sub    $0x4,%esp
f0128d11:	68 dc ac 13 f0       	push   $0xf013acdc
f0128d16:	68 4d 0c 00 00       	push   $0xc4d
f0128d1b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128d20:	e8 d6 74 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128d25:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128d2c:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128d2f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128d35:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128d3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d42:	eb 1a                	jmp    f0128d5e <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0128d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d47:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128d4e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128d54:	01 c2                	add    %eax,%edx
f0128d56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128d59:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128d5b:	ff 45 f4             	incl   -0xc(%ebp)
f0128d5e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128d64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d67:	7d db                	jge    f0128d44 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128d69:	e8 51 3b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128d6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d71:	e8 c6 af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d76:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0128d79:	83 ec 0c             	sub    $0xc,%esp
f0128d7c:	68 00 00 50 00       	push   $0x500000
f0128d81:	e8 f5 ec fd ff       	call   f0107a7b <kshrink>
f0128d86:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128d89:	e8 ae af fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128d8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d91:	74 19                	je     f0128dac <test_kshrink+0xa1d>
f0128d93:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128d98:	68 25 ba 13 f0       	push   $0xf013ba25
f0128d9d:	68 5d 0c 00 00       	push   $0xc5d
f0128da2:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128da7:	e8 4f 74 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128dac:	e8 0e 3b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128db1:	89 c2                	mov    %eax,%edx
f0128db3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128db6:	29 c2                	sub    %eax,%edx
f0128db8:	89 d0                	mov    %edx,%eax
f0128dba:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128dbf:	74 19                	je     f0128dda <test_kshrink+0xa4b>
f0128dc1:	68 00 bb 13 f0       	push   $0xf013bb00
f0128dc6:	68 25 ba 13 f0       	push   $0xf013ba25
f0128dcb:	68 5e 0c 00 00       	push   $0xc5e
f0128dd0:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128dd5:	e8 21 74 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128dda:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0128de1:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128de4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128deb:	eb 37                	jmp    f0128e24 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128df0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128df7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128dfd:	01 d0                	add    %edx,%eax
f0128dff:	8b 10                	mov    (%eax),%edx
f0128e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e04:	39 c2                	cmp    %eax,%edx
f0128e06:	74 19                	je     f0128e21 <test_kshrink+0xa92>
f0128e08:	68 30 bb 13 f0       	push   $0xf013bb30
f0128e0d:	68 25 ba 13 f0       	push   $0xf013ba25
f0128e12:	68 66 0c 00 00       	push   $0xc66
f0128e17:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128e1c:	e8 da 73 fd ff       	call   f01001fb <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128e21:	ff 45 f4             	incl   -0xc(%ebp)
f0128e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e27:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128e2d:	7e be                	jle    f0128ded <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0128e2f:	83 ec 0c             	sub    $0xc,%esp
f0128e32:	6a 03                	push   $0x3
f0128e34:	e8 26 3f fe ff       	call   f010cd5f <sys_bypassPageFault>
f0128e39:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0128e3c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128e42:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0128e45:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128e48:	05 00 00 50 00       	add    $0x500000,%eax
f0128e4d:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0128e50:	e8 f8 3e fe ff       	call   f010cd4d <sys_rcr2>
f0128e55:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128e58:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0128e5e:	39 d0                	cmp    %edx,%eax
f0128e60:	74 19                	je     f0128e7b <test_kshrink+0xaec>
f0128e62:	68 3c bb 13 f0       	push   $0xf013bb3c
f0128e67:	68 25 ba 13 f0       	push   $0xf013ba25
f0128e6c:	68 6f 0c 00 00       	push   $0xc6f
f0128e71:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128e76:	e8 80 73 fd ff       	call   f01001fb <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0128e7b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128e7e:	05 00 10 50 00       	add    $0x501000,%eax
f0128e83:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0128e86:	e8 c2 3e fe ff       	call   f010cd4d <sys_rcr2>
f0128e8b:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128e8e:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128e94:	39 d0                	cmp    %edx,%eax
f0128e96:	74 19                	je     f0128eb1 <test_kshrink+0xb22>
f0128e98:	68 64 bb 13 f0       	push   $0xf013bb64
f0128e9d:	68 25 ba 13 f0       	push   $0xf013ba25
f0128ea2:	68 72 0c 00 00       	push   $0xc72
f0128ea7:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128eac:	e8 4a 73 fd ff       	call   f01001fb <_panic>

		ptr[6*Mega - kilo] = 10;
f0128eb1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128eb4:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128eb9:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128ebc:	e8 8c 3e fe ff       	call   f010cd4d <sys_rcr2>
f0128ec1:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128ec4:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128eca:	39 d0                	cmp    %edx,%eax
f0128ecc:	74 19                	je     f0128ee7 <test_kshrink+0xb58>
f0128ece:	68 90 bb 13 f0       	push   $0xf013bb90
f0128ed3:	68 25 ba 13 f0       	push   $0xf013ba25
f0128ed8:	68 75 0c 00 00       	push   $0xc75
f0128edd:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128ee2:	e8 14 73 fd ff       	call   f01001fb <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128ee7:	83 ec 0c             	sub    $0xc,%esp
f0128eea:	6a 00                	push   $0x0
f0128eec:	e8 6e 3e fe ff       	call   f010cd5f <sys_bypassPageFault>
f0128ef1:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ef4:	e8 c6 39 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128ef9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128efc:	e8 3b ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f01:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128f04:	83 ec 0c             	sub    $0xc,%esp
f0128f07:	68 00 00 20 00       	push   $0x200000
f0128f0c:	e8 6a eb fd ff       	call   f0107a7b <kshrink>
f0128f11:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f14:	e8 23 ae fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f19:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f1c:	74 19                	je     f0128f37 <test_kshrink+0xba8>
f0128f1e:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0128f23:	68 25 ba 13 f0       	push   $0xf013ba25
f0128f28:	68 82 0c 00 00       	push   $0xc82
f0128f2d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128f32:	e8 c4 72 fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0128f37:	e8 83 39 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128f3c:	89 c2                	mov    %eax,%edx
f0128f3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128f41:	29 c2                	sub    %eax,%edx
f0128f43:	89 d0                	mov    %edx,%eax
f0128f45:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128f4a:	74 19                	je     f0128f65 <test_kshrink+0xbd6>
f0128f4c:	68 bc bb 13 f0       	push   $0xf013bbbc
f0128f51:	68 25 ba 13 f0       	push   $0xf013ba25
f0128f56:	68 83 0c 00 00       	push   $0xc83
f0128f5b:	68 5a ac 13 f0       	push   $0xf013ac5a
f0128f60:	e8 96 72 fd ff       	call   f01001fb <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f65:	e8 55 39 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0128f6a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f6d:	e8 ca ad fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0128f72:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128f75:	83 ec 0c             	sub    $0xc,%esp
f0128f78:	68 00 00 40 00       	push   $0x400000
f0128f7d:	e8 7c e8 fd ff       	call   f01077fe <kmalloc>
f0128f82:	83 c4 10             	add    $0x10,%esp
f0128f85:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128f8b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f92:	10 00 00 
f0128f95:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128f9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fa0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128fa6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fac:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fb1:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128fb7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fbd:	29 d0                	sub    %edx,%eax
f0128fbf:	89 c1                	mov    %eax,%ecx
f0128fc1:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128fc8:	10 00 00 
f0128fcb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0128fd0:	0f b6 d0             	movzbl %al,%edx
f0128fd3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fd9:	01 d0                	add    %edx,%eax
f0128fdb:	48                   	dec    %eax
f0128fdc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fe2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fe8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fed:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ff3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ff9:	29 d0                	sub    %edx,%eax
f0128ffb:	01 c1                	add    %eax,%ecx
f0128ffd:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129004:	10 00 00 
f0129007:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012900c:	0f b6 c0             	movzbl %al,%eax
f012900f:	c1 e0 04             	shl    $0x4,%eax
f0129012:	89 c2                	mov    %eax,%edx
f0129014:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012901a:	01 d0                	add    %edx,%eax
f012901c:	48                   	dec    %eax
f012901d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129023:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129029:	ba 00 00 00 00       	mov    $0x0,%edx
f012902e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129034:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012903a:	29 d0                	sub    %edx,%eax
f012903c:	01 c8                	add    %ecx,%eax
f012903e:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129044:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012904a:	83 ec 04             	sub    $0x4,%esp
f012904d:	52                   	push   %edx
f012904e:	50                   	push   %eax
f012904f:	68 ec bb 13 f0       	push   $0xf013bbec
f0129054:	e8 29 7c fd ff       	call   f0100c82 <cprintf>
f0129059:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f012905c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129062:	89 c1                	mov    %eax,%ecx
f0129064:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f012906b:	10 00 00 
f012906e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129074:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129079:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012907f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129085:	ba 00 00 00 00       	mov    $0x0,%edx
f012908a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129090:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129096:	29 d0                	sub    %edx,%eax
f0129098:	89 c3                	mov    %eax,%ebx
f012909a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01290a1:	10 00 00 
f01290a4:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01290a9:	0f b6 d0             	movzbl %al,%edx
f01290ac:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01290b2:	01 d0                	add    %edx,%eax
f01290b4:	48                   	dec    %eax
f01290b5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01290bb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01290c6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01290cc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01290d2:	29 d0                	sub    %edx,%eax
f01290d4:	01 c3                	add    %eax,%ebx
f01290d6:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01290dd:	10 00 00 
f01290e0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01290e5:	0f b6 c0             	movzbl %al,%eax
f01290e8:	c1 e0 04             	shl    $0x4,%eax
f01290eb:	89 c2                	mov    %eax,%edx
f01290ed:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01290f3:	01 d0                	add    %edx,%eax
f01290f5:	48                   	dec    %eax
f01290f6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01290fc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129102:	ba 00 00 00 00       	mov    $0x0,%edx
f0129107:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012910d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129113:	29 d0                	sub    %edx,%eax
f0129115:	01 d8                	add    %ebx,%eax
f0129117:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f012911c:	39 c1                	cmp    %eax,%ecx
f012911e:	74 17                	je     f0129137 <test_kshrink+0xda8>
f0129120:	83 ec 04             	sub    $0x4,%esp
f0129123:	68 08 bc 13 f0       	push   $0xf013bc08
f0129128:	68 8e 0c 00 00       	push   $0xc8e
f012912d:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129132:	e8 c4 70 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129137:	e8 00 ac fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012913c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012913f:	74 17                	je     f0129158 <test_kshrink+0xdc9>
f0129141:	83 ec 04             	sub    $0x4,%esp
f0129144:	68 74 ac 13 f0       	push   $0xf013ac74
f0129149:	68 8f 0c 00 00       	push   $0xc8f
f012914e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129153:	e8 a3 70 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129158:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012915b:	e8 5f 37 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129160:	29 c3                	sub    %eax,%ebx
f0129162:	89 d8                	mov    %ebx,%eax
f0129164:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129169:	74 17                	je     f0129182 <test_kshrink+0xdf3>
f012916b:	83 ec 04             	sub    $0x4,%esp
f012916e:	68 dc ac 13 f0       	push   $0xf013acdc
f0129173:	68 90 0c 00 00       	push   $0xc90
f0129178:	68 5a ac 13 f0       	push   $0xf013ac5a
f012917d:	e8 79 70 fd ff       	call   f01001fb <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129182:	e8 38 37 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129187:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012918a:	e8 ad ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012918f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129192:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129198:	83 ec 0c             	sub    $0xc,%esp
f012919b:	50                   	push   %eax
f012919c:	e8 1f e7 fd ff       	call   f01078c0 <kfree>
f01291a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291a4:	e8 93 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01291a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291ac:	74 17                	je     f01291c5 <test_kshrink+0xe36>
f01291ae:	83 ec 04             	sub    $0x4,%esp
f01291b1:	68 74 ac 13 f0       	push   $0xf013ac74
f01291b6:	68 9a 0c 00 00       	push   $0xc9a
f01291bb:	68 5a ac 13 f0       	push   $0xf013ac5a
f01291c0:	e8 36 70 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01291c5:	e8 f5 36 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01291ca:	89 c2                	mov    %eax,%edx
f01291cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01291cf:	29 c2                	sub    %eax,%edx
f01291d1:	89 d0                	mov    %edx,%eax
f01291d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01291d8:	74 17                	je     f01291f1 <test_kshrink+0xe62>
f01291da:	83 ec 04             	sub    $0x4,%esp
f01291dd:	68 0c b5 13 f0       	push   $0xf013b50c
f01291e2:	68 9b 0c 00 00       	push   $0xc9b
f01291e7:	68 5a ac 13 f0       	push   $0xf013ac5a
f01291ec:	e8 0a 70 fd ff       	call   f01001fb <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01291f1:	e8 c9 36 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01291f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291f9:	e8 3e ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01291fe:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0129201:	83 ec 0c             	sub    $0xc,%esp
f0129204:	68 00 b0 3f 00       	push   $0x3fb000
f0129209:	e8 6d e8 fd ff       	call   f0107a7b <kshrink>
f012920e:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129211:	e8 26 ab fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129216:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129219:	74 19                	je     f0129234 <test_kshrink+0xea5>
f012921b:	68 f4 b9 13 f0       	push   $0xf013b9f4
f0129220:	68 25 ba 13 f0       	push   $0xf013ba25
f0129225:	68 a5 0c 00 00       	push   $0xca5
f012922a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012922f:	e8 c7 6f fd ff       	call   f01001fb <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0129234:	e8 86 36 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129239:	89 c2                	mov    %eax,%edx
f012923b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012923e:	29 c2                	sub    %eax,%edx
f0129240:	89 d0                	mov    %edx,%eax
f0129242:	83 f8 05             	cmp    $0x5,%eax
f0129245:	74 19                	je     f0129260 <test_kshrink+0xed1>
f0129247:	68 5c bc 13 f0       	push   $0xf013bc5c
f012924c:	68 25 ba 13 f0       	push   $0xf013ba25
f0129251:	68 a6 0c 00 00       	push   $0xca6
f0129256:	68 5a ac 13 f0       	push   $0xf013ac5a
f012925b:	e8 9b 6f fd ff       	call   f01001fb <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0129260:	83 ec 0c             	sub    $0xc,%esp
f0129263:	68 b8 b9 13 f0       	push   $0xf013b9b8
f0129268:	e8 15 7a fd ff       	call   f0100c82 <cprintf>
f012926d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0129270:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129275:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129278:	5b                   	pop    %ebx
f0129279:	5f                   	pop    %edi
f012927a:	5d                   	pop    %ebp
f012927b:	c3                   	ret    

f012927c <test_kfreelast>:


int test_kfreelast()
{
f012927c:	55                   	push   %ebp
f012927d:	89 e5                	mov    %esp,%ebp
f012927f:	57                   	push   %edi
f0129280:	53                   	push   %ebx
f0129281:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0129287:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012928b:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012928f:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0129295:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012929b:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01292a2:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01292a9:	e8 11 36 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01292ae:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01292b1:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f01292b7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01292c1:	89 d7                	mov    %edx,%edi
f01292c3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01292c5:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01292cb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01292d5:	89 d7                	mov    %edx,%edi
f01292d7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01292d9:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f01292df:	b9 14 00 00 00       	mov    $0x14,%ecx
f01292e4:	b8 00 00 00 00       	mov    $0x0,%eax
f01292e9:	89 d7                	mov    %edx,%edi
f01292eb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01292ed:	e8 cd 35 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01292f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01292f5:	e8 42 aa fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01292fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01292fd:	83 ec 0c             	sub    $0xc,%esp
f0129300:	68 00 fc 1f 00       	push   $0x1ffc00
f0129305:	e8 f4 e4 fd ff       	call   f01077fe <kmalloc>
f012930a:	83 c4 10             	add    $0x10,%esp
f012930d:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129313:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129319:	89 c1                	mov    %eax,%ecx
f012931b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0129322:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129325:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012932a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012932d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129330:	ba 00 00 00 00       	mov    $0x0,%edx
f0129335:	f7 75 cc             	divl   -0x34(%ebp)
f0129338:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012933b:	29 d0                	sub    %edx,%eax
f012933d:	89 c3                	mov    %eax,%ebx
f012933f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129346:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012934b:	0f b6 d0             	movzbl %al,%edx
f012934e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129351:	01 d0                	add    %edx,%eax
f0129353:	48                   	dec    %eax
f0129354:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0129357:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012935a:	ba 00 00 00 00       	mov    $0x0,%edx
f012935f:	f7 75 c4             	divl   -0x3c(%ebp)
f0129362:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129365:	29 d0                	sub    %edx,%eax
f0129367:	01 c3                	add    %eax,%ebx
f0129369:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129370:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129375:	0f b6 c0             	movzbl %al,%eax
f0129378:	c1 e0 04             	shl    $0x4,%eax
f012937b:	89 c2                	mov    %eax,%edx
f012937d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0129380:	01 d0                	add    %edx,%eax
f0129382:	48                   	dec    %eax
f0129383:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129386:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129389:	ba 00 00 00 00       	mov    $0x0,%edx
f012938e:	f7 75 bc             	divl   -0x44(%ebp)
f0129391:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129394:	29 d0                	sub    %edx,%eax
f0129396:	01 d8                	add    %ebx,%eax
f0129398:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012939d:	39 c1                	cmp    %eax,%ecx
f012939f:	74 17                	je     f01293b8 <test_kfreelast+0x13c>
f01293a1:	83 ec 04             	sub    $0x4,%esp
f01293a4:	68 40 ad 13 f0       	push   $0xf013ad40
f01293a9:	68 ca 0c 00 00       	push   $0xcca
f01293ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f01293b3:	e8 43 6e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293b8:	e8 7f a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01293bd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293c0:	74 17                	je     f01293d9 <test_kfreelast+0x15d>
f01293c2:	83 ec 04             	sub    $0x4,%esp
f01293c5:	68 74 ac 13 f0       	push   $0xf013ac74
f01293ca:	68 cb 0c 00 00       	push   $0xccb
f01293cf:	68 5a ac 13 f0       	push   $0xf013ac5a
f01293d4:	e8 22 6e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01293d9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01293dc:	e8 de 34 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01293e1:	29 c3                	sub    %eax,%ebx
f01293e3:	89 d8                	mov    %ebx,%eax
f01293e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01293ea:	74 17                	je     f0129403 <test_kfreelast+0x187>
f01293ec:	83 ec 04             	sub    $0x4,%esp
f01293ef:	68 dc ac 13 f0       	push   $0xf013acdc
f01293f4:	68 cc 0c 00 00       	push   $0xccc
f01293f9:	68 5a ac 13 f0       	push   $0xf013ac5a
f01293fe:	e8 f8 6d fd ff       	call   f01001fb <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129403:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012940a:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012940d:	e8 ad 34 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129412:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129415:	e8 22 a9 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012941a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012941d:	83 ec 0c             	sub    $0xc,%esp
f0129420:	68 00 fc 1f 00       	push   $0x1ffc00
f0129425:	e8 d4 e3 fd ff       	call   f01077fe <kmalloc>
f012942a:	83 c4 10             	add    $0x10,%esp
f012942d:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129433:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129439:	89 c1                	mov    %eax,%ecx
f012943b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129442:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129445:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012944a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012944d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129450:	ba 00 00 00 00       	mov    $0x0,%edx
f0129455:	f7 75 b4             	divl   -0x4c(%ebp)
f0129458:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012945b:	29 d0                	sub    %edx,%eax
f012945d:	89 c3                	mov    %eax,%ebx
f012945f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129466:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012946b:	0f b6 d0             	movzbl %al,%edx
f012946e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129471:	01 d0                	add    %edx,%eax
f0129473:	48                   	dec    %eax
f0129474:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129477:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012947a:	ba 00 00 00 00       	mov    $0x0,%edx
f012947f:	f7 75 ac             	divl   -0x54(%ebp)
f0129482:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129485:	29 d0                	sub    %edx,%eax
f0129487:	01 c3                	add    %eax,%ebx
f0129489:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129490:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129495:	0f b6 c0             	movzbl %al,%eax
f0129498:	c1 e0 04             	shl    $0x4,%eax
f012949b:	89 c2                	mov    %eax,%edx
f012949d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01294a0:	01 d0                	add    %edx,%eax
f01294a2:	48                   	dec    %eax
f01294a3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01294a6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01294ae:	f7 75 a4             	divl   -0x5c(%ebp)
f01294b1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294b4:	29 d0                	sub    %edx,%eax
f01294b6:	01 d8                	add    %ebx,%eax
f01294b8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01294bd:	39 c1                	cmp    %eax,%ecx
f01294bf:	74 17                	je     f01294d8 <test_kfreelast+0x25c>
f01294c1:	83 ec 04             	sub    $0x4,%esp
f01294c4:	68 40 ad 13 f0       	push   $0xf013ad40
f01294c9:	68 d3 0c 00 00       	push   $0xcd3
f01294ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f01294d3:	e8 23 6d fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294d8:	e8 5f a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01294dd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294e0:	74 17                	je     f01294f9 <test_kfreelast+0x27d>
f01294e2:	83 ec 04             	sub    $0x4,%esp
f01294e5:	68 74 ac 13 f0       	push   $0xf013ac74
f01294ea:	68 d4 0c 00 00       	push   $0xcd4
f01294ef:	68 5a ac 13 f0       	push   $0xf013ac5a
f01294f4:	e8 02 6d fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294f9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01294fc:	e8 be 33 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129501:	29 c3                	sub    %eax,%ebx
f0129503:	89 d8                	mov    %ebx,%eax
f0129505:	3d 00 02 00 00       	cmp    $0x200,%eax
f012950a:	74 17                	je     f0129523 <test_kfreelast+0x2a7>
f012950c:	83 ec 04             	sub    $0x4,%esp
f012950f:	68 dc ac 13 f0       	push   $0xf013acdc
f0129514:	68 d5 0c 00 00       	push   $0xcd5
f0129519:	68 5a ac 13 f0       	push   $0xf013ac5a
f012951e:	e8 d8 6c fd ff       	call   f01001fb <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129523:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012952a:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012952d:	e8 8d 33 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129532:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129535:	e8 02 a8 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012953a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012953d:	83 ec 0c             	sub    $0xc,%esp
f0129540:	68 00 08 00 00       	push   $0x800
f0129545:	e8 b4 e2 fd ff       	call   f01077fe <kmalloc>
f012954a:	83 c4 10             	add    $0x10,%esp
f012954d:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129553:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129559:	89 c1                	mov    %eax,%ecx
f012955b:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0129562:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129565:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012956a:	89 45 98             	mov    %eax,-0x68(%ebp)
f012956d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129570:	ba 00 00 00 00       	mov    $0x0,%edx
f0129575:	f7 75 9c             	divl   -0x64(%ebp)
f0129578:	8b 45 98             	mov    -0x68(%ebp),%eax
f012957b:	29 d0                	sub    %edx,%eax
f012957d:	89 c3                	mov    %eax,%ebx
f012957f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129586:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012958b:	0f b6 d0             	movzbl %al,%edx
f012958e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129591:	01 d0                	add    %edx,%eax
f0129593:	48                   	dec    %eax
f0129594:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129597:	8b 45 90             	mov    -0x70(%ebp),%eax
f012959a:	ba 00 00 00 00       	mov    $0x0,%edx
f012959f:	f7 75 94             	divl   -0x6c(%ebp)
f01295a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01295a5:	29 d0                	sub    %edx,%eax
f01295a7:	01 c3                	add    %eax,%ebx
f01295a9:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01295b0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01295b5:	0f b6 c0             	movzbl %al,%eax
f01295b8:	c1 e0 04             	shl    $0x4,%eax
f01295bb:	89 c2                	mov    %eax,%edx
f01295bd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01295c0:	01 d0                	add    %edx,%eax
f01295c2:	48                   	dec    %eax
f01295c3:	89 45 88             	mov    %eax,-0x78(%ebp)
f01295c6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01295ce:	f7 75 8c             	divl   -0x74(%ebp)
f01295d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295d4:	29 d0                	sub    %edx,%eax
f01295d6:	01 d8                	add    %ebx,%eax
f01295d8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01295dd:	39 c1                	cmp    %eax,%ecx
f01295df:	74 17                	je     f01295f8 <test_kfreelast+0x37c>
f01295e1:	83 ec 04             	sub    $0x4,%esp
f01295e4:	68 40 ad 13 f0       	push   $0xf013ad40
f01295e9:	68 dc 0c 00 00       	push   $0xcdc
f01295ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f01295f3:	e8 03 6c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01295f8:	e8 3f a7 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01295fd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129600:	74 17                	je     f0129619 <test_kfreelast+0x39d>
f0129602:	83 ec 04             	sub    $0x4,%esp
f0129605:	68 74 ac 13 f0       	push   $0xf013ac74
f012960a:	68 dd 0c 00 00       	push   $0xcdd
f012960f:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129614:	e8 e2 6b fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129619:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012961c:	e8 9e 32 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129621:	29 c3                	sub    %eax,%ebx
f0129623:	89 d8                	mov    %ebx,%eax
f0129625:	83 f8 01             	cmp    $0x1,%eax
f0129628:	74 17                	je     f0129641 <test_kfreelast+0x3c5>
f012962a:	83 ec 04             	sub    $0x4,%esp
f012962d:	68 dc ac 13 f0       	push   $0xf013acdc
f0129632:	68 de 0c 00 00       	push   $0xcde
f0129637:	68 5a ac 13 f0       	push   $0xf013ac5a
f012963c:	e8 ba 6b fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129641:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f0129648:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012964b:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129651:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129654:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012965b:	eb 0e                	jmp    f012966b <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012965d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129660:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129663:	01 d0                	add    %edx,%eax
f0129665:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129668:	ff 45 f4             	incl   -0xc(%ebp)
f012966b:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129671:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129674:	7f e7                	jg     f012965d <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129676:	e8 44 32 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012967b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012967e:	e8 b9 a6 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129683:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0129686:	83 ec 0c             	sub    $0xc,%esp
f0129689:	68 00 08 00 00       	push   $0x800
f012968e:	e8 6b e1 fd ff       	call   f01077fe <kmalloc>
f0129693:	83 c4 10             	add    $0x10,%esp
f0129696:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012969c:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01296a2:	89 c1                	mov    %eax,%ecx
f01296a4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01296ab:	8b 45 80             	mov    -0x80(%ebp),%eax
f01296ae:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296b3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01296b9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01296bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01296c4:	f7 75 80             	divl   -0x80(%ebp)
f01296c7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01296cd:	29 d0                	sub    %edx,%eax
f01296cf:	89 c3                	mov    %eax,%ebx
f01296d1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01296d8:	10 00 00 
f01296db:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01296e0:	0f b6 d0             	movzbl %al,%edx
f01296e3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01296e9:	01 d0                	add    %edx,%eax
f01296eb:	48                   	dec    %eax
f01296ec:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01296f2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01296f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01296fd:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129703:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129709:	29 d0                	sub    %edx,%eax
f012970b:	01 c3                	add    %eax,%ebx
f012970d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129714:	10 00 00 
f0129717:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012971c:	0f b6 c0             	movzbl %al,%eax
f012971f:	c1 e0 04             	shl    $0x4,%eax
f0129722:	89 c2                	mov    %eax,%edx
f0129724:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012972a:	01 d0                	add    %edx,%eax
f012972c:	48                   	dec    %eax
f012972d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129733:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129739:	ba 00 00 00 00       	mov    $0x0,%edx
f012973e:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0129744:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012974a:	29 d0                	sub    %edx,%eax
f012974c:	01 d8                	add    %ebx,%eax
f012974e:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129753:	39 c1                	cmp    %eax,%ecx
f0129755:	74 17                	je     f012976e <test_kfreelast+0x4f2>
f0129757:	83 ec 04             	sub    $0x4,%esp
f012975a:	68 40 ad 13 f0       	push   $0xf013ad40
f012975f:	68 ea 0c 00 00       	push   $0xcea
f0129764:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129769:	e8 8d 6a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012976e:	e8 c9 a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129773:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129776:	74 17                	je     f012978f <test_kfreelast+0x513>
f0129778:	83 ec 04             	sub    $0x4,%esp
f012977b:	68 74 ac 13 f0       	push   $0xf013ac74
f0129780:	68 eb 0c 00 00       	push   $0xceb
f0129785:	68 5a ac 13 f0       	push   $0xf013ac5a
f012978a:	e8 6c 6a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012978f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129792:	e8 28 31 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129797:	29 c3                	sub    %eax,%ebx
f0129799:	89 d8                	mov    %ebx,%eax
f012979b:	83 f8 01             	cmp    $0x1,%eax
f012979e:	74 17                	je     f01297b7 <test_kfreelast+0x53b>
f01297a0:	83 ec 04             	sub    $0x4,%esp
f01297a3:	68 dc ac 13 f0       	push   $0xf013acdc
f01297a8:	68 ec 0c 00 00       	push   $0xcec
f01297ad:	68 5a ac 13 f0       	push   $0xf013ac5a
f01297b2:	e8 44 6a fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01297b7:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f01297be:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01297c1:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01297c7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01297ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01297d1:	eb 0e                	jmp    f01297e1 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f01297d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01297d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01297d9:	01 d0                	add    %edx,%eax
f01297db:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01297de:	ff 45 f4             	incl   -0xc(%ebp)
f01297e1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01297ea:	7f e7                	jg     f01297d3 <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01297ec:	e8 ce 30 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f01297f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297f4:	e8 43 a5 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01297f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01297fc:	83 ec 0c             	sub    $0xc,%esp
f01297ff:	68 00 1c 00 00       	push   $0x1c00
f0129804:	e8 f5 df fd ff       	call   f01077fe <kmalloc>
f0129809:	83 c4 10             	add    $0x10,%esp
f012980c:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129812:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129818:	89 c1                	mov    %eax,%ecx
f012981a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0129821:	10 00 00 
f0129824:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012982a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012982f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129835:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012983b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129840:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129846:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012984c:	29 d0                	sub    %edx,%eax
f012984e:	89 c3                	mov    %eax,%ebx
f0129850:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129857:	10 00 00 
f012985a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012985f:	0f b6 d0             	movzbl %al,%edx
f0129862:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0129868:	01 d0                	add    %edx,%eax
f012986a:	48                   	dec    %eax
f012986b:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129871:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129877:	ba 00 00 00 00       	mov    $0x0,%edx
f012987c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129882:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0129888:	29 d0                	sub    %edx,%eax
f012988a:	01 c3                	add    %eax,%ebx
f012988c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129893:	10 00 00 
f0129896:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012989b:	0f b6 c0             	movzbl %al,%eax
f012989e:	c1 e0 04             	shl    $0x4,%eax
f01298a1:	89 c2                	mov    %eax,%edx
f01298a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01298a9:	01 d0                	add    %edx,%eax
f01298ab:	48                   	dec    %eax
f01298ac:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01298b2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01298bd:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01298c3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298c9:	29 d0                	sub    %edx,%eax
f01298cb:	01 d8                	add    %ebx,%eax
f01298cd:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01298d2:	39 c1                	cmp    %eax,%ecx
f01298d4:	74 17                	je     f01298ed <test_kfreelast+0x671>
f01298d6:	83 ec 04             	sub    $0x4,%esp
f01298d9:	68 40 ad 13 f0       	push   $0xf013ad40
f01298de:	68 f8 0c 00 00       	push   $0xcf8
f01298e3:	68 5a ac 13 f0       	push   $0xf013ac5a
f01298e8:	e8 0e 69 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298ed:	e8 4a a4 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f01298f2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01298f5:	74 17                	je     f012990e <test_kfreelast+0x692>
f01298f7:	83 ec 04             	sub    $0x4,%esp
f01298fa:	68 74 ac 13 f0       	push   $0xf013ac74
f01298ff:	68 f9 0c 00 00       	push   $0xcf9
f0129904:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129909:	e8 ed 68 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012990e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129911:	e8 a9 2f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129916:	29 c3                	sub    %eax,%ebx
f0129918:	89 d8                	mov    %ebx,%eax
f012991a:	83 f8 02             	cmp    $0x2,%eax
f012991d:	74 17                	je     f0129936 <test_kfreelast+0x6ba>
f012991f:	83 ec 04             	sub    $0x4,%esp
f0129922:	68 dc ac 13 f0       	push   $0xf013acdc
f0129927:	68 fa 0c 00 00       	push   $0xcfa
f012992c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129931:	e8 c5 68 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0129936:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012993d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129940:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129946:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129949:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129950:	eb 0e                	jmp    f0129960 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f0129952:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129955:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129958:	01 d0                	add    %edx,%eax
f012995a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012995d:	ff 45 f4             	incl   -0xc(%ebp)
f0129960:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129966:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129969:	7f e7                	jg     f0129952 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012996b:	e8 4f 2f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129970:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129973:	e8 c4 a3 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129978:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012997b:	83 ec 0c             	sub    $0xc,%esp
f012997e:	68 00 fc 2f 00       	push   $0x2ffc00
f0129983:	e8 76 de fd ff       	call   f01077fe <kmalloc>
f0129988:	83 c4 10             	add    $0x10,%esp
f012998b:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129991:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129997:	89 c1                	mov    %eax,%ecx
f0129999:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01299a0:	10 00 00 
f01299a3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01299a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01299ae:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01299b4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01299ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01299bf:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01299c5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01299cb:	29 d0                	sub    %edx,%eax
f01299cd:	89 c3                	mov    %eax,%ebx
f01299cf:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01299d6:	10 00 00 
f01299d9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f01299de:	0f b6 d0             	movzbl %al,%edx
f01299e1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01299e7:	01 d0                	add    %edx,%eax
f01299e9:	48                   	dec    %eax
f01299ea:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01299f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01299f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01299fb:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129a01:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129a07:	29 d0                	sub    %edx,%eax
f0129a09:	01 c3                	add    %eax,%ebx
f0129a0b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129a12:	10 00 00 
f0129a15:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129a1a:	0f b6 c0             	movzbl %al,%eax
f0129a1d:	c1 e0 04             	shl    $0x4,%eax
f0129a20:	89 c2                	mov    %eax,%edx
f0129a22:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129a28:	01 d0                	add    %edx,%eax
f0129a2a:	48                   	dec    %eax
f0129a2b:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a31:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a37:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a3c:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129a42:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a48:	29 d0                	sub    %edx,%eax
f0129a4a:	01 d8                	add    %ebx,%eax
f0129a4c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129a51:	39 c1                	cmp    %eax,%ecx
f0129a53:	74 17                	je     f0129a6c <test_kfreelast+0x7f0>
f0129a55:	83 ec 04             	sub    $0x4,%esp
f0129a58:	68 40 ad 13 f0       	push   $0xf013ad40
f0129a5d:	68 06 0d 00 00       	push   $0xd06
f0129a62:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129a67:	e8 8f 67 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129a6c:	e8 cb a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129a71:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a74:	74 17                	je     f0129a8d <test_kfreelast+0x811>
f0129a76:	83 ec 04             	sub    $0x4,%esp
f0129a79:	68 74 ac 13 f0       	push   $0xf013ac74
f0129a7e:	68 07 0d 00 00       	push   $0xd07
f0129a83:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129a88:	e8 6e 67 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129a8d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129a90:	e8 2a 2e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129a95:	29 c3                	sub    %eax,%ebx
f0129a97:	89 d8                	mov    %ebx,%eax
f0129a99:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a9e:	74 17                	je     f0129ab7 <test_kfreelast+0x83b>
f0129aa0:	83 ec 04             	sub    $0x4,%esp
f0129aa3:	68 dc ac 13 f0       	push   $0xf013acdc
f0129aa8:	68 08 0d 00 00       	push   $0xd08
f0129aad:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129ab2:	e8 44 67 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129ab7:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f0129abe:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129ac1:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ac7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129aca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129ad1:	eb 0e                	jmp    f0129ae1 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f0129ad3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129ad6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129ad9:	01 d0                	add    %edx,%eax
f0129adb:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129ade:	ff 45 f4             	incl   -0xc(%ebp)
f0129ae1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129ae7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129aea:	7f e7                	jg     f0129ad3 <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129aec:	e8 ce 2d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129af1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129af4:	e8 43 a2 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129af9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129afc:	83 ec 0c             	sub    $0xc,%esp
f0129aff:	68 00 fc 5f 00       	push   $0x5ffc00
f0129b04:	e8 f5 dc fd ff       	call   f01077fe <kmalloc>
f0129b09:	83 c4 10             	add    $0x10,%esp
f0129b0c:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129b12:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129b18:	89 c1                	mov    %eax,%ecx
f0129b1a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129b21:	10 00 00 
f0129b24:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129b2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129b2f:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129b35:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129b3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b40:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129b46:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129b4c:	29 d0                	sub    %edx,%eax
f0129b4e:	89 c3                	mov    %eax,%ebx
f0129b50:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129b57:	10 00 00 
f0129b5a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129b5f:	0f b6 d0             	movzbl %al,%edx
f0129b62:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129b68:	01 d0                	add    %edx,%eax
f0129b6a:	48                   	dec    %eax
f0129b6b:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129b71:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b77:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b7c:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129b82:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b88:	29 d0                	sub    %edx,%eax
f0129b8a:	01 c3                	add    %eax,%ebx
f0129b8c:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0129b93:	10 00 00 
f0129b96:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129b9b:	0f b6 c0             	movzbl %al,%eax
f0129b9e:	c1 e0 04             	shl    $0x4,%eax
f0129ba1:	89 c2                	mov    %eax,%edx
f0129ba3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129ba9:	01 d0                	add    %edx,%eax
f0129bab:	48                   	dec    %eax
f0129bac:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0129bb2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129bb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bbd:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0129bc3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129bc9:	29 d0                	sub    %edx,%eax
f0129bcb:	01 d8                	add    %ebx,%eax
f0129bcd:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129bd2:	39 c1                	cmp    %eax,%ecx
f0129bd4:	74 17                	je     f0129bed <test_kfreelast+0x971>
f0129bd6:	83 ec 04             	sub    $0x4,%esp
f0129bd9:	68 40 ad 13 f0       	push   $0xf013ad40
f0129bde:	68 14 0d 00 00       	push   $0xd14
f0129be3:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129be8:	e8 0e 66 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129bed:	e8 4a a1 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129bf2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129bf5:	74 17                	je     f0129c0e <test_kfreelast+0x992>
f0129bf7:	83 ec 04             	sub    $0x4,%esp
f0129bfa:	68 74 ac 13 f0       	push   $0xf013ac74
f0129bff:	68 15 0d 00 00       	push   $0xd15
f0129c04:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129c09:	e8 ed 65 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129c0e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c11:	e8 a9 2c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129c16:	29 c3                	sub    %eax,%ebx
f0129c18:	89 d8                	mov    %ebx,%eax
f0129c1a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129c1f:	74 17                	je     f0129c38 <test_kfreelast+0x9bc>
f0129c21:	83 ec 04             	sub    $0x4,%esp
f0129c24:	68 dc ac 13 f0       	push   $0xf013acdc
f0129c29:	68 16 0d 00 00       	push   $0xd16
f0129c2e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129c33:	e8 c3 65 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0129c38:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f0129c3f:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129c42:	e8 78 2c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129c47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c4a:	e8 ed a0 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129c4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0129c52:	83 ec 0c             	sub    $0xc,%esp
f0129c55:	68 00 38 00 00       	push   $0x3800
f0129c5a:	e8 9f db fd ff       	call   f01077fe <kmalloc>
f0129c5f:	83 c4 10             	add    $0x10,%esp
f0129c62:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129c68:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129c6e:	89 c1                	mov    %eax,%ecx
f0129c70:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129c77:	10 00 00 
f0129c7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129c80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129c85:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129c8b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129c91:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c96:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129c9c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129ca2:	29 d0                	sub    %edx,%eax
f0129ca4:	89 c3                	mov    %eax,%ebx
f0129ca6:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129cad:	10 00 00 
f0129cb0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129cb5:	0f b6 d0             	movzbl %al,%edx
f0129cb8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129cbe:	01 d0                	add    %edx,%eax
f0129cc0:	48                   	dec    %eax
f0129cc1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129cc7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129ccd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129cd2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129cd8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129cde:	29 d0                	sub    %edx,%eax
f0129ce0:	01 c3                	add    %eax,%ebx
f0129ce2:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129ce9:	10 00 00 
f0129cec:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0129cf1:	0f b6 c0             	movzbl %al,%eax
f0129cf4:	c1 e0 04             	shl    $0x4,%eax
f0129cf7:	89 c2                	mov    %eax,%edx
f0129cf9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129cff:	01 d0                	add    %edx,%eax
f0129d01:	48                   	dec    %eax
f0129d02:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129d08:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d13:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129d19:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129d1f:	29 d0                	sub    %edx,%eax
f0129d21:	01 d8                	add    %ebx,%eax
f0129d23:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129d28:	39 c1                	cmp    %eax,%ecx
f0129d2a:	74 17                	je     f0129d43 <test_kfreelast+0xac7>
f0129d2c:	83 ec 04             	sub    $0x4,%esp
f0129d2f:	68 40 ad 13 f0       	push   $0xf013ad40
f0129d34:	68 1d 0d 00 00       	push   $0xd1d
f0129d39:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d3e:	e8 b8 64 fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129d43:	e8 f4 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129d48:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d4b:	74 17                	je     f0129d64 <test_kfreelast+0xae8>
f0129d4d:	83 ec 04             	sub    $0x4,%esp
f0129d50:	68 74 ac 13 f0       	push   $0xf013ac74
f0129d55:	68 1e 0d 00 00       	push   $0xd1e
f0129d5a:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d5f:	e8 97 64 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129d64:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d67:	e8 53 2b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129d6c:	29 c3                	sub    %eax,%ebx
f0129d6e:	89 d8                	mov    %ebx,%eax
f0129d70:	83 f8 04             	cmp    $0x4,%eax
f0129d73:	74 17                	je     f0129d8c <test_kfreelast+0xb10>
f0129d75:	83 ec 04             	sub    $0x4,%esp
f0129d78:	68 dc ac 13 f0       	push   $0xf013acdc
f0129d7d:	68 1f 0d 00 00       	push   $0xd1f
f0129d82:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129d87:	e8 6f 64 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0129d8c:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f0129d93:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129d96:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129d9c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129da6:	eb 0e                	jmp    f0129db6 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129da8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129dab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129dae:	01 d0                	add    %edx,%eax
f0129db0:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129db3:	ff 45 f4             	incl   -0xc(%ebp)
f0129db6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129dbc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129dbf:	7f e7                	jg     f0129da8 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0129dc1:	e8 f9 2a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129dc6:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129dcc:	e8 6b 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129dd1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129dd7:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129ddd:	83 ec 0c             	sub    $0xc,%esp
f0129de0:	50                   	push   %eax
f0129de1:	e8 da da fd ff       	call   f01078c0 <kfree>
f0129de6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129de9:	e8 4e 9f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129dee:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129df4:	74 17                	je     f0129e0d <test_kfreelast+0xb91>
f0129df6:	83 ec 04             	sub    $0x4,%esp
f0129df9:	68 74 ac 13 f0       	push   $0xf013ac74
f0129dfe:	68 2e 0d 00 00       	push   $0xd2e
f0129e03:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e08:	e8 ee 63 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129e0d:	e8 ad 2a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129e12:	89 c2                	mov    %eax,%edx
f0129e14:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e1a:	29 c2                	sub    %eax,%edx
f0129e1c:	89 d0                	mov    %edx,%eax
f0129e1e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129e23:	74 17                	je     f0129e3c <test_kfreelast+0xbc0>
f0129e25:	83 ec 04             	sub    $0x4,%esp
f0129e28:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129e2d:	68 2f 0d 00 00       	push   $0xd2f
f0129e32:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e37:	e8 bf 63 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e3c:	e8 7e 2a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129e41:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e47:	e8 f0 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e4c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f0129e52:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0129e58:	83 ec 0c             	sub    $0xc,%esp
f0129e5b:	50                   	push   %eax
f0129e5c:	e8 5f da fd ff       	call   f01078c0 <kfree>
f0129e61:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e64:	e8 d3 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129e69:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129e6f:	74 17                	je     f0129e88 <test_kfreelast+0xc0c>
f0129e71:	83 ec 04             	sub    $0x4,%esp
f0129e74:	68 74 ac 13 f0       	push   $0xf013ac74
f0129e79:	68 35 0d 00 00       	push   $0xd35
f0129e7e:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129e83:	e8 73 63 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0129e88:	e8 32 2a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129e8d:	89 c2                	mov    %eax,%edx
f0129e8f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e95:	29 c2                	sub    %eax,%edx
f0129e97:	89 d0                	mov    %edx,%eax
f0129e99:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129e9e:	74 17                	je     f0129eb7 <test_kfreelast+0xc3b>
f0129ea0:	83 ec 04             	sub    $0x4,%esp
f0129ea3:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129ea8:	68 36 0d 00 00       	push   $0xd36
f0129ead:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129eb2:	e8 44 63 fd ff       	call   f01001fb <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129eb7:	e8 03 2a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129ebc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ec2:	e8 75 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ec7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129ecd:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129ed3:	83 ec 0c             	sub    $0xc,%esp
f0129ed6:	50                   	push   %eax
f0129ed7:	e8 e4 d9 fd ff       	call   f01078c0 <kfree>
f0129edc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129edf:	e8 58 9e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f0129ee4:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129eea:	74 17                	je     f0129f03 <test_kfreelast+0xc87>
f0129eec:	83 ec 04             	sub    $0x4,%esp
f0129eef:	68 74 ac 13 f0       	push   $0xf013ac74
f0129ef4:	68 3c 0d 00 00       	push   $0xd3c
f0129ef9:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129efe:	e8 f8 62 fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0129f03:	e8 b7 29 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f0129f08:	89 c2                	mov    %eax,%edx
f0129f0a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129f10:	29 c2                	sub    %eax,%edx
f0129f12:	89 d0                	mov    %edx,%eax
f0129f14:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129f19:	74 17                	je     f0129f32 <test_kfreelast+0xcb6>
f0129f1b:	83 ec 04             	sub    $0x4,%esp
f0129f1e:	68 e4 b3 13 f0       	push   $0xf013b3e4
f0129f23:	68 3d 0d 00 00       	push   $0xd3d
f0129f28:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129f2d:	e8 c9 62 fd ff       	call   f01001fb <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0129f32:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0129f38:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0129f3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f42:	eb 1e                	jmp    f0129f62 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f0129f44:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129f4a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129f4d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129f50:	01 c8                	add    %ecx,%eax
f0129f52:	8a 00                	mov    (%eax),%al
f0129f54:	0f be c0             	movsbl %al,%eax
f0129f57:	01 d0                	add    %edx,%eax
f0129f59:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0129f5f:	ff 45 f4             	incl   -0xc(%ebp)
f0129f62:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129f68:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f6b:	7f d7                	jg     f0129f44 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0129f6d:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f0129f73:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129f79:	01 c0                	add    %eax,%eax
f0129f7b:	39 c2                	cmp    %eax,%edx
f0129f7d:	74 17                	je     f0129f96 <test_kfreelast+0xd1a>
f0129f7f:	83 ec 04             	sub    $0x4,%esp
f0129f82:	68 40 b4 13 f0       	push   $0xf013b440
f0129f87:	68 48 0d 00 00       	push   $0xd48
f0129f8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129f91:	e8 65 62 fd ff       	call   f01001fb <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0129f96:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129f9c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129f9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129fa6:	eb 1e                	jmp    f0129fc6 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0129fa8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129fae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129fb1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129fb4:	01 c8                	add    %ecx,%eax
f0129fb6:	8a 00                	mov    (%eax),%al
f0129fb8:	0f be c0             	movsbl %al,%eax
f0129fbb:	01 d0                	add    %edx,%eax
f0129fbd:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129fc3:	ff 45 f4             	incl   -0xc(%ebp)
f0129fc6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129fcc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129fcf:	7f d7                	jg     f0129fa8 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129fd1:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129fd7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129fdd:	89 c1                	mov    %eax,%ecx
f0129fdf:	01 c9                	add    %ecx,%ecx
f0129fe1:	01 c8                	add    %ecx,%eax
f0129fe3:	39 c2                	cmp    %eax,%edx
f0129fe5:	74 17                	je     f0129ffe <test_kfreelast+0xd82>
f0129fe7:	83 ec 04             	sub    $0x4,%esp
f0129fea:	68 40 b4 13 f0       	push   $0xf013b440
f0129fef:	68 50 0d 00 00       	push   $0xd50
f0129ff4:	68 5a ac 13 f0       	push   $0xf013ac5a
f0129ff9:	e8 fd 61 fd ff       	call   f01001fb <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129ffe:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a004:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a007:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a00e:	eb 1e                	jmp    f012a02e <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012a010:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012a016:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a019:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a01c:	01 c8                	add    %ecx,%eax
f012a01e:	8a 00                	mov    (%eax),%al
f012a020:	0f be c0             	movsbl %al,%eax
f012a023:	01 d0                	add    %edx,%eax
f012a025:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a02b:	ff 45 f4             	incl   -0xc(%ebp)
f012a02e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a034:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a037:	7f d7                	jg     f012a010 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012a039:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012a03f:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012a045:	c1 e2 02             	shl    $0x2,%edx
f012a048:	39 d0                	cmp    %edx,%eax
f012a04a:	74 17                	je     f012a063 <test_kfreelast+0xde7>
f012a04c:	83 ec 04             	sub    $0x4,%esp
f012a04f:	68 40 b4 13 f0       	push   $0xf013b440
f012a054:	68 58 0d 00 00       	push   $0xd58
f012a059:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a05e:	e8 98 61 fd ff       	call   f01001fb <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012a063:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a069:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a06c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a073:	eb 1e                	jmp    f012a093 <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012a075:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012a07b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a07e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a081:	01 c8                	add    %ecx,%eax
f012a083:	8a 00                	mov    (%eax),%al
f012a085:	0f be c0             	movsbl %al,%eax
f012a088:	01 d0                	add    %edx,%eax
f012a08a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a090:	ff 45 f4             	incl   -0xc(%ebp)
f012a093:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a099:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a09c:	7f d7                	jg     f012a075 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012a09e:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012a0a4:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012a0aa:	89 d0                	mov    %edx,%eax
f012a0ac:	c1 e0 02             	shl    $0x2,%eax
f012a0af:	01 d0                	add    %edx,%eax
f012a0b1:	39 c1                	cmp    %eax,%ecx
f012a0b3:	74 17                	je     f012a0cc <test_kfreelast+0xe50>
f012a0b5:	83 ec 04             	sub    $0x4,%esp
f012a0b8:	68 40 b4 13 f0       	push   $0xf013b440
f012a0bd:	68 60 0d 00 00       	push   $0xd60
f012a0c2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a0c7:	e8 2f 61 fd ff       	call   f01001fb <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012a0cc:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a0d2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012a0d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a0dc:	eb 1e                	jmp    f012a0fc <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012a0de:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012a0e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a0e7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a0ea:	01 c8                	add    %ecx,%eax
f012a0ec:	8a 00                	mov    (%eax),%al
f012a0ee:	0f be c0             	movsbl %al,%eax
f012a0f1:	01 d0                	add    %edx,%eax
f012a0f3:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012a0f9:	ff 45 f4             	incl   -0xc(%ebp)
f012a0fc:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012a102:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a105:	7f d7                	jg     f012a0de <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012a107:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012a10d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012a113:	89 d0                	mov    %edx,%eax
f012a115:	01 c0                	add    %eax,%eax
f012a117:	01 d0                	add    %edx,%eax
f012a119:	01 c0                	add    %eax,%eax
f012a11b:	01 d0                	add    %edx,%eax
f012a11d:	39 c1                	cmp    %eax,%ecx
f012a11f:	74 17                	je     f012a138 <test_kfreelast+0xebc>
f012a121:	83 ec 04             	sub    $0x4,%esp
f012a124:	68 40 b4 13 f0       	push   $0xf013b440
f012a129:	68 68 0d 00 00       	push   $0xd68
f012a12e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a133:	e8 c3 60 fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a138:	e8 82 27 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a13d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a140:	e8 f7 9b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a145:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012a148:	83 ec 0c             	sub    $0xc,%esp
f012a14b:	68 00 50 00 00       	push   $0x5000
f012a150:	e8 a9 d6 fd ff       	call   f01077fe <kmalloc>
f012a155:	83 c4 10             	add    $0x10,%esp
f012a158:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a15e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a164:	89 c1                	mov    %eax,%ecx
f012a166:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012a16d:	10 00 00 
f012a170:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012a176:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a17b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012a181:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a187:	ba 00 00 00 00       	mov    $0x0,%edx
f012a18c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012a192:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012a198:	29 d0                	sub    %edx,%eax
f012a19a:	89 c3                	mov    %eax,%ebx
f012a19c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012a1a3:	10 00 00 
f012a1a6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a1ab:	0f b6 d0             	movzbl %al,%edx
f012a1ae:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012a1b4:	01 d0                	add    %edx,%eax
f012a1b6:	48                   	dec    %eax
f012a1b7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012a1bd:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a1c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1c8:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012a1ce:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012a1d4:	29 d0                	sub    %edx,%eax
f012a1d6:	01 c3                	add    %eax,%ebx
f012a1d8:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012a1df:	10 00 00 
f012a1e2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a1e7:	0f b6 c0             	movzbl %al,%eax
f012a1ea:	c1 e0 04             	shl    $0x4,%eax
f012a1ed:	89 c2                	mov    %eax,%edx
f012a1ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012a1f5:	01 d0                	add    %edx,%eax
f012a1f7:	48                   	dec    %eax
f012a1f8:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012a1fe:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a204:	ba 00 00 00 00       	mov    $0x0,%edx
f012a209:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012a20f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012a215:	29 d0                	sub    %edx,%eax
f012a217:	01 d8                	add    %ebx,%eax
f012a219:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012a21e:	39 c1                	cmp    %eax,%ecx
f012a220:	74 17                	je     f012a239 <test_kfreelast+0xfbd>
f012a222:	83 ec 04             	sub    $0x4,%esp
f012a225:	68 40 ad 13 f0       	push   $0xf013ad40
f012a22a:	68 71 0d 00 00       	push   $0xd71
f012a22f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a234:	e8 c2 5f fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a239:	e8 fe 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a23e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a241:	74 17                	je     f012a25a <test_kfreelast+0xfde>
f012a243:	83 ec 04             	sub    $0x4,%esp
f012a246:	68 74 ac 13 f0       	push   $0xf013ac74
f012a24b:	68 72 0d 00 00       	push   $0xd72
f012a250:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a255:	e8 a1 5f fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a25a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a25d:	e8 5d 26 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a262:	29 c3                	sub    %eax,%ebx
f012a264:	89 d8                	mov    %ebx,%eax
f012a266:	83 f8 05             	cmp    $0x5,%eax
f012a269:	74 17                	je     f012a282 <test_kfreelast+0x1006>
f012a26b:	83 ec 04             	sub    $0x4,%esp
f012a26e:	68 dc ac 13 f0       	push   $0xf013acdc
f012a273:	68 73 0d 00 00       	push   $0xd73
f012a278:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a27d:	e8 79 5f fd ff       	call   f01001fb <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012a282:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012a289:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012a28c:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a292:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012a295:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a29c:	eb 0e                	jmp    f012a2ac <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012a29e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a2a1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a2a4:	01 d0                	add    %edx,%eax
f012a2a6:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012a2a9:	ff 45 f4             	incl   -0xc(%ebp)
f012a2ac:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012a2b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a2b5:	7f e7                	jg     f012a29e <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a2b7:	e8 03 26 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a2bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2bf:	e8 78 9a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a2c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012a2c7:	83 ec 0c             	sub    $0xc,%esp
f012a2ca:	68 00 00 10 00       	push   $0x100000
f012a2cf:	e8 2a d5 fd ff       	call   f01077fe <kmalloc>
f012a2d4:	83 c4 10             	add    $0x10,%esp
f012a2d7:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a2dd:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a2e3:	89 c1                	mov    %eax,%ecx
f012a2e5:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012a2ec:	10 00 00 
f012a2ef:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012a2f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a2fa:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012a300:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a306:	ba 00 00 00 00       	mov    $0x0,%edx
f012a30b:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012a311:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012a317:	29 d0                	sub    %edx,%eax
f012a319:	89 c3                	mov    %eax,%ebx
f012a31b:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012a322:	10 00 00 
f012a325:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a32a:	0f b6 d0             	movzbl %al,%edx
f012a32d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012a333:	01 d0                	add    %edx,%eax
f012a335:	48                   	dec    %eax
f012a336:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012a33c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a342:	ba 00 00 00 00       	mov    $0x0,%edx
f012a347:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012a34d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012a353:	29 d0                	sub    %edx,%eax
f012a355:	01 c3                	add    %eax,%ebx
f012a357:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012a35e:	10 00 00 
f012a361:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a366:	0f b6 c0             	movzbl %al,%eax
f012a369:	c1 e0 04             	shl    $0x4,%eax
f012a36c:	89 c2                	mov    %eax,%edx
f012a36e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012a374:	01 d0                	add    %edx,%eax
f012a376:	48                   	dec    %eax
f012a377:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012a37d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a383:	ba 00 00 00 00       	mov    $0x0,%edx
f012a388:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012a38e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012a394:	29 d0                	sub    %edx,%eax
f012a396:	01 d8                	add    %ebx,%eax
f012a398:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a39d:	39 c1                	cmp    %eax,%ecx
f012a39f:	74 17                	je     f012a3b8 <test_kfreelast+0x113c>
f012a3a1:	83 ec 04             	sub    $0x4,%esp
f012a3a4:	68 40 ad 13 f0       	push   $0xf013ad40
f012a3a9:	68 7f 0d 00 00       	push   $0xd7f
f012a3ae:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a3b3:	e8 43 5e fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a3b8:	e8 7f 99 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a3bd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3c0:	74 17                	je     f012a3d9 <test_kfreelast+0x115d>
f012a3c2:	83 ec 04             	sub    $0x4,%esp
f012a3c5:	68 74 ac 13 f0       	push   $0xf013ac74
f012a3ca:	68 80 0d 00 00       	push   $0xd80
f012a3cf:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a3d4:	e8 22 5e fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a3d9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a3dc:	e8 de 24 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a3e1:	29 c3                	sub    %eax,%ebx
f012a3e3:	89 d8                	mov    %ebx,%eax
f012a3e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a3ea:	74 17                	je     f012a403 <test_kfreelast+0x1187>
f012a3ec:	83 ec 04             	sub    $0x4,%esp
f012a3ef:	68 dc ac 13 f0       	push   $0xf013acdc
f012a3f4:	68 81 0d 00 00       	push   $0xd81
f012a3f9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a3fe:	e8 f8 5d fd ff       	call   f01001fb <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012a403:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012a40a:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012a40d:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a413:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012a416:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a41d:	eb 0e                	jmp    f012a42d <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012a41f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a422:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a425:	01 d0                	add    %edx,%eax
f012a427:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012a42a:	ff 45 f4             	incl   -0xc(%ebp)
f012a42d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012a433:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a436:	7f e7                	jg     f012a41f <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012a438:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a43f:	e8 7b 24 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a444:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a447:	e8 f0 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a44c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a44f:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012a455:	83 ec 0c             	sub    $0xc,%esp
f012a458:	50                   	push   %eax
f012a459:	e8 62 d4 fd ff       	call   f01078c0 <kfree>
f012a45e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a461:	e8 d6 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a466:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a469:	74 17                	je     f012a482 <test_kfreelast+0x1206>
f012a46b:	83 ec 04             	sub    $0x4,%esp
f012a46e:	68 74 ac 13 f0       	push   $0xf013ac74
f012a473:	68 91 0d 00 00       	push   $0xd91
f012a478:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a47d:	e8 79 5d fd ff       	call   f01001fb <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012a482:	e8 38 24 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a487:	89 c2                	mov    %eax,%edx
f012a489:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a48c:	29 c2                	sub    %eax,%edx
f012a48e:	89 d0                	mov    %edx,%eax
f012a490:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a495:	74 17                	je     f012a4ae <test_kfreelast+0x1232>
f012a497:	83 ec 04             	sub    $0x4,%esp
f012a49a:	68 e4 b3 13 f0       	push   $0xf013b3e4
f012a49f:	68 92 0d 00 00       	push   $0xd92
f012a4a4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a4a9:	e8 4d 5d fd ff       	call   f01001fb <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a4ae:	e8 0c 24 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a4b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4b6:	e8 81 98 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a4bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012a4be:	83 ec 0c             	sub    $0xc,%esp
f012a4c1:	68 00 78 00 00       	push   $0x7800
f012a4c6:	e8 33 d3 fd ff       	call   f01077fe <kmalloc>
f012a4cb:	83 c4 10             	add    $0x10,%esp
f012a4ce:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4d4:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a4da:	89 c1                	mov    %eax,%ecx
f012a4dc:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012a4e3:	10 00 00 
f012a4e6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012a4ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4f1:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012a4f7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a4fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a502:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012a508:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012a50e:	29 d0                	sub    %edx,%eax
f012a510:	89 c3                	mov    %eax,%ebx
f012a512:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012a519:	10 00 00 
f012a51c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a521:	0f b6 d0             	movzbl %al,%edx
f012a524:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012a52a:	01 d0                	add    %edx,%eax
f012a52c:	48                   	dec    %eax
f012a52d:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012a533:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a539:	ba 00 00 00 00       	mov    $0x0,%edx
f012a53e:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012a544:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a54a:	29 d0                	sub    %edx,%eax
f012a54c:	01 c3                	add    %eax,%ebx
f012a54e:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012a555:	10 00 00 
f012a558:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a55d:	0f b6 c0             	movzbl %al,%eax
f012a560:	c1 e0 04             	shl    $0x4,%eax
f012a563:	89 c2                	mov    %eax,%edx
f012a565:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a56b:	01 d0                	add    %edx,%eax
f012a56d:	48                   	dec    %eax
f012a56e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012a574:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a57a:	ba 00 00 00 00       	mov    $0x0,%edx
f012a57f:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012a585:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a58b:	29 d0                	sub    %edx,%eax
f012a58d:	01 d8                	add    %ebx,%eax
f012a58f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a594:	39 c1                	cmp    %eax,%ecx
f012a596:	74 17                	je     f012a5af <test_kfreelast+0x1333>
f012a598:	83 ec 04             	sub    $0x4,%esp
f012a59b:	68 40 ad 13 f0       	push   $0xf013ad40
f012a5a0:	68 9b 0d 00 00       	push   $0xd9b
f012a5a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5aa:	e8 4c 5c fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5af:	e8 88 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a5b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5b7:	74 17                	je     f012a5d0 <test_kfreelast+0x1354>
f012a5b9:	83 ec 04             	sub    $0x4,%esp
f012a5bc:	68 74 ac 13 f0       	push   $0xf013ac74
f012a5c1:	68 9c 0d 00 00       	push   $0xd9c
f012a5c6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5cb:	e8 2b 5c fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5d0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5d3:	e8 e7 22 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a5d8:	29 c3                	sub    %eax,%ebx
f012a5da:	89 d8                	mov    %ebx,%eax
f012a5dc:	83 f8 08             	cmp    $0x8,%eax
f012a5df:	74 17                	je     f012a5f8 <test_kfreelast+0x137c>
f012a5e1:	83 ec 04             	sub    $0x4,%esp
f012a5e4:	68 dc ac 13 f0       	push   $0xf013acdc
f012a5e9:	68 9d 0d 00 00       	push   $0xd9d
f012a5ee:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a5f3:	e8 03 5c fd ff       	call   f01001fb <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a5f8:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a5ff:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a602:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a608:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a60b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a612:	eb 0e                	jmp    f012a622 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a614:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a617:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a61a:	01 d0                	add    %edx,%eax
f012a61c:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a61f:	ff 45 f4             	incl   -0xc(%ebp)
f012a622:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a628:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a62b:	7f e7                	jg     f012a614 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a62d:	e8 8d 22 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a632:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a635:	e8 02 97 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a63a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a63d:	83 ec 0c             	sub    $0xc,%esp
f012a640:	68 00 00 10 00       	push   $0x100000
f012a645:	e8 b4 d1 fd ff       	call   f01077fe <kmalloc>
f012a64a:	83 c4 10             	add    $0x10,%esp
f012a64d:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a653:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a659:	89 c1                	mov    %eax,%ecx
f012a65b:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a662:	10 00 00 
f012a665:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a66b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a670:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a676:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a67c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a681:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a687:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a68d:	29 d0                	sub    %edx,%eax
f012a68f:	89 c3                	mov    %eax,%ebx
f012a691:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a698:	10 00 00 
f012a69b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6a0:	0f b6 d0             	movzbl %al,%edx
f012a6a3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a6a9:	01 d0                	add    %edx,%eax
f012a6ab:	48                   	dec    %eax
f012a6ac:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a6b2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a6b8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6bd:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a6c3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a6c9:	29 d0                	sub    %edx,%eax
f012a6cb:	01 c3                	add    %eax,%ebx
f012a6cd:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a6d4:	10 00 00 
f012a6d7:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a6dc:	0f b6 c0             	movzbl %al,%eax
f012a6df:	c1 e0 04             	shl    $0x4,%eax
f012a6e2:	89 c2                	mov    %eax,%edx
f012a6e4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a6ea:	01 d0                	add    %edx,%eax
f012a6ec:	48                   	dec    %eax
f012a6ed:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a6f3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a6f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6fe:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a704:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a70a:	29 d0                	sub    %edx,%eax
f012a70c:	01 d8                	add    %ebx,%eax
f012a70e:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a713:	39 c1                	cmp    %eax,%ecx
f012a715:	74 17                	je     f012a72e <test_kfreelast+0x14b2>
f012a717:	83 ec 04             	sub    $0x4,%esp
f012a71a:	68 40 ad 13 f0       	push   $0xf013ad40
f012a71f:	68 a9 0d 00 00       	push   $0xda9
f012a724:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a729:	e8 cd 5a fd ff       	call   f01001fb <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a72e:	e8 09 96 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a733:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a736:	74 17                	je     f012a74f <test_kfreelast+0x14d3>
f012a738:	83 ec 04             	sub    $0x4,%esp
f012a73b:	68 74 ac 13 f0       	push   $0xf013ac74
f012a740:	68 aa 0d 00 00       	push   $0xdaa
f012a745:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a74a:	e8 ac 5a fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a74f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a752:	e8 68 21 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a757:	29 c3                	sub    %eax,%ebx
f012a759:	89 d8                	mov    %ebx,%eax
f012a75b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a760:	74 17                	je     f012a779 <test_kfreelast+0x14fd>
f012a762:	83 ec 04             	sub    $0x4,%esp
f012a765:	68 dc ac 13 f0       	push   $0xf013acdc
f012a76a:	68 ab 0d 00 00       	push   $0xdab
f012a76f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012a774:	e8 82 5a fd ff       	call   f01001fb <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a779:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a780:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a783:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a789:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a78c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a793:	eb 0e                	jmp    f012a7a3 <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a795:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a798:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a79b:	01 d0                	add    %edx,%eax
f012a79d:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a7a0:	ff 45 f4             	incl   -0xc(%ebp)
f012a7a3:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a7a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7ac:	7f e7                	jg     f012a795 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a7ae:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a7b2:	83 ec 08             	sub    $0x8,%esp
f012a7b5:	ff 75 f0             	pushl  -0x10(%ebp)
f012a7b8:	68 8c bc 13 f0       	push   $0xf013bc8c
f012a7bd:	e8 c0 64 fd ff       	call   f0100c82 <cprintf>
f012a7c2:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a7c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7cc:	e8 ee 20 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a7d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7d4:	e8 63 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a7dc:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a7e2:	83 ec 0c             	sub    $0xc,%esp
f012a7e5:	50                   	push   %eax
f012a7e6:	e8 d5 d0 fd ff       	call   f01078c0 <kfree>
f012a7eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a7ee:	e8 49 95 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a7f3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a7f6:	74 1d                	je     f012a815 <test_kfreelast+0x1599>
f012a7f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a7fc:	75 17                	jne    f012a815 <test_kfreelast+0x1599>
f012a7fe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a805:	83 ec 0c             	sub    $0xc,%esp
f012a808:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a80d:	e8 70 64 fd ff       	call   f0100c82 <cprintf>
f012a812:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a815:	e8 a5 20 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a81a:	89 c2                	mov    %eax,%edx
f012a81c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a81f:	29 c2                	sub    %eax,%edx
f012a821:	89 d0                	mov    %edx,%eax
f012a823:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a828:	74 1d                	je     f012a847 <test_kfreelast+0x15cb>
f012a82a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a82e:	75 17                	jne    f012a847 <test_kfreelast+0x15cb>
f012a830:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a837:	83 ec 0c             	sub    $0xc,%esp
f012a83a:	68 20 bd 13 f0       	push   $0xf013bd20
f012a83f:	e8 3e 64 fd ff       	call   f0100c82 <cprintf>
f012a844:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a847:	e8 73 20 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a84c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a84f:	e8 e8 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a854:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a857:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a85d:	83 ec 0c             	sub    $0xc,%esp
f012a860:	50                   	push   %eax
f012a861:	e8 5a d0 fd ff       	call   f01078c0 <kfree>
f012a866:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a869:	e8 ce 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a86e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a871:	74 1d                	je     f012a890 <test_kfreelast+0x1614>
f012a873:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a877:	75 17                	jne    f012a890 <test_kfreelast+0x1614>
f012a879:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a880:	83 ec 0c             	sub    $0xc,%esp
f012a883:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a888:	e8 f5 63 fd ff       	call   f0100c82 <cprintf>
f012a88d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a890:	e8 2a 20 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a895:	89 c2                	mov    %eax,%edx
f012a897:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a89a:	29 c2                	sub    %eax,%edx
f012a89c:	89 d0                	mov    %edx,%eax
f012a89e:	83 f8 08             	cmp    $0x8,%eax
f012a8a1:	74 1d                	je     f012a8c0 <test_kfreelast+0x1644>
f012a8a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a8a7:	75 17                	jne    f012a8c0 <test_kfreelast+0x1644>
f012a8a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8b0:	83 ec 0c             	sub    $0xc,%esp
f012a8b3:	68 20 bd 13 f0       	push   $0xf013bd20
f012a8b8:	e8 c5 63 fd ff       	call   f0100c82 <cprintf>
f012a8bd:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a8c0:	e8 fa 1f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a8c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8c8:	e8 6f 94 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a8cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a8d0:	83 ec 0c             	sub    $0xc,%esp
f012a8d3:	68 00 28 00 00       	push   $0x2800
f012a8d8:	e8 21 cf fd ff       	call   f01077fe <kmalloc>
f012a8dd:	83 c4 10             	add    $0x10,%esp
f012a8e0:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a8e6:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a8ec:	89 c1                	mov    %eax,%ecx
f012a8ee:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a8f5:	10 00 00 
f012a8f8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a8fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a903:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a909:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a90f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a914:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a91a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a920:	29 d0                	sub    %edx,%eax
f012a922:	89 c3                	mov    %eax,%ebx
f012a924:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a92b:	10 00 00 
f012a92e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a933:	0f b6 d0             	movzbl %al,%edx
f012a936:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a93c:	01 d0                	add    %edx,%eax
f012a93e:	48                   	dec    %eax
f012a93f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a945:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a94b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a950:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a956:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a95c:	29 d0                	sub    %edx,%eax
f012a95e:	01 c3                	add    %eax,%ebx
f012a960:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a967:	10 00 00 
f012a96a:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012a96f:	0f b6 c0             	movzbl %al,%eax
f012a972:	c1 e0 04             	shl    $0x4,%eax
f012a975:	89 c2                	mov    %eax,%edx
f012a977:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a97d:	01 d0                	add    %edx,%eax
f012a97f:	48                   	dec    %eax
f012a980:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a986:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a98c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a991:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a997:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a99d:	29 d0                	sub    %edx,%eax
f012a99f:	01 d8                	add    %ebx,%eax
f012a9a1:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a9a6:	39 c1                	cmp    %eax,%ecx
f012a9a8:	74 1d                	je     f012a9c7 <test_kfreelast+0x174b>
f012a9aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9ae:	75 17                	jne    f012a9c7 <test_kfreelast+0x174b>
f012a9b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9b7:	83 ec 0c             	sub    $0xc,%esp
f012a9ba:	68 58 bd 13 f0       	push   $0xf013bd58
f012a9bf:	e8 be 62 fd ff       	call   f0100c82 <cprintf>
f012a9c4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9c7:	e8 70 93 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012a9cc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9cf:	74 1d                	je     f012a9ee <test_kfreelast+0x1772>
f012a9d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9d5:	75 17                	jne    f012a9ee <test_kfreelast+0x1772>
f012a9d7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9de:	83 ec 0c             	sub    $0xc,%esp
f012a9e1:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012a9e6:	e8 97 62 fd ff       	call   f0100c82 <cprintf>
f012a9eb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a9ee:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a9f1:	e8 c9 1e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012a9f6:	29 c3                	sub    %eax,%ebx
f012a9f8:	89 d8                	mov    %ebx,%eax
f012a9fa:	83 f8 03             	cmp    $0x3,%eax
f012a9fd:	74 1d                	je     f012aa1c <test_kfreelast+0x17a0>
f012a9ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa03:	75 17                	jne    f012aa1c <test_kfreelast+0x17a0>
f012aa05:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa0c:	83 ec 0c             	sub    $0xc,%esp
f012aa0f:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012aa14:	e8 69 62 fd ff       	call   f0100c82 <cprintf>
f012aa19:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012aa1c:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012aa23:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012aa26:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa2c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012aa2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa36:	eb 0e                	jmp    f012aa46 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012aa38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa3b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa3e:	01 d0                	add    %edx,%eax
f012aa40:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012aa43:	ff 45 f4             	incl   -0xc(%ebp)
f012aa46:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012aa4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa4f:	7f e7                	jg     f012aa38 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aa51:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa55:	75 17                	jne    f012aa6e <test_kfreelast+0x17f2>
f012aa57:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012aa5b:	83 ec 08             	sub    $0x8,%esp
f012aa5e:	ff 75 f0             	pushl  -0x10(%ebp)
f012aa61:	68 8c bc 13 f0       	push   $0xf013bc8c
f012aa66:	e8 17 62 fd ff       	call   f0100c82 <cprintf>
f012aa6b:	83 c4 10             	add    $0x10,%esp
f012aa6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012aa75:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aa7b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012aa7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa85:	eb 1e                	jmp    f012aaa5 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012aa87:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012aa8d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aa90:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa93:	01 c8                	add    %ecx,%eax
f012aa95:	8a 00                	mov    (%eax),%al
f012aa97:	0f be c0             	movsbl %al,%eax
f012aa9a:	01 d0                	add    %edx,%eax
f012aa9c:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012aaa2:	ff 45 f4             	incl   -0xc(%ebp)
f012aaa5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012aaab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aaae:	7f d7                	jg     f012aa87 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012aab0:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012aab6:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012aabc:	89 d0                	mov    %edx,%eax
f012aabe:	01 c0                	add    %eax,%eax
f012aac0:	01 d0                	add    %edx,%eax
f012aac2:	c1 e0 02             	shl    $0x2,%eax
f012aac5:	39 c1                	cmp    %eax,%ecx
f012aac7:	74 1d                	je     f012aae6 <test_kfreelast+0x186a>
f012aac9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aacd:	75 17                	jne    f012aae6 <test_kfreelast+0x186a>
f012aacf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aad6:	83 ec 0c             	sub    $0xc,%esp
f012aad9:	68 04 be 13 f0       	push   $0xf013be04
f012aade:	e8 9f 61 fd ff       	call   f0100c82 <cprintf>
f012aae3:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012aae6:	83 ec 0c             	sub    $0xc,%esp
f012aae9:	6a 03                	push   $0x3
f012aaeb:	e8 6f 22 fe ff       	call   f010cd5f <sys_bypassPageFault>
f012aaf0:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012aaf3:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012aaf9:	05 00 30 00 00       	add    $0x3000,%eax
f012aafe:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012ab01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab08:	eb 3c                	jmp    f012ab46 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012ab0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab0d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab10:	01 d0                	add    %edx,%eax
f012ab12:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab15:	e8 33 22 fe ff       	call   f010cd4d <sys_rcr2>
f012ab1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab1d:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ab20:	01 ca                	add    %ecx,%edx
f012ab22:	39 d0                	cmp    %edx,%eax
f012ab24:	74 1d                	je     f012ab43 <test_kfreelast+0x18c7>
f012ab26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab2a:	75 17                	jne    f012ab43 <test_kfreelast+0x18c7>
f012ab2c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab33:	83 ec 0c             	sub    $0xc,%esp
f012ab36:	68 38 be 13 f0       	push   $0xf013be38
f012ab3b:	e8 42 61 fd ff       	call   f0100c82 <cprintf>
f012ab40:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012ab43:	ff 45 f4             	incl   -0xc(%ebp)
f012ab46:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012ab4d:	7e bb                	jle    f012ab0a <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ab4f:	83 ec 0c             	sub    $0xc,%esp
f012ab52:	6a 00                	push   $0x0
f012ab54:	e8 06 22 fe ff       	call   f010cd5f <sys_bypassPageFault>
f012ab59:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012ab5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab60:	75 17                	jne    f012ab79 <test_kfreelast+0x18fd>
f012ab62:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ab66:	83 ec 08             	sub    $0x8,%esp
f012ab69:	ff 75 f0             	pushl  -0x10(%ebp)
f012ab6c:	68 8c bc 13 f0       	push   $0xf013bc8c
f012ab71:	e8 0c 61 fd ff       	call   f0100c82 <cprintf>
f012ab76:	83 c4 10             	add    $0x10,%esp
f012ab79:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012ab80:	e8 3a 1d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012ab85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ab88:	e8 af 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ab8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ab90:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ab96:	83 ec 0c             	sub    $0xc,%esp
f012ab99:	50                   	push   %eax
f012ab9a:	e8 21 cd fd ff       	call   f01078c0 <kfree>
f012ab9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aba2:	e8 95 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012aba7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abaa:	74 1d                	je     f012abc9 <test_kfreelast+0x194d>
f012abac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abb0:	75 17                	jne    f012abc9 <test_kfreelast+0x194d>
f012abb2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abb9:	83 ec 0c             	sub    $0xc,%esp
f012abbc:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012abc1:	e8 bc 60 fd ff       	call   f0100c82 <cprintf>
f012abc6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012abc9:	e8 f1 1c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012abce:	89 c2                	mov    %eax,%edx
f012abd0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012abd3:	29 c2                	sub    %eax,%edx
f012abd5:	89 d0                	mov    %edx,%eax
f012abd7:	83 f8 03             	cmp    $0x3,%eax
f012abda:	74 1d                	je     f012abf9 <test_kfreelast+0x197d>
f012abdc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abe0:	75 17                	jne    f012abf9 <test_kfreelast+0x197d>
f012abe2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abe9:	83 ec 0c             	sub    $0xc,%esp
f012abec:	68 20 bd 13 f0       	push   $0xf013bd20
f012abf1:	e8 8c 60 fd ff       	call   f0100c82 <cprintf>
f012abf6:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012abf9:	e8 c1 1c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012abfe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac01:	e8 36 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac06:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ac09:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ac0f:	83 ec 0c             	sub    $0xc,%esp
f012ac12:	50                   	push   %eax
f012ac13:	e8 a8 cc fd ff       	call   f01078c0 <kfree>
f012ac18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac1b:	e8 1c 91 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac20:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac23:	74 1d                	je     f012ac42 <test_kfreelast+0x19c6>
f012ac25:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac29:	75 17                	jne    f012ac42 <test_kfreelast+0x19c6>
f012ac2b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac32:	83 ec 0c             	sub    $0xc,%esp
f012ac35:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012ac3a:	e8 43 60 fd ff       	call   f0100c82 <cprintf>
f012ac3f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ac42:	e8 78 1c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012ac47:	89 c2                	mov    %eax,%edx
f012ac49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac4c:	29 c2                	sub    %eax,%edx
f012ac4e:	89 d0                	mov    %edx,%eax
f012ac50:	83 f8 04             	cmp    $0x4,%eax
f012ac53:	74 1d                	je     f012ac72 <test_kfreelast+0x19f6>
f012ac55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac59:	75 17                	jne    f012ac72 <test_kfreelast+0x19f6>
f012ac5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac62:	83 ec 0c             	sub    $0xc,%esp
f012ac65:	68 20 bd 13 f0       	push   $0xf013bd20
f012ac6a:	e8 13 60 fd ff       	call   f0100c82 <cprintf>
f012ac6f:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac72:	e8 48 1c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012ac77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac7a:	e8 bd 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ac82:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ac88:	83 ec 0c             	sub    $0xc,%esp
f012ac8b:	50                   	push   %eax
f012ac8c:	e8 2f cc fd ff       	call   f01078c0 <kfree>
f012ac91:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac94:	e8 a3 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ac99:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac9c:	74 1d                	je     f012acbb <test_kfreelast+0x1a3f>
f012ac9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aca2:	75 17                	jne    f012acbb <test_kfreelast+0x1a3f>
f012aca4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acab:	83 ec 0c             	sub    $0xc,%esp
f012acae:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012acb3:	e8 ca 5f fd ff       	call   f0100c82 <cprintf>
f012acb8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012acbb:	e8 ff 1b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012acc0:	89 c2                	mov    %eax,%edx
f012acc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012acc5:	29 c2                	sub    %eax,%edx
f012acc7:	89 d0                	mov    %edx,%eax
f012acc9:	83 f8 05             	cmp    $0x5,%eax
f012accc:	74 1d                	je     f012aceb <test_kfreelast+0x1a6f>
f012acce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acd2:	75 17                	jne    f012aceb <test_kfreelast+0x1a6f>
f012acd4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acdb:	83 ec 0c             	sub    $0xc,%esp
f012acde:	68 20 bd 13 f0       	push   $0xf013bd20
f012ace3:	e8 9a 5f fd ff       	call   f0100c82 <cprintf>
f012ace8:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012aceb:	e8 cf 1b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012acf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acf3:	e8 44 90 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012acf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012acfb:	83 ec 0c             	sub    $0xc,%esp
f012acfe:	68 00 c8 00 00       	push   $0xc800
f012ad03:	e8 f6 ca fd ff       	call   f01077fe <kmalloc>
f012ad08:	83 c4 10             	add    $0x10,%esp
f012ad0b:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012ad11:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ad17:	89 c1                	mov    %eax,%ecx
f012ad19:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012ad20:	10 00 00 
f012ad23:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012ad29:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ad2e:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012ad34:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ad3a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad3f:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012ad45:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012ad4b:	29 d0                	sub    %edx,%eax
f012ad4d:	89 c3                	mov    %eax,%ebx
f012ad4f:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012ad56:	10 00 00 
f012ad59:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ad5e:	0f b6 d0             	movzbl %al,%edx
f012ad61:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012ad67:	01 d0                	add    %edx,%eax
f012ad69:	48                   	dec    %eax
f012ad6a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012ad70:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ad76:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad7b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012ad81:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012ad87:	29 d0                	sub    %edx,%eax
f012ad89:	01 c3                	add    %eax,%ebx
f012ad8b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012ad92:	10 00 00 
f012ad95:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ad9a:	0f b6 c0             	movzbl %al,%eax
f012ad9d:	c1 e0 04             	shl    $0x4,%eax
f012ada0:	89 c2                	mov    %eax,%edx
f012ada2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012ada8:	01 d0                	add    %edx,%eax
f012adaa:	48                   	dec    %eax
f012adab:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012adb1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012adb7:	ba 00 00 00 00       	mov    $0x0,%edx
f012adbc:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012adc2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012adc8:	29 d0                	sub    %edx,%eax
f012adca:	01 d8                	add    %ebx,%eax
f012adcc:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012add1:	39 c1                	cmp    %eax,%ecx
f012add3:	74 1d                	je     f012adf2 <test_kfreelast+0x1b76>
f012add5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012add9:	75 17                	jne    f012adf2 <test_kfreelast+0x1b76>
f012addb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ade2:	83 ec 0c             	sub    $0xc,%esp
f012ade5:	68 58 bd 13 f0       	push   $0xf013bd58
f012adea:	e8 93 5e fd ff       	call   f0100c82 <cprintf>
f012adef:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adf2:	e8 45 8f fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012adf7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adfa:	74 1d                	je     f012ae19 <test_kfreelast+0x1b9d>
f012adfc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae00:	75 17                	jne    f012ae19 <test_kfreelast+0x1b9d>
f012ae02:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae09:	83 ec 0c             	sub    $0xc,%esp
f012ae0c:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012ae11:	e8 6c 5e fd ff       	call   f0100c82 <cprintf>
f012ae16:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012ae19:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ae1c:	e8 9e 1a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012ae21:	29 c3                	sub    %eax,%ebx
f012ae23:	89 d8                	mov    %ebx,%eax
f012ae25:	83 f8 0d             	cmp    $0xd,%eax
f012ae28:	74 1d                	je     f012ae47 <test_kfreelast+0x1bcb>
f012ae2a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae2e:	75 17                	jne    f012ae47 <test_kfreelast+0x1bcb>
f012ae30:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae37:	83 ec 0c             	sub    $0xc,%esp
f012ae3a:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012ae3f:	e8 3e 5e fd ff       	call   f0100c82 <cprintf>
f012ae44:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012ae47:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012ae4e:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012ae51:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ae57:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012ae5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae61:	eb 0e                	jmp    f012ae71 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012ae63:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae66:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae69:	01 d0                	add    %edx,%eax
f012ae6b:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012ae6e:	ff 45 f4             	incl   -0xc(%ebp)
f012ae71:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ae77:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae7a:	7f e7                	jg     f012ae63 <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ae7c:	e8 3e 1a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012ae81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae84:	e8 b3 8e fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012ae89:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012ae8c:	83 ec 0c             	sub    $0xc,%esp
f012ae8f:	68 00 fc 2f 00       	push   $0x2ffc00
f012ae94:	e8 65 c9 fd ff       	call   f01077fe <kmalloc>
f012ae99:	83 c4 10             	add    $0x10,%esp
f012ae9c:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012aea2:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012aea8:	89 c1                	mov    %eax,%ecx
f012aeaa:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012aeb1:	10 00 00 
f012aeb4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012aeba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aebf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012aec5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aecb:	ba 00 00 00 00       	mov    $0x0,%edx
f012aed0:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012aed6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012aedc:	29 d0                	sub    %edx,%eax
f012aede:	89 c3                	mov    %eax,%ebx
f012aee0:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012aee7:	10 00 00 
f012aeea:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012aeef:	0f b6 d0             	movzbl %al,%edx
f012aef2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aef8:	01 d0                	add    %edx,%eax
f012aefa:	48                   	dec    %eax
f012aefb:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012af01:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012af07:	ba 00 00 00 00       	mov    $0x0,%edx
f012af0c:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012af12:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012af18:	29 d0                	sub    %edx,%eax
f012af1a:	01 c3                	add    %eax,%ebx
f012af1c:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012af23:	10 00 00 
f012af26:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012af2b:	0f b6 c0             	movzbl %al,%eax
f012af2e:	c1 e0 04             	shl    $0x4,%eax
f012af31:	89 c2                	mov    %eax,%edx
f012af33:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012af39:	01 d0                	add    %edx,%eax
f012af3b:	48                   	dec    %eax
f012af3c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012af42:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af48:	ba 00 00 00 00       	mov    $0x0,%edx
f012af4d:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012af53:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012af59:	29 d0                	sub    %edx,%eax
f012af5b:	01 d8                	add    %ebx,%eax
f012af5d:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012af62:	39 c1                	cmp    %eax,%ecx
f012af64:	74 1d                	je     f012af83 <test_kfreelast+0x1d07>
f012af66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af6a:	75 17                	jne    f012af83 <test_kfreelast+0x1d07>
f012af6c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af73:	83 ec 0c             	sub    $0xc,%esp
f012af76:	68 58 bd 13 f0       	push   $0xf013bd58
f012af7b:	e8 02 5d fd ff       	call   f0100c82 <cprintf>
f012af80:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af83:	e8 b4 8d fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012af88:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af8b:	74 1d                	je     f012afaa <test_kfreelast+0x1d2e>
f012af8d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af91:	75 17                	jne    f012afaa <test_kfreelast+0x1d2e>
f012af93:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af9a:	83 ec 0c             	sub    $0xc,%esp
f012af9d:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012afa2:	e8 db 5c fd ff       	call   f0100c82 <cprintf>
f012afa7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012afaa:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012afad:	e8 0d 19 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012afb2:	29 c3                	sub    %eax,%ebx
f012afb4:	89 d8                	mov    %ebx,%eax
f012afb6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012afbb:	74 1d                	je     f012afda <test_kfreelast+0x1d5e>
f012afbd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afc1:	75 17                	jne    f012afda <test_kfreelast+0x1d5e>
f012afc3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afca:	83 ec 0c             	sub    $0xc,%esp
f012afcd:	68 c0 bd 13 f0       	push   $0xf013bdc0
f012afd2:	e8 ab 5c fd ff       	call   f0100c82 <cprintf>
f012afd7:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012afda:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012afe1:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012afe4:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012afea:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012afed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aff4:	eb 0e                	jmp    f012b004 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012aff6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aff9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012affc:	01 d0                	add    %edx,%eax
f012affe:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b001:	ff 45 f4             	incl   -0xc(%ebp)
f012b004:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b00a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b00d:	7f e7                	jg     f012aff6 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b00f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b013:	75 17                	jne    f012b02c <test_kfreelast+0x1db0>
f012b015:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012b019:	83 ec 08             	sub    $0x8,%esp
f012b01c:	ff 75 f0             	pushl  -0x10(%ebp)
f012b01f:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b024:	e8 59 5c fd ff       	call   f0100c82 <cprintf>
f012b029:	83 c4 10             	add    $0x10,%esp
f012b02c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012b033:	e8 87 18 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b038:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b03b:	e8 fc 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b040:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012b043:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b049:	83 ec 0c             	sub    $0xc,%esp
f012b04c:	50                   	push   %eax
f012b04d:	e8 6e c8 fd ff       	call   f01078c0 <kfree>
f012b052:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b055:	e8 e2 8c fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b05a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b05d:	74 1d                	je     f012b07c <test_kfreelast+0x1e00>
f012b05f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b063:	75 17                	jne    f012b07c <test_kfreelast+0x1e00>
f012b065:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b06c:	83 ec 0c             	sub    $0xc,%esp
f012b06f:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b074:	e8 09 5c fd ff       	call   f0100c82 <cprintf>
f012b079:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b07c:	e8 3e 18 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b081:	89 c2                	mov    %eax,%edx
f012b083:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b086:	29 c2                	sub    %eax,%edx
f012b088:	89 d0                	mov    %edx,%eax
f012b08a:	83 f8 0d             	cmp    $0xd,%eax
f012b08d:	74 1d                	je     f012b0ac <test_kfreelast+0x1e30>
f012b08f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b093:	75 17                	jne    f012b0ac <test_kfreelast+0x1e30>
f012b095:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b09c:	83 ec 0c             	sub    $0xc,%esp
f012b09f:	68 20 bd 13 f0       	push   $0xf013bd20
f012b0a4:	e8 d9 5b fd ff       	call   f0100c82 <cprintf>
f012b0a9:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b0ac:	83 ec 0c             	sub    $0xc,%esp
f012b0af:	6a 03                	push   $0x3
f012b0b1:	e8 a9 1c fe ff       	call   f010cd5f <sys_bypassPageFault>
f012b0b6:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012b0b9:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012b0bf:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012b0c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b0c9:	eb 3c                	jmp    f012b107 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012b0cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0d1:	01 d0                	add    %edx,%eax
f012b0d3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b0d6:	e8 72 1c fe ff       	call   f010cd4d <sys_rcr2>
f012b0db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b0de:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b0e1:	01 ca                	add    %ecx,%edx
f012b0e3:	39 d0                	cmp    %edx,%eax
f012b0e5:	74 1d                	je     f012b104 <test_kfreelast+0x1e88>
f012b0e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0eb:	75 17                	jne    f012b104 <test_kfreelast+0x1e88>
f012b0ed:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0f4:	83 ec 0c             	sub    $0xc,%esp
f012b0f7:	68 38 be 13 f0       	push   $0xf013be38
f012b0fc:	e8 81 5b fd ff       	call   f0100c82 <cprintf>
f012b101:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012b104:	ff 45 f4             	incl   -0xc(%ebp)
f012b107:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012b10e:	7e bb                	jle    f012b0cb <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b110:	83 ec 0c             	sub    $0xc,%esp
f012b113:	6a 00                	push   $0x0
f012b115:	e8 45 1c fe ff       	call   f010cd5f <sys_bypassPageFault>
f012b11a:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012b11d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b123:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012b126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b12d:	eb 1e                	jmp    f012b14d <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012b12f:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012b135:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b138:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b13b:	01 c8                	add    %ecx,%eax
f012b13d:	8a 00                	mov    (%eax),%al
f012b13f:	0f be c0             	movsbl %al,%eax
f012b142:	01 d0                	add    %edx,%eax
f012b144:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012b14a:	ff 45 f4             	incl   -0xc(%ebp)
f012b14d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012b153:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b156:	7f d7                	jg     f012b12f <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b158:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012b15e:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012b164:	89 d0                	mov    %edx,%eax
f012b166:	01 c0                	add    %eax,%eax
f012b168:	01 d0                	add    %edx,%eax
f012b16a:	01 c0                	add    %eax,%eax
f012b16c:	01 d0                	add    %edx,%eax
f012b16e:	01 c0                	add    %eax,%eax
f012b170:	39 c1                	cmp    %eax,%ecx
f012b172:	74 1d                	je     f012b191 <test_kfreelast+0x1f15>
f012b174:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b178:	75 17                	jne    f012b191 <test_kfreelast+0x1f15>
f012b17a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b181:	83 ec 0c             	sub    $0xc,%esp
f012b184:	68 04 be 13 f0       	push   $0xf013be04
f012b189:	e8 f4 5a fd ff       	call   f0100c82 <cprintf>
f012b18e:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b191:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b195:	75 17                	jne    f012b1ae <test_kfreelast+0x1f32>
f012b197:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b19b:	83 ec 08             	sub    $0x8,%esp
f012b19e:	ff 75 f0             	pushl  -0x10(%ebp)
f012b1a1:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b1a6:	e8 d7 5a fd ff       	call   f0100c82 <cprintf>
f012b1ab:	83 c4 10             	add    $0x10,%esp
f012b1ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012b1b5:	e8 05 17 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b1ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b1bd:	e8 7a 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012b1c5:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012b1cb:	83 ec 0c             	sub    $0xc,%esp
f012b1ce:	50                   	push   %eax
f012b1cf:	e8 ec c6 fd ff       	call   f01078c0 <kfree>
f012b1d4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b1d7:	e8 60 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b1dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1df:	74 1d                	je     f012b1fe <test_kfreelast+0x1f82>
f012b1e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b1e5:	75 17                	jne    f012b1fe <test_kfreelast+0x1f82>
f012b1e7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b1ee:	83 ec 0c             	sub    $0xc,%esp
f012b1f1:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b1f6:	e8 87 5a fd ff       	call   f0100c82 <cprintf>
f012b1fb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b1fe:	e8 bc 16 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b203:	89 c2                	mov    %eax,%edx
f012b205:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b208:	29 c2                	sub    %eax,%edx
f012b20a:	89 d0                	mov    %edx,%eax
f012b20c:	83 f8 02             	cmp    $0x2,%eax
f012b20f:	74 1d                	je     f012b22e <test_kfreelast+0x1fb2>
f012b211:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b215:	75 17                	jne    f012b22e <test_kfreelast+0x1fb2>
f012b217:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b21e:	83 ec 0c             	sub    $0xc,%esp
f012b221:	68 20 bd 13 f0       	push   $0xf013bd20
f012b226:	e8 57 5a fd ff       	call   f0100c82 <cprintf>
f012b22b:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b22e:	e8 8c 16 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b233:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b236:	e8 01 8b fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b23b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012b23e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012b244:	83 ec 0c             	sub    $0xc,%esp
f012b247:	50                   	push   %eax
f012b248:	e8 73 c6 fd ff       	call   f01078c0 <kfree>
f012b24d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b250:	e8 e7 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b255:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b258:	74 1d                	je     f012b277 <test_kfreelast+0x1ffb>
f012b25a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b25e:	75 17                	jne    f012b277 <test_kfreelast+0x1ffb>
f012b260:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b267:	83 ec 0c             	sub    $0xc,%esp
f012b26a:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b26f:	e8 0e 5a fd ff       	call   f0100c82 <cprintf>
f012b274:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b277:	e8 43 16 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b27c:	89 c2                	mov    %eax,%edx
f012b27e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b281:	29 c2                	sub    %eax,%edx
f012b283:	89 d0                	mov    %edx,%eax
f012b285:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b28a:	74 1d                	je     f012b2a9 <test_kfreelast+0x202d>
f012b28c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b290:	75 17                	jne    f012b2a9 <test_kfreelast+0x202d>
f012b292:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b299:	83 ec 0c             	sub    $0xc,%esp
f012b29c:	68 20 bd 13 f0       	push   $0xf013bd20
f012b2a1:	e8 dc 59 fd ff       	call   f0100c82 <cprintf>
f012b2a6:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012b2a9:	e8 11 16 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b2ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2b1:	e8 86 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012b2b9:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012b2bf:	83 ec 0c             	sub    $0xc,%esp
f012b2c2:	50                   	push   %eax
f012b2c3:	e8 f8 c5 fd ff       	call   f01078c0 <kfree>
f012b2c8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b2cb:	e8 6c 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b2d0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2d3:	74 1d                	je     f012b2f2 <test_kfreelast+0x2076>
f012b2d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b2d9:	75 17                	jne    f012b2f2 <test_kfreelast+0x2076>
f012b2db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b2e2:	83 ec 0c             	sub    $0xc,%esp
f012b2e5:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b2ea:	e8 93 59 fd ff       	call   f0100c82 <cprintf>
f012b2ef:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b2f2:	e8 c8 15 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b2f7:	89 c2                	mov    %eax,%edx
f012b2f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2fc:	29 c2                	sub    %eax,%edx
f012b2fe:	89 d0                	mov    %edx,%eax
f012b300:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b305:	74 1d                	je     f012b324 <test_kfreelast+0x20a8>
f012b307:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b30b:	75 17                	jne    f012b324 <test_kfreelast+0x20a8>
f012b30d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b314:	83 ec 0c             	sub    $0xc,%esp
f012b317:	68 20 bd 13 f0       	push   $0xf013bd20
f012b31c:	e8 61 59 fd ff       	call   f0100c82 <cprintf>
f012b321:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b324:	e8 96 15 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b329:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b32c:	e8 0b 8a fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b331:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b334:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b33a:	83 ec 0c             	sub    $0xc,%esp
f012b33d:	50                   	push   %eax
f012b33e:	e8 7d c5 fd ff       	call   f01078c0 <kfree>
f012b343:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b346:	e8 f1 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b34b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b34e:	74 1d                	je     f012b36d <test_kfreelast+0x20f1>
f012b350:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b354:	75 17                	jne    f012b36d <test_kfreelast+0x20f1>
f012b356:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b35d:	83 ec 0c             	sub    $0xc,%esp
f012b360:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b365:	e8 18 59 fd ff       	call   f0100c82 <cprintf>
f012b36a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b36d:	e8 4d 15 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b372:	89 c2                	mov    %eax,%edx
f012b374:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b377:	29 c2                	sub    %eax,%edx
f012b379:	89 d0                	mov    %edx,%eax
f012b37b:	83 f8 01             	cmp    $0x1,%eax
f012b37e:	74 1d                	je     f012b39d <test_kfreelast+0x2121>
f012b380:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b384:	75 17                	jne    f012b39d <test_kfreelast+0x2121>
f012b386:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b38d:	83 ec 0c             	sub    $0xc,%esp
f012b390:	68 20 bd 13 f0       	push   $0xf013bd20
f012b395:	e8 e8 58 fd ff       	call   f0100c82 <cprintf>
f012b39a:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b39d:	e8 1d 15 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b3a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b3a5:	e8 92 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012b3ad:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012b3b3:	83 ec 0c             	sub    $0xc,%esp
f012b3b6:	50                   	push   %eax
f012b3b7:	e8 04 c5 fd ff       	call   f01078c0 <kfree>
f012b3bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b3bf:	e8 78 89 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b3c4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3c7:	74 1d                	je     f012b3e6 <test_kfreelast+0x216a>
f012b3c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3cd:	75 17                	jne    f012b3e6 <test_kfreelast+0x216a>
f012b3cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b3d6:	83 ec 0c             	sub    $0xc,%esp
f012b3d9:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b3de:	e8 9f 58 fd ff       	call   f0100c82 <cprintf>
f012b3e3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b3e6:	e8 d4 14 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b3eb:	89 c2                	mov    %eax,%edx
f012b3ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b3f0:	29 c2                	sub    %eax,%edx
f012b3f2:	89 d0                	mov    %edx,%eax
f012b3f4:	83 f8 01             	cmp    $0x1,%eax
f012b3f7:	74 1d                	je     f012b416 <test_kfreelast+0x219a>
f012b3f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b3fd:	75 17                	jne    f012b416 <test_kfreelast+0x219a>
f012b3ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b406:	83 ec 0c             	sub    $0xc,%esp
f012b409:	68 20 bd 13 f0       	push   $0xf013bd20
f012b40e:	e8 6f 58 fd ff       	call   f0100c82 <cprintf>
f012b413:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012b416:	e8 a4 14 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b41b:	89 c2                	mov    %eax,%edx
f012b41d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b420:	39 c2                	cmp    %eax,%edx
f012b422:	74 1d                	je     f012b441 <test_kfreelast+0x21c5>
f012b424:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b428:	75 17                	jne    f012b441 <test_kfreelast+0x21c5>
f012b42a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b431:	83 ec 0c             	sub    $0xc,%esp
f012b434:	68 80 be 13 f0       	push   $0xf013be80
f012b439:	e8 44 58 fd ff       	call   f0100c82 <cprintf>
f012b43e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b441:	83 ec 0c             	sub    $0xc,%esp
f012b444:	6a 03                	push   $0x3
f012b446:	e8 14 19 fe ff       	call   f010cd5f <sys_bypassPageFault>
f012b44b:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012b44e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b455:	e9 8e 00 00 00       	jmp    f012b4e8 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012b45a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b45d:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012b464:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012b467:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b46a:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b46d:	e8 db 18 fe ff       	call   f010cd4d <sys_rcr2>
f012b472:	89 c2                	mov    %eax,%edx
f012b474:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b477:	39 c2                	cmp    %eax,%edx
f012b479:	74 1d                	je     f012b498 <test_kfreelast+0x221c>
f012b47b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b47f:	75 17                	jne    f012b498 <test_kfreelast+0x221c>
f012b481:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b488:	83 ec 0c             	sub    $0xc,%esp
f012b48b:	68 38 be 13 f0       	push   $0xf013be38
f012b490:	e8 ed 57 fd ff       	call   f0100c82 <cprintf>
f012b495:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012b498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b49b:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b4a2:	89 c2                	mov    %eax,%edx
f012b4a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4a7:	01 d0                	add    %edx,%eax
f012b4a9:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b4ac:	e8 9c 18 fe ff       	call   f010cd4d <sys_rcr2>
f012b4b1:	89 c2                	mov    %eax,%edx
f012b4b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012b4b6:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012b4bd:	89 c1                	mov    %eax,%ecx
f012b4bf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b4c2:	01 c8                	add    %ecx,%eax
f012b4c4:	39 c2                	cmp    %eax,%edx
f012b4c6:	74 1d                	je     f012b4e5 <test_kfreelast+0x2269>
f012b4c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b4cc:	75 17                	jne    f012b4e5 <test_kfreelast+0x2269>
f012b4ce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b4d5:	83 ec 0c             	sub    $0xc,%esp
f012b4d8:	68 38 be 13 f0       	push   $0xf013be38
f012b4dd:	e8 a0 57 fd ff       	call   f0100c82 <cprintf>
f012b4e2:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012b4e5:	ff 45 f4             	incl   -0xc(%ebp)
f012b4e8:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012b4ec:	0f 8e 68 ff ff ff    	jle    f012b45a <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b4f2:	83 ec 0c             	sub    $0xc,%esp
f012b4f5:	6a 00                	push   $0x0
f012b4f7:	e8 63 18 fe ff       	call   f010cd5f <sys_bypassPageFault>
f012b4fc:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012b4ff:	e8 bb 13 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b504:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b507:	e8 30 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b50c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012b50f:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012b515:	83 ec 0c             	sub    $0xc,%esp
f012b518:	50                   	push   %eax
f012b519:	e8 a2 c3 fd ff       	call   f01078c0 <kfree>
f012b51e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b521:	e8 16 88 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b526:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b529:	74 1d                	je     f012b548 <test_kfreelast+0x22cc>
f012b52b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b52f:	75 17                	jne    f012b548 <test_kfreelast+0x22cc>
f012b531:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b538:	83 ec 0c             	sub    $0xc,%esp
f012b53b:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b540:	e8 3d 57 fd ff       	call   f0100c82 <cprintf>
f012b545:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b548:	e8 72 13 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b54d:	89 c2                	mov    %eax,%edx
f012b54f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b552:	39 c2                	cmp    %eax,%edx
f012b554:	74 1d                	je     f012b573 <test_kfreelast+0x22f7>
f012b556:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b55a:	75 17                	jne    f012b573 <test_kfreelast+0x22f7>
f012b55c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b563:	83 ec 0c             	sub    $0xc,%esp
f012b566:	68 b8 be 13 f0       	push   $0xf013beb8
f012b56b:	e8 12 57 fd ff       	call   f0100c82 <cprintf>
f012b570:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012b573:	e8 47 13 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b578:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b57b:	e8 bc 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b580:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012b583:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012b589:	83 ec 0c             	sub    $0xc,%esp
f012b58c:	50                   	push   %eax
f012b58d:	e8 2e c3 fd ff       	call   f01078c0 <kfree>
f012b592:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b595:	e8 a2 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b59a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b59d:	74 1d                	je     f012b5bc <test_kfreelast+0x2340>
f012b59f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5a3:	75 17                	jne    f012b5bc <test_kfreelast+0x2340>
f012b5a5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5ac:	83 ec 0c             	sub    $0xc,%esp
f012b5af:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b5b4:	e8 c9 56 fd ff       	call   f0100c82 <cprintf>
f012b5b9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b5bc:	e8 fe 12 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b5c1:	89 c2                	mov    %eax,%edx
f012b5c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b5c6:	39 c2                	cmp    %eax,%edx
f012b5c8:	74 1d                	je     f012b5e7 <test_kfreelast+0x236b>
f012b5ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b5ce:	75 17                	jne    f012b5e7 <test_kfreelast+0x236b>
f012b5d0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b5d7:	83 ec 0c             	sub    $0xc,%esp
f012b5da:	68 b8 be 13 f0       	push   $0xf013beb8
f012b5df:	e8 9e 56 fd ff       	call   f0100c82 <cprintf>
f012b5e4:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b5e7:	e8 d3 12 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b5ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5ef:	e8 48 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b5f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b5f7:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b5fd:	83 ec 0c             	sub    $0xc,%esp
f012b600:	50                   	push   %eax
f012b601:	e8 ba c2 fd ff       	call   f01078c0 <kfree>
f012b606:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b609:	e8 2e 87 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b60e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b611:	74 1d                	je     f012b630 <test_kfreelast+0x23b4>
f012b613:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b617:	75 17                	jne    f012b630 <test_kfreelast+0x23b4>
f012b619:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b620:	83 ec 0c             	sub    $0xc,%esp
f012b623:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b628:	e8 55 56 fd ff       	call   f0100c82 <cprintf>
f012b62d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b630:	e8 8a 12 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b635:	89 c2                	mov    %eax,%edx
f012b637:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b63a:	39 c2                	cmp    %eax,%edx
f012b63c:	74 1d                	je     f012b65b <test_kfreelast+0x23df>
f012b63e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b642:	75 17                	jne    f012b65b <test_kfreelast+0x23df>
f012b644:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b64b:	83 ec 0c             	sub    $0xc,%esp
f012b64e:	68 b8 be 13 f0       	push   $0xf013beb8
f012b653:	e8 2a 56 fd ff       	call   f0100c82 <cprintf>
f012b658:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b65b:	e8 5f 12 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b660:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b663:	e8 d4 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b668:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b66b:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b671:	83 ec 0c             	sub    $0xc,%esp
f012b674:	50                   	push   %eax
f012b675:	e8 46 c2 fd ff       	call   f01078c0 <kfree>
f012b67a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b67d:	e8 ba 86 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012b682:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b685:	74 1d                	je     f012b6a4 <test_kfreelast+0x2428>
f012b687:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b68b:	75 17                	jne    f012b6a4 <test_kfreelast+0x2428>
f012b68d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b694:	83 ec 0c             	sub    $0xc,%esp
f012b697:	68 b4 bc 13 f0       	push   $0xf013bcb4
f012b69c:	e8 e1 55 fd ff       	call   f0100c82 <cprintf>
f012b6a1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b6a4:	e8 16 12 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b6a9:	89 c2                	mov    %eax,%edx
f012b6ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6ae:	39 c2                	cmp    %eax,%edx
f012b6b0:	74 1d                	je     f012b6cf <test_kfreelast+0x2453>
f012b6b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6b6:	75 17                	jne    f012b6cf <test_kfreelast+0x2453>
f012b6b8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6bf:	83 ec 0c             	sub    $0xc,%esp
f012b6c2:	68 b8 be 13 f0       	push   $0xf013beb8
f012b6c7:	e8 b6 55 fd ff       	call   f0100c82 <cprintf>
f012b6cc:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b6cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6d3:	75 17                	jne    f012b6ec <test_kfreelast+0x2470>
f012b6d5:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b6d9:	83 ec 08             	sub    $0x8,%esp
f012b6dc:	ff 75 f0             	pushl  -0x10(%ebp)
f012b6df:	68 8c bc 13 f0       	push   $0xf013bc8c
f012b6e4:	e8 99 55 fd ff       	call   f0100c82 <cprintf>
f012b6e9:	83 c4 10             	add    $0x10,%esp
f012b6ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b6f3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b6f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b6fb:	5b                   	pop    %ebx
f012b6fc:	5f                   	pop    %edi
f012b6fd:	5d                   	pop    %ebp
f012b6fe:	c3                   	ret    

f012b6ff <test_krealloc>:

int test_krealloc() {
f012b6ff:	55                   	push   %ebp
f012b700:	89 e5                	mov    %esp,%ebp
f012b702:	57                   	push   %edi
f012b703:	53                   	push   %ebx
f012b704:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b70a:	83 ec 0c             	sub    $0xc,%esp
f012b70d:	68 9c ab 13 f0       	push   $0xf013ab9c
f012b712:	e8 6b 55 fd ff       	call   f0100c82 <cprintf>
f012b717:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b71a:	83 ec 0c             	sub    $0xc,%esp
f012b71d:	68 cc ab 13 f0       	push   $0xf013abcc
f012b722:	e8 5b 55 fd ff       	call   f0100c82 <cprintf>
f012b727:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b72a:	83 ec 0c             	sub    $0xc,%esp
f012b72d:	68 9c ab 13 f0       	push   $0xf013ab9c
f012b732:	e8 4b 55 fd ff       	call   f0100c82 <cprintf>
f012b737:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b73a:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b73e:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b742:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b748:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b74e:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b755:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b75c:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b762:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b767:	b8 00 00 00 00       	mov    $0x0,%eax
f012b76c:	89 d7                	mov    %edx,%edi
f012b76e:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b770:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b777:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b77d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b782:	b8 00 00 00 00       	mov    $0x0,%eax
f012b787:	89 d7                	mov    %edx,%edi
f012b789:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b78b:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b791:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b796:	b8 00 00 00 00       	mov    $0x0,%eax
f012b79b:	89 d7                	mov    %edx,%edi
f012b79d:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b79f:	e8 1b 11 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b7a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b7a7:	83 ec 08             	sub    $0x8,%esp
f012b7aa:	68 00 fc 0f 00       	push   $0xffc00
f012b7af:	6a 00                	push   $0x0
f012b7b1:	e8 ff c2 fd ff       	call   f0107ab5 <krealloc>
f012b7b6:	83 c4 10             	add    $0x10,%esp
f012b7b9:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b7bf:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b7c5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b7ca:	77 17                	ja     f012b7e3 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b7cc:	83 ec 04             	sub    $0x4,%esp
f012b7cf:	68 00 bf 13 f0       	push   $0xf013bf00
f012b7d4:	68 e2 0e 00 00       	push   $0xee2
f012b7d9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b7de:	e8 18 4a fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b7e3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b7e9:	89 c1                	mov    %eax,%ecx
f012b7eb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b7f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b7f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b7fa:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b7fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b800:	ba 00 00 00 00       	mov    $0x0,%edx
f012b805:	f7 75 b4             	divl   -0x4c(%ebp)
f012b808:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b80b:	29 d0                	sub    %edx,%eax
f012b80d:	89 c3                	mov    %eax,%ebx
f012b80f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b816:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b81b:	0f b6 d0             	movzbl %al,%edx
f012b81e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b821:	01 d0                	add    %edx,%eax
f012b823:	48                   	dec    %eax
f012b824:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b827:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b82a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b82f:	f7 75 ac             	divl   -0x54(%ebp)
f012b832:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b835:	29 d0                	sub    %edx,%eax
f012b837:	01 c3                	add    %eax,%ebx
f012b839:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b840:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b845:	0f b6 c0             	movzbl %al,%eax
f012b848:	c1 e0 04             	shl    $0x4,%eax
f012b84b:	89 c2                	mov    %eax,%edx
f012b84d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b850:	01 d0                	add    %edx,%eax
f012b852:	48                   	dec    %eax
f012b853:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b856:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b859:	ba 00 00 00 00       	mov    $0x0,%edx
f012b85e:	f7 75 a4             	divl   -0x5c(%ebp)
f012b861:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b864:	29 d0                	sub    %edx,%eax
f012b866:	01 d8                	add    %ebx,%eax
f012b868:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b86d:	39 c1                	cmp    %eax,%ecx
f012b86f:	74 17                	je     f012b888 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b871:	83 ec 04             	sub    $0x4,%esp
f012b874:	68 3c bf 13 f0       	push   $0xf013bf3c
f012b879:	68 e4 0e 00 00       	push   $0xee4
f012b87e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b883:	e8 73 49 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b888:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b88b:	e8 2f 10 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b890:	29 c3                	sub    %eax,%ebx
f012b892:	89 d8                	mov    %ebx,%eax
f012b894:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b899:	74 17                	je     f012b8b2 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b89b:	83 ec 04             	sub    $0x4,%esp
f012b89e:	68 6e bf 13 f0       	push   $0xf013bf6e
f012b8a3:	68 e7 0e 00 00       	push   $0xee7
f012b8a8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b8ad:	e8 49 49 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b8b2:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b8b9:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b8bc:	e8 fe 0f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b8c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b8c4:	83 ec 08             	sub    $0x8,%esp
f012b8c7:	68 00 fc 0f 00       	push   $0xffc00
f012b8cc:	6a 00                	push   $0x0
f012b8ce:	e8 e2 c1 fd ff       	call   f0107ab5 <krealloc>
f012b8d3:	83 c4 10             	add    $0x10,%esp
f012b8d6:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b8dc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8e2:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b8e7:	77 17                	ja     f012b900 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b8e9:	83 ec 04             	sub    $0x4,%esp
f012b8ec:	68 00 bf 13 f0       	push   $0xf013bf00
f012b8f1:	68 ef 0e 00 00       	push   $0xeef
f012b8f6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b8fb:	e8 fb 48 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b900:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b906:	89 c1                	mov    %eax,%ecx
f012b908:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b90f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b912:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b917:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b91a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b91d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b922:	f7 75 9c             	divl   -0x64(%ebp)
f012b925:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b928:	29 d0                	sub    %edx,%eax
f012b92a:	89 c3                	mov    %eax,%ebx
f012b92c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b933:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b938:	0f b6 d0             	movzbl %al,%edx
f012b93b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b93e:	01 d0                	add    %edx,%eax
f012b940:	48                   	dec    %eax
f012b941:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b944:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b947:	ba 00 00 00 00       	mov    $0x0,%edx
f012b94c:	f7 75 94             	divl   -0x6c(%ebp)
f012b94f:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b952:	29 d0                	sub    %edx,%eax
f012b954:	01 c3                	add    %eax,%ebx
f012b956:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b95d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012b962:	0f b6 c0             	movzbl %al,%eax
f012b965:	c1 e0 04             	shl    $0x4,%eax
f012b968:	89 c2                	mov    %eax,%edx
f012b96a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b96d:	01 d0                	add    %edx,%eax
f012b96f:	48                   	dec    %eax
f012b970:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b973:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b976:	ba 00 00 00 00       	mov    $0x0,%edx
f012b97b:	f7 75 8c             	divl   -0x74(%ebp)
f012b97e:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b981:	29 d0                	sub    %edx,%eax
f012b983:	01 d8                	add    %ebx,%eax
f012b985:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b98a:	39 c1                	cmp    %eax,%ecx
f012b98c:	74 17                	je     f012b9a5 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b98e:	83 ec 04             	sub    $0x4,%esp
f012b991:	68 3c bf 13 f0       	push   $0xf013bf3c
f012b996:	68 f1 0e 00 00       	push   $0xef1
f012b99b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b9a0:	e8 56 48 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b9a5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b9a8:	e8 12 0f fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b9ad:	29 c3                	sub    %eax,%ebx
f012b9af:	89 d8                	mov    %ebx,%eax
f012b9b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b9b6:	74 17                	je     f012b9cf <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b9b8:	83 ec 04             	sub    $0x4,%esp
f012b9bb:	68 6e bf 13 f0       	push   $0xf013bf6e
f012b9c0:	68 f3 0e 00 00       	push   $0xef3
f012b9c5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012b9ca:	e8 2c 48 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b9cf:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b9d6:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b9d9:	e8 e1 0e fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012b9de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b9e1:	83 ec 08             	sub    $0x8,%esp
f012b9e4:	68 00 fc 0f 00       	push   $0xffc00
f012b9e9:	6a 00                	push   $0x0
f012b9eb:	e8 c5 c0 fd ff       	call   f0107ab5 <krealloc>
f012b9f0:	83 c4 10             	add    $0x10,%esp
f012b9f3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b9f9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b9ff:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012ba04:	77 17                	ja     f012ba1d <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba06:	83 ec 04             	sub    $0x4,%esp
f012ba09:	68 00 bf 13 f0       	push   $0xf013bf00
f012ba0e:	68 fb 0e 00 00       	push   $0xefb
f012ba13:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ba18:	e8 de 47 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012ba1d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ba23:	89 c1                	mov    %eax,%ecx
f012ba25:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012ba2c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ba2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ba34:	89 45 80             	mov    %eax,-0x80(%ebp)
f012ba37:	8b 45 80             	mov    -0x80(%ebp),%eax
f012ba3a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba3f:	f7 75 84             	divl   -0x7c(%ebp)
f012ba42:	8b 45 80             	mov    -0x80(%ebp),%eax
f012ba45:	29 d0                	sub    %edx,%eax
f012ba47:	89 c3                	mov    %eax,%ebx
f012ba49:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012ba50:	10 00 00 
f012ba53:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ba58:	0f b6 d0             	movzbl %al,%edx
f012ba5b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012ba61:	01 d0                	add    %edx,%eax
f012ba63:	48                   	dec    %eax
f012ba64:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012ba6a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012ba70:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba75:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012ba7b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012ba81:	29 d0                	sub    %edx,%eax
f012ba83:	01 c3                	add    %eax,%ebx
f012ba85:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012ba8c:	10 00 00 
f012ba8f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012ba94:	0f b6 c0             	movzbl %al,%eax
f012ba97:	c1 e0 04             	shl    $0x4,%eax
f012ba9a:	89 c2                	mov    %eax,%edx
f012ba9c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012baa2:	01 d0                	add    %edx,%eax
f012baa4:	48                   	dec    %eax
f012baa5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012baab:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bab1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bab6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012babc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012bac2:	29 d0                	sub    %edx,%eax
f012bac4:	01 d8                	add    %ebx,%eax
f012bac6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bacb:	39 c1                	cmp    %eax,%ecx
f012bacd:	74 17                	je     f012bae6 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012bacf:	83 ec 04             	sub    $0x4,%esp
f012bad2:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bad7:	68 fd 0e 00 00       	push   $0xefd
f012badc:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bae1:	e8 15 47 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bae6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bae9:	e8 d1 0d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012baee:	29 c3                	sub    %eax,%ebx
f012baf0:	89 d8                	mov    %ebx,%eax
f012baf2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012baf7:	74 17                	je     f012bb10 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012baf9:	83 ec 04             	sub    $0x4,%esp
f012bafc:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bb01:	68 ff 0e 00 00       	push   $0xeff
f012bb06:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bb0b:	e8 eb 46 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bb10:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012bb17:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bb1a:	e8 a0 0d fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bb1f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bb22:	83 ec 08             	sub    $0x8,%esp
f012bb25:	68 00 fc 0f 00       	push   $0xffc00
f012bb2a:	6a 00                	push   $0x0
f012bb2c:	e8 84 bf fd ff       	call   f0107ab5 <krealloc>
f012bb31:	83 c4 10             	add    $0x10,%esp
f012bb34:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bb3a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb40:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bb45:	77 17                	ja     f012bb5e <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb47:	83 ec 04             	sub    $0x4,%esp
f012bb4a:	68 00 bf 13 f0       	push   $0xf013bf00
f012bb4f:	68 06 0f 00 00       	push   $0xf06
f012bb54:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bb59:	e8 9d 46 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012bb5e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bb64:	89 c1                	mov    %eax,%ecx
f012bb66:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012bb6d:	10 00 00 
f012bb70:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012bb76:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb7b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012bb81:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bb87:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb8c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012bb92:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012bb98:	29 d0                	sub    %edx,%eax
f012bb9a:	89 c3                	mov    %eax,%ebx
f012bb9c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012bba3:	10 00 00 
f012bba6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bbab:	0f b6 d0             	movzbl %al,%edx
f012bbae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012bbb4:	01 d0                	add    %edx,%eax
f012bbb6:	48                   	dec    %eax
f012bbb7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012bbbd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bbc3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbc8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012bbce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012bbd4:	29 d0                	sub    %edx,%eax
f012bbd6:	01 c3                	add    %eax,%ebx
f012bbd8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012bbdf:	10 00 00 
f012bbe2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bbe7:	0f b6 c0             	movzbl %al,%eax
f012bbea:	c1 e0 04             	shl    $0x4,%eax
f012bbed:	89 c2                	mov    %eax,%edx
f012bbef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012bbf5:	01 d0                	add    %edx,%eax
f012bbf7:	48                   	dec    %eax
f012bbf8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012bbfe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bc04:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc09:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012bc0f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012bc15:	29 d0                	sub    %edx,%eax
f012bc17:	01 d8                	add    %ebx,%eax
f012bc19:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012bc1e:	39 c1                	cmp    %eax,%ecx
f012bc20:	74 17                	je     f012bc39 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012bc22:	83 ec 04             	sub    $0x4,%esp
f012bc25:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bc2a:	68 08 0f 00 00       	push   $0xf08
f012bc2f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bc34:	e8 c2 45 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bc39:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bc3c:	e8 7e 0c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bc41:	29 c3                	sub    %eax,%ebx
f012bc43:	89 d8                	mov    %ebx,%eax
f012bc45:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bc4a:	74 17                	je     f012bc63 <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012bc4c:	83 ec 04             	sub    $0x4,%esp
f012bc4f:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bc54:	68 0a 0f 00 00       	push   $0xf0a
f012bc59:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bc5e:	e8 98 45 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bc63:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012bc6a:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bc6d:	e8 4d 0c fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bc72:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012bc75:	83 ec 08             	sub    $0x8,%esp
f012bc78:	68 00 fc 1f 00       	push   $0x1ffc00
f012bc7d:	6a 00                	push   $0x0
f012bc7f:	e8 31 be fd ff       	call   f0107ab5 <krealloc>
f012bc84:	83 c4 10             	add    $0x10,%esp
f012bc87:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012bc8d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bc93:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012bc98:	77 17                	ja     f012bcb1 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc9a:	83 ec 04             	sub    $0x4,%esp
f012bc9d:	68 00 bf 13 f0       	push   $0xf013bf00
f012bca2:	68 11 0f 00 00       	push   $0xf11
f012bca7:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bcac:	e8 4a 45 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012bcb1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bcb7:	89 c1                	mov    %eax,%ecx
f012bcb9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012bcc0:	10 00 00 
f012bcc3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012bcc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bcce:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012bcd4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bcda:	ba 00 00 00 00       	mov    $0x0,%edx
f012bcdf:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012bce5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012bceb:	29 d0                	sub    %edx,%eax
f012bced:	89 c3                	mov    %eax,%ebx
f012bcef:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012bcf6:	10 00 00 
f012bcf9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bcfe:	0f b6 d0             	movzbl %al,%edx
f012bd01:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012bd07:	01 d0                	add    %edx,%eax
f012bd09:	48                   	dec    %eax
f012bd0a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012bd10:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bd16:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd1b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012bd21:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012bd27:	29 d0                	sub    %edx,%eax
f012bd29:	01 c3                	add    %eax,%ebx
f012bd2b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012bd32:	10 00 00 
f012bd35:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bd3a:	0f b6 c0             	movzbl %al,%eax
f012bd3d:	c1 e0 04             	shl    $0x4,%eax
f012bd40:	89 c2                	mov    %eax,%edx
f012bd42:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012bd48:	01 d0                	add    %edx,%eax
f012bd4a:	48                   	dec    %eax
f012bd4b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012bd51:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bd57:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd5c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012bd62:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012bd68:	29 d0                	sub    %edx,%eax
f012bd6a:	01 d8                	add    %ebx,%eax
f012bd6c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012bd71:	39 c1                	cmp    %eax,%ecx
f012bd73:	74 17                	je     f012bd8c <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012bd75:	83 ec 04             	sub    $0x4,%esp
f012bd78:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bd7d:	68 13 0f 00 00       	push   $0xf13
f012bd82:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bd87:	e8 6f 44 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bd8c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd8f:	e8 2b 0b fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bd94:	29 c3                	sub    %eax,%ebx
f012bd96:	89 d8                	mov    %ebx,%eax
f012bd98:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bd9d:	74 17                	je     f012bdb6 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012bd9f:	83 ec 04             	sub    $0x4,%esp
f012bda2:	68 6e bf 13 f0       	push   $0xf013bf6e
f012bda7:	68 15 0f 00 00       	push   $0xf15
f012bdac:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bdb1:	e8 45 44 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bdb6:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012bdbd:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012bdc0:	e8 fa 0a fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bdc5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012bdc8:	83 ec 08             	sub    $0x8,%esp
f012bdcb:	68 00 fc 1f 00       	push   $0x1ffc00
f012bdd0:	6a 00                	push   $0x0
f012bdd2:	e8 de bc fd ff       	call   f0107ab5 <krealloc>
f012bdd7:	83 c4 10             	add    $0x10,%esp
f012bdda:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012bde0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bde6:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012bdeb:	77 17                	ja     f012be04 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bded:	83 ec 04             	sub    $0x4,%esp
f012bdf0:	68 00 bf 13 f0       	push   $0xf013bf00
f012bdf5:	68 1c 0f 00 00       	push   $0xf1c
f012bdfa:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bdff:	e8 f7 43 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012be04:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012be0a:	89 c1                	mov    %eax,%ecx
f012be0c:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012be13:	10 00 00 
f012be16:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012be1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012be21:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012be27:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012be2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012be32:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012be38:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012be3e:	29 d0                	sub    %edx,%eax
f012be40:	89 c3                	mov    %eax,%ebx
f012be42:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012be49:	10 00 00 
f012be4c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012be51:	0f b6 d0             	movzbl %al,%edx
f012be54:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012be5a:	01 d0                	add    %edx,%eax
f012be5c:	48                   	dec    %eax
f012be5d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012be63:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012be69:	ba 00 00 00 00       	mov    $0x0,%edx
f012be6e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012be74:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012be7a:	29 d0                	sub    %edx,%eax
f012be7c:	01 c3                	add    %eax,%ebx
f012be7e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012be85:	10 00 00 
f012be88:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012be8d:	0f b6 c0             	movzbl %al,%eax
f012be90:	c1 e0 04             	shl    $0x4,%eax
f012be93:	89 c2                	mov    %eax,%edx
f012be95:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012be9b:	01 d0                	add    %edx,%eax
f012be9d:	48                   	dec    %eax
f012be9e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012bea4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012beaa:	ba 00 00 00 00       	mov    $0x0,%edx
f012beaf:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012beb5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012bebb:	29 d0                	sub    %edx,%eax
f012bebd:	01 d8                	add    %ebx,%eax
f012bebf:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012bec4:	39 c1                	cmp    %eax,%ecx
f012bec6:	74 17                	je     f012bedf <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012bec8:	83 ec 04             	sub    $0x4,%esp
f012becb:	68 3c bf 13 f0       	push   $0xf013bf3c
f012bed0:	68 1e 0f 00 00       	push   $0xf1e
f012bed5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012beda:	e8 1c 43 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012bedf:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bee2:	e8 d8 09 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bee7:	29 c3                	sub    %eax,%ebx
f012bee9:	89 d8                	mov    %ebx,%eax
f012beeb:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bef0:	74 17                	je     f012bf09 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012bef2:	83 ec 04             	sub    $0x4,%esp
f012bef5:	68 6e bf 13 f0       	push   $0xf013bf6e
f012befa:	68 20 0f 00 00       	push   $0xf20
f012beff:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bf04:	e8 f2 42 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012bf09:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012bf10:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bf13:	e8 a7 09 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012bf18:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012bf1b:	83 ec 08             	sub    $0x8,%esp
f012bf1e:	68 00 fc 2f 00       	push   $0x2ffc00
f012bf23:	6a 00                	push   $0x0
f012bf25:	e8 8b bb fd ff       	call   f0107ab5 <krealloc>
f012bf2a:	83 c4 10             	add    $0x10,%esp
f012bf2d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012bf33:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bf39:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012bf3e:	77 17                	ja     f012bf57 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bf40:	83 ec 04             	sub    $0x4,%esp
f012bf43:	68 00 bf 13 f0       	push   $0xf013bf00
f012bf48:	68 27 0f 00 00       	push   $0xf27
f012bf4d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012bf52:	e8 a4 42 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012bf57:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bf5d:	89 c1                	mov    %eax,%ecx
f012bf5f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012bf66:	10 00 00 
f012bf69:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012bf6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bf74:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012bf7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bf80:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf85:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012bf8b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bf91:	29 d0                	sub    %edx,%eax
f012bf93:	89 c3                	mov    %eax,%ebx
f012bf95:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012bf9c:	10 00 00 
f012bf9f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bfa4:	0f b6 d0             	movzbl %al,%edx
f012bfa7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012bfad:	01 d0                	add    %edx,%eax
f012bfaf:	48                   	dec    %eax
f012bfb0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012bfb6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bfbc:	ba 00 00 00 00       	mov    $0x0,%edx
f012bfc1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012bfc7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012bfcd:	29 d0                	sub    %edx,%eax
f012bfcf:	01 c3                	add    %eax,%ebx
f012bfd1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012bfd8:	10 00 00 
f012bfdb:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012bfe0:	0f b6 c0             	movzbl %al,%eax
f012bfe3:	c1 e0 04             	shl    $0x4,%eax
f012bfe6:	89 c2                	mov    %eax,%edx
f012bfe8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012bfee:	01 d0                	add    %edx,%eax
f012bff0:	48                   	dec    %eax
f012bff1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012bff7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012bffd:	ba 00 00 00 00       	mov    $0x0,%edx
f012c002:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012c008:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012c00e:	29 d0                	sub    %edx,%eax
f012c010:	01 d8                	add    %ebx,%eax
f012c012:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c017:	39 c1                	cmp    %eax,%ecx
f012c019:	74 17                	je     f012c032 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012c01b:	83 ec 04             	sub    $0x4,%esp
f012c01e:	68 3c bf 13 f0       	push   $0xf013bf3c
f012c023:	68 29 0f 00 00       	push   $0xf29
f012c028:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c02d:	e8 c9 41 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c032:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c035:	e8 85 08 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c03a:	29 c3                	sub    %eax,%ebx
f012c03c:	89 d8                	mov    %ebx,%eax
f012c03e:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c043:	74 17                	je     f012c05c <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012c045:	83 ec 04             	sub    $0x4,%esp
f012c048:	68 a4 b0 13 f0       	push   $0xf013b0a4
f012c04d:	68 2b 0f 00 00       	push   $0xf2b
f012c052:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c057:	e8 9f 41 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c05c:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012c063:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c066:	e8 54 08 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c06b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c06e:	83 ec 08             	sub    $0x8,%esp
f012c071:	68 00 fc 2f 00       	push   $0x2ffc00
f012c076:	6a 00                	push   $0x0
f012c078:	e8 38 ba fd ff       	call   f0107ab5 <krealloc>
f012c07d:	83 c4 10             	add    $0x10,%esp
f012c080:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c086:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c08c:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c091:	77 17                	ja     f012c0aa <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c093:	83 ec 04             	sub    $0x4,%esp
f012c096:	68 00 bf 13 f0       	push   $0xf013bf00
f012c09b:	68 32 0f 00 00       	push   $0xf32
f012c0a0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c0a5:	e8 51 41 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c0aa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c0b0:	89 c1                	mov    %eax,%ecx
f012c0b2:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012c0b9:	10 00 00 
f012c0bc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012c0c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c0c7:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012c0cd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c0d3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c0d8:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012c0de:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012c0e4:	29 d0                	sub    %edx,%eax
f012c0e6:	89 c3                	mov    %eax,%ebx
f012c0e8:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012c0ef:	10 00 00 
f012c0f2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c0f7:	0f b6 d0             	movzbl %al,%edx
f012c0fa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012c100:	01 d0                	add    %edx,%eax
f012c102:	48                   	dec    %eax
f012c103:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012c109:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c10f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c114:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012c11a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012c120:	29 d0                	sub    %edx,%eax
f012c122:	01 c3                	add    %eax,%ebx
f012c124:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012c12b:	10 00 00 
f012c12e:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012c133:	0f b6 c0             	movzbl %al,%eax
f012c136:	c1 e0 04             	shl    $0x4,%eax
f012c139:	89 c2                	mov    %eax,%edx
f012c13b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012c141:	01 d0                	add    %edx,%eax
f012c143:	48                   	dec    %eax
f012c144:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012c14a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c150:	ba 00 00 00 00       	mov    $0x0,%edx
f012c155:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012c15b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012c161:	29 d0                	sub    %edx,%eax
f012c163:	01 d8                	add    %ebx,%eax
f012c165:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c16a:	39 c1                	cmp    %eax,%ecx
f012c16c:	74 17                	je     f012c185 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012c16e:	83 ec 04             	sub    $0x4,%esp
f012c171:	68 3c bf 13 f0       	push   $0xf013bf3c
f012c176:	68 34 0f 00 00       	push   $0xf34
f012c17b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c180:	e8 76 40 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c185:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c188:	e8 32 07 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c18d:	29 c3                	sub    %eax,%ebx
f012c18f:	89 d8                	mov    %ebx,%eax
f012c191:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c196:	74 17                	je     f012c1af <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012c198:	83 ec 04             	sub    $0x4,%esp
f012c19b:	68 6e bf 13 f0       	push   $0xf013bf6e
f012c1a0:	68 36 0f 00 00       	push   $0xf36
f012c1a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c1aa:	e8 4c 40 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c1af:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012c1b6:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1b9:	e8 01 07 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c1be:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c1c1:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012c1c8:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c1cb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1d1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012c1d7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c1dd:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c1e0:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c1e2:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012c1e8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c1ee:	01 c2                	add    %eax,%edx
f012c1f0:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c1f3:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c1f5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c1fb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c201:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c208:	eb 11                	jmp    f012c21b <test_krealloc+0xb1c>
			ptr[i] = 2;
f012c20a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c20d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c213:	01 d0                	add    %edx,%eax
f012c215:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c218:	ff 45 f4             	incl   -0xc(%ebp)
f012c21b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c221:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c224:	7d e4                	jge    f012c20a <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c226:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c22c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012c232:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c238:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c23e:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c244:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c24b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c251:	01 d0                	add    %edx,%eax
f012c253:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c259:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c25f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c265:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c26c:	eb 1b                	jmp    f012c289 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012c26e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c271:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c278:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c27e:	01 d0                	add    %edx,%eax
f012c280:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c286:	ff 45 f0             	incl   -0x10(%ebp)
f012c289:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c28f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c292:	7d da                	jge    f012c26e <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c294:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c29a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c2a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c2a7:	eb 17                	jmp    f012c2c0 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012c2a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c2ac:	01 c0                	add    %eax,%eax
f012c2ae:	89 c2                	mov    %eax,%edx
f012c2b0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2b6:	01 d0                	add    %edx,%eax
f012c2b8:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c2bd:	ff 45 ec             	incl   -0x14(%ebp)
f012c2c0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c2c6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c2c9:	7d de                	jge    f012c2a9 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c2cb:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c2d1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012c2d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2dd:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c2e2:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c2e8:	01 c0                	add    %eax,%eax
f012c2ea:	89 c2                	mov    %eax,%edx
f012c2ec:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c2f2:	01 d0                	add    %edx,%eax
f012c2f4:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c2f9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c2ff:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c305:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c30c:	eb 49                	jmp    f012c357 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012c30e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c311:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c318:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c31e:	01 d0                	add    %edx,%eax
f012c320:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c323:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c326:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c32d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c333:	01 d0                	add    %edx,%eax
f012c335:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c33b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c33e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c345:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c34b:	01 d0                	add    %edx,%eax
f012c34d:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c354:	ff 45 e8             	incl   -0x18(%ebp)
f012c357:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c35d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c360:	7d ac                	jge    f012c30e <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c362:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c368:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012c36e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c374:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c377:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c37d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c383:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c389:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c390:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c396:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c39d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3a3:	01 d0                	add    %edx,%eax
f012c3a5:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c3a8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3ae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3b5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3bb:	01 d0                	add    %edx,%eax
f012c3bd:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c3c3:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c3c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c3d0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c3d6:	01 d0                	add    %edx,%eax
f012c3d8:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c3df:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c3e5:	8a 00                	mov    (%eax),%al
f012c3e7:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c3ea:	75 17                	jne    f012c403 <test_krealloc+0xd04>
f012c3ec:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012c3f2:	89 c2                	mov    %eax,%edx
f012c3f4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012c3fa:	01 d0                	add    %edx,%eax
f012c3fc:	8a 00                	mov    (%eax),%al
f012c3fe:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c401:	74 17                	je     f012c41a <test_krealloc+0xd1b>
			panic(
f012c403:	83 ec 04             	sub    $0x4,%esp
f012c406:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c40b:	68 79 0f 00 00       	push   $0xf79
f012c410:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c415:	e8 e1 3d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c41a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c420:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c426:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c42c:	8a 00                	mov    (%eax),%al
f012c42e:	3c 02                	cmp    $0x2,%al
f012c430:	75 16                	jne    f012c448 <test_krealloc+0xd49>
f012c432:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c438:	89 c2                	mov    %eax,%edx
f012c43a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c440:	01 d0                	add    %edx,%eax
f012c442:	8a 00                	mov    (%eax),%al
f012c444:	3c 02                	cmp    $0x2,%al
f012c446:	74 20                	je     f012c468 <test_krealloc+0xd69>
			panic(
f012c448:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c44e:	8a 00                	mov    (%eax),%al
f012c450:	0f be c0             	movsbl %al,%eax
f012c453:	50                   	push   %eax
f012c454:	68 cc bf 13 f0       	push   $0xf013bfcc
f012c459:	68 7f 0f 00 00       	push   $0xf7f
f012c45e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c463:	e8 93 3d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c468:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c46e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c474:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c47a:	8b 00                	mov    (%eax),%eax
f012c47c:	83 f8 03             	cmp    $0x3,%eax
f012c47f:	75 1c                	jne    f012c49d <test_krealloc+0xd9e>
f012c481:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012c487:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c48e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c494:	01 d0                	add    %edx,%eax
f012c496:	8b 00                	mov    (%eax),%eax
f012c498:	83 f8 03             	cmp    $0x3,%eax
f012c49b:	74 17                	je     f012c4b4 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012c49d:	83 ec 04             	sub    $0x4,%esp
f012c4a0:	68 18 c0 13 f0       	push   $0xf013c018
f012c4a5:	68 83 0f 00 00       	push   $0xf83
f012c4aa:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c4af:	e8 47 3d fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012c4b4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4ba:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c4c0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4c6:	8b 00                	mov    (%eax),%eax
f012c4c8:	83 f8 04             	cmp    $0x4,%eax
f012c4cb:	75 1c                	jne    f012c4e9 <test_krealloc+0xdea>
f012c4cd:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c4d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c4da:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4e0:	01 d0                	add    %edx,%eax
f012c4e2:	8b 00                	mov    (%eax),%eax
f012c4e4:	83 f8 04             	cmp    $0x4,%eax
f012c4e7:	74 17                	je     f012c500 <test_krealloc+0xe01>
			panic(
f012c4e9:	83 ec 04             	sub    $0x4,%esp
f012c4ec:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c4f1:	68 88 0f 00 00       	push   $0xf88
f012c4f6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c4fb:	e8 fb 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c500:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c506:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c50c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c512:	66 8b 00             	mov    (%eax),%ax
f012c515:	66 83 f8 05          	cmp    $0x5,%ax
f012c519:	75 1b                	jne    f012c536 <test_krealloc+0xe37>
f012c51b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c521:	01 c0                	add    %eax,%eax
f012c523:	89 c2                	mov    %eax,%edx
f012c525:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c52b:	01 d0                	add    %edx,%eax
f012c52d:	66 8b 00             	mov    (%eax),%ax
f012c530:	66 83 f8 05          	cmp    $0x5,%ax
f012c534:	74 17                	je     f012c54d <test_krealloc+0xe4e>
			panic(
f012c536:	83 ec 04             	sub    $0x4,%esp
f012c539:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c53e:	68 8d 0f 00 00       	push   $0xf8d
f012c543:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c548:	e8 ae 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c54d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c553:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c559:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c55f:	66 8b 00             	mov    (%eax),%ax
f012c562:	66 83 f8 06          	cmp    $0x6,%ax
f012c566:	75 1b                	jne    f012c583 <test_krealloc+0xe84>
f012c568:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012c56e:	01 c0                	add    %eax,%eax
f012c570:	89 c2                	mov    %eax,%edx
f012c572:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c578:	01 d0                	add    %edx,%eax
f012c57a:	66 8b 00             	mov    (%eax),%ax
f012c57d:	66 83 f8 06          	cmp    $0x6,%ax
f012c581:	74 17                	je     f012c59a <test_krealloc+0xe9b>
			panic(
f012c583:	83 ec 04             	sub    $0x4,%esp
f012c586:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c58b:	68 92 0f 00 00       	push   $0xf92
f012c590:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c595:	e8 61 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c59a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c5a0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c5a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5ac:	8a 00                	mov    (%eax),%al
f012c5ae:	3c 07                	cmp    $0x7,%al
f012c5b0:	75 1b                	jne    f012c5cd <test_krealloc+0xece>
f012c5b2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c5b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c5bf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5c5:	01 d0                	add    %edx,%eax
f012c5c7:	8a 00                	mov    (%eax),%al
f012c5c9:	3c 07                	cmp    $0x7,%al
f012c5cb:	74 17                	je     f012c5e4 <test_krealloc+0xee5>
			panic(
f012c5cd:	83 ec 04             	sub    $0x4,%esp
f012c5d0:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c5d5:	68 97 0f 00 00       	push   $0xf97
f012c5da:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c5df:	e8 17 3c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c5e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5ea:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5ee:	66 83 f8 07          	cmp    $0x7,%ax
f012c5f2:	75 1f                	jne    f012c613 <test_krealloc+0xf14>
f012c5f4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c5fa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c601:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c607:	01 d0                	add    %edx,%eax
f012c609:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c60d:	66 83 f8 07          	cmp    $0x7,%ax
f012c611:	74 17                	je     f012c62a <test_krealloc+0xf2b>
			panic(
f012c613:	83 ec 04             	sub    $0x4,%esp
f012c616:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c61b:	68 9a 0f 00 00       	push   $0xf9a
f012c620:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c625:	e8 d1 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c62a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c630:	8b 40 04             	mov    0x4(%eax),%eax
f012c633:	83 f8 07             	cmp    $0x7,%eax
f012c636:	75 1d                	jne    f012c655 <test_krealloc+0xf56>
f012c638:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c63e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c645:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c64b:	01 d0                	add    %edx,%eax
f012c64d:	8b 40 04             	mov    0x4(%eax),%eax
f012c650:	83 f8 07             	cmp    $0x7,%eax
f012c653:	74 17                	je     f012c66c <test_krealloc+0xf6d>
			panic(
f012c655:	83 ec 04             	sub    $0x4,%esp
f012c658:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c65d:	68 9d 0f 00 00       	push   $0xf9d
f012c662:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c667:	e8 8f 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c66c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c672:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c678:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c67e:	8a 00                	mov    (%eax),%al
f012c680:	3c 08                	cmp    $0x8,%al
f012c682:	75 1b                	jne    f012c69f <test_krealloc+0xfa0>
f012c684:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c68a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c691:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c697:	01 d0                	add    %edx,%eax
f012c699:	8a 00                	mov    (%eax),%al
f012c69b:	3c 08                	cmp    $0x8,%al
f012c69d:	74 17                	je     f012c6b6 <test_krealloc+0xfb7>
			panic(
f012c69f:	83 ec 04             	sub    $0x4,%esp
f012c6a2:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c6a7:	68 a2 0f 00 00       	push   $0xfa2
f012c6ac:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c6b1:	e8 45 3b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c6b6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6bc:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6c0:	66 83 f8 08          	cmp    $0x8,%ax
f012c6c4:	75 1f                	jne    f012c6e5 <test_krealloc+0xfe6>
f012c6c6:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c6cc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c6d9:	01 d0                	add    %edx,%eax
f012c6db:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c6df:	66 83 f8 08          	cmp    $0x8,%ax
f012c6e3:	74 17                	je     f012c6fc <test_krealloc+0xffd>
			panic(
f012c6e5:	83 ec 04             	sub    $0x4,%esp
f012c6e8:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c6ed:	68 a5 0f 00 00       	push   $0xfa5
f012c6f2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c6f7:	e8 ff 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c6fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c702:	8b 40 04             	mov    0x4(%eax),%eax
f012c705:	83 f8 08             	cmp    $0x8,%eax
f012c708:	75 1d                	jne    f012c727 <test_krealloc+0x1028>
f012c70a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c710:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c717:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c71d:	01 d0                	add    %edx,%eax
f012c71f:	8b 40 04             	mov    0x4(%eax),%eax
f012c722:	83 f8 08             	cmp    $0x8,%eax
f012c725:	74 17                	je     f012c73e <test_krealloc+0x103f>
			panic(
f012c727:	83 ec 04             	sub    $0x4,%esp
f012c72a:	68 8c bf 13 f0       	push   $0xf013bf8c
f012c72f:	68 a8 0f 00 00       	push   $0xfa8
f012c734:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c739:	e8 bd 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c73e:	e8 7c 01 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c743:	89 c2                	mov    %eax,%edx
f012c745:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c748:	39 c2                	cmp    %eax,%edx
f012c74a:	74 17                	je     f012c763 <test_krealloc+0x1064>
			panic(
f012c74c:	83 ec 04             	sub    $0x4,%esp
f012c74f:	68 4c c0 13 f0       	push   $0xf013c04c
f012c754:	68 ac 0f 00 00       	push   $0xfac
f012c759:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c75e:	e8 98 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c763:	83 ec 0c             	sub    $0xc,%esp
f012c766:	68 98 c0 13 f0       	push   $0xf013c098
f012c76b:	e8 12 45 fd ff       	call   f0100c82 <cprintf>
f012c770:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c773:	e8 47 01 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c778:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c77b:	e8 bc 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c780:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c786:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c78c:	83 ec 08             	sub    $0x8,%esp
f012c78f:	6a 00                	push   $0x0
f012c791:	50                   	push   %eax
f012c792:	e8 1e b3 fd ff       	call   f0107ab5 <krealloc>
f012c797:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c79a:	e8 9d 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c79f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c7a5:	74 17                	je     f012c7be <test_krealloc+0x10bf>
			panic(
f012c7a7:	83 ec 04             	sub    $0x4,%esp
f012c7aa:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c7af:	68 b9 0f 00 00       	push   $0xfb9
f012c7b4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c7b9:	e8 3d 3a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c7be:	e8 fc 00 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c7c3:	89 c2                	mov    %eax,%edx
f012c7c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c7c8:	29 c2                	sub    %eax,%edx
f012c7ca:	89 d0                	mov    %edx,%eax
f012c7cc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7d1:	74 17                	je     f012c7ea <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c7d3:	83 ec 04             	sub    $0x4,%esp
f012c7d6:	68 30 c1 13 f0       	push   $0xf013c130
f012c7db:	68 bb 0f 00 00       	push   $0xfbb
f012c7e0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c7e5:	e8 11 3a fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7ea:	e8 d0 00 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c7ef:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c7f2:	e8 45 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c7f7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c7fd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c803:	83 ec 08             	sub    $0x8,%esp
f012c806:	6a 00                	push   $0x0
f012c808:	50                   	push   %eax
f012c809:	e8 a7 b2 fd ff       	call   f0107ab5 <krealloc>
f012c80e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c811:	e8 26 75 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c816:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c81c:	74 17                	je     f012c835 <test_krealloc+0x1136>
			panic(
f012c81e:	83 ec 04             	sub    $0x4,%esp
f012c821:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c826:	68 c4 0f 00 00       	push   $0xfc4
f012c82b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c830:	e8 c6 39 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c835:	e8 85 00 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c83a:	89 c2                	mov    %eax,%edx
f012c83c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c83f:	29 c2                	sub    %eax,%edx
f012c841:	89 d0                	mov    %edx,%eax
f012c843:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c848:	74 17                	je     f012c861 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c84a:	83 ec 04             	sub    $0x4,%esp
f012c84d:	68 30 c1 13 f0       	push   $0xf013c130
f012c852:	68 c6 0f 00 00       	push   $0xfc6
f012c857:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c85c:	e8 9a 39 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c861:	e8 59 00 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c866:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c869:	e8 ce 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c86e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c874:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c87a:	83 ec 08             	sub    $0x8,%esp
f012c87d:	6a 00                	push   $0x0
f012c87f:	50                   	push   %eax
f012c880:	e8 30 b2 fd ff       	call   f0107ab5 <krealloc>
f012c885:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c888:	e8 af 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c88d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c893:	74 17                	je     f012c8ac <test_krealloc+0x11ad>
			panic(
f012c895:	83 ec 04             	sub    $0x4,%esp
f012c898:	68 74 ac 13 f0       	push   $0xf013ac74
f012c89d:	68 ce 0f 00 00       	push   $0xfce
f012c8a2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c8a7:	e8 4f 39 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c8ac:	e8 0e 00 fe ff       	call   f010c8bf <sys_calculate_free_frames>
f012c8b1:	89 c2                	mov    %eax,%edx
f012c8b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8b6:	29 c2                	sub    %eax,%edx
f012c8b8:	89 d0                	mov    %edx,%eax
f012c8ba:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c8bf:	74 17                	je     f012c8d8 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c8c1:	83 ec 04             	sub    $0x4,%esp
f012c8c4:	68 30 c1 13 f0       	push   $0xf013c130
f012c8c9:	68 d0 0f 00 00       	push   $0xfd0
f012c8ce:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c8d3:	e8 23 39 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c8d8:	e8 e2 ff fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012c8dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c8e0:	e8 57 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c8e5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c8eb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c8f1:	83 ec 08             	sub    $0x8,%esp
f012c8f4:	6a 00                	push   $0x0
f012c8f6:	50                   	push   %eax
f012c8f7:	e8 b9 b1 fd ff       	call   f0107ab5 <krealloc>
f012c8fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c8ff:	e8 38 74 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012c904:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c90a:	74 17                	je     f012c923 <test_krealloc+0x1224>
			panic(
f012c90c:	83 ec 04             	sub    $0x4,%esp
f012c90f:	68 bc c0 13 f0       	push   $0xf013c0bc
f012c914:	68 d8 0f 00 00       	push   $0xfd8
f012c919:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c91e:	e8 d8 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c923:	e8 97 ff fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012c928:	89 c2                	mov    %eax,%edx
f012c92a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c92d:	29 c2                	sub    %eax,%edx
f012c92f:	89 d0                	mov    %edx,%eax
f012c931:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c936:	74 17                	je     f012c94f <test_krealloc+0x1250>
			panic(
f012c938:	83 ec 04             	sub    $0x4,%esp
f012c93b:	68 64 c1 13 f0       	push   $0xf013c164
f012c940:	68 db 0f 00 00       	push   $0xfdb
f012c945:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c94a:	e8 ac 38 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c94f:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c956:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c95d:	eb 48                	jmp    f012c9a7 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c95f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c962:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012c967:	83 ec 04             	sub    $0x4,%esp
f012c96a:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c970:	51                   	push   %ecx
f012c971:	52                   	push   %edx
f012c972:	50                   	push   %eax
f012c973:	e8 62 a0 fd ff       	call   f01069da <get_page_table>
f012c978:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c97b:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c981:	85 c0                	test   %eax,%eax
f012c983:	75 17                	jne    f012c99c <test_krealloc+0x129d>
					panic(
f012c985:	83 ec 04             	sub    $0x4,%esp
f012c988:	68 5c b5 13 f0       	push   $0xf013b55c
f012c98d:	68 e7 0f 00 00       	push   $0xfe7
f012c992:	68 5a ac 13 f0       	push   $0xf013ac5a
f012c997:	e8 5f 38 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c99c:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c9a3:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c9a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c9ab:	78 b2                	js     f012c95f <test_krealloc+0x1260>
f012c9ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c9b1:	7f 09                	jg     f012c9bc <test_krealloc+0x12bd>
f012c9b3:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c9ba:	76 a3                	jbe    f012c95f <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c9bc:	83 ec 0c             	sub    $0xc,%esp
f012c9bf:	68 a3 c1 13 f0       	push   $0xf013c1a3
f012c9c4:	e8 b9 42 fd ff       	call   f0100c82 <cprintf>
f012c9c9:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c9cc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c9d2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c9df:	eb 21                	jmp    f012ca02 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c9e1:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c9e7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c9ea:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c9f0:	01 c8                	add    %ecx,%eax
f012c9f2:	8a 00                	mov    (%eax),%al
f012c9f4:	0f be c0             	movsbl %al,%eax
f012c9f7:	01 d0                	add    %edx,%eax
f012c9f9:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c9ff:	ff 45 dc             	incl   -0x24(%ebp)
f012ca02:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ca08:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca0b:	7d d4                	jge    f012c9e1 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ca0d:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012ca13:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012ca19:	42                   	inc    %edx
f012ca1a:	01 d2                	add    %edx,%edx
f012ca1c:	39 d0                	cmp    %edx,%eax
f012ca1e:	74 17                	je     f012ca37 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012ca20:	83 ec 04             	sub    $0x4,%esp
f012ca23:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ca28:	68 f9 0f 00 00       	push   $0xff9
f012ca2d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ca32:	e8 c4 37 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012ca37:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca3d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca43:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ca4a:	eb 25                	jmp    f012ca71 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012ca4c:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ca52:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ca55:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ca5c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ca62:	01 c8                	add    %ecx,%eax
f012ca64:	8b 00                	mov    (%eax),%eax
f012ca66:	01 d0                	add    %edx,%eax
f012ca68:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ca6e:	ff 45 dc             	incl   -0x24(%ebp)
f012ca71:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ca77:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ca7a:	7d d0                	jge    f012ca4c <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ca7c:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012ca82:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012ca88:	42                   	inc    %edx
f012ca89:	c1 e2 02             	shl    $0x2,%edx
f012ca8c:	39 d0                	cmp    %edx,%eax
f012ca8e:	74 17                	je     f012caa7 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ca90:	83 ec 04             	sub    $0x4,%esp
f012ca93:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ca98:	68 03 10 00 00       	push   $0x1003
f012ca9d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012caa2:	e8 54 37 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012caa7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012caad:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cab3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012caba:	eb 24                	jmp    f012cae0 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012cabc:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012cac2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cac5:	01 c0                	add    %eax,%eax
f012cac7:	89 c1                	mov    %eax,%ecx
f012cac9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cacf:	01 c8                	add    %ecx,%eax
f012cad1:	66 8b 00             	mov    (%eax),%ax
f012cad4:	98                   	cwtl   
f012cad5:	01 d0                	add    %edx,%eax
f012cad7:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012cadd:	ff 45 dc             	incl   -0x24(%ebp)
f012cae0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cae6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cae9:	7d d1                	jge    f012cabc <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012caeb:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012caf1:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012caf7:	8d 48 01             	lea    0x1(%eax),%ecx
f012cafa:	89 c8                	mov    %ecx,%eax
f012cafc:	c1 e0 02             	shl    $0x2,%eax
f012caff:	01 c8                	add    %ecx,%eax
f012cb01:	39 c2                	cmp    %eax,%edx
f012cb03:	74 17                	je     f012cb1c <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012cb05:	83 ec 04             	sub    $0x4,%esp
f012cb08:	68 ac c1 13 f0       	push   $0xf013c1ac
f012cb0d:	68 0d 10 00 00       	push   $0x100d
f012cb12:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cb17:	e8 df 36 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cb1c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cb22:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb28:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cb2f:	eb 70                	jmp    f012cba1 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012cb31:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012cb37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb3a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb41:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb47:	01 c8                	add    %ecx,%eax
f012cb49:	8a 00                	mov    (%eax),%al
f012cb4b:	0f be c0             	movsbl %al,%eax
f012cb4e:	01 d0                	add    %edx,%eax
f012cb50:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012cb56:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012cb5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb5f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb66:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb6c:	01 c8                	add    %ecx,%eax
f012cb6e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cb72:	98                   	cwtl   
f012cb73:	01 d0                	add    %edx,%eax
f012cb75:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012cb7b:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012cb81:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cb84:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cb8b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012cb91:	01 c8                	add    %ecx,%eax
f012cb93:	8b 40 04             	mov    0x4(%eax),%eax
f012cb96:	01 d0                	add    %edx,%eax
f012cb98:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cb9e:	ff 45 dc             	incl   -0x24(%ebp)
f012cba1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cba7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cbaa:	7d 85                	jge    f012cb31 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cbac:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012cbb2:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbb8:	8d 50 01             	lea    0x1(%eax),%edx
f012cbbb:	89 d0                	mov    %edx,%eax
f012cbbd:	01 c0                	add    %eax,%eax
f012cbbf:	01 d0                	add    %edx,%eax
f012cbc1:	01 c0                	add    %eax,%eax
f012cbc3:	01 d0                	add    %edx,%eax
f012cbc5:	39 c1                	cmp    %eax,%ecx
f012cbc7:	75 3a                	jne    f012cc03 <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cbc9:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012cbcf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbd5:	8d 50 01             	lea    0x1(%eax),%edx
f012cbd8:	89 d0                	mov    %edx,%eax
f012cbda:	01 c0                	add    %eax,%eax
f012cbdc:	01 d0                	add    %edx,%eax
f012cbde:	01 c0                	add    %eax,%eax
f012cbe0:	01 d0                	add    %edx,%eax
f012cbe2:	39 c1                	cmp    %eax,%ecx
f012cbe4:	75 1d                	jne    f012cc03 <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cbe6:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012cbec:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cbf2:	8d 50 01             	lea    0x1(%eax),%edx
f012cbf5:	89 d0                	mov    %edx,%eax
f012cbf7:	01 c0                	add    %eax,%eax
f012cbf9:	01 d0                	add    %edx,%eax
f012cbfb:	01 c0                	add    %eax,%eax
f012cbfd:	01 d0                	add    %edx,%eax
f012cbff:	39 c1                	cmp    %eax,%ecx
f012cc01:	74 17                	je     f012cc1a <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012cc03:	83 ec 04             	sub    $0x4,%esp
f012cc06:	68 ac c1 13 f0       	push   $0xf013c1ac
f012cc0b:	68 1b 10 00 00       	push   $0x101b
f012cc10:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc15:	e8 e1 35 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cc1a:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012cc21:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cc24:	e8 96 fc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cc29:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cc2c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc32:	83 ec 08             	sub    $0x8,%esp
f012cc35:	68 00 3c 00 00       	push   $0x3c00
f012cc3a:	50                   	push   %eax
f012cc3b:	e8 75 ae fd ff       	call   f0107ab5 <krealloc>
f012cc40:	83 c4 10             	add    $0x10,%esp
f012cc43:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc49:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cc4f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc54:	77 17                	ja     f012cc6d <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc56:	83 ec 04             	sub    $0x4,%esp
f012cc59:	68 00 bf 13 f0       	push   $0xf013bf00
f012cc5e:	68 27 10 00 00       	push   $0x1027
f012cc63:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc68:	e8 8e 35 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cc6d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cc73:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cc79:	74 17                	je     f012cc92 <test_krealloc+0x1593>
			panic(
f012cc7b:	83 ec 04             	sub    $0x4,%esp
f012cc7e:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cc83:	68 2a 10 00 00       	push   $0x102a
f012cc88:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cc8d:	e8 69 35 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cc92:	e8 28 fc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cc97:	89 c2                	mov    %eax,%edx
f012cc99:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc9c:	39 c2                	cmp    %eax,%edx
f012cc9e:	74 17                	je     f012ccb7 <test_krealloc+0x15b8>
			panic(
f012cca0:	83 ec 04             	sub    $0x4,%esp
f012cca3:	68 50 c2 13 f0       	push   $0xf013c250
f012cca8:	68 2d 10 00 00       	push   $0x102d
f012ccad:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ccb2:	e8 44 35 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ccb7:	e8 03 fc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ccbc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ccbf:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ccc5:	83 ec 08             	sub    $0x8,%esp
f012ccc8:	68 00 fc 0f 00       	push   $0xffc00
f012cccd:	50                   	push   %eax
f012ccce:	e8 e2 ad fd ff       	call   f0107ab5 <krealloc>
f012ccd3:	83 c4 10             	add    $0x10,%esp
f012ccd6:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ccdc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cce2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cce7:	77 17                	ja     f012cd00 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cce9:	83 ec 04             	sub    $0x4,%esp
f012ccec:	68 00 bf 13 f0       	push   $0xf013bf00
f012ccf1:	68 33 10 00 00       	push   $0x1033
f012ccf6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ccfb:	e8 fb 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cd00:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cd06:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cd0c:	74 17                	je     f012cd25 <test_krealloc+0x1626>
			panic(
f012cd0e:	83 ec 04             	sub    $0x4,%esp
f012cd11:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cd16:	68 36 10 00 00       	push   $0x1036
f012cd1b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd20:	e8 d6 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cd25:	e8 95 fb fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cd2a:	89 c2                	mov    %eax,%edx
f012cd2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cd2f:	39 c2                	cmp    %eax,%edx
f012cd31:	74 17                	je     f012cd4a <test_krealloc+0x164b>
			panic(
f012cd33:	83 ec 04             	sub    $0x4,%esp
f012cd36:	68 50 c2 13 f0       	push   $0xf013c250
f012cd3b:	68 39 10 00 00       	push   $0x1039
f012cd40:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd45:	e8 b1 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cd4a:	e8 70 fb fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cd4f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012cd52:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd58:	83 ec 08             	sub    $0x8,%esp
f012cd5b:	68 00 fc 0f 00       	push   $0xffc00
f012cd60:	50                   	push   %eax
f012cd61:	e8 4f ad fd ff       	call   f0107ab5 <krealloc>
f012cd66:	83 c4 10             	add    $0x10,%esp
f012cd69:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cd6f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012cd75:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cd7a:	77 17                	ja     f012cd93 <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd7c:	83 ec 04             	sub    $0x4,%esp
f012cd7f:	68 00 bf 13 f0       	push   $0xf013bf00
f012cd84:	68 3f 10 00 00       	push   $0x103f
f012cd89:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cd8e:	e8 68 34 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cd93:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd99:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012cd9f:	74 17                	je     f012cdb8 <test_krealloc+0x16b9>
			panic(
f012cda1:	83 ec 04             	sub    $0x4,%esp
f012cda4:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012cda9:	68 42 10 00 00       	push   $0x1042
f012cdae:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cdb3:	e8 43 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012cdb8:	e8 02 fb fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cdbd:	89 c2                	mov    %eax,%edx
f012cdbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cdc2:	39 c2                	cmp    %eax,%edx
f012cdc4:	74 17                	je     f012cddd <test_krealloc+0x16de>
			panic(
f012cdc6:	83 ec 04             	sub    $0x4,%esp
f012cdc9:	68 50 c2 13 f0       	push   $0xf013c250
f012cdce:	68 45 10 00 00       	push   $0x1045
f012cdd3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cdd8:	e8 1e 34 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012cddd:	e8 dd fa fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cde2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012cde5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cdeb:	83 ec 08             	sub    $0x8,%esp
f012cdee:	68 00 fc 0f 00       	push   $0xffc00
f012cdf3:	50                   	push   %eax
f012cdf4:	e8 bc ac fd ff       	call   f0107ab5 <krealloc>
f012cdf9:	83 c4 10             	add    $0x10,%esp
f012cdfc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ce02:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ce08:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ce0d:	77 17                	ja     f012ce26 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ce0f:	83 ec 04             	sub    $0x4,%esp
f012ce12:	68 00 bf 13 f0       	push   $0xf013bf00
f012ce17:	68 4d 10 00 00       	push   $0x104d
f012ce1c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce21:	e8 d5 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012ce26:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ce2c:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ce32:	74 17                	je     f012ce4b <test_krealloc+0x174c>
			panic(
f012ce34:	83 ec 04             	sub    $0x4,%esp
f012ce37:	68 94 c2 13 f0       	push   $0xf013c294
f012ce3c:	68 50 10 00 00       	push   $0x1050
f012ce41:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce46:	e8 b0 33 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ce4b:	e8 6f fa fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ce50:	89 c2                	mov    %eax,%edx
f012ce52:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ce55:	39 c2                	cmp    %eax,%edx
f012ce57:	74 17                	je     f012ce70 <test_krealloc+0x1771>
			panic(
f012ce59:	83 ec 04             	sub    $0x4,%esp
f012ce5c:	68 50 c2 13 f0       	push   $0xf013c250
f012ce61:	68 53 10 00 00       	push   $0x1053
f012ce66:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ce6b:	e8 8b 33 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ce70:	83 ec 0c             	sub    $0xc,%esp
f012ce73:	68 73 b4 13 f0       	push   $0xf013b473
f012ce78:	e8 05 3e fd ff       	call   f0100c82 <cprintf>
f012ce7d:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ce80:	e8 3a fa fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ce85:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012ce88:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ce8e:	83 ec 08             	sub    $0x8,%esp
f012ce91:	68 00 18 10 00       	push   $0x101800
f012ce96:	50                   	push   %eax
f012ce97:	e8 19 ac fd ff       	call   f0107ab5 <krealloc>
f012ce9c:	83 c4 10             	add    $0x10,%esp
f012ce9f:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cea2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cea5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ceaa:	77 17                	ja     f012cec3 <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ceac:	83 ec 04             	sub    $0x4,%esp
f012ceaf:	68 00 bf 13 f0       	push   $0xf013bf00
f012ceb4:	68 5c 10 00 00       	push   $0x105c
f012ceb9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cebe:	e8 38 33 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012cec3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cec9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cecc:	74 17                	je     f012cee5 <test_krealloc+0x17e6>
			panic(
f012cece:	83 ec 04             	sub    $0x4,%esp
f012ced1:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ced6:	68 5f 10 00 00       	push   $0x105f
f012cedb:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cee0:	e8 16 33 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012cee5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cee8:	e8 d2 f9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ceed:	29 c3                	sub    %eax,%ebx
f012ceef:	89 d8                	mov    %ebx,%eax
f012cef1:	83 f8 02             	cmp    $0x2,%eax
f012cef4:	74 17                	je     f012cf0d <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012cef6:	83 ec 04             	sub    $0x4,%esp
f012cef9:	68 70 c3 13 f0       	push   $0xf013c370
f012cefe:	68 61 10 00 00       	push   $0x1061
f012cf03:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf08:	e8 ee 32 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012cf0d:	e8 ad f9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cf12:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012cf15:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf1b:	83 ec 08             	sub    $0x8,%esp
f012cf1e:	68 00 fc 3f 00       	push   $0x3ffc00
f012cf23:	50                   	push   %eax
f012cf24:	e8 8c ab fd ff       	call   f0107ab5 <krealloc>
f012cf29:	83 c4 10             	add    $0x10,%esp
f012cf2c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cf2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cf32:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cf37:	77 17                	ja     f012cf50 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf39:	83 ec 04             	sub    $0x4,%esp
f012cf3c:	68 00 bf 13 f0       	push   $0xf013bf00
f012cf41:	68 67 10 00 00       	push   $0x1067
f012cf46:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf4b:	e8 ab 32 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012cf50:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf56:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cf59:	74 17                	je     f012cf72 <test_krealloc+0x1873>
			panic(
f012cf5b:	83 ec 04             	sub    $0x4,%esp
f012cf5e:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012cf63:	68 6a 10 00 00       	push   $0x106a
f012cf68:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf6d:	e8 89 32 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012cf72:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf75:	e8 45 f9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cf7a:	29 c3                	sub    %eax,%ebx
f012cf7c:	89 d8                	mov    %ebx,%eax
f012cf7e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cf83:	74 17                	je     f012cf9c <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012cf85:	83 ec 04             	sub    $0x4,%esp
f012cf88:	68 70 c3 13 f0       	push   $0xf013c370
f012cf8d:	68 6d 10 00 00       	push   $0x106d
f012cf92:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cf97:	e8 5f 32 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012cf9c:	83 ec 0c             	sub    $0xc,%esp
f012cf9f:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012cfa4:	e8 d9 3c fd ff       	call   f0100c82 <cprintf>
f012cfa9:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012cfac:	e8 0e f9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012cfb1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012cfb4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cfba:	83 ec 08             	sub    $0x8,%esp
f012cfbd:	68 00 fc 9f 00       	push   $0x9ffc00
f012cfc2:	50                   	push   %eax
f012cfc3:	e8 ed aa fd ff       	call   f0107ab5 <krealloc>
f012cfc8:	83 c4 10             	add    $0x10,%esp
f012cfcb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cfd1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfd6:	77 17                	ja     f012cfef <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfd8:	83 ec 04             	sub    $0x4,%esp
f012cfdb:	68 00 bf 13 f0       	push   $0xf013bf00
f012cfe0:	68 78 10 00 00       	push   $0x1078
f012cfe5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012cfea:	e8 0c 32 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012cfef:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012cff6:	10 00 00 
f012cff9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012cfff:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d004:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012d00a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d010:	ba 00 00 00 00       	mov    $0x0,%edx
f012d015:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012d01b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012d021:	29 d0                	sub    %edx,%eax
f012d023:	89 c1                	mov    %eax,%ecx
f012d025:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012d02c:	10 00 00 
f012d02f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d034:	0f b6 d0             	movzbl %al,%edx
f012d037:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012d03d:	01 d0                	add    %edx,%eax
f012d03f:	48                   	dec    %eax
f012d040:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012d046:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d04c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d051:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012d057:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012d05d:	29 d0                	sub    %edx,%eax
f012d05f:	01 c1                	add    %eax,%ecx
f012d061:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012d068:	10 00 00 
f012d06b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d070:	0f b6 c0             	movzbl %al,%eax
f012d073:	c1 e0 04             	shl    $0x4,%eax
f012d076:	89 c2                	mov    %eax,%edx
f012d078:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012d07e:	01 d0                	add    %edx,%eax
f012d080:	48                   	dec    %eax
f012d081:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012d087:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d08d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d092:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012d098:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012d09e:	29 d0                	sub    %edx,%eax
f012d0a0:	01 c8                	add    %ecx,%eax
f012d0a2:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012d0a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0ab:	39 c2                	cmp    %eax,%edx
f012d0ad:	74 18                	je     f012d0c7 <test_krealloc+0x19c8>
			panic(
f012d0af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d0b2:	50                   	push   %eax
f012d0b3:	68 a4 c3 13 f0       	push   $0xf013c3a4
f012d0b8:	68 7c 10 00 00       	push   $0x107c
f012d0bd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d0c2:	e8 34 31 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d0c7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0cd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d0d0:	75 17                	jne    f012d0e9 <test_krealloc+0x19ea>
			panic(
f012d0d2:	83 ec 04             	sub    $0x4,%esp
f012d0d5:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012d0da:	68 7f 10 00 00       	push   $0x107f
f012d0df:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d0e4:	e8 12 31 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d0e9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d0ec:	e8 ce f7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d0f1:	29 c3                	sub    %eax,%ebx
f012d0f3:	89 d8                	mov    %ebx,%eax
f012d0f5:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d0fa:	74 17                	je     f012d113 <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012d0fc:	83 ec 04             	sub    $0x4,%esp
f012d0ff:	68 70 c3 13 f0       	push   $0xf013c370
f012d104:	68 82 10 00 00       	push   $0x1082
f012d109:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d10e:	e8 e8 30 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012d113:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d116:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012d11c:	e8 9e f7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d121:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012d124:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d12a:	83 ec 08             	sub    $0x8,%esp
f012d12d:	68 00 fc 5f 00       	push   $0x5ffc00
f012d132:	50                   	push   %eax
f012d133:	e8 7d a9 fd ff       	call   f0107ab5 <krealloc>
f012d138:	83 c4 10             	add    $0x10,%esp
f012d13b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d13e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d141:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d146:	77 17                	ja     f012d15f <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d148:	83 ec 04             	sub    $0x4,%esp
f012d14b:	68 00 bf 13 f0       	push   $0xf013bf00
f012d150:	68 8b 10 00 00       	push   $0x108b
f012d155:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d15a:	e8 9c 30 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[6])
f012d15f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d165:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d168:	74 17                	je     f012d181 <test_krealloc+0x1a82>
			panic(
f012d16a:	83 ec 04             	sub    $0x4,%esp
f012d16d:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012d172:	68 8e 10 00 00       	push   $0x108e
f012d177:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d17c:	e8 7a 30 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012d181:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d184:	e8 36 f7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d189:	29 c3                	sub    %eax,%ebx
f012d18b:	89 d8                	mov    %ebx,%eax
f012d18d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d192:	74 17                	je     f012d1ab <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012d194:	83 ec 04             	sub    $0x4,%esp
f012d197:	68 70 c3 13 f0       	push   $0xf013c370
f012d19c:	68 91 10 00 00       	push   $0x1091
f012d1a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d1a6:	e8 50 30 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012d1ab:	e8 0f f7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d1b0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d1b3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1b9:	83 ec 08             	sub    $0x8,%esp
f012d1bc:	68 00 fc 3f 01       	push   $0x13ffc00
f012d1c1:	50                   	push   %eax
f012d1c2:	e8 ee a8 fd ff       	call   f0107ab5 <krealloc>
f012d1c7:	83 c4 10             	add    $0x10,%esp
f012d1ca:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d1cd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d1d0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1d5:	77 17                	ja     f012d1ee <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1d7:	83 ec 04             	sub    $0x4,%esp
f012d1da:	68 00 bf 13 f0       	push   $0xf013bf00
f012d1df:	68 98 10 00 00       	push   $0x1098
f012d1e4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d1e9:	e8 0d 30 fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012d1ee:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d1f4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d1f7:	75 17                	jne    f012d210 <test_krealloc+0x1b11>
			panic(
f012d1f9:	83 ec 04             	sub    $0x4,%esp
f012d1fc:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012d201:	68 9b 10 00 00       	push   $0x109b
f012d206:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d20b:	e8 eb 2f fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012d210:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012d217:	10 00 00 
f012d21a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012d220:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d225:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012d22b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d231:	ba 00 00 00 00       	mov    $0x0,%edx
f012d236:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012d23c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012d242:	29 d0                	sub    %edx,%eax
f012d244:	89 c1                	mov    %eax,%ecx
f012d246:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012d24d:	10 00 00 
f012d250:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d255:	0f b6 d0             	movzbl %al,%edx
f012d258:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d25e:	01 d0                	add    %edx,%eax
f012d260:	48                   	dec    %eax
f012d261:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012d267:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d26d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d272:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012d278:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d27e:	29 d0                	sub    %edx,%eax
f012d280:	01 c1                	add    %eax,%ecx
f012d282:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012d289:	10 00 00 
f012d28c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d291:	0f b6 c0             	movzbl %al,%eax
f012d294:	c1 e0 04             	shl    $0x4,%eax
f012d297:	89 c2                	mov    %eax,%edx
f012d299:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d29f:	01 d0                	add    %edx,%eax
f012d2a1:	48                   	dec    %eax
f012d2a2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012d2a8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012d2b3:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012d2b9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2bf:	29 d0                	sub    %edx,%eax
f012d2c1:	01 c8                	add    %ecx,%eax
f012d2c3:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012d2c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2cc:	39 c2                	cmp    %eax,%edx
f012d2ce:	74 17                	je     f012d2e7 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012d2d0:	83 ec 04             	sub    $0x4,%esp
f012d2d3:	68 6c c4 13 f0       	push   $0xf013c46c
f012d2d8:	68 9d 10 00 00       	push   $0x109d
f012d2dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d2e2:	e8 14 2f fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012d2e7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2ea:	e8 d0 f5 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d2ef:	29 c3                	sub    %eax,%ebx
f012d2f1:	89 d8                	mov    %ebx,%eax
f012d2f3:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012d2f8:	74 17                	je     f012d311 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012d2fa:	83 ec 04             	sub    $0x4,%esp
f012d2fd:	68 70 c3 13 f0       	push   $0xf013c370
f012d302:	68 a0 10 00 00       	push   $0x10a0
f012d307:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d30c:	e8 ea 2e fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012d311:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d314:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d31a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d320:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012d326:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d32d:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d330:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d337:	eb 21                	jmp    f012d35a <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012d339:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d33f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d342:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d348:	01 c8                	add    %ecx,%eax
f012d34a:	8a 00                	mov    (%eax),%al
f012d34c:	0f be c0             	movsbl %al,%eax
f012d34f:	01 d0                	add    %edx,%eax
f012d351:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d357:	ff 45 d8             	incl   -0x28(%ebp)
f012d35a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d360:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d363:	7d d4                	jge    f012d339 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d365:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d36b:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d371:	42                   	inc    %edx
f012d372:	01 d2                	add    %edx,%edx
f012d374:	39 d0                	cmp    %edx,%eax
f012d376:	74 17                	je     f012d38f <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012d378:	83 ec 04             	sub    $0x4,%esp
f012d37b:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d380:	68 ae 10 00 00       	push   $0x10ae
f012d385:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d38a:	e8 6c 2e fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d38f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d395:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012d39b:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d3a2:	00 00 00 
		sums[1] = 0;
f012d3a5:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012d3ac:	00 00 00 
		sums[2] = 0;
f012d3af:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012d3b6:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d3b9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d3c0:	eb 70                	jmp    f012d432 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012d3c2:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d3c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3cb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3d8:	01 c8                	add    %ecx,%eax
f012d3da:	8a 00                	mov    (%eax),%al
f012d3dc:	0f be c0             	movsbl %al,%eax
f012d3df:	01 d0                	add    %edx,%eax
f012d3e1:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012d3e7:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d3ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d3f0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d3f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3fd:	01 c8                	add    %ecx,%eax
f012d3ff:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d403:	98                   	cwtl   
f012d404:	01 d0                	add    %edx,%eax
f012d406:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012d40c:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d412:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d415:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d41c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d422:	01 c8                	add    %ecx,%eax
f012d424:	8b 40 04             	mov    0x4(%eax),%eax
f012d427:	01 d0                	add    %edx,%eax
f012d429:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d42f:	ff 45 d8             	incl   -0x28(%ebp)
f012d432:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d438:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d43b:	7d 85                	jge    f012d3c2 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d43d:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012d443:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d449:	8d 50 01             	lea    0x1(%eax),%edx
f012d44c:	89 d0                	mov    %edx,%eax
f012d44e:	01 c0                	add    %eax,%eax
f012d450:	01 d0                	add    %edx,%eax
f012d452:	01 c0                	add    %eax,%eax
f012d454:	01 d0                	add    %edx,%eax
f012d456:	39 c1                	cmp    %eax,%ecx
f012d458:	75 3a                	jne    f012d494 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d45a:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012d460:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d466:	8d 50 01             	lea    0x1(%eax),%edx
f012d469:	89 d0                	mov    %edx,%eax
f012d46b:	01 c0                	add    %eax,%eax
f012d46d:	01 d0                	add    %edx,%eax
f012d46f:	01 c0                	add    %eax,%eax
f012d471:	01 d0                	add    %edx,%eax
f012d473:	39 c1                	cmp    %eax,%ecx
f012d475:	75 1d                	jne    f012d494 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d477:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012d47d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d483:	8d 50 01             	lea    0x1(%eax),%edx
f012d486:	89 d0                	mov    %edx,%eax
f012d488:	01 c0                	add    %eax,%eax
f012d48a:	01 d0                	add    %edx,%eax
f012d48c:	01 c0                	add    %eax,%eax
f012d48e:	01 d0                	add    %edx,%eax
f012d490:	39 c1                	cmp    %eax,%ecx
f012d492:	74 17                	je     f012d4ab <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012d494:	83 ec 04             	sub    $0x4,%esp
f012d497:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d49c:	68 c0 10 00 00       	push   $0x10c0
f012d4a1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d4a6:	e8 50 2d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d4ab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d4b1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012d4b7:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012d4be:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4c1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d4c8:	eb 24                	jmp    f012d4ee <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012d4ca:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d4d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d4d3:	01 c0                	add    %eax,%eax
f012d4d5:	89 c1                	mov    %eax,%ecx
f012d4d7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d4dd:	01 c8                	add    %ecx,%eax
f012d4df:	66 8b 00             	mov    (%eax),%ax
f012d4e2:	98                   	cwtl   
f012d4e3:	01 d0                	add    %edx,%eax
f012d4e5:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4eb:	ff 45 d8             	incl   -0x28(%ebp)
f012d4ee:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d4f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d4f7:	7d d1                	jge    f012d4ca <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d4f9:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d4ff:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d505:	8d 48 01             	lea    0x1(%eax),%ecx
f012d508:	89 c8                	mov    %ecx,%eax
f012d50a:	c1 e0 02             	shl    $0x2,%eax
f012d50d:	01 c8                	add    %ecx,%eax
f012d50f:	39 c2                	cmp    %eax,%edx
f012d511:	74 17                	je     f012d52a <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012d513:	83 ec 04             	sub    $0x4,%esp
f012d516:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012d51b:	68 ca 10 00 00       	push   $0x10ca
f012d520:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d525:	e8 d1 2c fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d52a:	e8 90 f3 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d52f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d532:	e8 05 68 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d537:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d53d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d543:	83 ec 08             	sub    $0x8,%esp
f012d546:	6a 00                	push   $0x0
f012d548:	50                   	push   %eax
f012d549:	e8 67 a5 fd ff       	call   f0107ab5 <krealloc>
f012d54e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d551:	e8 e6 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d556:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d55c:	74 17                	je     f012d575 <test_krealloc+0x1e76>
			panic(
f012d55e:	83 ec 04             	sub    $0x4,%esp
f012d561:	68 74 ac 13 f0       	push   $0xf013ac74
f012d566:	68 d2 10 00 00       	push   $0x10d2
f012d56b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d570:	e8 86 2c fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d575:	e8 45 f3 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d57a:	89 c2                	mov    %eax,%edx
f012d57c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d57f:	29 c2                	sub    %eax,%edx
f012d581:	89 d0                	mov    %edx,%eax
f012d583:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d588:	74 17                	je     f012d5a1 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012d58a:	83 ec 04             	sub    $0x4,%esp
f012d58d:	68 30 c1 13 f0       	push   $0xf013c130
f012d592:	68 d4 10 00 00       	push   $0x10d4
f012d597:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d59c:	e8 5a 2c fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d5a1:	e8 19 f3 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d5a6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5a9:	e8 8e 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5ae:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d5b4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d5ba:	83 ec 0c             	sub    $0xc,%esp
f012d5bd:	50                   	push   %eax
f012d5be:	e8 fd a2 fd ff       	call   f01078c0 <kfree>
f012d5c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5c6:	e8 71 67 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012d5cb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5d1:	74 17                	je     f012d5ea <test_krealloc+0x1eeb>
			panic(
f012d5d3:	83 ec 04             	sub    $0x4,%esp
f012d5d6:	68 74 ac 13 f0       	push   $0xf013ac74
f012d5db:	68 dc 10 00 00       	push   $0x10dc
f012d5e0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d5e5:	e8 11 2c fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d5ea:	e8 d0 f2 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d5ef:	89 c2                	mov    %eax,%edx
f012d5f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5f4:	29 c2                	sub    %eax,%edx
f012d5f6:	89 d0                	mov    %edx,%eax
f012d5f8:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d5fd:	74 17                	je     f012d616 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d5ff:	83 ec 04             	sub    $0x4,%esp
f012d602:	68 30 c1 13 f0       	push   $0xf013c130
f012d607:	68 de 10 00 00       	push   $0x10de
f012d60c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d611:	e8 e5 2b fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d616:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d61d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d624:	eb 48                	jmp    f012d66e <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d626:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d629:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012d62e:	83 ec 04             	sub    $0x4,%esp
f012d631:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d637:	51                   	push   %ecx
f012d638:	52                   	push   %edx
f012d639:	50                   	push   %eax
f012d63a:	e8 9b 93 fd ff       	call   f01069da <get_page_table>
f012d63f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d642:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d648:	85 c0                	test   %eax,%eax
f012d64a:	75 17                	jne    f012d663 <test_krealloc+0x1f64>
					panic(
f012d64c:	83 ec 04             	sub    $0x4,%esp
f012d64f:	68 5c b5 13 f0       	push   $0xf013b55c
f012d654:	68 eb 10 00 00       	push   $0x10eb
f012d659:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d65e:	e8 98 2b fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d663:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d66a:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d66e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d672:	78 b2                	js     f012d626 <test_krealloc+0x1f27>
f012d674:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d678:	7f 09                	jg     f012d683 <test_krealloc+0x1f84>
f012d67a:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d681:	76 a3                	jbe    f012d626 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d683:	83 ec 0c             	sub    $0xc,%esp
f012d686:	68 3e ae 13 f0       	push   $0xf013ae3e
f012d68b:	e8 f2 35 fd ff       	call   f0100c82 <cprintf>
f012d690:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d693:	83 ec 0c             	sub    $0xc,%esp
f012d696:	68 cc c4 13 f0       	push   $0xf013c4cc
f012d69b:	e8 e2 35 fd ff       	call   f0100c82 <cprintf>
f012d6a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d6a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d6a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d6ab:	5b                   	pop    %ebx
f012d6ac:	5f                   	pop    %edi
f012d6ad:	5d                   	pop    %ebp
f012d6ae:	c3                   	ret    

f012d6af <test_krealloc_BF>:


int test_krealloc_BF() {
f012d6af:	55                   	push   %ebp
f012d6b0:	89 e5                	mov    %esp,%ebp
f012d6b2:	57                   	push   %edi
f012d6b3:	53                   	push   %ebx
f012d6b4:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d6ba:	83 ec 0c             	sub    $0xc,%esp
f012d6bd:	68 9c ab 13 f0       	push   $0xf013ab9c
f012d6c2:	e8 bb 35 fd ff       	call   f0100c82 <cprintf>
f012d6c7:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d6ca:	83 ec 0c             	sub    $0xc,%esp
f012d6cd:	68 cc ab 13 f0       	push   $0xf013abcc
f012d6d2:	e8 ab 35 fd ff       	call   f0100c82 <cprintf>
f012d6d7:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d6da:	83 ec 0c             	sub    $0xc,%esp
f012d6dd:	68 9c ab 13 f0       	push   $0xf013ab9c
f012d6e2:	e8 9b 35 fd ff       	call   f0100c82 <cprintf>
f012d6e7:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d6ea:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d6ee:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d6f2:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d6f8:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d6fe:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d705:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d70c:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d712:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d717:	b8 00 00 00 00       	mov    $0x0,%eax
f012d71c:	89 d7                	mov    %edx,%edi
f012d71e:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d720:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d727:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d72d:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d732:	b8 00 00 00 00       	mov    $0x0,%eax
f012d737:	89 d7                	mov    %edx,%edi
f012d739:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d73b:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d741:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d746:	b8 00 00 00 00       	mov    $0x0,%eax
f012d74b:	89 d7                	mov    %edx,%edi
f012d74d:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d74f:	e8 6b f1 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d754:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d757:	83 ec 08             	sub    $0x8,%esp
f012d75a:	68 00 fc 0f 00       	push   $0xffc00
f012d75f:	6a 00                	push   $0x0
f012d761:	e8 4f a3 fd ff       	call   f0107ab5 <krealloc>
f012d766:	83 c4 10             	add    $0x10,%esp
f012d769:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d76f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d775:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d77a:	77 17                	ja     f012d793 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d77c:	83 ec 04             	sub    $0x4,%esp
f012d77f:	68 00 bf 13 f0       	push   $0xf013bf00
f012d784:	68 1a 11 00 00       	push   $0x111a
f012d789:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d78e:	e8 68 2a fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d793:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d799:	89 c1                	mov    %eax,%ecx
f012d79b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d7a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d7a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d7aa:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d7ad:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d7b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7b5:	f7 75 b4             	divl   -0x4c(%ebp)
f012d7b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d7bb:	29 d0                	sub    %edx,%eax
f012d7bd:	89 c3                	mov    %eax,%ebx
f012d7bf:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d7c6:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d7cb:	0f b6 d0             	movzbl %al,%edx
f012d7ce:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d7d1:	01 d0                	add    %edx,%eax
f012d7d3:	48                   	dec    %eax
f012d7d4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d7d7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d7da:	ba 00 00 00 00       	mov    $0x0,%edx
f012d7df:	f7 75 ac             	divl   -0x54(%ebp)
f012d7e2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d7e5:	29 d0                	sub    %edx,%eax
f012d7e7:	01 c3                	add    %eax,%ebx
f012d7e9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d7f0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d7f5:	0f b6 c0             	movzbl %al,%eax
f012d7f8:	c1 e0 04             	shl    $0x4,%eax
f012d7fb:	89 c2                	mov    %eax,%edx
f012d7fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d800:	01 d0                	add    %edx,%eax
f012d802:	48                   	dec    %eax
f012d803:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d806:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d809:	ba 00 00 00 00       	mov    $0x0,%edx
f012d80e:	f7 75 a4             	divl   -0x5c(%ebp)
f012d811:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d814:	29 d0                	sub    %edx,%eax
f012d816:	01 d8                	add    %ebx,%eax
f012d818:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d81d:	39 c1                	cmp    %eax,%ecx
f012d81f:	74 17                	je     f012d838 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d821:	83 ec 04             	sub    $0x4,%esp
f012d824:	68 3c bf 13 f0       	push   $0xf013bf3c
f012d829:	68 1c 11 00 00       	push   $0x111c
f012d82e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d833:	e8 c3 29 fd ff       	call   f01001fb <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d838:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d83b:	e8 7f f0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d840:	29 c3                	sub    %eax,%ebx
f012d842:	89 d8                	mov    %ebx,%eax
f012d844:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d849:	74 17                	je     f012d862 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d84b:	83 ec 04             	sub    $0x4,%esp
f012d84e:	68 6e bf 13 f0       	push   $0xf013bf6e
f012d853:	68 1f 11 00 00       	push   $0x111f
f012d858:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d85d:	e8 99 29 fd ff       	call   f01001fb <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d862:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d869:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d86c:	e8 4e f0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d871:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d874:	83 ec 08             	sub    $0x8,%esp
f012d877:	68 00 fc 0f 00       	push   $0xffc00
f012d87c:	6a 00                	push   $0x0
f012d87e:	e8 32 a2 fd ff       	call   f0107ab5 <krealloc>
f012d883:	83 c4 10             	add    $0x10,%esp
f012d886:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d88c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d892:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d897:	77 17                	ja     f012d8b0 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d899:	83 ec 04             	sub    $0x4,%esp
f012d89c:	68 00 bf 13 f0       	push   $0xf013bf00
f012d8a1:	68 27 11 00 00       	push   $0x1127
f012d8a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d8ab:	e8 4b 29 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d8b0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d8b6:	89 c1                	mov    %eax,%ecx
f012d8b8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d8bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d8c2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d8c7:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d8ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d8cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8d2:	f7 75 9c             	divl   -0x64(%ebp)
f012d8d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d8d8:	29 d0                	sub    %edx,%eax
f012d8da:	89 c3                	mov    %eax,%ebx
f012d8dc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d8e3:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d8e8:	0f b6 d0             	movzbl %al,%edx
f012d8eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d8ee:	01 d0                	add    %edx,%eax
f012d8f0:	48                   	dec    %eax
f012d8f1:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d8f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d8f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8fc:	f7 75 94             	divl   -0x6c(%ebp)
f012d8ff:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d902:	29 d0                	sub    %edx,%eax
f012d904:	01 c3                	add    %eax,%ebx
f012d906:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d90d:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012d912:	0f b6 c0             	movzbl %al,%eax
f012d915:	c1 e0 04             	shl    $0x4,%eax
f012d918:	89 c2                	mov    %eax,%edx
f012d91a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d91d:	01 d0                	add    %edx,%eax
f012d91f:	48                   	dec    %eax
f012d920:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d923:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d926:	ba 00 00 00 00       	mov    $0x0,%edx
f012d92b:	f7 75 8c             	divl   -0x74(%ebp)
f012d92e:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d931:	29 d0                	sub    %edx,%eax
f012d933:	01 d8                	add    %ebx,%eax
f012d935:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d93a:	39 c1                	cmp    %eax,%ecx
f012d93c:	74 17                	je     f012d955 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d93e:	83 ec 04             	sub    $0x4,%esp
f012d941:	68 3c bf 13 f0       	push   $0xf013bf3c
f012d946:	68 29 11 00 00       	push   $0x1129
f012d94b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d950:	e8 a6 28 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d955:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d958:	e8 62 ef fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d95d:	29 c3                	sub    %eax,%ebx
f012d95f:	89 d8                	mov    %ebx,%eax
f012d961:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d966:	74 17                	je     f012d97f <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d968:	83 ec 04             	sub    $0x4,%esp
f012d96b:	68 6e bf 13 f0       	push   $0xf013bf6e
f012d970:	68 2b 11 00 00       	push   $0x112b
f012d975:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d97a:	e8 7c 28 fd ff       	call   f01001fb <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d97f:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d986:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d989:	e8 31 ef fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012d98e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d991:	83 ec 08             	sub    $0x8,%esp
f012d994:	68 00 fc 0f 00       	push   $0xffc00
f012d999:	6a 00                	push   $0x0
f012d99b:	e8 15 a1 fd ff       	call   f0107ab5 <krealloc>
f012d9a0:	83 c4 10             	add    $0x10,%esp
f012d9a3:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d9a9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d9af:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d9b4:	77 17                	ja     f012d9cd <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d9b6:	83 ec 04             	sub    $0x4,%esp
f012d9b9:	68 00 bf 13 f0       	push   $0xf013bf00
f012d9be:	68 33 11 00 00       	push   $0x1133
f012d9c3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012d9c8:	e8 2e 28 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d9cd:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d9d3:	89 c1                	mov    %eax,%ecx
f012d9d5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d9dc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d9df:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d9e4:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d9e7:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d9ea:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9ef:	f7 75 84             	divl   -0x7c(%ebp)
f012d9f2:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d9f5:	29 d0                	sub    %edx,%eax
f012d9f7:	89 c3                	mov    %eax,%ebx
f012d9f9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012da00:	10 00 00 
f012da03:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012da08:	0f b6 d0             	movzbl %al,%edx
f012da0b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012da11:	01 d0                	add    %edx,%eax
f012da13:	48                   	dec    %eax
f012da14:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012da1a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012da20:	ba 00 00 00 00       	mov    $0x0,%edx
f012da25:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012da2b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012da31:	29 d0                	sub    %edx,%eax
f012da33:	01 c3                	add    %eax,%ebx
f012da35:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012da3c:	10 00 00 
f012da3f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012da44:	0f b6 c0             	movzbl %al,%eax
f012da47:	c1 e0 04             	shl    $0x4,%eax
f012da4a:	89 c2                	mov    %eax,%edx
f012da4c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012da52:	01 d0                	add    %edx,%eax
f012da54:	48                   	dec    %eax
f012da55:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012da5b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012da61:	ba 00 00 00 00       	mov    $0x0,%edx
f012da66:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012da6c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012da72:	29 d0                	sub    %edx,%eax
f012da74:	01 d8                	add    %ebx,%eax
f012da76:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012da7b:	39 c1                	cmp    %eax,%ecx
f012da7d:	74 17                	je     f012da96 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012da7f:	83 ec 04             	sub    $0x4,%esp
f012da82:	68 3c bf 13 f0       	push   $0xf013bf3c
f012da87:	68 35 11 00 00       	push   $0x1135
f012da8c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012da91:	e8 65 27 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012da96:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da99:	e8 21 ee fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012da9e:	29 c3                	sub    %eax,%ebx
f012daa0:	89 d8                	mov    %ebx,%eax
f012daa2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012daa7:	74 17                	je     f012dac0 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012daa9:	83 ec 04             	sub    $0x4,%esp
f012daac:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dab1:	68 37 11 00 00       	push   $0x1137
f012dab6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dabb:	e8 3b 27 fd ff       	call   f01001fb <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dac0:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012dac7:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012daca:	e8 f0 ed fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dacf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012dad2:	83 ec 08             	sub    $0x8,%esp
f012dad5:	68 00 fc 0f 00       	push   $0xffc00
f012dada:	6a 00                	push   $0x0
f012dadc:	e8 d4 9f fd ff       	call   f0107ab5 <krealloc>
f012dae1:	83 c4 10             	add    $0x10,%esp
f012dae4:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012daea:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012daf0:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012daf5:	77 17                	ja     f012db0e <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012daf7:	83 ec 04             	sub    $0x4,%esp
f012dafa:	68 00 bf 13 f0       	push   $0xf013bf00
f012daff:	68 3e 11 00 00       	push   $0x113e
f012db04:	68 5a ac 13 f0       	push   $0xf013ac5a
f012db09:	e8 ed 26 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012db0e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012db14:	89 c1                	mov    %eax,%ecx
f012db16:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012db1d:	10 00 00 
f012db20:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012db26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012db2b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012db31:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012db37:	ba 00 00 00 00       	mov    $0x0,%edx
f012db3c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012db42:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012db48:	29 d0                	sub    %edx,%eax
f012db4a:	89 c3                	mov    %eax,%ebx
f012db4c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012db53:	10 00 00 
f012db56:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012db5b:	0f b6 d0             	movzbl %al,%edx
f012db5e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012db64:	01 d0                	add    %edx,%eax
f012db66:	48                   	dec    %eax
f012db67:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012db6d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012db73:	ba 00 00 00 00       	mov    $0x0,%edx
f012db78:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012db7e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012db84:	29 d0                	sub    %edx,%eax
f012db86:	01 c3                	add    %eax,%ebx
f012db88:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012db8f:	10 00 00 
f012db92:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012db97:	0f b6 c0             	movzbl %al,%eax
f012db9a:	c1 e0 04             	shl    $0x4,%eax
f012db9d:	89 c2                	mov    %eax,%edx
f012db9f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012dba5:	01 d0                	add    %edx,%eax
f012dba7:	48                   	dec    %eax
f012dba8:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012dbae:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dbb4:	ba 00 00 00 00       	mov    $0x0,%edx
f012dbb9:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012dbbf:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012dbc5:	29 d0                	sub    %edx,%eax
f012dbc7:	01 d8                	add    %ebx,%eax
f012dbc9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012dbce:	39 c1                	cmp    %eax,%ecx
f012dbd0:	74 17                	je     f012dbe9 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012dbd2:	83 ec 04             	sub    $0x4,%esp
f012dbd5:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dbda:	68 40 11 00 00       	push   $0x1140
f012dbdf:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dbe4:	e8 12 26 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012dbe9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbec:	e8 ce ec fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dbf1:	29 c3                	sub    %eax,%ebx
f012dbf3:	89 d8                	mov    %ebx,%eax
f012dbf5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dbfa:	74 17                	je     f012dc13 <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012dbfc:	83 ec 04             	sub    $0x4,%esp
f012dbff:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dc04:	68 42 11 00 00       	push   $0x1142
f012dc09:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dc0e:	e8 e8 25 fd ff       	call   f01001fb <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012dc13:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012dc1a:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dc1d:	e8 9d ec fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dc22:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012dc25:	83 ec 08             	sub    $0x8,%esp
f012dc28:	68 00 fc 1f 00       	push   $0x1ffc00
f012dc2d:	6a 00                	push   $0x0
f012dc2f:	e8 81 9e fd ff       	call   f0107ab5 <krealloc>
f012dc34:	83 c4 10             	add    $0x10,%esp
f012dc37:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012dc3d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dc43:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012dc48:	77 17                	ja     f012dc61 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc4a:	83 ec 04             	sub    $0x4,%esp
f012dc4d:	68 00 bf 13 f0       	push   $0xf013bf00
f012dc52:	68 49 11 00 00       	push   $0x1149
f012dc57:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dc5c:	e8 9a 25 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012dc61:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dc67:	89 c1                	mov    %eax,%ecx
f012dc69:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012dc70:	10 00 00 
f012dc73:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012dc79:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dc7e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012dc84:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dc8a:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc8f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012dc95:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012dc9b:	29 d0                	sub    %edx,%eax
f012dc9d:	89 c3                	mov    %eax,%ebx
f012dc9f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012dca6:	10 00 00 
f012dca9:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dcae:	0f b6 d0             	movzbl %al,%edx
f012dcb1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012dcb7:	01 d0                	add    %edx,%eax
f012dcb9:	48                   	dec    %eax
f012dcba:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012dcc0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dcc6:	ba 00 00 00 00       	mov    $0x0,%edx
f012dccb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012dcd1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012dcd7:	29 d0                	sub    %edx,%eax
f012dcd9:	01 c3                	add    %eax,%ebx
f012dcdb:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012dce2:	10 00 00 
f012dce5:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012dcea:	0f b6 c0             	movzbl %al,%eax
f012dced:	c1 e0 04             	shl    $0x4,%eax
f012dcf0:	89 c2                	mov    %eax,%edx
f012dcf2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012dcf8:	01 d0                	add    %edx,%eax
f012dcfa:	48                   	dec    %eax
f012dcfb:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012dd01:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dd07:	ba 00 00 00 00       	mov    $0x0,%edx
f012dd0c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012dd12:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012dd18:	29 d0                	sub    %edx,%eax
f012dd1a:	01 d8                	add    %ebx,%eax
f012dd1c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012dd21:	39 c1                	cmp    %eax,%ecx
f012dd23:	74 17                	je     f012dd3c <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012dd25:	83 ec 04             	sub    $0x4,%esp
f012dd28:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dd2d:	68 4b 11 00 00       	push   $0x114b
f012dd32:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dd37:	e8 bf 24 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012dd3c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd3f:	e8 7b eb fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dd44:	29 c3                	sub    %eax,%ebx
f012dd46:	89 d8                	mov    %ebx,%eax
f012dd48:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd4d:	74 17                	je     f012dd66 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012dd4f:	83 ec 04             	sub    $0x4,%esp
f012dd52:	68 6e bf 13 f0       	push   $0xf013bf6e
f012dd57:	68 4d 11 00 00       	push   $0x114d
f012dd5c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dd61:	e8 95 24 fd ff       	call   f01001fb <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012dd66:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012dd6d:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012dd70:	e8 4a eb fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dd75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012dd78:	83 ec 08             	sub    $0x8,%esp
f012dd7b:	68 00 fc 1f 00       	push   $0x1ffc00
f012dd80:	6a 00                	push   $0x0
f012dd82:	e8 2e 9d fd ff       	call   f0107ab5 <krealloc>
f012dd87:	83 c4 10             	add    $0x10,%esp
f012dd8a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012dd90:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dd96:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012dd9b:	77 17                	ja     f012ddb4 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd9d:	83 ec 04             	sub    $0x4,%esp
f012dda0:	68 00 bf 13 f0       	push   $0xf013bf00
f012dda5:	68 54 11 00 00       	push   $0x1154
f012ddaa:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ddaf:	e8 47 24 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012ddb4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ddba:	89 c1                	mov    %eax,%ecx
f012ddbc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ddc3:	10 00 00 
f012ddc6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ddcc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ddd1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ddd7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012dddd:	ba 00 00 00 00       	mov    $0x0,%edx
f012dde2:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012dde8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ddee:	29 d0                	sub    %edx,%eax
f012ddf0:	89 c3                	mov    %eax,%ebx
f012ddf2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ddf9:	10 00 00 
f012ddfc:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de01:	0f b6 d0             	movzbl %al,%edx
f012de04:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012de0a:	01 d0                	add    %edx,%eax
f012de0c:	48                   	dec    %eax
f012de0d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012de13:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012de19:	ba 00 00 00 00       	mov    $0x0,%edx
f012de1e:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012de24:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012de2a:	29 d0                	sub    %edx,%eax
f012de2c:	01 c3                	add    %eax,%ebx
f012de2e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012de35:	10 00 00 
f012de38:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012de3d:	0f b6 c0             	movzbl %al,%eax
f012de40:	c1 e0 04             	shl    $0x4,%eax
f012de43:	89 c2                	mov    %eax,%edx
f012de45:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012de4b:	01 d0                	add    %edx,%eax
f012de4d:	48                   	dec    %eax
f012de4e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012de54:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012de5a:	ba 00 00 00 00       	mov    $0x0,%edx
f012de5f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012de65:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012de6b:	29 d0                	sub    %edx,%eax
f012de6d:	01 d8                	add    %ebx,%eax
f012de6f:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012de74:	39 c1                	cmp    %eax,%ecx
f012de76:	74 17                	je     f012de8f <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012de78:	83 ec 04             	sub    $0x4,%esp
f012de7b:	68 3c bf 13 f0       	push   $0xf013bf3c
f012de80:	68 56 11 00 00       	push   $0x1156
f012de85:	68 5a ac 13 f0       	push   $0xf013ac5a
f012de8a:	e8 6c 23 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012de8f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012de92:	e8 28 ea fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012de97:	29 c3                	sub    %eax,%ebx
f012de99:	89 d8                	mov    %ebx,%eax
f012de9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dea0:	74 17                	je     f012deb9 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012dea2:	83 ec 04             	sub    $0x4,%esp
f012dea5:	68 6e bf 13 f0       	push   $0xf013bf6e
f012deaa:	68 58 11 00 00       	push   $0x1158
f012deaf:	68 5a ac 13 f0       	push   $0xf013ac5a
f012deb4:	e8 42 23 fd ff       	call   f01001fb <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012deb9:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012dec0:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012dec3:	e8 f7 e9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dec8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012decb:	83 ec 08             	sub    $0x8,%esp
f012dece:	68 00 fc 2f 00       	push   $0x2ffc00
f012ded3:	6a 00                	push   $0x0
f012ded5:	e8 db 9b fd ff       	call   f0107ab5 <krealloc>
f012deda:	83 c4 10             	add    $0x10,%esp
f012dedd:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012dee3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dee9:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012deee:	77 17                	ja     f012df07 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012def0:	83 ec 04             	sub    $0x4,%esp
f012def3:	68 00 bf 13 f0       	push   $0xf013bf00
f012def8:	68 5f 11 00 00       	push   $0x115f
f012defd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012df02:	e8 f4 22 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012df07:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012df0d:	89 c1                	mov    %eax,%ecx
f012df0f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012df16:	10 00 00 
f012df19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012df1f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012df24:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012df2a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012df30:	ba 00 00 00 00       	mov    $0x0,%edx
f012df35:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012df3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012df41:	29 d0                	sub    %edx,%eax
f012df43:	89 c3                	mov    %eax,%ebx
f012df45:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012df4c:	10 00 00 
f012df4f:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012df54:	0f b6 d0             	movzbl %al,%edx
f012df57:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012df5d:	01 d0                	add    %edx,%eax
f012df5f:	48                   	dec    %eax
f012df60:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012df66:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012df6c:	ba 00 00 00 00       	mov    $0x0,%edx
f012df71:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012df77:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012df7d:	29 d0                	sub    %edx,%eax
f012df7f:	01 c3                	add    %eax,%ebx
f012df81:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012df88:	10 00 00 
f012df8b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012df90:	0f b6 c0             	movzbl %al,%eax
f012df93:	c1 e0 04             	shl    $0x4,%eax
f012df96:	89 c2                	mov    %eax,%edx
f012df98:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012df9e:	01 d0                	add    %edx,%eax
f012dfa0:	48                   	dec    %eax
f012dfa1:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012dfa7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dfad:	ba 00 00 00 00       	mov    $0x0,%edx
f012dfb2:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012dfb8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012dfbe:	29 d0                	sub    %edx,%eax
f012dfc0:	01 d8                	add    %ebx,%eax
f012dfc2:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012dfc7:	39 c1                	cmp    %eax,%ecx
f012dfc9:	74 17                	je     f012dfe2 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012dfcb:	83 ec 04             	sub    $0x4,%esp
f012dfce:	68 3c bf 13 f0       	push   $0xf013bf3c
f012dfd3:	68 61 11 00 00       	push   $0x1161
f012dfd8:	68 5a ac 13 f0       	push   $0xf013ac5a
f012dfdd:	e8 19 22 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012dfe2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dfe5:	e8 d5 e8 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012dfea:	29 c3                	sub    %eax,%ebx
f012dfec:	89 d8                	mov    %ebx,%eax
f012dfee:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dff3:	74 17                	je     f012e00c <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012dff5:	83 ec 04             	sub    $0x4,%esp
f012dff8:	68 a4 b0 13 f0       	push   $0xf013b0a4
f012dffd:	68 63 11 00 00       	push   $0x1163
f012e002:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e007:	e8 ef 21 fd ff       	call   f01001fb <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e00c:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012e013:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012e016:	e8 a4 e8 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e01b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012e01e:	83 ec 08             	sub    $0x8,%esp
f012e021:	68 00 fc 2f 00       	push   $0x2ffc00
f012e026:	6a 00                	push   $0x0
f012e028:	e8 88 9a fd ff       	call   f0107ab5 <krealloc>
f012e02d:	83 c4 10             	add    $0x10,%esp
f012e030:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012e036:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e03c:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012e041:	77 17                	ja     f012e05a <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e043:	83 ec 04             	sub    $0x4,%esp
f012e046:	68 00 bf 13 f0       	push   $0xf013bf00
f012e04b:	68 6a 11 00 00       	push   $0x116a
f012e050:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e055:	e8 a1 21 fd ff       	call   f01001fb <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012e05a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e060:	89 c1                	mov    %eax,%ecx
f012e062:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012e069:	10 00 00 
f012e06c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012e072:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e077:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012e07d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e083:	ba 00 00 00 00       	mov    $0x0,%edx
f012e088:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012e08e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012e094:	29 d0                	sub    %edx,%eax
f012e096:	89 c3                	mov    %eax,%ebx
f012e098:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012e09f:	10 00 00 
f012e0a2:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e0a7:	0f b6 d0             	movzbl %al,%edx
f012e0aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012e0b0:	01 d0                	add    %edx,%eax
f012e0b2:	48                   	dec    %eax
f012e0b3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012e0b9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e0bf:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0c4:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012e0ca:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012e0d0:	29 d0                	sub    %edx,%eax
f012e0d2:	01 c3                	add    %eax,%ebx
f012e0d4:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012e0db:	10 00 00 
f012e0de:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012e0e3:	0f b6 c0             	movzbl %al,%eax
f012e0e6:	c1 e0 04             	shl    $0x4,%eax
f012e0e9:	89 c2                	mov    %eax,%edx
f012e0eb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012e0f1:	01 d0                	add    %edx,%eax
f012e0f3:	48                   	dec    %eax
f012e0f4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012e0fa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e100:	ba 00 00 00 00       	mov    $0x0,%edx
f012e105:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012e10b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012e111:	29 d0                	sub    %edx,%eax
f012e113:	01 d8                	add    %ebx,%eax
f012e115:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012e11a:	39 c1                	cmp    %eax,%ecx
f012e11c:	74 17                	je     f012e135 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012e11e:	83 ec 04             	sub    $0x4,%esp
f012e121:	68 3c bf 13 f0       	push   $0xf013bf3c
f012e126:	68 6c 11 00 00       	push   $0x116c
f012e12b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e130:	e8 c6 20 fd ff       	call   f01001fb <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012e135:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e138:	e8 82 e7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e13d:	29 c3                	sub    %eax,%ebx
f012e13f:	89 d8                	mov    %ebx,%eax
f012e141:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e146:	74 17                	je     f012e15f <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012e148:	83 ec 04             	sub    $0x4,%esp
f012e14b:	68 6e bf 13 f0       	push   $0xf013bf6e
f012e150:	68 6e 11 00 00       	push   $0x116e
f012e155:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e15a:	e8 9c 20 fd ff       	call   f01001fb <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012e15f:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012e166:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012e169:	e8 51 e7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e16e:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012e171:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012e178:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012e17b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e181:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012e187:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e18d:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012e190:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012e192:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012e198:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e19e:	01 c2                	add    %eax,%edx
f012e1a0:	8a 45 ce             	mov    -0x32(%ebp),%al
f012e1a3:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e1a5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e1ab:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e1b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e1b8:	eb 11                	jmp    f012e1cb <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012e1ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e1bd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e1c3:	01 d0                	add    %edx,%eax
f012e1c5:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012e1c8:	ff 45 f4             	incl   -0xc(%ebp)
f012e1cb:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e1d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e1d4:	7d e4                	jge    f012e1ba <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012e1d6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e1dc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012e1e2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e1e8:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012e1ee:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e1f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e1fb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e201:	01 d0                	add    %edx,%eax
f012e203:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012e209:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e20f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e215:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e21c:	eb 1b                	jmp    f012e239 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012e21e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e221:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e228:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e22e:	01 d0                	add    %edx,%eax
f012e230:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012e236:	ff 45 f0             	incl   -0x10(%ebp)
f012e239:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e23f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e242:	7d da                	jge    f012e21e <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e244:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e24a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e250:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012e257:	eb 17                	jmp    f012e270 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012e259:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012e25c:	01 c0                	add    %eax,%eax
f012e25e:	89 c2                	mov    %eax,%edx
f012e260:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e266:	01 d0                	add    %edx,%eax
f012e268:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012e26d:	ff 45 ec             	incl   -0x14(%ebp)
f012e270:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e276:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012e279:	7d de                	jge    f012e259 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012e27b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e281:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012e287:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e28d:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012e292:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e298:	01 c0                	add    %eax,%eax
f012e29a:	89 c2                	mov    %eax,%edx
f012e29c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e2a2:	01 d0                	add    %edx,%eax
f012e2a4:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012e2a9:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e2af:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e2b5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e2bc:	eb 49                	jmp    f012e307 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012e2be:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2c1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2ce:	01 d0                	add    %edx,%eax
f012e2d0:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012e2d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2dd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2e3:	01 d0                	add    %edx,%eax
f012e2e5:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012e2eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e2ee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e2f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e2fb:	01 d0                	add    %edx,%eax
f012e2fd:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012e304:	ff 45 e8             	incl   -0x18(%ebp)
f012e307:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e30d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e310:	7d ac                	jge    f012e2be <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012e312:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e318:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012e31e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e324:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012e327:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e32d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012e333:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e339:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012e340:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e346:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e34d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e353:	01 d0                	add    %edx,%eax
f012e355:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012e358:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e35e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e365:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e36b:	01 d0                	add    %edx,%eax
f012e36d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012e373:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e379:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e380:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e386:	01 d0                	add    %edx,%eax
f012e388:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012e38f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e395:	8a 00                	mov    (%eax),%al
f012e397:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012e39a:	75 17                	jne    f012e3b3 <test_krealloc_BF+0xd04>
f012e39c:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e3a2:	89 c2                	mov    %eax,%edx
f012e3a4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012e3aa:	01 d0                	add    %edx,%eax
f012e3ac:	8a 00                	mov    (%eax),%al
f012e3ae:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012e3b1:	74 17                	je     f012e3ca <test_krealloc_BF+0xd1b>
			panic(
f012e3b3:	83 ec 04             	sub    $0x4,%esp
f012e3b6:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e3bb:	68 b1 11 00 00       	push   $0x11b1
f012e3c0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e3c5:	e8 31 1e fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012e3ca:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3d0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012e3d6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3dc:	8a 00                	mov    (%eax),%al
f012e3de:	3c 02                	cmp    $0x2,%al
f012e3e0:	75 16                	jne    f012e3f8 <test_krealloc_BF+0xd49>
f012e3e2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e3e8:	89 c2                	mov    %eax,%edx
f012e3ea:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3f0:	01 d0                	add    %edx,%eax
f012e3f2:	8a 00                	mov    (%eax),%al
f012e3f4:	3c 02                	cmp    $0x2,%al
f012e3f6:	74 20                	je     f012e418 <test_krealloc_BF+0xd69>
			panic(
f012e3f8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e3fe:	8a 00                	mov    (%eax),%al
f012e400:	0f be c0             	movsbl %al,%eax
f012e403:	50                   	push   %eax
f012e404:	68 cc bf 13 f0       	push   $0xf013bfcc
f012e409:	68 b7 11 00 00       	push   $0x11b7
f012e40e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e413:	e8 e3 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012e418:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e41e:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012e424:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e42a:	8b 00                	mov    (%eax),%eax
f012e42c:	83 f8 03             	cmp    $0x3,%eax
f012e42f:	75 1c                	jne    f012e44d <test_krealloc_BF+0xd9e>
f012e431:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012e437:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e43e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e444:	01 d0                	add    %edx,%eax
f012e446:	8b 00                	mov    (%eax),%eax
f012e448:	83 f8 03             	cmp    $0x3,%eax
f012e44b:	74 17                	je     f012e464 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012e44d:	83 ec 04             	sub    $0x4,%esp
f012e450:	68 18 c0 13 f0       	push   $0xf013c018
f012e455:	68 bb 11 00 00       	push   $0x11bb
f012e45a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e45f:	e8 97 1d fd ff       	call   f01001fb <_panic>

		intArr = (int*) ptr_allocations[3];
f012e464:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e46a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012e470:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e476:	8b 00                	mov    (%eax),%eax
f012e478:	83 f8 04             	cmp    $0x4,%eax
f012e47b:	75 1c                	jne    f012e499 <test_krealloc_BF+0xdea>
f012e47d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e483:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e48a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e490:	01 d0                	add    %edx,%eax
f012e492:	8b 00                	mov    (%eax),%eax
f012e494:	83 f8 04             	cmp    $0x4,%eax
f012e497:	74 17                	je     f012e4b0 <test_krealloc_BF+0xe01>
			panic(
f012e499:	83 ec 04             	sub    $0x4,%esp
f012e49c:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e4a1:	68 c0 11 00 00       	push   $0x11c0
f012e4a6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e4ab:	e8 4b 1d fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012e4b0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e4b6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012e4bc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4c2:	66 8b 00             	mov    (%eax),%ax
f012e4c5:	66 83 f8 05          	cmp    $0x5,%ax
f012e4c9:	75 1b                	jne    f012e4e6 <test_krealloc_BF+0xe37>
f012e4cb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e4d1:	01 c0                	add    %eax,%eax
f012e4d3:	89 c2                	mov    %eax,%edx
f012e4d5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4db:	01 d0                	add    %edx,%eax
f012e4dd:	66 8b 00             	mov    (%eax),%ax
f012e4e0:	66 83 f8 05          	cmp    $0x5,%ax
f012e4e4:	74 17                	je     f012e4fd <test_krealloc_BF+0xe4e>
			panic(
f012e4e6:	83 ec 04             	sub    $0x4,%esp
f012e4e9:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e4ee:	68 c5 11 00 00       	push   $0x11c5
f012e4f3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e4f8:	e8 fe 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012e4fd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e503:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012e509:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e50f:	66 8b 00             	mov    (%eax),%ax
f012e512:	66 83 f8 06          	cmp    $0x6,%ax
f012e516:	75 1b                	jne    f012e533 <test_krealloc_BF+0xe84>
f012e518:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012e51e:	01 c0                	add    %eax,%eax
f012e520:	89 c2                	mov    %eax,%edx
f012e522:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e528:	01 d0                	add    %edx,%eax
f012e52a:	66 8b 00             	mov    (%eax),%ax
f012e52d:	66 83 f8 06          	cmp    $0x6,%ax
f012e531:	74 17                	je     f012e54a <test_krealloc_BF+0xe9b>
			panic(
f012e533:	83 ec 04             	sub    $0x4,%esp
f012e536:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e53b:	68 ca 11 00 00       	push   $0x11ca
f012e540:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e545:	e8 b1 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012e54a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e550:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012e556:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e55c:	8a 00                	mov    (%eax),%al
f012e55e:	3c 07                	cmp    $0x7,%al
f012e560:	75 1b                	jne    f012e57d <test_krealloc_BF+0xece>
f012e562:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e568:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e56f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e575:	01 d0                	add    %edx,%eax
f012e577:	8a 00                	mov    (%eax),%al
f012e579:	3c 07                	cmp    $0x7,%al
f012e57b:	74 17                	je     f012e594 <test_krealloc_BF+0xee5>
			panic(
f012e57d:	83 ec 04             	sub    $0x4,%esp
f012e580:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e585:	68 cf 11 00 00       	push   $0x11cf
f012e58a:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e58f:	e8 67 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e594:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e59a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e59e:	66 83 f8 07          	cmp    $0x7,%ax
f012e5a2:	75 1f                	jne    f012e5c3 <test_krealloc_BF+0xf14>
f012e5a4:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5b7:	01 d0                	add    %edx,%eax
f012e5b9:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e5bd:	66 83 f8 07          	cmp    $0x7,%ax
f012e5c1:	74 17                	je     f012e5da <test_krealloc_BF+0xf2b>
			panic(
f012e5c3:	83 ec 04             	sub    $0x4,%esp
f012e5c6:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e5cb:	68 d2 11 00 00       	push   $0x11d2
f012e5d0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e5d5:	e8 21 1c fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e5da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5e0:	8b 40 04             	mov    0x4(%eax),%eax
f012e5e3:	83 f8 07             	cmp    $0x7,%eax
f012e5e6:	75 1d                	jne    f012e605 <test_krealloc_BF+0xf56>
f012e5e8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5ee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e5f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5fb:	01 d0                	add    %edx,%eax
f012e5fd:	8b 40 04             	mov    0x4(%eax),%eax
f012e600:	83 f8 07             	cmp    $0x7,%eax
f012e603:	74 17                	je     f012e61c <test_krealloc_BF+0xf6d>
			panic(
f012e605:	83 ec 04             	sub    $0x4,%esp
f012e608:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e60d:	68 d5 11 00 00       	push   $0x11d5
f012e612:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e617:	e8 df 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e61c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e622:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e628:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e62e:	8a 00                	mov    (%eax),%al
f012e630:	3c 08                	cmp    $0x8,%al
f012e632:	75 1b                	jne    f012e64f <test_krealloc_BF+0xfa0>
f012e634:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e63a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e641:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e647:	01 d0                	add    %edx,%eax
f012e649:	8a 00                	mov    (%eax),%al
f012e64b:	3c 08                	cmp    $0x8,%al
f012e64d:	74 17                	je     f012e666 <test_krealloc_BF+0xfb7>
			panic(
f012e64f:	83 ec 04             	sub    $0x4,%esp
f012e652:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e657:	68 da 11 00 00       	push   $0x11da
f012e65c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e661:	e8 95 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e666:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e66c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e670:	66 83 f8 08          	cmp    $0x8,%ax
f012e674:	75 1f                	jne    f012e695 <test_krealloc_BF+0xfe6>
f012e676:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e67c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e683:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e689:	01 d0                	add    %edx,%eax
f012e68b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e68f:	66 83 f8 08          	cmp    $0x8,%ax
f012e693:	74 17                	je     f012e6ac <test_krealloc_BF+0xffd>
			panic(
f012e695:	83 ec 04             	sub    $0x4,%esp
f012e698:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e69d:	68 dd 11 00 00       	push   $0x11dd
f012e6a2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e6a7:	e8 4f 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e6ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6b2:	8b 40 04             	mov    0x4(%eax),%eax
f012e6b5:	83 f8 08             	cmp    $0x8,%eax
f012e6b8:	75 1d                	jne    f012e6d7 <test_krealloc_BF+0x1028>
f012e6ba:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e6c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e6c7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e6cd:	01 d0                	add    %edx,%eax
f012e6cf:	8b 40 04             	mov    0x4(%eax),%eax
f012e6d2:	83 f8 08             	cmp    $0x8,%eax
f012e6d5:	74 17                	je     f012e6ee <test_krealloc_BF+0x103f>
			panic(
f012e6d7:	83 ec 04             	sub    $0x4,%esp
f012e6da:	68 8c bf 13 f0       	push   $0xf013bf8c
f012e6df:	68 e0 11 00 00       	push   $0x11e0
f012e6e4:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e6e9:	e8 0d 1b fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e6ee:	e8 cc e1 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e6f3:	89 c2                	mov    %eax,%edx
f012e6f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e6f8:	39 c2                	cmp    %eax,%edx
f012e6fa:	74 17                	je     f012e713 <test_krealloc_BF+0x1064>
			panic(
f012e6fc:	83 ec 04             	sub    $0x4,%esp
f012e6ff:	68 4c c0 13 f0       	push   $0xf013c04c
f012e704:	68 e4 11 00 00       	push   $0x11e4
f012e709:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e70e:	e8 e8 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e713:	83 ec 0c             	sub    $0xc,%esp
f012e716:	68 98 c0 13 f0       	push   $0xf013c098
f012e71b:	e8 62 25 fd ff       	call   f0100c82 <cprintf>
f012e720:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e723:	e8 97 e1 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e728:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e72b:	e8 0c 56 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e730:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e736:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e73c:	83 ec 08             	sub    $0x8,%esp
f012e73f:	6a 00                	push   $0x0
f012e741:	50                   	push   %eax
f012e742:	e8 6e 93 fd ff       	call   f0107ab5 <krealloc>
f012e747:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e74a:	e8 ed 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e74f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e755:	74 17                	je     f012e76e <test_krealloc_BF+0x10bf>
			panic(
f012e757:	83 ec 04             	sub    $0x4,%esp
f012e75a:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e75f:	68 f1 11 00 00       	push   $0x11f1
f012e764:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e769:	e8 8d 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e76e:	e8 4c e1 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e773:	89 c2                	mov    %eax,%edx
f012e775:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e778:	29 c2                	sub    %eax,%edx
f012e77a:	89 d0                	mov    %edx,%eax
f012e77c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e781:	74 17                	je     f012e79a <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e783:	83 ec 04             	sub    $0x4,%esp
f012e786:	68 30 c1 13 f0       	push   $0xf013c130
f012e78b:	68 f3 11 00 00       	push   $0x11f3
f012e790:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e795:	e8 61 1a fd ff       	call   f01001fb <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e79a:	e8 20 e1 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e79f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e7a2:	e8 95 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7a7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e7ad:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7b3:	83 ec 08             	sub    $0x8,%esp
f012e7b6:	6a 00                	push   $0x0
f012e7b8:	50                   	push   %eax
f012e7b9:	e8 f7 92 fd ff       	call   f0107ab5 <krealloc>
f012e7be:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e7c1:	e8 76 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e7c6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e7cc:	74 17                	je     f012e7e5 <test_krealloc_BF+0x1136>
			panic(
f012e7ce:	83 ec 04             	sub    $0x4,%esp
f012e7d1:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e7d6:	68 fc 11 00 00       	push   $0x11fc
f012e7db:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e7e0:	e8 16 1a fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e7e5:	e8 d5 e0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e7ea:	89 c2                	mov    %eax,%edx
f012e7ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e7ef:	29 c2                	sub    %eax,%edx
f012e7f1:	89 d0                	mov    %edx,%eax
f012e7f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e7f8:	74 17                	je     f012e811 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e7fa:	83 ec 04             	sub    $0x4,%esp
f012e7fd:	68 30 c1 13 f0       	push   $0xf013c130
f012e802:	68 fe 11 00 00       	push   $0x11fe
f012e807:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e80c:	e8 ea 19 fd ff       	call   f01001fb <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e811:	e8 a9 e0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e816:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e819:	e8 1e 55 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e81e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e824:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e82a:	83 ec 08             	sub    $0x8,%esp
f012e82d:	6a 00                	push   $0x0
f012e82f:	50                   	push   %eax
f012e830:	e8 80 92 fd ff       	call   f0107ab5 <krealloc>
f012e835:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e838:	e8 ff 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e83d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e843:	74 17                	je     f012e85c <test_krealloc_BF+0x11ad>
			panic(
f012e845:	83 ec 04             	sub    $0x4,%esp
f012e848:	68 74 ac 13 f0       	push   $0xf013ac74
f012e84d:	68 06 12 00 00       	push   $0x1206
f012e852:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e857:	e8 9f 19 fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e85c:	e8 5e e0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e861:	89 c2                	mov    %eax,%edx
f012e863:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e866:	29 c2                	sub    %eax,%edx
f012e868:	89 d0                	mov    %edx,%eax
f012e86a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e86f:	74 17                	je     f012e888 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e871:	83 ec 04             	sub    $0x4,%esp
f012e874:	68 30 c1 13 f0       	push   $0xf013c130
f012e879:	68 08 12 00 00       	push   $0x1208
f012e87e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e883:	e8 73 19 fd ff       	call   f01001fb <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e888:	e8 32 e0 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e88d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e890:	e8 a7 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e895:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e89b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e8a1:	83 ec 08             	sub    $0x8,%esp
f012e8a4:	6a 00                	push   $0x0
f012e8a6:	50                   	push   %eax
f012e8a7:	e8 09 92 fd ff       	call   f0107ab5 <krealloc>
f012e8ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e8af:	e8 88 54 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012e8b4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e8ba:	74 17                	je     f012e8d3 <test_krealloc_BF+0x1224>
			panic(
f012e8bc:	83 ec 04             	sub    $0x4,%esp
f012e8bf:	68 bc c0 13 f0       	push   $0xf013c0bc
f012e8c4:	68 10 12 00 00       	push   $0x1210
f012e8c9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e8ce:	e8 28 19 fd ff       	call   f01001fb <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e8d3:	e8 e7 df fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012e8d8:	89 c2                	mov    %eax,%edx
f012e8da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e8dd:	29 c2                	sub    %eax,%edx
f012e8df:	89 d0                	mov    %edx,%eax
f012e8e1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e8e6:	74 17                	je     f012e8ff <test_krealloc_BF+0x1250>
			panic(
f012e8e8:	83 ec 04             	sub    $0x4,%esp
f012e8eb:	68 64 c1 13 f0       	push   $0xf013c164
f012e8f0:	68 13 12 00 00       	push   $0x1213
f012e8f5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e8fa:	e8 fc 18 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e8ff:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e906:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e90d:	eb 48                	jmp    f012e957 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e90f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e912:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012e917:	83 ec 04             	sub    $0x4,%esp
f012e91a:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e920:	51                   	push   %ecx
f012e921:	52                   	push   %edx
f012e922:	50                   	push   %eax
f012e923:	e8 b2 80 fd ff       	call   f01069da <get_page_table>
f012e928:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e92b:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e931:	85 c0                	test   %eax,%eax
f012e933:	75 17                	jne    f012e94c <test_krealloc_BF+0x129d>
					panic(
f012e935:	83 ec 04             	sub    $0x4,%esp
f012e938:	68 5c b5 13 f0       	push   $0xf013b55c
f012e93d:	68 1f 12 00 00       	push   $0x121f
f012e942:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e947:	e8 af 18 fd ff       	call   f01001fb <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e94c:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e953:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e957:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e95b:	78 b2                	js     f012e90f <test_krealloc_BF+0x1260>
f012e95d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e961:	7f 09                	jg     f012e96c <test_krealloc_BF+0x12bd>
f012e963:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e96a:	76 a3                	jbe    f012e90f <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e96c:	83 ec 0c             	sub    $0xc,%esp
f012e96f:	68 a3 c1 13 f0       	push   $0xf013c1a3
f012e974:	e8 09 23 fd ff       	call   f0100c82 <cprintf>
f012e979:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e97c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e982:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e988:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e98f:	eb 21                	jmp    f012e9b2 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e991:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e997:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e99a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e9a0:	01 c8                	add    %ecx,%eax
f012e9a2:	8a 00                	mov    (%eax),%al
f012e9a4:	0f be c0             	movsbl %al,%eax
f012e9a7:	01 d0                	add    %edx,%eax
f012e9a9:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e9af:	ff 45 dc             	incl   -0x24(%ebp)
f012e9b2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e9b8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e9bb:	7d d4                	jge    f012e991 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e9bd:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e9c3:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e9c9:	42                   	inc    %edx
f012e9ca:	01 d2                	add    %edx,%edx
f012e9cc:	39 d0                	cmp    %edx,%eax
f012e9ce:	74 17                	je     f012e9e7 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e9d0:	83 ec 04             	sub    $0x4,%esp
f012e9d3:	68 ac c1 13 f0       	push   $0xf013c1ac
f012e9d8:	68 31 12 00 00       	push   $0x1231
f012e9dd:	68 5a ac 13 f0       	push   $0xf013ac5a
f012e9e2:	e8 14 18 fd ff       	call   f01001fb <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e9e7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e9ed:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e9f3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e9fa:	eb 25                	jmp    f012ea21 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e9fc:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012ea02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ea05:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012ea0c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012ea12:	01 c8                	add    %ecx,%eax
f012ea14:	8b 00                	mov    (%eax),%eax
f012ea16:	01 d0                	add    %edx,%eax
f012ea18:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012ea1e:	ff 45 dc             	incl   -0x24(%ebp)
f012ea21:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ea27:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ea2a:	7d d0                	jge    f012e9fc <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ea2c:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ea32:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ea38:	42                   	inc    %edx
f012ea39:	c1 e2 02             	shl    $0x2,%edx
f012ea3c:	39 d0                	cmp    %edx,%eax
f012ea3e:	74 17                	je     f012ea57 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012ea40:	83 ec 04             	sub    $0x4,%esp
f012ea43:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ea48:	68 3b 12 00 00       	push   $0x123b
f012ea4d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ea52:	e8 a4 17 fd ff       	call   f01001fb <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ea57:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea5d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ea63:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ea6a:	eb 24                	jmp    f012ea90 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012ea6c:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ea72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ea75:	01 c0                	add    %eax,%eax
f012ea77:	89 c1                	mov    %eax,%ecx
f012ea79:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012ea7f:	01 c8                	add    %ecx,%eax
f012ea81:	66 8b 00             	mov    (%eax),%ax
f012ea84:	98                   	cwtl   
f012ea85:	01 d0                	add    %edx,%eax
f012ea87:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ea8d:	ff 45 dc             	incl   -0x24(%ebp)
f012ea90:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012ea96:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ea99:	7d d1                	jge    f012ea6c <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ea9b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012eaa1:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eaa7:	8d 48 01             	lea    0x1(%eax),%ecx
f012eaaa:	89 c8                	mov    %ecx,%eax
f012eaac:	c1 e0 02             	shl    $0x2,%eax
f012eaaf:	01 c8                	add    %ecx,%eax
f012eab1:	39 c2                	cmp    %eax,%edx
f012eab3:	74 17                	je     f012eacc <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012eab5:	83 ec 04             	sub    $0x4,%esp
f012eab8:	68 ac c1 13 f0       	push   $0xf013c1ac
f012eabd:	68 45 12 00 00       	push   $0x1245
f012eac2:	68 5a ac 13 f0       	push   $0xf013ac5a
f012eac7:	e8 2f 17 fd ff       	call   f01001fb <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012eacc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ead2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ead8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012eadf:	eb 70                	jmp    f012eb51 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012eae1:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012eae7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eaea:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eaf1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eaf7:	01 c8                	add    %ecx,%eax
f012eaf9:	8a 00                	mov    (%eax),%al
f012eafb:	0f be c0             	movsbl %al,%eax
f012eafe:	01 d0                	add    %edx,%eax
f012eb00:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012eb06:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012eb0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb0f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb16:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb1c:	01 c8                	add    %ecx,%eax
f012eb1e:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eb22:	98                   	cwtl   
f012eb23:	01 d0                	add    %edx,%eax
f012eb25:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012eb2b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012eb31:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012eb34:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eb3b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eb41:	01 c8                	add    %ecx,%eax
f012eb43:	8b 40 04             	mov    0x4(%eax),%eax
f012eb46:	01 d0                	add    %edx,%eax
f012eb48:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012eb4e:	ff 45 dc             	incl   -0x24(%ebp)
f012eb51:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb57:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012eb5a:	7d 85                	jge    f012eae1 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012eb5c:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012eb62:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb68:	8d 50 01             	lea    0x1(%eax),%edx
f012eb6b:	89 d0                	mov    %edx,%eax
f012eb6d:	01 c0                	add    %eax,%eax
f012eb6f:	01 d0                	add    %edx,%eax
f012eb71:	01 c0                	add    %eax,%eax
f012eb73:	01 d0                	add    %edx,%eax
f012eb75:	39 c1                	cmp    %eax,%ecx
f012eb77:	75 3a                	jne    f012ebb3 <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012eb79:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012eb7f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eb85:	8d 50 01             	lea    0x1(%eax),%edx
f012eb88:	89 d0                	mov    %edx,%eax
f012eb8a:	01 c0                	add    %eax,%eax
f012eb8c:	01 d0                	add    %edx,%eax
f012eb8e:	01 c0                	add    %eax,%eax
f012eb90:	01 d0                	add    %edx,%eax
f012eb92:	39 c1                	cmp    %eax,%ecx
f012eb94:	75 1d                	jne    f012ebb3 <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012eb96:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012eb9c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012eba2:	8d 50 01             	lea    0x1(%eax),%edx
f012eba5:	89 d0                	mov    %edx,%eax
f012eba7:	01 c0                	add    %eax,%eax
f012eba9:	01 d0                	add    %edx,%eax
f012ebab:	01 c0                	add    %eax,%eax
f012ebad:	01 d0                	add    %edx,%eax
f012ebaf:	39 c1                	cmp    %eax,%ecx
f012ebb1:	74 17                	je     f012ebca <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012ebb3:	83 ec 04             	sub    $0x4,%esp
f012ebb6:	68 ac c1 13 f0       	push   $0xf013c1ac
f012ebbb:	68 53 12 00 00       	push   $0x1253
f012ebc0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ebc5:	e8 31 16 fd ff       	call   f01001fb <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012ebca:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012ebd1:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ebd4:	e8 e6 dc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ebd9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012ebdc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ebe2:	83 ec 08             	sub    $0x8,%esp
f012ebe5:	68 00 3c 00 00       	push   $0x3c00
f012ebea:	50                   	push   %eax
f012ebeb:	e8 c5 8e fd ff       	call   f0107ab5 <krealloc>
f012ebf0:	83 c4 10             	add    $0x10,%esp
f012ebf3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ebf9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ebff:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ec04:	77 17                	ja     f012ec1d <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec06:	83 ec 04             	sub    $0x4,%esp
f012ec09:	68 00 bf 13 f0       	push   $0xf013bf00
f012ec0e:	68 5f 12 00 00       	push   $0x125f
f012ec13:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec18:	e8 de 15 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ec1d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ec23:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ec29:	74 17                	je     f012ec42 <test_krealloc_BF+0x1593>
			panic(
f012ec2b:	83 ec 04             	sub    $0x4,%esp
f012ec2e:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ec33:	68 62 12 00 00       	push   $0x1262
f012ec38:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec3d:	e8 b9 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ec42:	e8 78 dc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ec47:	89 c2                	mov    %eax,%edx
f012ec49:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ec4c:	39 c2                	cmp    %eax,%edx
f012ec4e:	74 17                	je     f012ec67 <test_krealloc_BF+0x15b8>
			panic(
f012ec50:	83 ec 04             	sub    $0x4,%esp
f012ec53:	68 50 c2 13 f0       	push   $0xf013c250
f012ec58:	68 65 12 00 00       	push   $0x1265
f012ec5d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ec62:	e8 94 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012ec67:	e8 53 dc fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ec6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012ec6f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ec75:	83 ec 08             	sub    $0x8,%esp
f012ec78:	68 00 fc 0f 00       	push   $0xffc00
f012ec7d:	50                   	push   %eax
f012ec7e:	e8 32 8e fd ff       	call   f0107ab5 <krealloc>
f012ec83:	83 c4 10             	add    $0x10,%esp
f012ec86:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ec8c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ec92:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ec97:	77 17                	ja     f012ecb0 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec99:	83 ec 04             	sub    $0x4,%esp
f012ec9c:	68 00 bf 13 f0       	push   $0xf013bf00
f012eca1:	68 6b 12 00 00       	push   $0x126b
f012eca6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecab:	e8 4b 15 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ecb0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ecb6:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ecbc:	74 17                	je     f012ecd5 <test_krealloc_BF+0x1626>
			panic(
f012ecbe:	83 ec 04             	sub    $0x4,%esp
f012ecc1:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ecc6:	68 6e 12 00 00       	push   $0x126e
f012eccb:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecd0:	e8 26 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ecd5:	e8 e5 db fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ecda:	89 c2                	mov    %eax,%edx
f012ecdc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ecdf:	39 c2                	cmp    %eax,%edx
f012ece1:	74 17                	je     f012ecfa <test_krealloc_BF+0x164b>
			panic(
f012ece3:	83 ec 04             	sub    $0x4,%esp
f012ece6:	68 50 c2 13 f0       	push   $0xf013c250
f012eceb:	68 71 12 00 00       	push   $0x1271
f012ecf0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ecf5:	e8 01 15 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ecfa:	e8 c0 db fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ecff:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012ed02:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed08:	83 ec 08             	sub    $0x8,%esp
f012ed0b:	68 00 fc 0f 00       	push   $0xffc00
f012ed10:	50                   	push   %eax
f012ed11:	e8 9f 8d fd ff       	call   f0107ab5 <krealloc>
f012ed16:	83 c4 10             	add    $0x10,%esp
f012ed19:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ed1f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012ed25:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ed2a:	77 17                	ja     f012ed43 <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed2c:	83 ec 04             	sub    $0x4,%esp
f012ed2f:	68 00 bf 13 f0       	push   $0xf013bf00
f012ed34:	68 77 12 00 00       	push   $0x1277
f012ed39:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed3e:	e8 b8 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ed43:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ed49:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ed4f:	74 17                	je     f012ed68 <test_krealloc_BF+0x16b9>
			panic(
f012ed51:	83 ec 04             	sub    $0x4,%esp
f012ed54:	68 e4 c1 13 f0       	push   $0xf013c1e4
f012ed59:	68 7a 12 00 00       	push   $0x127a
f012ed5e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed63:	e8 93 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ed68:	e8 52 db fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ed6d:	89 c2                	mov    %eax,%edx
f012ed6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ed72:	39 c2                	cmp    %eax,%edx
f012ed74:	74 17                	je     f012ed8d <test_krealloc_BF+0x16de>
			panic(
f012ed76:	83 ec 04             	sub    $0x4,%esp
f012ed79:	68 50 c2 13 f0       	push   $0xf013c250
f012ed7e:	68 7d 12 00 00       	push   $0x127d
f012ed83:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ed88:	e8 6e 14 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ed8d:	e8 2d db fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ed92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ed95:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ed9b:	83 ec 08             	sub    $0x8,%esp
f012ed9e:	68 00 fc 0f 00       	push   $0xffc00
f012eda3:	50                   	push   %eax
f012eda4:	e8 0c 8d fd ff       	call   f0107ab5 <krealloc>
f012eda9:	83 c4 10             	add    $0x10,%esp
f012edac:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012edb2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012edb8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012edbd:	77 17                	ja     f012edd6 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012edbf:	83 ec 04             	sub    $0x4,%esp
f012edc2:	68 00 bf 13 f0       	push   $0xf013bf00
f012edc7:	68 85 12 00 00       	push   $0x1285
f012edcc:	68 5a ac 13 f0       	push   $0xf013ac5a
f012edd1:	e8 25 14 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[3])
f012edd6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012eddc:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012ede2:	74 17                	je     f012edfb <test_krealloc_BF+0x174c>
			panic(
f012ede4:	83 ec 04             	sub    $0x4,%esp
f012ede7:	68 94 c2 13 f0       	push   $0xf013c294
f012edec:	68 88 12 00 00       	push   $0x1288
f012edf1:	68 5a ac 13 f0       	push   $0xf013ac5a
f012edf6:	e8 00 14 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012edfb:	e8 bf da fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ee00:	89 c2                	mov    %eax,%edx
f012ee02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ee05:	39 c2                	cmp    %eax,%edx
f012ee07:	74 17                	je     f012ee20 <test_krealloc_BF+0x1771>
			panic(
f012ee09:	83 ec 04             	sub    $0x4,%esp
f012ee0c:	68 50 c2 13 f0       	push   $0xf013c250
f012ee11:	68 8b 12 00 00       	push   $0x128b
f012ee16:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee1b:	e8 db 13 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012ee20:	83 ec 0c             	sub    $0xc,%esp
f012ee23:	68 73 b4 13 f0       	push   $0xf013b473
f012ee28:	e8 55 1e fd ff       	call   f0100c82 <cprintf>
f012ee2d:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012ee30:	e8 8a da fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ee35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012ee38:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee3e:	83 ec 08             	sub    $0x8,%esp
f012ee41:	68 00 18 10 00       	push   $0x101800
f012ee46:	50                   	push   %eax
f012ee47:	e8 69 8c fd ff       	call   f0107ab5 <krealloc>
f012ee4c:	83 c4 10             	add    $0x10,%esp
f012ee4f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ee52:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee55:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ee5a:	77 17                	ja     f012ee73 <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee5c:	83 ec 04             	sub    $0x4,%esp
f012ee5f:	68 00 bf 13 f0       	push   $0xf013bf00
f012ee64:	68 93 12 00 00       	push   $0x1293
f012ee69:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee6e:	e8 88 13 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[1])
f012ee73:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee79:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ee7c:	74 17                	je     f012ee95 <test_krealloc_BF+0x17e6>
			panic(
f012ee7e:	83 ec 04             	sub    $0x4,%esp
f012ee81:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ee86:	68 96 12 00 00       	push   $0x1296
f012ee8b:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ee90:	e8 66 13 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012ee95:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ee98:	e8 22 da fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ee9d:	29 c3                	sub    %eax,%ebx
f012ee9f:	89 d8                	mov    %ebx,%eax
f012eea1:	83 f8 02             	cmp    $0x2,%eax
f012eea4:	74 17                	je     f012eebd <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012eea6:	83 ec 04             	sub    $0x4,%esp
f012eea9:	68 70 c3 13 f0       	push   $0xf013c370
f012eeae:	68 98 12 00 00       	push   $0x1298
f012eeb3:	68 5a ac 13 f0       	push   $0xf013ac5a
f012eeb8:	e8 3e 13 fd ff       	call   f01001fb <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012eebd:	e8 fd d9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012eec2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012eec5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eecb:	83 ec 08             	sub    $0x8,%esp
f012eece:	68 00 fc 3f 00       	push   $0x3ffc00
f012eed3:	50                   	push   %eax
f012eed4:	e8 dc 8b fd ff       	call   f0107ab5 <krealloc>
f012eed9:	83 c4 10             	add    $0x10,%esp
f012eedc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eedf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eee2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eee7:	77 17                	ja     f012ef00 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eee9:	83 ec 04             	sub    $0x4,%esp
f012eeec:	68 00 bf 13 f0       	push   $0xf013bf00
f012eef1:	68 9e 12 00 00       	push   $0x129e
f012eef6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012eefb:	e8 fb 12 fd ff       	call   f01001fb <_panic>
		if (newAddress != ptr_allocations[4])
f012ef00:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef06:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ef09:	74 17                	je     f012ef22 <test_krealloc_BF+0x1873>
			panic(
f012ef0b:	83 ec 04             	sub    $0x4,%esp
f012ef0e:	68 f4 c2 13 f0       	push   $0xf013c2f4
f012ef13:	68 a1 12 00 00       	push   $0x12a1
f012ef18:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef1d:	e8 d9 12 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012ef22:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef25:	e8 95 d9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ef2a:	29 c3                	sub    %eax,%ebx
f012ef2c:	89 d8                	mov    %ebx,%eax
f012ef2e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ef33:	74 17                	je     f012ef4c <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ef35:	83 ec 04             	sub    $0x4,%esp
f012ef38:	68 70 c3 13 f0       	push   $0xf013c370
f012ef3d:	68 a4 12 00 00       	push   $0x12a4
f012ef42:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef47:	e8 af 12 fd ff       	call   f01001fb <_panic>


	}
	cprintf("\b\b\b60%");
f012ef4c:	83 ec 0c             	sub    $0xc,%esp
f012ef4f:	68 b8 b4 13 f0       	push   $0xf013b4b8
f012ef54:	e8 29 1d fd ff       	call   f0100c82 <cprintf>
f012ef59:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ef5c:	e8 5e d9 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012ef61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ef64:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ef6a:	83 ec 08             	sub    $0x8,%esp
f012ef6d:	68 00 fc 9f 00       	push   $0x9ffc00
f012ef72:	50                   	push   %eax
f012ef73:	e8 3d 8b fd ff       	call   f0107ab5 <krealloc>
f012ef78:	83 c4 10             	add    $0x10,%esp
f012ef7b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ef7e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ef81:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ef86:	77 17                	ja     f012ef9f <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ef88:	83 ec 04             	sub    $0x4,%esp
f012ef8b:	68 00 bf 13 f0       	push   $0xf013bf00
f012ef90:	68 af 12 00 00       	push   $0x12af
f012ef95:	68 5a ac 13 f0       	push   $0xf013ac5a
f012ef9a:	e8 5c 12 fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012ef9f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012efa6:	10 00 00 
f012efa9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012efaf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012efb4:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012efba:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012efc0:	ba 00 00 00 00       	mov    $0x0,%edx
f012efc5:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012efcb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012efd1:	29 d0                	sub    %edx,%eax
f012efd3:	89 c1                	mov    %eax,%ecx
f012efd5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012efdc:	10 00 00 
f012efdf:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012efe4:	0f b6 d0             	movzbl %al,%edx
f012efe7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012efed:	01 d0                	add    %edx,%eax
f012efef:	48                   	dec    %eax
f012eff0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012eff6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012effc:	ba 00 00 00 00       	mov    $0x0,%edx
f012f001:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012f007:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012f00d:	29 d0                	sub    %edx,%eax
f012f00f:	01 c1                	add    %eax,%ecx
f012f011:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012f018:	10 00 00 
f012f01b:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f020:	0f b6 c0             	movzbl %al,%eax
f012f023:	c1 e0 04             	shl    $0x4,%eax
f012f026:	89 c2                	mov    %eax,%edx
f012f028:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012f02e:	01 d0                	add    %edx,%eax
f012f030:	48                   	dec    %eax
f012f031:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012f037:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f03d:	ba 00 00 00 00       	mov    $0x0,%edx
f012f042:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012f048:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012f04e:	29 d0                	sub    %edx,%eax
f012f050:	01 c8                	add    %ecx,%eax
f012f052:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012f058:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f05b:	39 c2                	cmp    %eax,%edx
f012f05d:	74 18                	je     f012f077 <test_krealloc_BF+0x19c8>
			panic(
f012f05f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f062:	50                   	push   %eax
f012f063:	68 a4 c3 13 f0       	push   $0xf013c3a4
f012f068:	68 b3 12 00 00       	push   $0x12b3
f012f06d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f072:	e8 84 11 fd ff       	call   f01001fb <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012f077:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f07d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f080:	75 17                	jne    f012f099 <test_krealloc_BF+0x19ea>
			panic(
f012f082:	83 ec 04             	sub    $0x4,%esp
f012f085:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f08a:	68 b6 12 00 00       	push   $0x12b6
f012f08f:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f094:	e8 62 11 fd ff       	call   f01001fb <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012f099:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f09c:	e8 1e d8 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f0a1:	29 c3                	sub    %eax,%ebx
f012f0a3:	89 d8                	mov    %ebx,%eax
f012f0a5:	3d 00 06 00 00       	cmp    $0x600,%eax
f012f0aa:	74 17                	je     f012f0c3 <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012f0ac:	83 ec 04             	sub    $0x4,%esp
f012f0af:	68 70 c3 13 f0       	push   $0xf013c370
f012f0b4:	68 b9 12 00 00       	push   $0x12b9
f012f0b9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f0be:	e8 38 11 fd ff       	call   f01001fb <_panic>

		ptr_allocations[4] = newAddress;
f012f0c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0c6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012f0cc:	e8 ee d7 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f0d1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012f0d4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0da:	83 ec 08             	sub    $0x8,%esp
f012f0dd:	68 00 fc 3f 00       	push   $0x3ffc00
f012f0e2:	50                   	push   %eax
f012f0e3:	e8 cd 89 fd ff       	call   f0107ab5 <krealloc>
f012f0e8:	83 c4 10             	add    $0x10,%esp
f012f0eb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f0ee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f0f1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f0f6:	77 17                	ja     f012f10f <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f0f8:	83 ec 04             	sub    $0x4,%esp
f012f0fb:	68 00 bf 13 f0       	push   $0xf013bf00
f012f100:	68 c2 12 00 00       	push   $0x12c2
f012f105:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f10a:	e8 ec 10 fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f10f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f115:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f118:	75 17                	jne    f012f131 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f11a:	83 ec 04             	sub    $0x4,%esp
f012f11d:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f122:	68 c4 12 00 00       	push   $0x12c4
f012f127:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f12c:	e8 ca 10 fd ff       	call   f01001fb <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012f131:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012f138:	10 00 00 
f012f13b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012f141:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f146:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012f14c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f152:	ba 00 00 00 00       	mov    $0x0,%edx
f012f157:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012f15d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012f163:	29 d0                	sub    %edx,%eax
f012f165:	89 c1                	mov    %eax,%ecx
f012f167:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012f16e:	10 00 00 
f012f171:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f176:	0f b6 d0             	movzbl %al,%edx
f012f179:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012f17f:	01 d0                	add    %edx,%eax
f012f181:	48                   	dec    %eax
f012f182:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012f188:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f18e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f193:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012f199:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012f19f:	29 d0                	sub    %edx,%eax
f012f1a1:	01 c1                	add    %eax,%ecx
f012f1a3:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012f1aa:	10 00 00 
f012f1ad:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f1b2:	0f b6 c0             	movzbl %al,%eax
f012f1b5:	c1 e0 04             	shl    $0x4,%eax
f012f1b8:	89 c2                	mov    %eax,%edx
f012f1ba:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012f1c0:	01 d0                	add    %edx,%eax
f012f1c2:	48                   	dec    %eax
f012f1c3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012f1c9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f1cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012f1d4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012f1da:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012f1e0:	29 d0                	sub    %edx,%eax
f012f1e2:	01 c8                	add    %ecx,%eax
f012f1e4:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012f1ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f1ed:	39 c2                	cmp    %eax,%edx
f012f1ef:	74 17                	je     f012f208 <test_krealloc_BF+0x1b59>
f012f1f1:	83 ec 04             	sub    $0x4,%esp
f012f1f4:	68 3c bf 13 f0       	push   $0xf013bf3c
f012f1f9:	68 c5 12 00 00       	push   $0x12c5
f012f1fe:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f203:	e8 f3 0f fd ff       	call   f01001fb <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012f208:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f20b:	e8 af d6 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f210:	29 c3                	sub    %eax,%ebx
f012f212:	89 d8                	mov    %ebx,%eax
f012f214:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f219:	74 17                	je     f012f232 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012f21b:	83 ec 04             	sub    $0x4,%esp
f012f21e:	68 70 c3 13 f0       	push   $0xf013c370
f012f223:	68 c9 12 00 00       	push   $0x12c9
f012f228:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f22d:	e8 c9 0f fd ff       	call   f01001fb <_panic>
		ptr_allocations[6] = newAddress;
f012f232:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f235:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012f23b:	e8 7f d6 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f240:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012f243:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f249:	83 ec 08             	sub    $0x8,%esp
f012f24c:	68 00 fc 3f 01       	push   $0x13ffc00
f012f251:	50                   	push   %eax
f012f252:	e8 5e 88 fd ff       	call   f0107ab5 <krealloc>
f012f257:	83 c4 10             	add    $0x10,%esp
f012f25a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012f25d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f260:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012f265:	77 17                	ja     f012f27e <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012f267:	83 ec 04             	sub    $0x4,%esp
f012f26a:	68 00 bf 13 f0       	push   $0xf013bf00
f012f26f:	68 cf 12 00 00       	push   $0x12cf
f012f274:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f279:	e8 7d 0f fd ff       	call   f01001fb <_panic>
		if (newAddress == ptr_allocations[6])
f012f27e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f284:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012f287:	75 17                	jne    f012f2a0 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012f289:	83 ec 04             	sub    $0x4,%esp
f012f28c:	68 e8 c3 13 f0       	push   $0xf013c3e8
f012f291:	68 d1 12 00 00       	push   $0x12d1
f012f296:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f29b:	e8 5b 0f fd ff       	call   f01001fb <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012f2a0:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012f2a7:	10 00 00 
f012f2aa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012f2b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f2b5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012f2bb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f2c1:	ba 00 00 00 00       	mov    $0x0,%edx
f012f2c6:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012f2cc:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012f2d2:	29 d0                	sub    %edx,%eax
f012f2d4:	89 c1                	mov    %eax,%ecx
f012f2d6:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012f2dd:	10 00 00 
f012f2e0:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f2e5:	0f b6 d0             	movzbl %al,%edx
f012f2e8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012f2ee:	01 d0                	add    %edx,%eax
f012f2f0:	48                   	dec    %eax
f012f2f1:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012f2f7:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f012f302:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012f308:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012f30e:	29 d0                	sub    %edx,%eax
f012f310:	01 c1                	add    %eax,%ecx
f012f312:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012f319:	10 00 00 
f012f31c:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012f321:	0f b6 c0             	movzbl %al,%eax
f012f324:	c1 e0 04             	shl    $0x4,%eax
f012f327:	89 c2                	mov    %eax,%edx
f012f329:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012f32f:	01 d0                	add    %edx,%eax
f012f331:	48                   	dec    %eax
f012f332:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012f338:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f33e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f343:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012f349:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012f34f:	29 d0                	sub    %edx,%eax
f012f351:	01 c8                	add    %ecx,%eax
f012f353:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012f359:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f35c:	39 c2                	cmp    %eax,%edx
f012f35e:	74 17                	je     f012f377 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012f360:	83 ec 04             	sub    $0x4,%esp
f012f363:	68 08 c5 13 f0       	push   $0xf013c508
f012f368:	68 d3 12 00 00       	push   $0x12d3
f012f36d:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f372:	e8 84 0e fd ff       	call   f01001fb <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012f377:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012f37a:	e8 40 d5 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f37f:	29 c3                	sub    %eax,%ebx
f012f381:	89 d8                	mov    %ebx,%eax
f012f383:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012f388:	74 17                	je     f012f3a1 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012f38a:	83 ec 04             	sub    $0x4,%esp
f012f38d:	68 70 c3 13 f0       	push   $0xf013c370
f012f392:	68 d6 12 00 00       	push   $0x12d6
f012f397:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f39c:	e8 5a 0e fd ff       	call   f01001fb <_panic>

		ptr_allocations[6] = newAddress;
f012f3a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012f3a4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f3aa:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f3b0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012f3b6:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f3bd:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3c0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f3c7:	eb 21                	jmp    f012f3ea <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012f3c9:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f3cf:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012f3d2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f3d8:	01 c8                	add    %ecx,%eax
f012f3da:	8a 00                	mov    (%eax),%al
f012f3dc:	0f be c0             	movsbl %al,%eax
f012f3df:	01 d0                	add    %edx,%eax
f012f3e1:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f3e7:	ff 45 d8             	incl   -0x28(%ebp)
f012f3ea:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f3f0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f3f3:	7d d4                	jge    f012f3c9 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f3f5:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f3fb:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f401:	42                   	inc    %edx
f012f402:	01 d2                	add    %edx,%edx
f012f404:	39 d0                	cmp    %edx,%eax
f012f406:	74 17                	je     f012f41f <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012f408:	83 ec 04             	sub    $0x4,%esp
f012f40b:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f410:	68 e4 12 00 00       	push   $0x12e4
f012f415:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f41a:	e8 dc 0d fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f41f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f425:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012f42b:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f432:	00 00 00 
		sums[1] = 0;
f012f435:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012f43c:	00 00 00 
		sums[2] = 0;
f012f43f:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012f446:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f449:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f450:	eb 70                	jmp    f012f4c2 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012f452:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f458:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f45b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f462:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f468:	01 c8                	add    %ecx,%eax
f012f46a:	8a 00                	mov    (%eax),%al
f012f46c:	0f be c0             	movsbl %al,%eax
f012f46f:	01 d0                	add    %edx,%eax
f012f471:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012f477:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f47d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f480:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f487:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f48d:	01 c8                	add    %ecx,%eax
f012f48f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f493:	98                   	cwtl   
f012f494:	01 d0                	add    %edx,%eax
f012f496:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012f49c:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f4a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f4a5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f4ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4b2:	01 c8                	add    %ecx,%eax
f012f4b4:	8b 40 04             	mov    0x4(%eax),%eax
f012f4b7:	01 d0                	add    %edx,%eax
f012f4b9:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012f4bf:	ff 45 d8             	incl   -0x28(%ebp)
f012f4c2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f4c8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f4cb:	7d 85                	jge    f012f452 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012f4cd:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012f4d3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f4d9:	8d 50 01             	lea    0x1(%eax),%edx
f012f4dc:	89 d0                	mov    %edx,%eax
f012f4de:	01 c0                	add    %eax,%eax
f012f4e0:	01 d0                	add    %edx,%eax
f012f4e2:	01 c0                	add    %eax,%eax
f012f4e4:	01 d0                	add    %edx,%eax
f012f4e6:	39 c1                	cmp    %eax,%ecx
f012f4e8:	75 3a                	jne    f012f524 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012f4ea:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012f4f0:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f4f6:	8d 50 01             	lea    0x1(%eax),%edx
f012f4f9:	89 d0                	mov    %edx,%eax
f012f4fb:	01 c0                	add    %eax,%eax
f012f4fd:	01 d0                	add    %edx,%eax
f012f4ff:	01 c0                	add    %eax,%eax
f012f501:	01 d0                	add    %edx,%eax
f012f503:	39 c1                	cmp    %eax,%ecx
f012f505:	75 1d                	jne    f012f524 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012f507:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012f50d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f513:	8d 50 01             	lea    0x1(%eax),%edx
f012f516:	89 d0                	mov    %edx,%eax
f012f518:	01 c0                	add    %eax,%eax
f012f51a:	01 d0                	add    %edx,%eax
f012f51c:	01 c0                	add    %eax,%eax
f012f51e:	01 d0                	add    %edx,%eax
f012f520:	39 c1                	cmp    %eax,%ecx
f012f522:	74 17                	je     f012f53b <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012f524:	83 ec 04             	sub    $0x4,%esp
f012f527:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f52c:	68 f6 12 00 00       	push   $0x12f6
f012f531:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f536:	e8 c0 0c fd ff       	call   f01001fb <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f53b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f541:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012f547:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012f54e:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f551:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012f558:	eb 24                	jmp    f012f57e <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012f55a:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f560:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f563:	01 c0                	add    %eax,%eax
f012f565:	89 c1                	mov    %eax,%ecx
f012f567:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f56d:	01 c8                	add    %ecx,%eax
f012f56f:	66 8b 00             	mov    (%eax),%ax
f012f572:	98                   	cwtl   
f012f573:	01 d0                	add    %edx,%eax
f012f575:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012f57b:	ff 45 d8             	incl   -0x28(%ebp)
f012f57e:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f584:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012f587:	7d d1                	jge    f012f55a <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012f589:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f58f:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f595:	8d 48 01             	lea    0x1(%eax),%ecx
f012f598:	89 c8                	mov    %ecx,%eax
f012f59a:	c1 e0 02             	shl    $0x2,%eax
f012f59d:	01 c8                	add    %ecx,%eax
f012f59f:	39 c2                	cmp    %eax,%edx
f012f5a1:	74 17                	je     f012f5ba <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f5a3:	83 ec 04             	sub    $0x4,%esp
f012f5a6:	68 a0 c4 13 f0       	push   $0xf013c4a0
f012f5ab:	68 00 13 00 00       	push   $0x1300
f012f5b0:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f5b5:	e8 41 0c fd ff       	call   f01001fb <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f5ba:	e8 00 d3 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f5bf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f5c2:	e8 75 47 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f5c7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f5cd:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f5d3:	83 ec 08             	sub    $0x8,%esp
f012f5d6:	6a 00                	push   $0x0
f012f5d8:	50                   	push   %eax
f012f5d9:	e8 d7 84 fd ff       	call   f0107ab5 <krealloc>
f012f5de:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5e1:	e8 56 47 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f5e6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5ec:	74 17                	je     f012f605 <test_krealloc_BF+0x1f56>
			panic(
f012f5ee:	83 ec 04             	sub    $0x4,%esp
f012f5f1:	68 74 ac 13 f0       	push   $0xf013ac74
f012f5f6:	68 08 13 00 00       	push   $0x1308
f012f5fb:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f600:	e8 f6 0b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f605:	e8 b5 d2 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f60a:	89 c2                	mov    %eax,%edx
f012f60c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f60f:	29 c2                	sub    %eax,%edx
f012f611:	89 d0                	mov    %edx,%eax
f012f613:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f618:	74 17                	je     f012f631 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f61a:	83 ec 04             	sub    $0x4,%esp
f012f61d:	68 30 c1 13 f0       	push   $0xf013c130
f012f622:	68 0a 13 00 00       	push   $0x130a
f012f627:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f62c:	e8 ca 0b fd ff       	call   f01001fb <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f631:	e8 89 d2 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f636:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f639:	e8 fe 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f63e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f644:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f64a:	83 ec 0c             	sub    $0xc,%esp
f012f64d:	50                   	push   %eax
f012f64e:	e8 6d 82 fd ff       	call   f01078c0 <kfree>
f012f653:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f656:	e8 e1 46 fd ff       	call   f0103d3c <pf_calculate_free_frames>
f012f65b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f661:	74 17                	je     f012f67a <test_krealloc_BF+0x1fcb>
			panic(
f012f663:	83 ec 04             	sub    $0x4,%esp
f012f666:	68 74 ac 13 f0       	push   $0xf013ac74
f012f66b:	68 12 13 00 00       	push   $0x1312
f012f670:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f675:	e8 81 0b fd ff       	call   f01001fb <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f67a:	e8 40 d2 fd ff       	call   f010c8bf <sys_calculate_free_frames>
f012f67f:	89 c2                	mov    %eax,%edx
f012f681:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f684:	29 c2                	sub    %eax,%edx
f012f686:	89 d0                	mov    %edx,%eax
f012f688:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f68d:	74 17                	je     f012f6a6 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f68f:	83 ec 04             	sub    $0x4,%esp
f012f692:	68 30 c1 13 f0       	push   $0xf013c130
f012f697:	68 14 13 00 00       	push   $0x1314
f012f69c:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f6a1:	e8 55 0b fd ff       	call   f01001fb <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f6a6:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f6ad:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f6b4:	eb 48                	jmp    f012f6fe <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f6b6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f6b9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f6be:	83 ec 04             	sub    $0x4,%esp
f012f6c1:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f6c7:	51                   	push   %ecx
f012f6c8:	52                   	push   %edx
f012f6c9:	50                   	push   %eax
f012f6ca:	e8 0b 73 fd ff       	call   f01069da <get_page_table>
f012f6cf:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f6d2:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f6d8:	85 c0                	test   %eax,%eax
f012f6da:	75 17                	jne    f012f6f3 <test_krealloc_BF+0x2044>
					panic(
f012f6dc:	83 ec 04             	sub    $0x4,%esp
f012f6df:	68 5c b5 13 f0       	push   $0xf013b55c
f012f6e4:	68 21 13 00 00       	push   $0x1321
f012f6e9:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f6ee:	e8 08 0b fd ff       	call   f01001fb <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f6f3:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f6fa:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f6fe:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f702:	78 b2                	js     f012f6b6 <test_krealloc_BF+0x2007>
f012f704:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f708:	7f 09                	jg     f012f713 <test_krealloc_BF+0x2064>
f012f70a:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f711:	76 a3                	jbe    f012f6b6 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f713:	83 ec 0c             	sub    $0xc,%esp
f012f716:	68 3e ae 13 f0       	push   $0xf013ae3e
f012f71b:	e8 62 15 fd ff       	call   f0100c82 <cprintf>
f012f720:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f723:	83 ec 0c             	sub    $0xc,%esp
f012f726:	68 40 c5 13 f0       	push   $0xf013c540
f012f72b:	e8 52 15 fd ff       	call   f0100c82 <cprintf>
f012f730:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f733:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f738:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f73b:	5b                   	pop    %ebx
f012f73c:	5f                   	pop    %edi
f012f73d:	5d                   	pop    %ebp
f012f73e:	c3                   	ret    

f012f73f <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f73f:	55                   	push   %ebp
f012f740:	89 e5                	mov    %esp,%ebp
f012f742:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f012f745:	a1 04 7b 65 f0       	mov    0xf0657b04,%eax
f012f74a:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f012f74f:	74 17                	je     f012f768 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f012f751:	83 ec 04             	sub    $0x4,%esp
f012f754:	68 80 c5 13 f0       	push   $0xf013c580
f012f759:	68 39 13 00 00       	push   $0x1339
f012f75e:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f763:	e8 93 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f012f768:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f012f76d:	8b 15 04 7b 65 f0    	mov    0xf0657b04,%edx
f012f773:	4a                   	dec    %edx
f012f774:	39 d0                	cmp    %edx,%eax
f012f776:	74 17                	je     f012f78f <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f012f778:	83 ec 04             	sub    $0x4,%esp
f012f77b:	68 d4 c5 13 f0       	push   $0xf013c5d4
f012f780:	68 3f 13 00 00       	push   $0x133f
f012f785:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f78a:	e8 6c 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f012f78f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f012f794:	85 c0                	test   %eax,%eax
f012f796:	74 17                	je     f012f7af <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f012f798:	83 ec 04             	sub    $0x4,%esp
f012f79b:	68 10 c6 13 f0       	push   $0xf013c610
f012f7a0:	68 45 13 00 00       	push   $0x1345
f012f7a5:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f7aa:	e8 4c 0a fd ff       	call   f01001fb <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f012f7af:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f012f7b4:	83 f8 01             	cmp    $0x1,%eax
f012f7b7:	74 17                	je     f012f7d0 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f012f7b9:	83 ec 04             	sub    $0x4,%esp
f012f7bc:	68 48 c6 13 f0       	push   $0xf013c648
f012f7c1:	68 4b 13 00 00       	push   $0x134b
f012f7c6:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f7cb:	e8 2b 0a fd ff       	call   f01001fb <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f012f7d0:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f012f7d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f012f7d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f7dc:	74 66                	je     f012f844 <test_initialize_dyn_block_system+0x105>
f012f7de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f7e1:	8b 48 0c             	mov    0xc(%eax),%ecx
f012f7e4:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012f7eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f7ee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f7f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f012f7f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f7f9:	ba 00 00 00 00       	mov    $0x0,%edx
f012f7fe:	f7 75 ec             	divl   -0x14(%ebp)
f012f801:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f804:	29 d0                	sub    %edx,%eax
f012f806:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f012f80b:	29 c2                	sub    %eax,%edx
f012f80d:	89 d0                	mov    %edx,%eax
f012f80f:	39 c1                	cmp    %eax,%ecx
f012f811:	75 31                	jne    f012f844 <test_initialize_dyn_block_system+0x105>
f012f813:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f816:	8b 48 08             	mov    0x8(%eax),%ecx
f012f819:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f012f820:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f823:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f828:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012f82b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f82e:	ba 00 00 00 00       	mov    $0x0,%edx
f012f833:	f7 75 e4             	divl   -0x1c(%ebp)
f012f836:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f839:	29 d0                	sub    %edx,%eax
f012f83b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f840:	39 c1                	cmp    %eax,%ecx
f012f842:	74 17                	je     f012f85b <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f012f844:	83 ec 04             	sub    $0x4,%esp
f012f847:	68 80 c6 13 f0       	push   $0xf013c680
f012f84c:	68 52 13 00 00       	push   $0x1352
f012f851:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f856:	e8 a0 09 fd ff       	call   f01001fb <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012f85b:	8b 45 14             	mov    0x14(%ebp),%eax
f012f85e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012f861:	74 17                	je     f012f87a <test_initialize_dyn_block_system+0x13b>
f012f863:	83 ec 04             	sub    $0x4,%esp
f012f866:	68 74 ac 13 f0       	push   $0xf013ac74
f012f86b:	68 56 13 00 00       	push   $0x1356
f012f870:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f875:	e8 81 09 fd ff       	call   f01001fb <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f012f87a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f87d:	2b 45 10             	sub    0x10(%ebp),%eax
f012f880:	3d a0 00 00 00       	cmp    $0xa0,%eax
f012f885:	74 1b                	je     f012f8a2 <test_initialize_dyn_block_system+0x163>
f012f887:	8b 45 08             	mov    0x8(%ebp),%eax
f012f88a:	2b 45 10             	sub    0x10(%ebp),%eax
f012f88d:	50                   	push   %eax
f012f88e:	68 bc c6 13 f0       	push   $0xf013c6bc
f012f893:	68 57 13 00 00       	push   $0x1357
f012f898:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f89d:	e8 59 09 fd ff       	call   f01001fb <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f012f8a2:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f012f8a9:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8ae:	83 ec 04             	sub    $0x4,%esp
f012f8b1:	6a 00                	push   $0x0
f012f8b3:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8b6:	50                   	push   %eax
f012f8b7:	e8 e9 5f fe ff       	call   f01158a5 <CB>
f012f8bc:	83 c4 10             	add    $0x10,%esp
f012f8bf:	83 f8 01             	cmp    $0x1,%eax
f012f8c2:	75 35                	jne    f012f8f9 <test_initialize_dyn_block_system+0x1ba>
f012f8c4:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8c9:	83 ec 04             	sub    $0x4,%esp
f012f8cc:	6a 01                	push   $0x1
f012f8ce:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8d1:	50                   	push   %eax
f012f8d2:	e8 ce 5f fe ff       	call   f01158a5 <CB>
f012f8d7:	83 c4 10             	add    $0x10,%esp
f012f8da:	83 f8 01             	cmp    $0x1,%eax
f012f8dd:	75 1a                	jne    f012f8f9 <test_initialize_dyn_block_system+0x1ba>
f012f8df:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f012f8e4:	83 ec 04             	sub    $0x4,%esp
f012f8e7:	6a 02                	push   $0x2
f012f8e9:	ff 75 f4             	pushl  -0xc(%ebp)
f012f8ec:	50                   	push   %eax
f012f8ed:	e8 b3 5f fe ff       	call   f01158a5 <CB>
f012f8f2:	83 c4 10             	add    $0x10,%esp
f012f8f5:	85 c0                	test   %eax,%eax
f012f8f7:	74 17                	je     f012f910 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f012f8f9:	83 ec 04             	sub    $0x4,%esp
f012f8fc:	68 00 c7 13 f0       	push   $0xf013c700
f012f901:	68 5f 13 00 00       	push   $0x135f
f012f906:	68 5a ac 13 f0       	push   $0xf013ac5a
f012f90b:	e8 eb 08 fd ff       	call   f01001fb <_panic>

			a+=4096;
f012f910:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f012f917:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f012f91e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f921:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012f926:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012f929:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f92c:	ba 00 00 00 00       	mov    $0x0,%edx
f012f931:	f7 75 dc             	divl   -0x24(%ebp)
f012f934:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f937:	29 d0                	sub    %edx,%eax
f012f939:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012f93e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f941:	74 05                	je     f012f948 <test_initialize_dyn_block_system+0x209>
				break;
		}
f012f943:	e9 61 ff ff ff       	jmp    f012f8a9 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f012f948:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f012f949:	83 ec 0c             	sub    $0xc,%esp
f012f94c:	68 60 c7 13 f0       	push   $0xf013c760
f012f951:	e8 2c 13 fd ff       	call   f0100c82 <cprintf>
f012f956:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f959:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f95e:	c9                   	leave  
f012f95f:	c3                   	ret    

f012f960 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f960:	55                   	push   %ebp
f012f961:	89 e5                	mov    %esp,%ebp
f012f963:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f966:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f96a:	77 07                	ja     f012f973 <nearest_pow2_ceil+0x13>
f012f96c:	b8 01 00 00 00       	mov    $0x1,%eax
f012f971:	eb 20                	jmp    f012f993 <nearest_pow2_ceil+0x33>
    int power = 2;
f012f973:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f97a:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f97d:	eb 08                	jmp    f012f987 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f97f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f982:	01 c0                	add    %eax,%eax
f012f984:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f987:	d1 6d 08             	shrl   0x8(%ebp)
f012f98a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f98e:	75 ef                	jne    f012f97f <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f990:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f993:	c9                   	leave  
f012f994:	c3                   	ret    

f012f995 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f995:	55                   	push   %ebp
f012f996:	89 e5                	mov    %esp,%ebp
f012f998:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f99b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f99f:	77 07                	ja     f012f9a8 <log2_ceil+0x13>
f012f9a1:	b8 01 00 00 00       	mov    $0x1,%eax
f012f9a6:	eb 1b                	jmp    f012f9c3 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f9a8:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f9af:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f9b2:	eb 03                	jmp    f012f9b7 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f9b4:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f9b7:	d1 6d 08             	shrl   0x8(%ebp)
f012f9ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f9be:	75 f4                	jne    f012f9b4 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f9c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f9c3:	c9                   	leave  
f012f9c4:	c3                   	ret    

f012f9c5 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f9c5:	55                   	push   %ebp
f012f9c6:	89 e5                	mov    %esp,%ebp
f012f9c8:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f9cb:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9ce:	8b 00                	mov    (%eax),%eax
f012f9d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f9d3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9d6:	8b 00                	mov    (%eax),%eax
f012f9d8:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f9db:	eb 52                	jmp    f012fa2f <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f9dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9e0:	8b 00                	mov    (%eax),%eax
f012f9e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f9e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f9e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f9eb:	75 12                	jne    f012f9ff <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f9ed:	83 ec 0c             	sub    $0xc,%esp
f012f9f0:	68 b8 c7 13 f0       	push   $0xf013c7b8
f012f9f5:	e8 88 12 fd ff       	call   f0100c82 <cprintf>
f012f9fa:	83 c4 10             	add    $0x10,%esp
			break;
f012f9fd:	eb 3f                	jmp    f012fa3e <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012f9ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fa03:	74 38                	je     f012fa3d <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012fa05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa08:	8b 00                	mov    (%eax),%eax
f012fa0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012fa0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fa10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fa13:	75 12                	jne    f012fa27 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012fa15:	83 ec 0c             	sub    $0xc,%esp
f012fa18:	68 d4 c7 13 f0       	push   $0xf013c7d4
f012fa1d:	e8 60 12 fd ff       	call   f0100c82 <cprintf>
f012fa22:	83 c4 10             	add    $0x10,%esp
			break;
f012fa25:	eb 17                	jmp    f012fa3e <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012fa27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa2a:	8b 00                	mov    (%eax),%eax
f012fa2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012fa2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fa33:	74 09                	je     f012fa3e <detect_loop_in_FrameInfo_list+0x79>
f012fa35:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fa39:	75 a2                	jne    f012f9dd <detect_loop_in_FrameInfo_list+0x18>
f012fa3b:	eb 01                	jmp    f012fa3e <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012fa3d:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012fa3e:	83 ec 0c             	sub    $0xc,%esp
f012fa41:	68 eb c7 13 f0       	push   $0xf013c7eb
f012fa46:	e8 37 12 fd ff       	call   f0100c82 <cprintf>
f012fa4b:	83 c4 10             	add    $0x10,%esp
}
f012fa4e:	90                   	nop
f012fa4f:	c9                   	leave  
f012fa50:	c3                   	ret    

f012fa51 <scarce_memory>:

void scarce_memory()
{
f012fa51:	55                   	push   %ebp
f012fa52:	89 e5                	mov    %esp,%ebp
f012fa54:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012fa57:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fa5c:	ba 64 00 00 00       	mov    $0x64,%edx
f012fa61:	29 c2                	sub    %eax,%edx
f012fa63:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fa68:	0f af c2             	imul   %edx,%eax
f012fa6b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fa70:	f7 e2                	mul    %edx
f012fa72:	89 d0                	mov    %edx,%eax
f012fa74:	c1 e8 05             	shr    $0x5,%eax
f012fa77:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012fa7a:	a1 f0 7a 65 f0       	mov    0xf0657af0,%eax
f012fa7f:	ba 64 00 00 00       	mov    $0x64,%edx
f012fa84:	29 c2                	sub    %eax,%edx
f012fa86:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f012fa8b:	89 d1                	mov    %edx,%ecx
f012fa8d:	0f af c8             	imul   %eax,%ecx
f012fa90:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fa95:	f7 e1                	mul    %ecx
f012fa97:	c1 ea 05             	shr    $0x5,%edx
f012fa9a:	89 d0                	mov    %edx,%eax
f012fa9c:	c1 e0 02             	shl    $0x2,%eax
f012fa9f:	01 d0                	add    %edx,%eax
f012faa1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012faa8:	01 d0                	add    %edx,%eax
f012faaa:	c1 e0 02             	shl    $0x2,%eax
f012faad:	29 c1                	sub    %eax,%ecx
f012faaf:	89 ca                	mov    %ecx,%edx
f012fab1:	85 d2                	test   %edx,%edx
f012fab3:	74 03                	je     f012fab8 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012fab5:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012fab8:	8b 15 10 7b 65 f0    	mov    0xf0657b10,%edx
f012fabe:	a1 24 7b 65 f0       	mov    0xf0657b24,%eax
f012fac3:	29 c2                	sub    %eax,%edx
f012fac5:	89 d0                	mov    %edx,%eax
f012fac7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012faca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012facd:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012fad0:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012fad3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012fada:	eb 12                	jmp    f012faee <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012fadc:	83 ec 0c             	sub    $0xc,%esp
f012fadf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012fae2:	50                   	push   %eax
f012fae3:	e8 33 6d fd ff       	call   f010681b <allocate_frame>
f012fae8:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012faeb:	ff 45 f0             	incl   -0x10(%ebp)
f012faee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012faf1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012faf4:	76 e6                	jbe    f012fadc <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012faf6:	90                   	nop
f012faf7:	c9                   	leave  
f012faf8:	c3                   	ret    

f012faf9 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012faf9:	55                   	push   %ebp
f012fafa:	89 e5                	mov    %esp,%ebp
f012fafc:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012faff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012fb06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012fb0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012fb14:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012fb18:	0f 85 d0 01 00 00    	jne    f012fcee <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fb1e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012fb25:	e9 de 00 00 00       	jmp    f012fc08 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f012fb2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fb31:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fb36:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fb39:	c1 e2 04             	shl    $0x4,%edx
f012fb3c:	01 d0                	add    %edx,%eax
f012fb3e:	8b 00                	mov    (%eax),%eax
f012fb40:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fb43:	e9 85 00 00 00       	jmp    f012fbcd <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012fb48:	83 ec 0c             	sub    $0xc,%esp
f012fb4b:	ff 75 e4             	pushl  -0x1c(%ebp)
f012fb4e:	e8 33 82 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fb53:	83 c4 10             	add    $0x10,%esp
f012fb56:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fb59:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fb5e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fb64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fb67:	0f af c2             	imul   %edx,%eax
f012fb6a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fb6f:	f7 e2                	mul    %edx
f012fb71:	89 d0                	mov    %edx,%eax
f012fb73:	c1 e8 05             	shr    $0x5,%eax
f012fb76:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fb79:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fb7e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fb84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012fb87:	89 d1                	mov    %edx,%ecx
f012fb89:	0f af c8             	imul   %eax,%ecx
f012fb8c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fb91:	f7 e1                	mul    %ecx
f012fb93:	c1 ea 05             	shr    $0x5,%edx
f012fb96:	89 d0                	mov    %edx,%eax
f012fb98:	c1 e0 02             	shl    $0x2,%eax
f012fb9b:	01 d0                	add    %edx,%eax
f012fb9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fba4:	01 d0                	add    %edx,%eax
f012fba6:	c1 e0 02             	shl    $0x2,%eax
f012fba9:	29 c1                	sub    %eax,%ecx
f012fbab:	89 ca                	mov    %ecx,%edx
f012fbad:	85 d2                	test   %edx,%edx
f012fbaf:	74 03                	je     f012fbb4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f012fbb1:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012fbb4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fbb7:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012fbba:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fbbf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fbc2:	c1 e2 04             	shl    $0x4,%edx
f012fbc5:	01 d0                	add    %edx,%eax
f012fbc7:	8b 40 08             	mov    0x8(%eax),%eax
f012fbca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fbcd:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fbd2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fbd5:	c1 e2 04             	shl    $0x4,%edx
f012fbd8:	01 d0                	add    %edx,%eax
f012fbda:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fbde:	74 08                	je     f012fbe8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f012fbe0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fbe3:	8b 52 44             	mov    0x44(%edx),%edx
f012fbe6:	eb 05                	jmp    f012fbed <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f012fbe8:	ba 00 00 00 00       	mov    $0x0,%edx
f012fbed:	89 50 08             	mov    %edx,0x8(%eax)
f012fbf0:	8b 40 08             	mov    0x8(%eax),%eax
f012fbf3:	85 c0                	test   %eax,%eax
f012fbf5:	0f 85 4d ff ff ff    	jne    f012fb48 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f012fbfb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fbff:	0f 85 43 ff ff ff    	jne    f012fb48 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012fc05:	ff 45 e8             	incl   -0x18(%ebp)
f012fc08:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fc0d:	0f b6 c0             	movzbl %al,%eax
f012fc10:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fc13:	0f 8f 11 ff ff ff    	jg     f012fb2a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012fc19:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fc20:	a1 f4 7a 65 f0       	mov    0xf0657af4,%eax
f012fc25:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fc28:	eb 19                	jmp    f012fc43 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012fc2a:	83 ec 0c             	sub    $0xc,%esp
f012fc2d:	ff 75 dc             	pushl  -0x24(%ebp)
f012fc30:	e8 51 81 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fc35:	83 c4 10             	add    $0x10,%esp
f012fc38:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012fc3b:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fc40:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fc43:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fc47:	74 08                	je     f012fc51 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f012fc49:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fc4c:	8b 40 44             	mov    0x44(%eax),%eax
f012fc4f:	eb 05                	jmp    f012fc56 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f012fc51:	b8 00 00 00 00       	mov    $0x0,%eax
f012fc56:	a3 fc 7a 65 f0       	mov    %eax,0xf0657afc
f012fc5b:	a1 fc 7a 65 f0       	mov    0xf0657afc,%eax
f012fc60:	85 c0                	test   %eax,%eax
f012fc62:	75 c6                	jne    f012fc2a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f012fc64:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fc68:	75 c0                	jne    f012fc2a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012fc6a:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc6f:	85 c0                	test   %eax,%eax
f012fc71:	0f 84 ec 00 00 00    	je     f012fd63 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fc77:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc7c:	83 ec 0c             	sub    $0xc,%esp
f012fc7f:	50                   	push   %eax
f012fc80:	e8 01 81 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fc85:	83 c4 10             	add    $0x10,%esp
f012fc88:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fc8b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fc90:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fc96:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fc99:	0f af c2             	imul   %edx,%eax
f012fc9c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fca1:	f7 e2                	mul    %edx
f012fca3:	89 d0                	mov    %edx,%eax
f012fca5:	c1 e8 05             	shr    $0x5,%eax
f012fca8:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fcab:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fcb0:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fcb6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012fcb9:	89 d1                	mov    %edx,%ecx
f012fcbb:	0f af c8             	imul   %eax,%ecx
f012fcbe:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fcc3:	f7 e1                	mul    %ecx
f012fcc5:	c1 ea 05             	shr    $0x5,%edx
f012fcc8:	89 d0                	mov    %edx,%eax
f012fcca:	c1 e0 02             	shl    $0x2,%eax
f012fccd:	01 d0                	add    %edx,%eax
f012fccf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fcd6:	01 d0                	add    %edx,%eax
f012fcd8:	c1 e0 02             	shl    $0x2,%eax
f012fcdb:	29 c1                	sub    %eax,%ecx
f012fcdd:	89 ca                	mov    %ecx,%edx
f012fcdf:	85 d2                	test   %edx,%edx
f012fce1:	74 03                	je     f012fce6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f012fce3:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fce6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012fce9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fcec:	eb 75                	jmp    f012fd63 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012fcee:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fcf3:	83 ec 0c             	sub    $0xc,%esp
f012fcf6:	50                   	push   %eax
f012fcf7:	e8 8a 80 fd ff       	call   f0107d86 <env_page_ws_get_size>
f012fcfc:	83 c4 10             	add    $0x10,%esp
f012fcff:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012fd02:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd07:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fd10:	0f af c2             	imul   %edx,%eax
f012fd13:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012fd18:	f7 e2                	mul    %edx
f012fd1a:	89 d0                	mov    %edx,%eax
f012fd1c:	c1 e8 05             	shr    $0x5,%eax
f012fd1f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012fd22:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fd27:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f012fd2d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fd30:	89 d1                	mov    %edx,%ecx
f012fd32:	0f af c8             	imul   %eax,%ecx
f012fd35:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012fd3a:	f7 e1                	mul    %ecx
f012fd3c:	c1 ea 05             	shr    $0x5,%edx
f012fd3f:	89 d0                	mov    %edx,%eax
f012fd41:	c1 e0 02             	shl    $0x2,%eax
f012fd44:	01 d0                	add    %edx,%eax
f012fd46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fd4d:	01 d0                	add    %edx,%eax
f012fd4f:	c1 e0 02             	shl    $0x2,%eax
f012fd52:	29 c1                	sub    %eax,%ecx
f012fd54:	89 ca                	mov    %ecx,%edx
f012fd56:	85 d2                	test   %edx,%edx
f012fd58:	74 03                	je     f012fd5d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f012fd5a:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012fd5d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012fd60:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012fd63:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fd66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fd69:	01 c2                	add    %eax,%edx
f012fd6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd6e:	01 d0                	add    %edx,%eax
}
f012fd70:	c9                   	leave  
f012fd71:	c3                   	ret    

f012fd72 <schenv>:


void schenv()
{
f012fd72:	55                   	push   %ebp
f012fd73:	89 e5                	mov    %esp,%ebp
f012fd75:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012fd78:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__ne = NULL;
f012fd7f:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012fd86:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fd89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fd90:	eb 3f                	jmp    f012fdd1 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f012fd92:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fd97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fd9a:	c1 e2 04             	shl    $0x4,%edx
f012fd9d:	01 d0                	add    %edx,%eax
f012fd9f:	83 ec 0c             	sub    $0xc,%esp
f012fda2:	50                   	push   %eax
f012fda3:	e8 51 46 fd ff       	call   f01043f9 <queue_size>
f012fda8:	83 c4 10             	add    $0x10,%esp
f012fdab:	85 c0                	test   %eax,%eax
f012fdad:	74 1f                	je     f012fdce <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012fdaf:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f012fdb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fdb7:	c1 e2 04             	shl    $0x4,%edx
f012fdba:	01 d0                	add    %edx,%eax
f012fdbc:	8b 40 04             	mov    0x4(%eax),%eax
f012fdbf:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = i;
f012fdc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fdc7:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
			break;
f012fdcc:	eb 10                	jmp    f012fdde <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012fdce:	ff 45 f4             	incl   -0xc(%ebp)
f012fdd1:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f012fdd6:	0f b6 c0             	movzbl %al,%eax
f012fdd9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fddc:	7f b4                	jg     f012fd92 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012fdde:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fde3:	85 c0                	test   %eax,%eax
f012fde5:	0f 84 86 00 00 00    	je     f012fe71 <schenv+0xff>
	{
		if (__ne != NULL)
f012fdeb:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012fdf0:	85 c0                	test   %eax,%eax
f012fdf2:	74 4b                	je     f012fe3f <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f012fdf4:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fdf9:	0f b6 c0             	movzbl %al,%eax
f012fdfc:	8d 50 01             	lea    0x1(%eax),%edx
f012fdff:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fe04:	0f b6 c0             	movzbl %al,%eax
f012fe07:	39 c2                	cmp    %eax,%edx
f012fe09:	7d 66                	jge    f012fe71 <schenv+0xff>
			{
				__ne = curenv;
f012fe0b:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe10:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fe15:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe1a:	0f b6 c0             	movzbl %al,%eax
f012fe1d:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012fe23:	0f b6 d2             	movzbl %dl,%edx
f012fe26:	4a                   	dec    %edx
f012fe27:	39 d0                	cmp    %edx,%eax
f012fe29:	7d 08                	jge    f012fe33 <schenv+0xc1>
f012fe2b:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe30:	40                   	inc    %eax
f012fe31:	eb 05                	jmp    f012fe38 <schenv+0xc6>
f012fe33:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe38:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012fe3d:	eb 32                	jmp    f012fe71 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012fe3f:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fe44:	a3 38 7b 65 f0       	mov    %eax,0xf0657b38
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012fe49:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe4e:	0f b6 c0             	movzbl %al,%eax
f012fe51:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f012fe57:	0f b6 d2             	movzbl %dl,%edx
f012fe5a:	4a                   	dec    %edx
f012fe5b:	39 d0                	cmp    %edx,%eax
f012fe5d:	7d 08                	jge    f012fe67 <schenv+0xf5>
f012fe5f:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe64:	40                   	inc    %eax
f012fe65:	eb 05                	jmp    f012fe6c <schenv+0xfa>
f012fe67:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f012fe6c:	a2 a8 7b 65 f0       	mov    %al,0xf0657ba8
		}
	}
}
f012fe71:	90                   	nop
f012fe72:	c9                   	leave  
f012fe73:	c3                   	ret    

f012fe74 <chksch>:

void chksch(uint8 onoff)
{
f012fe74:	55                   	push   %ebp
f012fe75:	89 e5                	mov    %esp,%ebp
f012fe77:	83 ec 04             	sub    $0x4,%esp
f012fe7a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe7d:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012fe80:	c7 05 94 7b 65 f0 00 	movl   $0x0,0xf0657b94
f012fe87:	00 00 00 
	__ne = NULL;
f012fe8a:	c7 05 38 7b 65 f0 00 	movl   $0x0,0xf0657b38
f012fe91:	00 00 00 
	__pl = 0 ;
f012fe94:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	__nl = 0 ;
f012fe9b:	c6 05 a8 7b 65 f0 00 	movb   $0x0,0xf0657ba8
	__chkstatus = onoff;
f012fea2:	8a 45 fc             	mov    -0x4(%ebp),%al
f012fea5:	a2 34 7b 65 f0       	mov    %al,0xf0657b34
}
f012feaa:	90                   	nop
f012feab:	c9                   	leave  
f012feac:	c3                   	ret    

f012fead <chk1>:
void chk1()
{
f012fead:	55                   	push   %ebp
f012feae:	89 e5                	mov    %esp,%ebp
f012feb0:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012feb3:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012feb8:	84 c0                	test   %al,%al
f012feba:	74 2b                	je     f012fee7 <chk1+0x3a>
		return ;
	__pe = curenv;
f012febc:	a1 14 72 65 f0       	mov    0xf0657214,%eax
f012fec1:	a3 94 7b 65 f0       	mov    %eax,0xf0657b94
	__pl = __nl ;
f012fec6:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012fecb:	a2 e0 7a 65 f0       	mov    %al,0xf0657ae0
	if (__pe == NULL)
f012fed0:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f012fed5:	85 c0                	test   %eax,%eax
f012fed7:	75 07                	jne    f012fee0 <chk1+0x33>
	{
		__pl = 0;
f012fed9:	c6 05 e0 7a 65 f0 00 	movb   $0x0,0xf0657ae0
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012fee0:	e8 8d fe ff ff       	call   f012fd72 <schenv>
f012fee5:	eb 01                	jmp    f012fee8 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012fee7:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012fee8:	c9                   	leave  
f012fee9:	c3                   	ret    

f012feea <chk2>:
void chk2(struct Env* __se)
{
f012feea:	55                   	push   %ebp
f012feeb:	89 e5                	mov    %esp,%ebp
f012feed:	53                   	push   %ebx
f012feee:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012fef1:	a0 34 7b 65 f0       	mov    0xf0657b34,%al
f012fef6:	84 c0                	test   %al,%al
f012fef8:	0f 84 43 02 00 00    	je     f0130141 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012fefe:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff03:	39 45 08             	cmp    %eax,0x8(%ebp)
f012ff06:	74 19                	je     f012ff21 <chk2+0x37>
f012ff08:	68 05 c8 13 f0       	push   $0xf013c805
f012ff0d:	68 12 c8 13 f0       	push   $0xf013c812
f012ff12:	68 c0 00 00 00       	push   $0xc0
f012ff17:	68 27 c8 13 f0       	push   $0xf013c827
f012ff1c:	e8 49 03 fd ff       	call   f010026a <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012ff21:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f012ff26:	85 c0                	test   %eax,%eax
f012ff28:	0f 84 25 01 00 00    	je     f0130053 <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012ff2e:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012ff34:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff39:	0f b6 c0             	movzbl %al,%eax
f012ff3c:	01 d0                	add    %edx,%eax
f012ff3e:	8a 00                	mov    (%eax),%al
f012ff40:	0f b6 d8             	movzbl %al,%ebx
f012ff43:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012ff48:	99                   	cltd   
f012ff49:	f7 fb                	idiv   %ebx
f012ff4b:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012ff51:	8b 15 2c 7b 65 f0    	mov    0xf0657b2c,%edx
f012ff57:	a0 a8 7b 65 f0       	mov    0xf0657ba8,%al
f012ff5c:	0f b6 c0             	movzbl %al,%eax
f012ff5f:	01 d0                	add    %edx,%eax
f012ff61:	8a 00                	mov    (%eax),%al
f012ff63:	0f b6 d8             	movzbl %al,%ebx
f012ff66:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012ff6b:	99                   	cltd   
f012ff6c:	f7 fb                	idiv   %ebx
f012ff6e:	89 c3                	mov    %eax,%ebx
f012ff70:	89 c8                	mov    %ecx,%eax
f012ff72:	99                   	cltd   
f012ff73:	f7 fb                	idiv   %ebx
f012ff75:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012ff79:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff7d:	83 e0 01             	and    $0x1,%eax
f012ff80:	66 85 c0             	test   %ax,%ax
f012ff83:	74 07                	je     f012ff8c <chk2+0xa2>
f012ff85:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff89:	40                   	inc    %eax
f012ff8a:	eb 04                	jmp    f012ff90 <chk2+0xa6>
f012ff8c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012ff90:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012ff94:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012ff98:	89 d0                	mov    %edx,%eax
f012ff9a:	c1 e0 02             	shl    $0x2,%eax
f012ff9d:	01 d0                	add    %edx,%eax
f012ff9f:	01 c0                	add    %eax,%eax
f012ffa1:	01 d0                	add    %edx,%eax
f012ffa3:	c1 e0 02             	shl    $0x2,%eax
f012ffa6:	01 d0                	add    %edx,%eax
f012ffa8:	01 c0                	add    %eax,%eax
f012ffaa:	89 c1                	mov    %eax,%ecx
f012ffac:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ffb1:	f7 e9                	imul   %ecx
f012ffb3:	c1 fa 05             	sar    $0x5,%edx
f012ffb6:	89 c8                	mov    %ecx,%eax
f012ffb8:	c1 f8 1f             	sar    $0x1f,%eax
f012ffbb:	29 c2                	sub    %eax,%edx
f012ffbd:	89 d0                	mov    %edx,%eax
f012ffbf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012ffc3:	e8 02 43 fd ff       	call   f01042ca <kclock_read_cnt0>
f012ffc8:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012ffcc:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012ffd0:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012ffd4:	76 0a                	jbe    f012ffe0 <chk2+0xf6>
f012ffd6:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012ffda:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012ffde:	76 19                	jbe    f012fff9 <chk2+0x10f>
f012ffe0:	68 40 c8 13 f0       	push   $0xf013c840
f012ffe5:	68 12 c8 13 f0       	push   $0xf013c812
f012ffea:	68 ca 00 00 00       	push   $0xca
f012ffef:	68 27 c8 13 f0       	push   $0xf013c827
f012fff4:	e8 71 02 fd ff       	call   f010026a <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012fff9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130000:	eb 44                	jmp    f0130046 <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130002:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f0130007:	8b 40 4c             	mov    0x4c(%eax),%eax
f013000a:	89 c2                	mov    %eax,%edx
f013000c:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f0130011:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130014:	c1 e1 04             	shl    $0x4,%ecx
f0130017:	01 c8                	add    %ecx,%eax
f0130019:	83 ec 08             	sub    $0x8,%esp
f013001c:	52                   	push   %edx
f013001d:	50                   	push   %eax
f013001e:	e8 a8 45 fd ff       	call   f01045cb <find_env_in_queue>
f0130023:	83 c4 10             	add    $0x10,%esp
f0130026:	85 c0                	test   %eax,%eax
f0130028:	74 19                	je     f0130043 <chk2+0x159>
f013002a:	68 64 c8 13 f0       	push   $0xf013c864
f013002f:	68 12 c8 13 f0       	push   $0xf013c812
f0130034:	68 ce 00 00 00       	push   $0xce
f0130039:	68 27 c8 13 f0       	push   $0xf013c827
f013003e:	e8 27 02 fd ff       	call   f010026a <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130043:	ff 45 f4             	incl   -0xc(%ebp)
f0130046:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f013004b:	0f b6 c0             	movzbl %al,%eax
f013004e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130051:	7f af                	jg     f0130002 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130053:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f0130058:	85 c0                	test   %eax,%eax
f013005a:	0f 84 e2 00 00 00    	je     f0130142 <chk2+0x258>
f0130060:	8b 15 94 7b 65 f0    	mov    0xf0657b94,%edx
f0130066:	a1 38 7b 65 f0       	mov    0xf0657b38,%eax
f013006b:	39 c2                	cmp    %eax,%edx
f013006d:	0f 84 cf 00 00 00    	je     f0130142 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130073:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130078:	0f b6 c0             	movzbl %al,%eax
f013007b:	8a 15 80 7b 65 f0    	mov    0xf0657b80,%dl
f0130081:	0f b6 d2             	movzbl %dl,%edx
f0130084:	4a                   	dec    %edx
f0130085:	39 d0                	cmp    %edx,%eax
f0130087:	74 08                	je     f0130091 <chk2+0x1a7>
f0130089:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f013008e:	40                   	inc    %eax
f013008f:	eb 05                	jmp    f0130096 <chk2+0x1ac>
f0130091:	a0 e0 7a 65 f0       	mov    0xf0657ae0,%al
f0130096:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130099:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f013009e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01300a1:	89 c2                	mov    %eax,%edx
f01300a3:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01300a8:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f01300ac:	c1 e1 04             	shl    $0x4,%ecx
f01300af:	01 c8                	add    %ecx,%eax
f01300b1:	83 ec 08             	sub    $0x8,%esp
f01300b4:	52                   	push   %edx
f01300b5:	50                   	push   %eax
f01300b6:	e8 10 45 fd ff       	call   f01045cb <find_env_in_queue>
f01300bb:	83 c4 10             	add    $0x10,%esp
f01300be:	85 c0                	test   %eax,%eax
f01300c0:	75 19                	jne    f01300db <chk2+0x1f1>
f01300c2:	68 a4 c8 13 f0       	push   $0xf013c8a4
f01300c7:	68 12 c8 13 f0       	push   $0xf013c812
f01300cc:	68 d4 00 00 00       	push   $0xd4
f01300d1:	68 27 c8 13 f0       	push   $0xf013c827
f01300d6:	e8 8f 01 fd ff       	call   f010026a <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f01300db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01300e2:	eb 4e                	jmp    f0130132 <chk2+0x248>
		{
			if (i == __tl) continue;
f01300e4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f01300e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01300eb:	74 41                	je     f013012e <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f01300ed:	a1 94 7b 65 f0       	mov    0xf0657b94,%eax
f01300f2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01300f5:	89 c2                	mov    %eax,%edx
f01300f7:	a1 e8 7a 65 f0       	mov    0xf0657ae8,%eax
f01300fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01300ff:	c1 e1 04             	shl    $0x4,%ecx
f0130102:	01 c8                	add    %ecx,%eax
f0130104:	83 ec 08             	sub    $0x8,%esp
f0130107:	52                   	push   %edx
f0130108:	50                   	push   %eax
f0130109:	e8 bd 44 fd ff       	call   f01045cb <find_env_in_queue>
f013010e:	83 c4 10             	add    $0x10,%esp
f0130111:	85 c0                	test   %eax,%eax
f0130113:	74 1a                	je     f013012f <chk2+0x245>
f0130115:	68 e8 c8 13 f0       	push   $0xf013c8e8
f013011a:	68 12 c8 13 f0       	push   $0xf013c812
f013011f:	68 d8 00 00 00       	push   $0xd8
f0130124:	68 27 c8 13 f0       	push   $0xf013c827
f0130129:	e8 3c 01 fd ff       	call   f010026a <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f013012e:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f013012f:	ff 45 f0             	incl   -0x10(%ebp)
f0130132:	a0 80 7b 65 f0       	mov    0xf0657b80,%al
f0130137:	0f b6 c0             	movzbl %al,%eax
f013013a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013013d:	7f a5                	jg     f01300e4 <chk2+0x1fa>
f013013f:	eb 01                	jmp    f0130142 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130141:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130142:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130145:	c9                   	leave  
f0130146:	c3                   	ret    

f0130147 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130147:	55                   	push   %ebp
f0130148:	89 e5                	mov    %esp,%ebp
f013014a:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013014d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130154:	eb 40                	jmp    f0130196 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130156:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130159:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013015f:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f0130164:	83 ec 08             	sub    $0x8,%esp
f0130167:	52                   	push   %edx
f0130168:	50                   	push   %eax
f0130169:	e8 9b 01 00 00       	call   f0130309 <check_va2pa>
f013016e:	83 c4 10             	add    $0x10,%esp
f0130171:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130174:	74 19                	je     f013018f <check_boot_pgdir+0x48>
f0130176:	68 28 c9 13 f0       	push   $0xf013c928
f013017b:	68 12 c8 13 f0       	push   $0xf013c812
f0130180:	68 fa 00 00 00       	push   $0xfa
f0130185:	68 27 c8 13 f0       	push   $0xf013c827
f013018a:	e8 6c 00 fd ff       	call   f01001fb <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f013018f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130196:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130199:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f013019f:	a1 78 7b 65 f0       	mov    0xf0657b78,%eax
f01301a4:	39 c2                	cmp    %eax,%edx
f01301a6:	72 ae                	jb     f0130156 <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01301a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01301af:	eb 74                	jmp    f0130225 <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01301b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301b4:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01301ba:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01301bf:	83 ec 08             	sub    $0x8,%esp
f01301c2:	52                   	push   %edx
f01301c3:	50                   	push   %eax
f01301c4:	e8 40 01 00 00       	call   f0130309 <check_va2pa>
f01301c9:	83 c4 10             	add    $0x10,%esp
f01301cc:	c7 45 f0 00 90 18 f0 	movl   $0xf0189000,-0x10(%ebp)
f01301d3:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f01301da:	77 17                	ja     f01301f3 <check_boot_pgdir+0xac>
f01301dc:	ff 75 f0             	pushl  -0x10(%ebp)
f01301df:	68 60 c9 13 f0       	push   $0xf013c960
f01301e4:	68 04 01 00 00       	push   $0x104
f01301e9:	68 27 c8 13 f0       	push   $0xf013c827
f01301ee:	e8 08 00 fd ff       	call   f01001fb <_panic>
f01301f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01301f6:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f01301fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01301ff:	01 ca                	add    %ecx,%edx
f0130201:	39 d0                	cmp    %edx,%eax
f0130203:	74 19                	je     f013021e <check_boot_pgdir+0xd7>
f0130205:	68 94 c9 13 f0       	push   $0xf013c994
f013020a:	68 12 c8 13 f0       	push   $0xf013c812
f013020f:	68 04 01 00 00       	push   $0x104
f0130214:	68 27 c8 13 f0       	push   $0xf013c827
f0130219:	e8 dd ff fc ff       	call   f01001fb <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f013021e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130225:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f013022c:	76 83                	jbe    f01301b1 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f013022e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130235:	e9 af 00 00 00       	jmp    f01302e9 <check_boot_pgdir+0x1a2>
		switch (i) {
f013023a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013023d:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130242:	74 11                	je     f0130255 <check_boot_pgdir+0x10e>
f0130244:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0130249:	72 36                	jb     f0130281 <check_boot_pgdir+0x13a>
f013024b:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0130250:	83 f8 02             	cmp    $0x2,%eax
f0130253:	77 2c                	ja     f0130281 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0130255:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013025a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013025d:	c1 e2 02             	shl    $0x2,%edx
f0130260:	01 d0                	add    %edx,%eax
f0130262:	8b 00                	mov    (%eax),%eax
f0130264:	85 c0                	test   %eax,%eax
f0130266:	75 7a                	jne    f01302e2 <check_boot_pgdir+0x19b>
f0130268:	68 16 ca 13 f0       	push   $0xf013ca16
f013026d:	68 12 c8 13 f0       	push   $0xf013c812
f0130272:	68 0f 01 00 00       	push   $0x10f
f0130277:	68 27 c8 13 f0       	push   $0xf013c827
f013027c:	e8 7a ff fc ff       	call   f01001fb <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0130281:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0130288:	76 2c                	jbe    f01302b6 <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f013028a:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f013028f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130292:	c1 e2 02             	shl    $0x2,%edx
f0130295:	01 d0                	add    %edx,%eax
f0130297:	8b 00                	mov    (%eax),%eax
f0130299:	85 c0                	test   %eax,%eax
f013029b:	75 48                	jne    f01302e5 <check_boot_pgdir+0x19e>
f013029d:	68 16 ca 13 f0       	push   $0xf013ca16
f01302a2:	68 12 c8 13 f0       	push   $0xf013c812
f01302a7:	68 13 01 00 00       	push   $0x113
f01302ac:	68 27 c8 13 f0       	push   $0xf013c827
f01302b1:	e8 45 ff fc ff       	call   f01001fb <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01302b6:	a1 7c 7b 65 f0       	mov    0xf0657b7c,%eax
f01302bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01302be:	c1 e2 02             	shl    $0x2,%edx
f01302c1:	01 d0                	add    %edx,%eax
f01302c3:	8b 00                	mov    (%eax),%eax
f01302c5:	85 c0                	test   %eax,%eax
f01302c7:	74 1c                	je     f01302e5 <check_boot_pgdir+0x19e>
f01302c9:	68 2c ca 13 f0       	push   $0xf013ca2c
f01302ce:	68 12 c8 13 f0       	push   $0xf013c812
f01302d3:	68 15 01 00 00       	push   $0x115
f01302d8:	68 27 c8 13 f0       	push   $0xf013c827
f01302dd:	e8 19 ff fc ff       	call   f01001fb <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01302e2:	90                   	nop
f01302e3:	eb 01                	jmp    f01302e6 <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01302e5:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01302e6:	ff 45 f4             	incl   -0xc(%ebp)
f01302e9:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01302f0:	0f 86 44 ff ff ff    	jbe    f013023a <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f01302f6:	83 ec 0c             	sub    $0xc,%esp
f01302f9:	68 48 ca 13 f0       	push   $0xf013ca48
f01302fe:	e8 7f 09 fd ff       	call   f0100c82 <cprintf>
f0130303:	83 c4 10             	add    $0x10,%esp
}
f0130306:	90                   	nop
f0130307:	c9                   	leave  
f0130308:	c3                   	ret    

f0130309 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0130309:	55                   	push   %ebp
f013030a:	89 e5                	mov    %esp,%ebp
f013030c:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f013030f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130312:	c1 e8 16             	shr    $0x16,%eax
f0130315:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013031c:	8b 45 08             	mov    0x8(%ebp),%eax
f013031f:	01 d0                	add    %edx,%eax
f0130321:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0130324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130327:	8b 00                	mov    (%eax),%eax
f0130329:	83 e0 01             	and    $0x1,%eax
f013032c:	85 c0                	test   %eax,%eax
f013032e:	75 0a                	jne    f013033a <check_va2pa+0x31>
		return ~0;
f0130330:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130335:	e9 87 00 00 00       	jmp    f01303c1 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f013033a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013033d:	8b 00                	mov    (%eax),%eax
f013033f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0130344:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130347:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013034a:	c1 e8 0c             	shr    $0xc,%eax
f013034d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130350:	a1 10 7b 65 f0       	mov    0xf0657b10,%eax
f0130355:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0130358:	72 17                	jb     f0130371 <check_va2pa+0x68>
f013035a:	ff 75 f0             	pushl  -0x10(%ebp)
f013035d:	68 68 ca 13 f0       	push   $0xf013ca68
f0130362:	68 2b 01 00 00       	push   $0x12b
f0130367:	68 27 c8 13 f0       	push   $0xf013c827
f013036c:	e8 8a fe fc ff       	call   f01001fb <_panic>
f0130371:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130374:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0130379:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f013037c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013037f:	c1 e8 0c             	shr    $0xc,%eax
f0130382:	25 ff 03 00 00       	and    $0x3ff,%eax
f0130387:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013038e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130391:	01 d0                	add    %edx,%eax
f0130393:	8b 00                	mov    (%eax),%eax
f0130395:	83 e0 01             	and    $0x1,%eax
f0130398:	85 c0                	test   %eax,%eax
f013039a:	75 07                	jne    f01303a3 <check_va2pa+0x9a>
		return ~0;
f013039c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01303a1:	eb 1e                	jmp    f01303c1 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01303a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303a6:	c1 e8 0c             	shr    $0xc,%eax
f01303a9:	25 ff 03 00 00       	and    $0x3ff,%eax
f01303ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01303b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01303b8:	01 d0                	add    %edx,%eax
f01303ba:	8b 00                	mov    (%eax),%eax
f01303bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01303c1:	c9                   	leave  
f01303c2:	c3                   	ret    

f01303c3 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01303c3:	55                   	push   %ebp
f01303c4:	89 e5                	mov    %esp,%ebp
f01303c6:	53                   	push   %ebx
f01303c7:	83 ec 14             	sub    $0x14,%esp
f01303ca:	8b 45 10             	mov    0x10(%ebp),%eax
f01303cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01303d0:	8b 45 14             	mov    0x14(%ebp),%eax
f01303d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01303d6:	8b 45 18             	mov    0x18(%ebp),%eax
f01303d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01303de:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01303e1:	77 55                	ja     f0130438 <printnum+0x75>
f01303e3:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01303e6:	72 05                	jb     f01303ed <printnum+0x2a>
f01303e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01303eb:	77 4b                	ja     f0130438 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f01303ed:	8b 45 1c             	mov    0x1c(%ebp),%eax
f01303f0:	8d 58 ff             	lea    -0x1(%eax),%ebx
f01303f3:	8b 45 18             	mov    0x18(%ebp),%eax
f01303f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01303fb:	52                   	push   %edx
f01303fc:	50                   	push   %eax
f01303fd:	ff 75 f4             	pushl  -0xc(%ebp)
f0130400:	ff 75 f0             	pushl  -0x10(%ebp)
f0130403:	e8 0c 28 00 00       	call   f0132c14 <__udivdi3>
f0130408:	83 c4 10             	add    $0x10,%esp
f013040b:	83 ec 04             	sub    $0x4,%esp
f013040e:	ff 75 20             	pushl  0x20(%ebp)
f0130411:	53                   	push   %ebx
f0130412:	ff 75 18             	pushl  0x18(%ebp)
f0130415:	52                   	push   %edx
f0130416:	50                   	push   %eax
f0130417:	ff 75 0c             	pushl  0xc(%ebp)
f013041a:	ff 75 08             	pushl  0x8(%ebp)
f013041d:	e8 a1 ff ff ff       	call   f01303c3 <printnum>
f0130422:	83 c4 20             	add    $0x20,%esp
f0130425:	eb 1a                	jmp    f0130441 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0130427:	83 ec 08             	sub    $0x8,%esp
f013042a:	ff 75 0c             	pushl  0xc(%ebp)
f013042d:	ff 75 20             	pushl  0x20(%ebp)
f0130430:	8b 45 08             	mov    0x8(%ebp),%eax
f0130433:	ff d0                	call   *%eax
f0130435:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0130438:	ff 4d 1c             	decl   0x1c(%ebp)
f013043b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f013043f:	7f e6                	jg     f0130427 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0130441:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0130444:	bb 00 00 00 00       	mov    $0x0,%ebx
f0130449:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013044f:	53                   	push   %ebx
f0130450:	51                   	push   %ecx
f0130451:	52                   	push   %edx
f0130452:	50                   	push   %eax
f0130453:	e8 cc 28 00 00       	call   f0132d24 <__umoddi3>
f0130458:	83 c4 10             	add    $0x10,%esp
f013045b:	05 b4 cc 13 f0       	add    $0xf013ccb4,%eax
f0130460:	8a 00                	mov    (%eax),%al
f0130462:	0f be c0             	movsbl %al,%eax
f0130465:	83 ec 08             	sub    $0x8,%esp
f0130468:	ff 75 0c             	pushl  0xc(%ebp)
f013046b:	50                   	push   %eax
f013046c:	8b 45 08             	mov    0x8(%ebp),%eax
f013046f:	ff d0                	call   *%eax
f0130471:	83 c4 10             	add    $0x10,%esp
}
f0130474:	90                   	nop
f0130475:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130478:	c9                   	leave  
f0130479:	c3                   	ret    

f013047a <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f013047a:	55                   	push   %ebp
f013047b:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013047d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0130481:	7e 1c                	jle    f013049f <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0130483:	8b 45 08             	mov    0x8(%ebp),%eax
f0130486:	8b 00                	mov    (%eax),%eax
f0130488:	8d 50 08             	lea    0x8(%eax),%edx
f013048b:	8b 45 08             	mov    0x8(%ebp),%eax
f013048e:	89 10                	mov    %edx,(%eax)
f0130490:	8b 45 08             	mov    0x8(%ebp),%eax
f0130493:	8b 00                	mov    (%eax),%eax
f0130495:	83 e8 08             	sub    $0x8,%eax
f0130498:	8b 50 04             	mov    0x4(%eax),%edx
f013049b:	8b 00                	mov    (%eax),%eax
f013049d:	eb 40                	jmp    f01304df <getuint+0x65>
	else if (lflag)
f013049f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01304a3:	74 1e                	je     f01304c3 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f01304a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01304a8:	8b 00                	mov    (%eax),%eax
f01304aa:	8d 50 04             	lea    0x4(%eax),%edx
f01304ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b0:	89 10                	mov    %edx,(%eax)
f01304b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01304b5:	8b 00                	mov    (%eax),%eax
f01304b7:	83 e8 04             	sub    $0x4,%eax
f01304ba:	8b 00                	mov    (%eax),%eax
f01304bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01304c1:	eb 1c                	jmp    f01304df <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01304c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01304c6:	8b 00                	mov    (%eax),%eax
f01304c8:	8d 50 04             	lea    0x4(%eax),%edx
f01304cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ce:	89 10                	mov    %edx,(%eax)
f01304d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01304d3:	8b 00                	mov    (%eax),%eax
f01304d5:	83 e8 04             	sub    $0x4,%eax
f01304d8:	8b 00                	mov    (%eax),%eax
f01304da:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01304df:	5d                   	pop    %ebp
f01304e0:	c3                   	ret    

f01304e1 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01304e1:	55                   	push   %ebp
f01304e2:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01304e4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01304e8:	7e 1c                	jle    f0130506 <getint+0x25>
		return va_arg(*ap, long long);
f01304ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01304ed:	8b 00                	mov    (%eax),%eax
f01304ef:	8d 50 08             	lea    0x8(%eax),%edx
f01304f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01304f5:	89 10                	mov    %edx,(%eax)
f01304f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01304fa:	8b 00                	mov    (%eax),%eax
f01304fc:	83 e8 08             	sub    $0x8,%eax
f01304ff:	8b 50 04             	mov    0x4(%eax),%edx
f0130502:	8b 00                	mov    (%eax),%eax
f0130504:	eb 38                	jmp    f013053e <getint+0x5d>
	else if (lflag)
f0130506:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013050a:	74 1a                	je     f0130526 <getint+0x45>
		return va_arg(*ap, long);
f013050c:	8b 45 08             	mov    0x8(%ebp),%eax
f013050f:	8b 00                	mov    (%eax),%eax
f0130511:	8d 50 04             	lea    0x4(%eax),%edx
f0130514:	8b 45 08             	mov    0x8(%ebp),%eax
f0130517:	89 10                	mov    %edx,(%eax)
f0130519:	8b 45 08             	mov    0x8(%ebp),%eax
f013051c:	8b 00                	mov    (%eax),%eax
f013051e:	83 e8 04             	sub    $0x4,%eax
f0130521:	8b 00                	mov    (%eax),%eax
f0130523:	99                   	cltd   
f0130524:	eb 18                	jmp    f013053e <getint+0x5d>
	else
		return va_arg(*ap, int);
f0130526:	8b 45 08             	mov    0x8(%ebp),%eax
f0130529:	8b 00                	mov    (%eax),%eax
f013052b:	8d 50 04             	lea    0x4(%eax),%edx
f013052e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130531:	89 10                	mov    %edx,(%eax)
f0130533:	8b 45 08             	mov    0x8(%ebp),%eax
f0130536:	8b 00                	mov    (%eax),%eax
f0130538:	83 e8 04             	sub    $0x4,%eax
f013053b:	8b 00                	mov    (%eax),%eax
f013053d:	99                   	cltd   
}
f013053e:	5d                   	pop    %ebp
f013053f:	c3                   	ret    

f0130540 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0130540:	55                   	push   %ebp
f0130541:	89 e5                	mov    %esp,%ebp
f0130543:	56                   	push   %esi
f0130544:	53                   	push   %ebx
f0130545:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130548:	eb 17                	jmp    f0130561 <vprintfmt+0x21>
			if (ch == '\0')
f013054a:	85 db                	test   %ebx,%ebx
f013054c:	0f 84 af 03 00 00    	je     f0130901 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0130552:	83 ec 08             	sub    $0x8,%esp
f0130555:	ff 75 0c             	pushl  0xc(%ebp)
f0130558:	53                   	push   %ebx
f0130559:	8b 45 08             	mov    0x8(%ebp),%eax
f013055c:	ff d0                	call   *%eax
f013055e:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0130561:	8b 45 10             	mov    0x10(%ebp),%eax
f0130564:	8d 50 01             	lea    0x1(%eax),%edx
f0130567:	89 55 10             	mov    %edx,0x10(%ebp)
f013056a:	8a 00                	mov    (%eax),%al
f013056c:	0f b6 d8             	movzbl %al,%ebx
f013056f:	83 fb 25             	cmp    $0x25,%ebx
f0130572:	75 d6                	jne    f013054a <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0130574:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0130578:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f013057f:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0130586:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f013058d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0130594:	8b 45 10             	mov    0x10(%ebp),%eax
f0130597:	8d 50 01             	lea    0x1(%eax),%edx
f013059a:	89 55 10             	mov    %edx,0x10(%ebp)
f013059d:	8a 00                	mov    (%eax),%al
f013059f:	0f b6 d8             	movzbl %al,%ebx
f01305a2:	8d 43 dd             	lea    -0x23(%ebx),%eax
f01305a5:	83 f8 55             	cmp    $0x55,%eax
f01305a8:	0f 87 2b 03 00 00    	ja     f01308d9 <vprintfmt+0x399>
f01305ae:	8b 04 85 d8 cc 13 f0 	mov    -0xfec3328(,%eax,4),%eax
f01305b5:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01305b7:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01305bb:	eb d7                	jmp    f0130594 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01305bd:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01305c1:	eb d1                	jmp    f0130594 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01305c3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01305ca:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01305cd:	89 d0                	mov    %edx,%eax
f01305cf:	c1 e0 02             	shl    $0x2,%eax
f01305d2:	01 d0                	add    %edx,%eax
f01305d4:	01 c0                	add    %eax,%eax
f01305d6:	01 d8                	add    %ebx,%eax
f01305d8:	83 e8 30             	sub    $0x30,%eax
f01305db:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01305de:	8b 45 10             	mov    0x10(%ebp),%eax
f01305e1:	8a 00                	mov    (%eax),%al
f01305e3:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01305e6:	83 fb 2f             	cmp    $0x2f,%ebx
f01305e9:	7e 3e                	jle    f0130629 <vprintfmt+0xe9>
f01305eb:	83 fb 39             	cmp    $0x39,%ebx
f01305ee:	7f 39                	jg     f0130629 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01305f0:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f01305f3:	eb d5                	jmp    f01305ca <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f01305f5:	8b 45 14             	mov    0x14(%ebp),%eax
f01305f8:	83 c0 04             	add    $0x4,%eax
f01305fb:	89 45 14             	mov    %eax,0x14(%ebp)
f01305fe:	8b 45 14             	mov    0x14(%ebp),%eax
f0130601:	83 e8 04             	sub    $0x4,%eax
f0130604:	8b 00                	mov    (%eax),%eax
f0130606:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0130609:	eb 1f                	jmp    f013062a <vprintfmt+0xea>

		case '.':
			if (width < 0)
f013060b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013060f:	79 83                	jns    f0130594 <vprintfmt+0x54>
				width = 0;
f0130611:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0130618:	e9 77 ff ff ff       	jmp    f0130594 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f013061d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0130624:	e9 6b ff ff ff       	jmp    f0130594 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0130629:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f013062a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013062e:	0f 89 60 ff ff ff    	jns    f0130594 <vprintfmt+0x54>
				width = precision, precision = -1;
f0130634:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130637:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013063a:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0130641:	e9 4e ff ff ff       	jmp    f0130594 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0130646:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0130649:	e9 46 ff ff ff       	jmp    f0130594 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f013064e:	8b 45 14             	mov    0x14(%ebp),%eax
f0130651:	83 c0 04             	add    $0x4,%eax
f0130654:	89 45 14             	mov    %eax,0x14(%ebp)
f0130657:	8b 45 14             	mov    0x14(%ebp),%eax
f013065a:	83 e8 04             	sub    $0x4,%eax
f013065d:	8b 00                	mov    (%eax),%eax
f013065f:	83 ec 08             	sub    $0x8,%esp
f0130662:	ff 75 0c             	pushl  0xc(%ebp)
f0130665:	50                   	push   %eax
f0130666:	8b 45 08             	mov    0x8(%ebp),%eax
f0130669:	ff d0                	call   *%eax
f013066b:	83 c4 10             	add    $0x10,%esp
			break;
f013066e:	e9 89 02 00 00       	jmp    f01308fc <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0130673:	8b 45 14             	mov    0x14(%ebp),%eax
f0130676:	83 c0 04             	add    $0x4,%eax
f0130679:	89 45 14             	mov    %eax,0x14(%ebp)
f013067c:	8b 45 14             	mov    0x14(%ebp),%eax
f013067f:	83 e8 04             	sub    $0x4,%eax
f0130682:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0130684:	85 db                	test   %ebx,%ebx
f0130686:	79 02                	jns    f013068a <vprintfmt+0x14a>
				err = -err;
f0130688:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f013068a:	83 fb 64             	cmp    $0x64,%ebx
f013068d:	7f 0b                	jg     f013069a <vprintfmt+0x15a>
f013068f:	8b 34 9d 20 cb 13 f0 	mov    -0xfec34e0(,%ebx,4),%esi
f0130696:	85 f6                	test   %esi,%esi
f0130698:	75 19                	jne    f01306b3 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f013069a:	53                   	push   %ebx
f013069b:	68 c5 cc 13 f0       	push   $0xf013ccc5
f01306a0:	ff 75 0c             	pushl  0xc(%ebp)
f01306a3:	ff 75 08             	pushl  0x8(%ebp)
f01306a6:	e8 5e 02 00 00       	call   f0130909 <printfmt>
f01306ab:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01306ae:	e9 49 02 00 00       	jmp    f01308fc <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01306b3:	56                   	push   %esi
f01306b4:	68 ce cc 13 f0       	push   $0xf013ccce
f01306b9:	ff 75 0c             	pushl  0xc(%ebp)
f01306bc:	ff 75 08             	pushl  0x8(%ebp)
f01306bf:	e8 45 02 00 00       	call   f0130909 <printfmt>
f01306c4:	83 c4 10             	add    $0x10,%esp
			break;
f01306c7:	e9 30 02 00 00       	jmp    f01308fc <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01306cc:	8b 45 14             	mov    0x14(%ebp),%eax
f01306cf:	83 c0 04             	add    $0x4,%eax
f01306d2:	89 45 14             	mov    %eax,0x14(%ebp)
f01306d5:	8b 45 14             	mov    0x14(%ebp),%eax
f01306d8:	83 e8 04             	sub    $0x4,%eax
f01306db:	8b 30                	mov    (%eax),%esi
f01306dd:	85 f6                	test   %esi,%esi
f01306df:	75 05                	jne    f01306e6 <vprintfmt+0x1a6>
				p = "(null)";
f01306e1:	be d1 cc 13 f0       	mov    $0xf013ccd1,%esi
			if (width > 0 && padc != '-')
f01306e6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01306ea:	7e 6d                	jle    f0130759 <vprintfmt+0x219>
f01306ec:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f01306f0:	74 67                	je     f0130759 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f01306f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01306f5:	83 ec 08             	sub    $0x8,%esp
f01306f8:	50                   	push   %eax
f01306f9:	56                   	push   %esi
f01306fa:	e8 12 05 00 00       	call   f0130c11 <strnlen>
f01306ff:	83 c4 10             	add    $0x10,%esp
f0130702:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0130705:	eb 16                	jmp    f013071d <vprintfmt+0x1dd>
					putch(padc, putdat);
f0130707:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f013070b:	83 ec 08             	sub    $0x8,%esp
f013070e:	ff 75 0c             	pushl  0xc(%ebp)
f0130711:	50                   	push   %eax
f0130712:	8b 45 08             	mov    0x8(%ebp),%eax
f0130715:	ff d0                	call   *%eax
f0130717:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f013071a:	ff 4d e4             	decl   -0x1c(%ebp)
f013071d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130721:	7f e4                	jg     f0130707 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130723:	eb 34                	jmp    f0130759 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0130725:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130729:	74 1c                	je     f0130747 <vprintfmt+0x207>
f013072b:	83 fb 1f             	cmp    $0x1f,%ebx
f013072e:	7e 05                	jle    f0130735 <vprintfmt+0x1f5>
f0130730:	83 fb 7e             	cmp    $0x7e,%ebx
f0130733:	7e 12                	jle    f0130747 <vprintfmt+0x207>
					putch('?', putdat);
f0130735:	83 ec 08             	sub    $0x8,%esp
f0130738:	ff 75 0c             	pushl  0xc(%ebp)
f013073b:	6a 3f                	push   $0x3f
f013073d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130740:	ff d0                	call   *%eax
f0130742:	83 c4 10             	add    $0x10,%esp
f0130745:	eb 0f                	jmp    f0130756 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0130747:	83 ec 08             	sub    $0x8,%esp
f013074a:	ff 75 0c             	pushl  0xc(%ebp)
f013074d:	53                   	push   %ebx
f013074e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130751:	ff d0                	call   *%eax
f0130753:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0130756:	ff 4d e4             	decl   -0x1c(%ebp)
f0130759:	89 f0                	mov    %esi,%eax
f013075b:	8d 70 01             	lea    0x1(%eax),%esi
f013075e:	8a 00                	mov    (%eax),%al
f0130760:	0f be d8             	movsbl %al,%ebx
f0130763:	85 db                	test   %ebx,%ebx
f0130765:	74 24                	je     f013078b <vprintfmt+0x24b>
f0130767:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013076b:	78 b8                	js     f0130725 <vprintfmt+0x1e5>
f013076d:	ff 4d e0             	decl   -0x20(%ebp)
f0130770:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130774:	79 af                	jns    f0130725 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130776:	eb 13                	jmp    f013078b <vprintfmt+0x24b>
				putch(' ', putdat);
f0130778:	83 ec 08             	sub    $0x8,%esp
f013077b:	ff 75 0c             	pushl  0xc(%ebp)
f013077e:	6a 20                	push   $0x20
f0130780:	8b 45 08             	mov    0x8(%ebp),%eax
f0130783:	ff d0                	call   *%eax
f0130785:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0130788:	ff 4d e4             	decl   -0x1c(%ebp)
f013078b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013078f:	7f e7                	jg     f0130778 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0130791:	e9 66 01 00 00       	jmp    f01308fc <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0130796:	83 ec 08             	sub    $0x8,%esp
f0130799:	ff 75 e8             	pushl  -0x18(%ebp)
f013079c:	8d 45 14             	lea    0x14(%ebp),%eax
f013079f:	50                   	push   %eax
f01307a0:	e8 3c fd ff ff       	call   f01304e1 <getint>
f01307a5:	83 c4 10             	add    $0x10,%esp
f01307a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01307ab:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01307ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307b4:	85 d2                	test   %edx,%edx
f01307b6:	79 23                	jns    f01307db <vprintfmt+0x29b>
				putch('-', putdat);
f01307b8:	83 ec 08             	sub    $0x8,%esp
f01307bb:	ff 75 0c             	pushl  0xc(%ebp)
f01307be:	6a 2d                	push   $0x2d
f01307c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01307c3:	ff d0                	call   *%eax
f01307c5:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01307c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01307ce:	f7 d8                	neg    %eax
f01307d0:	83 d2 00             	adc    $0x0,%edx
f01307d3:	f7 da                	neg    %edx
f01307d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01307d8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01307db:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01307e2:	e9 bc 00 00 00       	jmp    f01308a3 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01307e7:	83 ec 08             	sub    $0x8,%esp
f01307ea:	ff 75 e8             	pushl  -0x18(%ebp)
f01307ed:	8d 45 14             	lea    0x14(%ebp),%eax
f01307f0:	50                   	push   %eax
f01307f1:	e8 84 fc ff ff       	call   f013047a <getuint>
f01307f6:	83 c4 10             	add    $0x10,%esp
f01307f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01307fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f01307ff:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130806:	e9 98 00 00 00       	jmp    f01308a3 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f013080b:	83 ec 08             	sub    $0x8,%esp
f013080e:	ff 75 0c             	pushl  0xc(%ebp)
f0130811:	6a 58                	push   $0x58
f0130813:	8b 45 08             	mov    0x8(%ebp),%eax
f0130816:	ff d0                	call   *%eax
f0130818:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013081b:	83 ec 08             	sub    $0x8,%esp
f013081e:	ff 75 0c             	pushl  0xc(%ebp)
f0130821:	6a 58                	push   $0x58
f0130823:	8b 45 08             	mov    0x8(%ebp),%eax
f0130826:	ff d0                	call   *%eax
f0130828:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013082b:	83 ec 08             	sub    $0x8,%esp
f013082e:	ff 75 0c             	pushl  0xc(%ebp)
f0130831:	6a 58                	push   $0x58
f0130833:	8b 45 08             	mov    0x8(%ebp),%eax
f0130836:	ff d0                	call   *%eax
f0130838:	83 c4 10             	add    $0x10,%esp
			break;
f013083b:	e9 bc 00 00 00       	jmp    f01308fc <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0130840:	83 ec 08             	sub    $0x8,%esp
f0130843:	ff 75 0c             	pushl  0xc(%ebp)
f0130846:	6a 30                	push   $0x30
f0130848:	8b 45 08             	mov    0x8(%ebp),%eax
f013084b:	ff d0                	call   *%eax
f013084d:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0130850:	83 ec 08             	sub    $0x8,%esp
f0130853:	ff 75 0c             	pushl  0xc(%ebp)
f0130856:	6a 78                	push   $0x78
f0130858:	8b 45 08             	mov    0x8(%ebp),%eax
f013085b:	ff d0                	call   *%eax
f013085d:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0130860:	8b 45 14             	mov    0x14(%ebp),%eax
f0130863:	83 c0 04             	add    $0x4,%eax
f0130866:	89 45 14             	mov    %eax,0x14(%ebp)
f0130869:	8b 45 14             	mov    0x14(%ebp),%eax
f013086c:	83 e8 04             	sub    $0x4,%eax
f013086f:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0130871:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130874:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f013087b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0130882:	eb 1f                	jmp    f01308a3 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0130884:	83 ec 08             	sub    $0x8,%esp
f0130887:	ff 75 e8             	pushl  -0x18(%ebp)
f013088a:	8d 45 14             	lea    0x14(%ebp),%eax
f013088d:	50                   	push   %eax
f013088e:	e8 e7 fb ff ff       	call   f013047a <getuint>
f0130893:	83 c4 10             	add    $0x10,%esp
f0130896:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130899:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f013089c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01308a3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01308a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01308aa:	83 ec 04             	sub    $0x4,%esp
f01308ad:	52                   	push   %edx
f01308ae:	ff 75 e4             	pushl  -0x1c(%ebp)
f01308b1:	50                   	push   %eax
f01308b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01308b5:	ff 75 f0             	pushl  -0x10(%ebp)
f01308b8:	ff 75 0c             	pushl  0xc(%ebp)
f01308bb:	ff 75 08             	pushl  0x8(%ebp)
f01308be:	e8 00 fb ff ff       	call   f01303c3 <printnum>
f01308c3:	83 c4 20             	add    $0x20,%esp
			break;
f01308c6:	eb 34                	jmp    f01308fc <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01308c8:	83 ec 08             	sub    $0x8,%esp
f01308cb:	ff 75 0c             	pushl  0xc(%ebp)
f01308ce:	53                   	push   %ebx
f01308cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01308d2:	ff d0                	call   *%eax
f01308d4:	83 c4 10             	add    $0x10,%esp
			break;
f01308d7:	eb 23                	jmp    f01308fc <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01308d9:	83 ec 08             	sub    $0x8,%esp
f01308dc:	ff 75 0c             	pushl  0xc(%ebp)
f01308df:	6a 25                	push   $0x25
f01308e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01308e4:	ff d0                	call   *%eax
f01308e6:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f01308e9:	ff 4d 10             	decl   0x10(%ebp)
f01308ec:	eb 03                	jmp    f01308f1 <vprintfmt+0x3b1>
f01308ee:	ff 4d 10             	decl   0x10(%ebp)
f01308f1:	8b 45 10             	mov    0x10(%ebp),%eax
f01308f4:	48                   	dec    %eax
f01308f5:	8a 00                	mov    (%eax),%al
f01308f7:	3c 25                	cmp    $0x25,%al
f01308f9:	75 f3                	jne    f01308ee <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f01308fb:	90                   	nop
		}
	}
f01308fc:	e9 47 fc ff ff       	jmp    f0130548 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130901:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130902:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130905:	5b                   	pop    %ebx
f0130906:	5e                   	pop    %esi
f0130907:	5d                   	pop    %ebp
f0130908:	c3                   	ret    

f0130909 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130909:	55                   	push   %ebp
f013090a:	89 e5                	mov    %esp,%ebp
f013090c:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f013090f:	8d 45 10             	lea    0x10(%ebp),%eax
f0130912:	83 c0 04             	add    $0x4,%eax
f0130915:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130918:	8b 45 10             	mov    0x10(%ebp),%eax
f013091b:	ff 75 f4             	pushl  -0xc(%ebp)
f013091e:	50                   	push   %eax
f013091f:	ff 75 0c             	pushl  0xc(%ebp)
f0130922:	ff 75 08             	pushl  0x8(%ebp)
f0130925:	e8 16 fc ff ff       	call   f0130540 <vprintfmt>
f013092a:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f013092d:	90                   	nop
f013092e:	c9                   	leave  
f013092f:	c3                   	ret    

f0130930 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0130930:	55                   	push   %ebp
f0130931:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130933:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130936:	8b 40 08             	mov    0x8(%eax),%eax
f0130939:	8d 50 01             	lea    0x1(%eax),%edx
f013093c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013093f:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130942:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130945:	8b 10                	mov    (%eax),%edx
f0130947:	8b 45 0c             	mov    0xc(%ebp),%eax
f013094a:	8b 40 04             	mov    0x4(%eax),%eax
f013094d:	39 c2                	cmp    %eax,%edx
f013094f:	73 12                	jae    f0130963 <sprintputch+0x33>
		*b->buf++ = ch;
f0130951:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130954:	8b 00                	mov    (%eax),%eax
f0130956:	8d 48 01             	lea    0x1(%eax),%ecx
f0130959:	8b 55 0c             	mov    0xc(%ebp),%edx
f013095c:	89 0a                	mov    %ecx,(%edx)
f013095e:	8b 55 08             	mov    0x8(%ebp),%edx
f0130961:	88 10                	mov    %dl,(%eax)
}
f0130963:	90                   	nop
f0130964:	5d                   	pop    %ebp
f0130965:	c3                   	ret    

f0130966 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0130966:	55                   	push   %ebp
f0130967:	89 e5                	mov    %esp,%ebp
f0130969:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f013096c:	8b 45 08             	mov    0x8(%ebp),%eax
f013096f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130972:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130975:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130978:	8b 45 08             	mov    0x8(%ebp),%eax
f013097b:	01 d0                	add    %edx,%eax
f013097d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130980:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0130987:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013098b:	74 06                	je     f0130993 <vsnprintf+0x2d>
f013098d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130991:	7f 07                	jg     f013099a <vsnprintf+0x34>
		return -E_INVAL;
f0130993:	b8 03 00 00 00       	mov    $0x3,%eax
f0130998:	eb 20                	jmp    f01309ba <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f013099a:	ff 75 14             	pushl  0x14(%ebp)
f013099d:	ff 75 10             	pushl  0x10(%ebp)
f01309a0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01309a3:	50                   	push   %eax
f01309a4:	68 30 09 13 f0       	push   $0xf0130930
f01309a9:	e8 92 fb ff ff       	call   f0130540 <vprintfmt>
f01309ae:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01309b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01309b4:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01309b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01309ba:	c9                   	leave  
f01309bb:	c3                   	ret    

f01309bc <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01309bc:	55                   	push   %ebp
f01309bd:	89 e5                	mov    %esp,%ebp
f01309bf:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01309c2:	8d 45 10             	lea    0x10(%ebp),%eax
f01309c5:	83 c0 04             	add    $0x4,%eax
f01309c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01309cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01309ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01309d1:	50                   	push   %eax
f01309d2:	ff 75 0c             	pushl  0xc(%ebp)
f01309d5:	ff 75 08             	pushl  0x8(%ebp)
f01309d8:	e8 89 ff ff ff       	call   f0130966 <vsnprintf>
f01309dd:	83 c4 10             	add    $0x10,%esp
f01309e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01309e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01309e6:	c9                   	leave  
f01309e7:	c3                   	ret    

f01309e8 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01309e8:	55                   	push   %ebp
f01309e9:	89 e5                	mov    %esp,%ebp
f01309eb:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f01309ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01309f2:	74 13                	je     f0130a07 <readline+0x1f>
		cprintf("%s", prompt);
f01309f4:	83 ec 08             	sub    $0x8,%esp
f01309f7:	ff 75 08             	pushl  0x8(%ebp)
f01309fa:	68 30 ce 13 f0       	push   $0xf013ce30
f01309ff:	e8 7e 02 fd ff       	call   f0100c82 <cprintf>
f0130a04:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130a07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130a0e:	83 ec 0c             	sub    $0xc,%esp
f0130a11:	6a 00                	push   $0x0
f0130a13:	e8 17 02 fd ff       	call   f0100c2f <iscons>
f0130a18:	83 c4 10             	add    $0x10,%esp
f0130a1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130a1e:	e8 f3 01 fd ff       	call   f0100c16 <getchar>
f0130a23:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130a26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130a2a:	79 22                	jns    f0130a4e <readline+0x66>
			if (c != -E_EOF)
f0130a2c:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130a30:	0f 84 ad 00 00 00    	je     f0130ae3 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130a36:	83 ec 08             	sub    $0x8,%esp
f0130a39:	ff 75 ec             	pushl  -0x14(%ebp)
f0130a3c:	68 33 ce 13 f0       	push   $0xf013ce33
f0130a41:	e8 3c 02 fd ff       	call   f0100c82 <cprintf>
f0130a46:	83 c4 10             	add    $0x10,%esp
			return;
f0130a49:	e9 95 00 00 00       	jmp    f0130ae3 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130a4e:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130a52:	7e 34                	jle    f0130a88 <readline+0xa0>
f0130a54:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130a5b:	7f 2b                	jg     f0130a88 <readline+0xa0>
			if (echoing)
f0130a5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130a61:	74 0e                	je     f0130a71 <readline+0x89>
				cputchar(c);
f0130a63:	83 ec 0c             	sub    $0xc,%esp
f0130a66:	ff 75 ec             	pushl  -0x14(%ebp)
f0130a69:	e8 91 01 fd ff       	call   f0100bff <cputchar>
f0130a6e:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130a74:	8d 50 01             	lea    0x1(%eax),%edx
f0130a77:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130a7a:	89 c2                	mov    %eax,%edx
f0130a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a7f:	01 d0                	add    %edx,%eax
f0130a81:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130a84:	88 10                	mov    %dl,(%eax)
f0130a86:	eb 56                	jmp    f0130ade <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0130a88:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130a8c:	75 1f                	jne    f0130aad <readline+0xc5>
f0130a8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130a92:	7e 19                	jle    f0130aad <readline+0xc5>
			if (echoing)
f0130a94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130a98:	74 0e                	je     f0130aa8 <readline+0xc0>
				cputchar(c);
f0130a9a:	83 ec 0c             	sub    $0xc,%esp
f0130a9d:	ff 75 ec             	pushl  -0x14(%ebp)
f0130aa0:	e8 5a 01 fd ff       	call   f0100bff <cputchar>
f0130aa5:	83 c4 10             	add    $0x10,%esp

			i--;
f0130aa8:	ff 4d f4             	decl   -0xc(%ebp)
f0130aab:	eb 31                	jmp    f0130ade <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0130aad:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130ab1:	74 0a                	je     f0130abd <readline+0xd5>
f0130ab3:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130ab7:	0f 85 61 ff ff ff    	jne    f0130a1e <readline+0x36>
			if (echoing)
f0130abd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130ac1:	74 0e                	je     f0130ad1 <readline+0xe9>
				cputchar(c);
f0130ac3:	83 ec 0c             	sub    $0xc,%esp
f0130ac6:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ac9:	e8 31 01 fd ff       	call   f0100bff <cputchar>
f0130ace:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130ad1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ad7:	01 d0                	add    %edx,%eax
f0130ad9:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0130adc:	eb 06                	jmp    f0130ae4 <readline+0xfc>
		}
	}
f0130ade:	e9 3b ff ff ff       	jmp    f0130a1e <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130ae3:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130ae4:	c9                   	leave  
f0130ae5:	c3                   	ret    

f0130ae6 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130ae6:	55                   	push   %ebp
f0130ae7:	89 e5                	mov    %esp,%ebp
f0130ae9:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0130aec:	e8 4f bf fd ff       	call   f010ca40 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130af1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130af5:	74 13                	je     f0130b0a <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130af7:	83 ec 08             	sub    $0x8,%esp
f0130afa:	ff 75 08             	pushl  0x8(%ebp)
f0130afd:	68 30 ce 13 f0       	push   $0xf013ce30
f0130b02:	e8 7b 01 fd ff       	call   f0100c82 <cprintf>
f0130b07:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130b0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130b11:	83 ec 0c             	sub    $0xc,%esp
f0130b14:	6a 00                	push   $0x0
f0130b16:	e8 14 01 fd ff       	call   f0100c2f <iscons>
f0130b1b:	83 c4 10             	add    $0x10,%esp
f0130b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130b21:	e8 f0 00 fd ff       	call   f0100c16 <getchar>
f0130b26:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130b29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130b2d:	79 23                	jns    f0130b52 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0130b2f:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130b33:	74 13                	je     f0130b48 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130b35:	83 ec 08             	sub    $0x8,%esp
f0130b38:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b3b:	68 33 ce 13 f0       	push   $0xf013ce33
f0130b40:	e8 3d 01 fd ff       	call   f0100c82 <cprintf>
f0130b45:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130b48:	e8 0d bf fd ff       	call   f010ca5a <sys_enable_interrupt>
			return;
f0130b4d:	e9 9a 00 00 00       	jmp    f0130bec <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0130b52:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0130b56:	7e 34                	jle    f0130b8c <atomic_readline+0xa6>
f0130b58:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0130b5f:	7f 2b                	jg     f0130b8c <atomic_readline+0xa6>
			if (echoing)
f0130b61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b65:	74 0e                	je     f0130b75 <atomic_readline+0x8f>
				cputchar(c);
f0130b67:	83 ec 0c             	sub    $0xc,%esp
f0130b6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0130b6d:	e8 8d 00 fd ff       	call   f0100bff <cputchar>
f0130b72:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0130b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b78:	8d 50 01             	lea    0x1(%eax),%edx
f0130b7b:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0130b7e:	89 c2                	mov    %eax,%edx
f0130b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130b83:	01 d0                	add    %edx,%eax
f0130b85:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b88:	88 10                	mov    %dl,(%eax)
f0130b8a:	eb 5b                	jmp    f0130be7 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0130b8c:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0130b90:	75 1f                	jne    f0130bb1 <atomic_readline+0xcb>
f0130b92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130b96:	7e 19                	jle    f0130bb1 <atomic_readline+0xcb>
			if (echoing)
f0130b98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130b9c:	74 0e                	je     f0130bac <atomic_readline+0xc6>
				cputchar(c);
f0130b9e:	83 ec 0c             	sub    $0xc,%esp
f0130ba1:	ff 75 ec             	pushl  -0x14(%ebp)
f0130ba4:	e8 56 00 fd ff       	call   f0100bff <cputchar>
f0130ba9:	83 c4 10             	add    $0x10,%esp
			i--;
f0130bac:	ff 4d f4             	decl   -0xc(%ebp)
f0130baf:	eb 36                	jmp    f0130be7 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130bb1:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130bb5:	74 0a                	je     f0130bc1 <atomic_readline+0xdb>
f0130bb7:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130bbb:	0f 85 60 ff ff ff    	jne    f0130b21 <atomic_readline+0x3b>
			if (echoing)
f0130bc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130bc5:	74 0e                	je     f0130bd5 <atomic_readline+0xef>
				cputchar(c);
f0130bc7:	83 ec 0c             	sub    $0xc,%esp
f0130bca:	ff 75 ec             	pushl  -0x14(%ebp)
f0130bcd:	e8 2d 00 fd ff       	call   f0100bff <cputchar>
f0130bd2:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130bdb:	01 d0                	add    %edx,%eax
f0130bdd:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0130be0:	e8 75 be fd ff       	call   f010ca5a <sys_enable_interrupt>
			return;
f0130be5:	eb 05                	jmp    f0130bec <atomic_readline+0x106>
		}
	}
f0130be7:	e9 35 ff ff ff       	jmp    f0130b21 <atomic_readline+0x3b>
}
f0130bec:	c9                   	leave  
f0130bed:	c3                   	ret    

f0130bee <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0130bee:	55                   	push   %ebp
f0130bef:	89 e5                	mov    %esp,%ebp
f0130bf1:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130bf4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130bfb:	eb 06                	jmp    f0130c03 <strlen+0x15>
		n++;
f0130bfd:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0130c00:	ff 45 08             	incl   0x8(%ebp)
f0130c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c06:	8a 00                	mov    (%eax),%al
f0130c08:	84 c0                	test   %al,%al
f0130c0a:	75 f1                	jne    f0130bfd <strlen+0xf>
		n++;
	return n;
f0130c0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c0f:	c9                   	leave  
f0130c10:	c3                   	ret    

f0130c11 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130c11:	55                   	push   %ebp
f0130c12:	89 e5                	mov    %esp,%ebp
f0130c14:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130c17:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c1e:	eb 09                	jmp    f0130c29 <strnlen+0x18>
		n++;
f0130c20:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130c23:	ff 45 08             	incl   0x8(%ebp)
f0130c26:	ff 4d 0c             	decl   0xc(%ebp)
f0130c29:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130c2d:	74 09                	je     f0130c38 <strnlen+0x27>
f0130c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c32:	8a 00                	mov    (%eax),%al
f0130c34:	84 c0                	test   %al,%al
f0130c36:	75 e8                	jne    f0130c20 <strnlen+0xf>
		n++;
	return n;
f0130c38:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c3b:	c9                   	leave  
f0130c3c:	c3                   	ret    

f0130c3d <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0130c3d:	55                   	push   %ebp
f0130c3e:	89 e5                	mov    %esp,%ebp
f0130c40:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130c43:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c46:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130c49:	90                   	nop
f0130c4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c4d:	8d 50 01             	lea    0x1(%eax),%edx
f0130c50:	89 55 08             	mov    %edx,0x8(%ebp)
f0130c53:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130c56:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130c59:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130c5c:	8a 12                	mov    (%edx),%dl
f0130c5e:	88 10                	mov    %dl,(%eax)
f0130c60:	8a 00                	mov    (%eax),%al
f0130c62:	84 c0                	test   %al,%al
f0130c64:	75 e4                	jne    f0130c4a <strcpy+0xd>
		/* do nothing */;
	return ret;
f0130c66:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0130c69:	c9                   	leave  
f0130c6a:	c3                   	ret    

f0130c6b <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0130c6b:	55                   	push   %ebp
f0130c6c:	89 e5                	mov    %esp,%ebp
f0130c6e:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0130c71:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c74:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0130c77:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130c7e:	eb 1f                	jmp    f0130c9f <strncpy+0x34>
		*dst++ = *src;
f0130c80:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c83:	8d 50 01             	lea    0x1(%eax),%edx
f0130c86:	89 55 08             	mov    %edx,0x8(%ebp)
f0130c89:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130c8c:	8a 12                	mov    (%edx),%dl
f0130c8e:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0130c90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c93:	8a 00                	mov    (%eax),%al
f0130c95:	84 c0                	test   %al,%al
f0130c97:	74 03                	je     f0130c9c <strncpy+0x31>
			src++;
f0130c99:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0130c9c:	ff 45 fc             	incl   -0x4(%ebp)
f0130c9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ca2:	3b 45 10             	cmp    0x10(%ebp),%eax
f0130ca5:	72 d9                	jb     f0130c80 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0130ca7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0130caa:	c9                   	leave  
f0130cab:	c3                   	ret    

f0130cac <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0130cac:	55                   	push   %ebp
f0130cad:	89 e5                	mov    %esp,%ebp
f0130caf:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130cb8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130cbc:	74 30                	je     f0130cee <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0130cbe:	eb 16                	jmp    f0130cd6 <strlcpy+0x2a>
			*dst++ = *src++;
f0130cc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cc3:	8d 50 01             	lea    0x1(%eax),%edx
f0130cc6:	89 55 08             	mov    %edx,0x8(%ebp)
f0130cc9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130ccc:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130ccf:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130cd2:	8a 12                	mov    (%edx),%dl
f0130cd4:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130cd6:	ff 4d 10             	decl   0x10(%ebp)
f0130cd9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130cdd:	74 09                	je     f0130ce8 <strlcpy+0x3c>
f0130cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ce2:	8a 00                	mov    (%eax),%al
f0130ce4:	84 c0                	test   %al,%al
f0130ce6:	75 d8                	jne    f0130cc0 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130ce8:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ceb:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0130cee:	8b 55 08             	mov    0x8(%ebp),%edx
f0130cf1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130cf4:	29 c2                	sub    %eax,%edx
f0130cf6:	89 d0                	mov    %edx,%eax
}
f0130cf8:	c9                   	leave  
f0130cf9:	c3                   	ret    

f0130cfa <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130cfa:	55                   	push   %ebp
f0130cfb:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0130cfd:	eb 06                	jmp    f0130d05 <strcmp+0xb>
		p++, q++;
f0130cff:	ff 45 08             	incl   0x8(%ebp)
f0130d02:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130d05:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d08:	8a 00                	mov    (%eax),%al
f0130d0a:	84 c0                	test   %al,%al
f0130d0c:	74 0e                	je     f0130d1c <strcmp+0x22>
f0130d0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d11:	8a 10                	mov    (%eax),%dl
f0130d13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d16:	8a 00                	mov    (%eax),%al
f0130d18:	38 c2                	cmp    %al,%dl
f0130d1a:	74 e3                	je     f0130cff <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0130d1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d1f:	8a 00                	mov    (%eax),%al
f0130d21:	0f b6 d0             	movzbl %al,%edx
f0130d24:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d27:	8a 00                	mov    (%eax),%al
f0130d29:	0f b6 c0             	movzbl %al,%eax
f0130d2c:	29 c2                	sub    %eax,%edx
f0130d2e:	89 d0                	mov    %edx,%eax
}
f0130d30:	5d                   	pop    %ebp
f0130d31:	c3                   	ret    

f0130d32 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130d32:	55                   	push   %ebp
f0130d33:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130d35:	eb 09                	jmp    f0130d40 <strncmp+0xe>
		n--, p++, q++;
f0130d37:	ff 4d 10             	decl   0x10(%ebp)
f0130d3a:	ff 45 08             	incl   0x8(%ebp)
f0130d3d:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0130d40:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d44:	74 17                	je     f0130d5d <strncmp+0x2b>
f0130d46:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d49:	8a 00                	mov    (%eax),%al
f0130d4b:	84 c0                	test   %al,%al
f0130d4d:	74 0e                	je     f0130d5d <strncmp+0x2b>
f0130d4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d52:	8a 10                	mov    (%eax),%dl
f0130d54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d57:	8a 00                	mov    (%eax),%al
f0130d59:	38 c2                	cmp    %al,%dl
f0130d5b:	74 da                	je     f0130d37 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0130d5d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130d61:	75 07                	jne    f0130d6a <strncmp+0x38>
		return 0;
f0130d63:	b8 00 00 00 00       	mov    $0x0,%eax
f0130d68:	eb 14                	jmp    f0130d7e <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0130d6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d6d:	8a 00                	mov    (%eax),%al
f0130d6f:	0f b6 d0             	movzbl %al,%edx
f0130d72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d75:	8a 00                	mov    (%eax),%al
f0130d77:	0f b6 c0             	movzbl %al,%eax
f0130d7a:	29 c2                	sub    %eax,%edx
f0130d7c:	89 d0                	mov    %edx,%eax
}
f0130d7e:	5d                   	pop    %ebp
f0130d7f:	c3                   	ret    

f0130d80 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0130d80:	55                   	push   %ebp
f0130d81:	89 e5                	mov    %esp,%ebp
f0130d83:	83 ec 04             	sub    $0x4,%esp
f0130d86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130d89:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130d8c:	eb 12                	jmp    f0130da0 <strchr+0x20>
		if (*s == c)
f0130d8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d91:	8a 00                	mov    (%eax),%al
f0130d93:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130d96:	75 05                	jne    f0130d9d <strchr+0x1d>
			return (char *) s;
f0130d98:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d9b:	eb 11                	jmp    f0130dae <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0130d9d:	ff 45 08             	incl   0x8(%ebp)
f0130da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0130da3:	8a 00                	mov    (%eax),%al
f0130da5:	84 c0                	test   %al,%al
f0130da7:	75 e5                	jne    f0130d8e <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0130da9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130dae:	c9                   	leave  
f0130daf:	c3                   	ret    

f0130db0 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0130db0:	55                   	push   %ebp
f0130db1:	89 e5                	mov    %esp,%ebp
f0130db3:	83 ec 04             	sub    $0x4,%esp
f0130db6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130db9:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0130dbc:	eb 0d                	jmp    f0130dcb <strfind+0x1b>
		if (*s == c)
f0130dbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dc1:	8a 00                	mov    (%eax),%al
f0130dc3:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130dc6:	74 0e                	je     f0130dd6 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130dc8:	ff 45 08             	incl   0x8(%ebp)
f0130dcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130dce:	8a 00                	mov    (%eax),%al
f0130dd0:	84 c0                	test   %al,%al
f0130dd2:	75 ea                	jne    f0130dbe <strfind+0xe>
f0130dd4:	eb 01                	jmp    f0130dd7 <strfind+0x27>
		if (*s == c)
			break;
f0130dd6:	90                   	nop
	return (char *) s;
f0130dd7:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130dda:	c9                   	leave  
f0130ddb:	c3                   	ret    

f0130ddc <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0130ddc:	55                   	push   %ebp
f0130ddd:	89 e5                	mov    %esp,%ebp
f0130ddf:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130de2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130de5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130de8:	8b 45 10             	mov    0x10(%ebp),%eax
f0130deb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0130dee:	eb 0e                	jmp    f0130dfe <memset+0x22>
		*p++ = c;
f0130df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130df3:	8d 50 01             	lea    0x1(%eax),%edx
f0130df6:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130df9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0130dfc:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0130dfe:	ff 4d f8             	decl   -0x8(%ebp)
f0130e01:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130e05:	79 e9                	jns    f0130df0 <memset+0x14>
		*p++ = c;

	return v;
f0130e07:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130e0a:	c9                   	leave  
f0130e0b:	c3                   	ret    

f0130e0c <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0130e0c:	55                   	push   %ebp
f0130e0d:	89 e5                	mov    %esp,%ebp
f0130e0f:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e15:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130e18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e1b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0130e1e:	eb 16                	jmp    f0130e36 <memcpy+0x2a>
		*d++ = *s++;
f0130e20:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e23:	8d 50 01             	lea    0x1(%eax),%edx
f0130e26:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130e29:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e2c:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130e2f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130e32:	8a 12                	mov    (%edx),%dl
f0130e34:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130e36:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e39:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130e3c:	89 55 10             	mov    %edx,0x10(%ebp)
f0130e3f:	85 c0                	test   %eax,%eax
f0130e41:	75 dd                	jne    f0130e20 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130e43:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130e46:	c9                   	leave  
f0130e47:	c3                   	ret    

f0130e48 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130e48:	55                   	push   %ebp
f0130e49:	89 e5                	mov    %esp,%ebp
f0130e4b:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130e51:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130e54:	8b 45 08             	mov    0x8(%ebp),%eax
f0130e57:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0130e5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e5d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130e60:	73 50                	jae    f0130eb2 <memmove+0x6a>
f0130e62:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130e65:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e68:	01 d0                	add    %edx,%eax
f0130e6a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0130e6d:	76 43                	jbe    f0130eb2 <memmove+0x6a>
		s += n;
f0130e6f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e72:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0130e75:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e78:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0130e7b:	eb 10                	jmp    f0130e8d <memmove+0x45>
			*--d = *--s;
f0130e7d:	ff 4d f8             	decl   -0x8(%ebp)
f0130e80:	ff 4d fc             	decl   -0x4(%ebp)
f0130e83:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130e86:	8a 10                	mov    (%eax),%dl
f0130e88:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e8b:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0130e8d:	8b 45 10             	mov    0x10(%ebp),%eax
f0130e90:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130e93:	89 55 10             	mov    %edx,0x10(%ebp)
f0130e96:	85 c0                	test   %eax,%eax
f0130e98:	75 e3                	jne    f0130e7d <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0130e9a:	eb 23                	jmp    f0130ebf <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0130e9c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130e9f:	8d 50 01             	lea    0x1(%eax),%edx
f0130ea2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130ea5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130ea8:	8d 4a 01             	lea    0x1(%edx),%ecx
f0130eab:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130eae:	8a 12                	mov    (%edx),%dl
f0130eb0:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130eb2:	8b 45 10             	mov    0x10(%ebp),%eax
f0130eb5:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130eb8:	89 55 10             	mov    %edx,0x10(%ebp)
f0130ebb:	85 c0                	test   %eax,%eax
f0130ebd:	75 dd                	jne    f0130e9c <memmove+0x54>
			*d++ = *s++;

	return dst;
f0130ebf:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130ec2:	c9                   	leave  
f0130ec3:	c3                   	ret    

f0130ec4 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130ec4:	55                   	push   %ebp
f0130ec5:	89 e5                	mov    %esp,%ebp
f0130ec7:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130eca:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ecd:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0130ed0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130ed3:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130ed6:	eb 2a                	jmp    f0130f02 <memcmp+0x3e>
		if (*s1 != *s2)
f0130ed8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130edb:	8a 10                	mov    (%eax),%dl
f0130edd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130ee0:	8a 00                	mov    (%eax),%al
f0130ee2:	38 c2                	cmp    %al,%dl
f0130ee4:	74 16                	je     f0130efc <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ee9:	8a 00                	mov    (%eax),%al
f0130eeb:	0f b6 d0             	movzbl %al,%edx
f0130eee:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130ef1:	8a 00                	mov    (%eax),%al
f0130ef3:	0f b6 c0             	movzbl %al,%eax
f0130ef6:	29 c2                	sub    %eax,%edx
f0130ef8:	89 d0                	mov    %edx,%eax
f0130efa:	eb 18                	jmp    f0130f14 <memcmp+0x50>
		s1++, s2++;
f0130efc:	ff 45 fc             	incl   -0x4(%ebp)
f0130eff:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130f02:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f05:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130f08:	89 55 10             	mov    %edx,0x10(%ebp)
f0130f0b:	85 c0                	test   %eax,%eax
f0130f0d:	75 c9                	jne    f0130ed8 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0130f0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130f14:	c9                   	leave  
f0130f15:	c3                   	ret    

f0130f16 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130f16:	55                   	push   %ebp
f0130f17:	89 e5                	mov    %esp,%ebp
f0130f19:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0130f1c:	8b 55 08             	mov    0x8(%ebp),%edx
f0130f1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0130f22:	01 d0                	add    %edx,%eax
f0130f24:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130f27:	eb 15                	jmp    f0130f3e <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f2c:	8a 00                	mov    (%eax),%al
f0130f2e:	0f b6 d0             	movzbl %al,%edx
f0130f31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130f34:	0f b6 c0             	movzbl %al,%eax
f0130f37:	39 c2                	cmp    %eax,%edx
f0130f39:	74 0d                	je     f0130f48 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0130f3b:	ff 45 08             	incl   0x8(%ebp)
f0130f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f41:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130f44:	72 e3                	jb     f0130f29 <memfind+0x13>
f0130f46:	eb 01                	jmp    f0130f49 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130f48:	90                   	nop
	return (void *) s;
f0130f49:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130f4c:	c9                   	leave  
f0130f4d:	c3                   	ret    

f0130f4e <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0130f4e:	55                   	push   %ebp
f0130f4f:	89 e5                	mov    %esp,%ebp
f0130f51:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0130f54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0130f5b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130f62:	eb 03                	jmp    f0130f67 <strtol+0x19>
		s++;
f0130f64:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0130f67:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f6a:	8a 00                	mov    (%eax),%al
f0130f6c:	3c 20                	cmp    $0x20,%al
f0130f6e:	74 f4                	je     f0130f64 <strtol+0x16>
f0130f70:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f73:	8a 00                	mov    (%eax),%al
f0130f75:	3c 09                	cmp    $0x9,%al
f0130f77:	74 eb                	je     f0130f64 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0130f79:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f7c:	8a 00                	mov    (%eax),%al
f0130f7e:	3c 2b                	cmp    $0x2b,%al
f0130f80:	75 05                	jne    f0130f87 <strtol+0x39>
		s++;
f0130f82:	ff 45 08             	incl   0x8(%ebp)
f0130f85:	eb 13                	jmp    f0130f9a <strtol+0x4c>
	else if (*s == '-')
f0130f87:	8b 45 08             	mov    0x8(%ebp),%eax
f0130f8a:	8a 00                	mov    (%eax),%al
f0130f8c:	3c 2d                	cmp    $0x2d,%al
f0130f8e:	75 0a                	jne    f0130f9a <strtol+0x4c>
		s++, neg = 1;
f0130f90:	ff 45 08             	incl   0x8(%ebp)
f0130f93:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0130f9a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130f9e:	74 06                	je     f0130fa6 <strtol+0x58>
f0130fa0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0130fa4:	75 20                	jne    f0130fc6 <strtol+0x78>
f0130fa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fa9:	8a 00                	mov    (%eax),%al
f0130fab:	3c 30                	cmp    $0x30,%al
f0130fad:	75 17                	jne    f0130fc6 <strtol+0x78>
f0130faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fb2:	40                   	inc    %eax
f0130fb3:	8a 00                	mov    (%eax),%al
f0130fb5:	3c 78                	cmp    $0x78,%al
f0130fb7:	75 0d                	jne    f0130fc6 <strtol+0x78>
		s += 2, base = 16;
f0130fb9:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0130fbd:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0130fc4:	eb 28                	jmp    f0130fee <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0130fc6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fca:	75 15                	jne    f0130fe1 <strtol+0x93>
f0130fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0130fcf:	8a 00                	mov    (%eax),%al
f0130fd1:	3c 30                	cmp    $0x30,%al
f0130fd3:	75 0c                	jne    f0130fe1 <strtol+0x93>
		s++, base = 8;
f0130fd5:	ff 45 08             	incl   0x8(%ebp)
f0130fd8:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0130fdf:	eb 0d                	jmp    f0130fee <strtol+0xa0>
	else if (base == 0)
f0130fe1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130fe5:	75 07                	jne    f0130fee <strtol+0xa0>
		base = 10;
f0130fe7:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0130fee:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ff1:	8a 00                	mov    (%eax),%al
f0130ff3:	3c 2f                	cmp    $0x2f,%al
f0130ff5:	7e 19                	jle    f0131010 <strtol+0xc2>
f0130ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ffa:	8a 00                	mov    (%eax),%al
f0130ffc:	3c 39                	cmp    $0x39,%al
f0130ffe:	7f 10                	jg     f0131010 <strtol+0xc2>
			dig = *s - '0';
f0131000:	8b 45 08             	mov    0x8(%ebp),%eax
f0131003:	8a 00                	mov    (%eax),%al
f0131005:	0f be c0             	movsbl %al,%eax
f0131008:	83 e8 30             	sub    $0x30,%eax
f013100b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013100e:	eb 42                	jmp    f0131052 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131010:	8b 45 08             	mov    0x8(%ebp),%eax
f0131013:	8a 00                	mov    (%eax),%al
f0131015:	3c 60                	cmp    $0x60,%al
f0131017:	7e 19                	jle    f0131032 <strtol+0xe4>
f0131019:	8b 45 08             	mov    0x8(%ebp),%eax
f013101c:	8a 00                	mov    (%eax),%al
f013101e:	3c 7a                	cmp    $0x7a,%al
f0131020:	7f 10                	jg     f0131032 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131022:	8b 45 08             	mov    0x8(%ebp),%eax
f0131025:	8a 00                	mov    (%eax),%al
f0131027:	0f be c0             	movsbl %al,%eax
f013102a:	83 e8 57             	sub    $0x57,%eax
f013102d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131030:	eb 20                	jmp    f0131052 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131032:	8b 45 08             	mov    0x8(%ebp),%eax
f0131035:	8a 00                	mov    (%eax),%al
f0131037:	3c 40                	cmp    $0x40,%al
f0131039:	7e 39                	jle    f0131074 <strtol+0x126>
f013103b:	8b 45 08             	mov    0x8(%ebp),%eax
f013103e:	8a 00                	mov    (%eax),%al
f0131040:	3c 5a                	cmp    $0x5a,%al
f0131042:	7f 30                	jg     f0131074 <strtol+0x126>
			dig = *s - 'A' + 10;
f0131044:	8b 45 08             	mov    0x8(%ebp),%eax
f0131047:	8a 00                	mov    (%eax),%al
f0131049:	0f be c0             	movsbl %al,%eax
f013104c:	83 e8 37             	sub    $0x37,%eax
f013104f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131052:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131055:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131058:	7d 19                	jge    f0131073 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f013105a:	ff 45 08             	incl   0x8(%ebp)
f013105d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131060:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131064:	89 c2                	mov    %eax,%edx
f0131066:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131069:	01 d0                	add    %edx,%eax
f013106b:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f013106e:	e9 7b ff ff ff       	jmp    f0130fee <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131073:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131074:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131078:	74 08                	je     f0131082 <strtol+0x134>
		*endptr = (char *) s;
f013107a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013107d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131080:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131082:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131086:	74 07                	je     f013108f <strtol+0x141>
f0131088:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013108b:	f7 d8                	neg    %eax
f013108d:	eb 03                	jmp    f0131092 <strtol+0x144>
f013108f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131092:	c9                   	leave  
f0131093:	c3                   	ret    

f0131094 <ltostr>:

void
ltostr(long value, char *str)
{
f0131094:	55                   	push   %ebp
f0131095:	89 e5                	mov    %esp,%ebp
f0131097:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f013109a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01310a1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01310a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01310ac:	79 13                	jns    f01310c1 <ltostr+0x2d>
	{
		neg = 1;
f01310ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01310b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310b8:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f01310bb:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f01310be:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f01310c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01310c4:	b9 0a 00 00 00       	mov    $0xa,%ecx
f01310c9:	99                   	cltd   
f01310ca:	f7 f9                	idiv   %ecx
f01310cc:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f01310cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01310d2:	8d 50 01             	lea    0x1(%eax),%edx
f01310d5:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01310d8:	89 c2                	mov    %eax,%edx
f01310da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01310dd:	01 d0                	add    %edx,%eax
f01310df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01310e2:	83 c2 30             	add    $0x30,%edx
f01310e5:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f01310e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01310ea:	b8 67 66 66 66       	mov    $0x66666667,%eax
f01310ef:	f7 e9                	imul   %ecx
f01310f1:	c1 fa 02             	sar    $0x2,%edx
f01310f4:	89 c8                	mov    %ecx,%eax
f01310f6:	c1 f8 1f             	sar    $0x1f,%eax
f01310f9:	29 c2                	sub    %eax,%edx
f01310fb:	89 d0                	mov    %edx,%eax
f01310fd:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131100:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131103:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131108:	f7 e9                	imul   %ecx
f013110a:	c1 fa 02             	sar    $0x2,%edx
f013110d:	89 c8                	mov    %ecx,%eax
f013110f:	c1 f8 1f             	sar    $0x1f,%eax
f0131112:	29 c2                	sub    %eax,%edx
f0131114:	89 d0                	mov    %edx,%eax
f0131116:	c1 e0 02             	shl    $0x2,%eax
f0131119:	01 d0                	add    %edx,%eax
f013111b:	01 c0                	add    %eax,%eax
f013111d:	29 c1                	sub    %eax,%ecx
f013111f:	89 ca                	mov    %ecx,%edx
f0131121:	85 d2                	test   %edx,%edx
f0131123:	75 9c                	jne    f01310c1 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f013112c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013112f:	48                   	dec    %eax
f0131130:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131133:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131137:	74 3d                	je     f0131176 <ltostr+0xe2>
		start = 1 ;
f0131139:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131140:	eb 34                	jmp    f0131176 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131145:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131148:	01 d0                	add    %edx,%eax
f013114a:	8a 00                	mov    (%eax),%al
f013114c:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f013114f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131152:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131155:	01 c2                	add    %eax,%edx
f0131157:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f013115a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013115d:	01 c8                	add    %ecx,%eax
f013115f:	8a 00                	mov    (%eax),%al
f0131161:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131163:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131169:	01 c2                	add    %eax,%edx
f013116b:	8a 45 eb             	mov    -0x15(%ebp),%al
f013116e:	88 02                	mov    %al,(%edx)
		start++ ;
f0131170:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131173:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131179:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013117c:	7c c4                	jl     f0131142 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f013117e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131181:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131184:	01 d0                	add    %edx,%eax
f0131186:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131189:	90                   	nop
f013118a:	c9                   	leave  
f013118b:	c3                   	ret    

f013118c <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f013118c:	55                   	push   %ebp
f013118d:	89 e5                	mov    %esp,%ebp
f013118f:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131192:	ff 75 08             	pushl  0x8(%ebp)
f0131195:	e8 54 fa ff ff       	call   f0130bee <strlen>
f013119a:	83 c4 04             	add    $0x4,%esp
f013119d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01311a0:	ff 75 0c             	pushl  0xc(%ebp)
f01311a3:	e8 46 fa ff ff       	call   f0130bee <strlen>
f01311a8:	83 c4 04             	add    $0x4,%esp
f01311ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01311ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01311b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01311bc:	eb 17                	jmp    f01311d5 <strcconcat+0x49>
		final[s] = str1[s] ;
f01311be:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01311c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01311c4:	01 c2                	add    %eax,%edx
f01311c6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01311c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01311cc:	01 c8                	add    %ecx,%eax
f01311ce:	8a 00                	mov    (%eax),%al
f01311d0:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01311d2:	ff 45 fc             	incl   -0x4(%ebp)
f01311d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311d8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01311db:	7c e1                	jl     f01311be <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f01311dd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f01311e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f01311eb:	eb 1f                	jmp    f013120c <strcconcat+0x80>
		final[s++] = str2[i] ;
f01311ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01311f0:	8d 50 01             	lea    0x1(%eax),%edx
f01311f3:	89 55 fc             	mov    %edx,-0x4(%ebp)
f01311f6:	89 c2                	mov    %eax,%edx
f01311f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01311fb:	01 c2                	add    %eax,%edx
f01311fd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0131200:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131203:	01 c8                	add    %ecx,%eax
f0131205:	8a 00                	mov    (%eax),%al
f0131207:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0131209:	ff 45 f8             	incl   -0x8(%ebp)
f013120c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013120f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131212:	7c d9                	jl     f01311ed <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0131214:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131217:	8b 45 10             	mov    0x10(%ebp),%eax
f013121a:	01 d0                	add    %edx,%eax
f013121c:	c6 00 00             	movb   $0x0,(%eax)
}
f013121f:	90                   	nop
f0131220:	c9                   	leave  
f0131221:	c3                   	ret    

f0131222 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0131222:	55                   	push   %ebp
f0131223:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0131225:	8b 45 14             	mov    0x14(%ebp),%eax
f0131228:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f013122e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131231:	8b 00                	mov    (%eax),%eax
f0131233:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013123a:	8b 45 10             	mov    0x10(%ebp),%eax
f013123d:	01 d0                	add    %edx,%eax
f013123f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131245:	eb 0c                	jmp    f0131253 <strsplit+0x31>
			*string++ = 0;
f0131247:	8b 45 08             	mov    0x8(%ebp),%eax
f013124a:	8d 50 01             	lea    0x1(%eax),%edx
f013124d:	89 55 08             	mov    %edx,0x8(%ebp)
f0131250:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0131253:	8b 45 08             	mov    0x8(%ebp),%eax
f0131256:	8a 00                	mov    (%eax),%al
f0131258:	84 c0                	test   %al,%al
f013125a:	74 18                	je     f0131274 <strsplit+0x52>
f013125c:	8b 45 08             	mov    0x8(%ebp),%eax
f013125f:	8a 00                	mov    (%eax),%al
f0131261:	0f be c0             	movsbl %al,%eax
f0131264:	50                   	push   %eax
f0131265:	ff 75 0c             	pushl  0xc(%ebp)
f0131268:	e8 13 fb ff ff       	call   f0130d80 <strchr>
f013126d:	83 c4 08             	add    $0x8,%esp
f0131270:	85 c0                	test   %eax,%eax
f0131272:	75 d3                	jne    f0131247 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0131274:	8b 45 08             	mov    0x8(%ebp),%eax
f0131277:	8a 00                	mov    (%eax),%al
f0131279:	84 c0                	test   %al,%al
f013127b:	74 5a                	je     f01312d7 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f013127d:	8b 45 14             	mov    0x14(%ebp),%eax
f0131280:	8b 00                	mov    (%eax),%eax
f0131282:	83 f8 0f             	cmp    $0xf,%eax
f0131285:	75 07                	jne    f013128e <strsplit+0x6c>
		{
			return 0;
f0131287:	b8 00 00 00 00       	mov    $0x0,%eax
f013128c:	eb 66                	jmp    f01312f4 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f013128e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131291:	8b 00                	mov    (%eax),%eax
f0131293:	8d 48 01             	lea    0x1(%eax),%ecx
f0131296:	8b 55 14             	mov    0x14(%ebp),%edx
f0131299:	89 0a                	mov    %ecx,(%edx)
f013129b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01312a2:	8b 45 10             	mov    0x10(%ebp),%eax
f01312a5:	01 c2                	add    %eax,%edx
f01312a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312aa:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01312ac:	eb 03                	jmp    f01312b1 <strsplit+0x8f>
			string++;
f01312ae:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01312b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01312b4:	8a 00                	mov    (%eax),%al
f01312b6:	84 c0                	test   %al,%al
f01312b8:	74 8b                	je     f0131245 <strsplit+0x23>
f01312ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01312bd:	8a 00                	mov    (%eax),%al
f01312bf:	0f be c0             	movsbl %al,%eax
f01312c2:	50                   	push   %eax
f01312c3:	ff 75 0c             	pushl  0xc(%ebp)
f01312c6:	e8 b5 fa ff ff       	call   f0130d80 <strchr>
f01312cb:	83 c4 08             	add    $0x8,%esp
f01312ce:	85 c0                	test   %eax,%eax
f01312d0:	74 dc                	je     f01312ae <strsplit+0x8c>
			string++;
	}
f01312d2:	e9 6e ff ff ff       	jmp    f0131245 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01312d7:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01312d8:	8b 45 14             	mov    0x14(%ebp),%eax
f01312db:	8b 00                	mov    (%eax),%eax
f01312dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01312e4:	8b 45 10             	mov    0x10(%ebp),%eax
f01312e7:	01 d0                	add    %edx,%eax
f01312e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f01312ef:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01312f4:	c9                   	leave  
f01312f5:	c3                   	ret    

f01312f6 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f01312f6:	55                   	push   %ebp
f01312f7:	89 e5                	mov    %esp,%ebp
f01312f9:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f01312fc:	90                   	nop
f01312fd:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0131304:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131307:	89 c2                	mov    %eax,%edx
f0131309:	ec                   	in     (%dx),%al
f013130a:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f013130d:	8a 45 f7             	mov    -0x9(%ebp),%al
f0131310:	0f b6 c0             	movzbl %al,%eax
f0131313:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131316:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131319:	25 c0 00 00 00       	and    $0xc0,%eax
f013131e:	83 f8 40             	cmp    $0x40,%eax
f0131321:	75 da                	jne    f01312fd <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0131323:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131327:	74 11                	je     f013133a <ide_wait_ready+0x44>
f0131329:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013132c:	83 e0 21             	and    $0x21,%eax
f013132f:	85 c0                	test   %eax,%eax
f0131331:	74 07                	je     f013133a <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0131333:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0131338:	eb 05                	jmp    f013133f <ide_wait_ready+0x49>
	}
	return 0;
f013133a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013133f:	c9                   	leave  
f0131340:	c3                   	ret    

f0131341 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0131341:	55                   	push   %ebp
f0131342:	89 e5                	mov    %esp,%ebp
f0131344:	57                   	push   %edi
f0131345:	53                   	push   %ebx
f0131346:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0131349:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131350:	76 16                	jbe    f0131368 <ide_read+0x27>
f0131352:	68 43 ce 13 f0       	push   $0xf013ce43
f0131357:	68 50 ce 13 f0       	push   $0xf013ce50
f013135c:	6a 25                	push   $0x25
f013135e:	68 65 ce 13 f0       	push   $0xf013ce65
f0131363:	e8 93 ee fc ff       	call   f01001fb <_panic>

	ide_wait_ready(0);
f0131368:	83 ec 0c             	sub    $0xc,%esp
f013136b:	6a 00                	push   $0x0
f013136d:	e8 84 ff ff ff       	call   f01312f6 <ide_wait_ready>
f0131372:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0131375:	8b 45 10             	mov    0x10(%ebp),%eax
f0131378:	0f b6 c0             	movzbl %al,%eax
f013137b:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0131382:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0131385:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0131388:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013138b:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f013138c:	8b 45 08             	mov    0x8(%ebp),%eax
f013138f:	0f b6 c0             	movzbl %al,%eax
f0131392:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0131399:	88 45 d3             	mov    %al,-0x2d(%ebp)
f013139c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f013139f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01313a2:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01313a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01313a6:	c1 e8 08             	shr    $0x8,%eax
f01313a9:	0f b6 c0             	movzbl %al,%eax
f01313ac:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01313b3:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01313b6:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01313b9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01313bc:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01313bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01313c0:	c1 e8 10             	shr    $0x10,%eax
f01313c3:	0f b6 c0             	movzbl %al,%eax
f01313c6:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01313cd:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01313d0:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01313d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01313d6:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01313d7:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f01313dc:	83 e0 01             	and    $0x1,%eax
f01313df:	c1 e0 04             	shl    $0x4,%eax
f01313e2:	88 c2                	mov    %al,%dl
f01313e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01313e7:	c1 e8 18             	shr    $0x18,%eax
f01313ea:	83 e0 0f             	and    $0xf,%eax
f01313ed:	09 d0                	or     %edx,%eax
f01313ef:	83 c8 e0             	or     $0xffffffe0,%eax
f01313f2:	0f b6 c0             	movzbl %al,%eax
f01313f5:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01313fc:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01313ff:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131402:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131405:	ee                   	out    %al,(%dx)
f0131406:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013140d:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0131411:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131414:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131417:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131418:	eb 55                	jmp    f013146f <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013141a:	83 ec 0c             	sub    $0xc,%esp
f013141d:	6a 01                	push   $0x1
f013141f:	e8 d2 fe ff ff       	call   f01312f6 <ide_wait_ready>
f0131424:	83 c4 10             	add    $0x10,%esp
f0131427:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013142a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013142e:	79 05                	jns    f0131435 <ide_read+0xf4>
			return r;
f0131430:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131433:	eb 45                	jmp    f013147a <ide_read+0x139>
f0131435:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013143c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013143f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131442:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0131449:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013144c:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013144f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131452:	89 cb                	mov    %ecx,%ebx
f0131454:	89 df                	mov    %ebx,%edi
f0131456:	89 c1                	mov    %eax,%ecx
f0131458:	fc                   	cld    
f0131459:	f2 6d                	repnz insl (%dx),%es:(%edi)
f013145b:	89 c8                	mov    %ecx,%eax
f013145d:	89 fb                	mov    %edi,%ebx
f013145f:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0131462:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0131465:	ff 4d 10             	decl   0x10(%ebp)
f0131468:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f013146f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131473:	75 a5                	jne    f013141a <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0131475:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013147a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013147d:	5b                   	pop    %ebx
f013147e:	5f                   	pop    %edi
f013147f:	5d                   	pop    %ebp
f0131480:	c3                   	ret    

f0131481 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0131481:	55                   	push   %ebp
f0131482:	89 e5                	mov    %esp,%ebp
f0131484:	56                   	push   %esi
f0131485:	53                   	push   %ebx
f0131486:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0131489:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0131490:	76 16                	jbe    f01314a8 <ide_write+0x27>
f0131492:	68 43 ce 13 f0       	push   $0xf013ce43
f0131497:	68 50 ce 13 f0       	push   $0xf013ce50
f013149c:	6a 3e                	push   $0x3e
f013149e:	68 65 ce 13 f0       	push   $0xf013ce65
f01314a3:	e8 53 ed fc ff       	call   f01001fb <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01314a8:	83 ec 0c             	sub    $0xc,%esp
f01314ab:	6a 00                	push   $0x0
f01314ad:	e8 44 fe ff ff       	call   f01312f6 <ide_wait_ready>
f01314b2:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01314b5:	8b 45 10             	mov    0x10(%ebp),%eax
f01314b8:	0f b6 c0             	movzbl %al,%eax
f01314bb:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01314c2:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01314c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01314c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01314cb:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01314cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01314cf:	0f b6 c0             	movzbl %al,%eax
f01314d2:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01314d9:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01314dc:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01314df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01314e2:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01314e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01314e6:	c1 e8 08             	shr    $0x8,%eax
f01314e9:	0f b6 c0             	movzbl %al,%eax
f01314ec:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01314f3:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01314f6:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01314f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01314fc:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01314fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131500:	c1 e8 10             	shr    $0x10,%eax
f0131503:	0f b6 c0             	movzbl %al,%eax
f0131506:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f013150d:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0131510:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0131513:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131516:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0131517:	a1 ac 7a 65 f0       	mov    0xf0657aac,%eax
f013151c:	83 e0 01             	and    $0x1,%eax
f013151f:	c1 e0 04             	shl    $0x4,%eax
f0131522:	88 c2                	mov    %al,%dl
f0131524:	8b 45 08             	mov    0x8(%ebp),%eax
f0131527:	c1 e8 18             	shr    $0x18,%eax
f013152a:	83 e0 0f             	and    $0xf,%eax
f013152d:	09 d0                	or     %edx,%eax
f013152f:	83 c8 e0             	or     $0xffffffe0,%eax
f0131532:	0f b6 c0             	movzbl %al,%eax
f0131535:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f013153c:	88 45 d6             	mov    %al,-0x2a(%ebp)
f013153f:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0131542:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131545:	ee                   	out    %al,(%dx)
f0131546:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f013154d:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0131551:	8a 45 d7             	mov    -0x29(%ebp),%al
f0131554:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0131557:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0131558:	eb 55                	jmp    f01315af <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f013155a:	83 ec 0c             	sub    $0xc,%esp
f013155d:	6a 01                	push   $0x1
f013155f:	e8 92 fd ff ff       	call   f01312f6 <ide_wait_ready>
f0131564:	83 c4 10             	add    $0x10,%esp
f0131567:	89 45 dc             	mov    %eax,-0x24(%ebp)
f013156a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f013156e:	79 05                	jns    f0131575 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0131570:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0131573:	eb 45                	jmp    f01315ba <ide_write+0x139>
f0131575:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f013157c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013157f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0131582:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0131589:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013158c:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f013158f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0131592:	89 cb                	mov    %ecx,%ebx
f0131594:	89 de                	mov    %ebx,%esi
f0131596:	89 c1                	mov    %eax,%ecx
f0131598:	fc                   	cld    
f0131599:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f013159b:	89 c8                	mov    %ecx,%eax
f013159d:	89 f3                	mov    %esi,%ebx
f013159f:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01315a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01315a5:	ff 4d 10             	decl   0x10(%ebp)
f01315a8:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01315af:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01315b3:	75 a5                	jne    f013155a <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01315b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01315ba:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01315bd:	5b                   	pop    %ebx
f01315be:	5e                   	pop    %esi
f01315bf:	5d                   	pop    %ebp
f01315c0:	c3                   	ret    

f01315c1 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01315c1:	55                   	push   %ebp
f01315c2:	89 e5                	mov    %esp,%ebp
f01315c4:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01315c7:	83 ec 0c             	sub    $0xc,%esp
f01315ca:	68 70 ce 13 f0       	push   $0xf013ce70
f01315cf:	e8 ae f6 fc ff       	call   f0100c82 <cprintf>
f01315d4:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01315d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01315de:	83 ec 0c             	sub    $0xc,%esp
f01315e1:	68 9c ce 13 f0       	push   $0xf013ce9c
f01315e6:	e8 97 f6 fc ff       	call   f0100c82 <cprintf>
f01315eb:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f01315ee:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01315f2:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01315f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01315fa:	eb 56                	jmp    f0131652 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01315fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131600:	74 1c                	je     f013161e <print_mem_block_lists+0x5d>
f0131602:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131605:	8b 50 08             	mov    0x8(%eax),%edx
f0131608:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013160b:	8b 48 08             	mov    0x8(%eax),%ecx
f013160e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131611:	8b 40 0c             	mov    0xc(%eax),%eax
f0131614:	01 c8                	add    %ecx,%eax
f0131616:	39 c2                	cmp    %eax,%edx
f0131618:	73 04                	jae    f013161e <print_mem_block_lists+0x5d>
			sorted = 0 ;
f013161a:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f013161e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131621:	8b 50 08             	mov    0x8(%eax),%edx
f0131624:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131627:	8b 40 0c             	mov    0xc(%eax),%eax
f013162a:	01 c2                	add    %eax,%edx
f013162c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013162f:	8b 40 08             	mov    0x8(%eax),%eax
f0131632:	83 ec 04             	sub    $0x4,%esp
f0131635:	52                   	push   %edx
f0131636:	50                   	push   %eax
f0131637:	68 b1 ce 13 f0       	push   $0xf013ceb1
f013163c:	e8 41 f6 fc ff       	call   f0100c82 <cprintf>
f0131641:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0131644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131647:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013164a:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013164f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131656:	74 07                	je     f013165f <print_mem_block_lists+0x9e>
f0131658:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013165b:	8b 00                	mov    (%eax),%eax
f013165d:	eb 05                	jmp    f0131664 <print_mem_block_lists+0xa3>
f013165f:	b8 00 00 00 00       	mov    $0x0,%eax
f0131664:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131669:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013166e:	85 c0                	test   %eax,%eax
f0131670:	75 8a                	jne    f01315fc <print_mem_block_lists+0x3b>
f0131672:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131676:	75 84                	jne    f01315fc <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0131678:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013167c:	75 10                	jne    f013168e <print_mem_block_lists+0xcd>
f013167e:	83 ec 0c             	sub    $0xc,%esp
f0131681:	68 c0 ce 13 f0       	push   $0xf013cec0
f0131686:	e8 f7 f5 fc ff       	call   f0100c82 <cprintf>
f013168b:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f013168e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0131695:	83 ec 0c             	sub    $0xc,%esp
f0131698:	68 e4 ce 13 f0       	push   $0xf013cee4
f013169d:	e8 e0 f5 fc ff       	call   f0100c82 <cprintf>
f01316a2:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01316a5:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01316a9:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f01316ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01316b1:	eb 56                	jmp    f0131709 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01316b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01316b7:	74 1c                	je     f01316d5 <print_mem_block_lists+0x114>
f01316b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316bc:	8b 50 08             	mov    0x8(%eax),%edx
f01316bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316c2:	8b 48 08             	mov    0x8(%eax),%ecx
f01316c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01316c8:	8b 40 0c             	mov    0xc(%eax),%eax
f01316cb:	01 c8                	add    %ecx,%eax
f01316cd:	39 c2                	cmp    %eax,%edx
f01316cf:	73 04                	jae    f01316d5 <print_mem_block_lists+0x114>
			sorted = 0 ;
f01316d1:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01316d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316d8:	8b 50 08             	mov    0x8(%eax),%edx
f01316db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316de:	8b 40 0c             	mov    0xc(%eax),%eax
f01316e1:	01 c2                	add    %eax,%edx
f01316e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e6:	8b 40 08             	mov    0x8(%eax),%eax
f01316e9:	83 ec 04             	sub    $0x4,%esp
f01316ec:	52                   	push   %edx
f01316ed:	50                   	push   %eax
f01316ee:	68 b1 ce 13 f0       	push   $0xf013ceb1
f01316f3:	e8 8a f5 fc ff       	call   f0100c82 <cprintf>
f01316f8:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01316fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0131701:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131706:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131709:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013170d:	74 07                	je     f0131716 <print_mem_block_lists+0x155>
f013170f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131712:	8b 00                	mov    (%eax),%eax
f0131714:	eb 05                	jmp    f013171b <print_mem_block_lists+0x15a>
f0131716:	b8 00 00 00 00       	mov    $0x0,%eax
f013171b:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f0131720:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131725:	85 c0                	test   %eax,%eax
f0131727:	75 8a                	jne    f01316b3 <print_mem_block_lists+0xf2>
f0131729:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013172d:	75 84                	jne    f01316b3 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f013172f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0131733:	75 10                	jne    f0131745 <print_mem_block_lists+0x184>
f0131735:	83 ec 0c             	sub    $0xc,%esp
f0131738:	68 fc ce 13 f0       	push   $0xf013cefc
f013173d:	e8 40 f5 fc ff       	call   f0100c82 <cprintf>
f0131742:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0131745:	83 ec 0c             	sub    $0xc,%esp
f0131748:	68 70 ce 13 f0       	push   $0xf013ce70
f013174d:	e8 30 f5 fc ff       	call   f0100c82 <cprintf>
f0131752:	83 c4 10             	add    $0x10,%esp

}
f0131755:	90                   	nop
f0131756:	c9                   	leave  
f0131757:	c3                   	ret    

f0131758 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0131758:	55                   	push   %ebp
f0131759:	89 e5                	mov    %esp,%ebp
f013175b:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);
f013175e:	c7 05 98 7b 65 f0 00 	movl   $0x0,0xf0657b98
f0131765:	00 00 00 
f0131768:	c7 05 9c 7b 65 f0 00 	movl   $0x0,0xf0657b9c
f013176f:	00 00 00 
f0131772:	c7 05 a4 7b 65 f0 00 	movl   $0x0,0xf0657ba4
f0131779:	00 00 00 

	for(int y=0;y<numOfBlocks;y++)
f013177c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131783:	e9 9e 00 00 00       	jmp    f0131826 <initialize_MemBlocksList+0xce>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
f0131788:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f013178d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131790:	c1 e2 04             	shl    $0x4,%edx
f0131793:	01 d0                	add    %edx,%eax
f0131795:	85 c0                	test   %eax,%eax
f0131797:	75 14                	jne    f01317ad <initialize_MemBlocksList+0x55>
f0131799:	83 ec 04             	sub    $0x4,%esp
f013179c:	68 24 cf 13 f0       	push   $0xf013cf24
f01317a1:	6a 46                	push   $0x46
f01317a3:	68 47 cf 13 f0       	push   $0xf013cf47
f01317a8:	e8 4e ea fc ff       	call   f01001fb <_panic>
f01317ad:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01317b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317b5:	c1 e2 04             	shl    $0x4,%edx
f01317b8:	01 d0                	add    %edx,%eax
f01317ba:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01317c0:	89 10                	mov    %edx,(%eax)
f01317c2:	8b 00                	mov    (%eax),%eax
f01317c4:	85 c0                	test   %eax,%eax
f01317c6:	74 18                	je     f01317e0 <initialize_MemBlocksList+0x88>
f01317c8:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01317cd:	8b 15 d8 7a 65 f0    	mov    0xf0657ad8,%edx
f01317d3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01317d6:	c1 e1 04             	shl    $0x4,%ecx
f01317d9:	01 ca                	add    %ecx,%edx
f01317db:	89 50 04             	mov    %edx,0x4(%eax)
f01317de:	eb 12                	jmp    f01317f2 <initialize_MemBlocksList+0x9a>
f01317e0:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01317e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317e8:	c1 e2 04             	shl    $0x4,%edx
f01317eb:	01 d0                	add    %edx,%eax
f01317ed:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01317f2:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f01317f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317fa:	c1 e2 04             	shl    $0x4,%edx
f01317fd:	01 d0                	add    %edx,%eax
f01317ff:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131804:	a1 d8 7a 65 f0       	mov    0xf0657ad8,%eax
f0131809:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013180c:	c1 e2 04             	shl    $0x4,%edx
f013180f:	01 d0                	add    %edx,%eax
f0131811:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131818:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f013181d:	40                   	inc    %eax
f013181e:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	LIST_INIT(&AvailableMemBlocksList);

	for(int y=0;y<numOfBlocks;y++)
f0131823:	ff 45 f4             	incl   -0xc(%ebp)
f0131826:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131829:	3b 45 08             	cmp    0x8(%ebp),%eax
f013182c:	0f 82 56 ff ff ff    	jb     f0131788 <initialize_MemBlocksList+0x30>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[y]));
	}
}
f0131832:	90                   	nop
f0131833:	c9                   	leave  
f0131834:	c3                   	ret    

f0131835 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f0131835:	55                   	push   %ebp
f0131836:	89 e5                	mov    %esp,%ebp
f0131838:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f013183b:	8b 45 08             	mov    0x8(%ebp),%eax
f013183e:	8b 00                	mov    (%eax),%eax
f0131840:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131843:	eb 19                	jmp    f013185e <find_block+0x29>
	{
		if(va==point->sva)
f0131845:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131848:	8b 40 08             	mov    0x8(%eax),%eax
f013184b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f013184e:	75 05                	jne    f0131855 <find_block+0x20>
		   return point;
f0131850:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131853:	eb 36                	jmp    f013188b <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	struct MemBlock *point;

	LIST_FOREACH(point,blockList)
f0131855:	8b 45 08             	mov    0x8(%ebp),%eax
f0131858:	8b 40 08             	mov    0x8(%eax),%eax
f013185b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013185e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131862:	74 07                	je     f013186b <find_block+0x36>
f0131864:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131867:	8b 00                	mov    (%eax),%eax
f0131869:	eb 05                	jmp    f0131870 <find_block+0x3b>
f013186b:	b8 00 00 00 00       	mov    $0x0,%eax
f0131870:	8b 55 08             	mov    0x8(%ebp),%edx
f0131873:	89 42 08             	mov    %eax,0x8(%edx)
f0131876:	8b 45 08             	mov    0x8(%ebp),%eax
f0131879:	8b 40 08             	mov    0x8(%eax),%eax
f013187c:	85 c0                	test   %eax,%eax
f013187e:	75 c5                	jne    f0131845 <find_block+0x10>
f0131880:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131884:	75 bf                	jne    f0131845 <find_block+0x10>
	{
		if(va==point->sva)
		   return point;
	}
	return NULL;
f0131886:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013188b:	c9                   	leave  
f013188c:	c3                   	ret    

f013188d <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f013188d:	55                   	push   %ebp
f013188e:	89 e5                	mov    %esp,%ebp
f0131890:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
f0131893:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131898:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;
f013189b:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f01318a0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
f01318a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01318a9:	74 24                	je     f01318cf <insert_sorted_allocList+0x42>
f01318ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01318ae:	8b 50 08             	mov    0x8(%eax),%edx
f01318b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01318b4:	8b 40 08             	mov    0x8(%eax),%eax
f01318b7:	39 c2                	cmp    %eax,%edx
f01318b9:	76 14                	jbe    f01318cf <insert_sorted_allocList+0x42>
f01318bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01318be:	8b 50 08             	mov    0x8(%eax),%edx
f01318c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01318c4:	8b 40 08             	mov    0x8(%eax),%eax
f01318c7:	39 c2                	cmp    %eax,%edx
f01318c9:	0f 82 60 01 00 00    	jb     f0131a2f <insert_sorted_allocList+0x1a2>
	{
		if(head == NULL )
f01318cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318d3:	75 65                	jne    f013193a <insert_sorted_allocList+0xad>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
f01318d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01318d9:	75 14                	jne    f01318ef <insert_sorted_allocList+0x62>
f01318db:	83 ec 04             	sub    $0x4,%esp
f01318de:	68 24 cf 13 f0       	push   $0xf013cf24
f01318e3:	6a 6b                	push   $0x6b
f01318e5:	68 47 cf 13 f0       	push   $0xf013cf47
f01318ea:	e8 0c e9 fc ff       	call   f01001fb <_panic>
f01318ef:	8b 15 c8 7a 65 f0    	mov    0xf0657ac8,%edx
f01318f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01318f8:	89 10                	mov    %edx,(%eax)
f01318fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01318fd:	8b 00                	mov    (%eax),%eax
f01318ff:	85 c0                	test   %eax,%eax
f0131901:	74 0d                	je     f0131910 <insert_sorted_allocList+0x83>
f0131903:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131908:	8b 55 08             	mov    0x8(%ebp),%edx
f013190b:	89 50 04             	mov    %edx,0x4(%eax)
f013190e:	eb 08                	jmp    f0131918 <insert_sorted_allocList+0x8b>
f0131910:	8b 45 08             	mov    0x8(%ebp),%eax
f0131913:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131918:	8b 45 08             	mov    0x8(%ebp),%eax
f013191b:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131920:	8b 45 08             	mov    0x8(%ebp),%eax
f0131923:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013192a:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f013192f:	40                   	inc    %eax
f0131930:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131935:	e9 dc 01 00 00       	jmp    f0131b16 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_HEAD(&AllocMemBlocksList, blockToInsert);
		}
		else if (blockToInsert->sva <= head->sva)
f013193a:	8b 45 08             	mov    0x8(%ebp),%eax
f013193d:	8b 50 08             	mov    0x8(%eax),%edx
f0131940:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131943:	8b 40 08             	mov    0x8(%eax),%eax
f0131946:	39 c2                	cmp    %eax,%edx
f0131948:	77 6c                	ja     f01319b6 <insert_sorted_allocList+0x129>
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
f013194a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013194e:	74 06                	je     f0131956 <insert_sorted_allocList+0xc9>
f0131950:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131954:	75 14                	jne    f013196a <insert_sorted_allocList+0xdd>
f0131956:	83 ec 04             	sub    $0x4,%esp
f0131959:	68 60 cf 13 f0       	push   $0xf013cf60
f013195e:	6a 6f                	push   $0x6f
f0131960:	68 47 cf 13 f0       	push   $0xf013cf47
f0131965:	e8 91 e8 fc ff       	call   f01001fb <_panic>
f013196a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013196d:	8b 50 04             	mov    0x4(%eax),%edx
f0131970:	8b 45 08             	mov    0x8(%ebp),%eax
f0131973:	89 50 04             	mov    %edx,0x4(%eax)
f0131976:	8b 45 08             	mov    0x8(%ebp),%eax
f0131979:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013197c:	89 10                	mov    %edx,(%eax)
f013197e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131981:	8b 40 04             	mov    0x4(%eax),%eax
f0131984:	85 c0                	test   %eax,%eax
f0131986:	74 0d                	je     f0131995 <insert_sorted_allocList+0x108>
f0131988:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013198b:	8b 40 04             	mov    0x4(%eax),%eax
f013198e:	8b 55 08             	mov    0x8(%ebp),%edx
f0131991:	89 10                	mov    %edx,(%eax)
f0131993:	eb 08                	jmp    f013199d <insert_sorted_allocList+0x110>
f0131995:	8b 45 08             	mov    0x8(%ebp),%eax
f0131998:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f013199d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01319a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01319a3:	89 50 04             	mov    %edx,0x4(%eax)
f01319a6:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f01319ab:	40                   	inc    %eax
f01319ac:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f01319b1:	e9 60 01 00 00       	jmp    f0131b16 <insert_sorted_allocList+0x289>
		}
		else if (blockToInsert->sva <= head->sva)
		{
			LIST_INSERT_BEFORE(&AllocMemBlocksList,head, blockToInsert);
		}
		else if (blockToInsert->sva >= tail->sva )
f01319b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01319b9:	8b 50 08             	mov    0x8(%eax),%edx
f01319bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01319bf:	8b 40 08             	mov    0x8(%eax),%eax
f01319c2:	39 c2                	cmp    %eax,%edx
f01319c4:	0f 82 4c 01 00 00    	jb     f0131b16 <insert_sorted_allocList+0x289>
		{
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f01319ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01319ce:	75 14                	jne    f01319e4 <insert_sorted_allocList+0x157>
f01319d0:	83 ec 04             	sub    $0x4,%esp
f01319d3:	68 98 cf 13 f0       	push   $0xf013cf98
f01319d8:	6a 73                	push   $0x73
f01319da:	68 47 cf 13 f0       	push   $0xf013cf47
f01319df:	e8 17 e8 fc ff       	call   f01001fb <_panic>
f01319e4:	8b 15 cc 7a 65 f0    	mov    0xf0657acc,%edx
f01319ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01319ed:	89 50 04             	mov    %edx,0x4(%eax)
f01319f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01319f3:	8b 40 04             	mov    0x4(%eax),%eax
f01319f6:	85 c0                	test   %eax,%eax
f01319f8:	74 0c                	je     f0131a06 <insert_sorted_allocList+0x179>
f01319fa:	a1 cc 7a 65 f0       	mov    0xf0657acc,%eax
f01319ff:	8b 55 08             	mov    0x8(%ebp),%edx
f0131a02:	89 10                	mov    %edx,(%eax)
f0131a04:	eb 08                	jmp    f0131a0e <insert_sorted_allocList+0x181>
f0131a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a09:	a3 c8 7a 65 f0       	mov    %eax,0xf0657ac8
f0131a0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a11:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131a16:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131a1f:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131a24:	40                   	inc    %eax
f0131a25:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131a2a:	e9 e7 00 00 00       	jmp    f0131b16 <insert_sorted_allocList+0x289>
			LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
		}
	}
	else
	{
		struct MemBlock *current_block = head;
f0131a2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct MemBlock *next_block = NULL;
f0131a35:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131a3c:	a1 c8 7a 65 f0       	mov    0xf0657ac8,%eax
f0131a41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a44:	e9 9d 00 00 00       	jmp    f0131ae6 <insert_sorted_allocList+0x259>
		{
			next_block = LIST_NEXT(current_block);
f0131a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a4c:	8b 00                	mov    (%eax),%eax
f0131a4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (blockToInsert->sva > current_block->sva && blockToInsert->sva < next_block->sva)
f0131a51:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a54:	8b 50 08             	mov    0x8(%eax),%edx
f0131a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a5a:	8b 40 08             	mov    0x8(%eax),%eax
f0131a5d:	39 c2                	cmp    %eax,%edx
f0131a5f:	76 7d                	jbe    f0131ade <insert_sorted_allocList+0x251>
f0131a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a64:	8b 50 08             	mov    0x8(%eax),%edx
f0131a67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131a6a:	8b 40 08             	mov    0x8(%eax),%eax
f0131a6d:	39 c2                	cmp    %eax,%edx
f0131a6f:	73 6d                	jae    f0131ade <insert_sorted_allocList+0x251>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
f0131a71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a75:	74 06                	je     f0131a7d <insert_sorted_allocList+0x1f0>
f0131a77:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131a7b:	75 14                	jne    f0131a91 <insert_sorted_allocList+0x204>
f0131a7d:	83 ec 04             	sub    $0x4,%esp
f0131a80:	68 bc cf 13 f0       	push   $0xf013cfbc
f0131a85:	6a 7f                	push   $0x7f
f0131a87:	68 47 cf 13 f0       	push   $0xf013cf47
f0131a8c:	e8 6a e7 fc ff       	call   f01001fb <_panic>
f0131a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a94:	8b 10                	mov    (%eax),%edx
f0131a96:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a99:	89 10                	mov    %edx,(%eax)
f0131a9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a9e:	8b 00                	mov    (%eax),%eax
f0131aa0:	85 c0                	test   %eax,%eax
f0131aa2:	74 0b                	je     f0131aaf <insert_sorted_allocList+0x222>
f0131aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aa7:	8b 00                	mov    (%eax),%eax
f0131aa9:	8b 55 08             	mov    0x8(%ebp),%edx
f0131aac:	89 50 04             	mov    %edx,0x4(%eax)
f0131aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ab2:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ab5:	89 10                	mov    %edx,(%eax)
f0131ab7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131abd:	89 50 04             	mov    %edx,0x4(%eax)
f0131ac0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac3:	8b 00                	mov    (%eax),%eax
f0131ac5:	85 c0                	test   %eax,%eax
f0131ac7:	75 08                	jne    f0131ad1 <insert_sorted_allocList+0x244>
f0131ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131acc:	a3 cc 7a 65 f0       	mov    %eax,0xf0657acc
f0131ad1:	a1 d4 7a 65 f0       	mov    0xf0657ad4,%eax
f0131ad6:	40                   	inc    %eax
f0131ad7:	a3 d4 7a 65 f0       	mov    %eax,0xf0657ad4
				break;
f0131adc:	eb 39                	jmp    f0131b17 <insert_sorted_allocList+0x28a>
	}
	else
	{
		struct MemBlock *current_block = head;
		struct MemBlock *next_block = NULL;
		LIST_FOREACH (current_block, &AllocMemBlocksList)
f0131ade:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ae6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131aea:	74 07                	je     f0131af3 <insert_sorted_allocList+0x266>
f0131aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aef:	8b 00                	mov    (%eax),%eax
f0131af1:	eb 05                	jmp    f0131af8 <insert_sorted_allocList+0x26b>
f0131af3:	b8 00 00 00 00       	mov    $0x0,%eax
f0131af8:	a3 d0 7a 65 f0       	mov    %eax,0xf0657ad0
f0131afd:	a1 d0 7a 65 f0       	mov    0xf0657ad0,%eax
f0131b02:	85 c0                	test   %eax,%eax
f0131b04:	0f 85 3f ff ff ff    	jne    f0131a49 <insert_sorted_allocList+0x1bc>
f0131b0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b0e:	0f 85 35 ff ff ff    	jne    f0131a49 <insert_sorted_allocList+0x1bc>
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131b14:	eb 01                	jmp    f0131b17 <insert_sorted_allocList+0x28a>
	struct MemBlock *head = LIST_FIRST(&AllocMemBlocksList) ;
	struct MemBlock *tail = LIST_LAST(&AllocMemBlocksList) ;

	if (head == tail || blockToInsert->sva <= head->sva || blockToInsert->sva >= tail->sva )
	{
		if(head == NULL )
f0131b16:	90                   	nop
				LIST_INSERT_AFTER(&AllocMemBlocksList,current_block,blockToInsert);
				break;
			}
		}
	}
}
f0131b17:	90                   	nop
f0131b18:	c9                   	leave  
f0131b19:	c3                   	ret    

f0131b1a <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131b1a:	55                   	push   %ebp
f0131b1b:	89 e5                	mov    %esp,%ebp
f0131b1d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131b20:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131b28:	e9 85 01 00 00       	jmp    f0131cb2 <alloc_block_FF+0x198>
	{
		if(size <= point->size)
f0131b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b30:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b33:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b36:	0f 82 6e 01 00 00    	jb     f0131caa <alloc_block_FF+0x190>
		{
		   if(size == point->size){
f0131b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b3f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b42:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b45:	0f 85 8a 00 00 00    	jne    f0131bd5 <alloc_block_FF+0xbb>
			   LIST_REMOVE(&FreeMemBlocksList,point);
f0131b4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131b4f:	75 17                	jne    f0131b68 <alloc_block_FF+0x4e>
f0131b51:	83 ec 04             	sub    $0x4,%esp
f0131b54:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131b59:	68 93 00 00 00       	push   $0x93
f0131b5e:	68 47 cf 13 f0       	push   $0xf013cf47
f0131b63:	e8 93 e6 fc ff       	call   f01001fb <_panic>
f0131b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b6b:	8b 00                	mov    (%eax),%eax
f0131b6d:	85 c0                	test   %eax,%eax
f0131b6f:	74 10                	je     f0131b81 <alloc_block_FF+0x67>
f0131b71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b74:	8b 00                	mov    (%eax),%eax
f0131b76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b79:	8b 52 04             	mov    0x4(%edx),%edx
f0131b7c:	89 50 04             	mov    %edx,0x4(%eax)
f0131b7f:	eb 0b                	jmp    f0131b8c <alloc_block_FF+0x72>
f0131b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b84:	8b 40 04             	mov    0x4(%eax),%eax
f0131b87:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b8f:	8b 40 04             	mov    0x4(%eax),%eax
f0131b92:	85 c0                	test   %eax,%eax
f0131b94:	74 0f                	je     f0131ba5 <alloc_block_FF+0x8b>
f0131b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b99:	8b 40 04             	mov    0x4(%eax),%eax
f0131b9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131b9f:	8b 12                	mov    (%edx),%edx
f0131ba1:	89 10                	mov    %edx,(%eax)
f0131ba3:	eb 0a                	jmp    f0131baf <alloc_block_FF+0x95>
f0131ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ba8:	8b 00                	mov    (%eax),%eax
f0131baa:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bb2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bbb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131bc2:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131bc7:	48                   	dec    %eax
f0131bc8:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return  point;
f0131bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bd0:	e9 10 01 00 00       	jmp    f0131ce5 <alloc_block_FF+0x1cb>
			   break;
		   }
		   else if (size < point->size){
f0131bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bd8:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bdb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131bde:	0f 86 c6 00 00 00    	jbe    f0131caa <alloc_block_FF+0x190>
			   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131be4:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131be9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   ReturnedBlock->sva = point->sva;
f0131bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bef:	8b 50 08             	mov    0x8(%eax),%edx
f0131bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bf5:	89 50 08             	mov    %edx,0x8(%eax)
			   ReturnedBlock->size = size;
f0131bf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131bfb:	8b 55 08             	mov    0x8(%ebp),%edx
f0131bfe:	89 50 0c             	mov    %edx,0xc(%eax)
			   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131c01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131c05:	75 17                	jne    f0131c1e <alloc_block_FF+0x104>
f0131c07:	83 ec 04             	sub    $0x4,%esp
f0131c0a:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131c0f:	68 9b 00 00 00       	push   $0x9b
f0131c14:	68 47 cf 13 f0       	push   $0xf013cf47
f0131c19:	e8 dd e5 fc ff       	call   f01001fb <_panic>
f0131c1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c21:	8b 00                	mov    (%eax),%eax
f0131c23:	85 c0                	test   %eax,%eax
f0131c25:	74 10                	je     f0131c37 <alloc_block_FF+0x11d>
f0131c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c2a:	8b 00                	mov    (%eax),%eax
f0131c2c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c2f:	8b 52 04             	mov    0x4(%edx),%edx
f0131c32:	89 50 04             	mov    %edx,0x4(%eax)
f0131c35:	eb 0b                	jmp    f0131c42 <alloc_block_FF+0x128>
f0131c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c3a:	8b 40 04             	mov    0x4(%eax),%eax
f0131c3d:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131c42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c45:	8b 40 04             	mov    0x4(%eax),%eax
f0131c48:	85 c0                	test   %eax,%eax
f0131c4a:	74 0f                	je     f0131c5b <alloc_block_FF+0x141>
f0131c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c4f:	8b 40 04             	mov    0x4(%eax),%eax
f0131c52:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131c55:	8b 12                	mov    (%edx),%edx
f0131c57:	89 10                	mov    %edx,(%eax)
f0131c59:	eb 0a                	jmp    f0131c65 <alloc_block_FF+0x14b>
f0131c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c5e:	8b 00                	mov    (%eax),%eax
f0131c60:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131c65:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131c6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131c71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c78:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131c7d:	48                   	dec    %eax
f0131c7e:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			   point->sva += size;
f0131c83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c86:	8b 50 08             	mov    0x8(%eax),%edx
f0131c89:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c8c:	01 c2                	add    %eax,%edx
f0131c8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c91:	89 50 08             	mov    %edx,0x8(%eax)
			   point->size -= size;
f0131c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c97:	8b 40 0c             	mov    0xc(%eax),%eax
f0131c9a:	2b 45 08             	sub    0x8(%ebp),%eax
f0131c9d:	89 c2                	mov    %eax,%edx
f0131c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ca2:	89 50 0c             	mov    %edx,0xc(%eax)
			   return ReturnedBlock;
f0131ca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ca8:	eb 3b                	jmp    f0131ce5 <alloc_block_FF+0x1cb>
struct MemBlock *alloc_block_FF(uint32 size)
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	struct MemBlock *point;
	LIST_FOREACH(point,&FreeMemBlocksList)
f0131caa:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131cb6:	74 07                	je     f0131cbf <alloc_block_FF+0x1a5>
f0131cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cbb:	8b 00                	mov    (%eax),%eax
f0131cbd:	eb 05                	jmp    f0131cc4 <alloc_block_FF+0x1aa>
f0131cbf:	b8 00 00 00 00       	mov    $0x0,%eax
f0131cc4:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131cc9:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131cce:	85 c0                	test   %eax,%eax
f0131cd0:	0f 85 57 fe ff ff    	jne    f0131b2d <alloc_block_FF+0x13>
f0131cd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131cda:	0f 85 4d fe ff ff    	jne    f0131b2d <alloc_block_FF+0x13>
			   return ReturnedBlock;
			   break;
		   }
		}
	}
	return NULL;
f0131ce0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131ce5:	c9                   	leave  
f0131ce6:	c3                   	ret    

f0131ce7 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0131ce7:	55                   	push   %ebp
f0131ce8:	89 e5                	mov    %esp,%ebp
f0131cea:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
f0131ced:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131cf4:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131cf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cfc:	e9 df 00 00 00       	jmp    f0131de0 <alloc_block_BF+0xf9>
	{
		if(size <= currentMemBlock->size)
f0131d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d04:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d07:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d0a:	0f 82 c8 00 00 00    	jb     f0131dd8 <alloc_block_BF+0xf1>
		{
		   if(size == currentMemBlock->size)
f0131d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d13:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d16:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131d19:	0f 85 8a 00 00 00    	jne    f0131da9 <alloc_block_BF+0xc2>
		   {
			   LIST_REMOVE(&FreeMemBlocksList,currentMemBlock);
f0131d1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131d23:	75 17                	jne    f0131d3c <alloc_block_BF+0x55>
f0131d25:	83 ec 04             	sub    $0x4,%esp
f0131d28:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131d2d:	68 b7 00 00 00       	push   $0xb7
f0131d32:	68 47 cf 13 f0       	push   $0xf013cf47
f0131d37:	e8 bf e4 fc ff       	call   f01001fb <_panic>
f0131d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d3f:	8b 00                	mov    (%eax),%eax
f0131d41:	85 c0                	test   %eax,%eax
f0131d43:	74 10                	je     f0131d55 <alloc_block_BF+0x6e>
f0131d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d48:	8b 00                	mov    (%eax),%eax
f0131d4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d4d:	8b 52 04             	mov    0x4(%edx),%edx
f0131d50:	89 50 04             	mov    %edx,0x4(%eax)
f0131d53:	eb 0b                	jmp    f0131d60 <alloc_block_BF+0x79>
f0131d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d58:	8b 40 04             	mov    0x4(%eax),%eax
f0131d5b:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d63:	8b 40 04             	mov    0x4(%eax),%eax
f0131d66:	85 c0                	test   %eax,%eax
f0131d68:	74 0f                	je     f0131d79 <alloc_block_BF+0x92>
f0131d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d6d:	8b 40 04             	mov    0x4(%eax),%eax
f0131d70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131d73:	8b 12                	mov    (%edx),%edx
f0131d75:	89 10                	mov    %edx,(%eax)
f0131d77:	eb 0a                	jmp    f0131d83 <alloc_block_BF+0x9c>
f0131d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d7c:	8b 00                	mov    (%eax),%eax
f0131d7e:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131d83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131d8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131d8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d96:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131d9b:	48                   	dec    %eax
f0131d9c:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			   return currentMemBlock;
f0131da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131da4:	e9 4d 01 00 00       	jmp    f0131ef6 <alloc_block_BF+0x20f>
		   }
		   else if (size < currentMemBlock->size && currentMemBlock->size < minSize)
f0131da9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dac:	8b 40 0c             	mov    0xc(%eax),%eax
f0131daf:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131db2:	76 24                	jbe    f0131dd8 <alloc_block_BF+0xf1>
f0131db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131db7:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131dbd:	73 19                	jae    f0131dd8 <alloc_block_BF+0xf1>
		   {
			   isFound = 1==1;
f0131dbf:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
			   minSize = currentMemBlock->size;
f0131dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dc9:	8b 40 0c             	mov    0xc(%eax),%eax
f0131dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
			   svaOfMinSize = currentMemBlock->sva;
f0131dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dd2:	8b 40 08             	mov    0x8(%eax),%eax
f0131dd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	// Write your code here, remove the panic and write your code
	struct MemBlock *currentMemBlock;
	uint32 minSize;
	uint32 svaOfMinSize;
	bool isFound = 1==0;
	LIST_FOREACH(currentMemBlock,&FreeMemBlocksList)
f0131dd8:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131ddd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131de0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131de4:	74 07                	je     f0131ded <alloc_block_BF+0x106>
f0131de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131de9:	8b 00                	mov    (%eax),%eax
f0131deb:	eb 05                	jmp    f0131df2 <alloc_block_BF+0x10b>
f0131ded:	b8 00 00 00 00       	mov    $0x0,%eax
f0131df2:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0131df7:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0131dfc:	85 c0                	test   %eax,%eax
f0131dfe:	0f 85 fd fe ff ff    	jne    f0131d01 <alloc_block_BF+0x1a>
f0131e04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131e08:	0f 85 f3 fe ff ff    	jne    f0131d01 <alloc_block_BF+0x1a>
			   minSize = currentMemBlock->size;
			   svaOfMinSize = currentMemBlock->sva;
		   }
		}
	}
	if(isFound)
f0131e0e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0131e12:	0f 84 d9 00 00 00    	je     f0131ef1 <alloc_block_BF+0x20a>
	{
		struct MemBlock * foundBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131e18:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131e1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		foundBlock->sva = svaOfMinSize;
f0131e20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131e26:	89 50 08             	mov    %edx,0x8(%eax)
		foundBlock->size = size;
f0131e29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e2c:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e2f:	89 50 0c             	mov    %edx,0xc(%eax)
		LIST_REMOVE(&AvailableMemBlocksList,foundBlock);
f0131e32:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131e36:	75 17                	jne    f0131e4f <alloc_block_BF+0x168>
f0131e38:	83 ec 04             	sub    $0x4,%esp
f0131e3b:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131e40:	68 c7 00 00 00       	push   $0xc7
f0131e45:	68 47 cf 13 f0       	push   $0xf013cf47
f0131e4a:	e8 ac e3 fc ff       	call   f01001fb <_panic>
f0131e4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e52:	8b 00                	mov    (%eax),%eax
f0131e54:	85 c0                	test   %eax,%eax
f0131e56:	74 10                	je     f0131e68 <alloc_block_BF+0x181>
f0131e58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e5b:	8b 00                	mov    (%eax),%eax
f0131e5d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131e60:	8b 52 04             	mov    0x4(%edx),%edx
f0131e63:	89 50 04             	mov    %edx,0x4(%eax)
f0131e66:	eb 0b                	jmp    f0131e73 <alloc_block_BF+0x18c>
f0131e68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e6b:	8b 40 04             	mov    0x4(%eax),%eax
f0131e6e:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0131e73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e76:	8b 40 04             	mov    0x4(%eax),%eax
f0131e79:	85 c0                	test   %eax,%eax
f0131e7b:	74 0f                	je     f0131e8c <alloc_block_BF+0x1a5>
f0131e7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e80:	8b 40 04             	mov    0x4(%eax),%eax
f0131e83:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0131e86:	8b 12                	mov    (%edx),%edx
f0131e88:	89 10                	mov    %edx,(%eax)
f0131e8a:	eb 0a                	jmp    f0131e96 <alloc_block_BF+0x1af>
f0131e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e8f:	8b 00                	mov    (%eax),%eax
f0131e91:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0131e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131e99:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131e9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131ea2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ea9:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0131eae:	48                   	dec    %eax
f0131eaf:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
		struct MemBlock *cMemBlock = find_block(&FreeMemBlocksList, svaOfMinSize);
f0131eb4:	83 ec 08             	sub    $0x8,%esp
f0131eb7:	ff 75 ec             	pushl  -0x14(%ebp)
f0131eba:	68 64 7b 65 f0       	push   $0xf0657b64
f0131ebf:	e8 71 f9 ff ff       	call   f0131835 <find_block>
f0131ec4:	83 c4 10             	add    $0x10,%esp
f0131ec7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		cMemBlock->sva += size;
f0131eca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ecd:	8b 50 08             	mov    0x8(%eax),%edx
f0131ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ed3:	01 c2                	add    %eax,%edx
f0131ed5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ed8:	89 50 08             	mov    %edx,0x8(%eax)
		cMemBlock->size -= size;
f0131edb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ede:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ee1:	2b 45 08             	sub    0x8(%ebp),%eax
f0131ee4:	89 c2                	mov    %eax,%edx
f0131ee6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0131ee9:	89 50 0c             	mov    %edx,0xc(%eax)
		return foundBlock;
f0131eec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0131eef:	eb 05                	jmp    f0131ef6 <alloc_block_BF+0x20f>
	}
	return NULL;
f0131ef1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131ef6:	c9                   	leave  
f0131ef7:	c3                   	ret    

f0131ef8 <alloc_block_NF>:
uint32 svaOfNF = 0;
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131ef8:	55                   	push   %ebp
f0131ef9:	89 e5                	mov    %esp,%ebp
f0131efb:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
f0131efe:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0131f03:	85 c0                	test   %eax,%eax
f0131f05:	0f 85 de 01 00 00    	jne    f01320e9 <alloc_block_NF+0x1f1>
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f0131f0b:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f0131f10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131f13:	e9 9e 01 00 00       	jmp    f01320b6 <alloc_block_NF+0x1be>
		{
			if(size <= point->size)
f0131f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f1b:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f1e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f21:	0f 82 87 01 00 00    	jb     f01320ae <alloc_block_NF+0x1b6>
			{
			   if(size == point->size){
f0131f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f2a:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f2d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131f30:	0f 85 95 00 00 00    	jne    f0131fcb <alloc_block_NF+0xd3>
				   LIST_REMOVE(&FreeMemBlocksList,point);
f0131f36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f3a:	75 17                	jne    f0131f53 <alloc_block_NF+0x5b>
f0131f3c:	83 ec 04             	sub    $0x4,%esp
f0131f3f:	68 f0 cf 13 f0       	push   $0xf013cff0
f0131f44:	68 e0 00 00 00       	push   $0xe0
f0131f49:	68 47 cf 13 f0       	push   $0xf013cf47
f0131f4e:	e8 a8 e2 fc ff       	call   f01001fb <_panic>
f0131f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f56:	8b 00                	mov    (%eax),%eax
f0131f58:	85 c0                	test   %eax,%eax
f0131f5a:	74 10                	je     f0131f6c <alloc_block_NF+0x74>
f0131f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f5f:	8b 00                	mov    (%eax),%eax
f0131f61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f64:	8b 52 04             	mov    0x4(%edx),%edx
f0131f67:	89 50 04             	mov    %edx,0x4(%eax)
f0131f6a:	eb 0b                	jmp    f0131f77 <alloc_block_NF+0x7f>
f0131f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f6f:	8b 40 04             	mov    0x4(%eax),%eax
f0131f72:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0131f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f7a:	8b 40 04             	mov    0x4(%eax),%eax
f0131f7d:	85 c0                	test   %eax,%eax
f0131f7f:	74 0f                	je     f0131f90 <alloc_block_NF+0x98>
f0131f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f84:	8b 40 04             	mov    0x4(%eax),%eax
f0131f87:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f8a:	8b 12                	mov    (%edx),%edx
f0131f8c:	89 10                	mov    %edx,(%eax)
f0131f8e:	eb 0a                	jmp    f0131f9a <alloc_block_NF+0xa2>
f0131f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f93:	8b 00                	mov    (%eax),%eax
f0131f95:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0131f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131fa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fa6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131fad:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0131fb2:	48                   	dec    %eax
f0131fb3:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
				   svaOfNF = point->sva;
f0131fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fbb:	8b 40 08             	mov    0x8(%eax),%eax
f0131fbe:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   return  point;
f0131fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fc6:	e9 f8 04 00 00       	jmp    f01324c3 <alloc_block_NF+0x5cb>
				   break;
			   }
			   else if (size < point->size){
f0131fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fce:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fd1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131fd4:	0f 86 d4 00 00 00    	jbe    f01320ae <alloc_block_NF+0x1b6>
				   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f0131fda:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0131fdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
				   ReturnedBlock->sva = point->sva;
f0131fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fe5:	8b 50 08             	mov    0x8(%eax),%edx
f0131fe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131feb:	89 50 08             	mov    %edx,0x8(%eax)
				   ReturnedBlock->size = size;
f0131fee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131ff1:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ff4:	89 50 0c             	mov    %edx,0xc(%eax)
				   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f0131ff7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131ffb:	75 17                	jne    f0132014 <alloc_block_NF+0x11c>
f0131ffd:	83 ec 04             	sub    $0x4,%esp
f0132000:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132005:	68 e9 00 00 00       	push   $0xe9
f013200a:	68 47 cf 13 f0       	push   $0xf013cf47
f013200f:	e8 e7 e1 fc ff       	call   f01001fb <_panic>
f0132014:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132017:	8b 00                	mov    (%eax),%eax
f0132019:	85 c0                	test   %eax,%eax
f013201b:	74 10                	je     f013202d <alloc_block_NF+0x135>
f013201d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132020:	8b 00                	mov    (%eax),%eax
f0132022:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132025:	8b 52 04             	mov    0x4(%edx),%edx
f0132028:	89 50 04             	mov    %edx,0x4(%eax)
f013202b:	eb 0b                	jmp    f0132038 <alloc_block_NF+0x140>
f013202d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132030:	8b 40 04             	mov    0x4(%eax),%eax
f0132033:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132038:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013203b:	8b 40 04             	mov    0x4(%eax),%eax
f013203e:	85 c0                	test   %eax,%eax
f0132040:	74 0f                	je     f0132051 <alloc_block_NF+0x159>
f0132042:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132045:	8b 40 04             	mov    0x4(%eax),%eax
f0132048:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013204b:	8b 12                	mov    (%edx),%edx
f013204d:	89 10                	mov    %edx,(%eax)
f013204f:	eb 0a                	jmp    f013205b <alloc_block_NF+0x163>
f0132051:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132054:	8b 00                	mov    (%eax),%eax
f0132056:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f013205b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013205e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132064:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132067:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013206e:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132073:	48                   	dec    %eax
f0132074:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
				   svaOfNF = ReturnedBlock->sva;
f0132079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013207c:	8b 40 08             	mov    0x8(%eax),%eax
f013207f:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
				   point->sva += size;
f0132084:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132087:	8b 50 08             	mov    0x8(%eax),%edx
f013208a:	8b 45 08             	mov    0x8(%ebp),%eax
f013208d:	01 c2                	add    %eax,%edx
f013208f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132092:	89 50 08             	mov    %edx,0x8(%eax)
				   point->size -= size;
f0132095:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132098:	8b 40 0c             	mov    0xc(%eax),%eax
f013209b:	2b 45 08             	sub    0x8(%ebp),%eax
f013209e:	89 c2                	mov    %eax,%edx
f01320a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320a3:	89 50 0c             	mov    %edx,0xc(%eax)
				   return ReturnedBlock;
f01320a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01320a9:	e9 15 04 00 00       	jmp    f01324c3 <alloc_block_NF+0x5cb>
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your codestruct MemBlock *point;
	struct MemBlock *point;
	if(svaOfNF == 0)
	{
		LIST_FOREACH(point,&FreeMemBlocksList)
f01320ae:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01320b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320ba:	74 07                	je     f01320c3 <alloc_block_NF+0x1cb>
f01320bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320bf:	8b 00                	mov    (%eax),%eax
f01320c1:	eb 05                	jmp    f01320c8 <alloc_block_NF+0x1d0>
f01320c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01320c8:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01320cd:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01320d2:	85 c0                	test   %eax,%eax
f01320d4:	0f 85 3e fe ff ff    	jne    f0131f18 <alloc_block_NF+0x20>
f01320da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01320de:	0f 85 34 fe ff ff    	jne    f0131f18 <alloc_block_NF+0x20>
f01320e4:	e9 d5 03 00 00       	jmp    f01324be <alloc_block_NF+0x5c6>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f01320e9:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01320ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01320f1:	e9 b1 01 00 00       	jmp    f01322a7 <alloc_block_NF+0x3af>
		{
			if(point->sva >= svaOfNF)
f01320f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320f9:	8b 50 08             	mov    0x8(%eax),%edx
f01320fc:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f0132101:	39 c2                	cmp    %eax,%edx
f0132103:	0f 82 96 01 00 00    	jb     f013229f <alloc_block_NF+0x3a7>
			{
				if(size <= point->size)
f0132109:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013210c:	8b 40 0c             	mov    0xc(%eax),%eax
f013210f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132112:	0f 82 87 01 00 00    	jb     f013229f <alloc_block_NF+0x3a7>
				{
				   if(size == point->size){
f0132118:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013211b:	8b 40 0c             	mov    0xc(%eax),%eax
f013211e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132121:	0f 85 95 00 00 00    	jne    f01321bc <alloc_block_NF+0x2c4>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132127:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013212b:	75 17                	jne    f0132144 <alloc_block_NF+0x24c>
f013212d:	83 ec 04             	sub    $0x4,%esp
f0132130:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132135:	68 fc 00 00 00       	push   $0xfc
f013213a:	68 47 cf 13 f0       	push   $0xf013cf47
f013213f:	e8 b7 e0 fc ff       	call   f01001fb <_panic>
f0132144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132147:	8b 00                	mov    (%eax),%eax
f0132149:	85 c0                	test   %eax,%eax
f013214b:	74 10                	je     f013215d <alloc_block_NF+0x265>
f013214d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132150:	8b 00                	mov    (%eax),%eax
f0132152:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132155:	8b 52 04             	mov    0x4(%edx),%edx
f0132158:	89 50 04             	mov    %edx,0x4(%eax)
f013215b:	eb 0b                	jmp    f0132168 <alloc_block_NF+0x270>
f013215d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132160:	8b 40 04             	mov    0x4(%eax),%eax
f0132163:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132168:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013216b:	8b 40 04             	mov    0x4(%eax),%eax
f013216e:	85 c0                	test   %eax,%eax
f0132170:	74 0f                	je     f0132181 <alloc_block_NF+0x289>
f0132172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132175:	8b 40 04             	mov    0x4(%eax),%eax
f0132178:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013217b:	8b 12                	mov    (%edx),%edx
f013217d:	89 10                	mov    %edx,(%eax)
f013217f:	eb 0a                	jmp    f013218b <alloc_block_NF+0x293>
f0132181:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132184:	8b 00                	mov    (%eax),%eax
f0132186:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013218b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013218e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132194:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132197:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013219e:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01321a3:	48                   	dec    %eax
f01321a4:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f01321a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321ac:	8b 40 08             	mov    0x8(%eax),%eax
f01321af:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f01321b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b7:	e9 07 03 00 00       	jmp    f01324c3 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01321bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321bf:	8b 40 0c             	mov    0xc(%eax),%eax
f01321c2:	3b 45 08             	cmp    0x8(%ebp),%eax
f01321c5:	0f 86 d4 00 00 00    	jbe    f013229f <alloc_block_NF+0x3a7>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01321cb:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01321d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
					   ReturnedBlock->sva = point->sva;
f01321d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321d6:	8b 50 08             	mov    0x8(%eax),%edx
f01321d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01321dc:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01321df:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01321e2:	8b 55 08             	mov    0x8(%ebp),%edx
f01321e5:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01321e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01321ec:	75 17                	jne    f0132205 <alloc_block_NF+0x30d>
f01321ee:	83 ec 04             	sub    $0x4,%esp
f01321f1:	68 f0 cf 13 f0       	push   $0xf013cff0
f01321f6:	68 04 01 00 00       	push   $0x104
f01321fb:	68 47 cf 13 f0       	push   $0xf013cf47
f0132200:	e8 f6 df fc ff       	call   f01001fb <_panic>
f0132205:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132208:	8b 00                	mov    (%eax),%eax
f013220a:	85 c0                	test   %eax,%eax
f013220c:	74 10                	je     f013221e <alloc_block_NF+0x326>
f013220e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132211:	8b 00                	mov    (%eax),%eax
f0132213:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132216:	8b 52 04             	mov    0x4(%edx),%edx
f0132219:	89 50 04             	mov    %edx,0x4(%eax)
f013221c:	eb 0b                	jmp    f0132229 <alloc_block_NF+0x331>
f013221e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132221:	8b 40 04             	mov    0x4(%eax),%eax
f0132224:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132229:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013222c:	8b 40 04             	mov    0x4(%eax),%eax
f013222f:	85 c0                	test   %eax,%eax
f0132231:	74 0f                	je     f0132242 <alloc_block_NF+0x34a>
f0132233:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132236:	8b 40 04             	mov    0x4(%eax),%eax
f0132239:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013223c:	8b 12                	mov    (%edx),%edx
f013223e:	89 10                	mov    %edx,(%eax)
f0132240:	eb 0a                	jmp    f013224c <alloc_block_NF+0x354>
f0132242:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132245:	8b 00                	mov    (%eax),%eax
f0132247:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f013224c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013224f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132255:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132258:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013225f:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132264:	48                   	dec    %eax
f0132265:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f013226a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013226d:	8b 40 08             	mov    0x8(%eax),%eax
f0132270:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f0132275:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132278:	8b 50 08             	mov    0x8(%eax),%edx
f013227b:	8b 45 08             	mov    0x8(%ebp),%eax
f013227e:	01 c2                	add    %eax,%edx
f0132280:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132283:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132286:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132289:	8b 40 0c             	mov    0xc(%eax),%eax
f013228c:	2b 45 08             	sub    0x8(%ebp),%eax
f013228f:	89 c2                	mov    %eax,%edx
f0132291:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132294:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132297:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013229a:	e9 24 02 00 00       	jmp    f01324c3 <alloc_block_NF+0x5cb>
			}
		}
	}
	else
	{
		LIST_FOREACH(point, &FreeMemBlocksList)
f013229f:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01322a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322ab:	74 07                	je     f01322b4 <alloc_block_NF+0x3bc>
f01322ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322b0:	8b 00                	mov    (%eax),%eax
f01322b2:	eb 05                	jmp    f01322b9 <alloc_block_NF+0x3c1>
f01322b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01322b9:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01322be:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01322c3:	85 c0                	test   %eax,%eax
f01322c5:	0f 85 2b fe ff ff    	jne    f01320f6 <alloc_block_NF+0x1fe>
f01322cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01322cf:	0f 85 21 fe ff ff    	jne    f01320f6 <alloc_block_NF+0x1fe>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f01322d5:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01322da:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01322dd:	e9 ae 01 00 00       	jmp    f0132490 <alloc_block_NF+0x598>
		{
			if(point->sva < svaOfNF)
f01322e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322e5:	8b 50 08             	mov    0x8(%eax),%edx
f01322e8:	a1 b0 7a 65 f0       	mov    0xf0657ab0,%eax
f01322ed:	39 c2                	cmp    %eax,%edx
f01322ef:	0f 83 93 01 00 00    	jae    f0132488 <alloc_block_NF+0x590>
			{
				if(size <= point->size)
f01322f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01322f8:	8b 40 0c             	mov    0xc(%eax),%eax
f01322fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01322fe:	0f 82 84 01 00 00    	jb     f0132488 <alloc_block_NF+0x590>
				{
				   if(size == point->size){
f0132304:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132307:	8b 40 0c             	mov    0xc(%eax),%eax
f013230a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013230d:	0f 85 95 00 00 00    	jne    f01323a8 <alloc_block_NF+0x4b0>
					   LIST_REMOVE(&FreeMemBlocksList,point);
f0132313:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132317:	75 17                	jne    f0132330 <alloc_block_NF+0x438>
f0132319:	83 ec 04             	sub    $0x4,%esp
f013231c:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132321:	68 14 01 00 00       	push   $0x114
f0132326:	68 47 cf 13 f0       	push   $0xf013cf47
f013232b:	e8 cb de fc ff       	call   f01001fb <_panic>
f0132330:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132333:	8b 00                	mov    (%eax),%eax
f0132335:	85 c0                	test   %eax,%eax
f0132337:	74 10                	je     f0132349 <alloc_block_NF+0x451>
f0132339:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013233c:	8b 00                	mov    (%eax),%eax
f013233e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132341:	8b 52 04             	mov    0x4(%edx),%edx
f0132344:	89 50 04             	mov    %edx,0x4(%eax)
f0132347:	eb 0b                	jmp    f0132354 <alloc_block_NF+0x45c>
f0132349:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013234c:	8b 40 04             	mov    0x4(%eax),%eax
f013234f:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132354:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132357:	8b 40 04             	mov    0x4(%eax),%eax
f013235a:	85 c0                	test   %eax,%eax
f013235c:	74 0f                	je     f013236d <alloc_block_NF+0x475>
f013235e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132361:	8b 40 04             	mov    0x4(%eax),%eax
f0132364:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132367:	8b 12                	mov    (%edx),%edx
f0132369:	89 10                	mov    %edx,(%eax)
f013236b:	eb 0a                	jmp    f0132377 <alloc_block_NF+0x47f>
f013236d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132370:	8b 00                	mov    (%eax),%eax
f0132372:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013237a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132380:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132383:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013238a:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f013238f:	48                   	dec    %eax
f0132390:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					   svaOfNF = point->sva;
f0132395:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132398:	8b 40 08             	mov    0x8(%eax),%eax
f013239b:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   return  point;
f01323a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323a3:	e9 1b 01 00 00       	jmp    f01324c3 <alloc_block_NF+0x5cb>
				   }
				   else if (size < point->size){
f01323a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01323ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f01323b1:	0f 86 d1 00 00 00    	jbe    f0132488 <alloc_block_NF+0x590>
					   struct MemBlock * ReturnedBlock = LIST_FIRST(&AvailableMemBlocksList);
f01323b7:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f01323bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
					   ReturnedBlock->sva = point->sva;
f01323bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01323c2:	8b 50 08             	mov    0x8(%eax),%edx
f01323c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323c8:	89 50 08             	mov    %edx,0x8(%eax)
					   ReturnedBlock->size = size;
f01323cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323ce:	8b 55 08             	mov    0x8(%ebp),%edx
f01323d1:	89 50 0c             	mov    %edx,0xc(%eax)
					   LIST_REMOVE(&AvailableMemBlocksList,ReturnedBlock);
f01323d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01323d8:	75 17                	jne    f01323f1 <alloc_block_NF+0x4f9>
f01323da:	83 ec 04             	sub    $0x4,%esp
f01323dd:	68 f0 cf 13 f0       	push   $0xf013cff0
f01323e2:	68 1c 01 00 00       	push   $0x11c
f01323e7:	68 47 cf 13 f0       	push   $0xf013cf47
f01323ec:	e8 0a de fc ff       	call   f01001fb <_panic>
f01323f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323f4:	8b 00                	mov    (%eax),%eax
f01323f6:	85 c0                	test   %eax,%eax
f01323f8:	74 10                	je     f013240a <alloc_block_NF+0x512>
f01323fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01323fd:	8b 00                	mov    (%eax),%eax
f01323ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132402:	8b 52 04             	mov    0x4(%edx),%edx
f0132405:	89 50 04             	mov    %edx,0x4(%eax)
f0132408:	eb 0b                	jmp    f0132415 <alloc_block_NF+0x51d>
f013240a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013240d:	8b 40 04             	mov    0x4(%eax),%eax
f0132410:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132415:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132418:	8b 40 04             	mov    0x4(%eax),%eax
f013241b:	85 c0                	test   %eax,%eax
f013241d:	74 0f                	je     f013242e <alloc_block_NF+0x536>
f013241f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132422:	8b 40 04             	mov    0x4(%eax),%eax
f0132425:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132428:	8b 12                	mov    (%edx),%edx
f013242a:	89 10                	mov    %edx,(%eax)
f013242c:	eb 0a                	jmp    f0132438 <alloc_block_NF+0x540>
f013242e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132431:	8b 00                	mov    (%eax),%eax
f0132433:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132438:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013243b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132441:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132444:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013244b:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132450:	48                   	dec    %eax
f0132451:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					   svaOfNF = ReturnedBlock->sva;
f0132456:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132459:	8b 40 08             	mov    0x8(%eax),%eax
f013245c:	a3 b0 7a 65 f0       	mov    %eax,0xf0657ab0
					   point->sva += size;
f0132461:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132464:	8b 50 08             	mov    0x8(%eax),%edx
f0132467:	8b 45 08             	mov    0x8(%ebp),%eax
f013246a:	01 c2                	add    %eax,%edx
f013246c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013246f:	89 50 08             	mov    %edx,0x8(%eax)
					   point->size -= size;
f0132472:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132475:	8b 40 0c             	mov    0xc(%eax),%eax
f0132478:	2b 45 08             	sub    0x8(%ebp),%eax
f013247b:	89 c2                	mov    %eax,%edx
f013247d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132480:	89 50 0c             	mov    %edx,0xc(%eax)
					   return ReturnedBlock;
f0132483:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132486:	eb 3b                	jmp    f01324c3 <alloc_block_NF+0x5cb>
					   return ReturnedBlock;
				   }
				}
			}
		}
		LIST_FOREACH(point, &FreeMemBlocksList)
f0132488:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f013248d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132490:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132494:	74 07                	je     f013249d <alloc_block_NF+0x5a5>
f0132496:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132499:	8b 00                	mov    (%eax),%eax
f013249b:	eb 05                	jmp    f01324a2 <alloc_block_NF+0x5aa>
f013249d:	b8 00 00 00 00       	mov    $0x0,%eax
f01324a2:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f01324a7:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f01324ac:	85 c0                	test   %eax,%eax
f01324ae:	0f 85 2e fe ff ff    	jne    f01322e2 <alloc_block_NF+0x3ea>
f01324b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324b8:	0f 85 24 fe ff ff    	jne    f01322e2 <alloc_block_NF+0x3ea>
				   }
				}
			}
		}
	}
	return NULL;
f01324be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01324c3:	c9                   	leave  
f01324c4:	c3                   	ret    

f01324c5 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f01324c5:	55                   	push   %ebp
f01324c6:	89 e5                	mov    %esp,%ebp
f01324c8:	83 ec 18             	sub    $0x18,%esp
	//cprintf("BEFORE INSERT with MERGE: insert [%x, %x)\n=====================\n", blockToInsert->sva, blockToInsert->sva + blockToInsert->size);
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	struct MemBlock *head = LIST_FIRST(&FreeMemBlocksList) ;
f01324cb:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01324d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;
f01324d3:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f01324d8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
f01324db:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01324e0:	85 c0                	test   %eax,%eax
f01324e2:	74 14                	je     f01324f8 <insert_sorted_with_merge_freeList+0x33>
f01324e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01324e7:	8b 50 08             	mov    0x8(%eax),%edx
f01324ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324ed:	8b 40 08             	mov    0x8(%eax),%eax
f01324f0:	39 c2                	cmp    %eax,%edx
f01324f2:	0f 87 9b 01 00 00    	ja     f0132693 <insert_sorted_with_merge_freeList+0x1ce>
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f01324f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01324fc:	75 17                	jne    f0132515 <insert_sorted_with_merge_freeList+0x50>
f01324fe:	83 ec 04             	sub    $0x4,%esp
f0132501:	68 24 cf 13 f0       	push   $0xf013cf24
f0132506:	68 38 01 00 00       	push   $0x138
f013250b:	68 47 cf 13 f0       	push   $0xf013cf47
f0132510:	e8 e6 dc fc ff       	call   f01001fb <_panic>
f0132515:	8b 15 64 7b 65 f0    	mov    0xf0657b64,%edx
f013251b:	8b 45 08             	mov    0x8(%ebp),%eax
f013251e:	89 10                	mov    %edx,(%eax)
f0132520:	8b 45 08             	mov    0x8(%ebp),%eax
f0132523:	8b 00                	mov    (%eax),%eax
f0132525:	85 c0                	test   %eax,%eax
f0132527:	74 0d                	je     f0132536 <insert_sorted_with_merge_freeList+0x71>
f0132529:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f013252e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132531:	89 50 04             	mov    %edx,0x4(%eax)
f0132534:	eb 08                	jmp    f013253e <insert_sorted_with_merge_freeList+0x79>
f0132536:	8b 45 08             	mov    0x8(%ebp),%eax
f0132539:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f013253e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132541:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132546:	8b 45 08             	mov    0x8(%ebp),%eax
f0132549:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132550:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132555:	40                   	inc    %eax
f0132556:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013255b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013255f:	0f 84 a8 06 00 00    	je     f0132c0d <insert_sorted_with_merge_freeList+0x748>
f0132565:	8b 45 08             	mov    0x8(%ebp),%eax
f0132568:	8b 50 08             	mov    0x8(%eax),%edx
f013256b:	8b 45 08             	mov    0x8(%ebp),%eax
f013256e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132571:	01 c2                	add    %eax,%edx
f0132573:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132576:	8b 40 08             	mov    0x8(%eax),%eax
f0132579:	39 c2                	cmp    %eax,%edx
f013257b:	0f 85 8c 06 00 00    	jne    f0132c0d <insert_sorted_with_merge_freeList+0x748>
		{
			blockToInsert->size += head->size;
f0132581:	8b 45 08             	mov    0x8(%ebp),%eax
f0132584:	8b 50 0c             	mov    0xc(%eax),%edx
f0132587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013258a:	8b 40 0c             	mov    0xc(%eax),%eax
f013258d:	01 c2                	add    %eax,%edx
f013258f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132592:	89 50 0c             	mov    %edx,0xc(%eax)
			LIST_REMOVE(&FreeMemBlocksList, head);
f0132595:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132599:	75 17                	jne    f01325b2 <insert_sorted_with_merge_freeList+0xed>
f013259b:	83 ec 04             	sub    $0x4,%esp
f013259e:	68 f0 cf 13 f0       	push   $0xf013cff0
f01325a3:	68 3c 01 00 00       	push   $0x13c
f01325a8:	68 47 cf 13 f0       	push   $0xf013cf47
f01325ad:	e8 49 dc fc ff       	call   f01001fb <_panic>
f01325b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325b5:	8b 00                	mov    (%eax),%eax
f01325b7:	85 c0                	test   %eax,%eax
f01325b9:	74 10                	je     f01325cb <insert_sorted_with_merge_freeList+0x106>
f01325bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325be:	8b 00                	mov    (%eax),%eax
f01325c0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325c3:	8b 52 04             	mov    0x4(%edx),%edx
f01325c6:	89 50 04             	mov    %edx,0x4(%eax)
f01325c9:	eb 0b                	jmp    f01325d6 <insert_sorted_with_merge_freeList+0x111>
f01325cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325ce:	8b 40 04             	mov    0x4(%eax),%eax
f01325d1:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01325d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325d9:	8b 40 04             	mov    0x4(%eax),%eax
f01325dc:	85 c0                	test   %eax,%eax
f01325de:	74 0f                	je     f01325ef <insert_sorted_with_merge_freeList+0x12a>
f01325e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325e3:	8b 40 04             	mov    0x4(%eax),%eax
f01325e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01325e9:	8b 12                	mov    (%edx),%edx
f01325eb:	89 10                	mov    %edx,(%eax)
f01325ed:	eb 0a                	jmp    f01325f9 <insert_sorted_with_merge_freeList+0x134>
f01325ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325f2:	8b 00                	mov    (%eax),%eax
f01325f4:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01325f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01325fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132602:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132605:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013260c:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132611:	48                   	dec    %eax
f0132612:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			head->size = 0;
f0132617:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013261a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			head->sva = 0;
f0132621:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132624:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
f013262b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013262f:	75 17                	jne    f0132648 <insert_sorted_with_merge_freeList+0x183>
f0132631:	83 ec 04             	sub    $0x4,%esp
f0132634:	68 24 cf 13 f0       	push   $0xf013cf24
f0132639:	68 3f 01 00 00       	push   $0x13f
f013263e:	68 47 cf 13 f0       	push   $0xf013cf47
f0132643:	e8 b3 db fc ff       	call   f01001fb <_panic>
f0132648:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f013264e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132651:	89 10                	mov    %edx,(%eax)
f0132653:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132656:	8b 00                	mov    (%eax),%eax
f0132658:	85 c0                	test   %eax,%eax
f013265a:	74 0d                	je     f0132669 <insert_sorted_with_merge_freeList+0x1a4>
f013265c:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132661:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132664:	89 50 04             	mov    %edx,0x4(%eax)
f0132667:	eb 08                	jmp    f0132671 <insert_sorted_with_merge_freeList+0x1ac>
f0132669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013266c:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132671:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132674:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132679:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013267c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132683:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132688:	40                   	inc    %eax
f0132689:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f013268e:	e9 7a 05 00 00       	jmp    f0132c0d <insert_sorted_with_merge_freeList+0x748>
			head->size = 0;
			head->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, head);
		}
	}
	else if (blockToInsert->sva >= tail->sva)
f0132693:	8b 45 08             	mov    0x8(%ebp),%eax
f0132696:	8b 50 08             	mov    0x8(%eax),%edx
f0132699:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013269c:	8b 40 08             	mov    0x8(%eax),%eax
f013269f:	39 c2                	cmp    %eax,%edx
f01326a1:	0f 82 14 01 00 00    	jb     f01327bb <insert_sorted_with_merge_freeList+0x2f6>
	{
		if(tail->sva + tail->size == blockToInsert->sva)
f01326a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326aa:	8b 50 08             	mov    0x8(%eax),%edx
f01326ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01326b3:	01 c2                	add    %eax,%edx
f01326b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01326b8:	8b 40 08             	mov    0x8(%eax),%eax
f01326bb:	39 c2                	cmp    %eax,%edx
f01326bd:	0f 85 90 00 00 00    	jne    f0132753 <insert_sorted_with_merge_freeList+0x28e>
		{
			tail->size += blockToInsert->size;
f01326c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326c6:	8b 50 0c             	mov    0xc(%eax),%edx
f01326c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01326cc:	8b 40 0c             	mov    0xc(%eax),%eax
f01326cf:	01 c2                	add    %eax,%edx
f01326d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01326d4:	89 50 0c             	mov    %edx,0xc(%eax)
			blockToInsert->size = 0;
f01326d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01326da:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
			blockToInsert->sva = 0;
f01326e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01326e4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01326eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326ef:	75 17                	jne    f0132708 <insert_sorted_with_merge_freeList+0x243>
f01326f1:	83 ec 04             	sub    $0x4,%esp
f01326f4:	68 24 cf 13 f0       	push   $0xf013cf24
f01326f9:	68 49 01 00 00       	push   $0x149
f01326fe:	68 47 cf 13 f0       	push   $0xf013cf47
f0132703:	e8 f3 da fc ff       	call   f01001fb <_panic>
f0132708:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f013270e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132711:	89 10                	mov    %edx,(%eax)
f0132713:	8b 45 08             	mov    0x8(%ebp),%eax
f0132716:	8b 00                	mov    (%eax),%eax
f0132718:	85 c0                	test   %eax,%eax
f013271a:	74 0d                	je     f0132729 <insert_sorted_with_merge_freeList+0x264>
f013271c:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132721:	8b 55 08             	mov    0x8(%ebp),%edx
f0132724:	89 50 04             	mov    %edx,0x4(%eax)
f0132727:	eb 08                	jmp    f0132731 <insert_sorted_with_merge_freeList+0x26c>
f0132729:	8b 45 08             	mov    0x8(%ebp),%eax
f013272c:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132731:	8b 45 08             	mov    0x8(%ebp),%eax
f0132734:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132739:	8b 45 08             	mov    0x8(%ebp),%eax
f013273c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132743:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132748:	40                   	inc    %eax
f0132749:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013274e:	e9 bb 04 00 00       	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
			blockToInsert->size = 0;
			blockToInsert->sva = 0;
			LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
		}
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132753:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132757:	75 17                	jne    f0132770 <insert_sorted_with_merge_freeList+0x2ab>
f0132759:	83 ec 04             	sub    $0x4,%esp
f013275c:	68 98 cf 13 f0       	push   $0xf013cf98
f0132761:	68 4c 01 00 00       	push   $0x14c
f0132766:	68 47 cf 13 f0       	push   $0xf013cf47
f013276b:	e8 8b da fc ff       	call   f01001fb <_panic>
f0132770:	8b 15 68 7b 65 f0    	mov    0xf0657b68,%edx
f0132776:	8b 45 08             	mov    0x8(%ebp),%eax
f0132779:	89 50 04             	mov    %edx,0x4(%eax)
f013277c:	8b 45 08             	mov    0x8(%ebp),%eax
f013277f:	8b 40 04             	mov    0x4(%eax),%eax
f0132782:	85 c0                	test   %eax,%eax
f0132784:	74 0c                	je     f0132792 <insert_sorted_with_merge_freeList+0x2cd>
f0132786:	a1 68 7b 65 f0       	mov    0xf0657b68,%eax
f013278b:	8b 55 08             	mov    0x8(%ebp),%edx
f013278e:	89 10                	mov    %edx,(%eax)
f0132790:	eb 08                	jmp    f013279a <insert_sorted_with_merge_freeList+0x2d5>
f0132792:	8b 45 08             	mov    0x8(%ebp),%eax
f0132795:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f013279a:	8b 45 08             	mov    0x8(%ebp),%eax
f013279d:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f01327a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01327a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01327ab:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01327b0:	40                   	inc    %eax
f01327b1:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01327b6:	e9 53 04 00 00       	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f01327bb:	a1 64 7b 65 f0       	mov    0xf0657b64,%eax
f01327c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01327c3:	e9 15 04 00 00       	jmp    f0132bdd <insert_sorted_with_merge_freeList+0x718>
		{
			nextBlock = LIST_NEXT(currentBlock);
f01327c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327cb:	8b 00                	mov    (%eax),%eax
f01327cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(blockToInsert->sva > currentBlock->sva && blockToInsert->sva < nextBlock->sva)
f01327d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01327d3:	8b 50 08             	mov    0x8(%eax),%edx
f01327d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327d9:	8b 40 08             	mov    0x8(%eax),%eax
f01327dc:	39 c2                	cmp    %eax,%edx
f01327de:	0f 86 f1 03 00 00    	jbe    f0132bd5 <insert_sorted_with_merge_freeList+0x710>
f01327e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01327e7:	8b 50 08             	mov    0x8(%eax),%edx
f01327ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01327ed:	8b 40 08             	mov    0x8(%eax),%eax
f01327f0:	39 c2                	cmp    %eax,%edx
f01327f2:	0f 83 dd 03 00 00    	jae    f0132bd5 <insert_sorted_with_merge_freeList+0x710>
			{
				if(currentBlock->sva + currentBlock->size == blockToInsert->sva)
f01327f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01327fb:	8b 50 08             	mov    0x8(%eax),%edx
f01327fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132801:	8b 40 0c             	mov    0xc(%eax),%eax
f0132804:	01 c2                	add    %eax,%edx
f0132806:	8b 45 08             	mov    0x8(%ebp),%eax
f0132809:	8b 40 08             	mov    0x8(%eax),%eax
f013280c:	39 c2                	cmp    %eax,%edx
f013280e:	0f 85 b9 01 00 00    	jne    f01329cd <insert_sorted_with_merge_freeList+0x508>
				{
					if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f0132814:	8b 45 08             	mov    0x8(%ebp),%eax
f0132817:	8b 50 08             	mov    0x8(%eax),%edx
f013281a:	8b 45 08             	mov    0x8(%ebp),%eax
f013281d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132820:	01 c2                	add    %eax,%edx
f0132822:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132825:	8b 40 08             	mov    0x8(%eax),%eax
f0132828:	39 c2                	cmp    %eax,%edx
f013282a:	0f 85 0d 01 00 00    	jne    f013293d <insert_sorted_with_merge_freeList+0x478>
					{
						currentBlock->size += nextBlock->size;
f0132830:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132833:	8b 50 0c             	mov    0xc(%eax),%edx
f0132836:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132839:	8b 40 0c             	mov    0xc(%eax),%eax
f013283c:	01 c2                	add    %eax,%edx
f013283e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132841:	89 50 0c             	mov    %edx,0xc(%eax)
						LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132844:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132848:	75 17                	jne    f0132861 <insert_sorted_with_merge_freeList+0x39c>
f013284a:	83 ec 04             	sub    $0x4,%esp
f013284d:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132852:	68 5c 01 00 00       	push   $0x15c
f0132857:	68 47 cf 13 f0       	push   $0xf013cf47
f013285c:	e8 9a d9 fc ff       	call   f01001fb <_panic>
f0132861:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132864:	8b 00                	mov    (%eax),%eax
f0132866:	85 c0                	test   %eax,%eax
f0132868:	74 10                	je     f013287a <insert_sorted_with_merge_freeList+0x3b5>
f013286a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013286d:	8b 00                	mov    (%eax),%eax
f013286f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132872:	8b 52 04             	mov    0x4(%edx),%edx
f0132875:	89 50 04             	mov    %edx,0x4(%eax)
f0132878:	eb 0b                	jmp    f0132885 <insert_sorted_with_merge_freeList+0x3c0>
f013287a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013287d:	8b 40 04             	mov    0x4(%eax),%eax
f0132880:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132885:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132888:	8b 40 04             	mov    0x4(%eax),%eax
f013288b:	85 c0                	test   %eax,%eax
f013288d:	74 0f                	je     f013289e <insert_sorted_with_merge_freeList+0x3d9>
f013288f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132892:	8b 40 04             	mov    0x4(%eax),%eax
f0132895:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132898:	8b 12                	mov    (%edx),%edx
f013289a:	89 10                	mov    %edx,(%eax)
f013289c:	eb 0a                	jmp    f01328a8 <insert_sorted_with_merge_freeList+0x3e3>
f013289e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328a1:	8b 00                	mov    (%eax),%eax
f01328a3:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f01328a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01328b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328b4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01328bb:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f01328c0:	48                   	dec    %eax
f01328c1:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
						nextBlock->sva = 0;
f01328c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						nextBlock->size = 0;
f01328d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01328d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
						LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f01328da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01328de:	75 17                	jne    f01328f7 <insert_sorted_with_merge_freeList+0x432>
f01328e0:	83 ec 04             	sub    $0x4,%esp
f01328e3:	68 24 cf 13 f0       	push   $0xf013cf24
f01328e8:	68 5f 01 00 00       	push   $0x15f
f01328ed:	68 47 cf 13 f0       	push   $0xf013cf47
f01328f2:	e8 04 d9 fc ff       	call   f01001fb <_panic>
f01328f7:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f01328fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132900:	89 10                	mov    %edx,(%eax)
f0132902:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132905:	8b 00                	mov    (%eax),%eax
f0132907:	85 c0                	test   %eax,%eax
f0132909:	74 0d                	je     f0132918 <insert_sorted_with_merge_freeList+0x453>
f013290b:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132910:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132913:	89 50 04             	mov    %edx,0x4(%eax)
f0132916:	eb 08                	jmp    f0132920 <insert_sorted_with_merge_freeList+0x45b>
f0132918:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013291b:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132920:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132923:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132928:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013292b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132932:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132937:	40                   	inc    %eax
f0132938:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					}
					currentBlock->size += blockToInsert->size;
f013293d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132940:	8b 50 0c             	mov    0xc(%eax),%edx
f0132943:	8b 45 08             	mov    0x8(%ebp),%eax
f0132946:	8b 40 0c             	mov    0xc(%eax),%eax
f0132949:	01 c2                	add    %eax,%edx
f013294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013294e:	89 50 0c             	mov    %edx,0xc(%eax)
					blockToInsert->sva = 0;
f0132951:	8b 45 08             	mov    0x8(%ebp),%eax
f0132954:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					blockToInsert->size = 0;
f013295b:	8b 45 08             	mov    0x8(%ebp),%eax
f013295e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132965:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132969:	75 17                	jne    f0132982 <insert_sorted_with_merge_freeList+0x4bd>
f013296b:	83 ec 04             	sub    $0x4,%esp
f013296e:	68 24 cf 13 f0       	push   $0xf013cf24
f0132973:	68 64 01 00 00       	push   $0x164
f0132978:	68 47 cf 13 f0       	push   $0xf013cf47
f013297d:	e8 79 d8 fc ff       	call   f01001fb <_panic>
f0132982:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132988:	8b 45 08             	mov    0x8(%ebp),%eax
f013298b:	89 10                	mov    %edx,(%eax)
f013298d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132990:	8b 00                	mov    (%eax),%eax
f0132992:	85 c0                	test   %eax,%eax
f0132994:	74 0d                	je     f01329a3 <insert_sorted_with_merge_freeList+0x4de>
f0132996:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f013299b:	8b 55 08             	mov    0x8(%ebp),%edx
f013299e:	89 50 04             	mov    %edx,0x4(%eax)
f01329a1:	eb 08                	jmp    f01329ab <insert_sorted_with_merge_freeList+0x4e6>
f01329a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01329a6:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f01329ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01329ae:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f01329b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01329b6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329bd:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f01329c2:	40                   	inc    %eax
f01329c3:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f01329c8:	e9 41 02 00 00       	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
				}
				else if(blockToInsert->sva + blockToInsert->size == nextBlock->sva)
f01329cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01329d0:	8b 50 08             	mov    0x8(%eax),%edx
f01329d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01329d6:	8b 40 0c             	mov    0xc(%eax),%eax
f01329d9:	01 c2                	add    %eax,%edx
f01329db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329de:	8b 40 08             	mov    0x8(%eax),%eax
f01329e1:	39 c2                	cmp    %eax,%edx
f01329e3:	0f 85 7c 01 00 00    	jne    f0132b65 <insert_sorted_with_merge_freeList+0x6a0>
				{
					LIST_INSERT_BEFORE(&FreeMemBlocksList, nextBlock, blockToInsert);
f01329e9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01329ed:	74 06                	je     f01329f5 <insert_sorted_with_merge_freeList+0x530>
f01329ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01329f3:	75 17                	jne    f0132a0c <insert_sorted_with_merge_freeList+0x547>
f01329f5:	83 ec 04             	sub    $0x4,%esp
f01329f8:	68 60 cf 13 f0       	push   $0xf013cf60
f01329fd:	68 69 01 00 00       	push   $0x169
f0132a02:	68 47 cf 13 f0       	push   $0xf013cf47
f0132a07:	e8 ef d7 fc ff       	call   f01001fb <_panic>
f0132a0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a0f:	8b 50 04             	mov    0x4(%eax),%edx
f0132a12:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a15:	89 50 04             	mov    %edx,0x4(%eax)
f0132a18:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a1e:	89 10                	mov    %edx,(%eax)
f0132a20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a23:	8b 40 04             	mov    0x4(%eax),%eax
f0132a26:	85 c0                	test   %eax,%eax
f0132a28:	74 0d                	je     f0132a37 <insert_sorted_with_merge_freeList+0x572>
f0132a2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a2d:	8b 40 04             	mov    0x4(%eax),%eax
f0132a30:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a33:	89 10                	mov    %edx,(%eax)
f0132a35:	eb 08                	jmp    f0132a3f <insert_sorted_with_merge_freeList+0x57a>
f0132a37:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a3a:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a42:	8b 55 08             	mov    0x8(%ebp),%edx
f0132a45:	89 50 04             	mov    %edx,0x4(%eax)
f0132a48:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132a4d:	40                   	inc    %eax
f0132a4e:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					blockToInsert->size += nextBlock->size;
f0132a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a56:	8b 50 0c             	mov    0xc(%eax),%edx
f0132a59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a5c:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a5f:	01 c2                	add    %eax,%edx
f0132a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0132a64:	89 50 0c             	mov    %edx,0xc(%eax)
					LIST_REMOVE(&FreeMemBlocksList, nextBlock);
f0132a67:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132a6b:	75 17                	jne    f0132a84 <insert_sorted_with_merge_freeList+0x5bf>
f0132a6d:	83 ec 04             	sub    $0x4,%esp
f0132a70:	68 f0 cf 13 f0       	push   $0xf013cff0
f0132a75:	68 6b 01 00 00       	push   $0x16b
f0132a7a:	68 47 cf 13 f0       	push   $0xf013cf47
f0132a7f:	e8 77 d7 fc ff       	call   f01001fb <_panic>
f0132a84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a87:	8b 00                	mov    (%eax),%eax
f0132a89:	85 c0                	test   %eax,%eax
f0132a8b:	74 10                	je     f0132a9d <insert_sorted_with_merge_freeList+0x5d8>
f0132a8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132a90:	8b 00                	mov    (%eax),%eax
f0132a92:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132a95:	8b 52 04             	mov    0x4(%edx),%edx
f0132a98:	89 50 04             	mov    %edx,0x4(%eax)
f0132a9b:	eb 0b                	jmp    f0132aa8 <insert_sorted_with_merge_freeList+0x5e3>
f0132a9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aa0:	8b 40 04             	mov    0x4(%eax),%eax
f0132aa3:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132aa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aab:	8b 40 04             	mov    0x4(%eax),%eax
f0132aae:	85 c0                	test   %eax,%eax
f0132ab0:	74 0f                	je     f0132ac1 <insert_sorted_with_merge_freeList+0x5fc>
f0132ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ab5:	8b 40 04             	mov    0x4(%eax),%eax
f0132ab8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132abb:	8b 12                	mov    (%edx),%edx
f0132abd:	89 10                	mov    %edx,(%eax)
f0132abf:	eb 0a                	jmp    f0132acb <insert_sorted_with_merge_freeList+0x606>
f0132ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ac4:	8b 00                	mov    (%eax),%eax
f0132ac6:	a3 64 7b 65 f0       	mov    %eax,0xf0657b64
f0132acb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ace:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ad4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132ad7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ade:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132ae3:	48                   	dec    %eax
f0132ae4:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					nextBlock->sva = 0;
f0132ae9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132aec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					nextBlock->size = 0;
f0132af3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132af6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					LIST_INSERT_HEAD(&AvailableMemBlocksList, nextBlock);
f0132afd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132b01:	75 17                	jne    f0132b1a <insert_sorted_with_merge_freeList+0x655>
f0132b03:	83 ec 04             	sub    $0x4,%esp
f0132b06:	68 24 cf 13 f0       	push   $0xf013cf24
f0132b0b:	68 6e 01 00 00       	push   $0x16e
f0132b10:	68 47 cf 13 f0       	push   $0xf013cf47
f0132b15:	e8 e1 d6 fc ff       	call   f01001fb <_panic>
f0132b1a:	8b 15 98 7b 65 f0    	mov    0xf0657b98,%edx
f0132b20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b23:	89 10                	mov    %edx,(%eax)
f0132b25:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b28:	8b 00                	mov    (%eax),%eax
f0132b2a:	85 c0                	test   %eax,%eax
f0132b2c:	74 0d                	je     f0132b3b <insert_sorted_with_merge_freeList+0x676>
f0132b2e:	a1 98 7b 65 f0       	mov    0xf0657b98,%eax
f0132b33:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132b36:	89 50 04             	mov    %edx,0x4(%eax)
f0132b39:	eb 08                	jmp    f0132b43 <insert_sorted_with_merge_freeList+0x67e>
f0132b3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b3e:	a3 9c 7b 65 f0       	mov    %eax,0xf0657b9c
f0132b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b46:	a3 98 7b 65 f0       	mov    %eax,0xf0657b98
f0132b4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b4e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b55:	a1 a4 7b 65 f0       	mov    0xf0657ba4,%eax
f0132b5a:	40                   	inc    %eax
f0132b5b:	a3 a4 7b 65 f0       	mov    %eax,0xf0657ba4
					break;
f0132b60:	e9 a9 00 00 00       	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
				}
				else
				{
					LIST_INSERT_AFTER(&FreeMemBlocksList, currentBlock, blockToInsert);
f0132b65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b69:	74 06                	je     f0132b71 <insert_sorted_with_merge_freeList+0x6ac>
f0132b6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132b6f:	75 17                	jne    f0132b88 <insert_sorted_with_merge_freeList+0x6c3>
f0132b71:	83 ec 04             	sub    $0x4,%esp
f0132b74:	68 bc cf 13 f0       	push   $0xf013cfbc
f0132b79:	68 73 01 00 00       	push   $0x173
f0132b7e:	68 47 cf 13 f0       	push   $0xf013cf47
f0132b83:	e8 73 d6 fc ff       	call   f01001fb <_panic>
f0132b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b8b:	8b 10                	mov    (%eax),%edx
f0132b8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b90:	89 10                	mov    %edx,(%eax)
f0132b92:	8b 45 08             	mov    0x8(%ebp),%eax
f0132b95:	8b 00                	mov    (%eax),%eax
f0132b97:	85 c0                	test   %eax,%eax
f0132b99:	74 0b                	je     f0132ba6 <insert_sorted_with_merge_freeList+0x6e1>
f0132b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b9e:	8b 00                	mov    (%eax),%eax
f0132ba0:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ba3:	89 50 04             	mov    %edx,0x4(%eax)
f0132ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ba9:	8b 55 08             	mov    0x8(%ebp),%edx
f0132bac:	89 10                	mov    %edx,(%eax)
f0132bae:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132bb4:	89 50 04             	mov    %edx,0x4(%eax)
f0132bb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bba:	8b 00                	mov    (%eax),%eax
f0132bbc:	85 c0                	test   %eax,%eax
f0132bbe:	75 08                	jne    f0132bc8 <insert_sorted_with_merge_freeList+0x703>
f0132bc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0132bc3:	a3 68 7b 65 f0       	mov    %eax,0xf0657b68
f0132bc8:	a1 70 7b 65 f0       	mov    0xf0657b70,%eax
f0132bcd:	40                   	inc    %eax
f0132bce:	a3 70 7b 65 f0       	mov    %eax,0xf0657b70
					break;
f0132bd3:	eb 39                	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
	}
	else
	{
		struct MemBlock *currentBlock;
		struct MemBlock *nextBlock;
		LIST_FOREACH(currentBlock, &FreeMemBlocksList)
f0132bd5:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132bda:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132bdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132be1:	74 07                	je     f0132bea <insert_sorted_with_merge_freeList+0x725>
f0132be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132be6:	8b 00                	mov    (%eax),%eax
f0132be8:	eb 05                	jmp    f0132bef <insert_sorted_with_merge_freeList+0x72a>
f0132bea:	b8 00 00 00 00       	mov    $0x0,%eax
f0132bef:	a3 6c 7b 65 f0       	mov    %eax,0xf0657b6c
f0132bf4:	a1 6c 7b 65 f0       	mov    0xf0657b6c,%eax
f0132bf9:	85 c0                	test   %eax,%eax
f0132bfb:	0f 85 c7 fb ff ff    	jne    f01327c8 <insert_sorted_with_merge_freeList+0x303>
f0132c01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c05:	0f 85 bd fb ff ff    	jne    f01327c8 <insert_sorted_with_merge_freeList+0x303>
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132c0b:	eb 01                	jmp    f0132c0e <insert_sorted_with_merge_freeList+0x749>
	struct MemBlock *tail = LIST_LAST(&FreeMemBlocksList) ;

	if (LIST_EMPTY(&FreeMemBlocksList) || blockToInsert->sva <= head->sva)
	{
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
		if(head != NULL && blockToInsert->sva + blockToInsert->size == head->sva)
f0132c0d:	90                   	nop
			}
		}
	}
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0132c0e:	90                   	nop
f0132c0f:	c9                   	leave  
f0132c10:	c3                   	ret    
f0132c11:	66 90                	xchg   %ax,%ax
f0132c13:	90                   	nop

f0132c14 <__udivdi3>:
f0132c14:	55                   	push   %ebp
f0132c15:	57                   	push   %edi
f0132c16:	56                   	push   %esi
f0132c17:	53                   	push   %ebx
f0132c18:	83 ec 1c             	sub    $0x1c,%esp
f0132c1b:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132c1f:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132c23:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132c27:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0132c2b:	89 ca                	mov    %ecx,%edx
f0132c2d:	89 f8                	mov    %edi,%eax
f0132c2f:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0132c33:	85 f6                	test   %esi,%esi
f0132c35:	75 2d                	jne    f0132c64 <__udivdi3+0x50>
f0132c37:	39 cf                	cmp    %ecx,%edi
f0132c39:	77 65                	ja     f0132ca0 <__udivdi3+0x8c>
f0132c3b:	89 fd                	mov    %edi,%ebp
f0132c3d:	85 ff                	test   %edi,%edi
f0132c3f:	75 0b                	jne    f0132c4c <__udivdi3+0x38>
f0132c41:	b8 01 00 00 00       	mov    $0x1,%eax
f0132c46:	31 d2                	xor    %edx,%edx
f0132c48:	f7 f7                	div    %edi
f0132c4a:	89 c5                	mov    %eax,%ebp
f0132c4c:	31 d2                	xor    %edx,%edx
f0132c4e:	89 c8                	mov    %ecx,%eax
f0132c50:	f7 f5                	div    %ebp
f0132c52:	89 c1                	mov    %eax,%ecx
f0132c54:	89 d8                	mov    %ebx,%eax
f0132c56:	f7 f5                	div    %ebp
f0132c58:	89 cf                	mov    %ecx,%edi
f0132c5a:	89 fa                	mov    %edi,%edx
f0132c5c:	83 c4 1c             	add    $0x1c,%esp
f0132c5f:	5b                   	pop    %ebx
f0132c60:	5e                   	pop    %esi
f0132c61:	5f                   	pop    %edi
f0132c62:	5d                   	pop    %ebp
f0132c63:	c3                   	ret    
f0132c64:	39 ce                	cmp    %ecx,%esi
f0132c66:	77 28                	ja     f0132c90 <__udivdi3+0x7c>
f0132c68:	0f bd fe             	bsr    %esi,%edi
f0132c6b:	83 f7 1f             	xor    $0x1f,%edi
f0132c6e:	75 40                	jne    f0132cb0 <__udivdi3+0x9c>
f0132c70:	39 ce                	cmp    %ecx,%esi
f0132c72:	72 0a                	jb     f0132c7e <__udivdi3+0x6a>
f0132c74:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0132c78:	0f 87 9e 00 00 00    	ja     f0132d1c <__udivdi3+0x108>
f0132c7e:	b8 01 00 00 00       	mov    $0x1,%eax
f0132c83:	89 fa                	mov    %edi,%edx
f0132c85:	83 c4 1c             	add    $0x1c,%esp
f0132c88:	5b                   	pop    %ebx
f0132c89:	5e                   	pop    %esi
f0132c8a:	5f                   	pop    %edi
f0132c8b:	5d                   	pop    %ebp
f0132c8c:	c3                   	ret    
f0132c8d:	8d 76 00             	lea    0x0(%esi),%esi
f0132c90:	31 ff                	xor    %edi,%edi
f0132c92:	31 c0                	xor    %eax,%eax
f0132c94:	89 fa                	mov    %edi,%edx
f0132c96:	83 c4 1c             	add    $0x1c,%esp
f0132c99:	5b                   	pop    %ebx
f0132c9a:	5e                   	pop    %esi
f0132c9b:	5f                   	pop    %edi
f0132c9c:	5d                   	pop    %ebp
f0132c9d:	c3                   	ret    
f0132c9e:	66 90                	xchg   %ax,%ax
f0132ca0:	89 d8                	mov    %ebx,%eax
f0132ca2:	f7 f7                	div    %edi
f0132ca4:	31 ff                	xor    %edi,%edi
f0132ca6:	89 fa                	mov    %edi,%edx
f0132ca8:	83 c4 1c             	add    $0x1c,%esp
f0132cab:	5b                   	pop    %ebx
f0132cac:	5e                   	pop    %esi
f0132cad:	5f                   	pop    %edi
f0132cae:	5d                   	pop    %ebp
f0132caf:	c3                   	ret    
f0132cb0:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132cb5:	89 eb                	mov    %ebp,%ebx
f0132cb7:	29 fb                	sub    %edi,%ebx
f0132cb9:	89 f9                	mov    %edi,%ecx
f0132cbb:	d3 e6                	shl    %cl,%esi
f0132cbd:	89 c5                	mov    %eax,%ebp
f0132cbf:	88 d9                	mov    %bl,%cl
f0132cc1:	d3 ed                	shr    %cl,%ebp
f0132cc3:	89 e9                	mov    %ebp,%ecx
f0132cc5:	09 f1                	or     %esi,%ecx
f0132cc7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0132ccb:	89 f9                	mov    %edi,%ecx
f0132ccd:	d3 e0                	shl    %cl,%eax
f0132ccf:	89 c5                	mov    %eax,%ebp
f0132cd1:	89 d6                	mov    %edx,%esi
f0132cd3:	88 d9                	mov    %bl,%cl
f0132cd5:	d3 ee                	shr    %cl,%esi
f0132cd7:	89 f9                	mov    %edi,%ecx
f0132cd9:	d3 e2                	shl    %cl,%edx
f0132cdb:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132cdf:	88 d9                	mov    %bl,%cl
f0132ce1:	d3 e8                	shr    %cl,%eax
f0132ce3:	09 c2                	or     %eax,%edx
f0132ce5:	89 d0                	mov    %edx,%eax
f0132ce7:	89 f2                	mov    %esi,%edx
f0132ce9:	f7 74 24 0c          	divl   0xc(%esp)
f0132ced:	89 d6                	mov    %edx,%esi
f0132cef:	89 c3                	mov    %eax,%ebx
f0132cf1:	f7 e5                	mul    %ebp
f0132cf3:	39 d6                	cmp    %edx,%esi
f0132cf5:	72 19                	jb     f0132d10 <__udivdi3+0xfc>
f0132cf7:	74 0b                	je     f0132d04 <__udivdi3+0xf0>
f0132cf9:	89 d8                	mov    %ebx,%eax
f0132cfb:	31 ff                	xor    %edi,%edi
f0132cfd:	e9 58 ff ff ff       	jmp    f0132c5a <__udivdi3+0x46>
f0132d02:	66 90                	xchg   %ax,%ax
f0132d04:	8b 54 24 08          	mov    0x8(%esp),%edx
f0132d08:	89 f9                	mov    %edi,%ecx
f0132d0a:	d3 e2                	shl    %cl,%edx
f0132d0c:	39 c2                	cmp    %eax,%edx
f0132d0e:	73 e9                	jae    f0132cf9 <__udivdi3+0xe5>
f0132d10:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132d13:	31 ff                	xor    %edi,%edi
f0132d15:	e9 40 ff ff ff       	jmp    f0132c5a <__udivdi3+0x46>
f0132d1a:	66 90                	xchg   %ax,%ax
f0132d1c:	31 c0                	xor    %eax,%eax
f0132d1e:	e9 37 ff ff ff       	jmp    f0132c5a <__udivdi3+0x46>
f0132d23:	90                   	nop

f0132d24 <__umoddi3>:
f0132d24:	55                   	push   %ebp
f0132d25:	57                   	push   %edi
f0132d26:	56                   	push   %esi
f0132d27:	53                   	push   %ebx
f0132d28:	83 ec 1c             	sub    $0x1c,%esp
f0132d2b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0132d2f:	8b 74 24 34          	mov    0x34(%esp),%esi
f0132d33:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0132d37:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0132d3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0132d3f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0132d43:	89 f3                	mov    %esi,%ebx
f0132d45:	89 fa                	mov    %edi,%edx
f0132d47:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132d4b:	89 34 24             	mov    %esi,(%esp)
f0132d4e:	85 c0                	test   %eax,%eax
f0132d50:	75 1a                	jne    f0132d6c <__umoddi3+0x48>
f0132d52:	39 f7                	cmp    %esi,%edi
f0132d54:	0f 86 a2 00 00 00    	jbe    f0132dfc <__umoddi3+0xd8>
f0132d5a:	89 c8                	mov    %ecx,%eax
f0132d5c:	89 f2                	mov    %esi,%edx
f0132d5e:	f7 f7                	div    %edi
f0132d60:	89 d0                	mov    %edx,%eax
f0132d62:	31 d2                	xor    %edx,%edx
f0132d64:	83 c4 1c             	add    $0x1c,%esp
f0132d67:	5b                   	pop    %ebx
f0132d68:	5e                   	pop    %esi
f0132d69:	5f                   	pop    %edi
f0132d6a:	5d                   	pop    %ebp
f0132d6b:	c3                   	ret    
f0132d6c:	39 f0                	cmp    %esi,%eax
f0132d6e:	0f 87 ac 00 00 00    	ja     f0132e20 <__umoddi3+0xfc>
f0132d74:	0f bd e8             	bsr    %eax,%ebp
f0132d77:	83 f5 1f             	xor    $0x1f,%ebp
f0132d7a:	0f 84 ac 00 00 00    	je     f0132e2c <__umoddi3+0x108>
f0132d80:	bf 20 00 00 00       	mov    $0x20,%edi
f0132d85:	29 ef                	sub    %ebp,%edi
f0132d87:	89 fe                	mov    %edi,%esi
f0132d89:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132d8d:	89 e9                	mov    %ebp,%ecx
f0132d8f:	d3 e0                	shl    %cl,%eax
f0132d91:	89 d7                	mov    %edx,%edi
f0132d93:	89 f1                	mov    %esi,%ecx
f0132d95:	d3 ef                	shr    %cl,%edi
f0132d97:	09 c7                	or     %eax,%edi
f0132d99:	89 e9                	mov    %ebp,%ecx
f0132d9b:	d3 e2                	shl    %cl,%edx
f0132d9d:	89 14 24             	mov    %edx,(%esp)
f0132da0:	89 d8                	mov    %ebx,%eax
f0132da2:	d3 e0                	shl    %cl,%eax
f0132da4:	89 c2                	mov    %eax,%edx
f0132da6:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132daa:	d3 e0                	shl    %cl,%eax
f0132dac:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132db0:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132db4:	89 f1                	mov    %esi,%ecx
f0132db6:	d3 e8                	shr    %cl,%eax
f0132db8:	09 d0                	or     %edx,%eax
f0132dba:	d3 eb                	shr    %cl,%ebx
f0132dbc:	89 da                	mov    %ebx,%edx
f0132dbe:	f7 f7                	div    %edi
f0132dc0:	89 d3                	mov    %edx,%ebx
f0132dc2:	f7 24 24             	mull   (%esp)
f0132dc5:	89 c6                	mov    %eax,%esi
f0132dc7:	89 d1                	mov    %edx,%ecx
f0132dc9:	39 d3                	cmp    %edx,%ebx
f0132dcb:	0f 82 87 00 00 00    	jb     f0132e58 <__umoddi3+0x134>
f0132dd1:	0f 84 91 00 00 00    	je     f0132e68 <__umoddi3+0x144>
f0132dd7:	8b 54 24 04          	mov    0x4(%esp),%edx
f0132ddb:	29 f2                	sub    %esi,%edx
f0132ddd:	19 cb                	sbb    %ecx,%ebx
f0132ddf:	89 d8                	mov    %ebx,%eax
f0132de1:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132de5:	d3 e0                	shl    %cl,%eax
f0132de7:	89 e9                	mov    %ebp,%ecx
f0132de9:	d3 ea                	shr    %cl,%edx
f0132deb:	09 d0                	or     %edx,%eax
f0132ded:	89 e9                	mov    %ebp,%ecx
f0132def:	d3 eb                	shr    %cl,%ebx
f0132df1:	89 da                	mov    %ebx,%edx
f0132df3:	83 c4 1c             	add    $0x1c,%esp
f0132df6:	5b                   	pop    %ebx
f0132df7:	5e                   	pop    %esi
f0132df8:	5f                   	pop    %edi
f0132df9:	5d                   	pop    %ebp
f0132dfa:	c3                   	ret    
f0132dfb:	90                   	nop
f0132dfc:	89 fd                	mov    %edi,%ebp
f0132dfe:	85 ff                	test   %edi,%edi
f0132e00:	75 0b                	jne    f0132e0d <__umoddi3+0xe9>
f0132e02:	b8 01 00 00 00       	mov    $0x1,%eax
f0132e07:	31 d2                	xor    %edx,%edx
f0132e09:	f7 f7                	div    %edi
f0132e0b:	89 c5                	mov    %eax,%ebp
f0132e0d:	89 f0                	mov    %esi,%eax
f0132e0f:	31 d2                	xor    %edx,%edx
f0132e11:	f7 f5                	div    %ebp
f0132e13:	89 c8                	mov    %ecx,%eax
f0132e15:	f7 f5                	div    %ebp
f0132e17:	89 d0                	mov    %edx,%eax
f0132e19:	e9 44 ff ff ff       	jmp    f0132d62 <__umoddi3+0x3e>
f0132e1e:	66 90                	xchg   %ax,%ax
f0132e20:	89 c8                	mov    %ecx,%eax
f0132e22:	89 f2                	mov    %esi,%edx
f0132e24:	83 c4 1c             	add    $0x1c,%esp
f0132e27:	5b                   	pop    %ebx
f0132e28:	5e                   	pop    %esi
f0132e29:	5f                   	pop    %edi
f0132e2a:	5d                   	pop    %ebp
f0132e2b:	c3                   	ret    
f0132e2c:	3b 04 24             	cmp    (%esp),%eax
f0132e2f:	72 06                	jb     f0132e37 <__umoddi3+0x113>
f0132e31:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0132e35:	77 0f                	ja     f0132e46 <__umoddi3+0x122>
f0132e37:	89 f2                	mov    %esi,%edx
f0132e39:	29 f9                	sub    %edi,%ecx
f0132e3b:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0132e3f:	89 14 24             	mov    %edx,(%esp)
f0132e42:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0132e46:	8b 44 24 04          	mov    0x4(%esp),%eax
f0132e4a:	8b 14 24             	mov    (%esp),%edx
f0132e4d:	83 c4 1c             	add    $0x1c,%esp
f0132e50:	5b                   	pop    %ebx
f0132e51:	5e                   	pop    %esi
f0132e52:	5f                   	pop    %edi
f0132e53:	5d                   	pop    %ebp
f0132e54:	c3                   	ret    
f0132e55:	8d 76 00             	lea    0x0(%esi),%esi
f0132e58:	2b 04 24             	sub    (%esp),%eax
f0132e5b:	19 fa                	sbb    %edi,%edx
f0132e5d:	89 d1                	mov    %edx,%ecx
f0132e5f:	89 c6                	mov    %eax,%esi
f0132e61:	e9 71 ff ff ff       	jmp    f0132dd7 <__umoddi3+0xb3>
f0132e66:	66 90                	xchg   %ax,%ax
f0132e68:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0132e6c:	72 ea                	jb     f0132e58 <__umoddi3+0x134>
f0132e6e:	89 d9                	mov    %ebx,%ecx
f0132e70:	e9 62 ff ff ff       	jmp    f0132dd7 <__umoddi3+0xb3>
